{"sha": "d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NGE3YTgzZDc4ZTgyYmRhOWE4Y2RmMWQxMGYzZDYyMTFkMDM1ZjY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-29T09:50:03Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-29T09:55:29Z"}, "message": "Fail with an informative error when trying to bind a method\n\nIssue #435", "tree": {"sha": "647e8ea5a9416e2ef410a2db56482f0b57ebb4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647e8ea5a9416e2ef410a2db56482f0b57ebb4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6", "html_url": "https://github.com/rust-lang/rust/commit/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d243ea57f515d0829b900a12fec4dc110c5374dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d243ea57f515d0829b900a12fec4dc110c5374dd", "html_url": "https://github.com/rust-lang/rust/commit/d243ea57f515d0829b900a12fec4dc110c5374dd"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "97674a1b4dad0c37d9bb149eefda11232aaa1c54", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d74a7a83d78e82bda9a8cdf1d10f3d6211d035f6", "patch": "@@ -2983,7 +2983,7 @@ type generic_info =\n type lval_result = {bcx: @block_ctxt,\n                     val: ValueRef,\n                     is_mem: bool};\n-tag callee_env { some_env(ValueRef); null_env; is_closure; }\n+tag callee_env { obj_env(ValueRef); null_env; is_closure; }\n type lval_maybe_callee = {bcx: @block_ctxt,\n                           val: ValueRef,\n                           is_mem: bool,\n@@ -3191,7 +3191,7 @@ fn trans_field_inner(cx: @block_ctxt, sp: span, v: ValueRef, t0: ty::t,\n                        ret_ty, 0u);\n         v = Load(r.bcx, PointerCast(r.bcx, v, T_ptr(T_ptr(ll_fn_ty))));\n         ret {bcx: r.bcx, val: v, is_mem: true,\n-             env: some_env(r.val), generic: none};\n+             env: obj_env(r.val), generic: none};\n       }\n       _ { bcx_ccx(cx).sess.unimpl(\"field variant in trans_field\"); }\n     }\n@@ -3342,15 +3342,15 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n \n fn maybe_add_env(bcx: @block_ctxt, c: lval_maybe_callee)\n     -> (bool, ValueRef) {\n-    if c.env == is_closure {\n-        (c.is_mem, c.val)\n-    } else {\n-        let env = alt c.env {\n-          null_env. { null_env_ptr(bcx) }\n-          some_env(e) { e }\n-        };\n+    alt c.env {\n+      is_closure. { (c.is_mem, c.val) }\n+      obj_env(_) {\n+        fail \"Taking the value of a method does not work yet (issue #435)\";\n+      }\n+      null_env. {\n         let llfnty = llvm::LLVMGetElementType(val_ty(c.val));\n-        (false, create_real_fn_pair(bcx, llfnty, c.val, env))\n+        (false, create_real_fn_pair(bcx, llfnty, c.val, null_env_ptr(bcx)))\n+      }\n     }\n }\n \n@@ -3904,7 +3904,7 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n       null_env. {\n         llenv = llvm::LLVMGetUndef(T_opaque_closure_ptr(*bcx_ccx(cx)));\n       }\n-      some_env(e) { llenv = e; }\n+      obj_env(e) { llenv = e; }\n       is_closure. {\n         // It's a closure. Have to fetch the elements\n         if f_res.is_mem { faddr = load_if_immediate(bcx, faddr, fn_expr_ty); }"}]}