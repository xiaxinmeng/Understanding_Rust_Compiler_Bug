{"sha": "eb828ed9ff17eee767d72986d1cfc7516cbbf663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODI4ZWQ5ZmYxN2VlZTc2N2Q3Mjk4NmQxY2ZjNzUxNmNiYmY2NjM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:17:38Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-27T15:17:38Z"}, "message": "Preserve blank line between doc comment and attribute", "tree": {"sha": "654511645b07d1413b527ffa68632bea52a1c09e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654511645b07d1413b527ffa68632bea52a1c09e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb828ed9ff17eee767d72986d1cfc7516cbbf663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb828ed9ff17eee767d72986d1cfc7516cbbf663", "html_url": "https://github.com/rust-lang/rust/commit/eb828ed9ff17eee767d72986d1cfc7516cbbf663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb828ed9ff17eee767d72986d1cfc7516cbbf663/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c55285daf803750ec21ecdb77b6a04eb464566", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c55285daf803750ec21ecdb77b6a04eb464566", "html_url": "https://github.com/rust-lang/rust/commit/c4c55285daf803750ec21ecdb77b6a04eb464566"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "e6872078365903fd4b776f9ef8aa568b1747e5a9", "filename": "src/visitor.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eb828ed9ff17eee767d72986d1cfc7516cbbf663/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb828ed9ff17eee767d72986d1cfc7516cbbf663/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=eb828ed9ff17eee767d72986d1cfc7516cbbf663", "patch": "@@ -18,7 +18,8 @@ use syntax::parse::ParseSess;\n \n use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{contains_comment, CodeCharKind, CommentCodeSlices, FindUncommented};\n+use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, CommentCodeSlices,\n+              FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n use expr::{format_expr, ExprType};\n@@ -928,6 +929,8 @@ impl<'a> Rewrite for [ast::Attribute] {\n         let mut derive_args = Vec::new();\n \n         let mut iter = self.iter().enumerate().peekable();\n+        let mut insert_new_line = true;\n+        let mut is_prev_sugared_doc = false;\n         while let Some((i, a)) = iter.next() {\n             let a_str = try_opt!(a.rewrite(context, shape));\n \n@@ -937,31 +940,61 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 // This particular horror show is to preserve line breaks in between doc\n                 // comments. An alternative would be to force such line breaks to start\n                 // with the usual doc comment token.\n-                let multi_line = a_str.starts_with(\"//\") && comment.matches('\\n').count() > 1;\n-                let comment = comment.trim();\n+                let (multi_line_before, multi_line_after) = if a.is_sugared_doc ||\n+                    is_prev_sugared_doc\n+                {\n+                    // Look at before and after comment and see if there are any empty lines.\n+                    let comment_begin = comment.chars().position(|c| c == '/');\n+                    let len = comment_begin.unwrap_or(comment.len());\n+                    let mlb = comment.chars().take(len).filter(|c| *c == '\\n').count() > 1;\n+                    let mla = if comment_begin.is_none() {\n+                        mlb\n+                    } else {\n+                        let comment_end = comment.chars().rev().position(|c| !c.is_whitespace());\n+                        let len = comment_end.unwrap();\n+                        comment\n+                            .chars()\n+                            .rev()\n+                            .take(len)\n+                            .filter(|c| *c == '\\n')\n+                            .count() > 1\n+                    };\n+                    (mlb, mla)\n+                } else {\n+                    (false, false)\n+                };\n+\n+                let comment = try_opt!(recover_missing_comment_in_span(\n+                    mk_sp(self[i - 1].span.hi, a.span.lo),\n+                    shape.with_max_width(context.config),\n+                    context,\n+                    0,\n+                ));\n+\n                 if !comment.is_empty() {\n-                    let comment = try_opt!(rewrite_comment(\n-                        comment,\n-                        false,\n-                        Shape::legacy(\n-                            context.config.comment_width() - shape.indent.width(),\n-                            shape.indent,\n-                        ),\n-                        context.config,\n-                    ));\n-                    result.push_str(&indent);\n+                    if multi_line_before {\n+                        result.push('\\n');\n+                    }\n                     result.push_str(&comment);\n                     result.push('\\n');\n-                } else if multi_line {\n+                    if multi_line_after {\n+                        result.push('\\n')\n+                    }\n+                } else if insert_new_line {\n                     result.push('\\n');\n+                    if multi_line_after {\n+                        result.push('\\n')\n+                    }\n                 }\n+\n                 if derive_args.is_empty() {\n                     result.push_str(&indent);\n                 }\n+\n+                insert_new_line = true;\n             }\n \n             // Write the attribute itself.\n-            let mut insert_new_line = true;\n             if context.config.merge_derives() {\n                 // If the attribute is `#[derive(...)]`, take the arguments.\n                 if let Some(mut args) = get_derive_args(context, a) {\n@@ -982,9 +1015,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 result.push_str(&a_str);\n             }\n \n-            if insert_new_line && i < self.len() - 1 {\n-                result.push('\\n');\n-            }\n+            is_prev_sugared_doc = a.is_sugared_doc;\n         }\n         Some(result)\n     }"}]}