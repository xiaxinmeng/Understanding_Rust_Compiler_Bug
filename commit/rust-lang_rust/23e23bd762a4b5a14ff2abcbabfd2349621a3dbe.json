{"sha": "23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZTIzYmQ3NjJhNGI1YTE0ZmYyYWJjYmFiZmQyMzQ5NjIxYTNkYmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-03-23T00:25:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-23T00:31:27Z"}, "message": "Further support for floating-point. Literals with exponents work\nand literals with the 'f32' or 'f64' suffixes work as well. In\naddition, logging things with the f32 or f64 type works. (float is\nstill assumed to be a synonym for f64).", "tree": {"sha": "a0ff672d10f7a87a22d1eb047632f3b96dfe5317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ff672d10f7a87a22d1eb047632f3b96dfe5317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "html_url": "https://github.com/rust-lang/rust/commit/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0", "html_url": "https://github.com/rust-lang/rust/commit/d56971d5b466dd2bcd2ed147fd1668f06c7dbca0"}], "stats": {"total": 177, "additions": 152, "deletions": 25}, "files": [{"sha": "d11afa682a9f6cb7f179f51032544e8d7b43b2fa", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -486,7 +486,8 @@ rustllvm/%.o: rustllvm/%.cpp $(MKFILES)\n \n # Float doesn't work in boot\n \n-FLOAT_XFAILS := test/run-pass/float.rs\n+FLOAT_XFAILS := test/run-pass/float.rs \\\n+                test/run-pass/float2.rs\n \n # Temporarily xfail tests broken by the nominal-tags change.\n "}, {"sha": "66c87e9afd70ed2934e884a0f47c9f81e62e0946", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -419,7 +419,8 @@ self: $(CFG_RUSTC)\n \n # Float doesn't work in boot\n \n-FLOAT_XFAILS := test/run-pass/float.rs\n+FLOAT_XFAILS := test/run-pass/float.rs \\\n+                test/run-pass/float2.rs\n \n # Temporarily xfail tests broken by the nominal-tags change.\n "}, {"sha": "d48792d117ea69870a07cdb244f8354821f8094b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -256,6 +256,7 @@ tag lit_ {\n     lit_uint(uint);\n     lit_mach_int(ty_mach, int);\n     lit_float(str);\n+    lit_mach_float(ty_mach, str);\n     lit_nil;\n     lit_bool(bool);\n }"}, {"sha": "aa7f2ce1f5e28534f8749e63e09eeef3686d8ead", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -3,6 +3,9 @@ import std._str;\n import std._int;\n import std.map;\n import std.map.hashmap;\n+import std.option;\n+import std.option.some;\n+import std.option.none;\n import util.common;\n import util.common.new_str_hash;\n \n@@ -333,6 +336,27 @@ impure fn scan_dec_digits(reader rdr) -> int {\n     ret accum_int;\n }\n \n+impure fn scan_exponent(reader rdr) -> option.t[int] {\n+    auto c = rdr.curr();\n+    auto sign = 1;\n+\n+    if (c == 'e' || c == 'E') {\n+        rdr.bump();\n+        c = rdr.curr();\n+        if (c == '-') {\n+            sign = -1;\n+            rdr.bump();\n+        } else if (c == '+') {\n+            rdr.bump();\n+        }\n+        auto exponent = scan_dec_digits(rdr);\n+        ret(some(sign * exponent));\n+    }\n+    else {\n+        ret none[int];\n+    }\n+}\n+\n impure fn scan_number(mutable char c, reader rdr) -> token.token {\n     auto accum_int = 0;\n     auto n = rdr.next();\n@@ -418,17 +442,54 @@ impure fn scan_number(mutable char c, reader rdr) -> token.token {\n             ret token.LIT_UINT(accum_int as uint);\n         }\n     }\n-    n = rdr.curr();\n-    if(n == '.') {\n+    c = rdr.curr();\n+    if (c == '.') {\n         // Parse a floating-point number.\n         rdr.bump();\n         auto accum_int1 = scan_dec_digits(rdr);\n-        ret token.LIT_FLOAT(_int.to_str(accum_int, 10u) + \".\"\n-                          + _int.to_str(accum_int1, 10u));\n-        // FIXME: Parse exponent.\n+        auto base_str =   _int.to_str(accum_int, 10u) + \".\"\n+            + _int.to_str(accum_int1, 10u);\n+        c = rdr.curr();\n+        auto exponent_str = \"\";\n+        let option.t[int] maybe_exponent = scan_exponent(rdr);\n+        alt(maybe_exponent) {\n+            case(some[int](?i)) {\n+                exponent_str = \"e\" + _int.to_str(i, 10u);\n+            }\n+            case(none[int]) {\n+            }\n+        }\n+\n+        c = rdr.curr();\n+        if (c == 'f') {\n+            rdr.bump();\n+            c = rdr.curr();\n+            n = rdr.next();\n+            if (c == '3' && n == '2') {\n+                rdr.bump(); rdr.bump();\n+                ret token.LIT_MACH_FLOAT(util.common.ty_f32,\n+                                         base_str + exponent_str);\n+            }\n+            else if (c == '6' && n == '4') {\n+                rdr.bump(); rdr.bump();\n+                ret token.LIT_MACH_FLOAT(util.common.ty_f64,\n+                                         base_str + exponent_str);\n+            }\n+        }\n+        else {\n+            ret token.LIT_FLOAT(base_str + exponent_str);\n+        }\n     }\n-    else {\n-        ret token.LIT_INT(accum_int);\n+\n+    auto maybe_exponent = scan_exponent(rdr);\n+    alt(maybe_exponent) {\n+        case(some[int](?i)) {\n+            ret token.LIT_FLOAT(_int.to_str(accum_int, 10u)\n+                                + \"e\" + _int.to_str(i, 10u));\n+        }\n+        case(none[int]) {\n+            ret token.LIT_INT(accum_int);\n+        }\n     }\n }\n "}, {"sha": "9e13e706af4ebbffcc1ee44b581de514960097b5", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -545,6 +545,10 @@ impure fn parse_lit(parser p) -> ast.lit {\n             p.bump();\n             lit = ast.lit_mach_int(tm, i);\n         }\n+        case (token.LIT_MACH_FLOAT(?tm, ?s)) {\n+            p.bump();\n+            lit = ast.lit_mach_float(tm, s);\n+        }\n         case (token.LIT_CHAR(?c)) {\n             p.bump();\n             lit = ast.lit_char(c);"}, {"sha": "46fd0735641f2a89ab74c4662b752719a9162f7e", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -127,6 +127,7 @@ tag token {\n     LIT_UINT(uint);\n     LIT_MACH_INT(ty_mach, int);\n     LIT_FLOAT(str);\n+    LIT_MACH_FLOAT(ty_mach, str);\n     LIT_STR(str);\n     LIT_CHAR(char);\n     LIT_BOOL(bool);"}, {"sha": "b7fb0687d1d71a8f746a3032f95abc6d6c42013f", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -763,6 +763,10 @@ fn C_float(str s) -> ValueRef {\n     ret llvm.LLVMConstRealOfString(T_float(), _str.buf(s));\n }\n \n+fn C_floating(str s, TypeRef t) -> ValueRef {\n+    ret llvm.LLVMConstRealOfString(t, _str.buf(s));\n+}\n+\n fn C_nil() -> ValueRef {\n     // NB: See comment above in T_void().\n     ret C_integral(0, T_i1());\n@@ -2338,6 +2342,14 @@ fn trans_lit(@crate_ctxt cx, &ast.lit lit, &ast.ann ann) -> ValueRef {\n         case(ast.lit_float(?fs)) {\n             ret C_float(fs);\n         }\n+        case(ast.lit_mach_float(?tm, ?s)) {\n+            auto t = T_float();\n+            alt(tm) {\n+                case(common.ty_f32) { t = T_f32(); }\n+                case(common.ty_f64) { t = T_f64(); }\n+            }\n+            ret C_floating(s, t);\n+        }\n         case (ast.lit_char(?c)) {\n             ret C_integral(c as int, T_char());\n         }\n@@ -2719,15 +2731,15 @@ fn trans_eager_binop(@block_ctxt cx, ast.binop op, @ty.t intype,\n                      ValueRef lhs, ValueRef rhs) -> result {\n \n     auto is_float = false;\n-    alt(intype.struct) {\n+    alt (intype.struct) {\n         case (ty.ty_float) {\n             is_float = true;\n         }\n         case (_) {\n             is_float = false;\n         }\n     }\n-     \n+\n     alt (op) {\n         case (ast.add) {\n             if (ty.type_is_sequence(intype)) {\n@@ -2749,7 +2761,7 @@ fn trans_eager_binop(@block_ctxt cx, ast.binop op, @ty.t intype,\n             }\n         }\n \n-        case (ast.mul) { \n+        case (ast.mul) {\n             if (is_float) {\n                 ret res(cx, cx.build.FMul(lhs, rhs));\n             }\n@@ -4582,13 +4594,33 @@ fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n \n     auto sub = trans_expr(cx, e);\n     auto e_ty = ty.expr_ty(e);\n-    alt (e_ty.struct) {\n-        case(ty.ty_float) {\n-            auto tmp = sub.bcx.build.Alloca(T_float());\n+    if (ty.type_is_fp(e_ty)) {\n+        let TypeRef tr;\n+        let bool is32bit = false;\n+        alt (e_ty.struct) {\n+            case (ty.ty_machine(util.common.ty_f32)) {\n+                tr = T_f32();\n+                is32bit = true;\n+            }\n+            case (ty.ty_machine(util.common.ty_f64)) {\n+                tr = T_f64();\n+            }\n+            case (_) {\n+                tr = T_float();\n+            }\n+        }\n+        if (is32bit) {\n+            ret trans_upcall(sub.bcx,\n+                             \"upcall_log_float\",\n+                             vec(sub.val));\n+        } else {\n+            auto tmp = sub.bcx.build.Alloca(tr);\n             sub.bcx.build.Store(sub.val, tmp);\n-            sub = res(sub.bcx, tmp);\n+            auto v = vp2i(sub.bcx, tmp);\n+            ret trans_upcall(sub.bcx,\n+                             \"upcall_log_double\",\n+                             vec(v));\n         }\n-        case(_) { }\n     }\n \n     alt (e_ty.struct) {\n@@ -4598,12 +4630,6 @@ fn trans_log(@block_ctxt cx, @ast.expr e) -> result {\n                              \"upcall_log_str\",\n                              vec(v));\n         }\n-        case (ty.ty_float) {\n-            auto v = vp2i(sub.bcx, sub.val);\n-            ret trans_upcall(sub.bcx,\n-                             \"upcall_log_float\",\n-                             vec(v));\n-        }\n         case (_) {\n             ret trans_upcall(sub.bcx,\n                              \"upcall_log_int\","}, {"sha": "4175af6a99fb70d3fc48a2efbafd80af4df55bd6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -1497,7 +1497,9 @@ fn check_lit(@ast.lit lit) -> @ty.t {\n         case (ast.lit_str(_))           { sty = ty.ty_str;  }\n         case (ast.lit_char(_))          { sty = ty.ty_char; }\n         case (ast.lit_int(_))           { sty = ty.ty_int;  }\n-        case (ast.lit_float(_))           { sty = ty.ty_float;  }\n+        case (ast.lit_float(_))         { sty = ty.ty_float;  }\n+        case (ast.lit_mach_float(?tm, _))\n+                                        { sty = ty.ty_machine(tm); }\n         case (ast.lit_uint(_))          { sty = ty.ty_uint; }\n         case (ast.lit_mach_int(?tm, _)) { sty = ty.ty_machine(tm); }\n         case (ast.lit_nil)              { sty = ty.ty_nil;  }"}, {"sha": "19f1ec9070d082f31dced80bea8e39092c46344c", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -40,7 +40,14 @@ void upcall_log_int(rust_task *task, int32_t i) {\n }\n \n extern \"C\" CDECL\n-void upcall_log_float(rust_task *task, double *f) {\n+void upcall_log_float(rust_task *task, float f) {\n+    LOG_UPCALL_ENTRY(task);\n+    task->log(rust_log::UPCALL | rust_log::ULOG,\n+              \"rust: %12.12f\", f);\n+}\n+\n+extern \"C\" CDECL\n+void upcall_log_double(rust_task *task, double *f) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::ULOG,\n               \"rust: %12.12f\", *f);"}, {"sha": "0c111ba9779e86662c65627a1374a08e2533711f", "filename": "src/test/run-pass/float2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Ftest%2Frun-pass%2Ffloat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e23bd762a4b5a14ff2abcbabfd2349621a3dbe/src%2Ftest%2Frun-pass%2Ffloat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat2.rs?ref=23e23bd762a4b5a14ff2abcbabfd2349621a3dbe", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+  auto a = 1.5e6;\n+  auto b = 1.5E6;\n+  auto c = 1e6;\n+  auto d = 1E6;\n+  auto e = 3.0f32;\n+  auto f = 5.9f64;\n+  auto g = 1.e6f32;\n+  auto h = 1.0e7f64;\n+  auto i = 1.0E7f64;\n+  auto j = 3.1e+9;\n+  auto k = 3.2e-10;\n+ \n+  check(a == b);\n+  check(c < b);\n+  check(c == d);\n+  check(e < g);\n+  check(f < h);\n+  check(g == 1000000.0f32);\n+  check(h == i);\n+  check(j > k);\n+  check(k < a);\n+}\n\\ No newline at end of file"}]}