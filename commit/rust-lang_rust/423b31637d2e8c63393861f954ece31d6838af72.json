{"sha": "423b31637d2e8c63393861f954ece31d6838af72", "node_id": "C_kwDOAAsO6NoAKDQyM2IzMTYzN2QyZThjNjMzOTM4NjFmOTU0ZWNlMzFkNjgzOGFmNzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-14T16:24:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-14T16:24:59Z"}, "message": "Rollup merge of #94884 - c410-f3r:meta-take-2, r=petrochenkov\n\nFix remaining meta-variable expression TODOs\n\nAs promised on https://github.com/rust-lang/rust/pull/93545.\n\ncc #83527\ncc `@mark-i-m`\ncc `@petrochenkov`", "tree": {"sha": "d881d2b56cb308d8500bfe50ab0144bed8b060ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d881d2b56cb308d8500bfe50ab0144bed8b060ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423b31637d2e8c63393861f954ece31d6838af72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiL2xcCRBK7hj4Ov3rIwAAhH4IABiIbndNI1wj70QSPF2LiHDh\nNhyjlc0OeEbHN4aVZtSC1JkEDXt1y6CJdoSz1kB1kPvFjnzdpg5Vazr5Fm8ABQEw\nv4HtbsBVNceCBZf4dnAzynlwaLyXvMgvCkWIUouY2oikaYiwBvw+y8SdDYffCfQ3\nBiCK+nPfnE7cOfD1r3qWDWt00OnkL2ZYwasRopTC1iFBTLolZoKXG6+nZhNfIeM6\nfQ3iGp8GeqGu3lNWyGovVA3vXB9GU/exzlBoR97AKd88YTLuAWIFbtmNddaZWrZa\ndLQVh52Eggh8fRvAl5wRk1i69tc7iaZRd+sqOO8VbGR2Pz8yBhi/O/3NfmQwxWE=\n=MCAT\n-----END PGP SIGNATURE-----\n", "payload": "tree d881d2b56cb308d8500bfe50ab0144bed8b060ba\nparent 6548a368c8c66c802ba710dd9fede228dc65587e\nparent 5d333c155e01e303da1e1b5704a0d4d6032c92a6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647275099 +0100\ncommitter GitHub <noreply@github.com> 1647275099 +0100\n\nRollup merge of #94884 - c410-f3r:meta-take-2, r=petrochenkov\n\nFix remaining meta-variable expression TODOs\n\nAs promised on https://github.com/rust-lang/rust/pull/93545.\n\ncc #83527\ncc `@mark-i-m`\ncc `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423b31637d2e8c63393861f954ece31d6838af72", "html_url": "https://github.com/rust-lang/rust/commit/423b31637d2e8c63393861f954ece31d6838af72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423b31637d2e8c63393861f954ece31d6838af72/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6548a368c8c66c802ba710dd9fede228dc65587e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6548a368c8c66c802ba710dd9fede228dc65587e", "html_url": "https://github.com/rust-lang/rust/commit/6548a368c8c66c802ba710dd9fede228dc65587e"}, {"sha": "5d333c155e01e303da1e1b5704a0d4d6032c92a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d333c155e01e303da1e1b5704a0d4d6032c92a6", "html_url": "https://github.com/rust-lang/rust/commit/5d333c155e01e303da1e1b5704a0d4d6032c92a6"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "f18cf95a2bf116fe4c653169091b329f7f586faf", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=423b31637d2e8c63393861f954ece31d6838af72", "patch": "@@ -337,8 +337,12 @@ fn check_occurrences(\n             let name = MacroRulesNormalizedIdent::new(name);\n             check_ops_is_prefix(sess, node_id, macros, binders, ops, span, name);\n         }\n-        // FIXME(c410-f3r) Check token (https://github.com/rust-lang/rust/issues/93902)\n-        TokenTree::MetaVarExpr(..) => {}\n+        TokenTree::MetaVarExpr(dl, ref mve) => {\n+            let Some(name) = mve.ident().map(MacroRulesNormalizedIdent::new) else {\n+                return;\n+            };\n+            check_ops_is_prefix(sess, node_id, macros, binders, ops, dl.entire(), name);\n+        }\n         TokenTree::Delimited(_, ref del) => {\n             check_nested_occurrences(sess, node_id, &del.tts, macros, binders, ops, valid);\n         }"}, {"sha": "07081c75d46f0e1a02f935460afd93c0dc9a326d", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=423b31637d2e8c63393861f954ece31d6838af72", "patch": "@@ -324,8 +324,11 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n                 TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),\n                 TokenTree::MetaVar(..) => 0,\n                 TokenTree::MetaVarDecl(..) => 1,\n-                // FIXME(c410-f3r) MetaVarExpr should be handled instead of being ignored\n-                // https://github.com/rust-lang/rust/issues/9390\n+                // Panicking here would abort execution because `parse_tree` makes use of this\n+                // function. In other words, RHS meta-variable expressions eventually end-up here.\n+                //\n+                // `0` is still returned to inform that no meta-variable was found. `Meta-variables\n+                // != Meta-variable expressions`\n                 TokenTree::MetaVarExpr(..) => 0,\n                 TokenTree::Sequence(_, ref seq) => seq.num_captures,\n                 TokenTree::Token(..) => 0,"}, {"sha": "2949ca716b2309d944279d5b029586a2f48b9d86", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=423b31637d2e8c63393861f954ece31d6838af72", "patch": "@@ -62,9 +62,9 @@ impl MetaVarExpr {\n         Ok(rslt)\n     }\n \n-    crate fn ident(&self) -> Option<&Ident> {\n-        match self {\n-            MetaVarExpr::Count(ident, _) | MetaVarExpr::Ignore(ident) => Some(&ident),\n+    crate fn ident(&self) -> Option<Ident> {\n+        match *self {\n+            MetaVarExpr::Count(ident, _) | MetaVarExpr::Ignore(ident) => Some(ident),\n             MetaVarExpr::Index(..) | MetaVarExpr::Length(..) => None,\n         }\n     }"}, {"sha": "5ec63739cf574fd934d73f1fa3df4053e0369dbe", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423b31637d2e8c63393861f954ece31d6838af72/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=423b31637d2e8c63393861f954ece31d6838af72", "patch": "@@ -399,7 +399,7 @@ fn lockstep_iter_size(\n         TokenTree::MetaVarExpr(_, ref expr) => {\n             let default_rslt = LockstepIterSize::Unconstrained;\n             let Some(ident) = expr.ident() else { return default_rslt; };\n-            let name = MacroRulesNormalizedIdent::new(ident.clone());\n+            let name = MacroRulesNormalizedIdent::new(ident);\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(MatchedSeq(ref ads)) => {\n                     default_rslt.with(LockstepIterSize::Constraint(ads.len(), name))\n@@ -479,7 +479,7 @@ fn count_repetitions<'a>(\n     count(cx, 0, depth_opt, matched, sp)\n }\n \n-/// Returns a `NamedMatch` item declared on the RHS given an arbitrary [Ident]\n+/// Returns a `NamedMatch` item declared on the LHS given an arbitrary [Ident]\n fn matched_from_ident<'ctx, 'interp, 'rslt>(\n     cx: &ExtCtxt<'ctx>,\n     ident: Ident,"}]}