{"sha": "32a2e9a8e15ee93dbd663fa3849604979df1142f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYTJlOWE4ZTE1ZWU5M2RiZDY2M2ZhMzg0OTYwNDk3OWRmMTE0MmY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-02-12T13:41:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:17Z"}, "message": "Compute a salt from arguments passed via -Cmetadata.", "tree": {"sha": "fb7c676c70ad3f86bce94d8add5b7daafaad10e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb7c676c70ad3f86bce94d8add5b7daafaad10e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32a2e9a8e15ee93dbd663fa3849604979df1142f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32a2e9a8e15ee93dbd663fa3849604979df1142f", "html_url": "https://github.com/rust-lang/rust/commit/32a2e9a8e15ee93dbd663fa3849604979df1142f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32a2e9a8e15ee93dbd663fa3849604979df1142f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e54d72792d49961930d13e854c8748eee1cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e54d72792d49961930d13e854c8748eee1cd82", "html_url": "https://github.com/rust-lang/rust/commit/c7e54d72792d49961930d13e854c8748eee1cd82"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "ef89b5d25b8875b04b443af9e220b01371524f76", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -166,15 +166,15 @@ impl<'doc> Doc<'doc> {\n         }\n     }\n \n-    pub fn get<'a>(&'a self, tag: usize) -> Doc<'a> {\n+    pub fn get(&self, tag: usize) -> Doc<'doc> {\n         reader::get_doc(*self, tag)\n     }\n \n     pub fn is_empty(&self) -> bool {\n         self.start == self.end\n     }\n \n-    pub fn as_str_slice<'a>(&'a self) -> &'a str {\n+    pub fn as_str_slice(&self) -> &'doc str {\n         str::from_utf8(&self.data[self.start..self.end]).unwrap()\n     }\n "}, {"sha": "718a9fd58dea4a1b84c32680bdb9f78bfa6c5ecd", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -206,6 +206,7 @@ pub trait CrateStore<'tcx> : Any {\n     fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>;\n     fn crate_name(&self, cnum: ast::CrateNum) -> InternedString;\n     fn crate_hash(&self, cnum: ast::CrateNum) -> Svh;\n+    fn crate_disambiguator(&self, cnum: ast::CrateNum) -> InternedString;\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n                                 -> FnvHashMap<DefId, Vec<ast::Attribute>>;\n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>;\n@@ -385,6 +386,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n         { unimplemented!() }\n     fn crate_name(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n     fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { unimplemented!() }\n+    fn crate_disambiguator(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n                                 -> FnvHashMap<DefId, Vec<ast::Attribute>>\n         { unimplemented!() }"}, {"sha": "36dc8eabc89f2509b446ec4f3abba132e42e4641", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -64,7 +64,12 @@ pub struct Session {\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n-    pub crate_metadata: RefCell<Vec<String>>,\n+    // The crate_disambiguator is constructed out of all the `-C metadata`\n+    // arguments passed to the compiler. Its value together with the crate-name\n+    // forms a unique global identifier for the crate. It is used to allow\n+    // multiple crates with the same name to coexist. See the\n+    // trans::back::symbol_names module for more information.\n+    pub crate_disambiguator: RefCell<String>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -481,7 +486,7 @@ pub fn build_session_(sopts: config::Options,\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),\n-        crate_metadata: RefCell::new(Vec::new()),\n+        crate_disambiguator: RefCell::new(String::new()),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n         next_node_id: Cell::new(1),"}, {"sha": "ec607314f45c0f35e9edd146b6ea994a8486aea7", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -66,7 +66,7 @@ impl Svh {\n         &self.hash\n     }\n \n-    pub fn calculate(metadata: &Vec<String>, krate: &hir::Crate) -> Svh {\n+    pub fn calculate(crate_disambiguator: &str, krate: &hir::Crate) -> Svh {\n         // FIXME (#14132): This is better than it used to be, but it still not\n         // ideal. We now attempt to hash only the relevant portions of the\n         // Crate AST as well as the top-level crate attributes. (However,\n@@ -78,9 +78,9 @@ impl Svh {\n         //        avoid collisions.\n         let mut state = SipHasher::new();\n \n-        for data in metadata {\n-            data.hash(&mut state);\n-        }\n+        \"crate_disambiguator\".hash(&mut state);\n+        crate_disambiguator.len().hash(&mut state);\n+        crate_disambiguator.hash(&mut state);\n \n         {\n             let mut visit = svh_visitor::make(&mut state, krate);"}, {"sha": "b75ccb3f7ee8fdc59a06b8c055d725f9a67f71ed", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -22,6 +22,7 @@ use rustc::middle::privacy::AccessLevels;\n use rustc::middle::ty::TyCtxt;\n use rustc::util::common::time;\n use rustc::util::nodemap::NodeSet;\n+use rustc_back::sha2::{Sha256, Digest};\n use rustc_borrowck as borrowck;\n use rustc_resolve as resolve;\n use rustc_metadata::macro_import;\n@@ -500,7 +501,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     })?;\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n-    *sess.crate_metadata.borrow_mut() = collect_crate_metadata(sess, &krate.attrs);\n+    *sess.crate_disambiguator.borrow_mut() = compute_crate_disambiguator(sess);\n \n     time(time_passes, \"recursion limit\", || {\n         middle::recursion_limit::update_recursion_limit(sess, &krate);\n@@ -1121,8 +1122,34 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         .collect()\n }\n \n-pub fn collect_crate_metadata(session: &Session, _attrs: &[ast::Attribute]) -> Vec<String> {\n-    session.opts.cg.metadata.clone()\n+pub fn compute_crate_disambiguator(session: &Session) -> String {\n+    let mut hasher = Sha256::new();\n+\n+    let mut metadata = session.opts.cg.metadata.clone();\n+    // We don't want the crate_disambiguator to dependent on the order\n+    // -C metadata arguments, so sort them:\n+    metadata.sort();\n+    // Every distinct -C metadata value is only incorporated once:\n+    metadata.dedup();\n+\n+    hasher.input_str(\"metadata\");\n+    for s in &metadata {\n+        // Also incorporate the length of a metadata string, so that we generate\n+        // different values for `-Cmetadata=ab -Cmetadata=c` and\n+        // `-Cmetadata=a -Cmetadata=bc`\n+        hasher.input_str(&format!(\"{}\", s.len())[..]);\n+        hasher.input_str(&s[..]);\n+    }\n+\n+    let mut hash = hasher.result_str();\n+\n+    // If this is an executable, add a special suffix, so that we don't get\n+    // symbol conflicts when linking against a library of the same name.\n+    if session.crate_types.borrow().contains(&config::CrateTypeExecutable) {\n+       hash.push_str(\"-exe\");\n+    }\n+\n+    hash\n }\n \n pub fn build_output_filenames(input: &Input,"}, {"sha": "9ba6abb962ead169131ec83098efe2681ad9795b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -568,8 +568,6 @@ impl RustcDefaultCalls {\n                         continue;\n                     }\n                     let crate_types = driver::collect_crate_types(sess, attrs);\n-                    let metadata = driver::collect_crate_metadata(sess, attrs);\n-                    *sess.crate_metadata.borrow_mut() = metadata;\n                     for &style in &crate_types {\n                         let fname = link::filename_for_input(sess, style, &id, &t_outputs);\n                         println!(\"{}\","}, {"sha": "22a5289f02be88961ec8c77788ba6fcdd9e63613", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -73,6 +73,7 @@ pub const tag_crate_dep: usize = 0x35;\n \n pub const tag_crate_hash: usize = 0x103; // top-level only\n pub const tag_crate_crate_name: usize = 0x104; // top-level only\n+pub const tag_crate_disambiguator: usize = 0x113; // top-level only\n \n pub const tag_crate_dep_crate_name: usize = 0x36;\n pub const tag_crate_dep_hash: usize = 0x37;"}, {"sha": "f9446d7667c6903fd498cbb6f81d9a52e8177e98", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -345,6 +345,12 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_crate_hash(cdata.data())\n     }\n \n+    fn crate_disambiguator(&self, cnum: ast::CrateNum) -> token::InternedString\n+    {\n+        let cdata = self.get_crate_data(cnum);\n+        token::intern_and_get_ident(decoder::get_crate_disambiguator(cdata.data()))\n+    }\n+\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n                                 -> FnvHashMap<DefId, Vec<ast::Attribute>>\n     {"}, {"sha": "f24c489b7c2af825d3cb6e957a32581070e5cf70", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -1295,6 +1295,13 @@ pub fn maybe_get_crate_name(data: &[u8]) -> Option<String> {\n     })\n }\n \n+pub fn get_crate_disambiguator<'a>(data: &'a [u8]) -> &'a str {\n+    let crate_doc = rbml::Doc::new(data);\n+    let salt_doc = reader::get_doc(crate_doc, tag_crate_disambiguator);\n+    let slice: &'a str = salt_doc.as_str_slice();\n+    slice\n+}\n+\n pub fn get_crate_triple(data: &[u8]) -> Option<String> {\n     let cratedoc = rbml::Doc::new(data);\n     let triple_doc = reader::maybe_get_doc(cratedoc, tag_crate_triple);"}, {"sha": "a58c24eb09fa85cb54cc7c14e96a77257c1f07bd", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -1877,6 +1877,10 @@ fn encode_crate_name(rbml_w: &mut Encoder, crate_name: &str) {\n     rbml_w.wr_tagged_str(tag_crate_crate_name, crate_name);\n }\n \n+fn encode_crate_disambiguator(rbml_w: &mut Encoder, crate_disambiguator: &str) {\n+    rbml_w.wr_tagged_str(tag_crate_disambiguator, crate_disambiguator);\n+}\n+\n fn encode_crate_triple(rbml_w: &mut Encoder, triple: &str) {\n     rbml_w.wr_tagged_str(tag_crate_triple, triple);\n }\n@@ -1987,6 +1991,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n     encode_crate_name(rbml_w, &ecx.link_meta.crate_name);\n     encode_crate_triple(rbml_w, &ecx.tcx.sess.opts.target_triple);\n     encode_hash(rbml_w, &ecx.link_meta.crate_hash);\n+    encode_crate_disambiguator(rbml_w, &ecx.tcx.sess.crate_disambiguator.borrow());\n     encode_dylib_dependency_formats(rbml_w, &ecx);\n \n     let mut i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();"}, {"sha": "01ef33637d58bd8c038b823ce76b73fec10ce5a0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a2e9a8e15ee93dbd663fa3849604979df1142f/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=32a2e9a8e15ee93dbd663fa3849604979df1142f", "patch": "@@ -189,7 +189,7 @@ pub fn build_link_meta(sess: &Session,\n                        -> LinkMeta {\n     let r = LinkMeta {\n         crate_name: name.to_owned(),\n-        crate_hash: Svh::calculate(&sess.opts.cg.metadata, krate),\n+        crate_hash: Svh::calculate(&sess.crate_disambiguator.borrow()[..], krate),\n     };\n     info!(\"{:?}\", r);\n     return r;\n@@ -201,7 +201,7 @@ fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n     output[.. 8].to_hex().to_string()\n }\n \n-pub fn def_to_string(_tcx: &ty::ctxt, did: DefId) -> String {\n+pub fn def_to_string(_tcx: &TyCtxt, did: DefId) -> String {\n     format!(\"{}:{}\", did.krate, did.index.as_usize())\n }\n \n@@ -218,9 +218,7 @@ fn symbol_hash<'tcx>(tcx: &TyCtxt<'tcx>,\n     symbol_hasher.input_str(&link_meta.crate_name);\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(link_meta.crate_hash.as_str());\n-    for meta in tcx.sess.crate_metadata.borrow().iter() {\n-        symbol_hasher.input_str(&meta[..]);\n-    }\n+    symbol_hasher.input_str(&tcx.sess.crate_disambiguator.borrow()[..]);\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input(&tcx.sess.cstore.encode_type(tcx, t, def_to_string));\n     // Prefix with 'h' so that it never blends into adjacent digits"}]}