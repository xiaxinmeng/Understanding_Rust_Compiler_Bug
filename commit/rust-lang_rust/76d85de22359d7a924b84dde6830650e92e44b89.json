{"sha": "76d85de22359d7a924b84dde6830650e92e44b89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDg1ZGUyMjM1OWQ3YTkyNGI4NGRkZTY4MzA2NTBlOTJlNDRiODk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-23T18:10:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-26T08:18:48Z"}, "message": "codegen_llvm: Simplify logic for relaxing PIC into PIE", "tree": {"sha": "e59a405edef738f846ab612c0a02d4baddbeb597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59a405edef738f846ab612c0a02d4baddbeb597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d85de22359d7a924b84dde6830650e92e44b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d85de22359d7a924b84dde6830650e92e44b89", "html_url": "https://github.com/rust-lang/rust/commit/76d85de22359d7a924b84dde6830650e92e44b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d85de22359d7a924b84dde6830650e92e44b89/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045272558309a7600cb4618db5a2c52384f1d14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/045272558309a7600cb4618db5a2c52384f1d14e", "html_url": "https://github.com/rust-lang/rust/commit/045272558309a7600cb4618db5a2c52384f1d14e"}], "stats": {"total": 58, "additions": 22, "deletions": 36}, "files": [{"sha": "bf79c5b593e4880be01e11bf50eb17c366f64091", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -7,7 +7,7 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::context::is_pie_binary;\n+use crate::context::all_outputs_are_pic_executables;\n use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -75,19 +75,13 @@ pub fn write_output_file(\n     }\n }\n \n-pub fn create_informational_target_machine(\n-    sess: &Session,\n-    find_features: bool,\n-) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(sess, config::OptLevel::No, find_features)()\n+pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(sess, config::OptLevel::No)()\n         .unwrap_or_else(|err| llvm_err(sess.diagnostic(), &err).raise())\n }\n \n-pub fn create_target_machine(\n-    tcx: TyCtxt<'_>,\n-    find_features: bool,\n-) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()\n+pub fn create_target_machine(tcx: TyCtxt<'_>) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE))()\n         .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n \n@@ -128,13 +122,9 @@ fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocModel {\n     }\n }\n \n-// If find_features is true this won't access `sess.crate_types` by assuming\n-// that `is_pie_binary` is false. When we discover LLVM target features\n-// `sess.crate_types` is uninitialized so we cannot access it.\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n-    find_features: bool,\n ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n     let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n@@ -177,7 +167,7 @@ pub fn target_machine_factory(\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n     let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n-    let is_pie_binary = !find_features && is_pie_binary(sess);\n+    let pic_is_pie = all_outputs_are_pic_executables(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n@@ -194,7 +184,7 @@ pub fn target_machine_factory(\n                 reloc_model,\n                 opt_level,\n                 use_softfp,\n-                is_pie_binary,\n+                pic_is_pie,\n                 ffunction_sections,\n                 fdata_sections,\n                 trap_unreachable,"}, {"sha": "df442609052bb1f3d14fd2c814fa0d7777ade37d", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -103,9 +103,14 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     }\n }\n \n-pub fn is_pie_binary(sess: &Session) -> bool {\n+/// PIE is potentially more effective than PIC, but can only be used in executables.\n+/// If all our outputs are executables, then we can relax PIC to PIE when producing object code.\n+/// If the list of crate types is not yet known we conservatively return `false`.\n+pub fn all_outputs_are_pic_executables(sess: &Session) -> bool {\n     sess.relocation_model() == RelocModel::Pic\n-        && !sess.crate_types.borrow().iter().any(|ty| *ty != config::CrateType::Executable)\n+        && sess.crate_types.try_get().map_or(false, |crate_types| {\n+            crate_types.iter().all(|ty| *ty == config::CrateType::Executable)\n+        })\n }\n \n fn strip_function_ptr_alignment(data_layout: String) -> String {\n@@ -138,7 +143,7 @@ pub unsafe fn create_module(\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n+        let tm = crate::back::write::create_informational_target_machine(tcx.sess);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n@@ -185,7 +190,7 @@ pub unsafe fn create_module(\n         llvm::LLVMRustSetModulePICLevel(llmod);\n     }\n \n-    if is_pie_binary(sess) {\n+    if all_outputs_are_pic_executables(sess) {\n         llvm::LLVMRustSetModulePIELevel(llmod);\n     }\n "}, {"sha": "330d6ea75d2730159c63c7a544b74310e9303c1d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -110,9 +110,8 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         sess: &Session,\n         optlvl: OptLevel,\n-        find_features: bool,\n     ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n-        back::write::target_machine_factory(sess, optlvl, find_features)\n+        back::write::target_machine_factory(sess, optlvl)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n@@ -353,19 +352,15 @@ impl ModuleLlvm {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n-            ModuleLlvm { llmod_raw, llcx, tm: create_target_machine(tcx, false) }\n+            ModuleLlvm { llmod_raw, llcx, tm: create_target_machine(tcx) }\n         }\n     }\n \n     fn new_metadata(tcx: TyCtxt<'_>, mod_name: &str) -> Self {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n-            ModuleLlvm {\n-                llmod_raw,\n-                llcx,\n-                tm: create_informational_target_machine(&tcx.sess, false),\n-            }\n+            ModuleLlvm { llmod_raw, llcx, tm: create_informational_target_machine(tcx.sess) }\n         }\n     }\n "}, {"sha": "a36e95771e8b973cf1db807906202c7a3b2f62f9", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -270,7 +270,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n-    let target_machine = create_informational_target_machine(sess, true);\n+    let target_machine = create_informational_target_machine(sess);\n     target_feature_whitelist(sess)\n         .iter()\n         .filter_map(|&(feature, gate)| {\n@@ -322,7 +322,7 @@ pub fn print_passes() {\n \n pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n-    let tm = create_informational_target_machine(sess, true);\n+    let tm = create_informational_target_machine(sess);\n     unsafe {\n         match req {\n             PrintRequest::TargetCPUs => llvm::LLVMRustPrintTargetCPUs(tm),"}, {"sha": "c84f38670f77b1f64dfb4165df7e181d2d2dec4e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -1037,7 +1037,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol, false)),\n+        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),"}, {"sha": "6cbb47efa99f23cd2723da482014fb352ce81862", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d85de22359d7a924b84dde6830650e92e44b89/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=76d85de22359d7a924b84dde6830650e92e44b89", "patch": "@@ -110,14 +110,10 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         tcx: TyCtxt<'_>,\n         cgu_name: Symbol,\n     ) -> (ModuleCodegen<Self::Module>, u64);\n-    // If find_features is true this won't access `sess.crate_types` by assuming\n-    // that `is_pie_binary` is false. When we discover LLVM target features\n-    // `sess.crate_types` is uninitialized so we cannot access it.\n     fn target_machine_factory(\n         &self,\n         sess: &Session,\n         opt_level: config::OptLevel,\n-        find_features: bool,\n     ) -> Arc<dyn Fn() -> Result<Self::TargetMachine, String> + Send + Sync>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n }"}]}