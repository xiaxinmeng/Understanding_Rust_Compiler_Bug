{"sha": "db794abe666f9f895ef0577d49eb4db12479ad46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzk0YWJlNjY2ZjlmODk1ZWYwNTc3ZDQ5ZWI0ZGIxMjQ3OWFkNDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:42:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:42:11Z"}, "message": "kill FnSignatureInfo", "tree": {"sha": "7461ca79a09a5d41d759fc9581bb357ba6789c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7461ca79a09a5d41d759fc9581bb357ba6789c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db794abe666f9f895ef0577d49eb4db12479ad46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db794abe666f9f895ef0577d49eb4db12479ad46", "html_url": "https://github.com/rust-lang/rust/commit/db794abe666f9f895ef0577d49eb4db12479ad46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db794abe666f9f895ef0577d49eb4db12479ad46/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed4f13e5c796120cc0c051825116a29374b6745b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4f13e5c796120cc0c051825116a29374b6745b", "html_url": "https://github.com/rust-lang/rust/commit/ed4f13e5c796120cc0c051825116a29374b6745b"}], "stats": {"total": 46, "additions": 11, "deletions": 35}, "files": [{"sha": "9111fdc69797c836d93340f8671936baa3d7f095", "filename": "crates/ra_analysis/src/call_info.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/db794abe666f9f895ef0577d49eb4db12479ad46/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db794abe666f9f895ef0577d49eb4db12479ad46/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs?ref=db794abe666f9f895ef0577d49eb4db12479ad46", "patch": "@@ -10,22 +10,8 @@ use ra_editor::find_node_at_offset;\n \n use crate::{FilePosition, CallInfo, db::RootDatabase};\n \n-pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n-    let (sig_info, active_parameter) = ctry!(signature_and_active_param(db, position)?);\n-    let res = CallInfo {\n-        label: sig_info.label,\n-        doc: sig_info.doc,\n-        parameters: sig_info.params,\n-        active_parameter,\n-    };\n-    Ok(Some(res))\n-}\n-\n /// Computes parameter information for the given call expression.\n-fn signature_and_active_param(\n-    db: &RootDatabase,\n-    position: FilePosition,\n-) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n+pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n     let file = db.source_file(position.file_id);\n     let syntax = file.syntax();\n \n@@ -40,16 +26,14 @@ fn signature_and_active_param(\n             let fn_file = db.source_file(symbol.file_id);\n             let fn_def = symbol.ptr.resolve(&fn_file);\n             let fn_def = ast::FnDef::cast(&fn_def).unwrap();\n-            if let Some(descriptor) = FnSignatureInfo::new(fn_def) {\n+            if let Some(mut call_info) = CallInfo::new(fn_def) {\n                 // If we have a calling expression let's find which argument we are on\n-                let mut current_parameter = None;\n-\n-                let num_params = descriptor.params.len();\n+                let num_params = call_info.parameters.len();\n                 let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n \n                 if num_params == 1 {\n                     if !has_self {\n-                        current_parameter = Some(0);\n+                        call_info.active_parameter = Some(0);\n                     }\n                 } else if num_params > 1 {\n                     // Count how many parameters into the call we are.\n@@ -74,11 +58,11 @@ fn signature_and_active_param(\n                             commas += 1;\n                         }\n \n-                        current_parameter = Some(commas);\n+                        call_info.active_parameter = Some(commas);\n                     }\n                 }\n \n-                return Ok(Some((descriptor, current_parameter)));\n+                return Ok(Some(call_info));\n             }\n         }\n     }\n@@ -125,14 +109,7 @@ impl<'a> FnCallNode<'a> {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-struct FnSignatureInfo {\n-    label: String,\n-    params: Vec<String>,\n-    doc: Option<String>,\n-}\n-\n-impl FnSignatureInfo {\n+impl CallInfo {\n     fn new(node: &ast::FnDef) -> Option<Self> {\n         let mut doc = None;\n \n@@ -150,7 +127,7 @@ impl FnSignatureInfo {\n             node.syntax().text().to_string()\n         };\n \n-        if let Some((comment_range, docs)) = FnSignatureInfo::extract_doc_comments(node) {\n+        if let Some((comment_range, docs)) = CallInfo::extract_doc_comments(node) {\n             let comment_range = comment_range\n                 .checked_sub(node.syntax().range().start())\n                 .unwrap();\n@@ -182,12 +159,11 @@ impl FnSignatureInfo {\n             }\n         }\n \n-        let params = FnSignatureInfo::param_list(node);\n-\n-        Some(FnSignatureInfo {\n-            params,\n+        Some(CallInfo {\n+            parameters: CallInfo::param_list(node),\n             label: label.trim().to_owned(),\n             doc,\n+            active_parameter: None,\n         })\n     }\n "}]}