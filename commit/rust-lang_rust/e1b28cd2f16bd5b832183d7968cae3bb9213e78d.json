{"sha": "e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "node_id": "C_kwDOAAsO6NoAKGUxYjI4Y2QyZjE2YmQ1YjgzMjE4M2Q3OTY4Y2FlM2JiOTIxM2U3OGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T18:45:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-19T18:45:41Z"}, "message": "Auto merge of #100740 - Dylan-DPC:rollup-0td6yq4, r=Dylan-DPC\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #99576 (Do not allow `Drop` impl on foreign fundamental types)\n - #100081 (never consider unsafe blocks unused if they would be required with deny(unsafe_op_in_unsafe_fn))\n - #100208 (make NOP dyn casts not require anything about the vtable)\n - #100494 (Cleanup rustdoc themes)\n - #100522 (Only check the `DefId` for the recursion check in MIR inliner.)\n - #100592 (Manually implement Debug for ImportKind.)\n - #100598 (Don't fix builtin index when Where clause is found)\n - #100721 (Add diagnostics lints to `rustc_type_ir` module)\n - #100731 (rustdoc: count deref and non-deref as same set of used methods)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c1c0b134e95cb9c2f80a95501c842318a6f7bb6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c0b134e95cb9c2f80a95501c842318a6f7bb6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "html_url": "https://github.com/rust-lang/rust/commit/e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468887ef91e46847dff57b6b234cff0fad17cb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/468887ef91e46847dff57b6b234cff0fad17cb71", "html_url": "https://github.com/rust-lang/rust/commit/468887ef91e46847dff57b6b234cff0fad17cb71"}, {"sha": "ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9", "html_url": "https://github.com/rust-lang/rust/commit/ecd2885eedd62dba3744b5e5a7051c7bb6e1eca9"}], "stats": {"total": 1843, "additions": 851, "deletions": 992}, "files": [{"sha": "dd9d891ddbdee5d47272982e7685606270ae2197", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -29,6 +29,7 @@ pub(crate) fn unsized_info<'tcx>(\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n+                // A NOP cast that doesn't actually change anything, should be allowed even with invalid vtables.\n                 return old_info;\n             }\n "}, {"sha": "4c6be3f910827d7886b48e2ebbada31c3d701a86", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -151,6 +151,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n+                // A NOP cast that doesn't actually change anything, should be allowed even with invalid vtables.\n                 return old_info;\n             }\n "}, {"sha": "14eb2a1537b1f82630327fe43f42595e6a3d3919", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -298,7 +298,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(val, dest)\n             }\n             (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {\n-                let (old_data, old_vptr) = self.read_immediate(src)?.to_scalar_pair()?;\n+                let val = self.read_immediate(src)?;\n+                if data_a.principal() == data_b.principal() {\n+                    // A NOP cast that doesn't actually change anything, should be allowed even with mismatching vtables.\n+                    return self.write_immediate(*val, dest);\n+                }\n+                let (old_data, old_vptr) = val.to_scalar_pair()?;\n                 let old_vptr = old_vptr.to_pointer(self)?;\n                 let (ty, old_trait) = self.get_ptr_vtable(old_vptr)?;\n                 if old_trait != data_a.principal() {"}, {"sha": "22b32ff838e59650fdf0eba8ebfb68e96e3e8b50", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -24,8 +24,8 @@ typeck_lifetimes_or_bounds_mismatch_on_trait =\n     .generics_label = lifetimes in impl do not match this {$item_kind} in trait\n \n typeck_drop_impl_on_wrong_item =\n-    the `Drop` trait may only be implemented for structs, enums, and unions\n-    .label = must be a struct, enum, or union\n+    the `Drop` trait may only be implemented for local structs, enums, and unions\n+    .label = must be a struct, enum, or union in the current crate\n \n typeck_field_already_declared =\n     field `{$field_name}` is already declared"}, {"sha": "04159bff4ff411539cf7983a633e24c13b11235f", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -566,7 +566,7 @@ impl Drop for DiagnosticBuilderInner<'_> {\n                         ),\n                     ));\n                     handler.emit_diagnostic(&mut self.diagnostic);\n-                    panic!();\n+                    panic!(\"error was constructed but not emitted\");\n                 }\n             }\n             // `.emit()` was previously called, or maybe we're during `.cancel()`."}, {"sha": "594c14a642ded51def3afe5ee4ae60cee3d3e345", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -115,21 +115,6 @@ pub enum UnusedUnsafe {\n     /// `unsafe` block nested under another (used) `unsafe` block\n     /// > ``\u2026 because it's nested under this `unsafe` block``\n     InUnsafeBlock(hir::HirId),\n-    /// `unsafe` block nested under `unsafe fn`\n-    /// > ``\u2026 because it's nested under this `unsafe fn` ``\n-    ///\n-    /// the second HirId here indicates the first usage of the `unsafe` block,\n-    /// which allows retrieval of the LintLevelSource for why that operation would\n-    /// have been permitted without the block\n-    InUnsafeFn(hir::HirId, hir::HirId),\n-}\n-\n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n-pub enum UsedUnsafeBlockData {\n-    SomeDisallowedInUnsafeFn,\n-    // the HirId here indicates the first usage of the `unsafe` block\n-    // (i.e. the one that's first encountered in the MIR traversal of the unsafety check)\n-    AllAllowedInUnsafeFn(hir::HirId),\n }\n \n #[derive(TyEncodable, TyDecodable, HashStable, Debug)]\n@@ -138,10 +123,7 @@ pub struct UnsafetyCheckResult {\n     pub violations: Vec<UnsafetyViolation>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    ///\n-    /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n-    /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n-    pub used_unsafe_blocks: FxHashMap<hir::HirId, UsedUnsafeBlockData>,\n+    pub used_unsafe_blocks: FxHashSet<hir::HirId>,\n \n     /// This is `Some` iff the item is not a closure.\n     pub unused_unsafes: Option<Vec<(hir::HirId, UnusedUnsafe)>>,"}, {"sha": "f0b0456c4b9610a7e2bec3488188d0266726c55a", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -75,10 +75,11 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         match self.safety_context {\n             SafetyContext::BuiltinUnsafeBlock => {}\n             SafetyContext::UnsafeBlock { ref mut used, .. } => {\n-                if !self.body_unsafety.is_unsafe() || !unsafe_op_in_unsafe_fn_allowed {\n-                    // Mark this block as useful\n-                    *used = true;\n-                }\n+                // Mark this block as useful (even inside `unsafe fn`, where it is technically\n+                // redundant -- but we want to eventually enable `unsafe_op_in_unsafe_fn` by\n+                // default which will require those blocks:\n+                // https://github.com/rust-lang/rust/issues/71668#issuecomment-1203075594).\n+                *used = true;\n             }\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {"}, {"sha": "0f5fd77f7ab164368e67dda28392af2c125ebc6a", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 17, "deletions": 71, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,17 +1,16 @@\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_middle::{lint, mir::*};\n use rustc_session::lint::builtin::{UNSAFE_OP_IN_UNSAFE_FN, UNUSED_UNSAFE};\n use rustc_session::lint::Level;\n \n-use std::collections::hash_map;\n use std::ops::Bound;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n@@ -23,10 +22,7 @@ pub struct UnsafetyChecker<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n \n     /// Used `unsafe` blocks in this function. This is used for the \"unused_unsafe\" lint.\n-    ///\n-    /// The keys are the used `unsafe` blocks, the UnusedUnsafeKind indicates whether\n-    /// or not any of the usages happen at a place that doesn't allow `unsafe_op_in_unsafe_fn`.\n-    used_unsafe_blocks: FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: FxHashSet<HirId>,\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n@@ -130,10 +126,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 &AggregateKind::Closure(def_id, _) | &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n                         self.tcx.unsafety_check_result(def_id);\n-                    self.register_violations(\n-                        violations,\n-                        used_unsafe_blocks.iter().map(|(&h, &d)| (h, d)),\n-                    );\n+                    self.register_violations(violations, used_unsafe_blocks.iter().copied());\n                 }\n             },\n             _ => {}\n@@ -257,22 +250,8 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n     fn register_violations<'a>(\n         &mut self,\n         violations: impl IntoIterator<Item = &'a UnsafetyViolation>,\n-        new_used_unsafe_blocks: impl IntoIterator<Item = (HirId, UsedUnsafeBlockData)>,\n+        new_used_unsafe_blocks: impl IntoIterator<Item = HirId>,\n     ) {\n-        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n-\n-        let update_entry = |this: &mut Self, hir_id, new_usage| {\n-            match this.used_unsafe_blocks.entry(hir_id) {\n-                hash_map::Entry::Occupied(mut entry) => {\n-                    if new_usage == SomeDisallowedInUnsafeFn {\n-                        *entry.get_mut() = SomeDisallowedInUnsafeFn;\n-                    }\n-                }\n-                hash_map::Entry::Vacant(entry) => {\n-                    entry.insert(new_usage);\n-                }\n-            };\n-        };\n         let safety = self.body.source_scopes[self.source_info.scope]\n             .local_data\n             .as_ref()\n@@ -299,22 +278,14 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n                 }\n             }),\n             Safety::BuiltinUnsafe => {}\n-            Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|violation| {\n-                update_entry(\n-                    self,\n-                    hir_id,\n-                    match self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, violation.lint_root).0\n-                    {\n-                        Level::Allow => AllAllowedInUnsafeFn(violation.lint_root),\n-                        _ => SomeDisallowedInUnsafeFn,\n-                    },\n-                )\n+            Safety::ExplicitUnsafe(hir_id) => violations.into_iter().for_each(|_violation| {\n+                self.used_unsafe_blocks.insert(hir_id);\n             }),\n         };\n \n-        new_used_unsafe_blocks\n-            .into_iter()\n-            .for_each(|(hir_id, usage_data)| update_entry(self, hir_id, usage_data));\n+        new_used_unsafe_blocks.into_iter().for_each(|hir_id| {\n+            self.used_unsafe_blocks.insert(hir_id);\n+        });\n     }\n     fn check_mut_borrowing_layout_constrained_field(\n         &mut self,\n@@ -411,34 +382,28 @@ enum Context {\n \n struct UnusedUnsafeVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    used_unsafe_blocks: &'a FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: &'a FxHashSet<HirId>,\n     context: Context,\n     unused_unsafes: &'a mut Vec<(HirId, UnusedUnsafe)>,\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n-        use UsedUnsafeBlockData::{AllAllowedInUnsafeFn, SomeDisallowedInUnsafeFn};\n-\n         if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = block.rules {\n             let used = match self.tcx.lint_level_at_node(UNUSED_UNSAFE, block.hir_id) {\n-                (Level::Allow, _) => Some(SomeDisallowedInUnsafeFn),\n-                _ => self.used_unsafe_blocks.get(&block.hir_id).copied(),\n+                (Level::Allow, _) => true,\n+                _ => self.used_unsafe_blocks.contains(&block.hir_id),\n             };\n             let unused_unsafe = match (self.context, used) {\n-                (_, None) => UnusedUnsafe::Unused,\n-                (Context::Safe, Some(_))\n-                | (Context::UnsafeFn(_), Some(SomeDisallowedInUnsafeFn)) => {\n+                (_, false) => UnusedUnsafe::Unused,\n+                (Context::Safe, true) | (Context::UnsafeFn(_), true) => {\n                     let previous_context = self.context;\n                     self.context = Context::UnsafeBlock(block.hir_id);\n                     intravisit::walk_block(self, block);\n                     self.context = previous_context;\n                     return;\n                 }\n-                (Context::UnsafeFn(hir_id), Some(AllAllowedInUnsafeFn(lint_root))) => {\n-                    UnusedUnsafe::InUnsafeFn(hir_id, lint_root)\n-                }\n-                (Context::UnsafeBlock(hir_id), Some(_)) => UnusedUnsafe::InUnsafeBlock(hir_id),\n+                (Context::UnsafeBlock(hir_id), true) => UnusedUnsafe::InUnsafeBlock(hir_id),\n             };\n             self.unused_unsafes.push((block.hir_id, unused_unsafe));\n         }\n@@ -462,7 +427,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n fn check_unused_unsafe(\n     tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-    used_unsafe_blocks: &FxHashMap<HirId, UsedUnsafeBlockData>,\n+    used_unsafe_blocks: &FxHashSet<HirId>,\n ) -> Vec<(HirId, UnusedUnsafe)> {\n     let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n@@ -535,25 +500,6 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n                     \"because it's nested under this `unsafe` block\",\n                 );\n             }\n-            UnusedUnsafe::InUnsafeFn(id, usage_lint_root) => {\n-                db.span_label(\n-                    tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n-                    \"because it's nested under this `unsafe` fn\",\n-                )\n-                .note(\n-                    \"this `unsafe` block does contain unsafe operations, \\\n-                    but those are already allowed in an `unsafe fn`\",\n-                );\n-                let (level, source) =\n-                    tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, usage_lint_root);\n-                assert_eq!(level, Level::Allow);\n-                lint::explain_lint_level_source(\n-                    UNSAFE_OP_IN_UNSAFE_FN,\n-                    Level::Allow,\n-                    source,\n-                    &mut db,\n-                );\n-            }\n         }\n \n         db.emit();"}, {"sha": "6704d3462f48eebe1b67aa0727ea383326dee717", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::OptLevel;\n+use rustc_span::def_id::DefId;\n use rustc_span::{hygiene::ExpnKind, ExpnData, LocalExpnId, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -103,8 +104,12 @@ struct Inliner<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     /// Caller codegen attributes.\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n-    /// Stack of inlined Instances.\n-    history: Vec<ty::Instance<'tcx>>,\n+    /// Stack of inlined instances.\n+    /// We only check the `DefId` and not the substs because we want to\n+    /// avoid inlining cases of polymorphic recursion.\n+    /// The number of `DefId`s is finite, so checking history is enough\n+    /// to ensure that we do not loop endlessly while inlining.\n+    history: Vec<DefId>,\n     /// Indicates that the caller body has been modified.\n     changed: bool,\n }\n@@ -132,7 +137,7 @@ impl<'tcx> Inliner<'tcx> {\n                 Ok(new_blocks) => {\n                     debug!(\"inlined {}\", callsite.callee);\n                     self.changed = true;\n-                    self.history.push(callsite.callee);\n+                    self.history.push(callsite.callee.def_id());\n                     self.process_blocks(caller_body, new_blocks);\n                     self.history.pop();\n                 }\n@@ -308,7 +313,7 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                if self.history.contains(&callee) {\n+                if self.history.contains(&callee.def_id()) {\n                     return None;\n                 }\n "}, {"sha": "e0d57ded5bf24df568e28e7d0b4d237c117f1322", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -31,7 +31,7 @@ use std::{mem, ptr};\n type Res = def::Res<NodeId>;\n \n /// Contains data for specific kinds of imports.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum ImportKind<'a> {\n     Single {\n         /// `source` in `use prefix::source as target`.\n@@ -62,6 +62,44 @@ pub enum ImportKind<'a> {\n     MacroUse,\n }\n \n+/// Manually implement `Debug` for `ImportKind` because the `source/target_bindings`\n+/// contain `Cell`s which can introduce infinite loops while printing.\n+impl<'a> std::fmt::Debug for ImportKind<'a> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use ImportKind::*;\n+        match self {\n+            Single {\n+                ref source,\n+                ref target,\n+                ref type_ns_only,\n+                ref nested,\n+                ref additional_ids,\n+                // Ignore the following to avoid an infinite loop while printing.\n+                source_bindings: _,\n+                target_bindings: _,\n+            } => f\n+                .debug_struct(\"Single\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .field(\"type_ns_only\", type_ns_only)\n+                .field(\"nested\", nested)\n+                .field(\"additional_ids\", additional_ids)\n+                .finish_non_exhaustive(),\n+            Glob { ref is_prelude, ref max_vis } => f\n+                .debug_struct(\"Glob\")\n+                .field(\"is_prelude\", is_prelude)\n+                .field(\"max_vis\", max_vis)\n+                .finish(),\n+            ExternCrate { ref source, ref target } => f\n+                .debug_struct(\"ExternCrate\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .finish(),\n+            MacroUse => f.debug_struct(\"MacroUse\").finish(),\n+        }\n+    }\n+}\n+\n /// One import.\n #[derive(Debug, Clone)]\n pub(crate) struct Import<'a> {"}, {"sha": "5488bca8f471dd32e04b8456bfab6b5e983b4ea0", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,6 +1,8 @@\n #![feature(fmt_helpers_for_derive)]\n #![feature(min_specialization)]\n #![feature(rustc_attrs)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "ba687bc4da4cc6ae9d736fe11d255829ebcec859", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -3,7 +3,6 @@\n // substitutions.\n \n use crate::check::FnCtxt;\n-\n use hir::def_id::LocalDefId;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n@@ -16,6 +15,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -192,6 +192,27 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n+    // (ouz-a 1005988): Normally `[T] : std::ops::Index<usize>` should be normalized\n+    // into [T] but currently `Where` clause stops the normalization process for it,\n+    // here we compare types of expr and base in a code without `Where` clause they would be equal\n+    // if they are not we don't modify the expr, hence we bypass the ICE\n+    fn is_builtin_index(\n+        &mut self,\n+        typeck_results: &TypeckResults<'tcx>,\n+        e: &hir::Expr<'_>,\n+        base_ty: Ty<'tcx>,\n+        index_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let Some(elem_ty) = base_ty.builtin_index() {\n+            let Some(exp_ty) = typeck_results.expr_ty_opt(e) else {return false;};\n+            let resolved_exp_ty = self.resolve(exp_ty, &e.span);\n+\n+            elem_ty == resolved_exp_ty && index_ty == self.fcx.tcx.types.usize\n+        } else {\n+            false\n+        }\n+    }\n+\n     // Similar to operators, indexing is always assumed to be overloaded\n     // Here, correct cases where an indexing expression can be simplified\n     // to use builtin indexing because the index type is known to be\n@@ -222,8 +243,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     )\n                 });\n                 let index_ty = self.fcx.resolve_vars_if_possible(index_ty);\n+                let resolved_base_ty = self.resolve(*base_ty, &base.span);\n \n-                if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {\n+                if self.is_builtin_index(&typeck_results, e, resolved_base_ty, index_ty) {\n                     // Remove the method call record\n                     typeck_results.type_dependent_defs_mut().remove(e.hir_id);\n                     typeck_results.node_substs_mut().remove(e.hir_id);"}, {"sha": "2467a81638f75bfa0828c61473d9cfde368154a3", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -47,9 +47,11 @@ impl<'tcx> Checker<'tcx> {\n }\n \n fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n-    // Destructors only work on nominal types.\n-    if let ty::Adt(..) | ty::Error(_) = tcx.type_of(impl_did).kind() {\n-        return;\n+    // Destructors only work on local ADT types.\n+    match tcx.type_of(impl_did).kind() {\n+        ty::Adt(def, _) if def.did().is_local() => return,\n+        ty::Error(_) => return,\n+        _ => {}\n     }\n \n     let sp = match tcx.hir().expect_item(impl_did).kind {"}, {"sha": "a8e32e84cbcbd9402469b8da380ff06dae8fa1d2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1985,7 +1985,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             {\n                 let mut derefs = FxHashSet::default();\n                 derefs.insert(did);\n-                sidebar_deref_methods(cx, out, impl_, v, &mut derefs);\n+                sidebar_deref_methods(cx, out, impl_, v, &mut derefs, &mut used_links);\n             }\n \n             let format_impls = |impls: Vec<&Impl>, id_map: &mut IdMap| {\n@@ -2057,6 +2057,7 @@ fn sidebar_deref_methods(\n     impl_: &Impl,\n     v: &[Impl],\n     derefs: &mut FxHashSet<DefId>,\n+    used_links: &mut FxHashSet<String>,\n ) {\n     let c = cx.cache();\n \n@@ -2089,13 +2090,10 @@ fn sidebar_deref_methods(\n             .and_then(|did| c.impls.get(&did));\n         if let Some(impls) = inner_impl {\n             debug!(\"found inner_impl: {:?}\", impls);\n-            let mut used_links = FxHashSet::default();\n             let mut ret = impls\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n-                .flat_map(|i| {\n-                    get_methods(i.inner_impl(), true, &mut used_links, deref_mut, cx.tcx())\n-                })\n+                .flat_map(|i| get_methods(i.inner_impl(), true, used_links, deref_mut, cx.tcx()))\n                 .collect::<Vec<_>>();\n             if !ret.is_empty() {\n                 let id = if let Some(target_def_id) = real_target.def_id(c) {\n@@ -2124,7 +2122,14 @@ fn sidebar_deref_methods(\n                         .map(|t| Some(t.def_id()) == cx.tcx().lang_items().deref_trait())\n                         .unwrap_or(false)\n                 }) {\n-                    sidebar_deref_methods(cx, out, target_deref_impl, target_impls, derefs);\n+                    sidebar_deref_methods(\n+                        cx,\n+                        out,\n+                        target_deref_impl,\n+                        target_impls,\n+                        derefs,\n+                        used_links,\n+                    );\n                 }\n             }\n         }"}, {"sha": "8d0bcb7519b61f4fbf31ab575fd7a6e5a2304766", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 20, "deletions": 49, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -693,8 +693,13 @@ h2.location a {\n \tflex-grow: 1;\n \tmargin: 0px;\n \tpadding: 0px;\n+\t/* We use overflow-wrap: break-word for Safari, which doesn't recognize\n+\t   `anywhere`: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap */\n \toverflow-wrap: break-word;\n+\t/* Then override it with `anywhere`, which is required to make non-Safari browsers break\n+\t   more aggressively when we want them to. */\n \toverflow-wrap: anywhere;\n+\tbackground-color: var(--main-background-color);\n }\n \n .in-band > code, .in-band > .code-header {\n@@ -731,13 +736,13 @@ pre, .rustdoc.source .example-wrap {\n \n .docblock table td {\n \tpadding: .5em;\n-\tborder: 1px dashed;\n+\tborder: 1px dashed var(--border-color);\n }\n \n .docblock table th {\n \tpadding: .5em;\n \ttext-align: left;\n-\tborder: 1px solid;\n+\tborder: 1px solid var(--border-color);\n }\n \n .fields + table {\n@@ -835,20 +840,6 @@ nav.sub {\n .source nav.sub {\n \tmargin-left: 32px;\n }\n-nav.main {\n-\tpadding: 20px 0;\n-\ttext-align: center;\n-}\n-nav.main .current {\n-\tborder-top: 1px solid;\n-\tborder-bottom: 1px solid;\n-}\n-nav.main .separator {\n-\tborder: 1px solid;\n-\tdisplay: inline-block;\n-\theight: 23px;\n-\tmargin: 0 20px;\n-}\n nav.sum { text-align: right; }\n nav.sub form { display: inline; }\n \n@@ -974,7 +965,7 @@ table,\n \tmax-width: 100%;\n \t/* contents can overflow because of max-width limit, then show ellipsis */\n \ttext-overflow: ellipsis;\n-\tborder: 1px solid;\n+\tborder: 1px solid var(--border-color);\n \tborder-radius: 4px;\n \toutline: none;\n \tcursor: pointer;\n@@ -1027,11 +1018,12 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t-moz-box-sizing: border-box !important;\n \tbox-sizing: border-box !important;\n \toutline: none;\n-\tborder: 1px solid;\n+\tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n \tpadding: 8px;\n \tfont-size: 1rem;\n \twidth: 100%;\n+\tbackground-color: var(--button-background-color);\n }\n \n .search-results {\n@@ -1087,7 +1079,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tdisplay: block;\n \tmargin-top: 7px;\n \tborder-radius: 3px;\n-\tborder: 1px solid;\n+\tborder: 1px solid var(--border-color);\n \tfont-size: 1rem;\n }\n \n@@ -1096,7 +1088,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tcontent: '';\n \tposition: absolute;\n \tright: 11px;\n-\tborder: solid;\n+\tborder: solid var(--border-color);\n \tborder-width: 1px 1px 0 0;\n \tdisplay: inline-block;\n \tpadding: 4px;\n@@ -1132,13 +1124,13 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \ttext-align: center;\n \tdisplay: block;\n \tmargin: 10px 0;\n-\tborder-bottom: 1px solid;\n+\tborder-bottom: 1px solid var(--border-color);\n \tpadding-bottom: 4px;\n \tmargin-bottom: 6px;\n }\n #help-button span.bottom {\n \tclear: both;\n-\tborder-top: 1px solid;\n+\tborder-top: 1px solid var(--border-color);\n }\n .side-by-side {\n \ttext-align: initial;\n@@ -1331,6 +1323,7 @@ h3.variant {\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n \tfont-size: 1rem;\n+\tborder: 1px solid var(--border-color);\n }\n \n .tooltip.ignore::after {\n@@ -1496,7 +1489,7 @@ pre.rust {\n #source-sidebar > .title {\n \tfont-size: 1.5rem;\n \ttext-align: center;\n-\tborder-bottom: 1px solid;\n+\tborder-bottom: 1px solid var(--border-color);\n \tmargin-bottom: 6px;\n }\n #sidebar-toggle > button {\n@@ -1524,11 +1517,12 @@ pre.rust {\n \n #copy-path {\n \theight: 34px;\n+\tbackground-color: var(--main-background-color);\n }\n #settings-menu > a, #help-button > button, #copy-path {\n \tpadding: 5px;\n \twidth: 33px;\n-\tborder: 1px solid;\n+\tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n \tcursor: pointer;\n }\n@@ -1539,6 +1533,7 @@ pre.rust {\n \tpadding: 5px;\n \theight: 100%;\n \tdisplay: block;\n+\tbackground-color: var(--button-background-color);\n }\n \n @keyframes rotating {\n@@ -1588,37 +1583,13 @@ input:checked + .slider {\n \tborder: 0;\n }\n \n-#theme-choices {\n-\tdisplay: none;\n-\tposition: absolute;\n-\tleft: 0;\n-\ttop: 28px;\n-\tborder: 1px solid;\n-\tborder-radius: 3px;\n-\tz-index: 1;\n-\tcursor: pointer;\n-}\n-\n-#theme-choices > button {\n-\tborder: none;\n-\twidth: 100%;\n-\tpadding: 4px 8px;\n-\ttext-align: center;\n-\tbackground: rgba(0,0,0,0);\n-\toverflow-wrap: normal;\n-}\n-\n-#theme-choices > button:not(:first-child) {\n-\tborder-top: 1px solid;\n-}\n-\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;\n \tfont: 15px monospace;\n \tline-height: 10px;\n \tvertical-align: middle;\n-\tborder: solid 1px;\n+\tborder: solid 1px var(--border-color);\n \tborder-radius: 3px;\n \tcursor: default;\n }"}, {"sha": "e7ccd402dd024a69f96109efaa0b3b024458018c", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 62, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -14,6 +14,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--scrollbar-thumb-background-color: #5c6773;\n \t--scrollbar-color: #5c6773 #24292f;\n \t--headings-border-bottom-color: #5c6773;\n+\t--border-color: #5c6773;\n+\t--button-background-color: #141920;\n }\n \n .slider {\n@@ -36,10 +38,6 @@ h4 {\n \tborder: none;\n }\n \n-.in-band {\n-\tbackground-color: #0f1419;\n-}\n-\n .docblock code {\n \tcolor: #ffb454;\n }\n@@ -84,10 +82,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-right: 1px solid #ffb44c;\n }\n \n-.docblock table td, .docblock table th {\n-\tborder-color: #5c6773;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #777;\n }\n@@ -151,13 +145,6 @@ pre, .rustdoc.source .example-wrap {\n pre.rust .comment { color: #788797; }\n pre.rust .doccomment { color: #a1ac88; }\n \n-nav.main .current {\n-\tborder-top-color: #5c6773;\n-\tborder-bottom-color: #5c6773;\n-}\n-nav.main .separator {\n-\tborder: 1px solid #5c6773;\n-}\n a {\n \tcolor: #39AFD7;\n }\n@@ -182,17 +169,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(100%);\n }\n \n-.search-input {\n-\tbackground-color: #141920;\n-\tborder-color: #424c57;\n-}\n-\n-#crate-search {\n-\t/* Without the `!important`, the border-color is ignored for `<select>`...\n-\t   It cannot be in the group above because `.search-input` has a different border color on\n-\t   hover. */\n-\tborder-color: #5c6773 !important;\n-}\n #crate-search-div::after {\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \tfilter: invert(41%) sepia(12%) saturate(487%) hue-rotate(171deg) brightness(94%) contrast(94%);\n@@ -205,7 +181,7 @@ details.rustdoc-toggle > summary::before {\n }\n \n .search-input {\n-\tcolor: #ffffff;\n+\tcolor: #fff;\n }\n \n .module-item .stab,\n@@ -333,7 +309,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n .tooltip::after {\n \tbackground-color: #314559;\n \tcolor: #c5c5c5;\n-\tborder: 1px solid #5c6773;\n }\n \n .tooltip::before {\n@@ -342,11 +317,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \n .notable-traits-tooltiptext {\n \tbackground-color: #314559;\n-\tborder-color: #5c6773;\n-}\n-\n-.notable-traits-tooltiptext .notable {\n-\tborder-bottom-color: #5c6773;\n }\n \n #titles > button.selected {\n@@ -449,35 +419,20 @@ a.result-keyword:focus {}\n .sidebar a.current.tymethod {}\n .sidebar a.current.keyword {}\n \n-@media (max-width: 700px) {\n-\t.sidebar-elems {\n-\t\tborder-right-color: #5c6773;\n-\t}\n-}\n-\n kbd {\n \tcolor: #c5c5c5;\n \tbackground-color: #314559;\n-\tborder-color: #5c6773;\n-\tborder-bottom-color: #5c6773;\n \tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n #settings-menu > a, #help-button > button {\n-\tborder-color: #5c6773;\n-\tbackground-color: #0f1419;\n \tcolor: #fff;\n }\n \n #settings-menu > a img {\n \tfilter: invert(100);\n }\n \n-.popover, .popover::before,\n-#help-button span.top, #help-button span.bottom {\n-\tborder-color: #5c6773;\n-}\n-\n #copy-path {\n \tcolor: #fff;\n }\n@@ -493,19 +448,6 @@ kbd {\n \tborder-color: #e0e0e0;\n }\n \n-#theme-choices {\n-\tborder-color: #5c6773;\n-\tbackground-color: #0f1419;\n-}\n-\n-#theme-choices > button:not(:first-child) {\n-\tborder-top-color: #5c6773;\n-}\n-\n-#theme-choices > button:hover, #theme-choices > button:focus {\n-\tbackground-color: rgba(110, 110, 110, 0.33);\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #c5c5c5;\n }\n@@ -515,7 +457,6 @@ kbd {\n \n #source-sidebar > .title {\n \tcolor: #fff;\n-\tborder-bottom-color: #5c6773;\n }\n #source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n #source-sidebar div.files > a:focus, details.dir-entry summary:focus {"}, {"sha": "1fcda22b6f4fa8027ec92178f4d653cf71080f6d", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 63, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -9,6 +9,8 @@\n \t--scrollbar-thumb-background-color: rgba(32, 34, 37, .6);\n \t--scrollbar-color: rgba(32,34,37,.6) #5a5a5a;\n \t--headings-border-bottom-color: #d2d2d2;\n+\t--border-color: #e0e0e0;\n+\t--button-background-color: #f0f0f0;\n }\n \n .slider {\n@@ -21,10 +23,6 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-.in-band {\n-\tbackground-color: #353535;\n-}\n-\n .rust-logo {\n \tfilter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n@@ -42,10 +40,6 @@ input:focus + .slider {\n \tbackground-color: #0a042f !important;\n }\n \n-.docblock table td, .docblock table th {\n-\tborder-color: #ddd;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #777;\n }\n@@ -127,14 +121,6 @@ a.result-keyword:focus { background-color: #884719; }\n pre.rust .comment { color: #8d8d8b; }\n pre.rust .doccomment { color: #8ca375; }\n \n-nav.main .current {\n-\tborder-top-color: #eee;\n-\tborder-bottom-color: #eee;\n-}\n-nav.main .separator {\n-\tborder-color: #eee;\n-}\n-\n a {\n \tcolor: #D2991D;\n }\n@@ -154,16 +140,9 @@ details.rustdoc-toggle > summary::before {\n \n .search-input {\n \tcolor: #111;\n-\tbackground-color: #f0f0f0;\n \tborder-color: #f0f0f0;\n }\n \n-#crate-search {\n-\t/* Without the `!important`, the border-color is ignored for `<select>`...\n-\t   It cannot be in the group above because `.search-input` has a different border color on\n-\t   hover. */\n-\tborder-color: #d2d2d2 !important;\n-}\n #crate-search-div::after {\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \tfilter: invert(94%) sepia(0%) saturate(721%) hue-rotate(255deg) brightness(90%) contrast(90%);\n@@ -175,10 +154,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(69%) sepia(60%) saturate(6613%) hue-rotate(184deg) brightness(100%) contrast(91%);\n }\n \n-.search-input {\n-\tborder-color: #e0e0e0;\n-}\n-\n .search-input:focus {\n \tborder-color: #008dfd;\n }\n@@ -296,11 +271,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \n .notable-traits-tooltiptext {\n \tbackground-color: #111;\n-\tborder-color: #777;\n-}\n-\n-.notable-traits-tooltiptext .notable {\n-\tborder-bottom-color: #d2d2d2;\n }\n \n #titles > button:not(.selected) {\n@@ -317,23 +287,13 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n-@media (max-width: 700px) {\n-\t.sidebar-elems {\n-\t\tborder-right-color: #000;\n-\t}\n-}\n-\n kbd {\n \tcolor: #000;\n \tbackground-color: #fafbfc;\n-\tborder-color: #d1d5da;\n-\tborder-bottom-color: #c6cbd1;\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n #settings-menu > a, #help-button > button {\n-\tborder-color: #e0e0e0;\n-\tbackground: #f0f0f0;\n \tcolor: #000;\n }\n \n@@ -342,11 +302,6 @@ kbd {\n \tborder-color: #ffb900;\n }\n \n-.popover, .popover::before,\n-#help-button span.top, #help-button span.bottom {\n-\tborder-color: #d2d2d2;\n-}\n-\n #copy-path {\n \tcolor: #999;\n }\n@@ -357,29 +312,13 @@ kbd {\n \tfilter: invert(65%);\n }\n \n-#theme-choices {\n-\tborder-color: #e0e0e0;\n-\tbackground-color: #353535;\n-}\n-\n-#theme-choices > button:not(:first-child) {\n-\tborder-top-color: #e0e0e0;\n-}\n-\n-#theme-choices > button:hover, #theme-choices > button:focus {\n-\tbackground-color: #4e4e4e;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #fff;\n }\n .search-results .result-name span.grey {\n \tcolor: #ccc;\n }\n \n-#source-sidebar > .title {\n-\tborder-bottom-color: #ccc;\n-}\n #source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n #source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n \tbackground-color: #444;"}, {"sha": "7139c199729ae989cfc7c424d7a4ddf91d565ec4", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -9,6 +9,8 @@\n \t--scrollbar-thumb-background-color: rgba(36, 37, 39, 0.6);\n \t--scrollbar-color: rgba(36, 37, 39, 0.6) #d9d9d9;\n \t--headings-border-bottom-color: #ddd;\n+\t--border-color: #e0e0e0;\n+\t--button-background-color: #fff;\n }\n \n .slider {\n@@ -21,10 +23,6 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-.in-band {\n-\tbackground-color: white;\n-}\n-\n .rust-logo {\n \t/* This rule exists to force other themes to explicitly style the logo.\n \t * Rustdoc has a custom linter for this purpose.\n@@ -41,10 +39,6 @@ input:focus + .slider {\n \tbackground-color: #FDFFD3 !important;\n }\n \n-.docblock table td, .docblock table th {\n-\tborder-color: #ddd;\n-}\n-\n .search-results a:hover {\n \tbackground-color: #ddd;\n }\n@@ -123,14 +117,6 @@ a.result-keyword:focus { background-color: #afc6e4; }\n .sidebar a.current.tymethod { color: #a67736; }\n .sidebar a.current.keyword { color: #356da4; }\n \n-nav.main .current {\n-\tborder-top-color: #000;\n-\tborder-bottom-color: #000;\n-}\n-nav.main .separator {\n-\tborder: 1px solid #000;\n-}\n-\n a {\n \tcolor: #3873AD;\n }\n@@ -144,16 +130,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n \n-.search-input {\n-\tbackground-color: white;\n-\tborder-color: #e0e0e0;\n-}\n-#crate-search {\n-\t/* Without the `!important`, the border-color is ignored for `<select>`...\n-\t   It cannot be in the group above because `.search-input` has a different border color on\n-\t   hover. */\n-\tborder-color: #e0e0e0 !important;\n-}\n #crate-search-div::after {\n \t/* match border-color; uses https://codepen.io/sosuke/pen/Pjoqqp */\n \tfilter: invert(100%) sepia(0%) saturate(4223%) hue-rotate(289deg) brightness(114%) contrast(76%);\n@@ -279,11 +255,6 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \n .notable-traits-tooltiptext {\n \tbackground-color: #eee;\n-\tborder-color: #999;\n-}\n-\n-.notable-traits-tooltiptext .notable {\n-\tborder-bottom-color: #DDDDDD;\n }\n \n #titles > button:not(.selected) {\n@@ -300,35 +271,17 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \tcolor: #888;\n }\n \n-@media (max-width: 700px) {\n-\t.sidebar-elems {\n-\t\tborder-right-color: #000;\n-\t}\n-}\n-\n kbd {\n \tcolor: #000;\n \tbackground-color: #fafbfc;\n-\tborder-color: #d1d5da;\n-\tborder-bottom-color: #c6cbd1;\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button > button {\n-\tborder-color: #e0e0e0;\n-\tbackground-color: #fff;\n-}\n-\n #settings-menu > a:hover, #settings-menu > a:focus,\n #help-button > button:hover, #help-button > button:focus {\n \tborder-color: #717171;\n }\n \n-.popover, .popover::before,\n-#help-button span.top, #help-button span.bottom {\n-\tborder-color: #e0e0e0;\n-}\n-\n #copy-path {\n \tcolor: #999;\n }\n@@ -339,29 +292,13 @@ kbd {\n \tfilter: invert(35%);\n }\n \n-#theme-choices {\n-\tborder-color: #ccc;\n-\tbackground-color: #fff;\n-}\n-\n-#theme-choices > button:not(:first-child) {\n-\tborder-top-color: #e0e0e0;\n-}\n-\n-#theme-choices > button:hover, #theme-choices > button:focus {\n-\tbackground-color: #eee;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #000;\n }\n .search-results .result-name span.grey {\n \tcolor: #999;\n }\n \n-#source-sidebar > .title {\n-\tborder-bottom-color: #ccc;\n-}\n #source-sidebar div.files > a:hover, details.dir-entry summary:hover,\n #source-sidebar div.files > a:focus, details.dir-entry summary:focus {\n \tbackground-color: #E0E0E0;"}, {"sha": "7388722b776339b96e05f0176eb441c61e51c46e", "filename": "src/test/mir-opt/inline/polymorphic-recursion.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fpolymorphic-recursion.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,25 @@\n+// Make sure that the MIR inliner does not loop indefinitely on polymorphic recursion.\n+// compile-flags: --crate-type lib\n+\n+// Randomize `def_path_hash` by defining them under a module with different names\n+macro_rules! emit {\n+    ($($m:ident)*) => {$(\n+        pub mod $m {\n+            pub trait Tr { type Next: Tr; }\n+\n+            pub fn hoge<const N: usize, T: Tr>() {\n+                inner::<N, T>();\n+            }\n+\n+            #[inline(always)]\n+            fn inner<const N: usize, T: Tr>()\n+            {\n+                inner::<N, T::Next>();\n+                inner::<N, T::Next>();\n+            }\n+        }\n+    )*};\n+}\n+\n+// Increase the chance of triggering the bug\n+emit!(m00 m01 m02 m03 m04 m05 m06 m07 m08 m09 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19);"}, {"sha": "8f66019857fbb5284f6bd92fb014e64d24bbadcf", "filename": "src/test/mir-opt/issue-91633.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-91633.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -Z mir-opt-level=0\n+// EMIT_MIR issue_91633.hey.mir_map.0.mir\n+fn hey<T> (it: &[T])\n+ where\n+     [T] : std::ops::Index<usize>,\n+ {\n+     let _ = &it[0];\n+ }\n+\n+// EMIT_MIR issue_91633.bar.mir_map.0.mir\n+fn bar<T> (it: Box<[T]>)\n+ where\n+     [T] : std::ops::Index<usize>,\n+ {\n+     let _ = it[0];\n+ }\n+\n+// EMIT_MIR issue_91633.fun.mir_map.0.mir\n+fn fun<T> (it: &[T]) -> &T\n+ {\n+     let f = &it[0];\n+     f\n+ }\n+\n+// EMIT_MIR issue_91633.foo.mir_map.0.mir\n+fn foo<T: Clone> (it: Box<[T]>) -> T\n+ {\n+     let f = it[0].clone();\n+     f\n+ }\n+ fn main(){}"}, {"sha": "f5092d2ac923861af86d4be1775e88bcd818896c", "filename": "src/test/mir-opt/issue_91633.bar.mir_map.0.mir", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.bar.mir_map.0.mir?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,39 @@\n+// MIR for `bar` 0 mir_map\n+\n+fn bar(_1: Box<[T]>) -> () {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+    let mut _3: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:16\n+        _2 = <[T] as Index<usize>>::index(move _3, const 0_usize) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-91633.rs:+4:14: +4:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:15:14: 15:19\n+                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:18: +4:19\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n+        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n+        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+    }\n+\n+    bb2: {\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+    }\n+\n+    bb3 (cleanup): {\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+    }\n+\n+    bb4 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+    }\n+}"}, {"sha": "2e8b0feedd3f9f9790af0a5cd8e9b9c659a6d2b5", "filename": "src/test/mir-opt/issue_91633.foo.mir_map.0.mir", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.foo.mir_map.0.mir?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,57 @@\n+// MIR for `foo` 0 mir_map\n+\n+fn foo(_1: Box<[T]>) -> T {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:19: +0:21\n+    let mut _0: T;                       // return place in scope 0 at $DIR/issue-91633.rs:+0:36: +0:37\n+    let _2: T;                           // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+    let mut _3: &T;                      // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+    let _4: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+    let mut _5: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    let mut _6: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    scope 1 {\n+        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+        _4 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:17: +2:18\n+        _5 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+        _6 = Lt(_4, _5);                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+        assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> [success: bb1, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:19\n+    }\n+\n+    bb1: {\n+        _3 = &(*_1)[_4];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+2:14: +2:27\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:28:20: 28:25\n+                                         // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:26: +2:27\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+2:27: +2:28\n+        _0 = move _2;                    // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n+        drop(_2) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb3: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        drop(_1) -> [return: bb4, unwind: bb6]; // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb4: {\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+    }\n+\n+    bb5 (cleanup): {\n+        drop(_1) -> bb6;                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+    }\n+\n+    bb6 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+    }\n+}"}, {"sha": "ded9a4cf7e3f90ec2af19031bdbf2d119f241422", "filename": "src/test/mir-opt/issue_91633.fun.mir_map.0.mir", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.fun.mir_map.0.mir?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,35 @@\n+// MIR for `fun` 0 mir_map\n+\n+fn fun(_1: &[T]) -> &T {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: &T;                      // return place in scope 0 at $DIR/issue-91633.rs:+0:25: +0:27\n+    let _2: &T;                          // in scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+    let _3: usize;                       // in scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    let mut _5: bool;                    // in scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    scope 1 {\n+        debug f => _2;                   // in scope 1 at $DIR/issue-91633.rs:+2:10: +2:11\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+        _3 = const 0_usize;              // scope 0 at $DIR/issue-91633.rs:+2:18: +2:19\n+        _4 = Len((*_1));                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+        _5 = Lt(_3, _4);                 // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+2:15: +2:20\n+    }\n+\n+    bb1: {\n+        _2 = &(*_1)[_3];                 // scope 0 at $DIR/issue-91633.rs:+2:14: +2:20\n+        FakeRead(ForLet(None), _2);      // scope 0 at $DIR/issue-91633.rs:+2:10: +2:11\n+        _0 = &(*_2);                     // scope 1 at $DIR/issue-91633.rs:+3:6: +3:7\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:2: +4:3\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+4:3: +4:3\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +4:3\n+    }\n+}"}, {"sha": "74f4a5a976116b38615102590ff87ce507c3c05e", "filename": "src/test/mir-opt/issue_91633.hey.mir_map.0.mir", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_91633.hey.mir_map.0.mir?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,35 @@\n+// MIR for `hey` 0 mir_map\n+\n+fn hey(_1: &[T]) -> () {\n+    debug it => _1;                      // in scope 0 at $DIR/issue-91633.rs:+0:12: +0:14\n+    let mut _0: ();                      // return place in scope 0 at $DIR/issue-91633.rs:+1:2: +1:2\n+    let mut _2: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+    let _3: &<[T] as std::ops::Index<usize>>::Output; // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+    let mut _4: &[T];                    // in scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+    scope 1 {\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+        _4 = &(*_1);                     // scope 0 at $DIR/issue-91633.rs:+4:15: +4:17\n+        _3 = <[T] as Index<usize>>::index(move _4, const 0_usize) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/issue-91633.rs:+4:15: +4:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-91633.rs:7:15: 7:20\n+                                         // + literal: Const { ty: for<'r> fn(&'r [T], usize) -> &'r <[T] as Index<usize>>::Output {<[T] as Index<usize>>::index}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 0 at $DIR/issue-91633.rs:+4:19: +4:20\n+        _2 = &(*_3);                     // scope 0 at $DIR/issue-91633.rs:+4:14: +4:20\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-91633.rs:+4:20: +4:21\n+        _0 = const ();                   // scope 0 at $DIR/issue-91633.rs:+3:2: +5:3\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-91633.rs:+5:2: +5:3\n+        return;                          // scope 0 at $DIR/issue-91633.rs:+5:3: +5:3\n+    }\n+\n+    bb2 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-91633.rs:+0:1: +5:3\n+    }\n+}"}, {"sha": "71d514648ba26d5d576d77382373af5b220aafc4", "filename": "src/test/rustdoc-gui/pocket-menu.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fpocket-menu.goml?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -56,7 +56,7 @@ reload:\n click: \"#help-button\"\n assert-css: (\n     \"#help-button .popover\",\n-    {\"display\": \"block\", \"border-color\": \"rgb(210, 210, 210)\"},\n+    {\"display\": \"block\", \"border-color\": \"rgb(224, 224, 224)\"},\n )\n compare-elements-css: (\"#help-button .popover\", \"#help-button .top\", [\"border-color\"])\n compare-elements-css: (\"#help-button .popover\", \"#help-button .bottom\", [\"border-color\"])"}, {"sha": "35d7ca480cae1ae102502c7bb9ff898f5370c09c", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -69,7 +69,7 @@ click: \"#settings-menu\"\n wait-for: \"#settings\"\n click: \"#theme-dark\"\n wait-for-css: (\"#crate-search\", {\n-    \"border\": \"1px solid rgb(210, 210, 210)\",\n+    \"border\": \"1px solid rgb(224, 224, 224)\",\n     \"color\": \"rgb(221, 221, 221)\",\n     \"background-color\": \"rgb(53, 53, 53)\",\n })"}, {"sha": "c35a86ccd1cab0cf0cc5b989542681d3c189b1a4", "filename": "src/test/rustdoc-gui/search-form-elements.goml", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-form-elements.goml?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,243 @@\n+// This test ensures that the elements in \".search-form\" have the expected display.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+show-text: true\n+\n+// Ayu theme\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(92, 103, 115)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+        \"color\": \"rgb(255, 255, 255)\",\n+    },\n+)\n+focus: \".search-input\"\n+// Nothing should change.\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(92, 103, 115)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+        \"color\": \"rgb(255, 255, 255)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#help-button\",\n+    {\"border-color\": \"rgb(197, 197, 197)\"},\n+)\n+assert-css: (\n+    \"#help-button > button\",\n+    {\n+        \"color\": \"rgb(255, 255, 255)\",\n+        \"border-color\": \"rgb(92, 103, 115)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+    },\n+)\n+move-cursor-to: \"#help-button\"\n+assert-css: (\n+    \"#help-button:hover\",\n+    {\"border-color\": \"rgb(197, 197, 197)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#help-button:hover > button\",\n+    {\n+        \"color\": \"rgb(255, 255, 255)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#settings-menu\",\n+    {\"border-color\": \"rgb(197, 197, 197)\"},\n+)\n+assert-css: (\n+    \"#settings-menu > a\",\n+    {\n+        \"color\": \"rgb(255, 255, 255)\",\n+        \"border-color\": \"rgb(92, 103, 115)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+    },\n+)\n+move-cursor-to: \"#settings-menu\"\n+assert-css: (\n+    \"#settings-menu:hover\",\n+    {\"border-color\": \"rgb(197, 197, 197)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#settings-menu:hover > a\",\n+    {\n+        \"color\": \"rgb(255, 255, 255)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(20, 25, 32)\",\n+    },\n+)\n+\n+// Dark theme\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(240, 240, 240)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+        \"color\": \"rgb(17, 17, 17)\",\n+    },\n+)\n+focus: \".search-input\"\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(0, 141, 253)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+        \"color\": \"rgb(17, 17, 17)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#help-button\",\n+    {\"border-color\": \"rgb(221, 221, 221)\"},\n+)\n+assert-css: (\n+    \"#help-button > button\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+    },\n+)\n+move-cursor-to: \"#help-button\"\n+assert-css: (\n+    \"#help-button:hover\",\n+    {\"border-color\": \"rgb(221, 221, 221)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#help-button:hover > button\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(255, 185, 0)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#settings-menu\",\n+    {\"border-color\": \"rgb(221, 221, 221)\"},\n+)\n+assert-css: (\n+    \"#settings-menu > a\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+    },\n+)\n+move-cursor-to: \"#settings-menu\"\n+assert-css: (\n+    \"#settings-menu:hover\",\n+    {\"border-color\": \"rgb(221, 221, 221)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#settings-menu:hover > a\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(255, 185, 0)\",\n+        \"background-color\": \"rgb(240, 240, 240)\",\n+    },\n+)\n+\n+// Light theme\n+local-storage: {\n+    \"rustdoc-theme\": \"light\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+        \"color\": \"rgb(0, 0, 0)\",\n+    },\n+)\n+focus: \".search-input\"\n+// Nothing should change.\n+assert-css: (\n+    \".search-input\",\n+    {\n+        \"border-color\": \"rgb(102, 175, 233)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+        \"color\": \"rgb(0, 0, 0)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#help-button\",\n+    {\"border-color\": \"rgb(0, 0, 0)\"},\n+)\n+assert-css: (\n+    \"#help-button > button\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+    },\n+)\n+move-cursor-to: \"#help-button\"\n+assert-css: (\n+    \"#help-button:hover\",\n+    {\"border-color\": \"rgb(0, 0, 0)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#help-button:hover > button\",\n+    {\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"border-color\": \"rgb(113, 113, 113)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+    },\n+)\n+\n+assert-css: (\n+    \"#settings-menu\",\n+    {\"border-color\": \"rgb(0, 0, 0)\"},\n+)\n+assert-css: (\n+    \"#settings-menu > a\",\n+    {\n+        \"color\": \"rgb(56, 115, 173)\",\n+        \"border-color\": \"rgb(224, 224, 224)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+    },\n+)\n+move-cursor-to: \"#settings-menu\"\n+assert-css: (\n+    \"#settings-menu:hover\",\n+    {\"border-color\": \"rgb(0, 0, 0)\"},\n+)\n+// Only \"border-color\" should change.\n+assert-css: (\n+    \"#settings-menu:hover > a\",\n+    {\n+        \"color\": \"rgb(56, 115, 173)\",\n+        \"border-color\": \"rgb(113, 113, 113)\",\n+        \"background-color\": \"rgb(255, 255, 255)\",\n+    },\n+)"}, {"sha": "6903e1a1bf5c63e941975c068295961b929e2036", "filename": "src/test/rustdoc-gui/search-input.goml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-input.goml?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -3,9 +3,8 @@ goto: file://|DOC_PATH|/test_docs/index.html\n local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n reload:\n \n-assert-css: (\".search-input\", {\"border-color\": \"rgb(224, 224, 224)\"})\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(240, 240, 240)\"})\n click: \".search-input\"\n-focus: \".search-input\"\n assert-css: (\".search-input\", {\"border-color\": \"rgb(0, 141, 253)\"})\n \n local-storage: {\"rustdoc-theme\": \"light\"}\n@@ -18,6 +17,6 @@ assert-css: (\".search-input\", {\"border-color\": \"rgb(102, 175, 233)\"})\n local-storage: {\"rustdoc-theme\": \"ayu\"}\n reload:\n \n-assert-css: (\".search-input\", {\"border-color\": \"rgb(66, 76, 87)\"})\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(92, 103, 115)\"})\n click: \".search-input\"\n-assert-css: (\".search-input\", {\"border-color\": \"rgb(66, 76, 87)\"})\n+assert-css: (\".search-input\", {\"border-color\": \"rgb(92, 103, 115)\"})"}, {"sha": "f09d23206093d7a36d43f6789ed479c8c74206e9", "filename": "src/test/rustdoc/issue-100679-sidebar-links-deref.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-100679-sidebar-links-deref.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,30 @@\n+#![crate_name=\"foo\"]\n+\n+pub struct Vec;\n+\n+pub struct Slice;\n+\n+impl std::ops::Deref for Vec {\n+    type Target = Slice;\n+    fn deref(&self) -> &Slice {\n+        &Slice\n+    }\n+}\n+\n+// @has foo/struct.Vec.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty\"]' \\\n+//          \"is_empty\"\n+impl Vec {\n+    pub fn is_empty(&self) -> bool {\n+        true\n+    }\n+}\n+\n+// @has foo/struct.Vec.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty-1\"]' \\\n+//          \"is_empty\"\n+// @has foo/struct.Slice.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.is_empty\"]' \\\n+//          \"is_empty\"\n+impl Slice {\n+    pub fn is_empty(&self) -> bool {\n+        true\n+    }\n+}"}, {"sha": "9431fb33c53295c0d53f4d85369d520db2903c07", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -278,26 +278,36 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n                \u257eallocN\u2500\u257c \u257eallocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:147:62\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:147:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257eallocN\u2500\u257c 00 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+           }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:150:65\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:149:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 4) {\n+               \u257eallocN\u2500\u257c \u257eallocN\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+           }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:155:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:159:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable"}, {"sha": "15ef703024aff77228181e33c4b20dcfb97369d1", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -278,26 +278,36 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n            }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:147:62\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:147:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+           }\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-wide-ptr.rs:150:65\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-wide-ptr.rs:149:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered allocN, but expected a vtable pointer\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 16, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500allocN\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:157:5\n+  --> $DIR/ub-wide-ptr.rs:155:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer use: null pointer is a dangling pointer (it has no provenance)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:161:5\n+  --> $DIR/ub-wide-ptr.rs:159:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using allocN as vtable pointer but it does not point to a vtable"}, {"sha": "2da694a8bc43c1a19fa7da1c3e0000fd684f9b0a", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -145,11 +145,9 @@ const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool\n \n // # raw trait object\n const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n-//~^ ERROR evaluation of constant value failed\n-//~| null pointer\n+//~^ ERROR it is undefined behavior to use this value\n const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-//~^ ERROR evaluation of constant value failed\n-//~| does not point to a vtable\n+//~^ ERROR it is undefined behavior to use this value\n const RAW_TRAIT_OBJ_CONTENT_INVALID: *const dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) } as *const dyn Trait; // ok because raw\n \n // Const eval fails for these, so they need to be statics to error."}, {"sha": "c43df40d6c26ad1a374a820881eb9b1ed6381cda", "filename": "src/test/ui/drop/drop-foreign-fundamental.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,23 @@\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Whatever<T>(T);\n+\n+impl<T> Deref for Whatever<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n+struct A;\n+\n+impl Drop for Pin<Whatever<A>> {\n+    //~^ ERROR  the `Drop` trait may only be implemented for local structs, enums, and unions\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let x = Pin::new(Whatever(1.0f32));\n+}"}, {"sha": "fbd1ba0859134b8ea4b33b54655bed8bdb2d59e6", "filename": "src/test/ui/drop/drop-foreign-fundamental.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop-foreign-fundamental.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,9 @@\n+error[E0120]: the `Drop` trait may only be implemented for local structs, enums, and unions\n+  --> $DIR/drop-foreign-fundamental.rs:16:15\n+   |\n+LL | impl Drop for Pin<Whatever<A>> {\n+   |               ^^^^^^^^^^^^^^^^ must be a struct, enum, or union in the current crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0120`."}, {"sha": "145eab126c28deb1771cde394d7c2a120696c419", "filename": "src/test/ui/dropck/drop-on-non-struct.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,5 +1,5 @@\n impl<'a> Drop for &'a mut isize {\n-    //~^ ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n+    //~^ ERROR the `Drop` trait may only be implemented for local structs, enums, and unions\n     //~^^ ERROR E0117\n     fn drop(&mut self) {\n         println!(\"kaboom\");\n@@ -8,8 +8,7 @@ impl<'a> Drop for &'a mut isize {\n \n impl Drop for Nonexistent {\n     //~^ ERROR cannot find type `Nonexistent`\n-    fn drop(&mut self) { }\n+    fn drop(&mut self) {}\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "e8fbe5e972642ebc870ba85f308fa70bb2e1bf0a", "filename": "src/test/ui/dropck/drop-on-non-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-on-non-struct.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -15,11 +15,11 @@ LL | impl<'a> Drop for &'a mut isize {\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n+error[E0120]: the `Drop` trait may only be implemented for local structs, enums, and unions\n   --> $DIR/drop-on-non-struct.rs:1:19\n    |\n LL | impl<'a> Drop for &'a mut isize {\n-   |                   ^^^^^^^^^^^^^ must be a struct, enum, or union\n+   |                   ^^^^^^^^^^^^^ must be a struct, enum, or union in the current crate\n \n error: aborting due to 3 previous errors\n "}, {"sha": "406d24e36661449a7ab28ea6eb36dc75314daa8c", "filename": "src/test/ui/error-codes/E0117.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,4 +1,4 @@\n impl Drop for u32 {} //~ ERROR E0117\n-//~| ERROR the `Drop` trait may only be implemented for structs, enums, and unions\n+//~| ERROR the `Drop` trait may only be implemented for local structs, enums, and unions\n \n fn main() {}"}, {"sha": "f144aa9f72c131d0e1dfd1140ac2668df3bbdbe8", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -9,11 +9,11 @@ LL | impl Drop for u32 {}\n    |\n    = note: define and implement a trait or new type instead\n \n-error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n+error[E0120]: the `Drop` trait may only be implemented for local structs, enums, and unions\n   --> $DIR/E0117.rs:1:15\n    |\n LL | impl Drop for u32 {}\n-   |               ^^^ must be a struct, enum, or union\n+   |               ^^^ must be a struct, enum, or union in the current crate\n \n error: aborting due to 2 previous errors\n "}, {"sha": "75778f1f94a16ac61cc233b183cd7c30cbfd6f0c", "filename": "src/test/ui/error-codes/E0120.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0120.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -1,8 +1,8 @@\n-error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n+error[E0120]: the `Drop` trait may only be implemented for local structs, enums, and unions\n   --> $DIR/E0120.rs:3:15\n    |\n LL | impl Drop for dyn MyTrait {\n-   |               ^^^^^^^^^^^ must be a struct, enum, or union\n+   |               ^^^^^^^^^^^ must be a struct, enum, or union in the current crate\n \n error: aborting due to previous error\n "}, {"sha": "e249db9df5324998595eecbf2e3d0c92ad13a053", "filename": "src/test/ui/issues/issue-41974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41974.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -7,11 +7,11 @@ LL | impl<T> Drop for T where T: A {\n    = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local\n    = note: only traits defined in the current crate can be implemented for a type parameter\n \n-error[E0120]: the `Drop` trait may only be implemented for structs, enums, and unions\n+error[E0120]: the `Drop` trait may only be implemented for local structs, enums, and unions\n   --> $DIR/issue-41974.rs:7:18\n    |\n LL | impl<T> Drop for T where T: A {\n-   |                  ^ must be a struct, enum, or union\n+   |                  ^ must be a struct, enum, or union in the current crate\n \n error: aborting due to 2 previous errors\n "}, {"sha": "adb72c26bba470274533ab8b03aafff9d4b1dac4", "filename": "src/test/ui/span/lint-unused-unsafe-thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -22,7 +22,7 @@ fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n-unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }\n fn bad6() {\n     unsafe {                             // don't put the warning here\n         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n@@ -31,7 +31,7 @@ fn bad6() {\n     }\n }\n unsafe fn bad7() {\n-    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+    unsafe {\n         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n             unsf()\n         }"}, {"sha": "3bcbb759775aac879dc2cc2a4c157f5442b30309", "filename": "src/test/ui/span/lint-unused-unsafe-thir.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe-thir.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -30,14 +30,6 @@ error: unnecessary `unsafe` block\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe-thir.rs:25:20\n-   |\n-LL | unsafe fn bad5() { unsafe { unsf() } }\n-   | ----------------   ^^^^^^ unnecessary `unsafe` block\n-   | |\n-   | because it's nested under this `unsafe` fn\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe-thir.rs:28:9\n    |\n@@ -54,13 +46,5 @@ LL |     unsafe {\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe-thir.rs:34:5\n-   |\n-LL | unsafe fn bad7() {\n-   | ---------------- because it's nested under this `unsafe` fn\n-LL |     unsafe {\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "d8412908c738320512891c307ac39aa3ff1e155c", "filename": "src/test/ui/span/lint-unused-unsafe.mir.stderr", "status": "modified", "additions": 63, "deletions": 485, "changes": 548, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.mir.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -28,17 +28,6 @@ error: unnecessary `unsafe` block\n LL | fn bad4() { unsafe { callback(||{}) } }\n    |             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:30:20\n-   |\n-LL | unsafe fn bad5() { unsafe { unsf() } }\n-   | ----------------   ^^^^^^ unnecessary `unsafe` block\n-   | |\n-   | because it's nested under this `unsafe` fn\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-   = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:32:5\n    |\n@@ -51,17 +40,6 @@ error: unnecessary `unsafe` block\n LL |     unsafe {\n    |     ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:40:9\n-   |\n-LL | unsafe fn bad7() {\n-   | ---------------- because it's nested under this `unsafe` fn\n-LL |     unsafe {\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:74:9\n    |\n@@ -272,91 +250,32 @@ error: unnecessary `unsafe` block\n LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:197:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:194:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:198:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:199:13\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             unsafe { unsf() }\n-   |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:205:9\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:203:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:207:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:208:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n ...\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:209:13\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         unsafe {\n+   |         ------ because it's nested under this `unsafe` block\n ...\n LL |             unsafe { unsf() }\n    |             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:220:17\n@@ -398,19 +317,12 @@ LL |         unsafe {\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:254:9\n+  --> $DIR/lint-unused-unsafe.rs:255:13\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:252:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ------ because it's nested under this `unsafe` block\n+LL |             unsafe {\n+   |             ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:268:13\n@@ -630,91 +542,32 @@ error: unnecessary `unsafe` block\n LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:409:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:406:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:410:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:411:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { unsf() };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:417:20\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:415:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:419:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             unsf();\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:420:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:421:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { unsf() };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:432:28\n@@ -756,19 +609,12 @@ LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:466:20\n+  --> $DIR/lint-unused-unsafe.rs:467:24\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:464:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:480:24\n@@ -988,91 +834,32 @@ error: unnecessary `unsafe` block\n LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:622:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:619:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:623:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:624:24\n-   |\n-LL |     unsafe fn granularity_2() {\n-   |     ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = || unsafe { let _ = || unsf(); };\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:630:20\n-   |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:628:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:632:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsf();\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:633:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:634:24\n    |\n-LL |     unsafe fn top_level_used_2() {\n-   |     ---------------------------- because it's nested under this `unsafe` fn\n+LL |         let _ = || unsafe {\n+   |                    ------ because it's nested under this `unsafe` block\n ...\n LL |             let _ = || unsafe { let _ = || unsf(); };\n    |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:645:28\n@@ -1114,19 +901,12 @@ LL |         let _ = || unsafe {\n    |                    ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:679:20\n+  --> $DIR/lint-unused-unsafe.rs:680:24\n    |\n-LL |     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |     ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |         let _ = || unsafe {\n-   |                    ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:677:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ------ because it's nested under this `unsafe` block\n+LL |             let _ = || unsafe {\n+   |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:693:24\n@@ -1256,91 +1036,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:784:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:781:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:785:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:786:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:792:24\n-   |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:790:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:794:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:795:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:796:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:807:32\n@@ -1382,19 +1103,12 @@ LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:841:24\n+  --> $DIR/lint-unused-unsafe.rs:842:28\n    |\n-LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:839:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:855:28\n@@ -1524,91 +1238,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:942:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:939:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:943:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:944:28\n-   |\n-LL |         unsafe fn granularity_2() {\n-   |         ------------------------- because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = || unsafe { unsf() };\n-   |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:950:24\n-   |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:948:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:952:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 unsf();\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:953:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:954:28\n    |\n-LL |         unsafe fn top_level_used_2() {\n-   |         ---------------------------- because it's nested under this `unsafe` fn\n+LL |             let _ = || unsafe {\n+   |                        ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = || unsafe { unsf() };\n    |                            ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:965:32\n@@ -1650,19 +1305,12 @@ LL |             let _ = || unsafe {\n    |                        ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:999:24\n+  --> $DIR/lint-unused-unsafe.rs:1000:28\n    |\n-LL |         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-   |         ----------------------------------------------- because it's nested under this `unsafe` fn\n LL |             let _ = || unsafe {\n-   |                        ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:997:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ------ because it's nested under this `unsafe` block\n+LL |                 let _ = || unsafe {\n+   |                            ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1013:28\n@@ -1672,21 +1320,6 @@ LL |             let _ = || unsafe {\n LL |                 let _ = || unsafe {\n    |                            ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1044:9\n-   |\n-LL |     unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n-   |     -------------------------------------------------- because it's nested under this `unsafe` fn\n-LL |         unsafe {\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:1045:21\n-   |\n-LL |             #[allow(unsafe_op_in_unsafe_fn)]\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1059:29\n    |\n@@ -1726,87 +1359,32 @@ error: unnecessary `unsafe` block\n LL |             let _ = async { unsafe {\n    |                             ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1074:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/lint-unused-unsafe.rs:1071:17\n-   |\n-LL |         #[allow(unsafe_op_in_unsafe_fn)]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1075:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1076:33\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n-   |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/lint-unused-unsafe.rs:1078:29\n-   |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |             let _ = async { unsafe {\n-   |                             ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1080:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n-...\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n+LL |                 let _ = async { unsf() };\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1081:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1082:33\n    |\n-LL |     async unsafe fn async_blocks() {\n-   |     ------------------------------ because it's nested under this `unsafe` fn\n+LL |             let _ = async { unsafe {\n+   |                             ------ because it's nested under this `unsafe` block\n ...\n LL |                 let _ = async { unsafe { let _ = async { unsf() }; }};\n    |                                 ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:1092:22\n@@ -1820,5 +1398,5 @@ error: unnecessary `unsafe` block\n LL |         let _x: [(); unsafe { unsafe { size() } }] = [];\n    |                      ^^^^^^ unnecessary `unsafe` block\n \n-error: aborting due to 201 previous errors\n+error: aborting due to 174 previous errors\n "}, {"sha": "5d042768be0025ee994a10e10aaf558b2a181ffe", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -27,7 +27,7 @@ fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n-unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+unsafe fn bad5() { unsafe { unsf() } }\n fn bad6() {\n     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n         unsafe {                         // don't put the warning here\n@@ -37,7 +37,7 @@ fn bad6() {\n }\n unsafe fn bad7() {\n     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             unsf()\n         }\n     }\n@@ -194,15 +194,15 @@ mod additional_tests {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         unsafe { //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n-            unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n+            unsafe { unsf() }\n         }\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             unsf();\n             unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n             unsafe { unsf() } //~ ERROR: unnecessary `unsafe` block\n@@ -251,8 +251,8 @@ mod additional_tests {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n-            unsafe {\n+        unsafe {\n+            unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     unsf();\n@@ -406,15 +406,15 @@ mod additional_tests_closures {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n+            let _ = || unsafe { unsf() };\n         };\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+        let _ = || unsafe {\n             unsf();\n             let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n             let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -463,8 +463,8 @@ mod additional_tests_closures {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     unsf();\n@@ -619,15 +619,15 @@ mod additional_tests_even_more_closures {\n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granularity_2() {\n         let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n+            let _ = || unsafe { let _ = || unsf(); };\n         };\n     }\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn top_level_used_2() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+        let _ = || unsafe {\n             let _ = || unsf();\n             let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n             let _ = || unsafe { let _ = || unsf(); }; //~ ERROR: unnecessary `unsafe` block\n@@ -676,8 +676,8 @@ mod additional_tests_even_more_closures {\n \n     #[allow(unsafe_op_in_unsafe_fn)]\n     unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-        let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-            let _ = || unsafe {\n+        let _ = || unsafe {\n+            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                 #[deny(unsafe_op_in_unsafe_fn)]\n                 {\n                     let _ = || unsf();\n@@ -781,15 +781,15 @@ mod item_likes {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granularity_2() {\n             let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n             };\n         }\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn top_level_used_2() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n                 unsf();\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -838,8 +838,8 @@ mod item_likes {\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                     #[deny(unsafe_op_in_unsafe_fn)]\n                     {\n                         unsf();\n@@ -939,15 +939,15 @@ mod item_likes {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granularity_2() {\n             let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n+                let _ = || unsafe { unsf() };\n             };\n         }\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn top_level_used_2() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = || unsafe {\n                 unsf();\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n                 let _ = || unsafe { unsf() }; //~ ERROR: unnecessary `unsafe` block\n@@ -996,8 +996,8 @@ mod item_likes {\n \n         #[allow(unsafe_op_in_unsafe_fn)]\n         unsafe fn granular_disallow_op_in_unsafe_fn_3() {\n-            let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = || unsafe {\n+            let _ = || unsafe {\n+                let _ = || unsafe { //~ ERROR: unnecessary `unsafe` block\n                     #[deny(unsafe_op_in_unsafe_fn)]\n                     {\n                         unsf();\n@@ -1041,7 +1041,7 @@ mod additional_tests_extra {\n \n     #[warn(unsafe_op_in_unsafe_fn)]\n     unsafe fn multiple_unsafe_op_in_unsafe_fn_allows() {\n-        unsafe { //~ ERROR: unnecessary `unsafe` block\n+        unsafe {\n             #[allow(unsafe_op_in_unsafe_fn)]\n             {\n                 unsf();\n@@ -1071,11 +1071,11 @@ mod additional_tests_extra {\n         #[allow(unsafe_op_in_unsafe_fn)]\n         {\n             let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n-                let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n+                let _ = async { unsafe { let _ = async { unsf() }; }};\n             }};\n-            let _ = async { unsafe { //~ ERROR: unnecessary `unsafe` block\n+            let _ = async { unsafe {\n                 let _ = async { unsf() };\n                 let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block\n                 let _ = async { unsafe { let _ = async { unsf() }; }}; //~ ERROR: unnecessary `unsafe` block"}, {"sha": "331a798dd7a36260ec617103700bc34425d1cdd2", "filename": "src/test/ui/typeck/issue-91633.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91633.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+fn f<T> (it: &[T])\n+where\n+    [T] : std::ops::Index<usize>,\n+{\n+    let _ = &it[0];\n+}\n+fn main(){}"}, {"sha": "b968174dd2d7ec09eb48d9df2fa9ba37db4cebc5", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -81,54 +81,22 @@ error: unnecessary `unsafe` block\n LL |     unsafe { unsafe { unsf() } }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n-   |\n-LL | unsafe fn allow_level() {\n-   | ----------------------- because it's nested under this `unsafe` fn\n-...\n-LL |     unsafe { unsf() }\n-   |     ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:53:9\n-   |\n-LL | #[allow(unsafe_op_in_unsafe_fn)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n-   |\n-LL | unsafe fn nested_allow_level() {\n-   | ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |         unsafe { unsf() }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-   |\n-   = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`\n-note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:65:13\n-   |\n-LL |     #[allow(unsafe_op_in_unsafe_fn)]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:81:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "db1e916a36c1fb7e885171e727806bdf6dc9b58d", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -58,7 +58,6 @@ unsafe fn allow_level() {\n     VOID = ();\n \n     unsafe { unsf() }\n-    //~^ ERROR unnecessary `unsafe` block\n }\n \n unsafe fn nested_allow_level() {\n@@ -70,7 +69,6 @@ unsafe fn nested_allow_level() {\n         VOID = ();\n \n         unsafe { unsf() }\n-        //~^ ERROR unnecessary `unsafe` block\n     }\n }\n "}, {"sha": "e365293657e305259afbec3c352845d0572b65ec", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b28cd2f16bd5b832183d7968cae3bb9213e78d/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=e1b28cd2f16bd5b832183d7968cae3bb9213e78d", "patch": "@@ -83,40 +83,22 @@ LL |     unsafe { unsafe { unsf() } }\n    |     |\n    |     because it's nested under this `unsafe` block\n \n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:60:5\n-   |\n-LL | unsafe fn allow_level() {\n-   | ----------------------- because it's nested under this `unsafe` fn\n-...\n-LL |     unsafe { unsf() }\n-   |     ^^^^^^ unnecessary `unsafe` block\n-\n-error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:72:9\n-   |\n-LL | unsafe fn nested_allow_level() {\n-   | ------------------------------ because it's nested under this `unsafe` fn\n-...\n-LL |         unsafe { unsf() }\n-   |         ^^^^^^ unnecessary `unsafe` block\n-\n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:83:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:81:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}