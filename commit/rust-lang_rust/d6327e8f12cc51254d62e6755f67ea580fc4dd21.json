{"sha": "d6327e8f12cc51254d62e6755f67ea580fc4dd21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MzI3ZThmMTJjYzUxMjU0ZDYyZTY3NTVmNjdlYTU4MGZjNGRkMjE=", "commit": {"author": {"name": "AnthonyMikh", "email": "anthony.mikh@yandex.ru", "date": "2019-09-25T20:23:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T20:23:19Z"}, "message": "Use map + sum instead of fold for computing Unicode width", "tree": {"sha": "b5b4a271c050f534440735ffec4319e8008a967d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b4a271c050f534440735ffec4319e8008a967d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6327e8f12cc51254d62e6755f67ea580fc4dd21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi8y3CRBK7hj4Ov3rIwAAdHIIAK6J1PNl0wVXegNWK1aDrBtX\nVYRmXurG3WacEF2/bcd9WTdec6gy++7lQgv37t0oBF5vjBh5fyoIzY3zBem8/85U\nOP2HotD9Gi1qd+JjZbImW+fTHbowL3bBzKXz7VnLAfRD8K1fIJ1pXbPj4QpY/1BQ\nmRQ1dmTn+rNlZOL9NYpfWmuWMKgTEpMH7q+heMVe0A7UB3Fa+X7ngHBeSm0mqtvh\nlul/mSmddkmACdbLJ4zQafTlXXxO2nbIauyKb54/uIpBi8fx2hCcq0wXT19Rgt2p\nNCaZiCQAyJL0RSHY5Os7m/wkl4QCkvvyDtwhMd73mGZjN0Wh9QiM8Aq2V/NNI4c=\n=z+sE\n-----END PGP SIGNATURE-----\n", "payload": "tree b5b4a271c050f534440735ffec4319e8008a967d\nparent 4fc5650d17794c00fbf03597b35979de7094d386\nauthor AnthonyMikh <anthony.mikh@yandex.ru> 1569442999 +0300\ncommitter GitHub <noreply@github.com> 1569442999 +0300\n\nUse map + sum instead of fold for computing Unicode width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6327e8f12cc51254d62e6755f67ea580fc4dd21", "html_url": "https://github.com/rust-lang/rust/commit/d6327e8f12cc51254d62e6755f67ea580fc4dd21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6327e8f12cc51254d62e6755f67ea580fc4dd21/comments", "author": {"login": "AnthonyMikh", "id": 19252795, "node_id": "MDQ6VXNlcjE5MjUyNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/19252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnthonyMikh", "html_url": "https://github.com/AnthonyMikh", "followers_url": "https://api.github.com/users/AnthonyMikh/followers", "following_url": "https://api.github.com/users/AnthonyMikh/following{/other_user}", "gists_url": "https://api.github.com/users/AnthonyMikh/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnthonyMikh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnthonyMikh/subscriptions", "organizations_url": "https://api.github.com/users/AnthonyMikh/orgs", "repos_url": "https://api.github.com/users/AnthonyMikh/repos", "events_url": "https://api.github.com/users/AnthonyMikh/events{/privacy}", "received_events_url": "https://api.github.com/users/AnthonyMikh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc5650d17794c00fbf03597b35979de7094d386", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc5650d17794c00fbf03597b35979de7094d386", "html_url": "https://github.com/rust-lang/rust/commit/4fc5650d17794c00fbf03597b35979de7094d386"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "17a5fac6da75ea77a97a6d19677286b87dacc38a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6327e8f12cc51254d62e6755f67ea580fc4dd21/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6327e8f12cc51254d62e6755f67ea580fc4dd21/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d6327e8f12cc51254d62e6755f67ea580fc4dd21", "patch": "@@ -594,9 +594,9 @@ impl EmitterWriter {\n \n         let left = margin.left(source_string.len()); // Left trim\n         // Account for unicode characters of width !=0 that were removed.\n-        let left = source_string.chars().take(left).fold(0, |acc, ch| {\n-            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n-        });\n+        let left = source_string.chars().take(left)\n+            .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n+            .sum();\n \n         self.draw_line(\n             buffer,\n@@ -1512,9 +1512,9 @@ impl EmitterWriter {\n                             .saturating_sub(part.snippet.trim_start().len());\n                         // ...or trailing spaces. Account for substitutions containing unicode\n                         // characters.\n-                        let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n-                        });\n+                        let sub_len = part.snippet.trim().chars()\n+                            .map(|ch| unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n+                            .sum();\n \n                         let underline_start = (span_start_pos + start) as isize + offset;\n                         let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n@@ -1535,9 +1535,9 @@ impl EmitterWriter {\n                         }\n \n                         // length of the code after substitution\n-                        let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1) as isize\n-                        });\n+                        let full_sub_len = part.snippet.chars()\n+                            .map(|ch| acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1))\n+                            .sum() as isize;\n \n                         // length of the code to be substituted\n                         let snippet_len = span_end_pos as isize - span_start_pos as isize;"}]}