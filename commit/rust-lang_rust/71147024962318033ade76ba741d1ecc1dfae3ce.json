{"sha": "71147024962318033ade76ba741d1ecc1dfae3ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMTQ3MDI0OTYyMzE4MDMzYWRlNzZiYTc0MWQxZWNjMWRmYWUzY2U=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T12:11:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-21T12:24:14Z"}, "message": "Change the way block calls are parsed, mark them as block-calls.\n\nThis makes it possible to omit the semicolon after the block, and will\ncause the pretty-printer to properly print such calls (if\npretty-printing of blocks wasn't so broken). Block calls (with the\nblock outside of the parentheses) can now only occur at statement\nlevel, and their value can not be used. When calling a block-style\nfunction that returns a useful value, the block must be put insde the\nparentheses.\n\nIssue #1054", "tree": {"sha": "42b750199d41f59916ac0542aa141fb254bd9be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b750199d41f59916ac0542aa141fb254bd9be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71147024962318033ade76ba741d1ecc1dfae3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71147024962318033ade76ba741d1ecc1dfae3ce", "html_url": "https://github.com/rust-lang/rust/commit/71147024962318033ade76ba741d1ecc1dfae3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71147024962318033ade76ba741d1ecc1dfae3ce/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce40f60e79598c198851154cc978375ed5e7747", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce40f60e79598c198851154cc978375ed5e7747", "html_url": "https://github.com/rust-lang/rust/commit/0ce40f60e79598c198851154cc978375ed5e7747"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "0def097992854f01a7be588607fcd2f2abdda19f", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -302,7 +302,7 @@ fn mk_test_wrapper(cx: test_ctxt,\n                    span: span) -> @ast::expr {\n     let call_expr: ast::expr = {\n         id: cx.next_node_id(),\n-        node: ast::expr_call(@fn_path_expr, []),\n+        node: ast::expr_call(@fn_path_expr, [], false),\n         span: span\n     };\n \n@@ -401,7 +401,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n     let test_path_expr: ast::expr =\n         {id: cx.next_node_id(), node: test_path_expr_, span: dummy_sp()};\n \n-    let test_call_expr_: ast::expr_ = ast::expr_call(@test_path_expr, []);\n+    let test_call_expr_ = ast::expr_call(@test_path_expr, [], false);\n \n     let test_call_expr: ast::expr =\n         {id: cx.next_node_id(), node: test_call_expr_, span: dummy_sp()};\n@@ -419,7 +419,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n \n     let test_main_call_expr_: ast::expr_ =\n         ast::expr_call(@test_main_path_expr,\n-                       [@args_path_expr, @test_call_expr]);\n+                       [@args_path_expr, @test_call_expr], false);\n \n     let test_main_call_expr: ast::expr =\n         {id: cx.next_node_id(), node: test_main_call_expr_, span: dummy_sp()};"}, {"sha": "5b96bddfe3f3fd813f02dc3c39db796303e1562e", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -93,7 +93,7 @@ fn visit_fn(cx: @ctx, f: ast::_fn, _tp: [ast::ty_param], sp: span,\n fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n     let handled = true;\n     alt ex.node {\n-      ast::expr_call(f, args) {\n+      ast::expr_call(f, args, _) {\n         check_call(*cx, f, args);\n         handled = false;\n       }\n@@ -667,7 +667,7 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n     }\n     if is_none(path_def_id(cx, base_root.ex)) {\n         alt base_root.ex.node {\n-          ast::expr_call(f, args) {\n+          ast::expr_call(f, args, _) {\n             let fty = ty::expr_ty(cx.tcx, f);\n             alt ty::ty_fn_ret_style(cx.tcx, fty) {\n               ast::return_ref(mut, arg_n) {"}, {"sha": "e7c3033ce1f20f6ecc95ecd363cd452d241d1caa", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -42,7 +42,7 @@ fn fn_usage_expr(expr: @ast::expr,\n         }\n       }\n \n-      ast::expr_call(f, args) {\n+      ast::expr_call(f, args, _) {\n         let f_ctx = {unsafe_fn_legal: true,\n                      generic_bare_fn_legal: true with ctx};\n         v.visit_expr(f, f_ctx, v);"}, {"sha": "81032c6a91f436e52d864d603ee691730e09f151", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -174,7 +174,7 @@ fn need_shared_or_pinned_ctor(tcx: ty::ctxt, a: @ast::expr, descr: str) {\n     fn pinned_ctor(a: @ast::expr) -> bool {\n         // FIXME: Technically a lambda block is also a pinned ctor\n         alt a.node {\n-          ast::expr_call(cexpr, _) {\n+          ast::expr_call(cexpr, _, _) {\n             // Assuming that if it's a call that it's safe to move in, mostly\n             // because I don't know offhand how to ensure that it's a call\n             // specifically to a resource constructor\n@@ -224,7 +224,7 @@ fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n       ast::expr_fail(option::some(a)) {\n         need_expr_kind(tcx, a, ast::kind_shared, \"'fail' operand\");\n       }\n-      ast::expr_call(callee, _) {\n+      ast::expr_call(callee, _, _) {\n         let tpt = ty::expr_ty_params_and_ty(tcx, callee);\n \n         // If we have typarams, we're calling an item; we need to check"}, {"sha": "4c286e6cab4371282020ffc0e84c9ca2f40969d2", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -150,7 +150,7 @@ fn visit_decl(cx: @ctx, d: @decl, &&e: (), v: visit::vt<()>) {\n \n fn visit_expr(cx: @ctx, ex: @expr, &&e: (), v: visit::vt<()>) {\n     alt ex.node {\n-      expr_call(f, args) { check_call(cx, f, args); }\n+      expr_call(f, args, _) { check_call(cx, f, args); }\n       expr_swap(lhs, rhs) {\n         check_lval(cx, lhs, msg_assign);\n         check_lval(cx, rhs, msg_assign);"}, {"sha": "d47ee48734166831de570860efb798fd05ccccc1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -3147,7 +3147,7 @@ fn expr_is_lval(tcx: ty::ctxt, e: @ast::expr) -> bool {\n           ty::ty_rec(_) { true }\n         }\n       }\n-      ast::expr_call(f, _) {\n+      ast::expr_call(f, _, _) {\n           let fty = ty::expr_ty(tcx, f);\n           ast_util::ret_by_ref(ty::ty_fn_ret_style(tcx, fty))\n       }\n@@ -3198,7 +3198,7 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n         ret lval_owned(sub.bcx, val);\n       }\n       // This is a by-ref returning call. Regular calls are not lval\n-      ast::expr_call(f, args) {\n+      ast::expr_call(f, args, _) {\n         let cell = empty_dest_cell();\n         let bcx = trans_call(cx, f, args, e.id, by_val(cell));\n         ret lval_owned(bcx, *cell);\n@@ -4175,7 +4175,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       ast::expr_anon_obj(anon_obj) {\n         ret trans_anon_obj(bcx, e.span, anon_obj, e.id, dest);\n       }\n-      ast::expr_call(f, args) {\n+      ast::expr_call(f, args, _) {\n         ret trans_call(bcx, f, args, e.id, dest);\n       }\n       ast::expr_field(_, _) {"}, {"sha": "b8544e2b5add322333a9321418b58401b3fade7a", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -607,7 +607,7 @@ fn exprs_to_constr_args(tcx: ty::ctxt, args: [@expr]) -> [@constr_arg_use] {\n \n fn expr_to_constr(tcx: ty::ctxt, e: @expr) -> sp_constr {\n     alt e.node {\n-      expr_call(operator, args) {\n+      expr_call(operator, args, _) {\n         alt operator.node {\n           expr_path(p) {\n             ret respan(e.span,"}, {"sha": "b3c8d71a3bf7c5a7034830553346d7b9887ebeb2", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -32,7 +32,7 @@ fn collect_pred(e: @expr, cx: ctxt, v: visit::vt<ctxt>) {\n \n       // If it's a call, generate appropriate instances of the\n       // call's constraints.\n-      expr_call(operator, operands) {\n+      expr_call(operator, operands, _) {\n         for c: @ty::constr in constraints_expr(cx.tcx, operator) {\n             let ct: sp_constr =\n                 respan(c.span,"}, {"sha": "d0832142d3e742e63f26f07783b5300dc0565c1c", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -309,7 +309,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n \n \n     alt e.node {\n-      expr_call(operator, operands) {\n+      expr_call(operator, operands, _) {\n         /* copy */\n \n         let args = operands;"}, {"sha": "2af37f22867adb483e50fb5cb0af7a14a7f21155", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -335,7 +335,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                                     vec::len(elts)), elts,\n                                       return_val);\n       }\n-      expr_call(operator, operands) {\n+      expr_call(operator, operands, _) {\n         ret find_pre_post_state_call(fcx, pres, operator, e.id,\n                                      callee_arg_init_ops(fcx, operator.id),\n                                      operands,"}, {"sha": "a20ab23f9f61acc4c70638e6b123bd0147e443f7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -2072,7 +2072,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                            out_args, rt, cf, constrs);\n         write::ty_only_fixup(fcx, id, ft);\n       }\n-      ast::expr_call(f, args) {\n+      ast::expr_call(f, args, _) {\n         bot = check_call_full(fcx, expr.span, f, args, expr.id);\n       }\n       ast::expr_self_method(ident) {\n@@ -2535,7 +2535,7 @@ fn check_pred_expr(fcx: @fn_ctxt, e: @ast::expr) -> bool {\n     /* e must be a call expr where all arguments are either\n     literals or slots */\n     alt e.node {\n-      ast::expr_call(operator, operands) {\n+      ast::expr_call(operator, operands, _) {\n         if !ty::is_pred_ty(fcx.ccx.tcx, expr_ty(fcx.ccx.tcx, operator)) {\n             fcx.ccx.tcx.sess.span_err\n                 (operator.span,\n@@ -2632,7 +2632,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n         let call_expr_id = fcx.ccx.tcx.sess.next_node_id();\n         let call_expr =\n             @{id: call_expr_id,\n-              node: ast::expr_call(oper, c_args),\n+              node: ast::expr_call(oper, c_args, false),\n               span: c.span};\n         check_pred_expr(fcx, call_expr);\n     }"}, {"sha": "9abab55333105236789d027f3fd9ce08961af9d8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -184,7 +184,7 @@ type expr = {id: node_id, node: expr_, span: span};\n tag expr_ {\n     expr_vec([@expr], mutability);\n     expr_rec([field], option::t<@expr>);\n-    expr_call(@expr, [@expr]);\n+    expr_call(@expr, [@expr], bool);\n     expr_tup([@expr]);\n     expr_self_method(ident);\n     expr_bind(@expr, [option::t<@expr>]);"}, {"sha": "b10ce87a6979ced6d7ab548767300336b5a023a9", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -163,7 +163,7 @@ fn is_exported(i: ident, m: _mod) -> bool {\n }\n \n pure fn is_call_expr(e: @expr) -> bool {\n-    alt e.node { expr_call(_, _) { true } _ { false } }\n+    alt e.node { expr_call(_, _, _) { true } _ { false } }\n }\n \n fn is_constraint_arg(e: @expr) -> bool {"}, {"sha": "f3fb25acaf900913c66c3f1a741f2582ec60e822", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -79,7 +79,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n     fn make_call(cx: ext_ctxt, sp: span, fn_path: [ast::ident],\n                  args: [@ast::expr]) -> @ast::expr {\n         let pathexpr = make_path_expr(cx, sp, fn_path);\n-        let callexpr = ast::expr_call(pathexpr, args);\n+        let callexpr = ast::expr_call(pathexpr, args, false);\n         ret @{id: cx.next_id(), node: callexpr, span: sp};\n     }\n     fn make_rec_expr(cx: ext_ctxt, sp: span,"}, {"sha": "e79ca1adf981172a338228a4c551816bceb74aff", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -348,8 +348,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n                      option::map(fld.fold_expr, maybe_expr))\n           }\n           expr_tup(elts) { expr_tup(vec::map(fld.fold_expr, elts)) }\n-          expr_call(f, args) {\n-            expr_call(fld.fold_expr(f), fld.map_exprs(fld.fold_expr, args))\n+          expr_call(f, args, blk) {\n+            expr_call(fld.fold_expr(f), fld.map_exprs(fld.fold_expr, args),\n+                      blk)\n           }\n           expr_self_method(id) { expr_self_method(fld.fold_ident(id)) }\n           expr_bind(f, args) {"}, {"sha": "8f632165772be313b18a4e5b5430707be544e9f2", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -977,7 +977,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n             parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n                       parse_expr, p);\n         hi = es.span.hi;\n-        ex = ast::expr_call(f, es.node);\n+        ex = ast::expr_call(f, es.node, false);\n     } else if p.peek() == token::MOD_SEP ||\n                   is_ident(p.peek()) && !is_word(p, \"true\") &&\n                       !is_word(p, \"false\") {\n@@ -1051,7 +1051,7 @@ fn parse_dot_or_call_expr_with(p: parser, e: @ast::expr) -> @ast::expr {\n                 let es = parse_seq(token::LPAREN, token::RPAREN,\n                                    some(token::COMMA), parse_expr, p);\n                 hi = es.span.hi;\n-                let nd = ast::expr_call(e, es.node);\n+                let nd = ast::expr_call(e, es.node, false);\n                 e = mk_expr(p, lo, hi, nd);\n             }\n           }\n@@ -1073,19 +1073,6 @@ fn parse_dot_or_call_expr_with(p: parser, e: @ast::expr) -> @ast::expr {\n               t { unexpected(p, t); }\n             }\n           }\n-          token::LBRACE. when is_bar(p.look_ahead(1u)) {\n-            p.bump();\n-            let blk = parse_fn_block_expr(p);\n-            alt e.node {\n-              ast::expr_call(f, args) {\n-                e = @{node: ast::expr_call(f, args + [blk]) with *e};\n-              }\n-              _ {\n-                e = mk_expr(p, lo, p.get_last_hi_pos(),\n-                            ast::expr_call(e, [blk]));\n-              }\n-            }\n-          }\n           _ { ret e; }\n         }\n     }\n@@ -1569,7 +1556,6 @@ fn parse_source_stmt(p: parser) -> @ast::stmt {\n         let decl = parse_let(p);\n         ret @spanned(lo, decl.span.hi, ast::stmt_decl(decl, p.get_id()));\n     } else {\n-\n         let item_attrs;\n         alt parse_outer_attrs_or_ext(p) {\n           none. { item_attrs = []; }\n@@ -1589,7 +1575,6 @@ fn parse_source_stmt(p: parser) -> @ast::stmt {\n             }\n         }\n \n-\n         alt maybe_item {\n           some(i) {\n             let hi = i.span.hi;\n@@ -1599,6 +1584,21 @@ fn parse_source_stmt(p: parser) -> @ast::stmt {\n           none. {\n             // Remainder are line-expr stmts.\n             let e = parse_expr(p);\n+            // See if it is a block call\n+            if p.peek() == token::LBRACE && is_bar(p.look_ahead(1u)) {\n+                p.bump();\n+                let blk = parse_fn_block_expr(p);\n+                alt e.node {\n+                  ast::expr_call(f, args, false) {\n+                    e = @{node: ast::expr_call(f, args + [blk], true)\n+                        with *e};\n+                  }\n+                  _ {\n+                    e = mk_expr(p, lo, p.get_last_hi_pos(),\n+                                ast::expr_call(e, [blk], true));\n+                  }\n+                }\n+            }\n             ret @spanned(lo, e.span.hi, ast::stmt_expr(e, p.get_id()));\n           }\n           _ { p.fatal(\"expected statement\"); }\n@@ -1624,6 +1624,7 @@ fn expr_has_value(e: @ast::expr) -> bool {\n       ast::expr_for(_, _, blk) | ast::expr_do_while(blk, _) {\n         !option::is_none(blk.node.expr)\n       }\n+      ast::expr_call(_, _, true) { false }\n       _ { true }\n     }\n }"}, {"sha": "91e3f2ffb59921a92ebcf0da9f205a632bb8fb6d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -727,11 +727,19 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         commasep_exprs(s, inconsistent, exprs);\n         pclose(s);\n       }\n-      ast::expr_call(func, args) {\n+      ast::expr_call(func, args, has_block) {\n         print_expr_parens_if_not_bot(s, func);\n-        popen(s);\n-        commasep_exprs(s, inconsistent, args);\n-        pclose(s);\n+        let base_args = args, blk = none;\n+        if has_block { blk = some(vec::pop(base_args)); }\n+        if !has_block || vec::len(base_args) > 0u {\n+            popen(s);\n+            commasep_exprs(s, inconsistent, base_args);\n+            pclose(s);\n+        }\n+        if has_block {\n+            nbsp(s);\n+            print_expr(s, option::get(blk));\n+        }\n       }\n       ast::expr_self_method(ident) {\n         word(s.s, \"self.\");"}, {"sha": "0725611eb04dce795bb32f457487cb69ec8247e9", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71147024962318033ade76ba741d1ecc1dfae3ce/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=71147024962318033ade76ba741d1ecc1dfae3ce", "patch": "@@ -245,7 +245,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         visit_expr_opt(base, e, v);\n       }\n       expr_tup(elts) { for el in elts { v.visit_expr(el, e, v); } }\n-      expr_call(callee, args) {\n+      expr_call(callee, args, _) {\n         visit_exprs(args, e, v);\n         v.visit_expr(callee, e, v);\n       }"}]}