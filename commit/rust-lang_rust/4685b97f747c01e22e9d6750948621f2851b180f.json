{"sha": "4685b97f747c01e22e9d6750948621f2851b180f", "node_id": "C_kwDOAAsO6NoAKDQ2ODViOTdmNzQ3YzAxZTIyZTlkNjc1MDk0ODYyMWYyODUxYjE4MGY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-20T15:36:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-20T20:52:05Z"}, "message": "Remove hover fallback in favor of ranged hover", "tree": {"sha": "e93fef16bc24073d870d2911357f805d8cdadeee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e93fef16bc24073d870d2911357f805d8cdadeee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4685b97f747c01e22e9d6750948621f2851b180f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4685b97f747c01e22e9d6750948621f2851b180f", "html_url": "https://github.com/rust-lang/rust/commit/4685b97f747c01e22e9d6750948621f2851b180f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4685b97f747c01e22e9d6750948621f2851b180f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a542bd46bf22a56dd7b519de515949fef6976b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/a542bd46bf22a56dd7b519de515949fef6976b42", "html_url": "https://github.com/rust-lang/rust/commit/a542bd46bf22a56dd7b519de515949fef6976b42"}], "stats": {"total": 158, "additions": 27, "deletions": 131}, "files": [{"sha": "2058a4f5f190a239fb8d2817fd50b3b5f12916b5", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 44, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4685b97f747c01e22e9d6750948621f2851b180f/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4685b97f747c01e22e9d6750948621f2851b180f/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=4685b97f747c01e22e9d6750948621f2851b180f", "patch": "@@ -15,7 +15,7 @@ use ide_db::{\n     FxIndexSet, RootDatabase,\n };\n use itertools::Itertools;\n-use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, T};\n+use syntax::{ast, AstNode, SyntaxKind::*, SyntaxNode, T};\n \n use crate::{\n     doc_links::token_as_doc_comment,\n@@ -203,14 +203,10 @@ fn hover_simple(\n             })\n         });\n \n-    result\n-        .map(|mut res: HoverResult| {\n-            res.actions = dedupe_or_merge_hover_actions(res.actions);\n-            RangeInfo::new(original_token.text_range(), res)\n-        })\n-        // fallback to type hover if there aren't any other suggestions\n-        // this finds its own range instead of using the closest token's range\n-        .or_else(|| descended().find_map(|token| hover_type_fallback(sema, config, token, token)))\n+    result.map(|mut res: HoverResult| {\n+        res.actions = dedupe_or_merge_hover_actions(res.actions);\n+        RangeInfo::new(original_token.text_range(), res)\n+    })\n }\n \n fn hover_ranged(\n@@ -220,8 +216,11 @@ fn hover_ranged(\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     // FIXME: make this work in attributes\n-    let expr_or_pat =\n-        file.covering_element(range).ancestors().find_map(Either::<ast::Expr, ast::Pat>::cast)?;\n+    let expr_or_pat = file\n+        .covering_element(range)\n+        .ancestors()\n+        .take_while(|it| ast::MacroCall::can_cast(it.kind()) || !ast::Item::can_cast(it.kind()))\n+        .find_map(Either::<ast::Expr, ast::Pat>::cast)?;\n     let res = match &expr_or_pat {\n         Either::Left(ast::Expr::TryExpr(try_expr)) => render::try_expr(sema, config, try_expr),\n         Either::Left(ast::Expr::PrefixExpr(prefix_expr))\n@@ -268,39 +267,6 @@ pub(crate) fn hover_for_definition(\n     })\n }\n \n-fn hover_type_fallback(\n-    sema: &Semantics<'_, RootDatabase>,\n-    config: &HoverConfig,\n-    token: &SyntaxToken,\n-    original_token: &SyntaxToken,\n-) -> Option<RangeInfo<HoverResult>> {\n-    let node =\n-        token.parent_ancestors().take_while(|it| !ast::Item::can_cast(it.kind())).find(|n| {\n-            ast::Expr::can_cast(n.kind())\n-                || ast::Pat::can_cast(n.kind())\n-                || ast::Type::can_cast(n.kind())\n-        })?;\n-\n-    let expr_or_pat = match_ast! {\n-        match node {\n-            ast::Expr(it) => Either::Left(it),\n-            ast::Pat(it) => Either::Right(it),\n-            // If this node is a MACRO_CALL, it means that `descend_into_macros_many` failed to resolve.\n-            // (e.g expanding a builtin macro). So we give up here.\n-            ast::MacroCall(_it) => return None,\n-            _ => return None,\n-        }\n-    };\n-\n-    let res = render::type_info_of(sema, config, &expr_or_pat)?;\n-\n-    let range = sema\n-        .original_range_opt(&node)\n-        .map(|frange| frange.range)\n-        .unwrap_or_else(|| original_token.text_range());\n-    Some(RangeInfo::new(range, res))\n-}\n-\n fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     fn to_action(nav_target: NavigationTarget) -> HoverAction {\n         HoverAction::Implementation(FilePosition {"}, {"sha": "2830212add8ebd40033d6c318c2351210b3ce28c", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 17, "deletions": 87, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4685b97f747c01e22e9d6750948621f2851b180f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4685b97f747c01e22e9d6750948621f2851b180f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=4685b97f747c01e22e9d6750948621f2851b180f", "patch": "@@ -213,38 +213,21 @@ m!(ab$0c);\n     );\n }\n \n-#[test]\n-fn hover_shows_type_of_an_expression() {\n-    check(\n-        r#\"\n-pub fn foo() -> u32 { 1 }\n-\n-fn main() {\n-    let foo_test = foo()$0;\n-}\n-\"#,\n-        expect![[r#\"\n-            *foo()*\n-            ```rust\n-            u32\n-            ```\n-        \"#]],\n-    );\n-}\n-\n #[test]\n fn hover_remove_markdown_if_configured() {\n     check_hover_no_markdown(\n         r#\"\n pub fn foo() -> u32 { 1 }\n \n fn main() {\n-    let foo_test = foo()$0;\n+    let foo_test = foo$0();\n }\n \"#,\n         expect![[r#\"\n-            *foo()*\n-            u32\n+            *foo*\n+            test\n+\n+            pub fn foo() -> u32\n         \"#]],\n     );\n }\n@@ -304,33 +287,6 @@ fn main() { let foo_test = fo$0o(); }\n             \"#]],\n     );\n \n-    // Multiple candidates but results are ambiguous.\n-    check(\n-        r#\"\n-//- /a.rs\n-pub fn foo() -> u32 { 1 }\n-\n-//- /b.rs\n-pub fn foo() -> &str { \"\" }\n-\n-//- /c.rs\n-pub fn foo(a: u32, b: u32) {}\n-\n-//- /main.rs\n-mod a;\n-mod b;\n-mod c;\n-\n-fn main() { let foo_test = fo$0o(); }\n-        \"#,\n-        expect![[r#\"\n-                *foo*\n-                ```rust\n-                {unknown}\n-                ```\n-            \"#]],\n-    );\n-\n     // Use literal `crate` in path\n     check(\n         r#\"\n@@ -1194,33 +1150,19 @@ fn test_hover_through_func_in_macro_recursive() {\n macro_rules! id_deep { ($($tt:tt)*) => { $($tt)* } }\n macro_rules! id { ($($tt:tt)*) => { id_deep!($($tt)*) } }\n fn bar() -> u32 { 0 }\n-fn foo() { let a = id!([0u32, bar($0)] ); }\n+fn foo() { let a = id!([0u32, bar$0()] ); }\n \"#,\n         expect![[r#\"\n-                *bar()*\n-                ```rust\n-                u32\n-                ```\n-            \"#]],\n-    );\n-}\n+            *bar*\n \n-#[test]\n-fn test_hover_through_literal_string_in_macro() {\n-    check(\n-        r#\"\n-macro_rules! arr { ($($tt:tt)*) => { [$($tt)*] } }\n-fn foo() {\n-    let mastered_for_itunes = \"\";\n-    let _ = arr!(\"Tr$0acks\", &mastered_for_itunes);\n-}\n-\"#,\n-        expect![[r#\"\n-                *\"Tracks\"*\n-                ```rust\n-                &str\n-                ```\n-            \"#]],\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            fn bar() -> u32\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -5655,30 +5597,18 @@ fn main() {\n \n #[test]\n fn hover_underscore_type() {\n-    check(\n+    check_hover_no_result(\n         r#\"\n fn main() {\n     let x: _$0 = 0;\n }\n \"#,\n-        expect![[r#\"\n-            *_*\n-            ```rust\n-            {unknown}\n-            ```\n-        \"#]],\n     );\n-    check(\n+    check_hover_no_result(\n         r#\"\n fn main() {\n     let x: (_$0,) = (0,);\n }\n \"#,\n-        expect![[r#\"\n-            *_*\n-            ```rust\n-            {unknown}\n-            ```\n-        \"#]],\n     );\n }"}]}