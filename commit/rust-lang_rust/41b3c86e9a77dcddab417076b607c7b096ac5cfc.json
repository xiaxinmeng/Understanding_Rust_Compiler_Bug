{"sha": "41b3c86e9a77dcddab417076b607c7b096ac5cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYjNjODZlOWE3N2RjZGRhYjQxNzA3NmI2MDdjN2IwOTZhYzVjZmM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-30T11:26:02Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:56:07Z"}, "message": "Test cases for checking arithmetic overflow during const eval.", "tree": {"sha": "e9dbe1780355ac6caa9b42efa6bb45848fb70e96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9dbe1780355ac6caa9b42efa6bb45848fb70e96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41b3c86e9a77dcddab417076b607c7b096ac5cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41b3c86e9a77dcddab417076b607c7b096ac5cfc", "html_url": "https://github.com/rust-lang/rust/commit/41b3c86e9a77dcddab417076b607c7b096ac5cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41b3c86e9a77dcddab417076b607c7b096ac5cfc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9", "html_url": "https://github.com/rust-lang/rust/commit/8d54ea3ec9c48eaeaab8fa9061cf28c2678e8ae9"}], "stats": {"total": 301, "additions": 301, "deletions": 0}, "files": [{"sha": "be04bc9bd3b732effbb96c0d55258242f7ed6c8d", "filename": "src/test/compile-fail/const-eval-overflow-2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Evaluation of constants in refutable patterns goes through\n+// different compiler control-flow paths.\n+\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const NEG_128: i8 = -128;\n+const NEG_NEG_128: i8 = -NEG_128;\n+//~^ ERROR constant evaluation error: attempted to negate with overflow\n+//~| ERROR attempted to negate with overflow\n+\n+fn main() {\n+    match -128i8 {\n+        NEG_NEG_128 => println!(\"A\"),\n+        _ => println!(\"B\"),\n+    }\n+}"}, {"sha": "df03324e1f727f85e16468085c3609bb9f0f4ade", "filename": "src/test/compile-fail/const-eval-overflow-3.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Evaluation of constants in array-elem count goes through different\n+// compiler control-flow paths.\n+//\n+// This test is checking the count in an array expression.\n+\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const A_I8_I\n+    : [u32; (i8::MAX as usize) + 1]\n+    = [0; (i8::MAX + 1) as usize];\n+//~^ ERROR error evaluating count: attempted to add with overflow\n+\n+fn main() {\n+    foo(&A_I8_I[..]);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}\n+"}, {"sha": "31dcb483c4aee5078e35f63cb529905af845ef36", "filename": "src/test/compile-fail/const-eval-overflow-3b.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3b.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Evaluation of constants in array-elem count goes through different\n+// compiler control-flow paths.\n+//\n+// This test is checking the count in an array expression.\n+//\n+// This is a variation of another such test, but in this case the\n+// types for the left- and right-hand sides of the addition do not\n+// match (as well as overflow).\n+\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const A_I8_I\n+    : [u32; (i8::MAX as usize) + 1]\n+    = [0; (i8::MAX + 1u8) as usize];\n+//~^ ERROR mismatched types\n+\n+fn main() {\n+    foo(&A_I8_I[..]);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}\n+"}, {"sha": "f1f125adaa7e330a73db146083c15493a53ab1bf", "filename": "src/test/compile-fail/const-eval-overflow-4.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test this should fail to compile (#23833)\n+\n+// Evaluation of constants in array-elem count goes through different\n+// compiler control-flow paths.\n+//\n+// This test is checking the count in an array type.\n+\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const A_I8_T\n+    : [u32; (i8::MAX as i8 + 1i8) as usize]\n+    //~^ ERROR error evaluating count: attempted to add with overflow\n+    = [0; (i8::MAX as usize) + 1];\n+\n+fn main() {\n+    foo(&A_I8_T[..]);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}\n+"}, {"sha": "ca354ad78ea4b8cb874a23be3f3fb870c147fc20", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Evaluation of constants in array-elem count goes through different\n+// compiler control-flow paths.\n+//\n+// This test is checking the count in an array type.\n+\n+#![allow(unused_imports)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const A_I8_T\n+    : [u32; (i8::MAX as i8 + 1u8) as usize]\n+    //~^ ERROR mismatched types\n+    = [0; (i8::MAX as usize) + 1];\n+\n+fn main() {\n+    foo(&A_I8_T[..]);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}\n+"}, {"sha": "f647c43e13755d216debdf165d6208284e22840e", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41b3c86e9a77dcddab417076b607c7b096ac5cfc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=41b3c86e9a77dcddab417076b607c7b096ac5cfc", "patch": "@@ -0,0 +1,129 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_imports)]\n+\n+// Note: the relevant lint pass here runs before some of the constant\n+// evaluation below (e.g. that performed by trans and llvm), so if you\n+// change this warn to a deny, then the compiler will exit before\n+// those errors are detected.\n+#![warn(unsigned_negation)]\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const VALS_I8: (i8, i8, i8, i8) =\n+    (-i8::MIN,\n+     //~^ ERROR attempted to negate with overflow\n+     i8::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     i8::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     i8::MIN * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_I16: (i16, i16, i16, i16) =\n+    (-i16::MIN,\n+     //~^ ERROR attempted to negate with overflow\n+     i16::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     i16::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     i16::MIN * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_I32: (i32, i32, i32, i32) =\n+    (-i32::MIN,\n+     //~^ ERROR attempted to negate with overflow\n+     i32::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     i32::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     i32::MIN * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_I64: (i64, i64, i64, i64) =\n+    (-i64::MIN,\n+     //~^ ERROR attempted to negate with overflow\n+     i64::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     i64::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     i64::MAX * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_U8: (u8, u8, u8, u8) =\n+    (-u8::MIN,\n+     //~^ WARNING negation of unsigned int variable may be unintentional\n+     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n+     u8::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     u8::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     u8::MAX * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_U16: (u16, u16, u16, u16) =\n+    (-u16::MIN,\n+     //~^ WARNING negation of unsigned int variable may be unintentional\n+     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n+     u16::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     u16::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     u16::MAX * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_U32: (u32, u32, u32, u32) =\n+    (-u32::MIN,\n+     //~^ WARNING negation of unsigned int variable may be unintentional\n+     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n+     u32::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     u32::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     u32::MAX * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+const VALS_U64: (u64, u64, u64, u64) =\n+    (-u64::MIN,\n+     //~^ WARNING negation of unsigned int variable may be unintentional\n+     // (The above is separately linted; unsigned negation is defined to be !x+1.)\n+     u64::MIN - 1,\n+     //~^ ERROR attempted to sub with overflow\n+     u64::MAX + 1,\n+     //~^ ERROR attempted to add with overflow\n+     u64::MAX * 2,\n+     //~^ ERROR attempted to mul with overflow\n+     );\n+\n+fn main() {\n+    foo(VALS_I8);\n+    foo(VALS_I16);\n+    foo(VALS_I32);\n+    foo(VALS_I64);\n+\n+    foo(VALS_U8);\n+    foo(VALS_U16);\n+    foo(VALS_U32);\n+    foo(VALS_U64);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}"}]}