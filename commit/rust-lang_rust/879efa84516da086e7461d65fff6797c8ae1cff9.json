{"sha": "879efa84516da086e7461d65fff6797c8ae1cff9", "node_id": "C_kwDOAAsO6NoAKDg3OWVmYTg0NTE2ZGEwODZlNzQ2MWQ2NWZmZjY3OTdjOGFlMWNmZjk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-02-25T20:38:00Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-03-01T13:57:03Z"}, "message": "Add a test for Adt copy suggestions", "tree": {"sha": "72622d256f81be09b8f71dbe644ab57e9d196ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72622d256f81be09b8f71dbe644ab57e9d196ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879efa84516da086e7461d65fff6797c8ae1cff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879efa84516da086e7461d65fff6797c8ae1cff9", "html_url": "https://github.com/rust-lang/rust/commit/879efa84516da086e7461d65fff6797c8ae1cff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879efa84516da086e7461d65fff6797c8ae1cff9/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400d343796065e57e78d92b4cf74c78bec38452a", "url": "https://api.github.com/repos/rust-lang/rust/commits/400d343796065e57e78d92b4cf74c78bec38452a", "html_url": "https://github.com/rust-lang/rust/commit/400d343796065e57e78d92b4cf74c78bec38452a"}], "stats": {"total": 216, "additions": 216, "deletions": 0}, "files": [{"sha": "0930927c49d6667f6060a3a07f7a8f8e589d83d7", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/879efa84516da086e7461d65fff6797c8ae1cff9/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879efa84516da086e7461d65fff6797c8ae1cff9/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs?ref=879efa84516da086e7461d65fff6797c8ae1cff9", "patch": "@@ -0,0 +1,65 @@\n+fn duplicate_t<T>(t: T) -> (T, T) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_opt<T>(t: Option<T>) -> (Option<T>, Option<T>) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_tup1<T>(t: (T,)) -> ((T,), (T,)) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_tup2<A, B>(t: (A, B)) -> ((A, B), (A, B)) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom<T>(t: S<T>) -> (S<T>, S<T>) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+struct S<T>(T);\n+trait Trait {}\n+impl<T: Trait + Clone> Clone for S<T> {\n+    fn clone(&self) -> Self {\n+        Self(self.0.clone())\n+    }\n+}\n+impl<T: Trait + Copy> Copy for S<T> {}\n+\n+trait A {}\n+trait B {}\n+\n+// Test where bounds are added with different bound placements\n+fn duplicate_custom_1<T>(t: S<T>) -> (S<T>, S<T>) where {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: A,\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: A,\n+    T: B,\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n+where\n+    T: B,\n+{\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+// `Rc` is not ever `Copy`, we should not suggest adding `T: Copy` constraint\n+fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n+    (t, t) //~ use of moved value: `t`\n+}\n+\n+fn main() {}"}, {"sha": "c32ac2cd78aa08c533ca748d7234eb221be8dcdd", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/879efa84516da086e7461d65fff6797c8ae1cff9/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/879efa84516da086e7461d65fff6797c8ae1cff9/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=879efa84516da086e7461d65fff6797c8ae1cff9", "patch": "@@ -0,0 +1,151 @@\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:2:9\n+   |\n+LL | fn duplicate_t<T>(t: T) -> (T, T) {\n+   |                   - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn duplicate_t<T: Copy>(t: T) -> (T, T) {\n+   |                 ++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:6:9\n+   |\n+LL | fn duplicate_opt<T>(t: Option<T>) -> (Option<T>, Option<T>) {\n+   |                     - move occurs because `t` has type `Option<T>`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn duplicate_opt<T: Copy>(t: Option<T>) -> (Option<T>, Option<T>) {\n+   |                   ++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:10:9\n+   |\n+LL | fn duplicate_tup1<T>(t: (T,)) -> ((T,), (T,)) {\n+   |                      - move occurs because `t` has type `(T,)`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn duplicate_tup1<T: Copy>(t: (T,)) -> ((T,), (T,)) {\n+   |                    ++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:14:9\n+   |\n+LL | fn duplicate_tup2<A, B>(t: (A, B)) -> ((A, B), (A, B)) {\n+   |                         - move occurs because `t` has type `(A, B)`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameters\n+   |\n+LL | fn duplicate_tup2<A: Copy, B: Copy>(t: (A, B)) -> ((A, B), (A, B)) {\n+   |                    ++++++   ++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:18:9\n+   |\n+LL | fn duplicate_custom<T>(t: S<T>) -> (S<T>, S<T>) {\n+   |                        - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn duplicate_custom<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) {\n+   |                      ++++++++++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:35:9\n+   |\n+LL | fn duplicate_custom_1<T>(t: S<T>) -> (S<T>, S<T>) where {\n+   |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn duplicate_custom_1<T: Trait + Copy>(t: S<T>) -> (S<T>, S<T>) where {\n+   |                        ++++++++++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:42:9\n+   |\n+LL | fn duplicate_custom_2<T>(t: S<T>) -> (S<T>, S<T>)\n+   |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+...\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider further restricting this bound\n+   |\n+LL |     T: A + Trait + Copy,\n+   |          ++++++++++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:50:9\n+   |\n+LL | fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n+   |                          - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+...\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider further restricting type parameter `T`\n+   |\n+LL |     T: B, T: Trait, T: Copy\n+   |         ~~~~~~~~~~~~~~~~~~~\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:57:9\n+   |\n+LL | fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n+   |                             - move occurs because `t` has type `S<T>`, which does not implement the `Copy` trait\n+...\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+   |\n+help: consider further restricting this bound\n+   |\n+LL |     T: B + Trait + Copy,\n+   |          ++++++++++++++\n+\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:62:9\n+   |\n+LL | fn duplicate_rc<T>(t: std::rc::Rc<T>) -> (std::rc::Rc<T>, std::rc::Rc<T>) {\n+   |                    - move occurs because `t` has type `Rc<T>`, which does not implement the `Copy` trait\n+LL |     (t, t)\n+   |      -  ^ value used here after move\n+   |      |\n+   |      value moved here\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}]}