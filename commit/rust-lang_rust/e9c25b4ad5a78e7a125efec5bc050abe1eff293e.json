{"sha": "e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "node_id": "C_kwDOAAsO6NoAKGU5YzI1YjRhZDVhNzhlN2ExMjVlZmVjNWJjMDUwYWJlMWVmZjI5M2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:55Z"}, "message": "Rollup merge of #105793 - lukas-code:circular-deps, r=Mark-Simulacrum\n\nAdd note for mismatched types because of circular dependencies\n\nIf you have crate A with a dependency on crate B, and crate B with a dev-dependency on A, then you might see \"mismatched types\" errors on types that seem to be equal. This PR adds a note that explains that the types are different, because crate B is compiled twice, one time with `cfg(test)` and one time without.\n\nI haven't found a good way to create circular dependencies in UI tests, so I abused the incremental tests instead. As a bonus, incremental tests support \"cpass\" now.\n\nrelated to https://github.com/rust-lang/rust/issues/22750", "tree": {"sha": "855c7fe74f2fa461ac372a448f4e7ee4c0e90ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855c7fe74f2fa461ac372a448f4e7ee4c0e90ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4LCRBK7hj4Ov3rIwAALUkIALA4QYGxf3KcmBcmT+D+v8K9\nGd2d7XGzz9+1kq6D6jm0u7tYTliIBYRntNEr6JEbDcxID2HNt3+seg5txJ/iIrG4\nI82PEo9UEtbmthfYNY+r6Vth33qKOhHzDF26WkNnDA19Zv7BFrU97aHsVfi+DiVZ\nhwIBPTr+NTjYIHVcXEQfyFA67aZlhV0+O+P7fbELslGYQNqFP9Q/2O0InqF41gXA\niCe55+jwmYkKHXo17Vzf5sYATFufMB8WK0pGVFCsUT7KzZuNSmAa+y8MA47MlbUs\nMtNVZjmxkR3h43brThvOgIiCs8QeDIW06HPiqEeiVpowPaa8tn11XTvuwK7PGZo=\n=6I46\n-----END PGP SIGNATURE-----\n", "payload": "tree 855c7fe74f2fa461ac372a448f4e7ee4c0e90ed1\nparent 993b775849bdc75eac5cd3b7d459bcbaa9514ed8\nparent 97915ab943001b5a74df4b3e22e7c0a469433fb9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220235 +0530\ncommitter GitHub <noreply@github.com> 1679220235 +0530\n\nRollup merge of #105793 - lukas-code:circular-deps, r=Mark-Simulacrum\n\nAdd note for mismatched types because of circular dependencies\n\nIf you have crate A with a dependency on crate B, and crate B with a dev-dependency on A, then you might see \"mismatched types\" errors on types that seem to be equal. This PR adds a note that explains that the types are different, because crate B is compiled twice, one time with `cfg(test)` and one time without.\n\nI haven't found a good way to create circular dependencies in UI tests, so I abused the incremental tests instead. As a bonus, incremental tests support \"cpass\" now.\n\nrelated to https://github.com/rust-lang/rust/issues/22750\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "html_url": "https://github.com/rust-lang/rust/commit/e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/993b775849bdc75eac5cd3b7d459bcbaa9514ed8", "html_url": "https://github.com/rust-lang/rust/commit/993b775849bdc75eac5cd3b7d459bcbaa9514ed8"}, {"sha": "97915ab943001b5a74df4b3e22e7c0a469433fb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/97915ab943001b5a74df4b3e22e7c0a469433fb9", "html_url": "https://github.com/rust-lang/rust/commit/97915ab943001b5a74df4b3e22e7c0a469433fb9"}], "stats": {"total": 118, "additions": 96, "deletions": 22}, "files": [{"sha": "fd16363a1db0102b5f37a5df6cfbde53c42b5eec", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "patch": "@@ -615,9 +615,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n \n         let report_path_match = |err: &mut Diagnostic, did1: DefId, did2: DefId| {\n-            // Only external crates, if either is from a local\n-            // module we could have false positives\n-            if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n+            // Only report definitions from different crates. If both definitions\n+            // are from a local module we could have false positives, e.g.\n+            // let _ = [{struct Foo; Foo}, {struct Foo; Foo}];\n+            if did1.krate != did2.krate {\n                 let abs_path =\n                     |def_id| AbsolutePathPrinter { tcx: self.tcx }.print_def_path(def_id, &[]);\n \n@@ -629,10 +630,16 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 };\n                 if same_path().unwrap_or(false) {\n                     let crate_name = self.tcx.crate_name(did1.krate);\n-                    err.note(&format!(\n-                        \"perhaps two different versions of crate `{}` are being used?\",\n-                        crate_name\n-                    ));\n+                    let msg = if did1.is_local() || did2.is_local() {\n+                        format!(\n+                            \"the crate `{crate_name}` is compiled multiple times, possibly with different configurations\"\n+                        )\n+                    } else {\n+                        format!(\n+                            \"perhaps two different versions of crate `{crate_name}` are being used?\"\n+                        )\n+                    };\n+                    err.note(msg);\n                 }\n             }\n         };"}, {"sha": "4d9010d3c4b3036da9f57dbcefcc61072ee67aaf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "patch": "@@ -278,13 +278,15 @@ impl<'test> TestCx<'test> {\n             Incremental => {\n                 let revision =\n                     self.revision.expect(\"incremental tests require a list of revisions\");\n-                if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n+                if revision.starts_with(\"cpass\")\n+                    || revision.starts_with(\"rpass\")\n+                    || revision.starts_with(\"rfail\")\n+                {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n-                    // FIXME: would be nice if incremental revs could start with \"cpass\"\n                     pm.is_some()\n                 } else {\n-                    panic!(\"revision name must begin with rpass, rfail, or cfail\");\n+                    panic!(\"revision name must begin with cpass, rpass, rfail, or cfail\");\n                 }\n             }\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n@@ -384,6 +386,20 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn run_cpass_test(&self) {\n+        let emit_metadata = self.should_emit_metadata(self.pass_mode());\n+        let proc_res = self.compile_test(WillExecute::No, emit_metadata);\n+\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n+        }\n+\n+        // FIXME(#41968): Move this check to tidy?\n+        if !errors::load_errors(&self.testpaths.file, self.revision).is_empty() {\n+            self.fatal(\"compile-pass tests with expected warnings should be moved to ui/\");\n+        }\n+    }\n+\n     fn run_rpass_test(&self) {\n         let emit_metadata = self.should_emit_metadata(self.pass_mode());\n         let should_run = self.run_if_enabled();\n@@ -393,17 +409,15 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n+        // FIXME(#41968): Move this check to tidy?\n+        if !errors::load_errors(&self.testpaths.file, self.revision).is_empty() {\n+            self.fatal(\"run-pass tests with expected warnings should be moved to ui/\");\n+        }\n+\n         if let WillExecute::Disabled = should_run {\n             return;\n         }\n \n-        // FIXME(#41968): Move this check to tidy?\n-        let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n-        assert!(\n-            expected_errors.is_empty(),\n-            \"run-pass tests with expected warnings should be moved to ui/\"\n-        );\n-\n         let proc_res = self.exec_compiled_test();\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"test run failed!\", &proc_res);\n@@ -2913,10 +2927,11 @@ impl<'test> TestCx<'test> {\n     fn run_incremental_test(&self) {\n         // Basic plan for a test incremental/foo/bar.rs:\n         // - load list of revisions rpass1, cfail2, rpass3\n-        //   - each should begin with `rpass`, `cfail`, or `rfail`\n-        //   - if `rpass`, expect compile and execution to succeed\n+        //   - each should begin with `cpass`, `rpass`, `cfail`, or `rfail`\n+        //   - if `cpass`, expect compilation to succeed, don't execute\n+        //   - if `rpass`, expect compilation and execution to succeed\n         //   - if `cfail`, expect compilation to fail\n-        //   - if `rfail`, expect execution to fail\n+        //   - if `rfail`, expect compilation to succeed and execution to fail\n         // - create a directory build/foo/bar.incremental\n         // - compile foo/bar.rs with -C incremental=.../foo/bar.incremental and -C rpass1\n         //   - because name of revision starts with \"rpass\", expect success\n@@ -2940,7 +2955,12 @@ impl<'test> TestCx<'test> {\n             print!(\"revision={:?} props={:#?}\", revision, self.props);\n         }\n \n-        if revision.starts_with(\"rpass\") {\n+        if revision.starts_with(\"cpass\") {\n+            if self.props.should_ice {\n+                self.fatal(\"can only use should-ice in cfail tests\");\n+            }\n+            self.run_cpass_test();\n+        } else if revision.starts_with(\"rpass\") {\n             if self.props.should_ice {\n                 self.fatal(\"can only use should-ice in cfail tests\");\n             }\n@@ -2953,7 +2973,7 @@ impl<'test> TestCx<'test> {\n         } else if revision.starts_with(\"cfail\") {\n             self.run_cfail_test();\n         } else {\n-            self.fatal(\"revision name must begin with rpass, rfail, or cfail\");\n+            self.fatal(\"revision name must begin with cpass, rpass, rfail, or cfail\");\n         }\n     }\n "}, {"sha": "0e74eb1b2f2631b561ce698b9c352c687ffba803", "filename": "tests/incremental/auxiliary/circular-dependencies-aux.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fauxiliary%2Fcircular-dependencies-aux.rs?ref=e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "patch": "@@ -0,0 +1,10 @@\n+// edition: 2021\n+// compile-flags: --crate-type lib --extern circular_dependencies={{build-base}}/circular-dependencies/libcircular_dependencies.rmeta --emit dep-info,metadata\n+\n+use circular_dependencies::Foo;\n+\n+pub fn consume_foo(_: Foo) {}\n+\n+pub fn produce_foo() -> Foo {\n+    Foo\n+}"}, {"sha": "10673066a9df09b2e1f9f29dc8eb836b57b3875a", "filename": "tests/incremental/circular-dependencies.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/tests%2Fincremental%2Fcircular-dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9c25b4ad5a78e7a125efec5bc050abe1eff293e/tests%2Fincremental%2Fcircular-dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fcircular-dependencies.rs?ref=e9c25b4ad5a78e7a125efec5bc050abe1eff293e", "patch": "@@ -0,0 +1,37 @@\n+// ignore-tidy-linelength\n+// revisions: cpass1 cfail2\n+// edition: 2021\n+// [cpass1] compile-flags: --crate-type lib --emit dep-info,metadata\n+// [cfail2] aux-build: circular-dependencies-aux.rs\n+// [cfail2] compile-flags: --test --extern aux={{build-base}}/circular-dependencies/auxiliary/libcircular_dependencies_aux.rmeta -L dependency={{build-base}}/circular-dependencies\n+\n+pub struct Foo;\n+//[cfail2]~^ NOTE `Foo` is defined in the current crate\n+//[cfail2]~| NOTE `Foo` is defined in the current crate\n+//[cfail2]~| NOTE `circular_dependencies::Foo` is defined in crate `circular_dependencies`\n+//[cfail2]~| NOTE `circular_dependencies::Foo` is defined in crate `circular_dependencies`\n+\n+pub fn consume_foo(_: Foo) {}\n+//[cfail2]~^ NOTE function defined here\n+\n+pub fn produce_foo() -> Foo {\n+    Foo\n+}\n+\n+#[test]\n+fn test() {\n+    aux::consume_foo(produce_foo());\n+    //[cfail2]~^ ERROR mismatched types [E0308]\n+    //[cfail2]~| NOTE expected `circular_dependencies::Foo`, found `Foo`\n+    //[cfail2]~| NOTE arguments to this function are incorrect\n+    //[cfail2]~| NOTE `Foo` and `circular_dependencies::Foo` have similar names, but are actually distinct types\n+    //[cfail2]~| NOTE the crate `circular_dependencies` is compiled multiple times, possibly with different configurations\n+    //[cfail2]~| NOTE function defined here\n+\n+    consume_foo(aux::produce_foo());\n+    //[cfail2]~^ ERROR mismatched types [E0308]\n+    //[cfail2]~| NOTE expected `Foo`, found `circular_dependencies::Foo`\n+    //[cfail2]~| NOTE arguments to this function are incorrect\n+    //[cfail2]~| NOTE `circular_dependencies::Foo` and `Foo` have similar names, but are actually distinct types\n+    //[cfail2]~| NOTE the crate `circular_dependencies` is compiled multiple times, possibly with different configurations\n+}"}]}