{"sha": "bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "node_id": "C_kwDOAAsO6NoAKGJiYjljZmJiYzU2ZjAxMTY1NDFiOGMzYTBmODI5YTYwYmY3NjA1ZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T21:08:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T21:08:45Z"}, "message": "Auto merge of #102318 - Amanieu:default_alloc_error_handler, r=oli-obk\n\nStabilize default_alloc_error_handler\n\nTracking issue: #66741\n\nThis turns `feature(default_alloc_error_handler)` on by default, which causes the compiler to automatically generate a default OOM handler which panics if `#[alloc_error_handler]` is not provided.\n\nThe FCP completed over 2 years ago but the stabilization was blocked due to an issue with unwinding. This was fixed by #88098 so stabilization can be unblocked.\n\nCloses #66741", "tree": {"sha": "8dd2a45dae2f762a6c46374996ad6cc62838a86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd2a45dae2f762a6c46374996ad6cc62838a86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "html_url": "https://github.com/rust-lang/rust/commit/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c07efe84f28a44f3044237696acc295aa407ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07efe84f28a44f3044237696acc295aa407ee5", "html_url": "https://github.com/rust-lang/rust/commit/9c07efe84f28a44f3044237696acc295aa407ee5"}, {"sha": "e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81", "html_url": "https://github.com/rust-lang/rust/commit/e66220f747e4823ca4fc771cc1c46f3fd2f6bc81"}], "stats": {"total": 164, "additions": 39, "deletions": 125}, "files": [{"sha": "b3ca540417da79876f17449c5a2d4aa82d767861", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -166,12 +166,6 @@ metadata_conflicting_alloc_error_handler =\n metadata_global_alloc_required =\n     no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait\n \n-metadata_alloc_func_required =\n-    `#[alloc_error_handler]` function required, but not found\n-\n-metadata_missing_alloc_error_handler =\n-    use `#![feature(default_alloc_error_handler)]` for a default error handler\n-\n metadata_no_transitive_needs_dep =\n     the crate `{$crate_name}` cannot depend on a crate that needs {$needs_crate_name}, but it depends on `{$deps_crate_name}`\n "}, {"sha": "e5348039edd62c396847e0f581e14846566ce648", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -126,6 +126,8 @@ declare_features! (\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    /// Allows rustc to inject a default alloc_error_handler\n+    (accepted, default_alloc_error_handler, \"CURRENT_RUSTC_VERSION\", Some(66741), None),\n     /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n     (accepted, default_type_params, \"1.0.0\", None, None),\n     /// Allows `#[deprecated]` attribute."}, {"sha": "a616dd70f8e6ddb2e216ce73a9e97dde707f75a4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -368,8 +368,6 @@ declare_features! (\n     (active, debugger_visualizer, \"1.62.0\", Some(95939), None),\n     /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n-    /// Allows rustc to inject a default alloc_error_handler\n-    (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n     /// Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n     /// Allows using `#[deprecated_safe]` to deprecate the safeness of a function or trait"}, {"sha": "9ce3ff98ba985bac96973926e662e8b693280688", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -1,10 +1,9 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n use crate::errors::{\n-    AllocFuncRequired, ConflictingAllocErrorHandler, ConflictingGlobalAlloc, CrateNotPanicRuntime,\n-    GlobalAllocRequired, MissingAllocErrorHandler, NoMultipleAllocErrorHandler,\n-    NoMultipleGlobalAlloc, NoPanicStrategy, NoTransitiveNeedsDep, NotProfilerRuntime,\n-    ProfilerBuiltinsNeedsCore,\n+    ConflictingAllocErrorHandler, ConflictingGlobalAlloc, CrateNotPanicRuntime,\n+    GlobalAllocRequired, NoMultipleAllocErrorHandler, NoMultipleGlobalAlloc, NoPanicStrategy,\n+    NoTransitiveNeedsDep, NotProfilerRuntime, ProfilerBuiltinsNeedsCore,\n };\n use crate::locator::{CrateError, CrateLocator, CratePaths};\n use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob};\n@@ -895,10 +894,6 @@ impl<'a> CrateLoader<'a> {\n         } else {\n             // The alloc crate provides a default allocation error handler if\n             // one isn't specified.\n-            if !self.sess.features_untracked().default_alloc_error_handler {\n-                self.sess.emit_err(AllocFuncRequired);\n-                self.sess.emit_note(MissingAllocErrorHandler);\n-            }\n             self.cstore.alloc_error_handler_kind = Some(AllocatorKind::Default);\n         }\n     }"}, {"sha": "de2a879f1d73769c59f4dda5661f1abc93e1b5cf", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -371,14 +371,6 @@ pub struct ConflictingAllocErrorHandler {\n #[diag(metadata_global_alloc_required)]\n pub struct GlobalAllocRequired;\n \n-#[derive(Diagnostic)]\n-#[diag(metadata_alloc_func_required)]\n-pub struct AllocFuncRequired;\n-\n-#[derive(Diagnostic)]\n-#[diag(metadata_missing_alloc_error_handler)]\n-pub struct MissingAllocErrorHandler;\n-\n #[derive(Diagnostic)]\n #[diag(metadata_no_transitive_needs_dep)]\n pub struct NoTransitiveNeedsDep<'a> {"}, {"sha": "28926243390932390a6873f0c85fea9b707e6493", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-custom.rs", "status": "modified", "additions": 19, "deletions": 38, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-custom.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -7,9 +7,10 @@\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n+#![feature(rustc_private, lang_items)]\n #![feature(alloc_error_handler)]\n #![no_std]\n+#![no_main]\n \n extern crate alloc;\n extern crate libc;\n@@ -21,35 +22,30 @@ pub fn __aeabi_unwind_cpp_pr0() {}\n #[no_mangle]\n pub fn __aeabi_unwind_cpp_pr1() {}\n \n-use core::ptr::null_mut;\n-use core::alloc::{GlobalAlloc, Layout};\n use alloc::boxed::Box;\n+use alloc::string::ToString;\n+use core::alloc::{GlobalAlloc, Layout};\n+use core::ptr::null_mut;\n \n extern crate helper;\n \n struct MyAllocator;\n \n #[alloc_error_handler]\n-fn my_oom(layout: Layout) -> !\n-{\n+fn my_oom(layout: Layout) -> ! {\n     use alloc::fmt::write;\n     unsafe {\n         let size = layout.size();\n         let mut s = alloc::string::String::new();\n         write(&mut s, format_args!(\"My OOM: failed to allocate {} bytes!\\n\", size)).unwrap();\n-        let s = s.as_str();\n-        libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n         libc::exit(0)\n     }\n }\n \n unsafe impl GlobalAlloc for MyAllocator {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        if layout.size() < 4096 {\n-            libc::malloc(layout.size()) as _\n-        } else {\n-            null_mut()\n-        }\n+        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n     }\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n }\n@@ -60,26 +56,12 @@ static A: MyAllocator = MyAllocator;\n #[panic_handler]\n fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     unsafe {\n-        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        }\n-        if let Some(args) = panic_info.message() {\n-            let mut s = alloc::string::String::new();\n-            alloc::fmt::write(&mut s, *args).unwrap();\n-            let s = s.as_str();\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        } else {\n-            const PSTR: &str = \"panic occurred\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-        }\n+        let s = panic_info.to_string();\n+        const PSTR: &str = \"panic occurred: \";\n+        const CR: &str = \"\\n\";\n+        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n         libc::exit(1)\n     }\n }\n@@ -89,15 +71,14 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n // in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n-extern fn rust_eh_personality() {}\n+extern \"C\" fn rust_eh_personality() {}\n \n-#[derive(Debug)]\n+#[derive(Default, Debug)]\n struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n-#[start]\n-pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let zero = Box::<Page>::new_zeroed();\n-    let zero = unsafe { zero.assume_init() };\n+#[no_mangle]\n+fn main(_argc: i32, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new(Default::default());\n     helper::work_with(&zero);\n     1\n }"}, {"sha": "56409e71339148d845199c63a58bf0d601db5a1d", "filename": "src/test/ui/allocator/no_std-alloc-error-handler-default.rs", "status": "modified", "additions": 15, "deletions": 34, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fno_std-alloc-error-handler-default.rs?ref=bbb9cfbbc56f0116541b8c3a0f829a60bf7605e0", "patch": "@@ -6,11 +6,10 @@\n // only-linux\n // compile-flags:-C panic=abort\n // aux-build:helper.rs\n-// gate-test-default_alloc_error_handler\n \n-#![feature(start, rustc_private, new_uninit, panic_info_message, lang_items)]\n-#![feature(default_alloc_error_handler)]\n+#![feature(rustc_private, lang_items)]\n #![no_std]\n+#![no_main]\n \n extern crate alloc;\n extern crate libc;\n@@ -23,6 +22,7 @@ pub fn __aeabi_unwind_cpp_pr0() {}\n pub fn __aeabi_unwind_cpp_pr1() {}\n \n use alloc::boxed::Box;\n+use alloc::string::ToString;\n use core::alloc::{GlobalAlloc, Layout};\n use core::ptr::null_mut;\n \n@@ -32,11 +32,7 @@ struct MyAllocator;\n \n unsafe impl GlobalAlloc for MyAllocator {\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        if layout.size() < 4096 {\n-            libc::malloc(layout.size()) as _\n-        } else {\n-            null_mut()\n-        }\n+        if layout.size() < 4096 { libc::malloc(layout.size()) as _ } else { null_mut() }\n     }\n     unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n }\n@@ -47,26 +43,12 @@ static A: MyAllocator = MyAllocator;\n #[panic_handler]\n fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n     unsafe {\n-        if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        }\n-        if let Some(args) = panic_info.message() {\n-            let mut s = alloc::string::String::new();\n-            alloc::fmt::write(&mut s, *args).unwrap();\n-            let s = s.as_str();\n-            const PSTR: &str = \"panic occurred: \";\n-            const CR: &str = \"\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-            libc::write(libc::STDERR_FILENO, s as *const _ as _, s.len());\n-            libc::write(libc::STDERR_FILENO, CR as *const _ as _, CR.len());\n-        } else {\n-            const PSTR: &str = \"panic occurred\\n\";\n-            libc::write(libc::STDERR_FILENO, PSTR as *const _ as _, PSTR.len());\n-        }\n+        let s = panic_info.to_string();\n+        const PSTR: &str = \"panic occurred: \";\n+        const CR: &str = \"\\n\";\n+        libc::write(libc::STDERR_FILENO, PSTR.as_ptr() as *const _, PSTR.len());\n+        libc::write(libc::STDERR_FILENO, s.as_ptr() as *const _, s.len());\n+        libc::write(libc::STDERR_FILENO, CR.as_ptr() as *const _, CR.len());\n         libc::exit(0)\n     }\n }\n@@ -76,15 +58,14 @@ fn panic(panic_info: &core::panic::PanicInfo) -> ! {\n // in these libraries will refer to `rust_eh_personality` if LLVM can not *prove* the contents won't\n // unwind. So, for this test case we will define the symbol.\n #[lang = \"eh_personality\"]\n-extern fn rust_eh_personality() {}\n+extern \"C\" fn rust_eh_personality() {}\n \n-#[derive(Debug)]\n+#[derive(Default, Debug)]\n struct Page(#[allow(unused_tuple_struct_fields)] [[u64; 32]; 16]);\n \n-#[start]\n-pub fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let zero = Box::<Page>::new_zeroed();\n-    let zero = unsafe { zero.assume_init() };\n+#[no_mangle]\n+fn main(_argc: i32, _argv: *const *const u8) -> isize {\n+    let zero = Box::<Page>::new(Default::default());\n     helper::work_with(&zero);\n     1\n }"}, {"sha": "4d378f010ed4d54230d2d5cfc0d21f5142f1c4d5", "filename": "src/test/ui/missing/missing-alloc_error_handler.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9c07efe84f28a44f3044237696acc295aa407ee5/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07efe84f28a44f3044237696acc295aa407ee5/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.rs?ref=9c07efe84f28a44f3044237696acc295aa407ee5", "patch": "@@ -1,23 +0,0 @@\n-// compile-flags: -C panic=abort\n-// no-prefer-dynamic\n-\n-#![no_std]\n-#![crate_type = \"staticlib\"]\n-#![feature(alloc_error_handler)]\n-\n-#[panic_handler]\n-fn panic(_: &core::panic::PanicInfo) -> ! {\n-    loop {}\n-}\n-\n-extern crate alloc;\n-\n-#[global_allocator]\n-static A: MyAlloc = MyAlloc;\n-\n-struct MyAlloc;\n-\n-unsafe impl core::alloc::GlobalAlloc for MyAlloc {\n-    unsafe fn alloc(&self, _: core::alloc::Layout) -> *mut u8 { 0 as _ }\n-    unsafe fn dealloc(&self, _: *mut u8, _: core::alloc::Layout) {}\n-}"}, {"sha": "995fa7cf85e965761f4748d51f19f235c6ad92dd", "filename": "src/test/ui/missing/missing-alloc_error_handler.stderr", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c07efe84f28a44f3044237696acc295aa407ee5/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c07efe84f28a44f3044237696acc295aa407ee5/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-alloc_error_handler.stderr?ref=9c07efe84f28a44f3044237696acc295aa407ee5", "patch": "@@ -1,6 +0,0 @@\n-error: `#[alloc_error_handler]` function required, but not found\n-\n-note: use `#![feature(default_alloc_error_handler)]` for a default error handler\n-\n-error: aborting due to previous error\n-"}]}