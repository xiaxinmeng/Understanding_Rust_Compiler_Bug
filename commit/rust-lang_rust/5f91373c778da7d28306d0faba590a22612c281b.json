{"sha": "5f91373c778da7d28306d0faba590a22612c281b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTEzNzNjNzc4ZGE3ZDI4MzA2ZDBmYWJhNTkwYTIyNjEyYzI4MWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-09T11:06:12Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-09T11:06:12Z"}, "message": "Typecheck patterns of all match arms first, so we get types for bindings.", "tree": {"sha": "791d9b16c67998c7ee9891d01288ffe807728166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791d9b16c67998c7ee9891d01288ffe807728166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f91373c778da7d28306d0faba590a22612c281b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f91373c778da7d28306d0faba590a22612c281b", "html_url": "https://github.com/rust-lang/rust/commit/5f91373c778da7d28306d0faba590a22612c281b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f91373c778da7d28306d0faba590a22612c281b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a50c29f6c5c386fba6ab685818755ac55152e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a50c29f6c5c386fba6ab685818755ac55152e5", "html_url": "https://github.com/rust-lang/rust/commit/36a50c29f6c5c386fba6ab685818755ac55152e5"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "a477df6ae2d568e4d296876c7a9fd0c91a442612", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f91373c778da7d28306d0faba590a22612c281b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91373c778da7d28306d0faba590a22612c281b/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=5f91373c778da7d28306d0faba590a22612c281b", "patch": "@@ -626,9 +626,9 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         let discrim_diverges = self.diverges.get();\n         self.diverges.set(Diverges::Maybe);\n \n-        // Typecheck the patterns first, so that we get types for all the\n-        // bindings.\n-        let all_arm_pats_diverge = arms.iter().map(|arm| {\n+        // rust-lang/rust#55810: Typecheck patterns first (via eager\n+        // collection into `Vec`), so we get types for all bindings.\n+        let all_arm_pats_diverge: Vec<_> = arms.iter().map(|arm| {\n             let mut all_pats_diverge = Diverges::WarnedAlways;\n             for p in &arm.pats {\n                 self.diverges.set(Diverges::Maybe);\n@@ -644,7 +644,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 Diverges::Maybe => Diverges::Maybe,\n                 Diverges::Always | Diverges::WarnedAlways => Diverges::WarnedAlways,\n             }\n-        });\n+        }).collect();\n \n         // Now typecheck the blocks.\n         //"}, {"sha": "9eed80ad886e0c876a3d14e08031382e7404dec3", "filename": "src/test/ui/typeck/issue-55810-must-typeck-match-pats-before-guards.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f91373c778da7d28306d0faba590a22612c281b/src%2Ftest%2Fui%2Ftypeck%2Fissue-55810-must-typeck-match-pats-before-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f91373c778da7d28306d0faba590a22612c281b/src%2Ftest%2Fui%2Ftypeck%2Fissue-55810-must-typeck-match-pats-before-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-55810-must-typeck-match-pats-before-guards.rs?ref=5f91373c778da7d28306d0faba590a22612c281b", "patch": "@@ -0,0 +1,23 @@\n+// compile-pass\n+\n+// rust-lang/rust#55810: types for a binding in a match arm can be\n+// inferred from arms that come later in the match.\n+\n+struct S;\n+\n+impl S {\n+    fn method(&self) -> bool {\n+        unimplemented!()\n+    }\n+}\n+\n+fn get<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    match get() {\n+        x if x.method() => {}\n+        &S => {}\n+    }\n+}"}]}