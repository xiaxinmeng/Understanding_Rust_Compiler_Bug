{"sha": "ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMzk0NjdjZGUwZDYzNzBkNjViZDdkMzliMDJkZGUzZmY5YzI4YjQ=", "commit": {"author": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-24T22:13:31Z"}, "committer": {"name": "cassiersg", "email": "cassiersg@users.noreply.github.com", "date": "2015-08-24T22:13:31Z"}, "message": "Merge pull request #191 from myromeu/is_empty\n\nFixes nrc/rustfmt#187", "tree": {"sha": "c7409acc62f4e4e43aa87738dbe4ecd0447ecb2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7409acc62f4e4e43aa87738dbe4ecd0447ecb2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "html_url": "https://github.com/rust-lang/rust/commit/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/comments", "author": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cassiersg", "id": 9348542, "node_id": "MDQ6VXNlcjkzNDg1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/9348542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassiersg", "html_url": "https://github.com/cassiersg", "followers_url": "https://api.github.com/users/cassiersg/followers", "following_url": "https://api.github.com/users/cassiersg/following{/other_user}", "gists_url": "https://api.github.com/users/cassiersg/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassiersg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassiersg/subscriptions", "organizations_url": "https://api.github.com/users/cassiersg/orgs", "repos_url": "https://api.github.com/users/cassiersg/repos", "events_url": "https://api.github.com/users/cassiersg/events{/privacy}", "received_events_url": "https://api.github.com/users/cassiersg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4b0e6612bf3a84e033539a2bd8286d2caefd24", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4b0e6612bf3a84e033539a2bd8286d2caefd24", "html_url": "https://github.com/rust-lang/rust/commit/4c4b0e6612bf3a84e033539a2bd8286d2caefd24"}, {"sha": "c7e6d0b54af1ae4cb14dcc4473dd819913f263a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e6d0b54af1ae4cb14dcc4473dd819913f263a4", "html_url": "https://github.com/rust-lang/rust/commit/c7e6d0b54af1ae4cb14dcc4473dd819913f263a4"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "4f58c19c8fdd6be887054044a6b2f396646828fa", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -216,7 +216,7 @@ impl Rewrite for ast::Block {\n                 // Extract comment between unsafe and block start.\n                 let trimmed = &snippet[6..open_pos].trim();\n \n-                if trimmed.len() > 0 {\n+                if !trimmed.is_empty() {\n                     // 9 = \"unsafe  {\".len(), 7 = \"unsafe \".len()\n                     format!(\"unsafe {} \", rewrite_comment(trimmed, true, width - 9, offset + 7))\n                 } else {\n@@ -733,7 +733,7 @@ fn rewrite_call(context: &RewriteContext,\n     let callee_str = try_opt!(callee.rewrite(context, max_callee_width, offset));\n     debug!(\"rewrite_call, callee_str: `{}`\", callee_str);\n \n-    if args.len() == 0 {\n+    if args.is_empty() {\n         return Some(format!(\"{}()\", callee_str));\n     }\n \n@@ -799,7 +799,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                           offset: usize)\n                           -> Option<String> {\n     debug!(\"rewrite_struct_lit: width {}, offset {}\", width, offset);\n-    assert!(fields.len() > 0 || base.is_some());\n+    assert!(!fields.is_empty() || base.is_some());\n \n     enum StructLitField<'a> {\n         Regular(&'a ast::Field),\n@@ -1008,7 +1008,7 @@ fn rewrite_unary_op(context: &RewriteContext,\n         ast::UnOp::UnNeg => \"-\",\n     };\n \n-    let subexpr = try_opt!(expr.rewrite(context, width - operator_str.len(), offset));\n+    let subexpr = try_opt!(expr.rewrite(context, try_opt!(width.checked_sub(operator_str.len())), offset));\n \n     Some(format!(\"{}{}\", operator_str, subexpr))\n }"}, {"sha": "cf9e174f9b04cf205bf6e47a9239c035798a59a1", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -51,13 +51,13 @@ impl Rewrite for ast::ViewPath {\n \n fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem) -> String {\n     if let ast::PathListItem_::PathListIdent{ name, .. } = vpi.node {\n-        if path_str.len() == 0 {\n+        if path_str.is_empty() {\n             name.to_string()\n         } else {\n             format!(\"{}::{}\", path_str, name)\n         }\n     } else {\n-        if path_str.len() != 0 {\n+        if !path_str.is_empty() {\n             path_str\n         } else {\n             // This catches the import: use {self}, which is a compiler error, so we just\n@@ -86,7 +86,7 @@ pub fn rewrite_use_list(width: usize,\n     }\n \n     // 2 = ::\n-    let path_separation_w = if path_str.len() > 0 {\n+    let path_separation_w = if !path_str.is_empty() {\n         2\n     } else {\n         0\n@@ -151,7 +151,7 @@ pub fn rewrite_use_list(width: usize,\n \n     let list = write_list(&items[first_index..], &fmt);\n \n-    Some(if path_str.len() == 0 {\n+    Some(if path_str.is_empty() {\n             format!(\"{{{}}}\", list)\n         } else {\n             format!(\"{}::{{{}}}\", path_str, list)"}, {"sha": "e39638ba4272770e32158dad69cda38bf6c0f9f0", "filename": "src/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -178,7 +178,7 @@ impl<'a> FmtVisitor<'a> {\n         result.push(')');\n \n         // Return type.\n-        if ret_str.len() > 0 {\n+        if !ret_str.is_empty() {\n             // If we've already gone multi-line, or the return type would push\n             // over the max width, then put the return type on a new line.\n             if result.contains(\"\\n\") ||\n@@ -200,11 +200,11 @@ impl<'a> FmtVisitor<'a> {\n \n             // Comment between return type and the end of the decl.\n             let snippet_lo = fd.output.span().hi;\n-            if where_clause.predicates.len() == 0 {\n+            if where_clause.predicates.is_empty() {\n                 let snippet_hi = span.hi;\n                 let snippet = self.snippet(codemap::mk_sp(snippet_lo, snippet_hi));\n                 let snippet = snippet.trim();\n-                if snippet.len() > 0 {\n+                if !snippet.is_empty() {\n                     result.push(' ');\n                     result.push_str(snippet);\n                 }\n@@ -342,7 +342,7 @@ impl<'a> FmtVisitor<'a> {\n     fn newline_for_brace(&self, where_clause: &ast::WhereClause) -> bool {\n         match self.config.fn_brace_style {\n             BraceStyle::AlwaysNextLine => true,\n-            BraceStyle::SameLineWhere if where_clause.predicates.len() > 0 => true,\n+            BraceStyle::SameLineWhere if !where_clause.predicates.is_empty() => true,\n             _ => false,\n         }\n     }\n@@ -399,7 +399,7 @@ impl<'a> FmtVisitor<'a> {\n \n                 let mut result = String::new();\n \n-                if types.len() > 0 {\n+                if !types.is_empty() {\n                     let items = itemize_list(self.codemap,\n                                              types.iter(),\n                                              \")\",\n@@ -482,7 +482,7 @@ impl<'a> FmtVisitor<'a> {\n         let header_str = self.format_header(item_name, ident, vis);\n         result.push_str(&header_str);\n \n-        if struct_def.fields.len() == 0 {\n+        if struct_def.fields.is_empty() {\n             result.push(';');\n             return result;\n         }\n@@ -513,7 +513,7 @@ impl<'a> FmtVisitor<'a> {\n                                  terminator,\n                                  |field| {\n                                      // Include attributes and doc comments, if present\n-                                     if field.node.attrs.len() > 0 {\n+                                     if !field.node.attrs.is_empty() {\n                                          field.node.attrs[0].span.lo\n                                      } else {\n                                          field.span.lo\n@@ -602,7 +602,7 @@ impl<'a> FmtVisitor<'a> {\n                        -> String {\n         let mut result = self.rewrite_generics(generics, offset, span);\n \n-        if generics.where_clause.predicates.len() > 0 || result.contains('\\n') {\n+        if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n             result.push_str(&self.rewrite_where_clause(&generics.where_clause,\n                                                        self.config,\n                                                        self.block_indent,\n@@ -635,7 +635,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let indent = self.block_indent + self.config.tab_spaces;\n         let mut attr_str = self.rewrite_attrs(&field.node.attrs, indent);\n-        if attr_str.len() > 0 {\n+        if !attr_str.is_empty() {\n             attr_str.push('\\n');\n             attr_str.push_str(&make_indent(indent));\n         }\n@@ -651,7 +651,7 @@ impl<'a> FmtVisitor<'a> {\n         // there is a where clause at all.\n         let lifetimes: &[_] = &generics.lifetimes;\n         let tys: &[_] = &generics.ty_params;\n-        if lifetimes.len() + tys.len() == 0 {\n+        if lifetimes.is_empty() && tys.is_empty() {\n             return String::new();\n         }\n \n@@ -671,7 +671,7 @@ impl<'a> FmtVisitor<'a> {\n \n         // Extract comments between generics.\n         let lt_spans = lifetimes.iter().map(|l| {\n-            let hi = if l.bounds.len() == 0 {\n+            let hi = if l.bounds.is_empty() {\n                 l.lifetime.span.hi\n             } else {\n                 l.bounds[l.bounds.len() - 1].span.hi\n@@ -705,7 +705,7 @@ impl<'a> FmtVisitor<'a> {\n                             indent: usize,\n                             span_end: BytePos)\n                             -> String {\n-        if where_clause.predicates.len() == 0 {\n+        if where_clause.predicates.is_empty() {\n             return String::new();\n         }\n \n@@ -833,7 +833,7 @@ fn span_for_ty_param(ty: &ast::TyParam) -> Span {\n     if let Some(ref def) = ty.default {\n         return codemap::mk_sp(lo, def.span.hi);\n     }\n-    if ty.bounds.len() == 0 {\n+    if ty.bounds.is_empty() {\n         return ty.span;\n     }\n     let hi = match ty.bounds[ty.bounds.len() - 1] {"}, {"sha": "12c8d14574a2a433c7027dfdb800442cf47fdb78", "filename": "src/lists.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -92,7 +92,7 @@ impl ListItem {\n // FIXME: this has grown into a monstrosity\n // TODO: add unit tests\n pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> String {\n-    if items.len() == 0 {\n+    if items.is_empty() {\n         return String::new();\n     }\n \n@@ -270,7 +270,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                                                                           (self.get_lo)(&item)))\n                                           .unwrap();\n             let pre_snippet = pre_snippet.trim();\n-            let pre_comment = if pre_snippet.len() > 0 {\n+            let pre_comment = if !pre_snippet.is_empty() {\n                 Some(pre_snippet.to_owned())\n             } else {\n                 None\n@@ -328,7 +328,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 post_snippet = post_snippet[..(post_snippet.len() - 1)].trim_matches(white_space);\n             }\n \n-            let post_comment = if post_snippet.len() > 0 {\n+            let post_comment = if !post_snippet.is_empty() {\n                 Some(post_snippet.to_owned())\n             } else {\n                 None"}, {"sha": "5969c1e101897d5513a0bc1b1461cee2f4c04bd8", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -190,9 +190,9 @@ fn rewrite_segment(segment: &ast::PathSegment,\n     let offset = offset + ident_len;\n \n     let params = match segment.parameters {\n-        ast::PathParameters::AngleBracketedParameters(ref data) if data.lifetimes.len() > 0 ||\n-                                                                   data.types.len() > 0 ||\n-                                                                   data.bindings.len() > 0 => {\n+        ast::PathParameters::AngleBracketedParameters(ref data) if !data.lifetimes.is_empty() ||\n+                                                                   !data.types.is_empty() ||\n+                                                                   !data.bindings.is_empty() => {\n             let param_list = data.lifetimes.iter()\n                                            .map(SegmentParam::LifeTime)\n                                            .chain(data.types.iter()\n@@ -267,7 +267,7 @@ impl Rewrite for ast::WherePredicate {\n                                                                           ref bounded_ty,\n                                                                           ref bounds,\n                                                                           ..}) => {\n-                    if bound_lifetimes.len() > 0 {\n+                    if !bound_lifetimes.is_empty() {\n                         let lifetime_str = bound_lifetimes.iter().map(|lt| {\n                                            lt.rewrite(context, width, offset).unwrap()\n                                        }).collect::<Vec<_>>().join(\", \");\n@@ -319,7 +319,7 @@ impl Rewrite for ast::WherePredicate {\n \n impl Rewrite for ast::LifetimeDef {\n     fn rewrite(&self, _: &RewriteContext, _: usize, _: usize) -> Option<String> {\n-        if self.bounds.len() == 0 {\n+        if self.bounds.is_empty() {\n             Some(pprust::lifetime_to_string(&self.lifetime))\n         } else {\n             Some(format!(\"{}: {}\",\n@@ -351,7 +351,7 @@ impl Rewrite for ast::TyParam {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n         let mut result = String::with_capacity(128);\n         result.push_str(&self.ident.to_string());\n-        if self.bounds.len() > 0 {\n+        if !self.bounds.is_empty() {\n             result.push_str(\": \");\n \n             let bounds = self.bounds.iter().map(|ty_bound| {\n@@ -372,7 +372,7 @@ impl Rewrite for ast::TyParam {\n // FIXME: this assumes everything will fit on one line\n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n-        if self.bound_lifetimes.len() > 0 {\n+        if !self.bound_lifetimes.is_empty() {\n             let lifetime_str = self.bound_lifetimes.iter().map(|lt| {\n                 lt.rewrite(context, width, offset).unwrap()\n             }).collect::<Vec<_>>().join(\", \");"}, {"sha": "fccd619d403a67070f4452a5c76b1e035bdbf95e", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca39467cde0d6370d65bd7d39b02dde3ff9c28b4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=ca39467cde0d6370d65bd7d39b02dde3ff9c28b4", "patch": "@@ -267,7 +267,7 @@ impl<'a> FmtVisitor<'a> {\n \n     // Returns true if we should skip the following item.\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute]) -> bool {\n-        if attrs.len() == 0 {\n+        if attrs.is_empty() {\n             return false;\n         }\n \n@@ -299,7 +299,7 @@ impl<'a> FmtVisitor<'a> {\n                 // with the usual doc comment token.\n                 let multi_line = a_str.starts_with(\"//\") && comment.matches('\\n').count() > 1;\n                 let comment = comment.trim();\n-                if comment.len() > 0 {\n+                if !comment.is_empty() {\n                     result.push_str(&indent);\n                     result.push_str(comment);\n                     result.push('\\n');\n@@ -355,7 +355,7 @@ impl<'a> FmtVisitor<'a> {\n         };\n         // 1 = \";\"\n         match vp.rewrite(&context, self.config.max_width - offset - 1, offset) {\n-            Some(ref s) if s.len() == 0 => {\n+            Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = codemap::mk_sp(self.last_pos, span.lo);\n                 let span_end = match self.snippet(prev_span).rfind('\\n') {"}]}