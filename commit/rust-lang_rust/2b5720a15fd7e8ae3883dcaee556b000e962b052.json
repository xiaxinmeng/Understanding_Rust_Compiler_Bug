{"sha": "2b5720a15fd7e8ae3883dcaee556b000e962b052", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNTcyMGExNWZkN2U4YWUzODgzZGNhZWU1NTZiMDAwZTk2MmIwNTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T14:47:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T14:09:12Z"}, "message": "Remove `i`, `is`, `u`, or `us` suffixes that are not necessary.", "tree": {"sha": "967aa12a6089aca54098adf56e97abff223b8798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967aa12a6089aca54098adf56e97abff223b8798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b5720a15fd7e8ae3883dcaee556b000e962b052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5720a15fd7e8ae3883dcaee556b000e962b052", "html_url": "https://github.com/rust-lang/rust/commit/2b5720a15fd7e8ae3883dcaee556b000e962b052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b5720a15fd7e8ae3883dcaee556b000e962b052/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700c518f2afd4b759fb54b867aee62660188d870", "url": "https://api.github.com/repos/rust-lang/rust/commits/700c518f2afd4b759fb54b867aee62660188d870", "html_url": "https://github.com/rust-lang/rust/commit/700c518f2afd4b759fb54b867aee62660188d870"}], "stats": {"total": 348, "additions": 174, "deletions": 174}, "files": [{"sha": "1b5018f4ad73df637c96ec9bd7bdb5ae2262f069", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -27,12 +27,12 @@\n //! Some examples of the `format!` extension are:\n //!\n //! ```\n-//! format!(\"Hello\");                  // => \"Hello\"\n-//! format!(\"Hello, {}!\", \"world\");    // => \"Hello, world!\"\n+//! format!(\"Hello\");                 // => \"Hello\"\n+//! format!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\n //! format!(\"The number is {}\", 1);   // => \"The number is 1\"\n-//! format!(\"{:?}\", (3, 4));         // => \"(3, 4)\"\n+//! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\n //! format!(\"{value}\", value=4);      // => \"4\"\n-//! format!(\"{} {}\", 1, 2u);          // => \"1 2\"\n+//! format!(\"{} {}\", 1, 2);           // => \"1 2\"\n //! ```\n //!\n //! From these, you can see that the first argument is a format string. It is"}, {"sha": "c45fac1bc9490be142f1b9a0e5ac1dc277124628", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -441,18 +441,18 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n         dst[0] = code as u8;\n         Some(1)\n     } else if code < MAX_TWO_B && dst.len() >= 2 {\n-        dst[0] = (code >> 6u & 0x1F_u32) as u8 | TAG_TWO_B;\n+        dst[0] = (code >> 6 & 0x1F_u32) as u8 | TAG_TWO_B;\n         dst[1] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(2)\n     } else if code < MAX_THREE_B && dst.len() >= 3  {\n-        dst[0] = (code >> 12u & 0x0F_u32) as u8 | TAG_THREE_B;\n-        dst[1] = (code >>  6u & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 12 & 0x0F_u32) as u8 | TAG_THREE_B;\n+        dst[1] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n         dst[2] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(3)\n     } else if dst.len() >= 4 {\n-        dst[0] = (code >> 18u & 0x07_u32) as u8 | TAG_FOUR_B;\n-        dst[1] = (code >> 12u & 0x3F_u32) as u8 | TAG_CONT;\n-        dst[2] = (code >>  6u & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 18 & 0x07_u32) as u8 | TAG_FOUR_B;\n+        dst[1] = (code >> 12 & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[2] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n         dst[3] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(4)\n     } else {"}, {"sha": "383108a3bc0e452656f67bbd8ff24bb38226f71b", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -1930,7 +1930,7 @@ pub mod types {\n                     pub iSecurityScheme: c_int,\n                     pub dwMessageSize: DWORD,\n                     pub dwProviderReserved: DWORD,\n-                    pub szProtocol: [u8; WSAPROTOCOL_LEN as usize + 1us],\n+                    pub szProtocol: [u8; WSAPROTOCOL_LEN as usize + 1],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;"}, {"sha": "4af322089d53d40d7d3bea7ece5bed39ff48437a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -713,10 +713,10 @@ pub mod writer {\n         match size {\n             1 => w.write_all(&[0x80u8 | (n as u8)]),\n             2 => w.write_all(&[0x40u8 | ((n >> 8) as u8), n as u8]),\n-            3 => w.write_all(&[0x20u8 | ((n >> 16) as u8), (n >> 8_u) as u8,\n+            3 => w.write_all(&[0x20u8 | ((n >> 16) as u8), (n >> 8) as u8,\n                             n as u8]),\n-            4 => w.write_all(&[0x10u8 | ((n >> 24) as u8), (n >> 16_u) as u8,\n-                            (n >> 8_u) as u8, n as u8]),\n+            4 => w.write_all(&[0x10u8 | ((n >> 24) as u8), (n >> 16) as u8,\n+                            (n >> 8) as u8, n as u8]),\n             _ => Err(old_io::IoError {\n                 kind: old_io::OtherIoError,\n                 desc: \"int too big\",\n@@ -863,7 +863,7 @@ pub mod writer {\n     impl<'a, W: Writer + Seek> Encoder<'a, W> {\n         // used internally to emit things like the vector length and so on\n         fn _emit_tagged_uint(&mut self, t: EbmlEncoderTag, v: uint) -> EncodeResult {\n-            assert!(v <= 0xFFFF_FFFF_u);\n+            assert!(v <= 0xFFFF_FFFF);\n             self.wr_tagged_u32(t as uint, v as u32)\n         }\n "}, {"sha": "d54199a679a266f8cacdf913fa2287a8f76d3d83", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -560,7 +560,7 @@ pub fn parameterized<'tcx,GG>(cx: &ctxt<'tcx>,\n pub fn ty_to_short_str<'tcx>(cx: &ctxt<'tcx>, typ: Ty<'tcx>) -> String {\n     let mut s = typ.repr(cx).to_string();\n     if s.len() >= 32 {\n-        s = (&s[0u..32]).to_string();\n+        s = (&s[0..32]).to_string();\n     }\n     return s;\n }"}, {"sha": "0331b6171f36ca15f503b08d1cb3f492fc8b9120", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -62,7 +62,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         let file = path.filename_str().unwrap();\n         let file = &file[3..file.len() - 5]; // chop off lib/.rlib\n         debug!(\"reading {}\", file);\n-        for i in iter::count(0us, 1) {\n+        for i in iter::count(0, 1) {\n             let bc_encoded = time(sess.time_passes(),\n                                   &format!(\"check for {}.{}.bytecode.deflate\", name, i),\n                                   (),"}, {"sha": "e86f7bd52af059ff665434013ac8bb803f5b5c30", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -443,9 +443,9 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n \n     pub fn env_arg_pos(&self) -> uint {\n         if self.caller_expects_out_pointer {\n-            1u\n+            1\n         } else {\n-            0u\n+            0\n         }\n     }\n "}, {"sha": "cd8f4bc9841aa7043df33b90a3455bffcb521eb3", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -467,7 +467,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 PointerCast(bcx, lval.val, type_of::type_of(bcx.ccx(), unsized_ty).ptr_to())\n             }\n             ty::UnsizeLength(..) => {\n-                GEPi(bcx, lval.val, &[0u, 0u])\n+                GEPi(bcx, lval.val, &[0, 0])\n             }\n         };\n "}, {"sha": "456e27967f5a67fa374c1bf70de434f5aaad5dd2", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -76,7 +76,7 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let not_empty = ICmp(bcx,\n                                      llvm::IntNE,\n                                      len,\n-                                     C_uint(ccx, 0us),\n+                                     C_uint(ccx, 0_u32),\n                                      DebugLoc::None);\n                 with_cond(bcx, not_empty, |bcx| {\n                     let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty));\n@@ -436,7 +436,7 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let loop_counter = {\n         // i = 0\n         let i = alloca(loop_bcx, bcx.ccx().int_type(), \"__i\");\n-        Store(loop_bcx, C_uint(bcx.ccx(), 0us), i);\n+        Store(loop_bcx, C_uint(bcx.ccx(), 0_u32), i);\n \n         Br(loop_bcx, cond_bcx.llbb, DebugLoc::None);\n         i\n@@ -464,7 +464,7 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     { // i += 1\n         let i = Load(inc_bcx, loop_counter);\n-        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1us), DebugLoc::None);\n+        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1_u32), DebugLoc::None);\n         Store(inc_bcx, plusone, loop_counter);\n \n         Br(inc_bcx, cond_bcx.llbb, DebugLoc::None);"}, {"sha": "a1780652c8176b556356f6e6ee8e41ab099f5222", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -1149,7 +1149,7 @@ mod tests {\n             assert_eq!(_20, NumCast::from(20f32).unwrap());\n             assert_eq!(_20, NumCast::from(20f64).unwrap());\n \n-            assert_eq!(_20, cast(20u).unwrap());\n+            assert_eq!(_20, cast(20usize).unwrap());\n             assert_eq!(_20, cast(20u8).unwrap());\n             assert_eq!(_20, cast(20u16).unwrap());\n             assert_eq!(_20, cast(20u32).unwrap());\n@@ -1763,7 +1763,7 @@ mod bench {\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {\n-        let v = (0..1024u).collect::<Vec<_>>();\n-        b.iter(|| {v.iter().fold(0u, |old, new| old.pow(*new));});\n+        let v = (0..1024).collect::<Vec<_>>();\n+        b.iter(|| {v.iter().fold(0, |old, new| old.pow(*new));});\n     }\n }"}, {"sha": "f6d05f961e1736efc5e54908730b70c37ba99463", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -262,7 +262,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n \n     // If limited digits, calculate one digit more for rounding.\n     let (limit_digits, digit_count, exact) = match digits {\n-        DigAll          => (false, 0u,      false),\n+        DigAll          => (false, 0,       false),\n         DigMax(count)   => (true,  count+1, false),\n         DigExact(count) => (true,  count+1, true)\n     };\n@@ -289,7 +289,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n     deccum = num.fract();\n     if deccum != _0 || (limit_digits && exact && digit_count > 0) {\n         buf.push(b'.');\n-        let mut dig = 0u;\n+        let mut dig = 0;\n \n         // calculate new digits while\n         // - there is no limit and there are digits left\n@@ -314,7 +314,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n \n             // Decrease the deccumulator one fractional digit at a time\n             deccum = deccum.fract();\n-            dig += 1u;\n+            dig += 1;\n         }\n \n         // If digits are limited, and that limit has been reached,"}, {"sha": "8d4f0344beb62b767bc92927bceb3306ce63708f", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -25,11 +25,11 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str::<$T>(\"0\"), Some(0u as $T));\n-        assert_eq!(from_str::<$T>(\"3\"), Some(3u as $T));\n-        assert_eq!(from_str::<$T>(\"10\"), Some(10u as $T));\n+        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n+        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n+        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n         assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str::<$T>(\"00100\"), Some(100u as $T));\n+        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n \n         assert_eq!(from_str::<$T>(\"\"), None);\n         assert_eq!(from_str::<$T>(\" \"), None);\n@@ -38,12 +38,12 @@ mod tests {\n \n     #[test]\n     pub fn test_parse_bytes() {\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 10), Ok(123u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"1001\", 2), Ok(9u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 8), Ok(83u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 16), Ok(291u as u16));\n-        assert_eq!(FromStrRadix::from_str_radix(\"ffff\", 16), Ok(65535u as u16));\n-        assert_eq!(FromStrRadix::from_str_radix(\"z\", 36), Ok(35u as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 10), Ok(123 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"1001\", 2), Ok(9 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 8), Ok(83 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 16), Ok(291 as u16));\n+        assert_eq!(FromStrRadix::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n+        assert_eq!(FromStrRadix::from_str_radix(\"z\", 36), Ok(35 as $T));\n \n         assert_eq!(FromStrRadix::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n         assert_eq!(FromStrRadix::from_str_radix(\"_\", 2).ok(), None::<$T>);"}, {"sha": "c2a6c515acc70b2978fdcd1f494884127549bc25", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -85,21 +85,21 @@ pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_le* intrinsics\n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n     match size {\n-      1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n-      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n-      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n+      1 => f(&[n as u8]),\n+      2 => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n+      4 => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n+      8 => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n       _ => {\n \n         let mut bytes = vec!();\n         let mut i = size;\n         let mut n = n;\n-        while i > 0u {\n+        while i > 0 {\n             bytes.push((n & 255_u64) as u8);\n             n >>= 8;\n-            i -= 1u;\n+            i -= 1;\n         }\n         f(&bytes)\n       }\n@@ -126,19 +126,19 @@ pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_be* intrinsics\n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n     match size {\n-      1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n-      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n-      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n+      1 => f(&[n as u8]),\n+      2 => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n+      4 => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n+      8 => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n       _ => {\n         let mut bytes = vec!();\n         let mut i = size;\n-        while i > 0u {\n-            let shift = (i - 1u) * 8u;\n+        while i > 0 {\n+            let shift = (i - 1) * 8;\n             bytes.push((n >> shift) as u8);\n-            i -= 1u;\n+            i -= 1;\n         }\n         f(&bytes)\n       }\n@@ -160,7 +160,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n     use ptr::{copy_nonoverlapping_memory};\n     use slice::SliceExt;\n \n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n \n     if data.len() - start < size {\n         panic!(\"index out of bounds\");"}, {"sha": "1fd527014a3d62d4e6fcdac2a6df7b20c26c424d", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -720,7 +720,7 @@ mod test {\n             let buf = [5 as u8; 100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf, [5; 10]);\n@@ -735,7 +735,7 @@ mod test {\n             let mut buf = [0 as u8; 100];\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     wr.write(&[5; 10]).unwrap();\n                 }\n             }\n@@ -749,7 +749,7 @@ mod test {\n             let buf = [5 as u8; 100];\n             {\n                 let mut rdr = BufReader::new(&buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf, [5; 10]);"}, {"sha": "21282a0c28abb79db5c7762986428f9262228c90", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -1120,37 +1120,37 @@ pub trait Writer {\n     /// Write a big-endian u64 (8 bytes).\n     #[inline]\n     fn write_be_u64(&mut self, n: u64) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n, 8u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n, 8, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian u32 (4 bytes).\n     #[inline]\n     fn write_be_u32(&mut self, n: u32) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian u16 (2 bytes).\n     #[inline]\n     fn write_be_u16(&mut self, n: u16) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i64 (8 bytes).\n     #[inline]\n     fn write_be_i64(&mut self, n: i64) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 8u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 8, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i32 (4 bytes).\n     #[inline]\n     fn write_be_i32(&mut self, n: i32) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i16 (2 bytes).\n     #[inline]\n     fn write_be_i16(&mut self, n: i16) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian IEEE754 double-precision floating-point (8 bytes).\n@@ -1172,37 +1172,37 @@ pub trait Writer {\n     /// Write a little-endian u64 (8 bytes).\n     #[inline]\n     fn write_le_u64(&mut self, n: u64) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n, 8u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n, 8, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian u32 (4 bytes).\n     #[inline]\n     fn write_le_u32(&mut self, n: u32) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian u16 (2 bytes).\n     #[inline]\n     fn write_le_u16(&mut self, n: u16) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i64 (8 bytes).\n     #[inline]\n     fn write_le_i64(&mut self, n: i64) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 8u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 8, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i32 (4 bytes).\n     #[inline]\n     fn write_le_i32(&mut self, n: i32) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i16 (2 bytes).\n     #[inline]\n     fn write_le_i16(&mut self, n: i16) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian IEEE754 double-precision floating-point"}, {"sha": "8a4e8668b1092f1a878b788bbfbf6b444e7ec4f9", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -390,7 +390,7 @@ mod tests {\n         };\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..times {\n+            for _ in 0..times {\n                 let mut stream = UnixStream::connect(&path2);\n                 match stream.write(&[100]) {\n                     Ok(..) => {}\n@@ -555,7 +555,7 @@ mod tests {\n             tx.send(UnixStream::connect(&addr2).unwrap()).unwrap();\n         });\n         let l = rx.recv().unwrap();\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match a.accept() {\n                 Ok(..) => break,\n                 Err(ref e) if e.kind == TimedOut => {}\n@@ -683,7 +683,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -727,7 +727,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         tx.send(()).unwrap();\n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n@@ -746,7 +746,7 @@ mod tests {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "19a6f6e3defa7be42a677cea30cfdc75df58081d", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -746,7 +746,7 @@ mod test {\n     #[test]\n     fn multiple_connect_serial_ip4() {\n         let addr = next_test_ip4();\n-        let max = 10u;\n+        let max = 10;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = thread::spawn(move|| {\n@@ -766,7 +766,7 @@ mod test {\n     #[test]\n     fn multiple_connect_serial_ip6() {\n         let addr = next_test_ip6();\n-        let max = 10u;\n+        let max = 10;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = thread::spawn(move|| {"}, {"sha": "67b57b250860f961c61cb8a1d47165f602335ab1", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -447,7 +447,7 @@ mod test {\n         let _b = UdpSocket::bind(addr2).unwrap();\n \n         a.set_write_timeout(Some(1000));\n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             match a.send_to(&[0;4*1024], addr2) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "1f2ef50fcae453627b63568cf7e0b92697cac72b", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -121,7 +121,7 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.oneshot(Duration::milliseconds(10));\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `oneshot` call\n     /// ten_milliseconds.recv().unwrap();\n@@ -173,12 +173,12 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.periodic(Duration::milliseconds(10));\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `periodic` call\n     /// ten_milliseconds.recv().unwrap();\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 20 ms after the `periodic` call (*not* 10ms after the\n     /// // previous `recv`)"}, {"sha": "0a184a01a1d03650522c0c86584afe7d20424970", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -409,7 +409,7 @@ fn normalize_helper<'a>(v: &'a [u8], is_abs: bool) -> Option<Vec<&'a [u8]>> {\n         return None;\n     }\n     let mut comps: Vec<&'a [u8]> = vec![];\n-    let mut n_up = 0u;\n+    let mut n_up = 0;\n     let mut changed = false;\n     for comp in v.split(is_sep_byte) {\n         if comp.is_empty() { changed = true }"}, {"sha": "02a21321c4cb9ce0b22d9b2e3e31dd6178c71eb6", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -1063,7 +1063,7 @@ fn normalize_helper<'a>(s: &'a str, prefix: Option<PathPrefix>) -> (bool, Option\n         });\n     }\n     let mut comps: Vec<&'a str> = vec![];\n-    let mut n_up = 0u;\n+    let mut n_up = 0;\n     let mut changed = false;\n     for comp in s_.split(f) {\n         if comp.is_empty() { changed = true }"}, {"sha": "a4213e7373b1e0077579aa764ba492bf77a94fc9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -78,7 +78,7 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n-pub const TMPBUF_SZ : uint = 1000u;\n+pub const TMPBUF_SZ : uint = 1000;\n \n /// Returns the current working directory as a `Path`.\n ///\n@@ -1442,7 +1442,7 @@ mod tests {\n \n     fn make_rand_name() -> String {\n         let mut rng = rand::thread_rng();\n-        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10u)\n+        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n                                      .collect::<String>());\n         assert!(getenv(&n).is_none());\n         n\n@@ -1522,7 +1522,7 @@ mod tests {\n     #[ignore]\n     fn test_env_getenv() {\n         let e = env();\n-        assert!(e.len() > 0u);\n+        assert!(e.len() > 0);\n         for p in &e {\n             let (n, v) = (*p).clone();\n             debug!(\"{}\", n);"}, {"sha": "25d372b406f76fc11fd2b314540d31e9a1ff92f7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -102,7 +102,7 @@\n //!    let total = 1_000_000;\n //!    let mut in_circle = 0;\n //!\n-//!    for _ in 0u..total {\n+//!    for _ in 0..total {\n //!        let a = between.ind_sample(&mut rng);\n //!        let b = between.ind_sample(&mut rng);\n //!        if a*a + b*b <= 1. {\n@@ -176,7 +176,7 @@\n //! }\n //!\n //! fn free_doors(blocked: &[uint]) -> Vec<uint> {\n-//!     (0u..3).filter(|x| !blocked.contains(x)).collect()\n+//!     (0..3).filter(|x| !blocked.contains(x)).collect()\n //! }\n //!\n //! fn main() {\n@@ -483,14 +483,14 @@ mod test {\n     #[test]\n     fn test_gen_range() {\n         let mut r = thread_rng();\n-        for _ in 0u..1000 {\n+        for _ in 0..1000 {\n             let a = r.gen_range(-3, 42);\n             assert!(a >= -3 && a < 42);\n             assert_eq!(r.gen_range(0, 1), 0);\n             assert_eq!(r.gen_range(-12, -11), -12);\n         }\n \n-        for _ in 0u..1000 {\n+        for _ in 0..1000 {\n             let a = r.gen_range(10, 42);\n             assert!(a >= 10 && a < 42);\n             assert_eq!(r.gen_range(0, 1), 0);\n@@ -510,7 +510,7 @@ mod test {\n     #[should_fail]\n     fn test_gen_range_panic_uint() {\n         let mut r = thread_rng();\n-        r.gen_range(5us, 2us);\n+        r.gen_range(5, 2);\n     }\n \n     #[test]"}, {"sha": "0e2766f3889441331b0ec73c3ecad0ddfb25c8ca", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -377,7 +377,7 @@ mod test {\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();\n-        for _ in 0u..20 {\n+        for _ in 0..20 {\n             let (tx, rx) = channel();\n             txs.push(tx);\n \n@@ -391,7 +391,7 @@ mod test {\n                 thread::yield_now();\n                 let mut v = [0u8; 1000];\n \n-                for _ in 0u..100 {\n+                for _ in 0..100 {\n                     r.next_u32();\n                     thread::yield_now();\n                     r.next_u64();"}, {"sha": "b036177af153a50da6ff9f4951ae7ea69d4cdffa", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -18,7 +18,7 @@ use sync::{Mutex, Condvar};\n /// use std::thread;\n ///\n /// let barrier = Arc::new(Barrier::new(10));\n-/// for _ in 0u..10 {\n+/// for _ in 0..10 {\n ///     let c = barrier.clone();\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n@@ -120,7 +120,7 @@ mod tests {\n         let barrier = Arc::new(Barrier::new(N));\n         let (tx, rx) = channel();\n \n-        for _ in 0u..N - 1 {\n+        for _ in 0..N - 1 {\n             let c = barrier.clone();\n             let tx = tx.clone();\n             thread::spawn(move|| {\n@@ -138,7 +138,7 @@ mod tests {\n         let mut leader_found = barrier.wait().is_leader();\n \n         // Now, the barrier is cleared and we should get data.\n-        for _ in 0u..N - 1 {\n+        for _ in 0..N - 1 {\n             if rx.recv().unwrap() {\n                 assert!(!leader_found);\n                 leader_found = true;"}, {"sha": "21993e51669d359789f04767c4911391c36350cb", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -1147,9 +1147,9 @@ mod test {\n     fn stress() {\n         let (tx, rx) = channel::<int>();\n         let t = thread::spawn(move|| {\n-            for _ in 0u..10000 { tx.send(1).unwrap(); }\n+            for _ in 0..10000 { tx.send(1).unwrap(); }\n         });\n-        for _ in 0u..10000 {\n+        for _ in 0..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n         t.join().ok().unwrap();\n@@ -1209,7 +1209,7 @@ mod test {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n         });\n-        for _ in 0u..40 {\n+        for _ in 0..40 {\n             tx.send(1).unwrap();\n         }\n         t.join().ok().unwrap();\n@@ -1530,7 +1530,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in 0u..5000 { thread::yield_now(); }\n+        for _ in 0..5000 { thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -1654,9 +1654,9 @@ mod sync_tests {\n     fn stress() {\n         let (tx, rx) = sync_channel::<int>(0);\n         thread::spawn(move|| {\n-            for _ in 0u..10000 { tx.send(1).unwrap(); }\n+            for _ in 0..10000 { tx.send(1).unwrap(); }\n         });\n-        for _ in 0u..10000 {\n+        for _ in 0..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n     }\n@@ -1893,8 +1893,8 @@ mod sync_tests {\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = sync_channel(10000);\n-        for _ in 0u..10000 { tx.send(()).unwrap(); }\n-        for _ in 0u..10000 { rx.recv().unwrap(); }\n+        for _ in 0..10000 { tx.send(()).unwrap(); }\n+        for _ in 0..10000 { rx.recv().unwrap(); }\n     }\n \n     #[test]\n@@ -1994,7 +1994,7 @@ mod sync_tests {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in 0u..5000 { thread::yield_now(); }\n+        for _ in 0..5000 { thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -2082,7 +2082,7 @@ mod sync_tests {\n             rx2.recv().unwrap();\n         }\n \n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             repro()\n         }\n     }"}, {"sha": "a2accb128c310c2298ca6c277bee6792ad57b57d", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -171,8 +171,8 @@ mod tests {\n \n     #[test]\n     fn test() {\n-        let nthreads = 8u;\n-        let nmsgs = 1000u;\n+        let nthreads = 8;\n+        let nmsgs = 1000;\n         let q = Queue::new();\n         match q.pop() {\n             Empty => {}\n@@ -192,7 +192,7 @@ mod tests {\n             });\n         }\n \n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < nthreads * nmsgs {\n             match q.pop() {\n                 Empty | Inconsistent => {},"}, {"sha": "8fcedd2ab5796cbd0d955ec65c73257c01186a80", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -428,10 +428,10 @@ mod test {\n         let (tx3, rx3) = channel::<int>();\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n             tx1.send(1).unwrap();\n             rx3.recv().unwrap();\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n         });\n \n         select! {\n@@ -452,7 +452,7 @@ mod test {\n         let (tx3, rx3) = channel::<()>();\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n             tx1.send(1).unwrap();\n             tx2.send(2).unwrap();\n             rx3.recv().unwrap();\n@@ -557,7 +557,7 @@ mod test {\n             tx3.send(()).unwrap();\n         });\n \n-        for _ in 0u..1000 { thread::yield_now(); }\n+        for _ in 0..1000 { thread::yield_now(); }\n         drop(tx1.clone());\n         tx2.send(()).unwrap();\n         rx3.recv().unwrap();\n@@ -670,7 +670,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -690,7 +690,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -709,7 +709,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -727,7 +727,7 @@ mod test {\n     fn sync2() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let _t = thread::spawn(move|| {\n-            for _ in 0u..100 { thread::yield_now() }\n+            for _ in 0..100 { thread::yield_now() }\n             tx.send(1).unwrap();\n         });\n         select! {"}, {"sha": "e1a897065092af2ca1485b6354a70c355561b78e", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -325,7 +325,7 @@ mod test {\n             let (tx, rx) = channel();\n             let q2 = q.clone();\n             let _t = thread::spawn(move|| {\n-                for _ in 0u..100000 {\n+                for _ in 0..100000 {\n                     loop {\n                         match q2.pop() {\n                             Some(1) => break,"}, {"sha": "e77c4d2e5ebd4ec7ed498335eb1a3a3a67abe284", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -60,7 +60,7 @@ use sys_common::mutex as sys;\n /// let data = Arc::new(Mutex::new(0));\n ///\n /// let (tx, rx) = channel();\n-/// for _ in 0u..10 {\n+/// for _ in 0..10 {\n ///     let (data, tx) = (data.clone(), tx.clone());\n ///     thread::spawn(move || {\n ///         // The shared static can only be accessed once the lock is held.\n@@ -87,7 +87,7 @@ use sys_common::mutex as sys;\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n-/// let lock = Arc::new(Mutex::new(0u));\n+/// let lock = Arc::new(Mutex::new(0_u32));\n /// let lock2 = lock.clone();\n ///\n /// let _ = thread::spawn(move || -> () {"}, {"sha": "97f985e21e8aba0bbc5068d55db1e2e6432695ea", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -147,10 +147,10 @@ mod test {\n         static mut run: bool = false;\n \n         let (tx, rx) = channel();\n-        for _ in 0u..10 {\n+        for _ in 0..10 {\n             let tx = tx.clone();\n             thread::spawn(move|| {\n-                for _ in 0u..4 { thread::yield_now() }\n+                for _ in 0..4 { thread::yield_now() }\n                 unsafe {\n                     O.call_once(|| {\n                         assert!(!run);\n@@ -170,7 +170,7 @@ mod test {\n             assert!(run);\n         }\n \n-        for _ in 0u..10 {\n+        for _ in 0..10 {\n             rx.recv().unwrap();\n         }\n     }"}, {"sha": "cd833b17867106baa763e5ab4c1defe3fddb2a01", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -503,7 +503,7 @@ mod tests {\n \n         thread::spawn(move|| {\n             let mut lock = arc2.write().unwrap();\n-            for _ in 0u..10 {\n+            for _ in 0..10 {\n                 let tmp = *lock;\n                 *lock = -1;\n                 thread::yield_now();\n@@ -514,7 +514,7 @@ mod tests {\n \n         // Readers try to catch the writer in the act\n         let mut children = Vec::new();\n-        for _ in 0u..5 {\n+        for _ in 0..5 {\n             let arc3 = arc.clone();\n             children.push(thread::spawn(move|| {\n                 let lock = arc3.read().unwrap();"}, {"sha": "a45048be24c06a9e0eb37cba43cb7af6ab2b7017", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -63,17 +63,17 @@ impl<'a> Drop for Sentinel<'a> {\n /// use std::iter::AdditiveIterator;\n /// use std::sync::mpsc::channel;\n ///\n-/// let pool = TaskPool::new(4u);\n+/// let pool = TaskPool::new(4);\n ///\n /// let (tx, rx) = channel();\n-/// for _ in 0..8u {\n+/// for _ in 0..8 {\n ///     let tx = tx.clone();\n ///     pool.execute(move|| {\n-///         tx.send(1u).unwrap();\n+///         tx.send(1_u32).unwrap();\n ///     });\n /// }\n ///\n-/// assert_eq!(rx.iter().take(8u).sum(), 8u);\n+/// assert_eq!(rx.iter().take(8).sum(), 8);\n /// ```\n pub struct TaskPool {\n     // How the threadpool communicates with subthreads.\n@@ -142,7 +142,7 @@ mod test {\n     use super::*;\n     use sync::mpsc::channel;\n \n-    const TEST_TASKS: uint = 4u;\n+    const TEST_TASKS: uint = 4;\n \n     #[test]\n     fn test_works() {\n@@ -154,7 +154,7 @@ mod test {\n         for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n-                tx.send(1u).unwrap();\n+                tx.send(1).unwrap();\n             });\n         }\n \n@@ -183,7 +183,7 @@ mod test {\n         for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n-                tx.send(1u).unwrap();\n+                tx.send(1).unwrap();\n             });\n         }\n "}, {"sha": "5fe84cafb71e2cd6f51b4f8aec3bb5940b7130c0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -175,13 +175,13 @@ pub fn current_exe() -> IoResult<Path> {\n         let mut sz: libc::size_t = 0;\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          ptr::null_mut(), &mut sz, ptr::null_mut(),\n-                         0u as libc::size_t);\n+                         0 as libc::size_t);\n         if err != 0 { return Err(IoError::last_error()); }\n         if sz == 0 { return Err(IoError::last_error()); }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as uint);\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n-                         ptr::null_mut(), 0u as libc::size_t);\n+                         ptr::null_mut(), 0 as libc::size_t);\n         if err != 0 { return Err(IoError::last_error()); }\n         if sz == 0 { return Err(IoError::last_error()); }\n         v.set_len(sz as uint - 1); // chop off trailing NUL"}, {"sha": "f861255a00a14959e93a8cd4be43f1491661f06a", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -105,7 +105,7 @@ pub struct WSAPROTOCOL_INFO {\n     pub iSecurityScheme: libc::c_int,\n     pub dwMessageSize: libc::DWORD,\n     pub dwProviderReserved: libc::DWORD,\n-    pub szProtocol: [u16; (WSAPROTOCOL_LEN as usize) + 1us],\n+    pub szProtocol: [u16; (WSAPROTOCOL_LEN as usize) + 1],\n }\n \n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;"}, {"sha": "96ffc4daddd4eda3e9f9e6e115eed6a4914a0455", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -388,7 +388,7 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n             cmd.push('\"');\n         }\n         let argvec: Vec<char> = arg.chars().collect();\n-        for i in 0u..argvec.len() {\n+        for i in 0..argvec.len() {\n             append_char_at(cmd, &argvec, i);\n         }\n         if quote {"}, {"sha": "d649e497ef71a871f90a5ea32caa72c0bdb9f3a6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -488,7 +488,7 @@ pub fn parse(sess: &ParseSess,\n                     let match_cur = ei.match_cur;\n                     (&mut ei.matches[match_cur]).push(Rc::new(MatchedNonterminal(\n                         parse_nt(&mut rust_parser, span, &name_string))));\n-                    ei.idx += 1us;\n+                    ei.idx += 1;\n                     ei.match_cur += 1;\n                   }\n                   _ => panic!()"}, {"sha": "6c6cf186e70ae79b10a37529e5c7fd4646c0b080", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -168,7 +168,7 @@ pub fn mk_printer(out: Box<old_io::Writer+'static>, linewidth: usize) -> Printer\n     debug!(\"mk_printer {}\", linewidth);\n     let token: Vec<Token> = repeat(Token::Eof).take(n).collect();\n     let size: Vec<isize> = repeat(0).take(n).collect();\n-    let scan_stack: Vec<usize> = repeat(0us).take(n).collect();\n+    let scan_stack: Vec<usize> = repeat(0).take(n).collect();\n     Printer {\n         out: out,\n         buf_len: n,"}, {"sha": "c147e6aa056dd2a916402ab636ee7dcfadd6e268", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -185,7 +185,7 @@ pub fn parse(file: &mut old_io::Reader, longnames: bool)\n     let magic = try!(file.read_le_u16());\n     if magic != 0x011A {\n         return Err(format!(\"invalid magic number: expected {:x}, found {:x}\",\n-                           0x011Au, magic as uint));\n+                           0x011A as usize, magic as usize));\n     }\n \n     let names_bytes          = try!(file.read_le_i16()) as int;"}, {"sha": "31ce3e91a7717a1a84a324210b43c7249a0c77a9", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -939,7 +939,7 @@ mod bench {\n     #[bench]\n     pub fn sum_many_f64(b: &mut Bencher) {\n         let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n-        let v = (0us..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n+        let v = (0..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n \n         b.iter(|| {\n             v.sum();"}, {"sha": "21f8a7793dc0ca680ac61cce813eb20576c64ef5", "filename": "src/rustbook/book.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -143,9 +143,9 @@ pub fn parse_summary<R: Reader>(input: R, src: &Path) -> Result<Book, Vec<String\n             path_to_root: path_to_root,\n             children: vec!(),\n         };\n-        let level = indent.chars().map(|c| {\n+        let level = indent.chars().map(|c| -> usize {\n             match c {\n-                ' ' => 1us,\n+                ' ' => 1,\n                 '\\t' => 4,\n                 _ => unreachable!()\n             }"}, {"sha": "a35e0a13b0269b3d0f137bfe272ba2ee11fa8d4d", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -14,4 +14,4 @@ fn bad_bang(i: usize) -> ! {\n     return 7us; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "aa073d82d30722cb4604f9668b689ba29d6e65a1", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -14,4 +14,4 @@ fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function ma\n     if i < 0us { } else { panic!(); }\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "01a649ae2475d7f2cf0eecaf6ed31636ab0b5cad", "filename": "src/test/compile-fail/borrowck-for-loop-head-linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -11,11 +11,11 @@\n use std::iter::repeat;\n \n fn main() {\n-    let mut vector = vec![1us, 2];\n+    let mut vector = vec![1, 2];\n     for &x in &vector {\n         let cap = vector.capacity();\n         vector.extend(repeat(0));      //~ ERROR cannot borrow\n-        vector[1us] = 5us;   //~ ERROR cannot borrow\n+        vector[1] = 5;   //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "d0bc71edf2c4c04ec59e29c8775ef5b8b7e889ec", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -14,4 +14,4 @@ fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function ma\n     println!(\"{}\", 3);\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "825a485d529565b451ababfd61e0322dd76a1308", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -15,21 +15,21 @@\n //error-pattern: unreachable\n \n fn main() {\n-    match 5us {\n-      1us ... 10us => { }\n-      5us ... 6us => { }\n+    match 5 {\n+      1 ... 10 => { }\n+      5 ... 6 => { }\n       _ => {}\n     };\n \n-    match 5us {\n-      3us ... 6us => { }\n-      4us ... 6us => { }\n+    match 5 {\n+      3 ... 6 => { }\n+      4 ... 6 => { }\n       _ => {}\n     };\n \n-    match 5us {\n-      4us ... 6us => { }\n-      4us ... 6us => { }\n+    match 5 {\n+      4 ... 6 => { }\n+      4 ... 6 => { }\n       _ => {}\n     };\n "}, {"sha": "c3292adfa34139cfab55adc0c204c288f7ef2d07", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -13,17 +13,17 @@\n //error-pattern: mismatched types\n \n fn main() {\n-    match 5us {\n-      6us ... 1us => { }\n+    match 5 {\n+      6 ... 1 => { }\n       _ => { }\n     };\n \n     match \"wow\" {\n       \"bar\" ... \"foo\" => { }\n     };\n \n-    match 5us {\n-      'c' ... 100us => { }\n+    match 5 {\n+      'c' ... 100 => { }\n       _ => { }\n     };\n }"}, {"sha": "5bfad94867e2544c4291236bb0d11c17dcda23a9", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -14,7 +14,7 @@\n fn test() -> _ { 5 }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-fn test2() -> (_, _) { (5us, 5us) }\n+fn test2() -> (_, _) { (5, 5) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n@@ -67,7 +67,7 @@ pub fn main() {\n     fn fn_test() -> _ { 5 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-    fn fn_test2() -> (_, _) { (5us, 5us) }\n+    fn fn_test2() -> (_, _) { (5, 5) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n "}, {"sha": "2cb46cc352beca366f166325584e56cfecc78199", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -16,6 +16,6 @@ struct Foo<'a, T:'a> {\n }\n \n pub fn main() {\n-    let c: Foo<_, _> = Foo { r: &5us };\n+    let c: Foo<_, _> = Foo { r: &5 };\n     //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "ffe45c0ac46163b0ab0f01b575263a1ba2da176f", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -83,8 +83,8 @@\n pub struct Bar {\n     pub x: [i32; (3us as usize)],\n }\n-pub struct TupleBar([i32; (4us as usize)]);\n-pub enum Baz { BazVariant([i32; (5us as usize)]), }\n+pub struct TupleBar([i32; (4 as usize)]);\n+pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T { (x as T) }\n pub fn use_id() {\n     let _ ="}, {"sha": "8033b3cd1a827eca2b5ce7fb8143b419fa28345f", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -17,7 +17,7 @@\n pub fn foo(_: [i32; 3]) {}\n \n pub fn bar() {\n-    const FOO: usize = 5us - 4us;\n+    const FOO: usize = 5 - 4;\n     let _: [(); FOO] = [()];\n \n     let _ : [(); 1us] = [()];\n@@ -27,22 +27,22 @@ pub fn bar() {\n     format!(\"test\");\n }\n \n-pub type Foo = [i32; 3us];\n+pub type Foo = [i32; 3];\n \n pub struct Bar {\n-    pub x: [i32; 3us]\n+    pub x: [i32; 3]\n }\n \n-pub struct TupleBar([i32; 4us]);\n+pub struct TupleBar([i32; 4]);\n \n pub enum Baz {\n-    BazVariant([i32; 5us])\n+    BazVariant([i32; 5])\n }\n \n pub fn id<T>(x: T) -> T { x }\n \n pub fn use_id() {\n-    let _ = id::<[i32; 3us]>([1,2,3]);\n+    let _ = id::<[i32; 3]>([1,2,3]);\n }\n \n "}, {"sha": "23b7d8bbf0970521e6e2e86ed54c26e78fd5cddb", "filename": "src/test/run-make/save-analysis/SubDir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -14,7 +14,7 @@ use sub::sub2 as msalias;\n use sub::sub2;\n use std::old_io::stdio::println;\n \n-static yy: usize = 25us;\n+static yy: usize = 25;\n \n mod sub {\n     pub mod sub2 {"}, {"sha": "9fb2c6aa67ac3bf5871acea3522565e45ba61126", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -32,7 +32,7 @@ use std::num::{from_int,from_i8,from_i32};\n use std::mem::size_of;\n \n static uni: &'static str = \"Les Mis\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9rables\";\n-static yy: usize = 25us;\n+static yy: usize = 25;\n \n static bob: Option<std::vec::CowVec<'static, isize>> = None;\n "}, {"sha": "235dddefacb4d2548f9299ac8f26086ccd3da82d", "filename": "src/test/run-pass/issue-21306.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b5720a15fd7e8ae3883dcaee556b000e962b052/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21306.rs?ref=2b5720a15fd7e8ae3883dcaee556b000e962b052", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Arc;\n \n fn main() {\n-    let x = 5us;\n+    let x = 5;\n     let command = Arc::new(Box::new(|| { x*2 }));\n     assert_eq!(command(), 10);\n }"}]}