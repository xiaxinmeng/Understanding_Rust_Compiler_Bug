{"sha": "26d6081f1d1a2005be87bbe47f6fcda270cfd016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZDYwODFmMWQxYTIwMDViZTg3YmJlNDdmNmZjZGEyNzBjZmQwMTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-19T16:48:39Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-19T16:48:39Z"}, "message": "Relax promises about condition variable.\n\nThis allows for futex or thread parking based implementations in the\nfuture.", "tree": {"sha": "fdd8ca869b18710d96899d2b5be49f7841308987", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd8ca869b18710d96899d2b5be49f7841308987"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26d6081f1d1a2005be87bbe47f6fcda270cfd016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26d6081f1d1a2005be87bbe47f6fcda270cfd016", "html_url": "https://github.com/rust-lang/rust/commit/26d6081f1d1a2005be87bbe47f6fcda270cfd016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26d6081f1d1a2005be87bbe47f6fcda270cfd016/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3aae050cd7e0c9a9eb6085bd49b02f67dc1396f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3aae050cd7e0c9a9eb6085bd49b02f67dc1396f", "html_url": "https://github.com/rust-lang/rust/commit/b3aae050cd7e0c9a9eb6085bd49b02f67dc1396f"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "7e2155dae6fce6ebe2610f012f7c877107ecf398", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26d6081f1d1a2005be87bbe47f6fcda270cfd016/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d6081f1d1a2005be87bbe47f6fcda270cfd016/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=26d6081f1d1a2005be87bbe47f6fcda270cfd016", "patch": "@@ -78,13 +78,9 @@ impl WaitTimeoutResult {\n /// and a mutex. The predicate is always verified inside of the mutex before\n /// determining that a thread must block.\n ///\n-/// Functions in this module will block the current **thread** of execution and\n-/// are bindings to system-provided condition variables where possible. Note\n-/// that this module places one additional restriction over the system condition\n-/// variables: each condvar can be used with precisely one mutex at runtime. Any\n-/// attempt to use multiple mutexes on the same condition variable will result\n-/// in a runtime panic. If this is not desired, then the unsafe primitives in\n-/// `sys` do not have this restriction but may result in undefined behavior.\n+/// Functions in this module will block the current **thread** of execution.\n+/// Note that any attempt to use multiple mutexes on the same condition\n+/// variable may result in a runtime panic.\n ///\n /// # Examples\n ///\n@@ -159,10 +155,8 @@ impl Condvar {\n     ///\n     /// # Panics\n     ///\n-    /// This function will [`panic!`] if it is used with more than one mutex\n-    /// over time. Each condition variable is dynamically bound to exactly one\n-    /// mutex to ensure defined behavior across platforms. If this functionality\n-    /// is not desired, then unsafe primitives in `sys` are provided.\n+    /// This function may [`panic!`] if it is used with more than one mutex\n+    /// over time.\n     ///\n     /// [`notify_one`]: Self::notify_one\n     /// [`notify_all`]: Self::notify_all"}]}