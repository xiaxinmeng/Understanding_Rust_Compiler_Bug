{"sha": "f992099820993005ec9ac9ddf6d6646b85c55311", "node_id": "C_kwDOAAsO6NoAKGY5OTIwOTk4MjA5OTMwMDVlYzlhYzlkZGY2ZDY2NDZiODVjNTUzMTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-19T16:45:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-22T04:03:40Z"}, "message": "fix ICE when const refers to extern static", "tree": {"sha": "2cb0af82f8269d0f9b5b65699368349fc00a7ba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb0af82f8269d0f9b5b65699368349fc00a7ba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f992099820993005ec9ac9ddf6d6646b85c55311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f992099820993005ec9ac9ddf6d6646b85c55311", "html_url": "https://github.com/rust-lang/rust/commit/f992099820993005ec9ac9ddf6d6646b85c55311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f992099820993005ec9ac9ddf6d6646b85c55311/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1b2ca3ec998fc8bdbfe03f5c8faf7cc138a9ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1b2ca3ec998fc8bdbfe03f5c8faf7cc138a9ed", "html_url": "https://github.com/rust-lang/rust/commit/8d1b2ca3ec998fc8bdbfe03f5c8faf7cc138a9ed"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "d14ddaa1a6bbfb0dc82dfa54b4c3a2fc1b86da54", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f992099820993005ec9ac9ddf6d6646b85c55311/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f992099820993005ec9ac9ddf6d6646b85c55311/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f992099820993005ec9ac9ddf6d6646b85c55311", "patch": "@@ -618,7 +618,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>> {\n+    ) -> InterpResult<'tcx, Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>> {\n         if ecx.machine.tracked_alloc_ids.contains(&id) {\n             register_diagnostic(NonHaltingDiagnostic::CreatedAlloc(id));\n         }\n@@ -653,9 +653,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                 data_race: race_alloc,\n                 weak_memory: buffer_alloc,\n             },\n-            |ptr| Evaluator::tag_alloc_base_pointer(ecx, ptr),\n-        );\n-        Cow::Owned(alloc)\n+            |ptr| ecx.global_base_pointer(ptr),\n+        )?;\n+        Ok(Cow::Owned(alloc))\n     }\n \n     fn tag_alloc_base_pointer("}, {"sha": "2135806de3ed56853f233519f3ebcf28c00b3ffb", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f992099820993005ec9ac9ddf6d6646b85c55311/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f992099820993005ec9ac9ddf6d6646b85c55311/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=f992099820993005ec9ac9ddf6d6646b85c55311", "patch": "@@ -587,7 +587,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // This allocation will be deallocated when the thread dies, so it is not in read-only memory.\n             allocation.mutability = Mutability::Mut;\n             // Create a fresh allocation with this content.\n-            let new_alloc = this.allocate_raw_ptr(allocation, MiriMemoryKind::Tls.into());\n+            let new_alloc = this.allocate_raw_ptr(allocation, MiriMemoryKind::Tls.into())?;\n             this.machine.threads.set_thread_local_alloc(def_id, new_alloc);\n             Ok(new_alloc)\n         }"}, {"sha": "4c1de6ace51d38e554b4dd161d42a8b85c0c7181", "filename": "tests/fail/extern_static_in_const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f992099820993005ec9ac9ddf6d6646b85c55311/tests%2Ffail%2Fextern_static_in_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f992099820993005ec9ac9ddf6d6646b85c55311/tests%2Ffail%2Fextern_static_in_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.rs?ref=f992099820993005ec9ac9ddf6d6646b85c55311", "patch": "@@ -0,0 +1,11 @@\n+//! Even referencing an unknown `extern static` already triggers an error.\n+\n+extern \"C\" {\n+    static E: [u8; 0];\n+}\n+\n+static X: &'static [u8; 0] = unsafe { &E };\n+\n+fn main() {\n+    let _val = X; //~ ERROR is not supported by Miri\n+}"}, {"sha": "8524bb02c054f91e029e3b3faf381b49405b4e28", "filename": "tests/fail/extern_static_in_const.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f992099820993005ec9ac9ddf6d6646b85c55311/tests%2Ffail%2Fextern_static_in_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f992099820993005ec9ac9ddf6d6646b85c55311/tests%2Ffail%2Fextern_static_in_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.stderr?ref=f992099820993005ec9ac9ddf6d6646b85c55311", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n+  --> $DIR/extern_static_in_const.rs:LL:CC\n+   |\n+LL |     let _val = X;\n+   |                ^ `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/extern_static_in_const.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}