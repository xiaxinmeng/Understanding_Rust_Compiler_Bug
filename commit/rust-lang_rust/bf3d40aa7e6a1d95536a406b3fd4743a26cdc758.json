{"sha": "bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmM2Q0MGFhN2U2YTFkOTU1MzZhNDA2YjNmZDQ3NDNhMjZjZGM3NTg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-17T07:11:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-19T12:34:44Z"}, "message": "Update TypedArena tests", "tree": {"sha": "dc16b80f8c761d7bce654767b37ee10aa523b0a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc16b80f8c761d7bce654767b37ee10aa523b0a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "html_url": "https://github.com/rust-lang/rust/commit/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54eb222c40321af6ec2d8dcc961366b1f68302a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/54eb222c40321af6ec2d8dcc961366b1f68302a9", "html_url": "https://github.com/rust-lang/rust/commit/54eb222c40321af6ec2d8dcc961366b1f68302a9"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "dae05a368fa0649391f713261b31a559ddd46951", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "patch": "@@ -500,7 +500,7 @@ mod tests {\n \n     #[test]\n     pub fn test_unused() {\n-        let arena: TypedArena<Point> = TypedArena::new();\n+        let arena: TypedArena<Point> = TypedArena::default();\n         assert!(arena.chunks.borrow().is_empty());\n     }\n \n@@ -538,7 +538,7 @@ mod tests {\n             }\n         }\n \n-        let arena = Wrap(TypedArena::new());\n+        let arena = Wrap(TypedArena::default());\n \n         let result = arena.alloc_outer(|| Outer {\n             inner: arena.alloc_inner(|| Inner { value: 10 }),\n@@ -549,15 +549,15 @@ mod tests {\n \n     #[test]\n     pub fn test_copy() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(Point { x: 1, y: 2, z: 3 });\n         }\n     }\n \n     #[bench]\n     pub fn bench_copy(b: &mut Bencher) {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         b.iter(|| arena.alloc(Point { x: 1, y: 2, z: 3 }))\n     }\n \n@@ -576,7 +576,7 @@ mod tests {\n \n     #[test]\n     pub fn test_noncopy() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),\n@@ -587,15 +587,15 @@ mod tests {\n \n     #[test]\n     pub fn test_typed_arena_zero_sized() {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         for _ in 0..100000 {\n             arena.alloc(());\n         }\n     }\n \n     #[test]\n     pub fn test_typed_arena_clear() {\n-        let mut arena = TypedArena::new();\n+        let mut arena = TypedArena::default();\n         for _ in 0..10 {\n             arena.clear();\n             for _ in 0..10000 {\n@@ -620,7 +620,7 @@ mod tests {\n     fn test_typed_arena_drop_count() {\n         let counter = Cell::new(0);\n         {\n-            let arena: TypedArena<DropCounter> = TypedArena::new();\n+            let arena: TypedArena<DropCounter> = TypedArena::default();\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n                 arena.alloc(DropCounter { count: &counter });\n@@ -632,7 +632,7 @@ mod tests {\n     #[test]\n     fn test_typed_arena_drop_on_clear() {\n         let counter = Cell::new(0);\n-        let mut arena: TypedArena<DropCounter> = TypedArena::new();\n+        let mut arena: TypedArena<DropCounter> = TypedArena::default();\n         for i in 0..10 {\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n@@ -659,7 +659,7 @@ mod tests {\n     fn test_typed_arena_drop_small_count() {\n         DROP_COUNTER.with(|c| c.set(0));\n         {\n-            let arena: TypedArena<SmallDroppable> = TypedArena::new();\n+            let arena: TypedArena<SmallDroppable> = TypedArena::default();\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n                 arena.alloc(SmallDroppable);\n@@ -671,7 +671,7 @@ mod tests {\n \n     #[bench]\n     pub fn bench_noncopy(b: &mut Bencher) {\n-        let arena = TypedArena::new();\n+        let arena = TypedArena::default();\n         b.iter(|| {\n             arena.alloc(Noncopy {\n                 string: \"hello world\".to_string(),"}, {"sha": "5ab6b99eb62f95e194273f8c7f280151318cb7e6", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_cycle_checked.rs?ref=bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "patch": "@@ -122,6 +122,6 @@ fn f<'a>(arena: &'a TypedArena<C<'a>>) {\n }\n \n fn main() {\n-    let arena = TypedArena::new();\n+    let arena = TypedArena::default();\n     f(&arena);\n } //~^ ERROR `arena` does not live long enough"}, {"sha": "e2231b0814f3a75c803345c969be7e984909f68c", "filename": "src/test/compile-fail-fulldeps/dropck_tarena_unsound_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf3d40aa7e6a1d95536a406b3fd4743a26cdc758/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fdropck_tarena_unsound_drop.rs?ref=bf3d40aa7e6a1d95536a406b3fd4743a26cdc758", "patch": "@@ -47,7 +47,7 @@ impl<'a> HasId for &'a usize { fn count(&self) -> usize { 1 } }\n fn f<'a>(_arena: &'a TypedArena<C<'a>>) {}\n \n fn main() {\n-    let arena: TypedArena<C> = TypedArena::new();\n+    let arena: TypedArena<C> = TypedArena::default();\n     f(&arena);\n } //~^ ERROR `arena` does not live long enough\n "}]}