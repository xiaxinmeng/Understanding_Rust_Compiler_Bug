{"sha": "8ccaa83e90f3520ae919c206eed92121f603763f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2FhODNlOTBmMzUyMGFlOTE5YzIwNmVlZDkyMTIxZjYwMzc2M2Y=", "commit": {"author": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2018-04-21T18:23:59Z"}, "committer": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2018-04-21T18:51:35Z"}, "message": "Add more tests to print_ and write_literal\n\nAlso, move precision, width, and debug fmt tests to 'should pass'", "tree": {"sha": "fca4355b8903aaa42ae28063e22e1e169450b7c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca4355b8903aaa42ae28063e22e1e169450b7c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccaa83e90f3520ae919c206eed92121f603763f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccaa83e90f3520ae919c206eed92121f603763f", "html_url": "https://github.com/rust-lang/rust/commit/8ccaa83e90f3520ae919c206eed92121f603763f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccaa83e90f3520ae919c206eed92121f603763f/comments", "author": null, "committer": null, "parents": [{"sha": "c5b39a5917ffc0f1349b6e414fa3b874fdcf8429", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429", "html_url": "https://github.com/rust-lang/rust/commit/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "272e1c168d3eb6a2d33888ce48e96459c292668d", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ccaa83e90f3520ae919c206eed92121f603763f/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccaa83e90f3520ae919c206eed92121f603763f/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=8ccaa83e90f3520ae919c206eed92121f603763f", "patch": "@@ -9,16 +9,23 @@ fn main() {\n     let world = \"world\";\n     println!(\"Hello {}\", world);\n     println!(\"3 in hex is {:X}\", 3);\n+    println!(\"2 + 1 = {:.4}\", 3);\n+    println!(\"2 + 1 = {:5.4}\", 3);\n+    println!(\"Debug test {:?}\", \"hello, world\");\n+    println!(\"{0:8} {1:>8}\", \"hello\", \"world\");\n+    println!(\"{1:8} {0:>8}\", \"hello\", \"world\");\n+    println!(\"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{number:>width$}\", number=1, width=6);\n+    println!(\"{number:>0width$}\", number=1, width=6);\n \n     // these should throw warnings\n+    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n     println!(\"10 / 4 is {}\", 2.5);\n     println!(\"2 + 1 = {}\", 3);\n-    println!(\"2 + 1 = {:.4}\", 3);\n-    println!(\"2 + 1 = {:5.4}\", 3);\n-    println!(\"Debug test {:?}\", \"hello, world\");\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "b09640a18eba28b1dd21472f65214e616d7a3a4b", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ccaa83e90f3520ae919c206eed92121f603763f/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccaa83e90f3520ae919c206eed92121f603763f/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=8ccaa83e90f3520ae919c206eed92121f603763f", "patch": "@@ -6,22 +6,29 @@ use std::io::Write;\n fn main() {\n     let mut v = Vec::new();\n \n-    // These should be fine\n+    // these should be fine\n     write!(&mut v, \"Hello\");\n     writeln!(&mut v, \"Hello\");\n     let world = \"world\";\n     writeln!(&mut v, \"Hello {}\", world);\n     writeln!(&mut v, \"3 in hex is {:X}\", 3);\n+    writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n+    writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n+    writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n+    writeln!(&mut v, \"{0:8} {1:>8}\", \"hello\", \"world\");\n+    writeln!(&mut v, \"{1:8} {0:>8}\", \"hello\", \"world\");\n+    writeln!(&mut v, \"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{number:>width$}\", number=1, width=6);\n+    writeln!(&mut v, \"{number:>0width$}\", number=1, width=6);\n \n-    // These should throw warnings\n+    // these should throw warnings\n+    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     write!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n     writeln!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n     writeln!(&mut v, \"2 + 1 = {}\", 3);\n-    writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n-    writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n-    writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should\n@@ -30,6 +37,6 @@ fn main() {\n     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n \n     // named args shouldn't change anything either\n-    writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-    writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n+    writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n }"}]}