{"sha": "0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjN2ZjMDQ2ZDMyNzFiOGZlMzFiM2MyZDE2OGFmNGY0YWI5MGJjZGM=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T14:54:59Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T15:25:02Z"}, "message": "code refactor, modify compile-fail tests", "tree": {"sha": "430e1e4f1bc19cac0c47131dfe0c065f939b92fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/430e1e4f1bc19cac0c47131dfe0c065f939b92fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "html_url": "https://github.com/rust-lang/rust/commit/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a266a690289e972a5571fece7585613edac50bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a266a690289e972a5571fece7585613edac50bf", "html_url": "https://github.com/rust-lang/rust/commit/7a266a690289e972a5571fece7585613edac50bf"}], "stats": {"total": 148, "additions": 92, "deletions": 56}, "files": [{"sha": "a14163719067f3da44e2e3ec3aa18428b7b01562", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -839,7 +839,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 let mut db = match err.cause {\n                     MutabilityViolation => {\n-                        let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n+                        let mut db = self.cannot_assign(error_span, &descr, Origin::Ast, false);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n                             let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n                             let sp = self.tcx.hir.span(node_id);"}, {"sha": "2a74eff1cfc181f2634263d0dca7768dcdbc71db", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 57, "deletions": 42, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -1422,6 +1422,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn get_main_error_message(&self, place:&Place<'tcx>) -> String{\n+        match self.describe_place(place) {\n+            Some(name) => format!(\"immutable item `{}`\", name),\n+            None => \"immutable item\".to_owned(),\n+        }\n+    }\n+\n     /// Currently MoveData does not store entries for all places in\n     /// the input MIR. For example it will currently filter out\n     /// places that are Copy; thus we do not track places of shared\n@@ -1536,15 +1543,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n     ) -> bool {\n         debug!(\n-<<<<<<< HEAD\n             \"check_access_permissions({:?}, {:?}, {:?})\",\n             place, kind, is_local_mutation_allowed\n-=======\n-            \" ({:?}, {:?}, {:?})\",\n-            place,\n-            kind,\n-            is_local_mutation_allowed\n->>>>>>> minor changes\n         );\n         let mut error_reported = false;\n         match kind {\n@@ -1559,11 +1559,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.is_mutable(place, is_local_mutation_allowed)\n             {\n                 error_reported = true;\n-                let item_msg = match self.describe_place(place) {\n-                    Some(name) => format!(\"immutable item `{}`\", name),\n-                    None => \"immutable item\".to_owned(),\n-                };\n-\n+                let item_msg = self.get_main_error_message(place);\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n@@ -1580,42 +1576,61 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n \n-                    let err_help = match *place {\n-                        Place::Local(local) => {\n-                            let locations = self.mir.find_assignments(local);\n-                                Some((self.mir.source_info(locations[0]).span, \"consider changing this to be a mutable reference: `&mut `\"))\n-                        }\n-                        _ => {\n-                                None\n+                    let err_info = match *place_err {\n+                        Place::Projection(ref proj) => {\n+                            match proj.elem {\n+                                ProjectionElem::Deref => {\n+                                    match proj.base {\n+                                        Place::Local(local) => {\n+                                            let locations = self.mir.find_assignments(local);\n+                                            if locations.len() > 0 {\n+                                                let item_msg = if error_reported {\n+                                                    if let Some(name) =\n+                                                            self.describe_place(place_err) {\n+                                                        let var = str::replace(&name, \"*\", \"\");\n+                                                        format!(\"`&`-reference `{}`\", var)\n+                                                    } else {\n+                                                        self.get_main_error_message(place)\n+                                                    }\n+                                                } else {\n+                                                    self.get_main_error_message(place)\n+                                                };\n+                                                Some((self.mir.source_info(locations[0]).span,\n+                                                      \"consider changing this to be a \\\n+                                                       mutable reference: `&mut`\", item_msg,\n+                                                       \"cannot assign through `&`-reference\"))\n+                                            } else {\n+                                                None\n+                                            }\n+                                        }\n+                                        _ => None,\n+                                    }\n+                                }\n+                                _ => None,\n                             }\n+                        }\n+                        _ => None,\n                     };\n \n-                    let item_msg = if error_reported{\n-                        if let Some(name) = self.describe_place(place_err) {\n-                            format!(\"`&`-reference {}\", name)\n-                        }else{\n-                        match self.describe_place(place) {\n-                            Some(name) => {format!(\"immutable item `{}`\", name)}\n-                            None => {\"immutable item\".to_owned()}\n-                        } \n-                      }\n+                    if let Some((err_help_span, err_help_stmt, item_msg, sec_span)) = err_info {\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir, true);\n+                        err.span_suggestion(err_help_span, err_help_stmt, format!(\"\"));\n+                        if place != place_err {\n+                            err.span_label(span, sec_span);\n+                        }\n+                        err.emit()\n                     }else{\n-                        match self.describe_place(place) {\n-                            Some(name) => {format!(\"immutable item `{}`\", name)}\n-                            None => {\"immutable item\".to_owned()}\n+                        let item_msg_ = self.get_main_error_message(place);\n+                        let mut err = self.tcx.cannot_assign(span, &item_msg_, Origin::Mir, false);\n+                        err.span_label(span, \"cannot mutate\");\n+                        if place != place_err {\n+                            if let Some(name) = self.describe_place(place_err) {\n+                                err.note(&format!(\"Value not mutable causing this error: `{}`\",\n+                                                  name));\n+                            }\n                         }\n-                    };\n-\n-                    let mut err = self.tcx.cannot_assign(span, &item_msg, Origin::Mir);\n-\n-                    if place != place_err {\n-                        err.span_label(span, \"cannot assign through `&`-reference\");                        \n+                        err.emit();\n                     }\n-\n-                    if !err_help.is_none(){\n-                        let (err_help_span, err_help_stmt) = err_help.unwrap();\n-                        err.span_help(err_help_span, err_help_stmt);}\n-                    err.emit();\n                 }\n             }\n             Reservation(WriteKind::Move)"}, {"sha": "5da6d135f5f2f6695157da48b70cbcca8889f4e4", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -284,18 +284,25 @@ pub trait BorrowckErrors {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n-    fn cannot_assign(&self, span: Span, desc: &str, o: Origin) -> DiagnosticBuilder\n+    fn cannot_assign(&self, span: Span, desc: &str, o: Origin, is_reference:bool)\n+                     -> DiagnosticBuilder\n     {\n+        let msg = if is_reference {\n+            \"through\"\n+        } else {\n+            \"to\"\n+        };\n+\n         let err = struct_span_err!(self, span, E0594,\n-                                  \"cannot assign to {}{OGN}\",\n-                                  desc, OGN=o);\n+                                  \"cannot assign {} {}{OGN}\",\n+                                  msg, desc, OGN=o);\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n     fn cannot_assign_static(&self, span: Span, desc: &str, o: Origin)\n                             -> DiagnosticBuilder\n     {\n-        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n+        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o, false)\n     }\n \n     fn cannot_move_out_of(&self, move_from_span: Span, move_from_desc: &str, o: Origin)"}, {"sha": "7bb1214914235d0ba9f5ea8f83400e56fc9d70d3", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -1,3 +1,9 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n@@ -7,6 +13,8 @@ use rustc::mir::Mir;\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n \n+// The Visitor walks the MIR to return the assignment statements corresponding\n+// to a Local.\n pub struct FindLocalAssignmentVisitor {\n     needle: Local,\n     locations: Vec<Location>,\n@@ -19,25 +27,32 @@ impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n                    location: Location) {\n         if self.needle != *local {\n             return;\n-        }   \n+        }\n \n         match place_context {\n             PlaceContext::Store | PlaceContext::Call => {\n                 self.locations.push(location);\n             }\n-            PlaceContext::AsmOutput | PlaceContext::Drop| PlaceContext::Inspect |\n-            PlaceContext::Borrow{..}| PlaceContext::Projection(..)| PlaceContext::Copy|\n-            PlaceContext::Move| PlaceContext::StorageLive| PlaceContext::StorageDead|\n+            PlaceContext::AsmOutput |\n+            PlaceContext::Drop |\n+            PlaceContext::Inspect |\n+            PlaceContext::Borrow { .. } |\n+            PlaceContext::Projection(..) |\n+            PlaceContext::Copy |\n+            PlaceContext::Move |\n+            PlaceContext::StorageLive |\n+            PlaceContext::StorageDead |\n             PlaceContext::Validate => {\n+                // TO-DO\n                 // self.super_local(local)\n             }\n         }\n     }\n-\n+    // TO-DO\n     // fn super_local()\n }\n \n-crate trait FindAssignments { \n+crate trait FindAssignments {\n     fn find_assignments(&self, local: Local) -> Vec<Location>;                              \n     }\n     \n@@ -48,4 +63,3 @@ impl<'tcx> FindAssignments for Mir<'tcx>{\n             visitor.locations\n     }\n }\n-"}, {"sha": "f70e2b4816b4f341c910c776dd0420eb4f52a884", "filename": "src/test/compile-fail/borrowck/borrowck-issue-14498.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-issue-14498.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -27,7 +27,7 @@ fn indirect_write_to_imm_box() {\n     let y: Box<_> = box &mut x;\n     let p = &y;\n     ***p = 2; //[ast]~ ERROR cannot assign to data in a `&` reference\n-              //[mir]~^ ERROR cannot assign to immutable item `***p`\n+              //[mir]~^ ERROR cannot assign through `&`-reference `p`\n     drop(p);\n }\n "}, {"sha": "86abd114d6afada8909491ad4a1ac66b550c0d56", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-ref-index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs?ref=0c7fc046d3271b8fe31b3c2d168af4f4ab90bcdc", "patch": "@@ -70,5 +70,5 @@ fn main() {\n     };\n     s[2] = 20;\n     //[ast]~^ ERROR cannot assign to immutable indexed content\n-    //[mir]~^^ ERROR cannot assign to immutable item\n+    //[mir]~^^ ERROR cannot assign through immutable item\n }"}]}