{"sha": "a4a34ab62df777e885cac71ab171225b2cd1a812", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YTM0YWI2MmRmNzc3ZTg4NWNhYzcxYWIxNzEyMjViMmNkMWE4MTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T15:44:27Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:32:48Z"}, "message": "parser: integrate `maybe_recover_unexpected_comma` in `parse_pat_with_or`.", "tree": {"sha": "1bdcecccb86d907cbddb71321e6b6188946a0429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdcecccb86d907cbddb71321e6b6188946a0429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4a34ab62df777e885cac71ab171225b2cd1a812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a34ab62df777e885cac71ab171225b2cd1a812", "html_url": "https://github.com/rust-lang/rust/commit/a4a34ab62df777e885cac71ab171225b2cd1a812", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4a34ab62df777e885cac71ab171225b2cd1a812/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d9b85c0da1b639f8d8b3585e08759f96d1c286", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d9b85c0da1b639f8d8b3585e08759f96d1c286", "html_url": "https://github.com/rust-lang/rust/commit/21d9b85c0da1b639f8d8b3585e08759f96d1c286"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "b2a026d0071e48fdedcd27f3dc7466399eef538b", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a4a34ab62df777e885cac71ab171225b2cd1a812/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a34ab62df777e885cac71ab171225b2cd1a812/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=a4a34ab62df777e885cac71ab171225b2cd1a812", "patch": "@@ -57,12 +57,12 @@ impl<'a> Parser<'a> {\n     /// to subpatterns within such).\n     pub(super) fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n         let pat = self.parse_pat(None)?;\n-        self.maybe_recover_unexpected_comma(pat.span)?;\n+        self.maybe_recover_unexpected_comma(pat.span, true)?;\n         Ok(pat)\n     }\n \n-    fn maybe_recover_unexpected_comma(&mut self, lo: Span) -> PResult<'a, ()> {\n-        if self.token != token::Comma {\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, top_level: bool) -> PResult<'a, ()> {\n+        if !top_level || self.token != token::Comma {\n             return Ok(());\n         }\n \n@@ -109,9 +109,15 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a pattern, that may be a or-pattern (e.g. `Some(Foo | Bar)`).\n-    fn parse_pat_with_or(&mut self, expected: Expected, gate_or: bool) -> PResult<'a, P<Pat>> {\n+    fn parse_pat_with_or(\n+        &mut self,\n+        expected: Expected,\n+        gate_or: bool,\n+        top_level: bool\n+    ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n         let first_pat = self.parse_pat(expected)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, top_level)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -132,7 +138,9 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n-            pats.push(self.parse_pat(expected)?);\n+            let pat = self.parse_pat(expected)?;\n+            self.maybe_recover_unexpected_comma(pat.span, top_level)?;\n+            pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_span);\n \n@@ -162,7 +170,7 @@ impl<'a> Parser<'a> {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n                 let (pats, _) = self.parse_delim_comma_seq(\n                     token::Bracket,\n-                    |p| p.parse_pat_with_or(None, true),\n+                    |p| p.parse_pat_with_or(None, true, false),\n                 )?;\n                 PatKind::Slice(pats)\n             }\n@@ -292,7 +300,7 @@ impl<'a> Parser<'a> {\n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n         let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_with_or(None, true)\n+            p.parse_pat_with_or(None, true, false)\n         })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n@@ -536,7 +544,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None, true))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None, true, false))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -680,7 +688,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or(None, true)?;\n+            let pat = self.parse_pat_with_or(None, true, false)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}]}