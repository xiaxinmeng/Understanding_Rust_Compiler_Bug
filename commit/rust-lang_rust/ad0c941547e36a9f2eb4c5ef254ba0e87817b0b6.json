{"sha": "ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMGM5NDE1NDdlMzZhOWYyZWI0YzVlZjI1NGJhMGU4NzgxN2IwYjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-13T06:52:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-13T07:18:03Z"}, "message": "rustup for lifetime refactorings", "tree": {"sha": "35bb9d0464f0c4cff12a4b8b8e7bf7bb29fab0e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35bb9d0464f0c4cff12a4b8b8e7bf7bb29fab0e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "html_url": "https://github.com/rust-lang/rust/commit/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118274f300d60d8a450cdbc16a72101efde23b12", "url": "https://api.github.com/repos/rust-lang/rust/commits/118274f300d60d8a450cdbc16a72101efde23b12", "html_url": "https://github.com/rust-lang/rust/commit/118274f300d60d8a450cdbc16a72101efde23b12"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "b945d0b3a2651c6694d896c378a3f3c08d0560f9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -1 +1 @@\n-8e948df707ea8a3c88c65bf2ffdcb2f1cf5491be\n+d8f50ab0ea6c529c24e575279acc72093caeb679"}, {"sha": "e8714123ceb06724a4f1970287f2d07bed1627e3", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -43,8 +43,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n         compiler.session().abort_if_errors();\n         compiler.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             if std::env::args().any(|arg| arg == \"--test\") {\n-                struct Visitor<'a, 'tcx: 'a>(TyCtxt<'a, 'tcx, 'tcx>);\n-                impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n+                struct Visitor<'tcx>(TyCtxt<'tcx, 'tcx>);\n+                impl<'tcx, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n                             if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {"}, {"sha": "4c40d24f7ff5848ca92749f315c899f028b930d3", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -9,8 +9,8 @@ use rand::RngCore;\n \n use crate::*;\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n-pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn find_fn(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n@@ -930,8 +930,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n     }\n }\n \n-fn gen_random<'a, 'mir, 'tcx>(\n-    this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n+fn gen_random<'mir, 'tcx>(\n+    this: &mut MiriEvalContext<'mir, 'tcx>,\n     len: usize,\n     dest: Scalar<Tag>,\n ) -> InterpResult<'tcx>  {"}, {"sha": "62a546767e8952ac0005c92b38660625eabcffe1", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -5,9 +5,9 @@ use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n \n use crate::*;\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n \n-pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     /// Gets an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> InterpResult<'tcx, ty::Instance<'tcx>> {\n         let this = self.eval_context_ref();\n@@ -119,24 +119,24 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n \n         /// Visiting the memory covered by a `MemPlace`, being aware of\n         /// whether we are inside an `UnsafeCell` or not.\n-        struct UnsafeCellVisitor<'ecx, 'a, 'mir, 'tcx, F>\n+        struct UnsafeCellVisitor<'ecx, 'mir, 'tcx, F>\n             where F: FnMut(MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx>\n         {\n-            ecx: &'ecx MiriEvalContext<'a, 'mir, 'tcx>,\n+            ecx: &'ecx MiriEvalContext<'mir, 'tcx>,\n             unsafe_cell_action: F,\n         }\n \n-        impl<'ecx, 'a, 'mir, 'tcx, F>\n-            ValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n+        impl<'ecx, 'mir, 'tcx, F>\n+            ValueVisitor<'mir, 'tcx, Evaluator<'tcx>>\n         for\n-            UnsafeCellVisitor<'ecx, 'a, 'mir, 'tcx, F>\n+            UnsafeCellVisitor<'ecx, 'mir, 'tcx, F>\n         where\n             F: FnMut(MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx>\n         {\n             type V = MPlaceTy<'tcx, Tag>;\n \n             #[inline(always)]\n-            fn ecx(&self) -> &MiriEvalContext<'a, 'mir, 'tcx> {\n+            fn ecx(&self) -> &MiriEvalContext<'mir, 'tcx> {\n                 &self.ecx\n             }\n "}, {"sha": "cd89055b467af5d54cac723b4f392943e3544ca0", "filename": "src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -9,8 +9,8 @@ use crate::{\n     OperatorEvalContextExt\n };\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n-pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,\n         instance: ty::Instance<'tcx>,"}, {"sha": "822b173e34a0136f6244b8b2ad4af3feaf716881", "filename": "src/lib.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -71,11 +71,11 @@ pub struct MiriConfig {\n }\n \n // Used by priroda.\n-pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn create_ecx<'mir, 'tcx: 'mir>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n-) -> InterpResult<'tcx, InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>> {\n+) -> InterpResult<'tcx, InterpretCx<'mir, 'tcx, Evaluator<'tcx>>> {\n     let mut ecx = InterpretCx::new(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n@@ -211,8 +211,8 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n     Ok(ecx)\n }\n \n-pub fn eval_main<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn eval_main<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     main_id: DefId,\n     config: MiriConfig,\n ) {\n@@ -364,25 +364,25 @@ impl<'tcx> Evaluator<'tcx> {\n \n // FIXME: rustc issue <https://github.com/rust-lang/rust/issues/47131>.\n #[allow(dead_code)]\n-type MiriEvalContext<'a, 'mir, 'tcx> = InterpretCx<'a, 'mir, 'tcx, Evaluator<'tcx>>;\n+type MiriEvalContext<'mir, 'tcx> = InterpretCx<'mir, 'tcx, Evaluator<'tcx>>;\n \n // A little trait that's useful to be inherited by extension traits.\n-pub trait MiriEvalContextExt<'a, 'mir, 'tcx> {\n-    fn eval_context_ref(&self) -> &MiriEvalContext<'a, 'mir, 'tcx>;\n-    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'a, 'mir, 'tcx>;\n+pub trait MiriEvalContextExt<'mir, 'tcx> {\n+    fn eval_context_ref(&self) -> &MiriEvalContext<'mir, 'tcx>;\n+    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'mir, 'tcx>;\n }\n-impl<'a, 'mir, 'tcx> MiriEvalContextExt<'a, 'mir, 'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx> {\n     #[inline(always)]\n-    fn eval_context_ref(&self) -> &MiriEvalContext<'a, 'mir, 'tcx> {\n+    fn eval_context_ref(&self) -> &MiriEvalContext<'mir, 'tcx> {\n         self\n     }\n     #[inline(always)]\n-    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'a, 'mir, 'tcx> {\n+    fn eval_context_mut(&mut self) -> &mut MiriEvalContext<'mir, 'tcx> {\n         self\n     }\n }\n \n-impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n+impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     type FrameExtra = stacked_borrows::CallId;\n@@ -395,14 +395,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::Static);\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &InterpretCx<'a, 'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(ecx: &InterpretCx<'mir, 'tcx, Self>) -> bool {\n         ecx.machine.validate\n     }\n \n     /// Returns `Ok()` when the function was handled; fail otherwise.\n     #[inline(always)]\n     fn find_fn(\n-        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n@@ -413,7 +413,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn call_intrinsic(\n-        ecx: &mut rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut rustc_mir::interpret::InterpretCx<'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n@@ -423,7 +423,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn ptr_op(\n-        ecx: &rustc_mir::interpret::InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &rustc_mir::interpret::InterpretCx<'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n@@ -432,7 +432,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn box_alloc(\n-        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n         dest: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n         trace!(\"box_alloc for {:?}\", dest.layout.ty);\n@@ -475,7 +475,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     fn find_foreign_static(\n         def_id: DefId,\n-        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxtAt<'tcx, 'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n@@ -498,7 +498,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn before_terminator(_ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> InterpResult<'tcx>\n+    fn before_terminator(_ecx: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx>\n     {\n         // We are not interested in detecting loops.\n         Ok(())\n@@ -550,7 +550,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn retag(\n-        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n         kind: mir::RetagKind,\n         place: PlaceTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx> {\n@@ -568,14 +568,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(\n-        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n     ) -> InterpResult<'tcx, stacked_borrows::CallId> {\n         Ok(ecx.memory().extra.borrow_mut().new_call())\n     }\n \n     #[inline(always)]\n     fn stack_pop(\n-        ecx: &mut InterpretCx<'a, 'mir, 'tcx, Self>,\n+        ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n         extra: stacked_borrows::CallId,\n     ) -> InterpResult<'tcx> {\n         Ok(ecx.memory().extra.borrow_mut().end_call(extra))"}, {"sha": "336f945c7847f22212730ac50a13404cbb28e09a", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -33,7 +33,7 @@ pub trait EvalContextExt<'tcx> {\n     ) -> InterpResult<'tcx, Scalar<Tag>>;\n }\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n     fn ptr_op(\n         &self,\n         bin_op: mir::BinOp,"}, {"sha": "f7617676701c5a226622d57d21c09c56121c9f1b", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -519,8 +519,8 @@ impl AllocationExtra<Tag> for Stacks {\n \n /// Retagging/reborrowing.  There is some policy in here, such as which permissions\n /// to grant for which references, and when to add protectors.\n-impl<'a, 'mir, 'tcx> EvalContextPrivExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n-trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextPrivExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn reborrow(\n         &mut self,\n         place: MPlaceTy<'tcx, Tag>,\n@@ -599,8 +599,8 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n     }\n }\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n-pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn retag(\n         &mut self,\n         kind: RetagKind,\n@@ -643,19 +643,19 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         visitor.visit_value(place)?;\n \n         // The actual visitor.\n-        struct RetagVisitor<'ecx, 'a, 'mir, 'tcx> {\n-            ecx: &'ecx mut MiriEvalContext<'a, 'mir, 'tcx>,\n+        struct RetagVisitor<'ecx, 'mir, 'tcx> {\n+            ecx: &'ecx mut MiriEvalContext<'mir, 'tcx>,\n             kind: RetagKind,\n         }\n-        impl<'ecx, 'a, 'mir, 'tcx>\n-            MutValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n+        impl<'ecx, 'mir, 'tcx>\n+            MutValueVisitor<'mir, 'tcx, Evaluator<'tcx>>\n         for\n-            RetagVisitor<'ecx, 'a, 'mir, 'tcx>\n+            RetagVisitor<'ecx, 'mir, 'tcx>\n         {\n             type V = MPlaceTy<'tcx, Tag>;\n \n             #[inline(always)]\n-            fn ecx(&mut self) -> &mut MiriEvalContext<'a, 'mir, 'tcx> {\n+            fn ecx(&mut self) -> &mut MiriEvalContext<'mir, 'tcx> {\n                 &mut self.ecx\n             }\n "}, {"sha": "ddc301447c7e32ce85d7076d3ea9dde9e689ca6f", "filename": "src/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=ad0c941547e36a9f2eb4c5ef254ba0e87817b0b6", "patch": "@@ -129,8 +129,8 @@ impl<'tcx> TlsData<'tcx> {\n     }\n }\n \n-impl<'a, 'mir, 'tcx> EvalContextExt<'a, 'mir, 'tcx> for crate::MiriEvalContext<'a, 'mir, 'tcx> {}\n-pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a, 'mir, 'tcx> {\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let mut dtor = this.machine.tls.fetch_tls_dtor(None, &*this.tcx);"}]}