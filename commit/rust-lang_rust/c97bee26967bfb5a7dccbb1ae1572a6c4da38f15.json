{"sha": "c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5N2JlZTI2OTY3YmZiNWE3ZGNjYmIxYWUxNTcyYTZjNGRhMzhmMTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-18T21:56:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-20T03:23:23Z"}, "message": "Assorted fixes from de-modeing rustc/syntax (rusti, rustdoc, fuzzer, rustpkg)", "tree": {"sha": "149c42f300f67829f9469cbc1849f0ca7683b5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149c42f300f67829f9469cbc1849f0ca7683b5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "html_url": "https://github.com/rust-lang/rust/commit/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4a439f7fbc97cdb3b4f297ec8645e22723202f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4a439f7fbc97cdb3b4f297ec8645e22723202f", "html_url": "https://github.com/rust-lang/rust/commit/1e4a439f7fbc97cdb3b4f297ec8645e22723202f"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "917ab3e8801a1060ad0ad6b1d97b233a756d9bef", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -160,7 +160,7 @@ pub fn stash_ty_if(c: @fn(@ast::Ty, test_mode)->bool,\n \n pub struct StolenStuff {exprs: ~[ast::expr], tys: ~[ast::Ty]}\n \n-pub fn steal(crate: ast::crate, tm: test_mode) -> StolenStuff {\n+pub fn steal(crate: @ast::crate, tm: test_mode) -> StolenStuff {\n     let exprs = @mut ~[];\n     let tys = @mut ~[];\n     let v = visit::mk_simple_visitor(@visit::SimpleVisitor {\n@@ -197,7 +197,7 @@ pub fn safe_to_replace_ty(t: &ast::ty_, _tm: test_mode) -> bool {\n }\n \n // Replace the |i|th expr (in fold order) of |crate| with |newexpr|.\n-pub fn replace_expr_in_crate(crate: ast::crate, i: uint,\n+pub fn replace_expr_in_crate(crate: @ast::crate, i: uint,\n                              newexpr: ast::expr, tm: test_mode) ->\n    ast::crate {\n     let j: @mut uint = @mut 0u;\n@@ -222,13 +222,13 @@ pub fn replace_expr_in_crate(crate: ast::crate, i: uint,\n         .. *fold::default_ast_fold()\n     };\n     let af = fold::make_fold(afp);\n-    let crate2: @ast::crate = @af.fold_crate(&crate);\n+    let crate2: @ast::crate = @af.fold_crate(crate);\n     *crate2\n }\n \n \n // Replace the |i|th ty (in fold order) of |crate| with |newty|.\n-pub fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::Ty,\n+pub fn replace_ty_in_crate(crate: @ast::crate, i: uint, newty: ast::Ty,\n                            tm: test_mode) -> ast::crate {\n     let j: @mut uint = @mut 0u;\n     fn fold_ty_rep(j_: @mut uint,\n@@ -248,7 +248,7 @@ pub fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::Ty,\n         .. *fold::default_ast_fold()\n     };\n     let af = fold::make_fold(afp);\n-    let crate2: @ast::crate = @af.fold_crate(&crate);\n+    let crate2: @ast::crate = @af.fold_crate(crate);\n     *crate2\n }\n \n@@ -261,7 +261,7 @@ pub fn as_str(f: @fn(+x: @io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n \n-pub fn check_variants_of_ast(crate: ast::crate, codemap: @codemap::CodeMap,\n+pub fn check_variants_of_ast(crate: @ast::crate, codemap: @codemap::CodeMap,\n                              filename: &Path, cx: Context) {\n     let stolen = steal(crate, cx.mode);\n     let extra_exprs = do common_exprs().filtered |a| {\n@@ -275,13 +275,13 @@ pub fn check_variants_of_ast(crate: ast::crate, codemap: @codemap::CodeMap,\n }\n \n pub fn check_variants_T<T: Copy>(\n-  crate: ast::crate,\n+  crate: @ast::crate,\n   codemap: @codemap::CodeMap,\n   filename: &Path,\n   thing_label: ~str,\n   things: ~[T],\n   stringifier: @fn(@T, @syntax::parse::token::ident_interner) -> ~str,\n-  replacer: @fn(ast::crate, uint, T, test_mode) -> ast::crate,\n+  replacer: @fn(@ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: Context\n   ) {\n     error!(\"%s contains %u %s objects\", filename.to_str(),\n@@ -323,7 +323,7 @@ pub fn check_variants_T<T: Copy>(\n                                           last_part(filename.to_str()),\n                                           thing_label, i, j);\n                     let safe_to_run = !(content_is_dangerous_to_run(*str3)\n-                                        || has_raw_pointers(*crate2));\n+                                        || has_raw_pointers(crate2));\n                     check_whole_compiler(*str3, &Path(file_label),\n                                          safe_to_run);\n                   }\n@@ -480,7 +480,7 @@ pub fn parse_and_print(code: @~str) -> ~str {\n     }\n }\n \n-pub fn has_raw_pointers(c: ast::crate) -> bool {\n+pub fn has_raw_pointers(c: @ast::crate) -> bool {\n     let has_rp = @mut false;\n     fn visit_ty(flag: @mut bool, t: @ast::Ty) {\n         match t.node {\n@@ -634,7 +634,7 @@ pub fn check_variants(files: &[Path], cx: Context) {\n                        pprust::no_ann(),\n                        false)))\n         });\n-        check_variants_of_ast(*crate, sess.cm, file, cx);\n+        check_variants_of_ast(crate, sess.cm, file, cx);\n     }\n }\n "}, {"sha": "5e103d6848aa57f4ef3b3386c8122be5041eab2e", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -117,7 +117,7 @@ fn build_ctxt(sess: Session,\n     let ast = syntax::ext::expand::expand_crate(sess.parse_sess,\n                                                 copy sess.opts.cfg, ast);\n     let ast = front::test::modify_for_testing(sess, ast);\n-    let ast_map = ast_map::map_crate(sess.diagnostic(), *ast);\n+    let ast_map = ast_map::map_crate(sess.diagnostic(), ast);\n \n     Ctxt {\n         ast: ast,"}, {"sha": "455720f47ef9071d6d4aa70051d966198254376b", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -39,5 +39,5 @@ pub fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n }\n \n fn cfg(sess: session::Session, input: driver::input) -> ast::crate_cfg {\n-    driver::build_configuration(sess, @~\"rustdoc\", input)\n+    driver::build_configuration(sess, @~\"rustdoc\", &input)\n }"}, {"sha": "53912e7c947129508cb68b3d355fb52473c92331", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -93,15 +93,15 @@ fn record(repl: Repl, blk: @ast::blk, intr: @token::ident_interner) -> Repl {\n             for blk.node.stmts.each |stmt| {\n                 match stmt.node {\n                     ast::stmt_decl(*) | ast::stmt_mac(*) => {\n-                        pprust::print_stmt(pp, **stmt);\n+                        pprust::print_stmt(pp, *stmt);\n                         writer.write_line(~\"\");\n                     }\n                     ast::stmt_expr(expr, _) | ast::stmt_semi(expr, _) => {\n                         match expr.node {\n                             ast::expr_assign(*) |\n                             ast::expr_assign_op(*) |\n                             ast::expr_swap(*) => {\n-                                pprust::print_stmt(pp, **stmt);\n+                                pprust::print_stmt(pp, *stmt);\n                                 writer.write_line(~\"\");\n                             }\n                             _ => {}\n@@ -147,13 +147,13 @@ fn run(repl: Repl, input: ~str) -> Repl {\n     debug!(\"building driver configuration\");\n     let cfg = driver::build_configuration(sess,\n                                           @repl.binary,\n-                                          wrapped);\n+                                          &wrapped);\n \n-    let outputs = driver::build_output_filenames(wrapped, &None, &None, sess);\n+    let outputs = driver::build_output_filenames(&wrapped, &None, &None, sess);\n     debug!(\"calling compile_upto\");\n-    let (crate, _) = driver::compile_upto(sess, cfg, wrapped,\n-                                                 driver::cu_everything,\n-                                                 Some(outputs));\n+    let (crate, _) = driver::compile_upto(sess, cfg, &wrapped,\n+                                          driver::cu_everything,\n+                                          Some(outputs));\n \n     let mut opt = None;\n \n@@ -198,9 +198,9 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n         let input = driver::file_input(src_path);\n         let sess = driver::build_session(options, diagnostic::emit);\n         *sess.building_library = true;\n-        let cfg = driver::build_configuration(sess, @binary, input);\n+        let cfg = driver::build_configuration(sess, @binary, &input);\n         let outputs = driver::build_output_filenames(\n-            input, &None, &None, sess);\n+            &input, &None, &None, sess);\n         // If the library already exists and is newer than the source\n         // file, skip compilation and return None.\n         let mut should_compile = true;\n@@ -228,7 +228,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n         }\n         if (should_compile) {\n             io::println(fmt!(\"compiling %s...\", src_filename));\n-            driver::compile_upto(sess, cfg, input, driver::cu_everything,\n+            driver::compile_upto(sess, cfg, &input, driver::cu_everything,\n                                  Some(outputs));\n             true\n         } else { false }"}, {"sha": "705bcc824275049ecf4bace9cd247b387fbdf22b", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -37,7 +37,7 @@ use std::{getopts};\n use syntax::{ast, diagnostic};\n use util::*;\n use path_util::{dest_dir, normalize};\n-use rustc::driver::session::{lib_crate, bin_crate, unknown_crate, crate_type};\n+use rustc::driver::session::{lib_crate, bin_crate, crate_type};\n \n mod conditions;\n mod usage;\n@@ -82,8 +82,8 @@ impl PkgScript {\n         };\n         let input = driver::file_input(script);\n         let sess = driver::build_session(options, diagnostic::emit);\n-        let cfg = driver::build_configuration(sess, @binary, input);\n-        let (crate, _) = driver::compile_upto(sess, cfg, input,\n+        let cfg = driver::build_configuration(sess, @binary, &input);\n+        let (crate, _) = driver::compile_upto(sess, cfg, &input,\n                                               driver::cu_parse, None);\n         let work_dir = dest_dir(id);\n \n@@ -112,7 +112,7 @@ impl PkgScript {\n         // Collect together any user-defined commands in the package script\n         let crate = util::ready_crate(sess, self.crate);\n         debug!(\"Building output filenames with script name %s\",\n-               driver::source_name(self.input));\n+               driver::source_name(&self.input));\n         match filesearch::get_rustpkg_sysroot() {\n             Ok(r) => {\n                 let root = r.pop().pop().pop().pop(); // :-\\"}, {"sha": "2ab1ea1e7d2ea4ec4e25c7b9070c06237225649d", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "patch": "@@ -12,7 +12,7 @@ use core::*;\n use core::cmp::Ord;\n use core::hash::Streaming;\n use rustc::driver::{driver, session};\n-use rustc::driver::session::{lib_crate, bin_crate, unknown_crate};\n+use rustc::driver::session::{lib_crate, unknown_crate};\n use rustc::metadata::filesearch;\n use std::getopts::groups::getopts;\n use std::semver;\n@@ -25,7 +25,7 @@ use syntax::{ast, attr, codemap, diagnostic, fold};\n use syntax::ast::{meta_name_value, meta_list, attribute, crate_};\n use syntax::attr::{mk_attr};\n use rustc::back::link::output_type_exe;\n-use rustc::driver::session::{lib_crate, bin_crate, unknown_crate, crate_type};\n+use rustc::driver::session::{lib_crate, unknown_crate, crate_type};\n \n pub type ExitCode = int; // For now\n \n@@ -516,9 +516,9 @@ pub fn compile_crate_from_input(input: driver::input,\n                                 binary: ~str,\n                                 what: driver::compile_upto) -> @ast::crate {\n     debug!(\"Calling build_output_filenames with %?\", build_dir_opt);\n-    let outputs = driver::build_output_filenames(input, &build_dir_opt, &Some(out_file), sess);\n+    let outputs = driver::build_output_filenames(&input, &build_dir_opt, &Some(out_file), sess);\n     debug!(\"Outputs are %? and output type = %?\", outputs, sess.opts.output_type);\n-    let cfg = driver::build_configuration(sess, @binary, input);\n+    let cfg = driver::build_configuration(sess, @binary, &input);\n     match crate_opt {\n         Some(c) => {\n             debug!(\"Calling compile_rest, outputs = %?\", outputs);\n@@ -528,7 +528,7 @@ pub fn compile_crate_from_input(input: driver::input,\n         }\n         None => {\n             debug!(\"Calling compile_upto, outputs = %?\", outputs);\n-            let (crate, _) = driver::compile_upto(sess, cfg, input,\n+            let (crate, _) = driver::compile_upto(sess, cfg, &input,\n                                                   driver::cu_parse, Some(outputs));\n \n             // Inject the inferred link_meta info if it's not already there"}]}