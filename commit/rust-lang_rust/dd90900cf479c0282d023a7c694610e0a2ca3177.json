{"sha": "dd90900cf479c0282d023a7c694610e0a2ca3177", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTA5MDBjZjQ3OWMwMjgyZDAyM2E3YzY5NDYxMGUwYTJjYTMxNzc=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-15T17:53:50Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-21T09:15:07Z"}, "message": "Resolve type aliases to the type they point to in intra-doc links", "tree": {"sha": "676883b5b90a5ea4a5b1aa5894397933d412796c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676883b5b90a5ea4a5b1aa5894397933d412796c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd90900cf479c0282d023a7c694610e0a2ca3177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd90900cf479c0282d023a7c694610e0a2ca3177", "html_url": "https://github.com/rust-lang/rust/commit/dd90900cf479c0282d023a7c694610e0a2ca3177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd90900cf479c0282d023a7c694610e0a2ca3177/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "304441960e7058fe97f09ef00b20739b4dc56d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/304441960e7058fe97f09ef00b20739b4dc56d11", "html_url": "https://github.com/rust-lang/rust/commit/304441960e7058fe97f09ef00b20739b4dc56d11"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "c6f7e3b53a894fdb6e0a53c21c8cdf8fec9ecf02", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dd90900cf479c0282d023a7c694610e0a2ca3177/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd90900cf479c0282d023a7c694610e0a2ca3177/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=dd90900cf479c0282d023a7c694610e0a2ca3177", "patch": "@@ -544,6 +544,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })\n     }\n \n+    /// Convert a DefId to a Res, where possible.\n+    ///\n+    /// This is used for resolving type aliases.\n+    fn def_id_to_res(&self, ty_id: DefId) -> Option<Res> {\n+        use PrimitiveType::*;\n+        Some(match *self.cx.tcx.type_of(ty_id).kind() {\n+            ty::Bool => Res::Primitive(Bool),\n+            ty::Char => Res::Primitive(Char),\n+            ty::Int(ity) => Res::Primitive(ity.into()),\n+            ty::Uint(uty) => Res::Primitive(uty.into()),\n+            ty::Float(fty) => Res::Primitive(fty.into()),\n+            ty::Str => Res::Primitive(Str),\n+            ty::Tuple(ref tys) if tys.is_empty() => Res::Primitive(Unit),\n+            ty::Tuple(_) => Res::Primitive(Tuple),\n+            ty::Array(..) => Res::Primitive(Array),\n+            ty::Slice(_) => Res::Primitive(Slice),\n+            ty::RawPtr(_) => Res::Primitive(RawPointer),\n+            ty::Ref(..) => Res::Primitive(Reference),\n+            ty::FnDef(..) => panic!(\"type alias to a function definition\"),\n+            ty::FnPtr(_) => Res::Primitive(Fn),\n+            ty::Never => Res::Primitive(Never),\n+            ty::Adt(&ty::AdtDef { did, .. }, _) | ty::Foreign(did) => {\n+                Res::Def(self.cx.tcx.def_kind(did), did)\n+            }\n+            ty::Projection(_)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Opaque(..)\n+            | ty::Dynamic(..)\n+            | ty::Param(_)\n+            | ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_)\n+            | ty::Error(_) => return None,\n+        })\n+    }\n+\n     /// Returns:\n     /// - None if no associated item was found\n     /// - Some((_, _, Some(_))) if an item was found and should go through a side channel\n@@ -559,12 +597,15 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         match root_res {\n             Res::Primitive(prim) => self.resolve_primitive_associated_item(prim, ns, item_name),\n+            Res::Def(DefKind::TyAlias, did) => {\n+                // Resolve the link on the type the alias points to.\n+                // FIXME: if the associated item is defined directly on the type alias,\n+                // it will show up on its documentation page, we should link there instead.\n+                let res = self.def_id_to_res(did)?;\n+                self.resolve_associated_item(res, item_name, ns, module_id)\n+            }\n             Res::Def(\n-                DefKind::Struct\n-                | DefKind::Union\n-                | DefKind::Enum\n-                | DefKind::TyAlias\n-                | DefKind::ForeignTy,\n+                DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::ForeignTy,\n                 did,\n             ) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);"}, {"sha": "f3609ccd0a1418e19fde32809d7e13216a03e1cb", "filename": "src/test/rustdoc/intra-doc/type-alias.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd90900cf479c0282d023a7c694610e0a2ca3177/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd90900cf479c0282d023a7c694610e0a2ca3177/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs?ref=dd90900cf479c0282d023a7c694610e0a2ca3177", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #86120.\n+\n+#![deny(broken_intra_doc_links)]\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+/// You should really try [`Self::bar`]!\n+pub type Bar = Foo;\n+\n+impl Bar {\n+    pub fn bar() {}\n+}\n+\n+/// The minimum is [`Self::MIN`].\n+pub type Int = i32;\n+\n+// @has foo/type.Bar.html '//a[@href=\"struct.Foo.html#method.bar\"]' 'Self::bar'\n+// @has foo/type.Int.html '//a[@href=\"{{channel}}/std/primitive.i32.html#associatedconstant.MIN\"]' 'Self::MIN'"}]}