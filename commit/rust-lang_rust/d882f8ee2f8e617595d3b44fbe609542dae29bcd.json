{"sha": "d882f8ee2f8e617595d3b44fbe609542dae29bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODJmOGVlMmY4ZTYxNzU5NWQzYjQ0ZmJlNjA5NTQyZGFlMjliY2Q=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-20T19:04:12Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-20T19:04:12Z"}, "message": "Fuzzer: add common_exprs, but comment out its use for now. Update lists of known bugs.", "tree": {"sha": "d8ec0ff6662303cd15d0960e8ff4fb7c3ca37433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8ec0ff6662303cd15d0960e8ff4fb7c3ca37433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d882f8ee2f8e617595d3b44fbe609542dae29bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d882f8ee2f8e617595d3b44fbe609542dae29bcd", "html_url": "https://github.com/rust-lang/rust/commit/d882f8ee2f8e617595d3b44fbe609542dae29bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d882f8ee2f8e617595d3b44fbe609542dae29bcd/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f57dfbea59273a0bad49c1d9aadb165459a275", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f57dfbea59273a0bad49c1d9aadb165459a275", "html_url": "https://github.com/rust-lang/rust/commit/13f57dfbea59273a0bad49c1d9aadb165459a275"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "0c5fc8e287c982f26be11fec0a5301c448dfc7e1", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d882f8ee2f8e617595d3b44fbe609542dae29bcd/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d882f8ee2f8e617595d3b44fbe609542dae29bcd/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=d882f8ee2f8e617595d3b44fbe609542dae29bcd", "patch": "@@ -37,6 +37,28 @@ fn find_rust_files(&files: [str], path: str) {\n     }\n }\n \n+\n+fn common_exprs() -> [ast::expr] {\n+    fn dse(e: ast::expr_) -> ast::expr {\n+        { id: 0, node: e, span: ast_util::dummy_sp() }\n+    }\n+\n+    fn dsl(l: ast::lit_) -> ast::lit {\n+        { node: l, span: ast_util::dummy_sp() }\n+    }\n+\n+    [dse(ast::expr_break),\n+     dse(ast::expr_cont),\n+     dse(ast::expr_fail(option::none)),\n+     dse(ast::expr_fail(option::some(@dse(ast::expr_lit(@dsl(ast::lit_str(\"boo\"))))))),\n+     dse(ast::expr_ret(option::none)),\n+     dse(ast::expr_put(option::none)),\n+     dse(ast::expr_lit(@dsl(ast::lit_nil))),\n+     dse(ast::expr_lit(@dsl(ast::lit_bool(false)))),\n+     dse(ast::expr_lit(@dsl(ast::lit_bool(true))))\n+    ]\n+}\n+\n fn safe_to_steal_expr(e: @ast::expr) -> bool {\n     alt e.node {\n       /*\n@@ -189,7 +211,7 @@ fn as_str(f: fn(io::writer)) -> str {\n fn check_variants_of_ast(crate: ast::crate, codemap: codemap::codemap,\n                          filename: str) {\n     let stolen = steal(crate);\n-    check_variants_T(crate, codemap, filename, \"expr\", stolen.exprs, pprust::expr_to_str, replace_expr_in_crate);\n+    check_variants_T(crate, codemap, filename, \"expr\", /*common_exprs() +*/ stolen.exprs, pprust::expr_to_str, replace_expr_in_crate);\n     check_variants_T(crate, codemap, filename, \"ty\", stolen.tys, pprust::ty_to_str, replace_ty_in_crate);\n }\n \n@@ -207,9 +229,9 @@ fn check_variants_T<T>(\n     let L = vec::len(things);\n \n     if L < 100u {\n-        for each i: uint in under(uint::min(L, 10u)) {\n-            log_err \"Replacing... \" + stringifier(@things[i]);\n-            for each j: uint in under(uint::min(L, 10u)) {\n+        for each i: uint in under(uint::min(L, 20u)) {\n+            log_err \"Replacing... #\" + uint::str(i);\n+            for each j: uint in under(uint::min(L, 30u)) {\n                 log_err \"With... \" + stringifier(@things[j]);\n                 let crate2 = @replacer(crate, i, things[j]);\n                 // It would be best to test the *crate* for stability, but testing the\n@@ -283,8 +305,12 @@ fn check_running(exe_filename: str) -> happiness {\n         log_err \"comb comb comb: \" + comb;\n     }\n \n-    if contains(comb, \"Assertion failed:\") {\n+    if contains(comb, \"Assertion failed: (0), function alloc, file ../src/rt/rust_obstack.cpp\") {\n+        known_bug(\"https://github.com/graydon/rust/issues/32 / https://github.com/graydon/rust/issues/445\")\n+    } else if contains(comb, \"Assertion failed:\") {\n         failed(\"C++ assertion failure\")\n+    } else if contains(comb, \"src/rt/\") {\n+        failed(\"Mentioned src/rt/\")\n     } else if contains(comb, \"malloc\") {\n         failed(\"Mentioned malloc\")\n     } else if contains(comb, \"leaked memory in rust main loop\") {\n@@ -295,7 +321,8 @@ fn check_running(exe_filename: str) -> happiness {\n             100       { cleanly_rejected(\"running: explicit fail\") }\n             101 | 247 { cleanly_rejected(\"running: timed out\") }\n             245 | 246 { known_bug(\"https://github.com/graydon/rust/issues/32 ??\") }\n-            rc        { failed(\"exited with status \" + int::str(rc)) }\n+            136 | 248 { known_bug(\"SIGFPE - https://github.com/graydon/rust/issues/944\") }\n+            rc        { failed(\"Rust program ran but exited with status \" + int::str(rc)) }\n         }\n     }\n }\n@@ -312,11 +339,17 @@ fn check_compiling(filename: str) -> happiness {\n     //log_err #fmt(\"Status: %d\", p.status);\n     if p.err != \"\" {\n         if contains(p.err, \"May only branch on boolean predicates\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/892\")\n+            known_bug(\"https://github.com/graydon/rust/issues/892 or https://github.com/graydon/rust/issues/943\")\n+        } else if contains(p.err, \"All operands to PHI node must be the same type as the PHI node!\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/943\")\n         } else if contains(p.err, \"(S->getType()->isPointerTy() && \\\"Invalid cast\\\")\") {\n             known_bug(\"https://github.com/graydon/rust/issues/895\")\n+        } else if contains(p.out, \"Ptr must be a pointer to Val type\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/897\")\n         } else if contains(p.err, \"(castIsValid(op, S, Ty) && \\\"Invalid cast!\\\"), function Create\") {\n             known_bug(\"https://github.com/graydon/rust/issues/901\")\n+        } else if contains(p.err, \"Invoking a function with a bad signature!\") {\n+            known_bug(\"https://github.com/graydon/rust/issues/946\")\n         } else {\n             log_err \"Stderr: \" + p.err;\n             failed(\"Unfamiliar error message\")\n@@ -332,8 +365,6 @@ fn check_compiling(filename: str) -> happiness {\n         known_bug(\"https://github.com/graydon/rust/issues/924\")\n     } else if contains(p.out, \"Assertion failed: (S->getType()->isPointerTy() && \\\"Invalid cast\\\")\") {\n         known_bug(\"https://github.com/graydon/rust/issues/935\")\n-    } else if contains(p.out, \"Ptr must be a pointer to Val type\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/897\")\n     } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n         log_err \"Stdout: \" + p.out;\n         failed(\"Looks like an llvm assertion failure\")\n@@ -393,7 +424,9 @@ fn content_is_dangerous_to_run(code: str) -> bool {\n     let dangerous_patterns =\n         [\"import\", // espeically fs, run\n          \"native\",\n-         \"unsafe\"];\n+         \"unsafe\",\n+         \"with\", // tstate hang: https://github.com/graydon/rust/issues/948\n+         \"log\"]; // python --> rust pipe deadlock?\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n     ret false;"}]}