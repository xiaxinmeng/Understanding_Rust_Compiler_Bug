{"sha": "b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050", "node_id": "C_kwDOAAsO6NoAKGI1ZTc2M2FjZTNjNmU5ZTVkMjNjZmUyMDFhN2FlY2ZhNWY4YmQwNTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T13:56:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T13:56:50Z"}, "message": "Rollup merge of #95660 - yaahc:panic-docs-update, r=Dylan-DPC\n\nUpdate panic docs to make it clearer when to use panic vs Result\n\nThis is based on a question that came up in one of my [error handling office hours](https://twitter.com/yaahc_/status/1506376624509374467?s=20&t=Sp-cEjrx5kpMdNsAGPOo9w) meetings. I had a user who was fairly familiar with error type design, thiserror and anyhow, and rust in general, but who was still confused about when to use panics vs when to use Result and `Error`.\n\nThis will also be cross referenced in an error handling FAQ that I will be creating in the https://github.com/rust-lang/project-error-handling repo shortly.", "tree": {"sha": "e3e321c78b06d470dd3ba8dd0d104d4f2d565d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3e321c78b06d470dd3ba8dd0d104d4f2d565d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTEqjCRBK7hj4Ov3rIwAAf0sIABgMNk9lMszOanP0bL5mqrfk\n8juOc3NfV/DesMYYN4cMpdrNDR9emXbpNQQgKQ3k/EYAdOPV4Z1TuNoj7KhQjUAq\n+PKzn/7xpq/hLUuFH1ZhVMNsYUL6cIXo8APe2DZMzMWq5T0XnYu+GNFQ+JgWr/F1\nOsJ4ZI6tdD0OXbZcgQMe34DCuxWIE0KPIxaTrqzwTwkeJnPwZECbI8MAA3aU8Sbk\ncDK91DUPaUPJtjC4FmYoFy2Wl09QBh7i694YhHo6h7rLH1whrcXEw5FK0tWtEU76\nyBclPWOoLK6ugg0pSvpmE835P3J0kYi7qj3zOvgqJ7V3tdNRVhY4PgG0dsuaZjE=\n=hW5D\n-----END PGP SIGNATURE-----\n", "payload": "tree e3e321c78b06d470dd3ba8dd0d104d4f2d565d47\nparent a1e7f6db510299f58ff91a2a944655bd9d6419a0\nparent ccb704c73d5800048c16a836a906a12d909f962f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649167010 +0200\ncommitter GitHub <noreply@github.com> 1649167010 +0200\n\nRollup merge of #95660 - yaahc:panic-docs-update, r=Dylan-DPC\n\nUpdate panic docs to make it clearer when to use panic vs Result\n\nThis is based on a question that came up in one of my [error handling office hours](https://twitter.com/yaahc_/status/1506376624509374467?s=20&t=Sp-cEjrx5kpMdNsAGPOo9w) meetings. I had a user who was fairly familiar with error type design, thiserror and anyhow, and rust in general, but who was still confused about when to use panics vs when to use Result and `Error`.\n\nThis will also be cross referenced in an error handling FAQ that I will be creating in the https://github.com/rust-lang/project-error-handling repo shortly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050", "html_url": "https://github.com/rust-lang/rust/commit/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e7f6db510299f58ff91a2a944655bd9d6419a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e7f6db510299f58ff91a2a944655bd9d6419a0", "html_url": "https://github.com/rust-lang/rust/commit/a1e7f6db510299f58ff91a2a944655bd9d6419a0"}, {"sha": "ccb704c73d5800048c16a836a906a12d909f962f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb704c73d5800048c16a836a906a12d909f962f", "html_url": "https://github.com/rust-lang/rust/commit/ccb704c73d5800048c16a836a906a12d909f962f"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "d8206e789311481c97cf8c6f3339bd02759db883", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=b5e763ace3c6e9e5d23cfe201a7aecfa5f8bd050", "patch": "@@ -1,8 +1,7 @@\n Panics the current thread.\n \n This allows a program to terminate immediately and provide feedback\n-to the caller of the program. `panic!` should be used when a program reaches\n-an unrecoverable state.\n+to the caller of the program.\n \n This macro is the perfect way to assert conditions in example code and in\n tests. `panic!` is closely tied with the `unwrap` method of both\n@@ -21,13 +20,25 @@ Inside the hook a panic can be accessed as a `&dyn Any + Send`,\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n \n-[`Result`] enum is often a better solution for recovering from errors than\n-using the `panic!` macro. This macro should be used to avoid proceeding using\n-incorrect values, such as from external sources. Detailed information about\n-error handling is found in the [book].\n-\n See also the macro [`compile_error!`], for raising errors during compilation.\n \n+# When to use `panic!` vs `Result`\n+\n+The Rust model of error handling groups errors into two major categories:\n+recoverable and unrecoverable errors. For a recoverable error, such as a file\n+not found error, it\u2019s reasonable to report the problem to the user and retry\n+the operation. Unrecoverable errors are always symptoms of bugs, like trying to\n+access a location beyond the end of an array.\n+\n+The Rust language and standard library provides `Result` and `panic!` as parts\n+of two complementary systems for representing, reporting, propagating, reacting\n+to, and discarding errors for in these two categories.\n+\n+The `panic!` macro is provided to represent unrecoverable errors, whereas the\n+`Result` enum is provided to represent recoverable errors. For more detailed\n+information about error handling check out the [book] or the [`std::result`]\n+module docs.\n+\n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n [`std::panic::set_hook()`]: ../std/panic/fn.set_hook.html\n@@ -36,6 +47,7 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n [`Any`]: crate::any::Any\n [`format!`]: ../std/macro.format.html\n [book]: ../book/ch09-00-error-handling.html\n+[`std::result`]: ../std/result/index.html\n \n # Current implementation\n "}]}