{"sha": "e331ae57df08e6eab346a9caab3fc354ce61c5d5", "node_id": "C_kwDOAAsO6NoAKGUzMzFhZTU3ZGYwOGU2ZWFiMzQ2YTljYWFiM2ZjMzU0Y2U2MWM1ZDU", "commit": {"author": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-18T17:43:01Z"}, "committer": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-21T16:11:59Z"}, "message": "Migrate forbidden_default and *_without_body", "tree": {"sha": "8f8ba7a0b369bb46d5913ec333f27c7f28788f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f8ba7a0b369bb46d5913ec333f27c7f28788f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e331ae57df08e6eab346a9caab3fc354ce61c5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e331ae57df08e6eab346a9caab3fc354ce61c5d5", "html_url": "https://github.com/rust-lang/rust/commit/e331ae57df08e6eab346a9caab3fc354ce61c5d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e331ae57df08e6eab346a9caab3fc354ce61c5d5/comments", "author": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed8aac3caa9c943e600392e49702c7215428d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed8aac3caa9c943e600392e49702c7215428d23", "html_url": "https://github.com/rust-lang/rust/commit/8ed8aac3caa9c943e600392e49702c7215428d23"}], "stats": {"total": 261, "additions": 185, "deletions": 76}, "files": [{"sha": "b337e5328c5df6af4c75ae61acfd3739ca616360", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 54, "deletions": 74, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e331ae57df08e6eab346a9caab3fc354ce61c5d5", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -390,47 +390,20 @@ impl<'a> AstValidator<'a> {\n     fn check_defaultness(&self, span: Span, defaultness: Defaultness) {\n         if let Defaultness::Default(def_span) = defaultness {\n             let span = self.session.source_map().guess_head_span(span);\n-            self.err_handler()\n-                .struct_span_err(span, \"`default` is only allowed on items in trait impls\")\n-                .span_label(def_span, \"`default` because of this\")\n-                .emit();\n+            self.session.emit_err(ForbiddenDefault { span, def_span });\n         }\n     }\n \n-    fn error_item_without_body(&self, sp: Span, ctx: &str, msg: &str, sugg: &str) {\n-        self.error_item_without_body_with_help(sp, ctx, msg, sugg, |_| ());\n-    }\n-\n-    fn error_item_without_body_with_help(\n-        &self,\n-        sp: Span,\n-        ctx: &str,\n-        msg: &str,\n-        sugg: &str,\n-        help: impl FnOnce(&mut Diagnostic),\n-    ) {\n+    /// If `sp` ends with a semicolon, returns it as a `Span`\n+    /// Otherwise, returns `sp.shrink_to_hi()`\n+    fn ending_semi_or_hi(&self, sp: Span) -> Span {\n         let source_map = self.session.source_map();\n         let end = source_map.end_point(sp);\n-        let replace_span = if source_map.span_to_snippet(end).map(|s| s == \";\").unwrap_or(false) {\n+\n+        if source_map.span_to_snippet(end).map(|s| s == \";\").unwrap_or(false) {\n             end\n         } else {\n             sp.shrink_to_hi()\n-        };\n-        let mut err = self.err_handler().struct_span_err(sp, msg);\n-        err.span_suggestion(\n-            replace_span,\n-            &format!(\"provide a definition for the {}\", ctx),\n-            sugg,\n-            Applicability::HasPlaceholders,\n-        );\n-        help(&mut err);\n-        err.emit();\n-    }\n-\n-    fn check_impl_item_provided<T>(&self, sp: Span, body: &Option<T>, ctx: &str, sugg: &str) {\n-        if body.is_none() {\n-            let msg = format!(\"associated {} in `impl` without body\", ctx);\n-            self.error_item_without_body(sp, ctx, &msg, sugg);\n         }\n     }\n \n@@ -1123,37 +1096,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.check_defaultness(item.span, defaultness);\n \n                 if body.is_none() {\n-                    let msg = \"free function without a body\";\n-                    let ext = sig.header.ext;\n-\n-                    let f = |e: &mut Diagnostic| {\n-                        if let Extern::Implicit(start_span) | Extern::Explicit(_, start_span) = &ext\n-                        {\n-                            let start_suggestion = if let Extern::Explicit(abi, _) = ext {\n-                                format!(\"extern \\\"{}\\\" {{\", abi.symbol_unescaped)\n-                            } else {\n-                                \"extern {\".to_owned()\n-                            };\n-\n-                            let end_suggestion = \" }\".to_owned();\n-                            let end_span = item.span.shrink_to_hi();\n-\n-                            e\n-                            .multipart_suggestion(\n-                                \"if you meant to declare an externally defined function, use an `extern` block\",\n-                                vec![(*start_span, start_suggestion), (end_span, end_suggestion)],\n-                                Applicability::MaybeIncorrect,\n-                             );\n-                        }\n-                    };\n-\n-                    self.error_item_without_body_with_help(\n-                        item.span,\n-                        \"function\",\n-                        msg,\n-                        \" { <body> }\",\n-                        f,\n-                    );\n+                    self.session.emit_err(FnWithoutBody {\n+                        span: item.span,\n+                        replace_span: self.ending_semi_or_hi(item.span),\n+                        extern_block_suggestion: match sig.header.ext {\n+                            Extern::None => None,\n+                            Extern::Implicit(start_span) => Some(ExternBlockSuggestion {\n+                                start_span,\n+                                end_span: item.span.shrink_to_hi(),\n+                                abi: None,\n+                            }),\n+                            Extern::Explicit(abi, start_span) => Some(ExternBlockSuggestion {\n+                                start_span,\n+                                end_span: item.span.shrink_to_hi(),\n+                                abi: Some(abi.symbol_unescaped),\n+                            }),\n+                        },\n+                    });\n                 }\n \n                 self.visit_vis(&item.vis);\n@@ -1259,12 +1218,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Const(def, .., None) => {\n                 self.check_defaultness(item.span, def);\n-                let msg = \"free constant item without body\";\n-                self.error_item_without_body(item.span, \"constant\", msg, \" = <expr>;\");\n+                self.session.emit_err(ConstWithoutBody {\n+                    span: item.span,\n+                    replace_span: self.ending_semi_or_hi(item.span),\n+                });\n             }\n             ItemKind::Static(.., None) => {\n-                let msg = \"free static item without body\";\n-                self.error_item_without_body(item.span, \"static\", msg, \" = <expr>;\");\n+                self.session.emit_err(StaticWithoutBody {\n+                    span: item.span,\n+                    replace_span: self.ending_semi_or_hi(item.span),\n+                });\n             }\n             ItemKind::TyAlias(box TyAlias {\n                 defaultness,\n@@ -1275,8 +1238,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }) => {\n                 self.check_defaultness(item.span, defaultness);\n                 if ty.is_none() {\n-                    let msg = \"free type alias without body\";\n-                    self.error_item_without_body(item.span, \"type\", msg, \" = <type>;\");\n+                    self.session.emit_err(TyAliasWithoutBody {\n+                        span: item.span,\n+                        replace_span: self.ending_semi_or_hi(item.span),\n+                    });\n                 }\n                 self.check_type_no_bounds(bounds, \"this context\");\n                 if where_clauses.1.0 {\n@@ -1580,10 +1545,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         if ctxt == AssocCtxt::Impl {\n             match &item.kind {\n                 AssocItemKind::Const(_, _, body) => {\n-                    self.check_impl_item_provided(item.span, body, \"constant\", \" = <expr>;\");\n+                    if body.is_none() {\n+                        self.session.emit_err(AssocConstWithoutBody {\n+                            span: item.span,\n+                            replace_span: self.ending_semi_or_hi(item.span),\n+                        });\n+                    }\n                 }\n                 AssocItemKind::Fn(box Fn { body, .. }) => {\n-                    self.check_impl_item_provided(item.span, body, \"function\", \" { <body> }\");\n+                    if body.is_none() {\n+                        self.session.emit_err(AssocFnWithoutBody {\n+                            span: item.span,\n+                            replace_span: self.ending_semi_or_hi(item.span),\n+                        });\n+                    }\n                 }\n                 AssocItemKind::TyAlias(box TyAlias {\n                     generics,\n@@ -1593,7 +1568,12 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     ty,\n                     ..\n                 }) => {\n-                    self.check_impl_item_provided(item.span, ty, \"type\", \" = <type>;\");\n+                    if ty.is_none() {\n+                        self.session.emit_err(AssocTypeWithoutBody {\n+                            span: item.span,\n+                            replace_span: self.ending_semi_or_hi(item.span),\n+                        });\n+                    }\n                     self.check_type_no_bounds(bounds, \"`impl`s\");\n                     if ty.is_some() {\n                         self.check_gat_where("}, {"sha": "1ac4dac10e2b30710beebb16ce715804e1be95a3", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 98, "deletions": 2, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=e331ae57df08e6eab346a9caab3fc354ce61c5d5", "patch": "@@ -1,7 +1,6 @@\n //! Errors emitted by ast_passes.\n \n-use rustc_errors::fluent;\n-use rustc_errors::{AddSubdiagnostic, Diagnostic};\n+use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -150,3 +149,100 @@ pub struct FnParamForbiddenSelf {\n     #[label]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::forbidden_default)]\n+pub struct ForbiddenDefault {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub def_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::assoc_const_without_body)]\n+pub struct AssocConstWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" = <expr>;\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::assoc_fn_without_body)]\n+pub struct AssocFnWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" {{ <body> }}\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::assoc_type_without_body)]\n+pub struct AssocTypeWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" = <type>;\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::const_without_body)]\n+pub struct ConstWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" = <expr>;\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::static_without_body)]\n+pub struct StaticWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" = <expr>;\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::ty_alias_without_body)]\n+pub struct TyAliasWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" = <type>;\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::fn_without_body)]\n+pub struct FnWithoutBody {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(code = \" {{ <body> }}\", applicability = \"has-placeholders\")]\n+    pub replace_span: Span,\n+    #[subdiagnostic]\n+    pub extern_block_suggestion: Option<ExternBlockSuggestion>,\n+}\n+\n+pub struct ExternBlockSuggestion {\n+    pub start_span: Span,\n+    pub end_span: Span,\n+    pub abi: Option<Symbol>,\n+}\n+\n+impl AddSubdiagnostic for ExternBlockSuggestion {\n+    fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n+        let start_suggestion = if let Some(abi) = self.abi {\n+            format!(\"extern \\\"{}\\\" {{\", abi)\n+        } else {\n+            \"extern {\".to_owned()\n+        };\n+        let end_suggestion = \" }\".to_owned();\n+\n+        diag.multipart_suggestion(\n+            fluent::ast_passes::extern_block_suggestion,\n+            vec![(self.start_span, start_suggestion), (self.end_span, end_suggestion)],\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "db91a886c725e4ab9a0ebf0c52dd2df426fe28b5", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e331ae57df08e6eab346a9caab3fc354ce61c5d5/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=e331ae57df08e6eab346a9caab3fc354ce61c5d5", "patch": "@@ -58,3 +58,36 @@ ast_passes_fn_param_forbidden_self =\n     `self` parameter is only allowed in associated functions\n     .label = not semantically valid as function parameter\n     .note = associated functions are those in `impl` or `trait` definitions\n+\n+ast_passes_forbidden_default =\n+    `default` is only allowed on items in trait impls\n+    .label = `default` because of this\n+\n+ast_passes_assoc_const_without_body =\n+    associated constant in `impl` without body\n+    .suggestion = provide a definition for the constant\n+\n+ast_passes_assoc_fn_without_body =\n+    associated function in `impl` without body\n+    .suggestion = provide a definition for the function\n+\n+ast_passes_assoc_type_without_body =\n+    associated type in `impl` without body\n+    .suggestion = provide a definition for the type\n+\n+ast_passes_const_without_body =\n+    free constant item without body\n+    .suggestion = provide a definition for the constant\n+\n+ast_passes_static_without_body =\n+    free static item without body\n+    .suggestion = provide a definition for the static\n+\n+ast_passes_ty_alias_without_body =\n+    free type alias without body\n+    .suggestion = provide a definition for the type\n+\n+ast_passes_fn_without_body =\n+    free function without a body\n+    .suggestion = provide a definition for the function\n+    .extern_block_suggestion = if you meant to declare an externally defined function, use an `extern` block"}]}