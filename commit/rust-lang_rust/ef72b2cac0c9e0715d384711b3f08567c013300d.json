{"sha": "ef72b2cac0c9e0715d384711b3f08567c013300d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzJiMmNhYzBjOWUwNzE1ZDM4NDcxMWIzZjA4NTY3YzAxMzMwMGQ=", "commit": {"author": {"name": "phil", "email": "uniphil@gmail.com", "date": "2019-02-18T16:39:23Z"}, "committer": {"name": "phil", "email": "uniphil@gmail.com", "date": "2019-02-19T00:22:20Z"}, "message": "Check {print,write}_with_newline for literal newline\n\nBoth regular strings and raw strings can contain literal newlines. This commit\nextends the lint to also warn about terminating strings with these.\n\nBehaviour handling for raw strings is also moved into `check_newlines` by\npassing in the `is_raw` boolean from `check_tts` as\n[suggested](https://github.com/rust-lang/rust-clippy/pull/3781#pullrequestreview-204663732)", "tree": {"sha": "92587ec28cbe0cfa289f3fdf18619cc3729d96b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92587ec28cbe0cfa289f3fdf18619cc3729d96b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef72b2cac0c9e0715d384711b3f08567c013300d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef72b2cac0c9e0715d384711b3f08567c013300d", "html_url": "https://github.com/rust-lang/rust/commit/ef72b2cac0c9e0715d384711b3f08567c013300d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef72b2cac0c9e0715d384711b3f08567c013300d/comments", "author": {"login": "uniphil", "id": 205128, "node_id": "MDQ6VXNlcjIwNTEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/205128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uniphil", "html_url": "https://github.com/uniphil", "followers_url": "https://api.github.com/users/uniphil/followers", "following_url": "https://api.github.com/users/uniphil/following{/other_user}", "gists_url": "https://api.github.com/users/uniphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/uniphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uniphil/subscriptions", "organizations_url": "https://api.github.com/users/uniphil/orgs", "repos_url": "https://api.github.com/users/uniphil/repos", "events_url": "https://api.github.com/users/uniphil/events{/privacy}", "received_events_url": "https://api.github.com/users/uniphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uniphil", "id": 205128, "node_id": "MDQ6VXNlcjIwNTEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/205128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uniphil", "html_url": "https://github.com/uniphil", "followers_url": "https://api.github.com/users/uniphil/followers", "following_url": "https://api.github.com/users/uniphil/following{/other_user}", "gists_url": "https://api.github.com/users/uniphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/uniphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uniphil/subscriptions", "organizations_url": "https://api.github.com/users/uniphil/orgs", "repos_url": "https://api.github.com/users/uniphil/repos", "events_url": "https://api.github.com/users/uniphil/events{/privacy}", "received_events_url": "https://api.github.com/users/uniphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa3bd8e9464f0bb74366e78972f77353bdd29a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa3bd8e9464f0bb74366e78972f77353bdd29a5", "html_url": "https://github.com/rust-lang/rust/commit/3fa3bd8e9464f0bb74366e78972f77353bdd29a5"}], "stats": {"total": 77, "additions": 72, "deletions": 5}, "files": [{"sha": "012c34e9b535586c602bd7fa18ba0cd75630bf66", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef72b2cac0c9e0715d384711b3f08567c013300d/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef72b2cac0c9e0715d384711b3f08567c013300d/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=ef72b2cac0c9e0715d384711b3f08567c013300d", "patch": "@@ -201,7 +201,7 @@ impl EarlyLintPass for Pass {\n         } else if mac.node.path == \"print\" {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n             if let (Some(fmtstr), _, is_raw) = check_tts(cx, &mac.node.tts, false) {\n-                if !is_raw && check_newlines(&fmtstr) {\n+                if check_newlines(&fmtstr, is_raw) {\n                     span_lint(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n@@ -213,7 +213,7 @@ impl EarlyLintPass for Pass {\n             }\n         } else if mac.node.path == \"write\" {\n             if let (Some(fmtstr), _, is_raw) = check_tts(cx, &mac.node.tts, true) {\n-                if !is_raw && check_newlines(&fmtstr) {\n+                if check_newlines(&fmtstr, is_raw) {\n                     span_lint(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n@@ -382,7 +382,14 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n }\n \n // Checks if `s` constains a single newline that terminates it\n-fn check_newlines(s: &str) -> bool {\n+// Literal and escaped newlines are both checked (only literal for raw strings)\n+fn check_newlines(s: &str, is_raw: bool) -> bool {\n+    if s.ends_with('\\n') {\n+        return true;\n+    } else if is_raw {\n+        return false;\n+    }\n+\n     if s.len() < 2 {\n         return false;\n     }"}, {"sha": "1c219ecb325b13ab8aeb9c3fc7d1d06260b0024c", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=ef72b2cac0c9e0715d384711b3f08567c013300d", "patch": "@@ -29,4 +29,14 @@ fn main() {\n \n     // Raw strings\n     print!(r\"\\n\"); // #3778\n+\n+    // Literal newlines should also fail\n+    print!(\n+        \"\n+\"\n+    );\n+    print!(\n+        r\"\n+\"\n+    );\n }"}, {"sha": "ff89b0d3fd446762d41ac189428422589b8744a4", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=ef72b2cac0c9e0715d384711b3f08567c013300d", "patch": "@@ -30,5 +30,23 @@ error: using `print!()` with a format string that ends in a single newline, cons\n LL |     print!(\"//n\"); // should fail\n    |     ^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: using `print!()` with a format string that ends in a single newline, consider using `println!()` instead\n+  --> $DIR/print_with_newline.rs:34:5\n+   |\n+LL | /     print!(\n+LL | |         \"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+\n+error: using `print!()` with a format string that ends in a single newline, consider using `println!()` instead\n+  --> $DIR/print_with_newline.rs:38:5\n+   |\n+LL | /     print!(\n+LL | |         r\"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "dd80dc0cf9c5e4cd04e853f324699742d0dbeb08", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=ef72b2cac0c9e0715d384711b3f08567c013300d", "patch": "@@ -34,4 +34,16 @@ fn main() {\n \n     // Raw strings\n     write!(&mut v, r\"\\n\"); // #3778\n+\n+    // Literal newlines should also fail\n+    write!(\n+        &mut v,\n+        \"\n+\"\n+    );\n+    write!(\n+        &mut v,\n+        r\"\n+\"\n+    );\n }"}, {"sha": "3a31f61a277cfe93814a356ea305b6b505ce159f", "filename": "tests/ui/write_with_newline.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef72b2cac0c9e0715d384711b3f08567c013300d/tests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.stderr?ref=ef72b2cac0c9e0715d384711b3f08567c013300d", "patch": "@@ -30,5 +30,25 @@ error: using `write!()` with a format string that ends in a single newline, cons\n LL |     write!(&mut v, \"//n\"); // should fail\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: using `write!()` with a format string that ends in a single newline, consider using `writeln!()` instead\n+  --> $DIR/write_with_newline.rs:39:5\n+   |\n+LL | /     write!(\n+LL | |         &mut v,\n+LL | |         \"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+\n+error: using `write!()` with a format string that ends in a single newline, consider using `writeln!()` instead\n+  --> $DIR/write_with_newline.rs:44:5\n+   |\n+LL | /     write!(\n+LL | |         &mut v,\n+LL | |         r\"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+\n+error: aborting due to 7 previous errors\n "}]}