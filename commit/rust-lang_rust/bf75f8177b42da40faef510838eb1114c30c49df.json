{"sha": "bf75f8177b42da40faef510838eb1114c30c49df", "node_id": "C_kwDOAAsO6NoAKGJmNzVmODE3N2I0MmRhNDBmYWVmNTEwODM4ZWIxMTE0YzMwYzQ5ZGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-21T02:33:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-21T02:33:21Z"}, "message": "Rollup merge of #104347 - notriddle:notriddle/import-macro-from-self-fixup, r=TaKO8Ki\n\ndiagnostics: suggest changing `s@self::{macro}@::macro` for exported\n\nFixes #99695", "tree": {"sha": "50fa13a895a5e85fd82c35cd503f24d8ed1404b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50fa13a895a5e85fd82c35cd503f24d8ed1404b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf75f8177b42da40faef510838eb1114c30c49df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjy07xCRBK7hj4Ov3rIwAAlSsIAIOUOxbWQXOJuYrbupUpsjJo\nN/G4ap9Gew+LBRbOeX/tTQreHxHioDLnr6qYS88Q9FdY9eaq1oSLD4455aAvdfHW\n8p1JDUZPH+6tIQ/PW/1biatC4guImh7N2X7FG6iv7l623Zts88ie5WQwgsPHGDqK\nwBrYNzxSygCe9czmwiU+DQcuzljgxZsNE5T31kSAQCwXhvdidu6rT/6BdRkTXnZb\nua+2LCqBQTb47b5phHYsWR8mE88BqptE+kPpA19bBYBnj3rmJ0kIR7Wi6JD8KDBI\n8RO5Wrq2GKgPFl0S6o2GND9JyI6GYvyiLGLCpwaP+xrqGJalb8EmK1SmKBO0BSw=\n=8A9l\n-----END PGP SIGNATURE-----\n", "payload": "tree 50fa13a895a5e85fd82c35cd503f24d8ed1404b9\nparent e6400693b8a73840288042356dddc74ec64170ef\nparent c07a722847497233e6590d62a3d63946409385c3\nauthor Michael Goulet <michael@errs.io> 1674268401 -0500\ncommitter GitHub <noreply@github.com> 1674268401 -0500\n\nRollup merge of #104347 - notriddle:notriddle/import-macro-from-self-fixup, r=TaKO8Ki\n\ndiagnostics: suggest changing `s@self::{macro}@::macro` for exported\n\nFixes #99695\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf75f8177b42da40faef510838eb1114c30c49df", "html_url": "https://github.com/rust-lang/rust/commit/bf75f8177b42da40faef510838eb1114c30c49df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf75f8177b42da40faef510838eb1114c30c49df/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6400693b8a73840288042356dddc74ec64170ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6400693b8a73840288042356dddc74ec64170ef", "html_url": "https://github.com/rust-lang/rust/commit/e6400693b8a73840288042356dddc74ec64170ef"}, {"sha": "c07a722847497233e6590d62a3d63946409385c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c07a722847497233e6590d62a3d63946409385c3", "html_url": "https://github.com/rust-lang/rust/commit/c07a722847497233e6590d62a3d63946409385c3"}], "stats": {"total": 126, "additions": 121, "deletions": 5}, "files": [{"sha": "8d104aa5cc592ccb4876108e706c3b6e9b27246a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -2125,9 +2125,15 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n                 let source_map = self.r.session.source_map();\n \n+                // Make sure this is actually crate-relative.\n+                let is_definitely_crate = import\n+                    .module_path\n+                    .first()\n+                    .map_or(false, |f| f.ident.name != kw::SelfLower && f.ident.name != kw::Super);\n+\n                 // Add the import to the start, with a `{` if required.\n                 let start_point = source_map.start_point(after_crate_name);\n-                if let Ok(start_snippet) = source_map.span_to_snippet(start_point) {\n+                if is_definitely_crate && let Ok(start_snippet) = source_map.span_to_snippet(start_point) {\n                     corrections.push((\n                         start_point,\n                         if has_nested {\n@@ -2139,11 +2145,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             format!(\"{{{}, {}\", import_snippet, start_snippet)\n                         },\n                     ));\n-                }\n \n-                // Add a `};` to the end if nested, matching the `{` added at the start.\n-                if !has_nested {\n-                    corrections.push((source_map.end_point(after_crate_name), \"};\".to_string()));\n+                    // Add a `};` to the end if nested, matching the `{` added at the start.\n+                    if !has_nested {\n+                        corrections.push((source_map.end_point(after_crate_name), \"};\".to_string()));\n+                    }\n+                } else {\n+                    // If the root import is module-relative, add the import separately\n+                    corrections.push((\n+                        import.use_span.shrink_to_lo(),\n+                        format!(\"use {module_name}::{import_snippet};\\n\"),\n+                    ));\n                 }\n             }\n "}, {"sha": "0e60c73b67a44e274dfc886d4d33e1b26f9262bb", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+\n+    mod p {\n+        #[macro_export]\n+        macro_rules! nu {\n+            {} => {};\n+        }\n+\n+        pub struct other_item;\n+    }\n+\n+    use ::nu;\n+pub use self::p::{other_item as _};\n+    //~^ ERROR unresolved import `self::p::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "031443a1f5df892f2bd5300112d66866cdae0d59", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+\n+    mod p {\n+        #[macro_export]\n+        macro_rules! nu {\n+            {} => {};\n+        }\n+\n+        pub struct other_item;\n+    }\n+\n+    pub use self::p::{nu, other_item as _};\n+    //~^ ERROR unresolved import `self::p::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "b6f5c726a5ca9ae342798754cfcbe999b795ddeb", "filename": "tests/ui/imports/issue-99695-b.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.stderr?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `self::p::nu`\n+  --> $DIR/issue-99695-b.rs:14:23\n+   |\n+LL |     pub use self::p::{nu, other_item as _};\n+   |                       ^^ no `nu` in `m::p`\n+   |\n+   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n+help: a macro with this name exists at the root of the crate\n+   |\n+LL ~     use ::nu;\n+LL ~ pub use self::p::{other_item as _};\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "6bf228b23aad221d8fbf1a798186f38fb3ebd061", "filename": "tests/ui/imports/issue-99695.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+    #[macro_export]\n+    macro_rules! nu {\n+        {} => {};\n+    }\n+\n+    pub struct other_item;\n+\n+    use ::nu;\n+pub use self::{other_item as _};\n+    //~^ ERROR unresolved import `self::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "f7199f1497ab0877b12d9d9e8bb6520dc09fa75d", "filename": "tests/ui/imports/issue-99695.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![allow(unused, nonstandard_style)]\n+mod m {\n+    #[macro_export]\n+    macro_rules! nu {\n+        {} => {};\n+    }\n+\n+    pub struct other_item;\n+\n+    pub use self::{nu, other_item as _};\n+    //~^ ERROR unresolved import `self::nu` [E0432]\n+    //~| HELP a macro with this name exists at the root of the crate\n+}\n+\n+fn main() {}"}, {"sha": "0ef762e1c8230f81a1faf7ac670a6ccdf7c58ad2", "filename": "tests/ui/imports/issue-99695.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf75f8177b42da40faef510838eb1114c30c49df/tests%2Fui%2Fimports%2Fissue-99695.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.stderr?ref=bf75f8177b42da40faef510838eb1114c30c49df", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `self::nu`\n+  --> $DIR/issue-99695.rs:11:20\n+   |\n+LL |     pub use self::{nu, other_item as _};\n+   |                    ^^ no `nu` in `m`\n+   |\n+   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n+help: a macro with this name exists at the root of the crate\n+   |\n+LL ~     use ::nu;\n+LL ~ pub use self::{other_item as _};\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}