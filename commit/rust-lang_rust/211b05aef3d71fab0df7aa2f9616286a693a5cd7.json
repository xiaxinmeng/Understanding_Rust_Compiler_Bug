{"sha": "211b05aef3d71fab0df7aa2f9616286a693a5cd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWIwNWFlZjNkNzFmYWIwZGY3YWEyZjk2MTYyODZhNjkzYTVjZDc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-11T08:34:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:49Z"}, "message": "Don't require a QueryContext to access the DepGraph.", "tree": {"sha": "e94d4e8bf3a054b84b4eba96c0724cb025c24ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94d4e8bf3a054b84b4eba96c0724cb025c24ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211b05aef3d71fab0df7aa2f9616286a693a5cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211b05aef3d71fab0df7aa2f9616286a693a5cd7", "html_url": "https://github.com/rust-lang/rust/commit/211b05aef3d71fab0df7aa2f9616286a693a5cd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211b05aef3d71fab0df7aa2f9616286a693a5cd7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7794fbb47839ed0749647be343c4e52e6564123b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7794fbb47839ed0749647be343c4e52e6564123b", "html_url": "https://github.com/rust-lang/rust/commit/7794fbb47839ed0749647be343c4e52e6564123b"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "eaf414ccaa69d09b94dfb26b01c4fb17c03c142f", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -111,6 +111,11 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n             || self.sess.opts.debugging_opts.query_dep_graph\n     }\n \n+    #[inline]\n+    fn dep_graph(&self) -> &DepGraph {\n+        &self.dep_graph\n+    }\n+\n     fn try_force_from_dep_node(&self, dep_node: &DepNode) -> bool {\n         // FIXME: This match is just a workaround for incremental bugs and should\n         // be removed. https://github.com/rust-lang/rust/issues/62649 is one such"}, {"sha": "891da797b34ec2d4975b0450ffcba967a497f7bc", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -2,7 +2,6 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::DepGraph;\n use crate::ty::query::Query;\n use crate::ty::tls::{self, ImplicitCtxt};\n use crate::ty::{self, TyCtxt};\n@@ -30,10 +29,6 @@ impl QueryContext for TyCtxt<'tcx> {\n         TyCtxt::def_path_str(*self, def_id)\n     }\n \n-    fn dep_graph(&self) -> &DepGraph {\n-        &self.dep_graph\n-    }\n-\n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>> {\n         tls::with_related_context(*self, |icx| icx.query)\n     }"}, {"sha": "c6dc7b4fe2851e168bd0cddb5c371c4e477b62ad", "filename": "compiler/rustc_query_system/src/cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fcache.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -1,7 +1,6 @@\n //! Cache for candidate selection.\n \n-use crate::dep_graph::DepNodeIndex;\n-use crate::query::QueryContext;\n+use crate::dep_graph::{DepContext, DepNodeIndex};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::HashMapExt;\n@@ -28,7 +27,7 @@ impl<Key, Value> Cache<Key, Value> {\n }\n \n impl<Key: Eq + Hash, Value: Clone> Cache<Key, Value> {\n-    pub fn get<CTX: QueryContext>(&self, key: &Key, tcx: CTX) -> Option<Value> {\n+    pub fn get<CTX: DepContext>(&self, key: &Key, tcx: CTX) -> Option<Value> {\n         Some(self.hashmap.borrow().get(key)?.get(tcx))\n     }\n \n@@ -55,7 +54,7 @@ impl<T: Clone> WithDepNode<T> {\n         WithDepNode { dep_node, cached_value }\n     }\n \n-    pub fn get<CTX: QueryContext>(&self, tcx: CTX) -> T {\n+    pub fn get<CTX: DepContext>(&self, tcx: CTX) -> T {\n         tcx.dep_graph().read_index(self.dep_node);\n         self.cached_value.clone()\n     }"}, {"sha": "1319a31b8f54d9d3c1b42a91274947d9db12a1b8", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -79,7 +79,7 @@ impl<K: DepKind> DepNode<K> {\n \n     pub fn construct<Ctxt, Key>(tcx: Ctxt, kind: K, arg: &Key) -> DepNode<K>\n     where\n-        Ctxt: crate::query::QueryContext<DepKind = K>,\n+        Ctxt: super::DepContext<DepKind = K>,\n         Key: DepNodeParams<Ctxt>,\n     {\n         let hash = arg.to_fingerprint(tcx);"}, {"sha": "5c1444ad6c4caf21609d4bbe3357fd931a0e19af", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -29,6 +29,9 @@ pub trait DepContext: Copy {\n     fn debug_dep_tasks(&self) -> bool;\n     fn debug_dep_node(&self) -> bool;\n \n+    /// Access the DepGraph.\n+    fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n+\n     /// Try to force a dep node to execute and see if it's green.\n     fn try_force_from_dep_node(&self, dep_node: &DepNode<Self::DepKind>) -> bool;\n "}, {"sha": "84d4b406c84e16a40eb024c5d84b2b76cd61435e", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211b05aef3d71fab0df7aa2f9616286a693a5cd7/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=211b05aef3d71fab0df7aa2f9616286a693a5cd7", "patch": "@@ -14,7 +14,7 @@ pub use self::caches::{\n mod config;\n pub use self::config::{QueryAccessors, QueryConfig, QueryDescription};\n \n-use crate::dep_graph::{DepContext, DepGraph};\n+use crate::dep_graph::DepContext;\n use crate::query::job::QueryMap;\n \n use rustc_data_structures::stable_hasher::HashStable;\n@@ -32,9 +32,6 @@ pub trait QueryContext: DepContext {\n     /// Get string representation from DefPath.\n     fn def_path_str(&self, def_id: DefId) -> String;\n \n-    /// Access the DepGraph.\n-    fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n-\n     /// Get the query information from the TLS context.\n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>>;\n "}]}