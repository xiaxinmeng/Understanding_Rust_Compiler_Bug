{"sha": "96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "node_id": "C_kwDOAAsO6NoAKDk2YjliYjQ2MjBmNGQ0OGFhMjVjMzgxYzdlYTc3ZTBjYWI0OGFjNWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T07:29:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-26T07:29:29Z"}, "message": "Auto merge of #99677 - pietroalbini:pa-fix-97786-perf-regression, r=Mark-Simulacrum\n\nRemove new allocations from `imported_source_files`\n\nhttps://github.com/rust-lang/rust/pull/97786 introduced a [large performance regression](https://github.com/rust-lang/rust/pull/97786#issuecomment-1176552836). After some local investigation it turns out the allocations performed by my change were the cause of the perf regression. This PR refactors my change to remove those allocations.", "tree": {"sha": "9490d7c26ad5b2283128c2f399953671116097d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9490d7c26ad5b2283128c2f399953671116097d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "html_url": "https://github.com/rust-lang/rust/commit/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b629c85bd74dfb730a3e9308312b007c0bf027cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b629c85bd74dfb730a3e9308312b007c0bf027cb", "html_url": "https://github.com/rust-lang/rust/commit/b629c85bd74dfb730a3e9308312b007c0bf027cb"}, {"sha": "f1063c054d3bc9d42eebf128e13ad25e9014a64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1063c054d3bc9d42eebf128e13ad25e9014a64e", "html_url": "https://github.com/rust-lang/rust/commit/f1063c054d3bc9d42eebf128e13ad25e9014a64e"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "8fa703a77607579aaa9b6a51635030cd0d166e2b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=96b9bb4620f4d48aa25c381c7ea77e0cab48ac5b", "patch": "@@ -41,7 +41,7 @@ use std::io;\n use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n-use std::path::PathBuf;\n+use std::path::Path;\n use tracing::debug;\n \n pub(super) use cstore_impl::provide;\n@@ -1474,30 +1474,30 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     /// Proc macro crates don't currently export spans, so this function does not have\n     /// to work for them.\n     fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {\n+        fn filter<'a>(sess: &Session, path: Option<&'a Path>) -> Option<&'a Path> {\n+            path.filter(|_| {\n+                // Only spend time on further checks if we have what to translate *to*.\n+                sess.opts.real_rust_source_base_dir.is_some()\n+                // Some tests need the translation to be always skipped.\n+                && sess.opts.unstable_opts.translate_remapped_path_to_local_path\n+            })\n+            .filter(|virtual_dir| {\n+                // Don't translate away `/rustc/$hash` if we're still remapping to it,\n+                // since that means we're still building `std`/`rustc` that need it,\n+                // and we don't want the real path to leak into codegen/debuginfo.\n+                !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n+            })\n+        }\n+\n         // Translate the virtual `/rustc/$hash` prefix back to a real directory\n         // that should hold actual sources, where possible.\n         //\n         // NOTE: if you update this, you might need to also update bootstrap's code for generating\n         // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.\n         let virtual_rust_source_base_dir = [\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n-            sess.opts.unstable_opts.simulate_remapped_rust_src_base.clone(),\n-        ]\n-        .into_iter()\n-        .filter(|_| {\n-            // Only spend time on further checks if we have what to translate *to*.\n-            sess.opts.real_rust_source_base_dir.is_some()\n-                // Some tests need the translation to be always skipped.\n-                && sess.opts.unstable_opts.translate_remapped_path_to_local_path\n-        })\n-        .flatten()\n-        .filter(|virtual_dir| {\n-            // Don't translate away `/rustc/$hash` if we're still remapping to it,\n-            // since that means we're still building `std`/`rustc` that need it,\n-            // and we don't want the real path to leak into codegen/debuginfo.\n-            !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)\n-        })\n-        .collect::<Vec<_>>();\n+            filter(sess, option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(Path::new)),\n+            filter(sess, sess.opts.unstable_opts.simulate_remapped_rust_src_base.as_deref()),\n+        ];\n \n         let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {\n             debug!(\n@@ -1506,7 +1506,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,\n             );\n \n-            for virtual_dir in &virtual_rust_source_base_dir {\n+            for virtual_dir in virtual_rust_source_base_dir.iter().flatten() {\n                 if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {\n                     if let rustc_span::FileName::Real(old_name) = name {\n                         if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } ="}]}