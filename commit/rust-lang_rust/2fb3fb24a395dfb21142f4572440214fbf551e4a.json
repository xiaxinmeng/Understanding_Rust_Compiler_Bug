{"sha": "2fb3fb24a395dfb21142f4572440214fbf551e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjNmYjI0YTM5NWRmYjIxMTQyZjQ1NzI0NDAyMTRmYmY1NTFlNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-18T21:47:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-18T21:47:06Z"}, "message": "Auto merge of #27836 - alexcrichton:rename-cstring-raw, r=bluss\n\nThis commit renames the `CString::{into_ptr, from_ptr}` methods to `into_raw`\r\nand `from_raw` to mirror the corresponding methods on `Box` and the naming of\r\n\"raw\" for `from_raw_parts` on slices and vectors.\r\n\r\ncc #27769", "tree": {"sha": "00283597127a7beefcfed3d9d2d0bb3fa42ccd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00283597127a7beefcfed3d9d2d0bb3fa42ccd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb3fb24a395dfb21142f4572440214fbf551e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb3fb24a395dfb21142f4572440214fbf551e4a", "html_url": "https://github.com/rust-lang/rust/commit/2fb3fb24a395dfb21142f4572440214fbf551e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb3fb24a395dfb21142f4572440214fbf551e4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d72d314480d3437345129ddf8b299c36e048f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d72d314480d3437345129ddf8b299c36e048f18", "html_url": "https://github.com/rust-lang/rust/commit/1d72d314480d3437345129ddf8b299c36e048f18"}, {"sha": "3cf9e1086ef49cacd020f30947d834ba9c5ec375", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf9e1086ef49cacd020f30947d834ba9c5ec375", "html_url": "https://github.com/rust-lang/rust/commit/3cf9e1086ef49cacd020f30947d834ba9c5ec375"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "23daa87401a45641b712ee916dde9d945d881b2e", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2fb3fb24a395dfb21142f4572440214fbf551e4a/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb3fb24a395dfb21142f4572440214fbf551e4a/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=2fb3fb24a395dfb21142f4572440214fbf551e4a", "patch": "@@ -207,15 +207,39 @@ impl CString {\n     /// using the pointer.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    // NB: may want to be called from_raw, needs to consider CStr::from_ptr,\n-    //     Box::from_raw (or whatever it's currently called), and\n-    //     slice::from_raw_parts\n+    #[deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n     pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n+        CString::from_raw(ptr)\n+    }\n+\n+    /// Retakes ownership of a CString that was transferred to C.\n+    ///\n+    /// The only appropriate argument is a pointer obtained by calling\n+    /// `into_raw`. The length of the string will be recalculated\n+    /// using the pointer.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n+    pub unsafe fn from_raw(ptr: *const libc::c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts(ptr, len as usize);\n         CString { inner: mem::transmute(slice) }\n     }\n \n+    /// Transfers ownership of the string to a C caller.\n+    ///\n+    /// The pointer must be returned to Rust and reconstituted using\n+    /// `from_raw` to be properly deallocated. Specifically, one\n+    /// should *not* use the standard C `free` function to deallocate\n+    /// this string.\n+    ///\n+    /// Failure to call `from_raw` will lead to a memory leak.\n+    #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n+               issue = \"27769\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n+    pub fn into_ptr(self) -> *const libc::c_char {\n+        self.into_raw()\n+    }\n+\n     /// Transfers ownership of the string to a C caller.\n     ///\n     /// The pointer must be returned to Rust and reconstituted using\n@@ -226,8 +250,7 @@ impl CString {\n     /// Failure to call `from_ptr` will lead to a memory leak.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    // NB: may want to be called into_raw, see comments on from_ptr\n-    pub fn into_ptr(self) -> *const libc::c_char {\n+    pub fn into_raw(self) -> *const libc::c_char {\n         // It is important that the bytes be sized to fit - we need\n         // the capacity to be determinable from the string length, and\n         // shrinking to fit is the only way to be sure."}]}