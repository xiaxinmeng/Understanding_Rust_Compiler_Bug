{"sha": "6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOThmN2Y5MjQxMDM1YzJjMzZjYzZmZDFhYjQ1MzA5ZDJkYzljMmE=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-17T10:14:48Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-18T04:07:49Z"}, "message": "Remove ConfigTracker - inline in Config.\n\nUse an individual `Cell<bool>` on each config item, rather than\nmaintaining a set of config names that were accessed. Add a simple unit\ntest.", "tree": {"sha": "ebdbffcdeab72c5b1c7d86e434e2b4869c869d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebdbffcdeab72c5b1c7d86e434e2b4869c869d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a", "html_url": "https://github.com/rust-lang/rust/commit/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4955f705e123a3008f7d6993b71dc256cdd5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4955f705e123a3008f7d6993b71dc256cdd5b9", "html_url": "https://github.com/rust-lang/rust/commit/7a4955f705e123a3008f7d6993b71dc256cdd5b9"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "9f74f2b69d6307de162d15bce7e73a5072e314d9", "filename": "src/config.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6098f7f9241035c2c36cc6fd1ab45309d2dc9c2a", "patch": "@@ -10,8 +10,7 @@\n \n extern crate toml;\n \n-use std::cell::RefCell;\n-use std::collections::HashSet;\n+use std::cell::Cell;\n use std::error;\n use std::result;\n \n@@ -213,35 +212,13 @@ impl ConfigHelpItem {\n     }\n }\n \n-/// This is used by Config to track which config parameters are accessed during\n-/// formatting. It uses a RefCell for interior mutability, as we don't want to\n-/// require a mutable reference to Config in order to access configuration.\n-#[derive(Clone, Default)]\n-struct ConfigTracker {\n-    set: RefCell<HashSet<&'static str>>,\n-}\n-\n-impl ConfigTracker {\n-    fn mark_accessed(&self, name: &'static str) {\n-        // We don't ever expect borrowing to fail, as our use of RefCell is very\n-        // simple.\n-        let mut set = self.set.borrow_mut();\n-        set.insert(name);\n-    }\n-\n-    fn was_accessed(&self, name: &'static str) -> bool {\n-        self.set.borrow().contains(name)\n-    }\n-}\n-\n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n-        #[derive(Deserialize, Clone)]\n+        #[derive(Clone)]\n         pub struct Config {\n-            #[serde(skip_deserializing)]\n-            tracker: ConfigTracker,\n-\n-            $($i: $ty),+\n+            // For each config item, we store a bool indicating whether it has\n+            // been accessed and the value.\n+            $($i: (Cell<bool>, $ty)),+\n         }\n \n         // Just like the Config struct but with each property wrapped\n@@ -258,15 +235,15 @@ macro_rules! create_config {\n \n             $(\n             pub fn $i(&self) -> $ty {\n-                self.tracker.mark_accessed(stringify!($i));\n-                self.$i.clone()\n+                self.$i.0.set(true);\n+                self.$i.1.clone()\n             }\n             )+\n \n             fn fill_from_parsed_config(mut self, parsed: PartialConfig) -> Config {\n             $(\n                 if let Some(val) = parsed.$i {\n-                    self.$i = val;\n+                    self.$i.1 = val;\n                 }\n             )+\n                 self\n@@ -309,8 +286,8 @@ macro_rules! create_config {\n             pub fn used_to_toml(&self) -> Result<String, String> {\n                 let mut partial = PartialConfig {\n                     $(\n-                        $i: if self.tracker.was_accessed(stringify!($i)) {\n-                                Some(self.$i.clone())\n+                        $i: if self.$i.0.get() {\n+                                Some(self.$i.1.clone())\n                             } else {\n                                 None\n                             },\n@@ -327,7 +304,7 @@ macro_rules! create_config {\n             pub fn to_toml(&self) -> Result<String, String> {\n                 let mut partial = PartialConfig {\n                     $(\n-                        $i: Some(self.$i.clone()),\n+                        $i: Some(self.$i.1.clone()),\n                     )+\n                 };\n \n@@ -343,7 +320,7 @@ macro_rules! create_config {\n             {\n                 match key {\n                     $(\n-                        stringify!($i) => self.$i = val.parse::<$ty>()?,\n+                        stringify!($i) => self.$i.1 = val.parse::<$ty>()?,\n                     )+\n                     _ => panic!(\"Unknown config key in override: {}\", key)\n                 }\n@@ -383,9 +360,8 @@ macro_rules! create_config {\n         impl Default for Config {\n             fn default() -> Config {\n                 Config {\n-                    tracker: ConfigTracker::default(),\n                     $(\n-                        $i: $def,\n+                        $i: (Cell::new(false), $def),\n                     )+\n                 }\n             }\n@@ -489,3 +465,19 @@ create_config! {\n     condense_wildcard_suffices: bool, false, \"Replace strings of _ wildcards by a single .. in \\\n                                               tuple patterns\"\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::Config;\n+\n+    #[test]\n+    fn test_config_tracking() {\n+        let config = Config::default();\n+        assert!(!config.verbose.0.get());\n+        config.verbose();\n+        config.skip_children();\n+        assert!(config.verbose.0.get());\n+        assert!(config.skip_children.0.get());\n+        assert!(!config.disable_all_formatting.0.get());\n+    }\n+}"}]}