{"sha": "1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNmRhN2IzOGRmYWMwY2UwYzU5ZDk2NmYyNDJjYTU3YTdkYzliZjk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-07T21:42:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-07T21:43:31Z"}, "message": "Add another test case for #2288\n\nAdded a test case for #2288. It's xfailed for now, pending #2364", "tree": {"sha": "f3807effdb6291622202cf3e1b3341a1f68b61a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3807effdb6291622202cf3e1b3341a1f68b61a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9", "html_url": "https://github.com/rust-lang/rust/commit/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1460ea43d27373be9c5af5e344ab1a667be5e81f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1460ea43d27373be9c5af5e344ab1a667be5e81f", "html_url": "https://github.com/rust-lang/rust/commit/1460ea43d27373be9c5af5e344ab1a667be5e81f"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "b66268acc058bf0d720f4dcaf5740b857fe4ad49", "filename": "src/test/run-pass/class-impl-very-parameterized-iface.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-iface.rs?ref=1e6da7b38dfac0ce0c59d966f242ca57a7dc9bf9", "patch": "@@ -0,0 +1,99 @@\n+// xfail-test\n+// xfail-fast\n+use std;\n+import std::map::*;\n+\n+enum cat_type { tuxedo, tabby, tortoiseshell }\n+\n+// Very silly -- this just returns the value of the name field\n+// for any int value that's less than the meows field\n+\n+// ok: T should be in scope when resolving the iface ref for map\n+class cat<T: copy> implements map<int, T> {\n+  priv {\n+    // Yes, you can have negative meows\n+    let mut meows : int;\n+    fn meow() {\n+      self.meows += 1;\n+      #error(\"Meow %d\", self.meows);\n+      if self.meows % 5 == 0 {\n+          self.how_hungry += 1;\n+      }\n+    }\n+  }\n+\n+  let mut how_hungry : int;\n+  let name : T;\n+\n+  new(in_x : int, in_y : int, in_name: T)\n+    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n+\n+  fn speak() { self.meow(); }\n+\n+  fn eat() -> bool {\n+    if self.how_hungry > 0 {\n+        #error(\"OM NOM NOM\");\n+        self.how_hungry -= 2;\n+        ret true;\n+    }\n+    else {\n+        #error(\"Not hungry!\");\n+        ret false;\n+    }\n+  }\n+\n+  fn size() -> uint { self.meows as uint }\n+  fn insert(&&k: int, &&_v: T) -> bool {\n+    self.meows += k;\n+    true\n+  }\n+  fn contains_key(&&k: int) -> bool { k <= self.meows }\n+  \n+  fn get(&&k:int) -> T { alt self.find(k) {\n+      some(v) { v }\n+      none    { fail \"epic fail\"; }\n+    }\n+  }\n+  fn find(&&k:int) -> option<T> { if k <= self.meows {\n+        some(self.name)\n+     }\n+     else { none }\n+  }\n+  \n+  fn remove(&&k:int) -> option<T> {\n+    alt self.find(k) {\n+      some(x) {\n+        self.meows -= k; some(x)\n+      }\n+      none { none }\n+    }\n+  }\n+\n+  fn each(f: fn(&&int, &&T) -> bool) {\n+    let mut n = int::abs(self.meows);\n+    while n > 0 {\n+        if !f(n, self.name) { break; }\n+        n -= 1;\n+    }\n+  }\n+  \n+  fn each_key(&&f: fn(&&int) -> bool) {\n+    for self.each {|k, _v| if !f(k) { break; } cont;};\n+  }\n+  fn each_value(&&f: fn(&&T) -> bool) {\n+    for self.each {|_k, v| if !f(v) { break; } cont;};\n+  }\n+}\n+\n+\n+fn main() {\n+  let nyan : cat<str> = cat(0, 2, \"nyan\");\n+  uint::range(1u, 5u) {|_i| nyan.speak(); }\n+  assert(nyan.find(1) == some(\"nyan\"));\n+  assert(nyan.find(10) == none);\n+  let spotty : cat<cat_type> = cat(2, 57, tuxedo);\n+  uint::range(0u, 6u) {|_i| spotty.speak(); }\n+  assert(spotty.size() == 8u);\n+  assert(spotty.contains_key(2));\n+  assert(spotty.get(3) == tuxedo);\n+}"}]}