{"sha": "2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNzFhMGI5Yjk4NzE5NjZkZDFmNjNiNDExM2VlZWNjMmQ2ZTJmNmY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-17T01:18:01Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-18T16:21:38Z"}, "message": "Keep all witnesses of non-exhaustiveness", "tree": {"sha": "6f921dc930e1a613f6d3063c64446923cf06854a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f921dc930e1a613f6d3063c64446923cf06854a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "html_url": "https://github.com/rust-lang/rust/commit/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a6365b77e171337d4f4220ebdc618965524ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a6365b77e171337d4f4220ebdc618965524ecd", "html_url": "https://github.com/rust-lang/rust/commit/d7a6365b77e171337d4f4220ebdc618965524ecd"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "02b5e0eb3b22b19d6c20b7b58ec3f41803af8d97", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 37, "deletions": 27, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -713,13 +713,9 @@ impl<'tcx> Usefulness<'tcx> {\n         }\n     }\n \n-    fn is_useful(&self) -> bool {\n-        !matches!(*self, NotUseful)\n-    }\n-\n     /// When trying several branches and each returns a `Usefulness`, we need to combine the\n     /// results together.\n-    fn merge(usefulnesses: impl Iterator<Item = (Self, Span)>) -> Self {\n+    fn merge_or_patterns(usefulnesses: impl Iterator<Item = (Self, Span)>) -> Self {\n         // If we have detected some unreachable sub-branches, we only want to keep them when they\n         // were unreachable in _all_ branches. Eg. in the following, the last `true` is unreachable\n         // in the second branch of the first or-pattern, but not otherwise. Therefore we don't want\n@@ -789,6 +785,27 @@ impl<'tcx> Usefulness<'tcx> {\n         }\n     }\n \n+    /// When trying several branches and each returns a `Usefulness`, we need to combine the\n+    /// results together.\n+    fn merge_split_constructors(usefulnesses: impl Iterator<Item = Self>) -> Self {\n+        // Witnesses of usefulness, if any.\n+        let mut witnesses = Vec::new();\n+\n+        for u in usefulnesses {\n+            match u {\n+                Useful(..) => {\n+                    return u;\n+                }\n+                NotUseful => {}\n+                UsefulWithWitness(wits) => {\n+                    witnesses.extend(wits);\n+                }\n+            }\n+        }\n+\n+        if !witnesses.is_empty() { UsefulWithWitness(witnesses) } else { NotUseful }\n+    }\n+\n     fn apply_constructor<'p>(\n         self,\n         pcx: PatCtxt<'_, 'p, 'tcx>,\n@@ -975,29 +992,22 @@ fn is_useful<'p, 'tcx>(\n             }\n             (u, span)\n         });\n-        Usefulness::merge(usefulnesses)\n+        Usefulness::merge_or_patterns(usefulnesses)\n     } else {\n-        v.head_ctor(cx)\n-            .split(pcx, Some(hir_id))\n-            .into_iter()\n-            .map(|ctor| {\n-                // We cache the result of `Fields::wildcards` because it is used a lot.\n-                let ctor_wild_subpatterns = Fields::wildcards(pcx, &ctor);\n-                let matrix = pcx.matrix.specialize_constructor(pcx, &ctor, &ctor_wild_subpatterns);\n-                let v = v.pop_head_constructor(&ctor_wild_subpatterns);\n-                let usefulness = is_useful(\n-                    pcx.cx,\n-                    &matrix,\n-                    &v,\n-                    witness_preference,\n-                    hir_id,\n-                    is_under_guard,\n-                    false,\n-                );\n-                usefulness.apply_constructor(pcx, &ctor, &ctor_wild_subpatterns)\n-            })\n-            .find(|result| result.is_useful())\n-            .unwrap_or(NotUseful)\n+        // We split the head constructor of `v`.\n+        let ctors = v.head_ctor(cx).split(pcx, Some(hir_id));\n+        // For each constructor, we compute whether there's a value that starts with it that would\n+        // witness the usefulness of `v`.\n+        let usefulnesses = ctors.into_iter().map(|ctor| {\n+            // We cache the result of `Fields::wildcards` because it is used a lot.\n+            let ctor_wild_subpatterns = Fields::wildcards(pcx, &ctor);\n+            let matrix = pcx.matrix.specialize_constructor(pcx, &ctor, &ctor_wild_subpatterns);\n+            let v = v.pop_head_constructor(&ctor_wild_subpatterns);\n+            let usefulness =\n+                is_useful(pcx.cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n+            usefulness.apply_constructor(pcx, &ctor, &ctor_wild_subpatterns)\n+        });\n+        Usefulness::merge_split_constructors(usefulnesses)\n     };\n     debug!(\"is_useful::returns({:#?}, {:#?}) = {:?}\", matrix, v, ret);\n     ret"}, {"sha": "d2b72a86b74ccc7cea9081ee70a05be08696d79f", "filename": "src/test/ui/pattern/usefulness/issue-15129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -10,7 +10,7 @@ pub enum V {\n \n fn main() {\n     match (T::T1(()), V::V2(true)) {\n-        //~^ ERROR non-exhaustive patterns: `(T1(()), V2(_))` not covered\n+        //~^ ERROR non-exhaustive patterns: `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n         (T::T1(()), V::V1(i)) => (),\n         (T::T2(()), V::V2(b)) => (),\n     }"}, {"sha": "79a77240937ac7803fe7096ed662a099d70ee1bf", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `(T1(()), V2(_))` not covered\n+error[E0004]: non-exhaustive patterns: `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n   --> $DIR/issue-15129.rs:12:11\n    |\n LL |     match (T::T1(()), V::V2(true)) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `(T1(()), V2(_))` not covered\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(T, V)`"}, {"sha": "d27beaeffd637ae08b6a5bdc415071f4fcfb2bed", "filename": "src/test/ui/pattern/usefulness/issue-2111.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -1,6 +1,6 @@\n fn foo(a: Option<usize>, b: Option<usize>) {\n     match (a, b) {\n-        //~^ ERROR: non-exhaustive patterns: `(None, None)` not covered\n+        //~^ ERROR: non-exhaustive patterns: `(None, None)` and `(Some(_), Some(_))` not covered\n         (Some(a), Some(b)) if a == b => {}\n         (Some(_), None) | (None, Some(_)) => {}\n     }"}, {"sha": "60d9b8514b7fbfe9115b84a0e56611b19af8a516", "filename": "src/test/ui/pattern/usefulness/issue-2111.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `(None, None)` not covered\n+error[E0004]: non-exhaustive patterns: `(None, None)` and `(Some(_), Some(_))` not covered\n   --> $DIR/issue-2111.rs:2:11\n    |\n LL |     match (a, b) {\n-   |           ^^^^^^ pattern `(None, None)` not covered\n+   |           ^^^^^^ patterns `(None, None)` and `(Some(_), Some(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(Option<usize>, Option<usize>)`"}, {"sha": "9bccccca9c2b63609d9071ad6928386c5df4d73f", "filename": "src/test/ui/pattern/usefulness/issue-56379.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.rs?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -6,7 +6,7 @@ enum Foo {\n \n fn main() {\n     match Foo::A(true) {\n-        //~^ ERROR non-exhaustive patterns: `A(false)` not covered\n+        //~^ ERROR non-exhaustive patterns: `A(false)`, `B(false)` and `C(false)` not covered\n         Foo::A(true) => {}\n         Foo::B(true) => {}\n         Foo::C(true) => {}"}, {"sha": "6a231b868c8c457f045c5d8a6d03f6290b3e105b", "filename": "src/test/ui/pattern/usefulness/issue-56379.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -1,16 +1,18 @@\n-error[E0004]: non-exhaustive patterns: `A(false)` not covered\n+error[E0004]: non-exhaustive patterns: `A(false)`, `B(false)` and `C(false)` not covered\n   --> $DIR/issue-56379.rs:8:11\n    |\n LL | / enum Foo {\n LL | |     A(bool),\n    | |     - not covered\n LL | |     B(bool),\n+   | |     - not covered\n LL | |     C(bool),\n+   | |     - not covered\n LL | | }\n    | |_- `Foo` defined here\n ...\n LL |       match Foo::A(true) {\n-   |             ^^^^^^^^^^^^ pattern `A(false)` not covered\n+   |             ^^^^^^^^^^^^ patterns `A(false)`, `B(false)` and `C(false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `Foo`"}, {"sha": "4ff12aa2ff5e23d8d7bd98604bd1ba7d75e93c1d", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.rs?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -15,7 +15,7 @@ fn main() {\n                       //  and `(_, _, 5_i32..=i32::MAX)` not covered\n       (_, _, 4) => {}\n     }\n-    match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered\n+    match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n       (T::A, T::B) => {}\n       (T::B, T::A) => {}\n     }"}, {"sha": "c953cd314406e2c3fb72bccc1e7a09760ff8f7e3", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=2d71a0b9b9871966dd1f63b4113eeecc2d6e2f6f", "patch": "@@ -45,11 +45,11 @@ LL |     match (2, 3, 4) {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(i32, i32, i32)`\n \n-error[E0004]: non-exhaustive patterns: `(A, A)` not covered\n+error[E0004]: non-exhaustive patterns: `(A, A)` and `(B, B)` not covered\n   --> $DIR/non-exhaustive-match.rs:18:11\n    |\n LL |     match (T::A, T::A) {\n-   |           ^^^^^^^^^^^^ pattern `(A, A)` not covered\n+   |           ^^^^^^^^^^^^ patterns `(A, A)` and `(B, B)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `(T, T)`"}]}