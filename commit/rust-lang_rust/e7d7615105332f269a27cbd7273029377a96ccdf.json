{"sha": "e7d7615105332f269a27cbd7273029377a96ccdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDc2MTUxMDUzMzJmMjY5YTI3Y2JkNzI3MzAyOTM3N2E5NmNjZGY=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-09-03T11:33:55Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-09-03T11:36:58Z"}, "message": "rustc_lint: avoid trimmed paths for ty_find_init_error", "tree": {"sha": "b68f56ef8fb90fa2d24c5c00fb75384d7f0f0e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68f56ef8fb90fa2d24c5c00fb75384d7f0f0e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d7615105332f269a27cbd7273029377a96ccdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d7615105332f269a27cbd7273029377a96ccdf", "html_url": "https://github.com/rust-lang/rust/commit/e7d7615105332f269a27cbd7273029377a96ccdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d7615105332f269a27cbd7273029377a96ccdf/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51742be6d8c828c956f662a8e9a472cd31886b4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/51742be6d8c828c956f662a8e9a472cd31886b4a", "html_url": "https://github.com/rust-lang/rust/commit/51742be6d8c828c956f662a8e9a472cd31886b4a"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "2b14d09671e26600baa64c58aeef4cf97a1e37b9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7d7615105332f269a27cbd7273029377a96ccdf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d7615105332f269a27cbd7273029377a96ccdf/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e7d7615105332f269a27cbd7273029377a96ccdf", "patch": "@@ -40,6 +40,7 @@ use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n@@ -2040,7 +2041,9 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             // using zeroed or uninitialized memory.\n             // We are extremely conservative with what we warn about.\n             let conjured_ty = cx.typeck_results().expr_ty(expr);\n-            if let Some((msg, span)) = ty_find_init_error(cx.tcx, conjured_ty, init) {\n+            if let Some((msg, span)) =\n+                with_no_trimmed_paths(|| ty_find_init_error(cx.tcx, conjured_ty, init))\n+            {\n                 cx.struct_span_lint(INVALID_VALUE, expr.span, |lint| {\n                     let mut err = lint.build(&format!(\n                         \"the type `{}` does not permit {}\","}, {"sha": "de1b6c761767570d6e1c1974f48c1e8165279157", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7d7615105332f269a27cbd7273029377a96ccdf/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7d7615105332f269a27cbd7273029377a96ccdf/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=e7d7615105332f269a27cbd7273029377a96ccdf", "patch": "@@ -294,7 +294,7 @@ LL |         let _val: NonNull<i32> = mem::zeroed();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `NonNull<i32>` must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:80:34\n@@ -305,7 +305,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `NonNull<i32>` must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `*const dyn Send` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:82:37\n@@ -415,7 +415,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `NonZeroU32` must be non-null\n+   = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:104:34\n@@ -426,7 +426,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `NonNull<i32>` must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:105:34\n@@ -437,7 +437,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: `NonNull<i32>` must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:106:26"}]}