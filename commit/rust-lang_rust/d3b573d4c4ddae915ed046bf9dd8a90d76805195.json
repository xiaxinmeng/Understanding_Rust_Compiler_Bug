{"sha": "d3b573d4c4ddae915ed046bf9dd8a90d76805195", "node_id": "C_kwDOAAsO6NoAKGQzYjU3M2Q0YzRkZGFlOTE1ZWQwNDZiZjlkZDhhOTBkNzY4MDUxOTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:30:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:30:46Z"}, "message": "Rollup merge of #100083 - notriddle:notriddle/source-files-js, r=GuillaumeGomez\n\nrustdoc: use a more compact encoding for source-files.js\n\nThis reduces the compiler-doc file from 40K to 36K, a 10% reduction in size.", "tree": {"sha": "465955283114d9e4fb2b1aaa0f02ca25ba598578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465955283114d9e4fb2b1aaa0f02ca25ba598578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3b573d4c4ddae915ed046bf9dd8a90d76805195", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tr2CRBK7hj4Ov3rIwAAAX0IAJi7WII36qQsPkyw1vthpk/0\njbDv638rLMfYKGa4pHTU3Kr0kP0Q+AJmlJbQ+sTfIE66i+OYNTis7xm1yASY5+JO\nyePrMT3Lo7PkX2ZO+gQsP++7nXGv93CfxC8f2XWLY7cFJNGtGfZ8LESRxTPrKx/m\nKKGK8luN8eVYZXJei8I3whNbija4rGNlGsokXViTDJWK63rvS9OCiDhg0+c1qmSJ\n9rkrkAW9DSY2n919hJcUwKpnZDcn02A5bDw7KxlDhQnJKPmV+MNbbe+ZeRFNYgDV\nf8JTFjv4W2uXkPUAg/NvzrWuT6P9xqP4VUjB0XpTQ+N9GIDpoVXQMWJq9CkyQeg=\n=3mY5\n-----END PGP SIGNATURE-----\n", "payload": "tree 465955283114d9e4fb2b1aaa0f02ca25ba598578\nparent 5a5f4993ad46cd37c731cbcadc4834d92d229224\nparent 09a3dfc351955999953195aad0706304acf1ef1a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558646 +0200\ncommitter GitHub <noreply@github.com> 1659558646 +0200\n\nRollup merge of #100083 - notriddle:notriddle/source-files-js, r=GuillaumeGomez\n\nrustdoc: use a more compact encoding for source-files.js\n\nThis reduces the compiler-doc file from 40K to 36K, a 10% reduction in size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b573d4c4ddae915ed046bf9dd8a90d76805195", "html_url": "https://github.com/rust-lang/rust/commit/d3b573d4c4ddae915ed046bf9dd8a90d76805195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3b573d4c4ddae915ed046bf9dd8a90d76805195/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5f4993ad46cd37c731cbcadc4834d92d229224", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5f4993ad46cd37c731cbcadc4834d92d229224", "html_url": "https://github.com/rust-lang/rust/commit/5a5f4993ad46cd37c731cbcadc4834d92d229224"}, {"sha": "09a3dfc351955999953195aad0706304acf1ef1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a3dfc351955999953195aad0706304acf1ef1a", "html_url": "https://github.com/rust-lang/rust/commit/09a3dfc351955999953195aad0706304acf1ef1a"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "6fb41ff327916a104e3e2afa6192cc227ec40366", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d3b573d4c4ddae915ed046bf9dd8a90d76805195/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b573d4c4ddae915ed046bf9dd8a90d76805195/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=d3b573d4c4ddae915ed046bf9dd8a90d76805195", "patch": "@@ -366,13 +366,15 @@ pub(super) fn write_shared(\n                 .collect::<Vec<_>>();\n             files.sort_unstable();\n             let subs = subs.iter().map(|s| s.to_json_string()).collect::<Vec<_>>().join(\",\");\n-            let dirs =\n-                if subs.is_empty() { String::new() } else { format!(\",\\\"dirs\\\":[{}]\", subs) };\n+            let dirs = if subs.is_empty() && files.is_empty() {\n+                String::new()\n+            } else {\n+                format!(\",[{}]\", subs)\n+            };\n             let files = files.join(\",\");\n-            let files =\n-                if files.is_empty() { String::new() } else { format!(\",\\\"files\\\":[{}]\", files) };\n+            let files = if files.is_empty() { String::new() } else { format!(\",[{}]\", files) };\n             format!(\n-                \"{{\\\"name\\\":\\\"{name}\\\"{dirs}{files}}}\",\n+                \"[\\\"{name}\\\"{dirs}{files}]\",\n                 name = self.elem.to_str().expect(\"invalid osstring conversion\"),\n                 dirs = dirs,\n                 files = files\n@@ -411,18 +413,23 @@ pub(super) fn write_shared(\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) =\n-                try_err!(collect(&dst, krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n+                try_err!(collect_json(&dst, krate.name(cx.tcx()).as_str()), &dst);\n             all_sources.push(format!(\n-                \"sourcesIndex[\\\"{}\\\"] = {};\",\n+                r#\"\"{}\":{}\"#,\n                 &krate.name(cx.tcx()),\n-                hierarchy.to_json_string()\n+                hierarchy\n+                    .to_json_string()\n+                    // All these `replace` calls are because we have to go through JS string for JSON content.\n+                    .replace('\\\\', r\"\\\\\")\n+                    .replace('\\'', r\"\\'\")\n+                    // We need to escape double quotes for the JSON.\n+                    .replace(\"\\\\\\\"\", \"\\\\\\\\\\\"\")\n             ));\n             all_sources.sort();\n-            Ok(format!(\n-                \"var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n-                all_sources.join(\"\\n\")\n-            )\n-            .into_bytes())\n+            let mut v = String::from(\"var sourcesIndex = JSON.parse('{\\\\\\n\");\n+            v.push_str(&all_sources.join(\",\\\\\\n\"));\n+            v.push_str(\"\\\\\\n}');\\ncreateSourceSidebar();\\n\");\n+            Ok(v.into_bytes())\n         };\n         write_crate(\"source-files.js\", &make_sources)?;\n     }"}, {"sha": "c45d614293a85d64c7c520ee50359730d7645414", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3b573d4c4ddae915ed046bf9dd8a90d76805195/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/d3b573d4c4ddae915ed046bf9dd8a90d76805195/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=d3b573d4c4ddae915ed046bf9dd8a90d76805195", "patch": "@@ -12,6 +12,10 @@\n const rootPath = document.getElementById(\"rustdoc-vars\").attributes[\"data-root-path\"].value;\n let oldScrollPosition = 0;\n \n+const NAME_OFFSET = 0;\n+const DIRS_OFFSET = 1;\n+const FILES_OFFSET = 2;\n+\n function closeSidebarIfMobile() {\n     if (window.innerWidth < window.RUSTDOC_MOBILE_BREAKPOINT) {\n         updateLocalStorage(\"source-sidebar-show\", \"false\");\n@@ -24,15 +28,15 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n \n     dirEntry.className = \"dir-entry\";\n \n-    fullPath += elem[\"name\"] + \"/\";\n+    fullPath += elem[NAME_OFFSET] + \"/\";\n \n-    summary.innerText = elem[\"name\"];\n+    summary.innerText = elem[NAME_OFFSET];\n     dirEntry.appendChild(summary);\n \n     const folders = document.createElement(\"div\");\n     folders.className = \"folders\";\n-    if (elem.dirs) {\n-        for (const dir of elem.dirs) {\n+    if (elem[DIRS_OFFSET]) {\n+        for (const dir of elem[DIRS_OFFSET]) {\n             if (createDirEntry(dir, folders, fullPath, false)) {\n                 dirEntry.open = true;\n                 hasFoundFile = true;\n@@ -43,8 +47,8 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n \n     const files = document.createElement(\"div\");\n     files.className = \"files\";\n-    if (elem.files) {\n-        for (const file_text of elem.files) {\n+    if (elem[FILES_OFFSET]) {\n+        for (const file_text of elem[FILES_OFFSET]) {\n             const file = document.createElement(\"a\");\n             file.innerText = file_text;\n             file.href = rootPath + \"src/\" + fullPath + file_text + \".html\";\n@@ -125,7 +129,7 @@ function createSourceSidebar() {\n     title.innerText = \"Files\";\n     sidebar.appendChild(title);\n     Object.keys(sourcesIndex).forEach(key => {\n-        sourcesIndex[key].name = key;\n+        sourcesIndex[key][NAME_OFFSET] = key;\n         hasFoundFile = createDirEntry(sourcesIndex[key], sidebar, \"\",\n             hasFoundFile);\n     });"}]}