{"sha": "722b4d695964906807b12379577bce5ee3d23e08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMmI0ZDY5NTk2NDkwNjgwN2IxMjM3OTU3N2JjZTVlZTNkMjNlMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-17T05:00:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-17T05:00:14Z"}, "message": "Auto merge of #57670 - rust-lang:beta-next, r=Mark-Simulacrum\n\nPrepare beta 1.33.0\n\nThis PR includes the usual changes for a new beta, and suppresses a few lints on libcore: those lints are false positives caused by an internal attribute (`rustc_layout_scalar_valid_range_start`) and only happen on stage0.\n\nr? @Mark-Simulacrum", "tree": {"sha": "b347115ede095d9266fb17f12a52ce980735cb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b347115ede095d9266fb17f12a52ce980735cb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722b4d695964906807b12379577bce5ee3d23e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722b4d695964906807b12379577bce5ee3d23e08", "html_url": "https://github.com/rust-lang/rust/commit/722b4d695964906807b12379577bce5ee3d23e08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722b4d695964906807b12379577bce5ee3d23e08/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956dba47d33fc8b2bdabcd50e5bfed264b570382", "url": "https://api.github.com/repos/rust-lang/rust/commits/956dba47d33fc8b2bdabcd50e5bfed264b570382", "html_url": "https://github.com/rust-lang/rust/commit/956dba47d33fc8b2bdabcd50e5bfed264b570382"}, {"sha": "b54a00accdadc9d98571050888dab701ca7bd2fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54a00accdadc9d98571050888dab701ca7bd2fd", "html_url": "https://github.com/rust-lang/rust/commit/b54a00accdadc9d98571050888dab701ca7bd2fd"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "b7e8176255997fb12ffc394c471faf561abbfd0f", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/722b4d695964906807b12379577bce5ee3d23e08/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/722b4d695964906807b12379577bce5ee3d23e08/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=722b4d695964906807b12379577bce5ee3d23e08", "patch": "@@ -43,7 +43,7 @@ fi\n #\n # FIXME: need a scheme for changing this `nightly` value to `beta` and `stable`\n #        either automatically or manually.\n-export RUST_RELEASE_CHANNEL=nightly\n+export RUST_RELEASE_CHANNEL=beta\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\""}, {"sha": "3a3fd27d52532bb3f93f7929b3c6938e6fd2c76d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/722b4d695964906807b12379577bce5ee3d23e08/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722b4d695964906807b12379577bce5ee3d23e08/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=722b4d695964906807b12379577bce5ee3d23e08", "patch": "@@ -47,6 +47,8 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n+                // FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n+                #[cfg_attr(stage0, allow(unused_attributes))]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n                 pub struct $Ty($Int);\n             }\n@@ -68,6 +70,8 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n+                        // FIXME: this unsafe block is actually needed\n+                        #[cfg_attr(stage0, allow(unused_unsafe))]\n                         Some(unsafe { $Ty(n) })\n                     } else {\n                         None"}, {"sha": "979a7b231ecf3144fa9fa8df1e62c3f52422f7c4", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/722b4d695964906807b12379577bce5ee3d23e08/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722b4d695964906807b12379577bce5ee3d23e08/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=722b4d695964906807b12379577bce5ee3d23e08", "patch": "@@ -2718,6 +2718,8 @@ impl<T: ?Sized> PartialOrd for *mut T {\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[doc(hidden)]\n #[repr(transparent)]\n+// FIXME: the rustc_layout_scalar_valid_range_start attr is marked as unused\n+#[cfg_attr(stage0, allow(unused_attributes))]\n #[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n     pointer: *const T,\n@@ -2783,6 +2785,8 @@ impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n+            // FIXME: this unsafe block is actually needed\n+            #[cfg_attr(stage0, allow(unused_unsafe))]\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n@@ -2839,20 +2843,26 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n     fn from(p: NonNull<T>) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { Unique { pointer: p.pointer, _marker: PhantomData } }\n     }\n }\n@@ -3042,6 +3052,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: unique.pointer } }\n     }\n }\n@@ -3050,6 +3062,8 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n@@ -3058,6 +3072,8 @@ impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n+        // FIXME: this unsafe block is actually needed\n+        #[cfg_attr(stage0, allow(unused_unsafe))]\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "0983add49ca776bd5a6bac080f3d3b287949942d", "filename": "src/stage0.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/722b4d695964906807b12379577bce5ee3d23e08/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/722b4d695964906807b12379577bce5ee3d23e08/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=722b4d695964906807b12379577bce5ee3d23e08", "patch": "@@ -12,9 +12,9 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-01-04\n-rustc: beta\n-cargo: beta\n+date: 2019-01-16\n+rustc: 1.32.0\n+cargo: 0.33.0\n \n # When making a stable release the process currently looks like:\n #\n@@ -34,4 +34,4 @@ cargo: beta\n # looking at a beta source tarball and it's uncommented we'll shortly comment it\n # out.\n \n-#dev: 1\n+dev: 1"}, {"sha": "9b5d4b755617d60dd841912b354be8a6b6b3849a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=722b4d695964906807b12379577bce5ee3d23e08", "patch": "@@ -1 +1 @@\n-Subproject commit 2b4a5f1f0bb6e13759e88ea9512527b0beba154f\n+Subproject commit 9b5d4b755617d60dd841912b354be8a6b6b3849a"}]}