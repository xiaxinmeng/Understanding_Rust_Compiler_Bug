{"sha": "4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmN2JhNTE1YzJiZmFjZGU2ZjA5ZTg2MGMzY2M5ZjM3YmI3NDI0ODE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-27T09:16:59Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-07-04T10:29:26Z"}, "message": "rename hir::map::local_def_id to local_def_id_from_node_id", "tree": {"sha": "a54f2b9a82afa41bcf8816176cb00202d841eb5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54f2b9a82afa41bcf8816176cb00202d841eb5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "html_url": "https://github.com/rust-lang/rust/commit/4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7987719dbe7158df9304932ce5fb9145715626cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7987719dbe7158df9304932ce5fb9145715626cb", "html_url": "https://github.com/rust-lang/rust/commit/7987719dbe7158df9304932ce5fb9145715626cb"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "31d5780a0c00b6bab433f78336c3045001e34d62", "filename": "src/librustc/dep_graph/dep_tracking_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_tracking_map.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -55,7 +55,7 @@ impl<M: DepTrackingMapConfig> MemoizationMap for RefCell<DepTrackingMap<M>> {\n     ///\n     /// ```\n     /// fn type_of_item(..., item: &hir::Item) -> Ty<'tcx> {\n-    ///     let item_def_id = ccx.tcx.hir().local_def_id(it.id);\n+    ///     let item_def_id = ccx.tcx.hir().local_def_id_from_node_id(it.id);\n     ///     ccx.tcx.item_types.memoized(item_def_id, || {\n     ///         ccx.tcx.dep_graph.read(DepNode::Hir(item_def_id)); // (*)\n     ///         compute_type_of_item(ccx, item)"}, {"sha": "0def5e12a60bd176ecdbe0cedd8c0f7bc935bc95", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -10,7 +10,8 @@ pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n     let errors = Lock::new(Vec::new());\n \n     par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n-        hir_map.visit_item_likes_in_module(hir_map.local_def_id(*module_id), &mut OuterVisitor {\n+        let local_def_id = hir_map.local_def_id_from_node_id(*module_id);\n+        hir_map.visit_item_likes_in_module(local_def_id, &mut OuterVisitor {\n             hir_map,\n             errors: &errors,\n         });"}, {"sha": "76f4512a8764375dedd282e144b7b51d77f4a90b", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -231,10 +231,10 @@ impl<'hir> Map<'hir> {\n     }\n \n     #[inline]\n-    pub fn local_def_id(&self, node: NodeId) -> DefId {\n+    pub fn local_def_id_from_node_id(&self, node: NodeId) -> DefId {\n         self.opt_local_def_id(node).unwrap_or_else(|| {\n             let hir_id = self.node_to_hir_id(node);\n-            bug!(\"local_def_id: no entry for `{}`, which has a map of `{:?}`\",\n+            bug!(\"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n                  node, self.find_entry(hir_id))\n         })\n     }"}, {"sha": "be3070277510ce2422ea4cd642e51d5c0c61328b", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -140,7 +140,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                     // region at the right depth with the same index\n                     (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n                         debug!(\n-                            \"EarlyBound self.infcx.tcx.hir().local_def_id(id)={:?} \\\n+                            \"EarlyBound self.infcx.tcx.hir().local_def_id_from_node_id(id)={:?} \\\n                              def_id={:?}\",\n                             id,\n                             def_id\n@@ -162,7 +162,7 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                             \"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n                             debruijn_index\n                         );\n-                        debug!(\"self.infcx.tcx.hir().local_def_id(id)={:?}\", id);\n+                        debug!(\"self.infcx.tcx.hir().local_def_id_from_node_id(id)={:?}\", id);\n                         debug!(\"def_id={:?}\", def_id);\n                         if debruijn_index == self.current_index && id == def_id {\n                             self.found_type = Some(arg);\n@@ -232,7 +232,7 @@ impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n \n             (Some(rl::Region::EarlyBound(_, id, _)), ty::BrNamed(def_id, _)) => {\n                 debug!(\n-                    \"EarlyBound self.infcx.tcx.hir().local_def_id(id)={:?} \\\n+                    \"EarlyBound self.infcx.tcx.hir().local_def_id_from_node_id(id)={:?} \\\n                      def_id={:?}\",\n                     id,\n                     def_id"}, {"sha": "9b1e9a22ee0b94bae62abdf0fe56a0af05dd92d2", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -1500,7 +1500,7 @@ pub fn check_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n         time(tcx.sess, \"module lints\", || {\n             // Run per-module lints\n             par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                tcx.ensure().lint_mod(tcx.hir().local_def_id(module));\n+                tcx.ensure().lint_mod(tcx.hir().local_def_id_from_node_id(module));\n             });\n         });\n     });"}, {"sha": "42719ae26b7d6bc6169d1f4eb509b46303abdf24", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -1304,15 +1304,15 @@ impl<'tcx> TyCtxt<'tcx> {\n             maybe_unused_trait_imports:\n                 resolutions.maybe_unused_trait_imports\n                     .into_iter()\n-                    .map(|id| hir.local_def_id(id))\n+                    .map(|id| hir.local_def_id_from_node_id(id))\n                     .collect(),\n             maybe_unused_extern_crates:\n                 resolutions.maybe_unused_extern_crates\n                     .into_iter()\n-                    .map(|(id, sp)| (hir.local_def_id(id), sp))\n+                    .map(|(id, sp)| (hir.local_def_id_from_node_id(id), sp))\n                     .collect(),\n             glob_map: resolutions.glob_map.into_iter().map(|(id, names)| {\n-                (hir.local_def_id(id), names)\n+                (hir.local_def_id_from_node_id(id), names)\n             }).collect(),\n             extern_prelude: resolutions.extern_prelude,\n             hir_map: hir,"}, {"sha": "3be06e291ff09096a2a26bc9ded21062268ff827", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -887,7 +887,7 @@ fn print_with_analysis(\n     let mut print = || match ppm {\n         PpmMir | PpmMirCFG => {\n             if let Some(nodeid) = nodeid {\n-                let def_id = tcx.hir().local_def_id(nodeid);\n+                let def_id = tcx.hir().local_def_id_from_node_id(nodeid);\n                 match ppm {\n                     PpmMir => write_mir_pretty(tcx, Some(def_id), &mut out),\n                     PpmMirCFG => write_mir_graphviz(tcx, Some(def_id), &mut out),"}, {"sha": "9a5eb2b93d574f0330f196c8e81cce978cdf669c", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -899,9 +899,10 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             });\n         }, {\n             par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n-                tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n-                tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n+                tcx.ensure().check_mod_loops(tcx.hir().local_def_id_from_node_id(module));\n+                tcx.ensure().check_mod_attrs(tcx.hir().local_def_id_from_node_id(module));\n+                tcx.ensure().check_mod_unstable_api_usage(\n+                    tcx.hir().local_def_id_from_node_id(module));\n             });\n         });\n     });\n@@ -924,9 +925,9 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                     // \"not all control paths return a value\" is reported here.\n                     //\n                     // maybe move the check to a MIR pass?\n-                    tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n+                    tcx.ensure().check_mod_liveness(tcx.hir().local_def_id_from_node_id(module));\n \n-                    tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n+                    tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id_from_node_id(module));\n                 });\n             });\n         });\n@@ -986,7 +987,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n         }, {\n             time(sess, \"privacy checking modules\", || {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {\n-                    tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n+                    tcx.ensure().check_mod_privacy(tcx.hir().local_def_id_from_node_id(module));\n                 });\n             });\n         });"}, {"sha": "5289013c9ea7e3f70549905bd9e6ae6265221468", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -123,7 +123,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     where\n         F: FnOnce(&mut DumpVisitor<'l, 'tcx, 'll, O>),\n     {\n-        let item_def_id = self.tcx.hir().local_def_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n         if self.tcx.has_typeck_tables(item_def_id) {\n             let tables = self.tcx.typeck_tables_of(item_def_id);\n             let old_tables = self.save_ctxt.tables;\n@@ -436,7 +436,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         attrs: &'l [Attribute],\n     ) {\n         let qualname = format!(\"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id(id)));\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n \n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n@@ -481,7 +481,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         debug!(\"process_struct {:?} {:?}\", item, item.span);\n         let name = item.ident.to_string();\n         let qualname = format!(\"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n \n         let kind = match item.node {\n             ast::ItemKind::Struct(_, _) => DefKind::Struct,\n@@ -683,7 +683,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.process_generic_params(generics, \"\", item.id);\n         for impl_item in impl_items {\n             let map = &self.tcx.hir();\n-            self.process_impl_item(impl_item, map.local_def_id(item.id));\n+            self.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id));\n         }\n     }\n \n@@ -696,7 +696,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     ) {\n         let name = item.ident.to_string();\n         let qualname = format!(\"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n         let mut val = name.clone();\n         if !generics.params.is_empty() {\n             val.push_str(&generic_params_to_string(&generics.params));\n@@ -764,7 +764,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.process_generic_params(generics, &qualname, item.id);\n         for method in methods {\n             let map = &self.tcx.hir();\n-            self.process_trait_item(method, map.local_def_id(item.id))\n+            self.process_trait_item(method, map.local_def_id_from_node_id(item.id))\n         }\n     }\n \n@@ -1109,7 +1109,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 // FIXME do something with _bounds (for type refs)\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(trait_item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(trait_item.id)));\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n                     let span = self.span_from_span(trait_item.ident.span);\n@@ -1261,7 +1261,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 };\n \n                 // Make a comma-separated list of names of imported modules.\n-                let def_id = self.tcx.hir().local_def_id(id);\n+                let def_id = self.tcx.hir().local_def_id_from_node_id(id);\n                 let names = self.tcx.names_imported_by_glob_use(def_id);\n                 let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n@@ -1318,7 +1318,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n         assert_eq!(id, ast::CRATE_NODE_ID);\n \n         let qualname = format!(\"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id(id)));\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n \n         let cm = self.tcx.sess.source_map();\n         let filename = cm.span_to_filename(span);\n@@ -1408,7 +1408,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n             }\n             Ty(ref ty, ref ty_params) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 let value = ty_to_string(&ty);\n                 if !self.span.filter_generated(item.ident.span) {\n                     let span = self.span_from_span(item.ident.span);\n@@ -1439,7 +1439,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n             }\n             Existential(ref _bounds, ref ty_params) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 // FIXME do something with _bounds\n                 let value = String::new();\n                 if !self.span.filter_generated(item.ident.span) {"}, {"sha": "481e501d24a6ef974462804134b1281a9dbae29a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -135,7 +135,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n         let qualname = format!(\"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n         match item.node {\n             ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 filter!(self.span_utils, item.ident.span);\n@@ -186,7 +186,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         match item.node {\n             ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n                 Some(Data::DefData(Def {\n                     kind: DefKind::Function,\n@@ -205,7 +205,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             }\n             ast::ItemKind::Static(ref typ, ..) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n \n                 filter!(self.span_utils, item.ident.span);\n \n@@ -229,7 +229,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             }\n             ast::ItemKind::Const(ref typ, _) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);\n@@ -252,7 +252,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             }\n             ast::ItemKind::Mod(ref m) => {\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n \n                 let cm = self.tcx.sess.source_map();\n                 let filename = cm.span_to_filename(m.inner);\n@@ -280,7 +280,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Enum(ref def, _) => {\n                 let name = item.ident.to_string();\n                 let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id(item.id)));\n+                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n                 filter!(self.span_utils, item.ident.span);\n                 let variants_str = def.variants\n                     .iter()\n@@ -365,10 +365,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         if let Some(ident) = field.ident {\n             let name = ident.to_string();\n             let qualname = format!(\"::{}::{}\",\n-                self.tcx.def_path_str(self.tcx.hir().local_def_id(scope)),\n+                self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(scope)),\n                 ident);\n             filter!(self.span_utils, ident.span);\n-            let def_id = self.tcx.hir().local_def_id(field.id);\n+            let def_id = self.tcx.hir().local_def_id_from_node_id(field.id);\n             let typ = self.tcx.type_of(def_id).to_string();\n \n \n@@ -400,7 +400,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n         let (qualname, parent_scope, decl_id, docs, attributes) =\n-            match self.tcx.impl_of_method(self.tcx.hir().local_def_id(id)) {\n+            match self.tcx.impl_of_method(self.tcx.hir().local_def_id_from_node_id(id)) {\n                 Some(impl_id) => match self.tcx.hir().get_if_local(impl_id) {\n                     Some(Node::Item(item)) => match item.node {\n                         hir::ItemKind::Impl(.., ref ty, _) => {\n@@ -451,7 +451,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         );\n                     }\n                 },\n-                None => match self.tcx.trait_of_item(self.tcx.hir().local_def_id(id)) {\n+                None => match self.tcx.trait_of_item(self.tcx.hir().local_def_id_from_node_id(id)) {\n                     Some(def_id) => {\n                         let mut docs = String::new();\n                         let mut attrs = vec![];"}, {"sha": "d03a815db57829c4af8ee2f89a9c656e9763b2f2", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -54,7 +54,7 @@ pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n     for &module in tcx.hir().krate().modules.keys() {\n-        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_impl_wf(tcx.hir().local_def_id_from_node_id(module));\n     }\n }\n "}, {"sha": "5ba2de1b9c5b7e7eb2a84b6c0b6f7f01aa90f18e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -310,7 +310,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         time(tcx.sess, \"type collecting\", || {\n             for &module in tcx.hir().krate().modules.keys() {\n-                tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n+                tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id_from_node_id(module));\n             }\n         });\n     })?;\n@@ -345,7 +345,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n \n     time(tcx.sess, \"item-types checking\", || {\n         for &module in tcx.hir().krate().modules.keys() {\n-            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id_from_node_id(module));\n         }\n     });\n "}, {"sha": "e6e57eb230adddae799b67134ea56bc04982beb2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7ba515c2bfacde6f09e860c3cc9f37bb742481/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4f7ba515c2bfacde6f09e860c3cc9f37bb742481", "patch": "@@ -654,7 +654,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             deprecation: self.depr.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: cx.tcx.hir().local_def_id_from_node_id(self.id),\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n                items,\n@@ -2982,10 +2982,11 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n+                let local_def_id = cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID);\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n-                    decl: (cx.tcx.hir().local_def_id(ast::CRATE_NODE_ID), sig).clean(cx),\n+                    decl: (local_def_id, sig).clean(cx),\n                     abi: sig.abi(),\n                 })\n             }\n@@ -3991,7 +3992,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(ast::CRATE_NODE_ID),\n+            def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,"}]}