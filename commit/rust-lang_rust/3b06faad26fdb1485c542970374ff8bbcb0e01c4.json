{"sha": "3b06faad26fdb1485c542970374ff8bbcb0e01c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDZmYWFkMjZmZGIxNDg1YzU0Mjk3MDM3NGZmOGJiY2IwZTAxYzQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-09T20:10:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-24T21:05:12Z"}, "message": "Make closures impl closure traits", "tree": {"sha": "370ec4c128b6160b2fd72351eb3875f04e3a94fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/370ec4c128b6160b2fd72351eb3875f04e3a94fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b06faad26fdb1485c542970374ff8bbcb0e01c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b06faad26fdb1485c542970374ff8bbcb0e01c4", "html_url": "https://github.com/rust-lang/rust/commit/3b06faad26fdb1485c542970374ff8bbcb0e01c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b06faad26fdb1485c542970374ff8bbcb0e01c4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619a8185a607b216c64b58d230c3949ccef98a37", "url": "https://api.github.com/repos/rust-lang/rust/commits/619a8185a607b216c64b58d230c3949ccef98a37", "html_url": "https://github.com/rust-lang/rust/commit/619a8185a607b216c64b58d230c3949ccef98a37"}], "stats": {"total": 229, "additions": 188, "deletions": 41}, "files": [{"sha": "2b20ae02b08ceac6788fc6c50c655085e1ae890e", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=3b06faad26fdb1485c542970374ff8bbcb0e01c4", "patch": "@@ -13,8 +13,8 @@ use crate::{\n     nameres::{CrateDefMap, ImportSourceMap, Namespace, RawItems},\n     traits::TraitData,\n     ty::{\n-        method_resolution::CrateImplBlocks, CallableDef, FnSig, GenericPredicate, InferenceResult,\n-        Substs, Ty, TypableDef, TypeCtor,\n+        method_resolution::CrateImplBlocks, traits::Impl, CallableDef, FnSig, GenericPredicate,\n+        InferenceResult, Substs, Ty, TypableDef, TypeCtor,\n     },\n     type_alias::TypeAliasData,\n     AstIdMap, Const, ConstData, Crate, DefWithBody, Enum, ErasedFileAstId, ExprScopes, FnData,\n@@ -50,7 +50,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_type_ctor(&self, type_ctor: TypeCtor) -> ids::TypeCtorId;\n     #[salsa::interned]\n-    fn intern_impl_block(&self, impl_block: ImplBlock) -> ids::GlobalImplId;\n+    fn intern_impl(&self, impl_: Impl) -> ids::GlobalImplId;\n }\n \n /// This database has access to source code, so queries here are not really"}, {"sha": "13090f89ddcc10774b50979a894677ff5b4a2e36", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3b06faad26fdb1485c542970374ff8bbcb0e01c4", "patch": "@@ -3990,6 +3990,7 @@ fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n fn closure_1() {\n     assert_snapshot!(\n         infer(r#\"\n+#[lang = \"fn_once\"]\n trait FnOnce<Args> {\n     type Output;\n }\n@@ -4000,39 +4001,39 @@ impl<T> Option<T> {\n }\n \n fn test() {\n-    let x = Option::Some(1i32);\n+    let x = Option::Some(1u32);\n     x.map(|v| v + 1);\n     x.map(|_v| 1u64);\n     let y: Option<i64> = x.map(|_v| 1);\n }\n \"#),\n         @r###\"\n-    [128; 132) 'self': Option<T>\n-    [134; 135) 'f': F\n-    [145; 147) '{}': ()\n-    [161; 280) '{     ... 1); }': ()\n-    [171; 172) 'x': Option<i32>\n-    [175; 187) 'Option::Some': Some<i32>(T) -> Option<T>\n-    [175; 193) 'Option...(1i32)': Option<i32>\n-    [188; 192) '1i32': i32\n-    [199; 200) 'x': Option<i32>\n-    [199; 215) 'x.map(...v + 1)': {unknown}\n-    [205; 214) '|v| v + 1': |{unknown}| -> i32\n-    [206; 207) 'v': {unknown}\n-    [209; 210) 'v': {unknown}\n-    [209; 214) 'v + 1': i32\n-    [213; 214) '1': i32\n-    [221; 222) 'x': Option<i32>\n-    [221; 237) 'x.map(... 1u64)': {unknown}\n-    [227; 236) '|_v| 1u64': |{unknown}| -> u64\n-    [228; 230) '_v': {unknown}\n-    [232; 236) '1u64': u64\n-    [247; 248) 'y': Option<i64>\n-    [264; 265) 'x': Option<i32>\n-    [264; 277) 'x.map(|_v| 1)': Option<i64>\n-    [270; 276) '|_v| 1': |{unknown}| -> i32\n-    [271; 273) '_v': {unknown}\n-    [275; 276) '1': i32\n+    [148; 152) 'self': Option<T>\n+    [154; 155) 'f': F\n+    [165; 167) '{}': ()\n+    [181; 300) '{     ... 1); }': ()\n+    [191; 192) 'x': Option<u32>\n+    [195; 207) 'Option::Some': Some<u32>(T) -> Option<T>\n+    [195; 213) 'Option...(1u32)': Option<u32>\n+    [208; 212) '1u32': u32\n+    [219; 220) 'x': Option<u32>\n+    [219; 235) 'x.map(...v + 1)': {unknown}\n+    [225; 234) '|v| v + 1': |u32| -> i32\n+    [226; 227) 'v': u32\n+    [229; 230) 'v': u32\n+    [229; 234) 'v + 1': i32\n+    [233; 234) '1': i32\n+    [241; 242) 'x': Option<u32>\n+    [241; 257) 'x.map(... 1u64)': {unknown}\n+    [247; 256) '|_v| 1u64': |u32| -> u64\n+    [248; 250) '_v': u32\n+    [252; 256) '1u64': u64\n+    [267; 268) 'y': Option<i64>\n+    [284; 285) 'x': Option<u32>\n+    [284; 297) 'x.map(|_v| 1)': Option<i64>\n+    [290; 296) '|_v| 1': |u32| -> i32\n+    [291; 293) '_v': u32\n+    [295; 296) '1': i32\n     \"###\n     );\n }"}, {"sha": "8e256341d3231d4acc57746dd69b0a81ab5bd114", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=3b06faad26fdb1485c542970374ff8bbcb0e01c4", "patch": "@@ -9,7 +9,7 @@ use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n-use crate::{db::HirDatabase, Crate, ImplBlock, Trait};\n+use crate::{db::HirDatabase, expr::ExprId, Crate, DefWithBody, ImplBlock, Trait};\n \n use self::chalk::{from_chalk, ToChalk};\n \n@@ -252,3 +252,37 @@ pub enum Guidance {\n     /// There's no useful information to feed back to type inference\n     Unknown,\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub enum FnTrait {\n+    FnOnce,\n+    FnMut,\n+    Fn,\n+}\n+\n+impl FnTrait {\n+    fn lang_item_name(self) -> &'static str {\n+        match self {\n+            FnTrait::FnOnce => \"fn_once\",\n+            FnTrait::FnMut => \"fn_mut\",\n+            FnTrait::Fn => \"fn\",\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ClosureFnTraitImplData {\n+    def: DefWithBody,\n+    expr: ExprId,\n+    fn_trait: FnTrait,\n+}\n+\n+/// An impl. Usually this comes from an impl block, but some built-in types get\n+/// synthetic impls.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum Impl {\n+    /// A normal impl from an impl block.\n+    ImplBlock(ImplBlock),\n+    /// Closure types implement the Fn traits synthetically.\n+    ClosureFnTraitImpl(ClosureFnTraitImplData),\n+}"}, {"sha": "f229b1aef5ba1caada06b43aca798a41f71533a9", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 122, "deletions": 10, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b06faad26fdb1485c542970374ff8bbcb0e01c4/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=3b06faad26fdb1485c542970374ff8bbcb0e01c4", "patch": "@@ -12,7 +12,7 @@ use chalk_rust_ir::{AssociatedTyDatum, ImplDatum, StructDatum, TraitDatum};\n use ra_db::salsa::{InternId, InternKey};\n use test_utils::tested_by;\n \n-use super::{Canonical, ChalkContext, Obligation};\n+use super::{Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n     db::HirDatabase,\n     generics::GenericDef,\n@@ -111,7 +111,7 @@ impl ToChalk for Ty {\n             }\n             chalk_ir::Ty::ForAll(_) => unimplemented!(),\n             chalk_ir::Ty::BoundVar(idx) => Ty::Bound(idx as u32),\n-            chalk_ir::Ty::InferenceVar(_iv) => panic!(\"unexpected chalk infer ty\"),\n+            chalk_ir::Ty::InferenceVar(_iv) => Ty::Unknown,\n         }\n     }\n }\n@@ -175,15 +175,15 @@ impl ToChalk for TypeCtor {\n     }\n }\n \n-impl ToChalk for ImplBlock {\n+impl ToChalk for Impl {\n     type Chalk = chalk_ir::ImplId;\n \n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::ImplId {\n-        db.intern_impl_block(self).into()\n+        db.intern_impl(self).into()\n     }\n \n-    fn from_chalk(db: &impl HirDatabase, impl_id: chalk_ir::ImplId) -> ImplBlock {\n-        db.lookup_intern_impl_block(impl_id.into())\n+    fn from_chalk(db: &impl HirDatabase, impl_id: chalk_ir::ImplId) -> Impl {\n+        db.lookup_intern_impl(impl_id.into())\n     }\n }\n \n@@ -388,19 +388,36 @@ where\n     fn impls_for_trait(\n         &self,\n         trait_id: chalk_ir::TraitId,\n-        _parameters: &[Parameter],\n+        parameters: &[Parameter],\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n         if trait_id == UNKNOWN_TRAIT {\n             return Vec::new();\n         }\n         let trait_: Trait = from_chalk(self.db, trait_id);\n-        let result: Vec<_> = self\n+        let mut result: Vec<_> = self\n             .db\n             .impls_for_trait(self.krate, trait_)\n             .iter()\n-            .map(|impl_block| impl_block.to_chalk(self.db))\n+            .copied()\n+            .map(Impl::ImplBlock)\n+            .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n+\n+        let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref().clone());\n+        if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Closure { def, expr }, .. }) = ty {\n+            for fn_trait in\n+                [super::FnTrait::FnOnce, super::FnTrait::FnMut, super::FnTrait::Fn].iter().copied()\n+            {\n+                if let Some(actual_trait) = get_fn_trait(self.db, self.krate, fn_trait) {\n+                    if trait_ == actual_trait {\n+                        let impl_ = super::ClosureFnTraitImplData { def, expr, fn_trait };\n+                        result.push(Impl::ClosureFnTraitImpl(impl_).to_chalk(self.db));\n+                    }\n+                }\n+            }\n+        }\n+\n         debug!(\"impls_for_trait returned {} impls\", result.len());\n         result\n     }\n@@ -602,7 +619,21 @@ pub(crate) fn impl_datum_query(\n ) -> Arc<ImplDatum> {\n     let _p = ra_prof::profile(\"impl_datum\");\n     debug!(\"impl_datum {:?}\", impl_id);\n-    let impl_block: ImplBlock = from_chalk(db, impl_id);\n+    let impl_: Impl = from_chalk(db, impl_id);\n+    match impl_ {\n+        Impl::ImplBlock(impl_block) => impl_block_datum(db, krate, impl_id, impl_block),\n+        Impl::ClosureFnTraitImpl(data) => {\n+            closure_fn_trait_impl_datum(db, krate, impl_id, data).unwrap_or_else(invalid_impl_datum)\n+        }\n+    }\n+}\n+\n+fn impl_block_datum(\n+    db: &impl HirDatabase,\n+    krate: Crate,\n+    impl_id: ImplId,\n+    impl_block: ImplBlock,\n+) -> Arc<ImplDatum> {\n     let generic_params = impl_block.generic_params(db);\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = impl_block\n@@ -661,6 +692,87 @@ pub(crate) fn impl_datum_query(\n     Arc::new(impl_datum)\n }\n \n+fn invalid_impl_datum() -> Arc<ImplDatum> {\n+    let trait_ref = chalk_ir::TraitRef {\n+        trait_id: UNKNOWN_TRAIT,\n+        parameters: vec![chalk_ir::Ty::BoundVar(0).cast()],\n+    };\n+    let impl_datum_bound = chalk_rust_ir::ImplDatumBound {\n+        trait_ref: chalk_rust_ir::PolarizedTraitRef::Positive(trait_ref),\n+        where_clauses: Vec::new(),\n+        associated_ty_values: Vec::new(),\n+        impl_type: chalk_rust_ir::ImplType::External,\n+    };\n+    let impl_datum = ImplDatum { binders: make_binders(impl_datum_bound, 1) };\n+    Arc::new(impl_datum)\n+}\n+\n+fn closure_fn_trait_impl_datum(\n+    db: &impl HirDatabase,\n+    krate: Crate,\n+    impl_id: ImplId,\n+    data: super::ClosureFnTraitImplData,\n+) -> Option<Arc<ImplDatum>> {\n+    // for some closure |X, Y| -> Z:\n+    // impl<T, U, V> Fn<(T, U)> for closure<fn(T, U) -> V> { Output = V }\n+\n+    let fn_once_trait = get_fn_trait(db, krate, super::FnTrait::FnOnce)?;\n+    let trait_ = get_fn_trait(db, krate, data.fn_trait)?; // get corresponding fn trait\n+\n+    let num_args: u16 = match &db.body_hir(data.def)[data.expr] {\n+        crate::expr::Expr::Lambda { args, .. } => args.len() as u16,\n+        _ => {\n+            log::warn!(\"closure for closure type {:?} not found\", data);\n+            0\n+        }\n+    };\n+\n+    let arg_ty = Ty::apply(\n+        TypeCtor::Tuple { cardinality: num_args },\n+        (0..num_args).map(|i| Ty::Bound(i.into())).collect::<Vec<_>>().into(),\n+    );\n+    let output_ty = Ty::Bound(num_args.into());\n+    let sig_ty = Ty::apply(\n+        TypeCtor::FnPtr { num_args },\n+        (0..num_args + 1).map(|i| Ty::Bound(i.into())).collect::<Vec<_>>().into(),\n+    );\n+\n+    let self_ty = Ty::apply_one(TypeCtor::Closure { def: data.def, expr: data.expr }, sig_ty);\n+\n+    let trait_ref = TraitRef { trait_, substs: vec![self_ty, arg_ty].into() };\n+\n+    let output_ty_id = fn_once_trait.associated_type_by_name(db, &crate::name::OUTPUT_TYPE)?;\n+\n+    let output_ty_value = chalk_rust_ir::AssociatedTyValue {\n+        associated_ty_id: output_ty_id.to_chalk(db),\n+        impl_id,\n+        value: make_binders(\n+            chalk_rust_ir::AssociatedTyValueBound { ty: output_ty.to_chalk(db) },\n+            0,\n+        ),\n+    };\n+\n+    let impl_type = chalk_rust_ir::ImplType::External;\n+\n+    let impl_datum_bound = chalk_rust_ir::ImplDatumBound {\n+        trait_ref: chalk_rust_ir::PolarizedTraitRef::Positive(trait_ref.to_chalk(db)),\n+        where_clauses: Vec::new(),\n+        associated_ty_values: vec![output_ty_value],\n+        impl_type,\n+    };\n+    let impl_datum = ImplDatum { binders: make_binders(impl_datum_bound, num_args as usize + 1) };\n+    Some(Arc::new(impl_datum))\n+}\n+\n+fn get_fn_trait(db: &impl HirDatabase, krate: Crate, fn_trait: super::FnTrait) -> Option<Trait> {\n+    let lang_items = db.lang_items(krate);\n+    let target = lang_items.target(fn_trait.lang_item_name())?;\n+    match target {\n+        crate::lang_item::LangItemTarget::Trait(t) => Some(*t),\n+        _ => None,\n+    }\n+}\n+\n fn id_from_chalk<T: InternKey>(chalk_id: chalk_ir::RawId) -> T {\n     T::from_intern_id(InternId::from(chalk_id.index))\n }"}]}