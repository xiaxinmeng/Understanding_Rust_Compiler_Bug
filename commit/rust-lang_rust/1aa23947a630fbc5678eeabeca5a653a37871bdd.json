{"sha": "1aa23947a630fbc5678eeabeca5a653a37871bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTIzOTQ3YTYzMGZiYzU2NzhlZWFiZWNhNWE2NTNhMzc4NzFiZGQ=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-07T08:17:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T00:25:35Z"}, "message": "core: add str::splitn_char and fix str::splitn_char_iter", "tree": {"sha": "1d398665fa2c9c6ca62c825ff78c6ddab9be88b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d398665fa2c9c6ca62c825ff78c6ddab9be88b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa23947a630fbc5678eeabeca5a653a37871bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa23947a630fbc5678eeabeca5a653a37871bdd", "html_url": "https://github.com/rust-lang/rust/commit/1aa23947a630fbc5678eeabeca5a653a37871bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa23947a630fbc5678eeabeca5a653a37871bdd/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0396c34adc95efc0451536554a6f7c928c1e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0396c34adc95efc0451536554a6f7c928c1e61", "html_url": "https://github.com/rust-lang/rust/commit/2b0396c34adc95efc0451536554a6f7c928c1e61"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "0c03aca1245842cd34b430069926287957aebb9f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1aa23947a630fbc5678eeabeca5a653a37871bdd/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa23947a630fbc5678eeabeca5a653a37871bdd/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1aa23947a630fbc5678eeabeca5a653a37871bdd", "patch": "@@ -38,11 +38,12 @@ export\n    chars,\n    substr,\n    slice,\n-   split_byte,\n-   splitn_byte,\n    split,\n    split_str,\n    split_char,\n+   splitn_char,\n+   split_byte,\n+   splitn_byte,\n    lines,\n    lines_any,\n    words,\n@@ -579,6 +580,34 @@ fn split_char(ss: str, cc: char) -> [str] {\n    split(ss, {|kk| kk == cc})\n }\n \n+/*\n+Function: splitn_char\n+\n+Splits a string into a vector of the substrings separated by a given character\n+up to `count` times\n+*/\n+fn splitn_char(ss: str, sep: char, count: uint) -> [str] unsafe {\n+\n+   let vv = [];\n+   let start = 0u, current = 0u, len = byte_len(ss);\n+   let splits_done = 0u;\n+\n+   while splits_done < count && current < len {\n+      // grab a char...\n+      let {ch, next} = char_range_at(ss, current);\n+\n+      if sep == ch {\n+         vec::push(vv, str::unsafe::slice_bytes(ss, start, current));\n+         start = next;\n+         splits_done += 1u;\n+      }\n+      current = next;\n+   }\n+\n+   vec::push(vv, str::unsafe::slice_bytes(ss, start, len));\n+   ret vv;\n+}\n+\n /*\n Function: lines\n \n@@ -808,12 +837,10 @@ fn split_char_iter(ss: str, cc: char, ff: fn(&&str)) {\n Function: splitn_char_iter\n \n Apply a function to each substring after splitting\n-by character, up to nn times\n-\n-FIXME: make this use chars when splitn/splitn_char is fixed\n+by character, up to `count` times\n */\n-fn splitn_char_iter(ss: str, sep: u8, count: uint, ff: fn(&&str)) unsafe {\n-   vec::iter(splitn_byte(ss, sep, count), ff)\n+fn splitn_char_iter(ss: str, sep: char, count: uint, ff: fn(&&str)) unsafe {\n+   vec::iter(splitn_char(ss, sep, count), ff)\n }\n \n /*\n@@ -1541,6 +1568,19 @@ mod tests {\n         assert [\"ok\"] == split_char(\"ok\", 'z');\n     }\n \n+    #[test]\n+    fn test_splitn_char () {\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        assert [\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\", \"Vi\u1ec7t Nam\"]\n+            == splitn_char(data, '\u534e', 1u);\n+\n+        assert [\"\", \"\", \"XXX\", \"YYYzWWWz\"]\n+            == splitn_char(\"zzXXXzYYYzWWWz\", 'z', 3u);\n+        assert [\"\",\"\"] == splitn_char(\"z\", 'z', 5u);\n+        assert [\"\"] == splitn_char(\"\", 'z', 5u);\n+        assert [\"ok\"] == splitn_char(\"ok\", 'z', 5u);\n+    }\n+\n     #[test]\n     fn test_lines () {\n         let lf = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n@@ -1955,7 +1995,7 @@ mod tests {\n \n         let ii = 0;\n \n-        splitn_char_iter(data, ' ' as u8, 2u) {|xx|\n+        splitn_char_iter(data, ' ', 2u) {|xx|\n             alt ii {\n               0 { assert \"\\nMary\" == xx; }\n               1 { assert \"had\"    == xx; }"}]}