{"sha": "3452d9d593d901622e4be835cb6eba710387796e", "node_id": "C_kwDOAAsO6NoAKDM0NTJkOWQ1OTNkOTAxNjIyZTRiZTgzNWNiNmViYTcxMDM4Nzc5NmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-30T17:06:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-30T17:06:04Z"}, "message": "Rollup merge of #102276 - ink-feather-org:const_closure_ext, r=fee1-dead\n\nAdded more const_closure functionality\n\nEnables ConstFnMutClosure to use a tuple of mutable references instead of just a mutable reference to a tuple.\n\nRemoves the new function, since it would barely be usable with this new code.\n\nr? `@fee1-dead`", "tree": {"sha": "3683ef8ac87703db1d7098a78dc600c08798c10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3683ef8ac87703db1d7098a78dc600c08798c10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3452d9d593d901622e4be835cb6eba710387796e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjNyH8CRBK7hj4Ov3rIwAAvJ0IAK73H5WZjkR0QLzVs6Tclyvv\nKGLJ/kAnLV5fDIiw2VZschzDAlfFgMU3ejecBlBp34Mptdb3+Lz2Dy0mqJ0E2ujD\nXQhj3eCRWnmhkesKjfOd2E03GeTnl797TtRYo5nQSucWj22XEvIyE973i5Ilnb0K\nkM99L++YsWrm6Xbu0NFNo8k6W8dZ0rWJ/fWHEz8GlhHQToHyAcewQPCxU27HSjEp\n3xx52YLVTovDfvSfnXqHAz5W/AHbZ6uUJmpD2DkQwzoHJO1u/BbdNcpOHxHlBHrK\ngYWgWeWysneurdYqVSLz6XHJ52/IOFZsdKBnSNhSPQ6iLoE3b1cujpo2Cdt3TPc=\n=sJN9\n-----END PGP SIGNATURE-----\n", "payload": "tree 3683ef8ac87703db1d7098a78dc600c08798c10d\nparent f914b82a754c6d85c0a909ab152f5b611defef73\nparent 10739d475e95b825a3b57a726da5266f7d50c9e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664557564 +0200\ncommitter GitHub <noreply@github.com> 1664557564 +0200\n\nRollup merge of #102276 - ink-feather-org:const_closure_ext, r=fee1-dead\n\nAdded more const_closure functionality\n\nEnables ConstFnMutClosure to use a tuple of mutable references instead of just a mutable reference to a tuple.\n\nRemoves the new function, since it would barely be usable with this new code.\n\nr? `@fee1-dead`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3452d9d593d901622e4be835cb6eba710387796e", "html_url": "https://github.com/rust-lang/rust/commit/3452d9d593d901622e4be835cb6eba710387796e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3452d9d593d901622e4be835cb6eba710387796e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f914b82a754c6d85c0a909ab152f5b611defef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f914b82a754c6d85c0a909ab152f5b611defef73", "html_url": "https://github.com/rust-lang/rust/commit/f914b82a754c6d85c0a909ab152f5b611defef73"}, {"sha": "10739d475e95b825a3b57a726da5266f7d50c9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/10739d475e95b825a3b57a726da5266f7d50c9e7", "html_url": "https://github.com/rust-lang/rust/commit/10739d475e95b825a3b57a726da5266f7d50c9e7"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "9e9c02093be203d208845880537a6d4a3288c654", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3452d9d593d901622e4be835cb6eba710387796e/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3452d9d593d901622e4be835cb6eba710387796e/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=3452d9d593d901622e4be835cb6eba710387796e", "patch": "@@ -16,15 +16,18 @@ use crate::marker::Destruct;\n /// assert!(7 == cl(2));\n /// assert!(8 == cl(1));\n /// ```\n-pub(crate) struct ConstFnMutClosure<'a, CapturedData: ?Sized, Function> {\n-    data: &'a mut CapturedData,\n-    func: Function,\n+pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n+    /// The Data captured by the Closure.\n+    /// Must be either a (mutable) reference or a tuple of (mutable) references.\n+    pub data: CapturedData,\n+    /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n+    pub func: Function,\n }\n-\n-impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Function> {\n+impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData, Function> {\n     /// Function for creating a new closure.\n     ///\n     /// `data` is the a mutable borrow of data that is captured from the environment.\n+    /// If you want Data to be a tuple of mutable Borrows, the struct must be constructed manually.\n     ///\n     /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n     ///   and return the return value of the closure.\n@@ -39,25 +42,36 @@ impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Fun\n     }\n }\n \n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnOnce<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function:\n-        ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-{\n-    type Output = ClosureReturnValue;\n+macro_rules! impl_fn_mut_tuple {\n+    ($($var:ident)*) => {\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+        {\n+            type Output = ClosureReturnValue;\n \n-    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-        self.call_mut(args)\n-    }\n-}\n-\n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnMut<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-{\n-    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-        (self.func)(self.data, args)\n-    }\n+            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+            self.call_mut(args)\n+            }\n+        }\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+        {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+                #[allow(non_snake_case)]\n+                let ($($var),*) = &mut self.data;\n+                (self.func)(($($var),*), args)\n+            }\n+        }\n+    };\n }\n+impl_fn_mut_tuple!(A);\n+impl_fn_mut_tuple!(A B);\n+impl_fn_mut_tuple!(A B C);\n+impl_fn_mut_tuple!(A B C D);\n+impl_fn_mut_tuple!(A B C D E);"}, {"sha": "84a69046807c4b3fb314afd6b96ed46e0dcf7bc4", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3452d9d593d901622e4be835cb6eba710387796e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3452d9d593d901622e4be835cb6eba710387796e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=3452d9d593d901622e4be835cb6eba710387796e", "patch": "@@ -379,7 +379,7 @@ pub(crate) type ChangeOutputType<T, V> = <<T as Try>::Residual as Residual<V>>::\n pub(crate) struct NeverShortCircuit<T>(pub T);\n \n impl<T> NeverShortCircuit<T> {\n-    /// Wrap a binary `FnMut` to return its result wrapped in a `NeverShortCircuit`.\n+    /// Implementation for building `ConstFnMutClosure` for wrapping the output of a ~const FnMut in a `NeverShortCircuit`.\n     #[inline]\n     pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n         f: &mut F,"}]}