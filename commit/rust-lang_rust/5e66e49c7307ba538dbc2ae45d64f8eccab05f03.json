{"sha": "5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "node_id": "C_kwDOAAsO6NoAKDVlNjZlNDljNzMwN2JhNTM4ZGJjMmFlNDVkNjRmOGVjY2FiMDVmMDM", "commit": {"author": {"name": "Roland Fredenhagen", "email": "dev@modprog.de", "date": "2023-01-16T17:39:16Z"}, "committer": {"name": "Roland Fredenhagen", "email": "dev@modprog.de", "date": "2023-01-16T17:39:16Z"}, "message": "move required_hashes into utils", "tree": {"sha": "6818abb6e5912dcb7e1fc14813f9af2fe8a8e7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6818abb6e5912dcb7e1fc14813f9af2fe8a8e7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpNSJzq73vBN5KqovCUr5kkEDXrYFAmPFi8QACgkQCUr5kkED\nXrZKHhAAjUZmnhHGkSOnE4XT/zQIyjtmZ6dWqzknaID4TV4YjqwsIfDYTe1m7dU0\nCPnbFeDkwefNCnqd4V5srspCJ21G8p/Eh6g19bs9Vm0szox3vewiAeij59GLwo37\njNj5R8jUwfWIObCepGfkUJH20lc6rUx2cmR5as82BQwnA2MFfemaUwO+UwZ1RrK7\nvnJEc8KszPXb8W13Ubgc+OcvB5XI0TX+4NdKabPpz1ntEVe3zHLFP+sEc0+iTl/N\n9vA0L0W80T0WbNGMMiYT3SoVevzgvj9E6Ge06JQWxzFN9OVZwWVpj3taTADAGl1c\njYfPWo1ITmUXwiCzotWFGHcwAlNNvaKFGxroHl/oYt4LMBg8AtMGH1qORhtQBmeN\nZJSRZ2Lb6+rzehVujEBRdXgVNfRVYwQF8swfhipQnQHBlk6JBQzQPsPYW1LZbsE0\nuKg09CeARnaYqECLW9KXNqOs7+KK+73Gusl5g5+Y5rvnmx/h3teeGeIiCs8zptWg\nbnFIkcpOspze5sFiCRjSrgFkbXbCkxBZrhM98FnXgtCy3ZGAVhZ0/f8sbyLKpNks\n3oCV63xboYdUbkem7KoAcN2VxDhQjxQEVwBhGYssWwgDm82yfeytQ9O7j56OX5eo\nyieUYahj+KtMsqEloHVsRSTzWl6FZ+dS+DO1Lo6YQo2J5qNjeHY=\n=5LtJ\n-----END PGP SIGNATURE-----", "payload": "tree 6818abb6e5912dcb7e1fc14813f9af2fe8a8e7f1\nparent 03bc46f96ba5c0bdf352cf32660d8760172dd010\nauthor Roland Fredenhagen <dev@modprog.de> 1673890756 +0100\ncommitter Roland Fredenhagen <dev@modprog.de> 1673890756 +0100\n\nmove required_hashes into utils\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "html_url": "https://github.com/rust-lang/rust/commit/5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/comments", "author": {"login": "ModProg", "id": 11978847, "node_id": "MDQ6VXNlcjExOTc4ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/11978847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ModProg", "html_url": "https://github.com/ModProg", "followers_url": "https://api.github.com/users/ModProg/followers", "following_url": "https://api.github.com/users/ModProg/following{/other_user}", "gists_url": "https://api.github.com/users/ModProg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ModProg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ModProg/subscriptions", "organizations_url": "https://api.github.com/users/ModProg/orgs", "repos_url": "https://api.github.com/users/ModProg/repos", "events_url": "https://api.github.com/users/ModProg/events{/privacy}", "received_events_url": "https://api.github.com/users/ModProg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ModProg", "id": 11978847, "node_id": "MDQ6VXNlcjExOTc4ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/11978847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ModProg", "html_url": "https://github.com/ModProg", "followers_url": "https://api.github.com/users/ModProg/followers", "following_url": "https://api.github.com/users/ModProg/following{/other_user}", "gists_url": "https://api.github.com/users/ModProg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ModProg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ModProg/subscriptions", "organizations_url": "https://api.github.com/users/ModProg/orgs", "repos_url": "https://api.github.com/users/ModProg/repos", "events_url": "https://api.github.com/users/ModProg/events{/privacy}", "received_events_url": "https://api.github.com/users/ModProg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03bc46f96ba5c0bdf352cf32660d8760172dd010", "url": "https://api.github.com/repos/rust-lang/rust/commits/03bc46f96ba5c0bdf352cf32660d8760172dd010", "html_url": "https://github.com/rust-lang/rust/commit/03bc46f96ba5c0bdf352cf32660d8760172dd010"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "226a5dd9fa8b7c09b1eddff4d500c10cb34d3e74", "filename": "crates/ide-assists/src/handlers/desugar_doc_comment.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs?ref=5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "patch": "@@ -5,11 +5,10 @@ use syntax::{\n     AstToken, TextRange,\n };\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n-\n-use super::{\n-    convert_comment_block::{line_comment_text, relevant_line_comments},\n-    raw_string::required_hashes,\n+use crate::{\n+    handlers::convert_comment_block::{line_comment_text, relevant_line_comments},\n+    utils::required_hashes,\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n \n // Assist: desugar_doc_comment"}, {"sha": "01420430bb41987fa33859813fbe425a45a42350", "filename": "crates/ide-assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "patch": "@@ -2,7 +2,7 @@ use std::borrow::Cow;\n \n use syntax::{ast, ast::IsString, AstToken, TextRange, TextSize};\n \n-use crate::{AssistContext, AssistId, AssistKind, Assists};\n+use crate::{utils::required_hashes, AssistContext, AssistId, AssistKind, Assists};\n \n // Assist: make_raw_string\n //\n@@ -155,33 +155,12 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<\n     })\n }\n \n-pub(crate) fn required_hashes(s: &str) -> usize {\n-    let mut res = 0usize;\n-    for idx in s.match_indices('\"').map(|(i, _)| i) {\n-        let (_, sub) = s.split_at(idx + 1);\n-        let n_hashes = sub.chars().take_while(|c| *c == '#').count();\n-        res = res.max(n_hashes + 1)\n-    }\n-    res\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n     use super::*;\n \n-    #[test]\n-    fn test_required_hashes() {\n-        assert_eq!(0, required_hashes(\"abc\"));\n-        assert_eq!(0, required_hashes(\"###\"));\n-        assert_eq!(1, required_hashes(\"\\\"\"));\n-        assert_eq!(2, required_hashes(\"\\\"#abc\"));\n-        assert_eq!(0, required_hashes(\"#abc\"));\n-        assert_eq!(3, required_hashes(\"#ab\\\"##c\"));\n-        assert_eq!(5, required_hashes(\"#ab\\\"##\\\"####c\"));\n-    }\n-\n     #[test]\n     fn make_raw_string_target() {\n         check_assist_target("}, {"sha": "8ed2b5239bc2f885ba02c7739a0de4473de07998", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e66e49c7307ba538dbc2ae45d64f8eccab05f03/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=5e66e49c7307ba538dbc2ae45d64f8eccab05f03", "patch": "@@ -758,3 +758,25 @@ pub(crate) fn convert_param_list_to_arg_list(list: ast::ParamList) -> ast::ArgLi\n     }\n     make::arg_list(args)\n }\n+\n+/// Calculate the number of hashes required for a raw string containing `s`\n+pub(crate) fn required_hashes(s: &str) -> usize {\n+    #[test]\n+    fn test_required_hashes() {\n+        assert_eq!(0, required_hashes(\"abc\"));\n+        assert_eq!(0, required_hashes(\"###\"));\n+        assert_eq!(1, required_hashes(\"\\\"\"));\n+        assert_eq!(2, required_hashes(\"\\\"#abc\"));\n+        assert_eq!(0, required_hashes(\"#abc\"));\n+        assert_eq!(3, required_hashes(\"#ab\\\"##c\"));\n+        assert_eq!(5, required_hashes(\"#ab\\\"##\\\"####c\"));\n+    }\n+\n+    let mut res = 0usize;\n+    for idx in s.match_indices('\"').map(|(i, _)| i) {\n+        let (_, sub) = s.split_at(idx + 1);\n+        let n_hashes = sub.chars().take_while(|c| *c == '#').count();\n+        res = res.max(n_hashes + 1)\n+    }\n+    res\n+}"}]}