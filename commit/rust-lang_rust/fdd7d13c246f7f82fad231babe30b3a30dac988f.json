{"sha": "fdd7d13c246f7f82fad231babe30b3a30dac988f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDdkMTNjMjQ2ZjdmODJmYWQyMzFiYWJlMzBiM2EzMGRhYzk4OGY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-03T14:07:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-10-04T10:47:53Z"}, "message": "Move E0509 diagnostic into mod borrowck_errors shared between ast- and mir-borrowck.", "tree": {"sha": "80ca23aaab75370bf08c52c6f41c7f5e48e3afbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ca23aaab75370bf08c52c6f41c7f5e48e3afbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd7d13c246f7f82fad231babe30b3a30dac988f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7d13c246f7f82fad231babe30b3a30dac988f", "html_url": "https://github.com/rust-lang/rust/commit/fdd7d13c246f7f82fad231babe30b3a30dac988f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7d13c246f7f82fad231babe30b3a30dac988f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a995b56a5e7352aec0aafd4972c3faaeed94083d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a995b56a5e7352aec0aafd4972c3faaeed94083d", "html_url": "https://github.com/rust-lang/rust/commit/a995b56a5e7352aec0aafd4972c3faaeed94083d"}], "stats": {"total": 213, "additions": 111, "deletions": 102}, "files": [{"sha": "1f2b917bdb9943154cd6ca5fc5e269f7c00a06e3", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=fdd7d13c246f7f82fad231babe30b3a30dac988f", "patch": "@@ -155,13 +155,9 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n         Categorization::Interior(ref b, mc::InteriorField(_)) => {\n             match b.ty.sty {\n                 ty::TyAdt(def, _) if def.has_dtor(bccx.tcx) => {\n-                    let mut err = struct_span_err!(bccx, move_from.span, E0509,\n-                                                   \"cannot move out of type `{}`, \\\n-                                                   which implements the `Drop` trait\",\n-                                                   b.ty);\n-                    err.span_label(move_from.span, \"cannot move out of here\");\n-                    err\n-                },\n+                    bccx.cannot_move_out_of_interior_of_drop(\n+                        move_from.span, b.ty, Origin::Ast)\n+                }\n                 _ => {\n                     span_bug!(move_from.span, \"this path should not cause illegal move\");\n                 }"}, {"sha": "031dbcb1ebb91c2a0198476898eb072b3a04c5ae", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=fdd7d13c246f7f82fad231babe30b3a30dac988f", "patch": "@@ -317,101 +317,6 @@ fn main() {\n ```\n \"##,\n \n-E0509: r##\"\n-This error occurs when an attempt is made to move out of a value whose type\n-implements the `Drop` trait.\n-\n-Example of erroneous code:\n-\n-```compile_fail,E0509\n-struct FancyNum {\n-    num: usize\n-}\n-\n-struct DropStruct {\n-    fancy: FancyNum\n-}\n-\n-impl Drop for DropStruct {\n-    fn drop(&mut self) {\n-        // Destruct DropStruct, possibly using FancyNum\n-    }\n-}\n-\n-fn main() {\n-    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};\n-    let fancy_field = drop_struct.fancy; // Error E0509\n-    println!(\"Fancy: {}\", fancy_field.num);\n-    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope\n-}\n-```\n-\n-Here, we tried to move a field out of a struct of type `DropStruct` which\n-implements the `Drop` trait. However, a struct cannot be dropped if one or\n-more of its fields have been moved.\n-\n-Structs implementing the `Drop` trait have an implicit destructor that gets\n-called when they go out of scope. This destructor may use the fields of the\n-struct, so moving out of the struct could make it impossible to run the\n-destructor. Therefore, we must think of all values whose type implements the\n-`Drop` trait as single units whose fields cannot be moved.\n-\n-This error can be fixed by creating a reference to the fields of a struct,\n-enum, or tuple using the `ref` keyword:\n-\n-```\n-struct FancyNum {\n-    num: usize\n-}\n-\n-struct DropStruct {\n-    fancy: FancyNum\n-}\n-\n-impl Drop for DropStruct {\n-    fn drop(&mut self) {\n-        // Destruct DropStruct, possibly using FancyNum\n-    }\n-}\n-\n-fn main() {\n-    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};\n-    let ref fancy_field = drop_struct.fancy; // No more errors!\n-    println!(\"Fancy: {}\", fancy_field.num);\n-    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope\n-}\n-```\n-\n-Note that this technique can also be used in the arms of a match expression:\n-\n-```\n-struct FancyNum {\n-    num: usize\n-}\n-\n-enum DropEnum {\n-    Fancy(FancyNum)\n-}\n-\n-impl Drop for DropEnum {\n-    fn drop(&mut self) {\n-        // Destruct DropEnum, possibly using FancyNum\n-    }\n-}\n-\n-fn main() {\n-    // Creates and enum of type `DropEnum`, which implements `Drop`\n-    let drop_enum = DropEnum::Fancy(FancyNum{num: 10});\n-    match drop_enum {\n-        // Creates a reference to the inside of `DropEnum::Fancy`\n-        DropEnum::Fancy(ref fancy_field) => // No error!\n-            println!(\"It was fancy-- {}!\", fancy_field.num),\n-    }\n-    // implicit call to `drop_enum.drop()` as drop_enum goes out of scope\n-}\n-```\n-\"##,\n-\n E0595: r##\"\n Closures cannot mutate immutable captured variables.\n "}, {"sha": "645af0bff64deb09c5875a051098d538fe465cb6", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=fdd7d13c246f7f82fad231babe30b3a30dac988f", "patch": "@@ -1170,6 +1170,100 @@ fn main() {\n ```\n \"##,\n \n+E0509: r##\"\n+This error occurs when an attempt is made to move out of a value whose type\n+implements the `Drop` trait.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0509\n+struct FancyNum {\n+    num: usize\n+}\n+\n+struct DropStruct {\n+    fancy: FancyNum\n+}\n+\n+impl Drop for DropStruct {\n+    fn drop(&mut self) {\n+        // Destruct DropStruct, possibly using FancyNum\n+    }\n+}\n+\n+fn main() {\n+    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};\n+    let fancy_field = drop_struct.fancy; // Error E0509\n+    println!(\"Fancy: {}\", fancy_field.num);\n+    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope\n+}\n+```\n+\n+Here, we tried to move a field out of a struct of type `DropStruct` which\n+implements the `Drop` trait. However, a struct cannot be dropped if one or\n+more of its fields have been moved.\n+\n+Structs implementing the `Drop` trait have an implicit destructor that gets\n+called when they go out of scope. This destructor may use the fields of the\n+struct, so moving out of the struct could make it impossible to run the\n+destructor. Therefore, we must think of all values whose type implements the\n+`Drop` trait as single units whose fields cannot be moved.\n+\n+This error can be fixed by creating a reference to the fields of a struct,\n+enum, or tuple using the `ref` keyword:\n+\n+```\n+struct FancyNum {\n+    num: usize\n+}\n+\n+struct DropStruct {\n+    fancy: FancyNum\n+}\n+\n+impl Drop for DropStruct {\n+    fn drop(&mut self) {\n+        // Destruct DropStruct, possibly using FancyNum\n+    }\n+}\n+\n+fn main() {\n+    let drop_struct = DropStruct{fancy: FancyNum{num: 5}};\n+    let ref fancy_field = drop_struct.fancy; // No more errors!\n+    println!(\"Fancy: {}\", fancy_field.num);\n+    // implicit call to `drop_struct.drop()` as drop_struct goes out of scope\n+}\n+```\n+\n+Note that this technique can also be used in the arms of a match expression:\n+\n+```\n+struct FancyNum {\n+    num: usize\n+}\n+\n+enum DropEnum {\n+    Fancy(FancyNum)\n+}\n+\n+impl Drop for DropEnum {\n+    fn drop(&mut self) {\n+        // Destruct DropEnum, possibly using FancyNum\n+    }\n+}\n+\n+fn main() {\n+    // Creates and enum of type `DropEnum`, which implements `Drop`\n+    let drop_enum = DropEnum::Fancy(FancyNum{num: 10});\n+    match drop_enum {\n+        // Creates a reference to the inside of `DropEnum::Fancy`\n+        DropEnum::Fancy(ref fancy_field) => // No error!\n+            println!(\"It was fancy-- {}!\", fancy_field.num),\n+    }\n+    // implicit call to `drop_enum.drop()` as drop_enum goes out of scope\n+}\n+```\n+\"##,\n \n }\n "}, {"sha": "aaf8b9414adb77fcb087f8ba70b3d4cbfff03e66", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7d13c246f7f82fad231babe30b3a30dac988f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=fdd7d13c246f7f82fad231babe30b3a30dac988f", "patch": "@@ -223,6 +223,20 @@ pub trait BorrowckErrors {\n         err.span_label(move_from_span, \"cannot move out of here\");\n         err\n     }\n+\n+    fn cannot_move_out_of_interior_of_drop(&self,\n+                                           move_from_span: Span,\n+                                           container_ty: ty::Ty,\n+                                           o: Origin)\n+                                           -> DiagnosticBuilder\n+    {\n+        let mut err = struct_span_err!(self, move_from_span, E0509,\n+                                       \"cannot move out of type `{}`, \\\n+                                        which implements the `Drop` trait{OGN}\",\n+                                       container_ty, OGN=o);\n+        err.span_label(move_from_span, \"cannot move out of here\");\n+        err\n+    }\n }\n \n impl<'b, 'tcx, 'gcx> BorrowckErrors for TyCtxt<'b, 'tcx, 'gcx> {"}]}