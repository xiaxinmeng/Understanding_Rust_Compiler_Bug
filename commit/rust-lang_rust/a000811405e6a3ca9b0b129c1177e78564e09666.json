{"sha": "a000811405e6a3ca9b0b129c1177e78564e09666", "node_id": "C_kwDOAAsO6NoAKGEwMDA4MTE0MDVlNmEzY2E5YjBiMTI5YzExNzdlNzg1NjRlMDk2NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T05:32:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-10T05:32:44Z"}, "message": "Auto merge of #105512 - matthiaskrgr:rollup-i74avrf, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #102406 (Make `missing_copy_implementations` more cautious)\n - #105265 (Add `rustc_on_unimplemented` to `Sum` and `Product` trait.)\n - #105385 (Skip test on s390x as LLD does not support the platform)\n - #105453 (Make `VecDeque::from_iter` O(1) from `vec(_deque)::IntoIter`)\n - #105468 (Mangle \"main\" as \"__main_void\" on wasm32-wasi)\n - #105480 (rustdoc: remove no-op mobile CSS `#sidebar-toggle { text-align }`)\n - #105489 (Fix typo in apple_base.rs)\n - #105504 (rustdoc: make stability badge CSS more consistent)\n - #105506 (Tweak `rustc_must_implement_one_of` diagnostic output)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1794ca10261362a7b701a790ac241f2d929ce994", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1794ca10261362a7b701a790ac241f2d929ce994"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a000811405e6a3ca9b0b129c1177e78564e09666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a000811405e6a3ca9b0b129c1177e78564e09666", "html_url": "https://github.com/rust-lang/rust/commit/a000811405e6a3ca9b0b129c1177e78564e09666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a000811405e6a3ca9b0b129c1177e78564e09666/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5573e6daf99a5b98ace3dfcc4be2eb64867169", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5573e6daf99a5b98ace3dfcc4be2eb64867169", "html_url": "https://github.com/rust-lang/rust/commit/0d5573e6daf99a5b98ace3dfcc4be2eb64867169"}, {"sha": "376b0bce363aca8daf246bbc83c1b85d395d8e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/376b0bce363aca8daf246bbc83c1b85d395d8e1e", "html_url": "https://github.com/rust-lang/rust/commit/376b0bce363aca8daf246bbc83c1b85d395d8e1e"}], "stats": {"total": 437, "additions": 357, "deletions": 80}, "files": [{"sha": "18f08ff6677cddfb098ccf71c87f77b52ac1ebc6", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -955,7 +955,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                     .struct_span_err(\n                         attr.span,\n                         \"the `#[rustc_must_implement_one_of]` attribute must be \\\n-                        used with at least 2 args\",\n+                         used with at least 2 args\",\n                     )\n                     .emit();\n \n@@ -987,7 +987,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                             tcx.sess\n                                 .struct_span_err(\n                                     item.span,\n-                                    \"This function doesn't have a default implementation\",\n+                                    \"function doesn't have a default implementation\",\n                                 )\n                                 .span_note(attr_span, \"required by this annotation\")\n                                 .emit();\n@@ -999,17 +999,17 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n                     }\n                     Some(item) => {\n                         tcx.sess\n-                            .struct_span_err(item.span, \"Not a function\")\n+                            .struct_span_err(item.span, \"not a function\")\n                             .span_note(attr_span, \"required by this annotation\")\n                             .note(\n-                                \"All `#[rustc_must_implement_one_of]` arguments \\\n-                            must be associated function names\",\n+                                \"all `#[rustc_must_implement_one_of]` arguments must be associated \\\n+                                 function names\",\n                             )\n                             .emit();\n                     }\n                     None => {\n                         tcx.sess\n-                            .struct_span_err(ident.span, \"Function not found in this trait\")\n+                            .struct_span_err(ident.span, \"function not found in this trait\")\n                             .emit();\n                     }\n                 }\n@@ -1027,11 +1027,8 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n             for ident in &*list {\n                 if let Some(dup) = set.insert(ident.name, ident.span) {\n                     tcx.sess\n-                        .struct_span_err(vec![dup, ident.span], \"Functions names are duplicated\")\n-                        .note(\n-                            \"All `#[rustc_must_implement_one_of]` arguments \\\n-                            must be unique\",\n-                        )\n+                        .struct_span_err(vec![dup, ident.span], \"functions names are duplicated\")\n+                        .note(\"all `#[rustc_must_implement_one_of]` arguments must be unique\")\n                         .emit();\n \n                     no_dups = false;"}, {"sha": "08fbd973b06c731d30bed0581934794b7a1e4009", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -53,7 +53,8 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, Span};\n use rustc_target::abi::{Abi, VariantIdx};\n-use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n+use rustc_trait_selection::infer::{InferCtxtExt, TyCtxtInferExt};\n+use rustc_trait_selection::traits::{self, misc::can_type_implement_copy, EvaluationResult};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -750,10 +751,39 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         if def.has_dtor(cx.tcx) {\n             return;\n         }\n+\n+        // If the type contains a raw pointer, it may represent something like a handle,\n+        // and recommending Copy might be a bad idea.\n+        for field in def.all_fields() {\n+            let did = field.did;\n+            if cx.tcx.type_of(did).is_unsafe_ptr() {\n+                return;\n+            }\n+        }\n         let param_env = ty::ParamEnv::empty();\n         if ty.is_copy_modulo_regions(cx.tcx, param_env) {\n             return;\n         }\n+\n+        // We shouldn't recommend implementing `Copy` on stateful things,\n+        // such as iterators.\n+        if let Some(iter_trait) = cx.tcx.get_diagnostic_item(sym::Iterator) {\n+            if cx.tcx.infer_ctxt().build().type_implements_trait(iter_trait, [ty], param_env)\n+                == EvaluationResult::EvaluatedToOk\n+            {\n+                return;\n+            }\n+        }\n+\n+        // Default value of clippy::trivially_copy_pass_by_ref\n+        const MAX_SIZE: u64 = 256;\n+\n+        if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes()) {\n+            if size > MAX_SIZE {\n+                return;\n+            }\n+        }\n+\n         if can_type_implement_copy(\n             cx.tcx,\n             param_env,"}, {"sha": "fc6a2edabb763c89de1dad368dfecf7b17154b2a", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -204,7 +204,7 @@ pub fn macos_llvm_target(arch: Arch) -> String {\n fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]> {\n     // Apple platforms only officially support macOS as a host for any compilation.\n     //\n-    // If building for macOS, we go ahead and remove any erronous environment state\n+    // If building for macOS, we go ahead and remove any erroneous environment state\n     // that's only applicable to cross-OS compilation. Always leave anything for the\n     // host OS alone though.\n     if os == \"macos\" {"}, {"sha": "a0476d542e6424a1fb3ba2593dd88c3fcc406cf4", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -104,6 +104,10 @@ pub fn target() -> Target {\n     // `args::args()` makes the WASI API calls itself.\n     options.main_needs_argc_argv = false;\n \n+    // And, WASI mangles the name of \"main\" to distinguish between different\n+    // signatures.\n+    options.entry_name = \"__main_void\".into();\n+\n     Target {\n         llvm_target: \"wasm32-wasi\".into(),\n         pointer_width: 32,"}, {"sha": "e54880e8652305b7f173d08f48aae0b18276212d", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -25,6 +25,10 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     pub(super) fn new(inner: VecDeque<T, A>) -> Self {\n         IntoIter { inner }\n     }\n+\n+    pub(super) fn into_vecdeque(self) -> VecDeque<T, A> {\n+        self.inner\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "4b9bd74d3924f49a93abb03a3e56b645566de6cf", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -55,6 +55,10 @@ use self::spec_extend::SpecExtend;\n \n mod spec_extend;\n \n+use self::spec_from_iter::SpecFromIter;\n+\n+mod spec_from_iter;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -586,6 +590,38 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         VecDeque { head: 0, len: 0, buf: RawVec::with_capacity_in(capacity, alloc) }\n     }\n \n+    /// Creates a `VecDeque` from a raw allocation, when the initialized\n+    /// part of that allocation forms a *contiguous* subslice thereof.\n+    ///\n+    /// For use by `vec::IntoIter::into_vecdeque`\n+    ///\n+    /// # Safety\n+    ///\n+    /// All the usual requirements on the allocated memory like in\n+    /// `Vec::from_raw_parts_in`, but takes a *range* of elements that are\n+    /// initialized rather than only supporting `0..len`.  Requires that\n+    /// `initialized.start` \u2264 `initialized.end` \u2264 `capacity`.\n+    #[inline]\n+    pub(crate) unsafe fn from_contiguous_raw_parts_in(\n+        ptr: *mut T,\n+        initialized: Range<usize>,\n+        capacity: usize,\n+        alloc: A,\n+    ) -> Self {\n+        debug_assert!(initialized.start <= initialized.end);\n+        debug_assert!(initialized.end <= capacity);\n+\n+        // SAFETY: Our safety precondition guarantees the range length won't wrap,\n+        // and that the allocation is valid for use in `RawVec`.\n+        unsafe {\n+            VecDeque {\n+                head: initialized.start,\n+                len: initialized.end.unchecked_sub(initialized.start),\n+                buf: RawVec::from_raw_parts_in(ptr, capacity, alloc),\n+            }\n+        }\n+    }\n+\n     /// Provides a reference to the element at the given index.\n     ///\n     /// Element at index 0 is the front of the queue.\n@@ -2699,18 +2735,8 @@ impl<T, A: Allocator> IndexMut<usize> for VecDeque<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for VecDeque<T> {\n-    #[inline]\n     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> VecDeque<T> {\n-        // Since converting is O(1) now, might as well re-use that logic\n-        // (including things like the `vec::IntoIter`\u2192`Vec` specialization)\n-        // especially as that could save us some monomorphiziation work\n-        // if one uses the same iterators (like slice ones) with both.\n-        return from_iter_via_vec(iter.into_iter());\n-\n-        #[inline]\n-        fn from_iter_via_vec<U>(iter: impl Iterator<Item = U>) -> VecDeque<U> {\n-            Vec::from_iter(iter).into()\n-        }\n+        SpecFromIter::spec_from_iter(iter.into_iter())\n     }\n }\n "}, {"sha": "7650492ebdad1500c4167bfcc69f6f53998bb35c", "filename": "library/alloc/src/collections/vec_deque/spec_from_iter.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fspec_from_iter.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -0,0 +1,33 @@\n+use super::{IntoIter, VecDeque};\n+\n+/// Specialization trait used for `VecDeque::from_iter`\n+pub(super) trait SpecFromIter<T, I> {\n+    fn spec_from_iter(iter: I) -> Self;\n+}\n+\n+impl<T, I> SpecFromIter<T, I> for VecDeque<T>\n+where\n+    I: Iterator<Item = T>,\n+{\n+    default fn spec_from_iter(iterator: I) -> Self {\n+        // Since converting is O(1) now, just re-use the `Vec` logic for\n+        // anything where we can't do something extra-special for `VecDeque`,\n+        // especially as that could save us some monomorphiziation work\n+        // if one uses the same iterators (like slice ones) with both.\n+        crate::vec::Vec::from_iter(iterator).into()\n+    }\n+}\n+\n+impl<T> SpecFromIter<T, crate::vec::IntoIter<T>> for VecDeque<T> {\n+    #[inline]\n+    fn spec_from_iter(iterator: crate::vec::IntoIter<T>) -> Self {\n+        iterator.into_vecdeque()\n+    }\n+}\n+\n+impl<T> SpecFromIter<T, IntoIter<T>> for VecDeque<T> {\n+    #[inline]\n+    fn spec_from_iter(iterator: IntoIter<T>) -> Self {\n+        iterator.into_vecdeque()\n+    }\n+}"}, {"sha": "6bcde6d899ce81776fe8dc55c20d528daec84472", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -1,6 +1,8 @@\n #[cfg(not(no_global_oom_handling))]\n use super::AsVecIntoIter;\n use crate::alloc::{Allocator, Global};\n+#[cfg(not(no_global_oom_handling))]\n+use crate::collections::VecDeque;\n use crate::raw_vec::RawVec;\n use core::array;\n use core::fmt;\n@@ -132,6 +134,33 @@ impl<T, A: Allocator> IntoIter<T, A> {\n     pub(crate) fn forget_remaining_elements(&mut self) {\n         self.ptr = self.end;\n     }\n+\n+    #[cfg(not(no_global_oom_handling))]\n+    #[inline]\n+    pub(crate) fn into_vecdeque(self) -> VecDeque<T, A> {\n+        // Keep our `Drop` impl from dropping the elements and the allocator\n+        let mut this = ManuallyDrop::new(self);\n+\n+        // SAFETY: This allocation originally came from a `Vec`, so it passes\n+        // all those checks.  We have `this.buf` \u2264 `this.ptr` \u2264 `this.end`,\n+        // so the `sub_ptr`s below cannot wrap, and will produce a well-formed\n+        // range.  `end` \u2264 `buf + cap`, so the range will be in-bounds.\n+        // Taking `alloc` is ok because nothing else is going to look at it,\n+        // since our `Drop` impl isn't going to run so there's no more code.\n+        unsafe {\n+            let buf = this.buf.as_ptr();\n+            let initialized = if T::IS_ZST {\n+                // All the pointers are the same for ZSTs, so it's fine to\n+                // say that they're all at the beginning of the \"allocation\".\n+                0..this.len()\n+            } else {\n+                this.ptr.sub_ptr(buf)..this.end.sub_ptr(buf)\n+            };\n+            let cap = this.cap;\n+            let alloc = ManuallyDrop::take(&mut this.alloc);\n+            VecDeque::from_contiguous_raw_parts_in(buf, initialized, cap, alloc)\n+        }\n+    }\n }\n \n #[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]"}, {"sha": "0b8f5281b785cab4af103238d5125bc1660f358c", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -1736,3 +1736,39 @@ fn test_resize_keeps_reserved_space_from_item() {\n     d.resize(1, v);\n     assert_eq!(d[0].capacity(), 1234);\n }\n+\n+#[test]\n+fn test_collect_from_into_iter_keeps_allocation() {\n+    let mut v = Vec::with_capacity(13);\n+    v.extend(0..7);\n+    check(v.as_ptr(), v.last().unwrap(), v.into_iter());\n+\n+    let mut v = VecDeque::with_capacity(13);\n+    v.extend(0..7);\n+    check(&v[0], &v[v.len() - 1], v.into_iter());\n+\n+    fn check(buf: *const i32, last: *const i32, mut it: impl Iterator<Item = i32>) {\n+        assert_eq!(it.next(), Some(0));\n+        assert_eq!(it.next(), Some(1));\n+\n+        let mut v: VecDeque<i32> = it.collect();\n+        assert_eq!(v.capacity(), 13);\n+        assert_eq!(v.as_slices().0.as_ptr(), buf.wrapping_add(2));\n+        assert_eq!(&v[v.len() - 1] as *const _, last);\n+\n+        assert_eq!(v.as_slices(), ([2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n+        v.push_front(7);\n+        assert_eq!(v.as_slices(), ([7, 2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n+        v.push_front(8);\n+        assert_eq!(v.as_slices(), ([8, 7, 2, 3, 4, 5, 6].as_slice(), [].as_slice()));\n+\n+        // Now that we've adding thing in place of the two that we removed from\n+        // the front of the iterator, we're back to matching the buffer pointer.\n+        assert_eq!(v.as_slices().0.as_ptr(), buf);\n+        assert_eq!(&v[v.len() - 1] as *const _, last);\n+\n+        v.push_front(9);\n+        assert_eq!(v.as_slices(), ([9].as_slice(), [8, 7, 2, 3, 4, 5, 6].as_slice()));\n+        assert_eq!(v.capacity(), 13);\n+    }\n+}"}, {"sha": "e31669b3924202db05ee2cceb8289ceae1075105", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -10,6 +10,10 @@ use crate::num::Wrapping;\n /// [`sum()`]: Iterator::sum\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n+#[rustc_on_unimplemented(\n+    message = \"a value of type `{Self}` cannot be made by summing an iterator over elements of type `{A}`\",\n+    label = \"value of type `{Self}` cannot be made by summing a `std::iter::Iterator<Item={A}>`\"\n+)]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// \"summing up\" the items.\n@@ -27,6 +31,10 @@ pub trait Sum<A = Self>: Sized {\n /// [`product()`]: Iterator::product\n /// [`FromIterator`]: iter::FromIterator\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n+#[rustc_on_unimplemented(\n+    message = \"a value of type `{Self}` cannot be made by multiplying all elements of type `{A}` from an iterator\",\n+    label = \"value of type `{Self}` cannot be made by multiplying all elements from a `std::iter::Iterator<Item={A}>`\"\n+)]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// multiplying the items."}, {"sha": "91162ca4892ca0a43caa71b64d54696bee1a69a7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -212,7 +212,7 @@ pre.rust a,\n .mobile-topbar h2 a,\n h1 a,\n .search-results a,\n-.item-left .stab,\n+.stab,\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: var(--main-color);\n }\n@@ -960,22 +960,29 @@ so that we can apply CSS-filters to change the arrow color in themes */\n }\n \n .item-info .stab {\n-\twidth: fit-content;\n \t/* This min-height is needed to unify the height of the stab elements because some of them\n \t   have emojis.\n \t*/\n \tmin-height: 36px;\n \tdisplay: flex;\n-\talign-items: center;\n-\twhite-space: pre-wrap;\n-}\n-.stab {\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n+}\n+.item-left .stab {\n+\tmargin-left: 0.3125em;\n+}\n+.stab {\n+\tpadding: 0 2px;\n \tfont-size: 0.875rem;\n \tfont-weight: normal;\n \tcolor: var(--main-color);\n \tbackground-color: var(--stab-background-color);\n+\twidth: fit-content;\n+\talign-items: center;\n+\twhite-space: pre-wrap;\n+\tborder-radius: 3px;\n+\tdisplay: inline-flex;\n+\tvertical-align: text-bottom;\n }\n \n .stab.portability > code {\n@@ -988,12 +995,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tmargin-right: 0.3rem;\n }\n \n-/* This is to prevent the `.stab` elements to overflow the .docblock elements. */\n-.docblock .stab {\n-\tpadding: 0 0.125em;\n-\tmargin-bottom: 0;\n-}\n-\n /* Black one-pixel outline around emoji shapes */\n .emoji {\n \ttext-shadow:\n@@ -1003,16 +1004,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t\t0 -1px 0 black;\n }\n \n-.item-left .stab {\n-\tborder-radius: 3px;\n-\tdisplay: inline-block;\n-\tline-height: 1.2;\n-\tmargin-bottom: 0;\n-\tmargin-left: 0.3125em;\n-\tpadding: 2px;\n-\tvertical-align: text-bottom;\n-}\n-\n .module-item.unstable,\n .import-item.unstable {\n \topacity: 0.65;\n@@ -1742,7 +1733,6 @@ in storage.js\n \t\ttop: 100px;\n \t\twidth: 30px;\n \t\tfont-size: 1.5rem;\n-\t\ttext-align: center;\n \t\tpadding: 0;\n \t\tz-index: 10;\n \t\tborder-top-right-radius: 3px;"}, {"sha": "eba845bf5a91565f2219f56f71c9eeb8701526a2", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -160,11 +160,6 @@ body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n \n-.module-item .stab,\n-.import-item .stab {\n-\tcolor: #000;\n-}\n-\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: #788797;\n }"}, {"sha": "57497f5205384cc5883a6809b4c29feb75cfd921", "filename": "src/test/run-make/issue-71519/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -2,6 +2,7 @@ include ../../run-make-fulldeps/tools.mk\n \n # ignore-msvc\n # needs-rust-lld\n+# ignore-s390x lld does not yet support s390x as target\n all:\n \tRUSTC_LOG=rustc_codegen_ssa::back::link=info $(RUSTC) -Z gcc-ld=lld -C link-args=-Wl,-v main.rs 2> $(TMPDIR)/output.txt\n \t$(CGREP) -e \"^LLD [0-9]+\\.[0-9]+\\.[0-9]+\" < $(TMPDIR)/output.txt"}, {"sha": "aaed8440a40bd44807ac174149a1128732eba65e", "filename": "src/test/rustdoc-gui/stab-badge.goml", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fstab-badge.goml?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -0,0 +1,41 @@\n+// All stability badges should have rounded corners and colored backgrounds.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n+show-text: true\n+define-function: (\n+\t\"check-badge\",\n+\t(theme, background, color),\n+\t[\n+        (\"local-storage\", {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": |theme|}),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n+\t\t(\"assert\", (\".docblock .stab\")),\n+\t\t(\"assert\", (\".item-table .stab\")),\n+\t\t(\"assert-css\", (\".stab\", {\n+\t\t\t\"border-radius\": \"3px\",\n+\t\t\t\"color\": |color|,\n+\t\t\t\"background-color\": |background|,\n+\t\t})),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/fn.replaced_function.html\"),\n+\t\t(\"assert\", (\".item-info .stab\")),\n+\t\t(\"assert-css\", (\".stab\", {\n+\t\t\t\"border-radius\": \"3px\",\n+\t\t\t\"color\": |color|,\n+\t\t\t\"background-color\": |background|,\n+\t\t})),\n+\t]\n+)\n+\n+call-function: (\"check-badge\", {\n+\t\"theme\": \"ayu\",\n+\t\"color\": \"rgb(197, 197, 197)\",\n+\t\"background\": \"rgb(49, 69, 89)\",\n+})\n+call-function: (\"check-badge\", {\n+\t\"theme\": \"dark\",\n+\t\"color\": \"rgb(221, 221, 221)\",\n+\t\"background\": \"rgb(49, 69, 89)\",\n+})\n+call-function: (\"check-badge\", {\n+\t\"theme\": \"light\",\n+\t\"color\": \"rgb(0, 0, 0)\",\n+\t\"background\": \"rgb(255, 245, 214)\",\n+})"}, {"sha": "051a905aed643d7817e7124a41fb4cc0d197eeb2", "filename": "src/test/ui/lint/lint-missing-copy-implementations-allow.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-missing-copy-implementations-allow.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+#![deny(missing_copy_implementations)]\n+\n+// Don't recommend implementing Copy on something stateful like an iterator.\n+pub struct MyIterator {\n+    num: u8,\n+}\n+\n+impl Iterator for MyIterator {\n+    type Item = u8;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        todo!()\n+    }\n+}\n+\n+pub struct Handle {\n+    inner: *mut (),\n+}\n+\n+pub struct Handle2 {\n+    inner: *const (),\n+}\n+\n+pub enum MaybeHandle {\n+    Ptr(*mut ()),\n+}\n+\n+pub union UnionHandle {\n+    ptr: *mut (),\n+}\n+\n+pub struct Array([u8; 2048]);\n+\n+fn main() {}"}, {"sha": "4f1c521d9fe8e6b156aeea9c291326b15e56878e", "filename": "src/test/ui/on-unimplemented/sum.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -0,0 +1,9 @@\n+// <https://github.com/rust-lang/rust/issues/105184>\n+\n+fn main() {\n+    vec![(), ()].iter().sum::<i32>();\n+    //~^ ERROR\n+\n+    vec![(), ()].iter().product::<i32>();\n+    //~^ ERROR\n+}"}, {"sha": "0c99e63f0e518e7f730601e38b8c0234c275aaaa", "filename": "src/test/ui/on-unimplemented/sum.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fsum.stderr?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: a value of type `i32` cannot be made by summing an iterator over elements of type `&()`\n+  --> $DIR/sum.rs:4:5\n+   |\n+LL |     vec![(), ()].iter().sum::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^ --- required by a bound introduced by this call\n+   |     |\n+   |     value of type `i32` cannot be made by summing a `std::iter::Iterator<Item=&()>`\n+   |\n+   = help: the trait `Sum<&()>` is not implemented for `i32`\n+   = help: the following other types implement trait `Sum<A>`:\n+             <i32 as Sum<&'a i32>>\n+             <i32 as Sum>\n+note: required by a bound in `std::iter::Iterator::sum`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         S: Sum<Self::Item>,\n+   |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n+\n+error[E0277]: a value of type `i32` cannot be made by multiplying all elements of type `&()` from an iterator\n+  --> $DIR/sum.rs:7:5\n+   |\n+LL |     vec![(), ()].iter().product::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |     |\n+   |     value of type `i32` cannot be made by multiplying all elements from a `std::iter::Iterator<Item=&()>`\n+   |\n+   = help: the trait `Product<&()>` is not implemented for `i32`\n+   = help: the following other types implement trait `Product<A>`:\n+             <i32 as Product<&'a i32>>\n+             <i32 as Product>\n+note: required by a bound in `std::iter::Iterator::product`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         P: Product<Self::Item>,\n+   |            ^^^^^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::product`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8db5fa615c08d30a107a5251399fa58d825f2752", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_duplicates.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -1,15 +1,15 @@\n #![feature(rustc_attrs)]\n \n #[rustc_must_implement_one_of(a, a)]\n-//~^ Functions names are duplicated\n+//~^ functions names are duplicated\n trait Trait {\n     fn a() {}\n }\n \n #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n-//~^ Functions names are duplicated\n-//~| Functions names are duplicated\n-//~| Functions names are duplicated\n+//~^ functions names are duplicated\n+//~| functions names are duplicated\n+//~| functions names are duplicated\n trait Trait1 {\n     fn a() {}\n     fn b() {}"}, {"sha": "cd1476a6eb81b4e039bafe293c1cba61d7647cb0", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_duplicates.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_duplicates.stderr?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -1,34 +1,34 @@\n-error: Functions names are duplicated\n+error: functions names are duplicated\n   --> $DIR/rustc_must_implement_one_of_duplicates.rs:3:31\n    |\n LL | #[rustc_must_implement_one_of(a, a)]\n    |                               ^  ^\n    |\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be unique\n \n-error: Functions names are duplicated\n+error: functions names are duplicated\n   --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:34\n    |\n LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n    |                                  ^  ^\n    |\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be unique\n \n-error: Functions names are duplicated\n+error: functions names are duplicated\n   --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:31\n    |\n LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n    |                               ^           ^\n    |\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be unique\n \n-error: Functions names are duplicated\n+error: functions names are duplicated\n   --> $DIR/rustc_must_implement_one_of_duplicates.rs:9:40\n    |\n LL | #[rustc_must_implement_one_of(b, a, a, c, b, c)]\n    |                                        ^     ^\n    |\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be unique\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be unique\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b1b91966c8d8883ab6cfc2aaa95a652f79648136", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.rs?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -1,12 +1,12 @@\n #![feature(rustc_attrs)]\n \n #[rustc_must_implement_one_of(a, b)]\n-//~^ Function not found in this trait\n-//~| Function not found in this trait\n+//~^ function not found in this trait\n+//~| function not found in this trait\n trait Tr0 {}\n \n #[rustc_must_implement_one_of(a, b)]\n-//~^ Function not found in this trait\n+//~^ function not found in this trait\n trait Tr1 {\n     fn a() {}\n }\n@@ -23,16 +23,16 @@ trait Tr3 {}\n \n #[rustc_must_implement_one_of(A, B)]\n trait Tr4 {\n-    const A: u8 = 1; //~ Not a function\n+    const A: u8 = 1; //~ not a function\n \n-    type B; //~ Not a function\n+    type B; //~ not a function\n }\n \n #[rustc_must_implement_one_of(a, b)]\n trait Tr5 {\n-    fn a(); //~ This function doesn't have a default implementation\n+    fn a(); //~ function doesn't have a default implementation\n \n-    fn b(); //~ This function doesn't have a default implementation\n+    fn b(); //~ function doesn't have a default implementation\n }\n \n #[rustc_must_implement_one_of(abc, xyz)]"}, {"sha": "38e692521ca23508dd310e2935de0a393bb061a3", "filename": "src/test/ui/traits/default-method/rustc_must_implement_one_of_misuse.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a000811405e6a3ca9b0b129c1177e78564e09666/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdefault-method%2Frustc_must_implement_one_of_misuse.stderr?ref=a000811405e6a3ca9b0b129c1177e78564e09666", "patch": "@@ -22,19 +22,19 @@ LL |\n LL | struct Struct {}\n    | ---------------- not a trait\n \n-error: Function not found in this trait\n+error: function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:3:31\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n    |                               ^\n \n-error: Function not found in this trait\n+error: function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:3:34\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n    |                                  ^\n \n-error: Function not found in this trait\n+error: function not found in this trait\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:8:34\n    |\n LL | #[rustc_must_implement_one_of(a, b)]\n@@ -46,7 +46,7 @@ error: the `#[rustc_must_implement_one_of]` attribute must be used with at least\n LL | #[rustc_must_implement_one_of(a)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Not a function\n+error: not a function\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:26:5\n    |\n LL |     const A: u8 = 1;\n@@ -57,9 +57,9 @@ note: required by this annotation\n    |\n LL | #[rustc_must_implement_one_of(A, B)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be associated function names\n \n-error: Not a function\n+error: not a function\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:28:5\n    |\n LL |     type B;\n@@ -70,9 +70,9 @@ note: required by this annotation\n    |\n LL | #[rustc_must_implement_one_of(A, B)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: All `#[rustc_must_implement_one_of]` arguments must be associated function names\n+   = note: all `#[rustc_must_implement_one_of]` arguments must be associated function names\n \n-error: This function doesn't have a default implementation\n+error: function doesn't have a default implementation\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:33:5\n    |\n LL |     fn a();\n@@ -84,7 +84,7 @@ note: required by this annotation\n LL | #[rustc_must_implement_one_of(a, b)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This function doesn't have a default implementation\n+error: function doesn't have a default implementation\n   --> $DIR/rustc_must_implement_one_of_misuse.rs:35:5\n    |\n LL |     fn b();"}]}