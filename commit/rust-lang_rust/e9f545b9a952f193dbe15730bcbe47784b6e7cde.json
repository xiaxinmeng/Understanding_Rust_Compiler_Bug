{"sha": "e9f545b9a952f193dbe15730bcbe47784b6e7cde", "node_id": "C_kwDOAAsO6NoAKGU5ZjU0NWI5YTk1MmYxOTNkYmUxNTczMGJjYmU0Nzc4NGI2ZTdjZGU", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-10-22T17:50:07Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-10-22T17:50:07Z"}, "message": "Update the minimum external LLVM to 12", "tree": {"sha": "a98c1ddfd4ca057030005fa5663764adb0db7b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a98c1ddfd4ca057030005fa5663764adb0db7b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f545b9a952f193dbe15730bcbe47784b6e7cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f545b9a952f193dbe15730bcbe47784b6e7cde", "html_url": "https://github.com/rust-lang/rust/commit/e9f545b9a952f193dbe15730bcbe47784b6e7cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f545b9a952f193dbe15730bcbe47784b6e7cde/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0e7095a0814edee204cbf8850a3f25e0ca2b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0e7095a0814edee204cbf8850a3f25e0ca2b1e", "html_url": "https://github.com/rust-lang/rust/commit/8b0e7095a0814edee204cbf8850a3f25e0ca2b1e"}], "stats": {"total": 152, "additions": 13, "deletions": 139}, "files": [{"sha": "5278de2727e7cbf7ca8b83c737531c043cccbf04", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -43,7 +43,7 @@ jobs:\n           - name: mingw-check\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-11\n+          - name: x86_64-gnu-llvm-12\n             os: ubuntu-latest-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -274,7 +274,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-11\n+          - name: x86_64-gnu-llvm-12\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-latest-xl"}, {"sha": "d6dc54c8d0ad6991ab2bbc86fa6a332d8642ecbc", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -681,7 +681,6 @@ void LLVMSelfProfileInitializeCallbacks(\n     PassInstrumentationCallbacks& PIC, void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n-#if LLVM_VERSION_GE(12, 0)\n   PIC.registerBeforeNonSkippedPassCallback([LlvmSelfProfiler, BeforePassCallback](\n                                            StringRef Pass, llvm::Any Ir) {\n     std::string PassName = Pass.str();\n@@ -699,25 +698,6 @@ void LLVMSelfProfileInitializeCallbacks(\n       [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, const PreservedAnalyses &Preserved) {\n         AfterPassCallback(LlvmSelfProfiler);\n       });\n-#else\n-  PIC.registerBeforePassCallback([LlvmSelfProfiler, BeforePassCallback](\n-                                     StringRef Pass, llvm::Any Ir) {\n-    std::string PassName = Pass.str();\n-    std::string IrName = LLVMRustwrappedIrGetName(Ir);\n-    BeforePassCallback(LlvmSelfProfiler, PassName.c_str(), IrName.c_str());\n-    return true;\n-  });\n-\n-  PIC.registerAfterPassCallback(\n-      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, llvm::Any Ir) {\n-        AfterPassCallback(LlvmSelfProfiler);\n-      });\n-\n-  PIC.registerAfterPassInvalidatedCallback(\n-      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass) {\n-        AfterPassCallback(LlvmSelfProfiler);\n-      });\n-#endif\n \n   PIC.registerBeforeAnalysisCallback([LlvmSelfProfiler, BeforePassCallback](\n                                          StringRef Pass, llvm::Any Ir) {\n@@ -778,22 +758,13 @@ LLVMRustOptimizeWithNewPassManager(\n   PTO.LoopInterleaving = UnrollLoops;\n   PTO.LoopVectorization = LoopVectorize;\n   PTO.SLPVectorization = SLPVectorize;\n-#if LLVM_VERSION_GE(12, 0)\n   PTO.MergeFunctions = MergeFunctions;\n-#else\n-  // MergeFunctions is not supported by NewPM in older LLVM versions.\n-  (void) MergeFunctions;\n-#endif\n \n   // FIXME: We may want to expose this as an option.\n   bool DebugPassManager = false;\n \n   PassInstrumentationCallbacks PIC;\n-#if LLVM_VERSION_GE(12, 0)\n   StandardInstrumentations SI(DebugPassManager);\n-#else\n-  StandardInstrumentations SI;\n-#endif\n   SI.registerCallbacks(PIC);\n \n   if (LlvmSelfProfiler){\n@@ -817,18 +788,14 @@ LLVMRustOptimizeWithNewPassManager(\n                         PGOOptions::NoCSAction, DebugInfoForProfiling);\n   }\n \n-#if LLVM_VERSION_GE(12, 0) && !LLVM_VERSION_GE(13,0)\n-  PassBuilder PB(DebugPassManager, TM, PTO, PGOOpt, &PIC);\n-#else\n-  PassBuilder PB(TM, PTO, PGOOpt, &PIC);\n-#endif\n-\n #if LLVM_VERSION_GE(13, 0)\n+  PassBuilder PB(TM, PTO, PGOOpt, &PIC);\n   LoopAnalysisManager LAM;\n   FunctionAnalysisManager FAM;\n   CGSCCAnalysisManager CGAM;\n   ModuleAnalysisManager MAM;\n #else\n+  PassBuilder PB(DebugPassManager, TM, PTO, PGOOpt, &PIC);\n   LoopAnalysisManager LAM(DebugPassManager);\n   FunctionAnalysisManager FAM(DebugPassManager);\n   CGSCCAnalysisManager CGAM(DebugPassManager);\n@@ -960,39 +927,16 @@ LLVMRustOptimizeWithNewPassManager(\n     // At the same time, the LTO pipelines do support O0 and using them is required.\n     bool IsLTO = OptStage == LLVMRustOptStage::ThinLTO || OptStage == LLVMRustOptStage::FatLTO;\n     if (OptLevel == OptimizationLevel::O0 && !IsLTO) {\n-#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n       for (const auto &C : OptimizerLastEPCallbacks)\n         PB.registerOptimizerLastEPCallback(C);\n \n       // Pass false as we manually schedule ThinLTOBufferPasses below.\n       MPM = PB.buildO0DefaultPipeline(OptLevel, /* PreLinkLTO */ false);\n-#else\n-      for (const auto &C : PipelineStartEPCallbacks)\n-        C(MPM, OptLevel);\n-\n-      for (const auto &C : OptimizerLastEPCallbacks)\n-        C(MPM, OptLevel);\n-\n-      MPM.addPass(AlwaysInlinerPass(EmitLifetimeMarkers));\n-\n-      if (PGOOpt) {\n-        PB.addPGOInstrPassesForO0(\n-            MPM, DebugPassManager, PGOOpt->Action == PGOOptions::IRInstr,\n-            /*IsCS=*/false, PGOOpt->ProfileFile, PGOOpt->ProfileRemappingFile);\n-      }\n-#endif\n     } else {\n-#if LLVM_VERSION_GE(12, 0)\n       for (const auto &C : PipelineStartEPCallbacks)\n         PB.registerPipelineStartEPCallback(C);\n-#else\n-      for (const auto &C : PipelineStartEPCallbacks)\n-        PB.registerPipelineStartEPCallback([C, OptLevel](ModulePassManager &MPM) {\n-          C(MPM, OptLevel);\n-        });\n-#endif\n       if (OptStage != LLVMRustOptStage::PreLinkThinLTO) {\n         for (const auto &C : OptimizerLastEPCallbacks)\n           PB.registerOptimizerLastEPCallback(C);\n@@ -1003,43 +947,27 @@ LLVMRustOptimizeWithNewPassManager(\n         MPM = PB.buildPerModuleDefaultPipeline(OptLevel, DebugPassManager);\n         break;\n       case LLVMRustOptStage::PreLinkThinLTO:\n-#if LLVM_VERSION_GE(12, 0)\n         MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel);\n         // The ThinLTOPreLink pipeline already includes ThinLTOBuffer passes. However, callback\n         // passes may still run afterwards. This means we need to run the buffer passes again.\n         // FIXME: In LLVM 13, the ThinLTOPreLink pipeline also runs OptimizerLastEPCallbacks\n         // before the RequiredLTOPreLinkPasses, in which case we can remove these hacks.\n         if (OptimizerLastEPCallbacks.empty())\n           NeedThinLTOBufferPasses = false;\n-#else\n-        MPM = PB.buildThinLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n-#endif\n         for (const auto &C : OptimizerLastEPCallbacks)\n           C(MPM, OptLevel);\n         break;\n       case LLVMRustOptStage::PreLinkFatLTO:\n-#if LLVM_VERSION_GE(12, 0)\n         MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel);\n         NeedThinLTOBufferPasses = false;\n-#else\n-        MPM = PB.buildLTOPreLinkDefaultPipeline(OptLevel, DebugPassManager);\n-#endif\n         break;\n       case LLVMRustOptStage::ThinLTO:\n         // FIXME: Does it make sense to pass the ModuleSummaryIndex?\n         // It only seems to be needed for C++ specific optimizations.\n-#if LLVM_VERSION_GE(12, 0)\n         MPM = PB.buildThinLTODefaultPipeline(OptLevel, nullptr);\n-#else\n-        MPM = PB.buildThinLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n-#endif\n         break;\n       case LLVMRustOptStage::FatLTO:\n-#if LLVM_VERSION_GE(12, 0)\n         MPM = PB.buildLTODefaultPipeline(OptLevel, nullptr);\n-#else\n-        MPM = PB.buildLTODefaultPipeline(OptLevel, DebugPassManager, nullptr);\n-#endif\n         break;\n       }\n     }"}, {"sha": "e77d29bed7122fd466e77cb5c226df615fe409b8", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -263,11 +263,7 @@ extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n extern \"C\" void LLVMRustAddStructRetCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n                                                  LLVMTypeRef Ty) {\n   CallBase *Call = unwrap<CallBase>(Instr);\n-#if LLVM_VERSION_GE(12, 0)\n   Attribute Attr = Attribute::getWithStructRetType(Call->getContext(), unwrap(Ty));\n-#else\n-  Attribute Attr = Attribute::get(Call->getContext(), Attribute::StructRet);\n-#endif\n   AddAttribute(Call, Index, Attr);\n }\n \n@@ -311,11 +307,7 @@ extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n extern \"C\" void LLVMRustAddStructRetAttr(LLVMValueRef Fn, unsigned Index,\n                                          LLVMTypeRef Ty) {\n   Function *F = unwrap<Function>(Fn);\n-#if LLVM_VERSION_GE(12, 0)\n   Attribute Attr = Attribute::getWithStructRetType(F->getContext(), unwrap(Ty));\n-#else\n-  Attribute Attr = Attribute::get(F->getContext(), Attribute::StructRet);\n-#endif\n   AddAttribute(F, Index, Attr);\n }\n \n@@ -1024,17 +1016,11 @@ extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateDebugLocation(unsigned Line, unsigned Column,\n                                      LLVMMetadataRef ScopeRef,\n                                      LLVMMetadataRef InlinedAt) {\n-#if LLVM_VERSION_GE(12, 0)\n   MDNode *Scope = unwrapDIPtr<MDNode>(ScopeRef);\n   DILocation *Loc = DILocation::get(\n       Scope->getContext(), Line, Column, Scope,\n       unwrapDIPtr<MDNode>(InlinedAt));\n   return wrap(Loc);\n-#else\n-  DebugLoc debug_loc = DebugLoc::get(Line, Column, unwrapDIPtr<MDNode>(ScopeRef),\n-                                     unwrapDIPtr<MDNode>(InlinedAt));\n-  return wrap(debug_loc.getAsMDNode());\n-#endif\n }\n \n extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref() {\n@@ -1249,10 +1235,8 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n     return LLVMScalableVectorTypeKind;\n   case Type::BFloatTyID:\n     return LLVMBFloatTypeKind;\n-#if LLVM_VERSION_GE(12, 0)\n   case Type::X86_AMXTyID:\n     return LLVMX86_AMXTypeKind;\n-#endif\n   }\n   report_fatal_error(\"Unhandled TypeID.\");\n }\n@@ -1710,23 +1694,15 @@ LLVMRustBuildVectorReduceMax(LLVMBuilderRef B, LLVMValueRef Src, bool IsSigned)\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMin(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n-#if LLVM_VERSION_GE(12, 0)\n   Instruction *I = unwrap(B)->CreateFPMinReduce(unwrap(Src));\n   I->setHasNoNaNs(NoNaN);\n   return wrap(I);\n-#else\n-  return wrap(unwrap(B)->CreateFPMinReduce(unwrap(Src), NoNaN));\n-#endif\n }\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n-#if LLVM_VERSION_GE(12, 0)\n   Instruction *I = unwrap(B)->CreateFPMaxReduce(unwrap(Src));\n   I->setHasNoNaNs(NoNaN);\n   return wrap(I);\n-#else\n-  return wrap(unwrap(B)->CreateFPMaxReduce(unwrap(Src), NoNaN));\n-#endif\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "37578e30f6d0f698a4185ac5d23e0c410c5a063c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -378,11 +378,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 11 {\n+        if major >= 12 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=11.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=12.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "df1fbc29cf5e6fd0a39ed10108b58c8f449c1a7f", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-12/Dockerfile", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-12%2FDockerfile?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -14,8 +14,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-11-tools \\\n-  llvm-11-dev \\\n+  llvm-12-tools \\\n+  llvm-12-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -29,7 +29,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-11 \\\n+      --llvm-root=/usr/lib/llvm-12 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-11/Dockerfile"}, {"sha": "c51c0892fe67980342293bc2d923d9ae67cf0de1", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -284,7 +284,7 @@ jobs:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-11\n+          - name: x86_64-gnu-llvm-12\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-tools\n@@ -431,7 +431,7 @@ jobs:\n           - name: x86_64-gnu-distcheck\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-11\n+          - name: x86_64-gnu-llvm-12\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "c2ec4e911b9d17152ae919bad65f424347a1e7d7", "filename": "src/test/assembly/asm/aarch64-outline-atomics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-outline-atomics.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu"}, {"sha": "342998245315e8be0eeb55ce1bfb4c235b218d3b", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 12.0.0\n+// min-llvm-version: 12.0.1\n // revisions: powerpc powerpc64\n // assembly-output: emit-asm\n //[powerpc] compile-flags: --target powerpc-unknown-linux-gnu"}, {"sha": "c510689b42bff788ce2ac9626c10a10446eabf08", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -5,7 +5,6 @@\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n //[riscv32] needs-llvm-components: riscv\n // compile-flags: -C target-feature=+d\n-// min-system-llvm-version: 12.0\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "4b2e83e69b1065ba5701286557cbcbc373176632", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.0\n // assembly-output: emit-asm\n // compile-flags: --target wasm32-unknown-unknown\n // compile-flags: --crate-type cdylib"}, {"sha": "6c41e0b78f13790fefa12e8850485845ec675d7b", "filename": "src/test/assembly/static-relocation-model.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fstatic-relocation-model.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.0\n // revisions: x64 A64 ppc64le\n // assembly-output: emit-asm\n // [x64] compile-flags: --target x86_64-unknown-linux-gnu -Crelocation-model=static"}, {"sha": "3e10e227e55fef2604a0e707557ebc3c50fe1010", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,6 +1,4 @@\n // compile-flags: -O -C no-prepopulate-passes\n-//\n-// min-system-llvm-version: 12.0\n \n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]"}, {"sha": "a09c4bcfbeac539242fd388fcea324cb266afe37", "filename": "src/test/codegen/issue-73031.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-73031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-73031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73031.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.0\n // compile-flags: -O\n #![crate_type = \"lib\"]\n "}, {"sha": "2d363d8f73be9161fc3a27cd2851292a1b505fbf", "filename": "src/test/codegen/issue-75525-bounds-checks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-75525-bounds-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-75525-bounds-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-75525-bounds-checks.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,6 +1,5 @@\n // Regression test for #75525, verifies that no bounds checks are generated.\n \n-// min-llvm-version: 12.0.0\n // compile-flags: -O\n \n #![crate_type = \"lib\"]"}, {"sha": "470a9e04096050d321bafd74e899ba3a8a07084d", "filename": "src/test/codegen/issue-75546.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-75546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-75546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-75546.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.0\n // compile-flags: -O\n #![crate_type = \"lib\"]\n "}, {"sha": "4cc82414546b298c664be37db0e83a8b0fd9f0ca", "filename": "src/test/codegen/issue-77812.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-77812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fissue-77812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-77812.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0.0\n // compile-flags: -O\n #![crate_type = \"lib\"]\n "}, {"sha": "fa9c66b47c0a47d475233733bf2f7b69ba4fbd20", "filename": "src/test/codegen/non-terminate/infinite-loop-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-1.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]"}, {"sha": "81d62ab33d77855628ddb9e716fa3016ad91c118", "filename": "src/test/codegen/non-terminate/infinite-loop-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-loop-2.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]"}, {"sha": "6d1f2d4bf8f4ad5ab60c8de9a56ffb6028e11a93", "filename": "src/test/codegen/non-terminate/infinite-recursion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Finfinite-recursion.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]"}, {"sha": "5e25e04fc24ac2136530923073d590e28e6f622b", "filename": "src/test/codegen/non-terminate/nonempty-infinite-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Fnonempty-infinite-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fnon-terminate%2Fnonempty-infinite-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnon-terminate%2Fnonempty-infinite-loop.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]"}, {"sha": "a61dad218cd85eda032383c0a2f5cc40604ee9f9", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n //\n \n-// min-system-llvm-version: 12.0\n // ignore-arm\n // ignore-aarch64\n // ignore-mips"}, {"sha": "b68e8e9ebe9b463a1b1e1a878e575bd1d371e322", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n //\n \n-// min-system-llvm-version: 12.0\n // ignore-aarch64\n // ignore-emscripten\n // ignore-mips64"}, {"sha": "0db17e6b13a80e513acd7437260907b3cf27d9b4", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,7 +1,6 @@\n // compile-flags: -C no-prepopulate-passes\n //\n \n-// min-system-llvm-version: 12.0\n // only-mips64\n // See repr-transparent.rs\n "}, {"sha": "eb06c4975bb7c2dc9cde840997c74af332f33758", "filename": "src/test/codegen/wasm_casts_trapping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,6 +1,5 @@\n // only-wasm32\n // compile-flags: -C target-feature=-nontrapping-fptoint\n-// min-llvm-version: 12.0\n #![crate_type = \"lib\"]\n \n // CHECK-LABEL: @cast_f64_i64"}, {"sha": "e8e62efe01c140de3ddc5c462469aa06859ac20d", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,10 +1,5 @@\n -include ../tools.mk\n \n-# Needs commit 6ffcb2937c96bd0d7a55b984b5eb8f381b68e322,\n-# \"[llvm-dwp] Join dwo paths correctly when DWOPath is absolute\",\n-# backported to 12.x in b1106a5b3bc94f6da11682007d101823f81bad30.\n-# min-llvm-version: 12.0\n-\n all: off packed unpacked\n \n ifeq ($(UNAME),Darwin)"}, {"sha": "ef61ff0450157a73c603b9ec1cff626547fa12ec", "filename": "src/test/run-make-fulldeps/split-dwarf/Makefile", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-dwarf%2FMakefile?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -2,11 +2,6 @@\n \n # only-linux\n \n-# Needs commit 6ffcb2937c96bd0d7a55b984b5eb8f381b68e322,\n-# \"[llvm-dwp] Join dwo paths correctly when DWOPath is absolute\",\n-# backported to 12.x in b1106a5b3bc94f6da11682007d101823f81bad30.\n-# min-llvm-version: 12.0\n-\n all:\n \t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 foo.rs -g\n \trm $(TMPDIR)/foo.dwp"}, {"sha": "188d03e298e0182b734bb4dce9d5091aaef89589", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,4 @@\n-// min-llvm-version: 12.0.0\n+// min-llvm-version: 12.0.1\n // only-x86_64\n // only-linux\n // run-pass"}, {"sha": "9a1b0a38d5eacc21656b6023ac27bde63369119f", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n // compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n // needs-llvm-components: arm\n-// min-llvm-version: 12.0\n #![feature(cmse_nonsecure_entry, no_core, lang_items)]\n #![no_core]\n #[lang=\"sized\"]"}, {"sha": "855749c14b9c3dc60bd5eb103c4cb914b9f6f96e", "filename": "src/test/ui/function-pointer/function-pointer-comparison-issue-54685.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f545b9a952f193dbe15730bcbe47784b6e7cde/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Ffunction-pointer-comparison-issue-54685.rs?ref=e9f545b9a952f193dbe15730bcbe47784b6e7cde", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 12.0\n // compile-flags: -C opt-level=3\n // run-pass\n "}]}