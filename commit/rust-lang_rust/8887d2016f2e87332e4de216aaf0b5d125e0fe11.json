{"sha": "8887d2016f2e87332e4de216aaf0b5d125e0fe11", "node_id": "C_kwDOAAsO6NoAKDg4ODdkMjAxNmYyZTg3MzMyZTRkZTIxNmFhZjBiNWQxMjVlMGZlMTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-06T12:53:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-06T12:53:49Z"}, "message": "Merge #11193\n\n11193: feat: Add config to replace specific proc-macros with dummy expanders r=Veykril a=Veykril\n\nWith this one can specify proc-macros from crates to expand into their input as a (temporary) workaround for the current completion problems with some of the bigger attribute proc-macros like `async_trait`.\r\n\r\nThis could've been done by just not expanding these macros, but that would require fiddling with nameres. I felt like this approach was simpler to pull off while also keeping the behaviour of the attributes/proc-macro in that they still expand instead of being dead syntax to us.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11052\r\n\r\nUsage(`async_trait` as example):\r\n```jsonc\r\n    \"rust-analyzer.procMacro.dummies\": {\r\n        \"async-trait\": [ // crate name(as per its cargo.toml definition, not the dependency name)\r\n            \"async_trait\" // exported proc-macro name\r\n        ]\r\n    },\r\n```\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "297fd1294d529f94a60c89ba32864ee31799c532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/297fd1294d529f94a60c89ba32864ee31799c532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8887d2016f2e87332e4de216aaf0b5d125e0fe11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1uZdCRBK7hj4Ov3rIwAALrQIAJuIHt4wP7aYsPeLj1K9hz49\nSMZrLRJS5+Bvhu81cEISzYzlRLwqMbfs4QkU8+dyUKWonVfrXE+iKaiajjG7N8q+\nXPCaQOcDcvUCez6ydbT2zJGUMlHHADJzuhq9lQz4bnvCyb0glGkmsxofe/qgBcis\nCpOp11Ij+dv3d37/hwZESyr1FNFpvK2YwOyvpwG5JebJOrByDiYNOVUulYtLRPbY\n+AHnk/prs1UmAob3x4u9sWXy4Vr6+DxGrR0T/Mr4B3/y6hid8gM85X31KbUlMpNT\nAyB1ELmcdASaePAtMzHhRHun2Zyj9ogXMHP9FYf9buCX/lft2B4yEe6UDHlC/wM=\n=4m/l\n-----END PGP SIGNATURE-----\n", "payload": "tree 297fd1294d529f94a60c89ba32864ee31799c532\nparent 7111c27cec76e88cbb485946881a8d6204bd8b8e\nparent f6eba28ef811c1804723f6ea8334094b268ad3bd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641473629 +0000\ncommitter GitHub <noreply@github.com> 1641473629 +0000\n\nMerge #11193\n\n11193: feat: Add config to replace specific proc-macros with dummy expanders r=Veykril a=Veykril\n\nWith this one can specify proc-macros from crates to expand into their input as a (temporary) workaround for the current completion problems with some of the bigger attribute proc-macros like `async_trait`.\r\n\r\nThis could've been done by just not expanding these macros, but that would require fiddling with nameres. I felt like this approach was simpler to pull off while also keeping the behaviour of the attributes/proc-macro in that they still expand instead of being dead syntax to us.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11052\r\n\r\nUsage(`async_trait` as example):\r\n```jsonc\r\n    \"rust-analyzer.procMacro.dummies\": {\r\n        \"async-trait\": [ // crate name(as per its cargo.toml definition, not the dependency name)\r\n            \"async_trait\" // exported proc-macro name\r\n        ]\r\n    },\r\n```\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8887d2016f2e87332e4de216aaf0b5d125e0fe11", "html_url": "https://github.com/rust-lang/rust/commit/8887d2016f2e87332e4de216aaf0b5d125e0fe11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8887d2016f2e87332e4de216aaf0b5d125e0fe11/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7111c27cec76e88cbb485946881a8d6204bd8b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7111c27cec76e88cbb485946881a8d6204bd8b8e", "html_url": "https://github.com/rust-lang/rust/commit/7111c27cec76e88cbb485946881a8d6204bd8b8e"}, {"sha": "f6eba28ef811c1804723f6ea8334094b268ad3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6eba28ef811c1804723f6ea8334094b268ad3bd", "html_url": "https://github.com/rust-lang/rust/commit/f6eba28ef811c1804723f6ea8334094b268ad3bd"}], "stats": {"total": 109, "additions": 91, "deletions": 18}, "files": [{"sha": "2977ff74e2a3d571e8e13081c8935285bf905c51", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -88,7 +88,7 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n }\n \n fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n-    project_workspace.to_crate_graph(&mut |_| Vec::new(), &mut {\n+    project_workspace.to_crate_graph(&Default::default(), &mut |_, _| Vec::new(), &mut {\n         let mut counter = 0;\n         move |_path| {\n             counter += 1;"}, {"sha": "869b064e1da406441c13c62ac3e65596e485430d", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -387,10 +387,14 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+        dummy_replace: &FxHashMap<Box<str>, Box<[Box<str>]>>,\n+        load_proc_macro: &mut dyn FnMut(&AbsPath, &[Box<str>]) -> Vec<ProcMacro>,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n+        let load_proc_macro = &mut |crate_name: &_, path: &_| {\n+            load_proc_macro(path, dummy_replace.get(crate_name).map(|it| &**it).unwrap_or_default())\n+        };\n \n         let mut crate_graph = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n@@ -432,7 +436,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -452,7 +456,12 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| load_proc_macro(&it));\n+            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| {\n+                load_proc_macro(\n+                    krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n+                    &it,\n+                )\n+            });\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n@@ -513,7 +522,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_scripts: &WorkspaceBuildScripts,\n@@ -571,7 +580,7 @@ fn cargo_to_crate_graph(\n                     &cargo[pkg],\n                     build_scripts.outputs.get(pkg),\n                     cfg_options,\n-                    load_proc_macro,\n+                    &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n                 );\n@@ -702,7 +711,7 @@ fn handle_rustc_crates(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &SysrootPublicDeps,\n     cargo: &CargoWorkspace,\n@@ -738,7 +747,7 @@ fn handle_rustc_crates(\n                         &rustc_workspace[pkg],\n                         None,\n                         cfg_options,\n-                        load_proc_macro,\n+                        &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                     );"}, {"sha": "19ce86e3ffad3983919d5a4f89a323c4b48ffc0b", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -66,7 +66,8 @@ pub fn load_workspace(\n     };\n \n     let crate_graph = ws.to_crate_graph(\n-        &mut |path: &AbsPath| load_proc_macro(proc_macro_client.as_ref(), path),\n+        &Default::default(),\n+        &mut |path: &AbsPath, _| load_proc_macro(proc_macro_client.as_ref(), path, &[]),\n         &mut |path: &AbsPath| {\n             let contents = loader.load_sync(path);\n             let path = vfs::VfsPath::from(path.to_path_buf());"}, {"sha": "a70413925543071951477bbb37a5e6cc880c6956", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -301,6 +301,10 @@ config_data! {\n         /// Internal config, path to proc-macro server executable (typically,\n         /// this is rust-analyzer itself, but we override this in tests).\n         procMacro_server: Option<PathBuf>          = \"null\",\n+        /// These proc-macros will be ignored when trying to expand them.\n+        ///\n+        /// This config takes a map of crate names with the exported proc-macro names to ignore as values.\n+        procMacro_ignored: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_overrideCargo: Option<String> = \"null\",\n@@ -716,6 +720,9 @@ impl Config {\n         };\n         Some((path, vec![\"proc-macro\".into()]))\n     }\n+    pub fn dummy_replacements(&self) -> &FxHashMap<Box<str>, Box<[Box<str>]>> {\n+        &self.data.procMacro_ignored\n+    }\n     pub fn expand_proc_attr_macros(&self) -> bool {\n         self.data.experimental_procAttrMacros\n     }\n@@ -1163,7 +1170,13 @@ fn get_field<T: DeserializeOwned>(\n         .find_map(move |field| {\n             let mut pointer = field.replace('_', \"/\");\n             pointer.insert(0, '/');\n-            json.pointer_mut(&pointer).and_then(|it| serde_json::from_value(it.take()).ok())\n+            json.pointer_mut(&pointer).and_then(|it| match serde_json::from_value(it.take()) {\n+                Ok(it) => Some(it),\n+                Err(e) => {\n+                    tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n+                    None\n+                }\n+            })\n         })\n         .unwrap_or(default)\n }\n@@ -1224,6 +1237,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"items\": { \"type\": \"string\" },\n             \"uniqueItems\": true,\n         },\n+        \"FxHashMap<Box<str>, Box<[Box<str>]>>\" => set! {\n+            \"type\": \"object\",\n+        },\n         \"FxHashMap<String, SnippetDef>\" => set! {\n             \"type\": \"object\",\n         },"}, {"sha": "eecc83e02ac499d4b0e40156c4d1db06e3f73002", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -10,6 +10,7 @@ use ide_db::base_db::{\n };\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n+use syntax::SmolStr;\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n@@ -306,8 +307,9 @@ impl GlobalState {\n         // Create crate graph from all the workspaces\n         let crate_graph = {\n             let proc_macro_client = self.proc_macro_client.as_ref();\n-            let mut load_proc_macro =\n-                move |path: &AbsPath| load_proc_macro(proc_macro_client, path);\n+            let mut load_proc_macro = move |path: &AbsPath, dummy_replace: &_| {\n+                load_proc_macro(proc_macro_client, path, dummy_replace)\n+            };\n \n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n@@ -328,7 +330,11 @@ impl GlobalState {\n \n             let mut crate_graph = CrateGraph::default();\n             for ws in self.workspaces.iter() {\n-                crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n+                crate_graph.extend(ws.to_crate_graph(\n+                    self.config.dummy_replacements(),\n+                    &mut load_proc_macro,\n+                    &mut load,\n+                ));\n             }\n             crate_graph\n         };\n@@ -505,7 +511,13 @@ impl SourceRootConfig {\n     }\n }\n \n-pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath) -> Vec<ProcMacro> {\n+/// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n+/// with an identity dummy expander.\n+pub(crate) fn load_proc_macro(\n+    client: Option<&ProcMacroServer>,\n+    path: &AbsPath,\n+    dummy_replace: &[Box<str>],\n+) -> Vec<ProcMacro> {\n     let dylib = match MacroDylib::new(path.to_path_buf()) {\n         Ok(it) => it,\n         Err(err) => {\n@@ -532,17 +544,25 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n                 Vec::new()\n             }\n         })\n-        .map(expander_to_proc_macro)\n+        .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n         .collect();\n \n-    fn expander_to_proc_macro(expander: proc_macro_api::ProcMacro) -> ProcMacro {\n-        let name = expander.name().into();\n+    fn expander_to_proc_macro(\n+        expander: proc_macro_api::ProcMacro,\n+        dummy_replace: &[Box<str>],\n+    ) -> ProcMacro {\n+        let name = SmolStr::from(expander.name());\n         let kind = match expander.kind() {\n             proc_macro_api::ProcMacroKind::CustomDerive => ProcMacroKind::CustomDerive,\n             proc_macro_api::ProcMacroKind::FuncLike => ProcMacroKind::FuncLike,\n             proc_macro_api::ProcMacroKind::Attr => ProcMacroKind::Attr,\n         };\n-        let expander = Arc::new(Expander(expander));\n+        let expander: Arc<dyn ProcMacroExpander> =\n+            if dummy_replace.iter().any(|replace| &**replace == name) {\n+                Arc::new(DummyExpander)\n+            } else {\n+                Arc::new(Expander(expander))\n+            };\n         ProcMacro { name, kind, expander }\n     }\n \n@@ -564,6 +584,21 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n             }\n         }\n     }\n+\n+    /// Dummy identity expander, used for proc-macros that are deliberately ignored by the user.\n+    #[derive(Debug)]\n+    struct DummyExpander;\n+\n+    impl ProcMacroExpander for DummyExpander {\n+        fn expand(\n+            &self,\n+            subtree: &tt::Subtree,\n+            _: Option<&tt::Subtree>,\n+            _: &Env,\n+        ) -> Result<tt::Subtree, ProcMacroExpansionError> {\n+            Ok(subtree.clone())\n+        }\n+    }\n }\n \n pub(crate) fn should_refresh_for_change(path: &AbsPath, change_kind: ChangeKind) -> bool {"}, {"sha": "f46dda2351fbde6cb8cbcb5f18ef810fe8c8e0b1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -455,6 +455,13 @@ Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScri\n Internal config, path to proc-macro server executable (typically,\n this is rust-analyzer itself, but we override this in tests).\n --\n+[[rust-analyzer.procMacro.ignored]]rust-analyzer.procMacro.ignored (default: `{}`)::\n++\n+--\n+These proc-macros will be ignored when trying to expand them.\n+\n+This config takes a map of crate names with the exported proc-macro names to ignore as values.\n+--\n [[rust-analyzer.runnables.overrideCargo]]rust-analyzer.runnables.overrideCargo (default: `null`)::\n +\n --"}, {"sha": "d418868474803242b188946e83b01860489b7b8d", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8887d2016f2e87332e4de216aaf0b5d125e0fe11/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/8887d2016f2e87332e4de216aaf0b5d125e0fe11/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=8887d2016f2e87332e4de216aaf0b5d125e0fe11", "patch": "@@ -880,6 +880,11 @@\n                         \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.procMacro.ignored\": {\n+                    \"markdownDescription\": \"These proc-macros will be ignored when trying to expand them.\\n\\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.runnables.overrideCargo\": {\n                     \"markdownDescription\": \"Command to be executed instead of 'cargo' for runnables.\",\n                     \"default\": null,"}]}