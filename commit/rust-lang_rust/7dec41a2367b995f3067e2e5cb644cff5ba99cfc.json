{"sha": "7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "node_id": "C_kwDOAAsO6NoAKDdkZWM0MWEyMzY3Yjk5NWYzMDY3ZTJlNWNiNjQ0Y2ZmNWJhOTljZmM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-03T18:46:15Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-03T18:46:15Z"}, "message": "Move `contains` method of Option and Result lower in docs", "tree": {"sha": "50d32498ee67c5e36ae6db48896430939ae2f0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d32498ee67c5e36ae6db48896430939ae2f0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHTRHcACgkQ+boUO5X/\nbYKr/w/9HvdUkeCaa62W26bPWezKbc8LhUx2OokTY+FPB0ftZDsam7D1ZP5S5fQh\nffSdVlpbRstPHUfYc8Pq+E5teikzwHVmN2j236IVzXRfmLNlbBMeY83f4iI2l/DW\n9MAgkCfTZSznQkvUrMS0WVUwgomkCO5bIe/oUvzdbp/2G8vEzbmDAgoYCFbVEwIv\nycweK7ZZ977UwWakQYejfnObASkLbfUNqfWdO+B8eEtno+WtDDRs9A1DgK/jsDGv\nPAVcRNS/ISjI/a+2TSRUgIF4ANPD5nnU4rshHfwfCGI6P4VKHAoezAAtZ1akJJc4\niVt8PsepBoEu2oatHHxdxBJYvWnzK0fa04tmG5+Qcbl9b3OeAZi0Ztqk59fmKPEJ\ntV8YdaCIdrWv85wWSKtdA9IpPvDh8Frhf0r3vMu/bcOljNS+PWAOuYIo27D8/ovC\nll7q+V7f1JbhFdA1UUcHzrey9JIkI9/LDjS+epu7hB9k6g4C5JJzz4XsAPajqdXX\n2VKE4R5meOIfW2TT5KGT+4dl6akRGQi6rhWHmJZVs65nJFGZLbYF60tIzmjKu5Yf\n1r29n5+OEMaDF1wRiK91/GkFk58ZAppjtKG9kFNLe2Ao58bNxWAQtmTi7twJI/nt\nTpa6HAOwXMqScUkQktgBaIPHY7xdVWHbw1ZeGOE6o6Q+/Eybs1o=\n=KJCb\n-----END PGP SIGNATURE-----", "payload": "tree 50d32498ee67c5e36ae6db48896430939ae2f0c5\nparent ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92\nauthor David Tolnay <dtolnay@gmail.com> 1641235575 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1641235575 -0800\n\nMove `contains` method of Option and Result lower in docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "html_url": "https://github.com/rust-lang/rust/commit/7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dec41a2367b995f3067e2e5cb644cff5ba99cfc/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "html_url": "https://github.com/rust-lang/rust/commit/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}], "stats": {"total": 180, "additions": 92, "deletions": 88}, "files": [{"sha": "1ec119a71e42c84cbc356e1cf4b6f82d24887d1a", "filename": "library/core/src/option.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7dec41a2367b995f3067e2e5cb644cff5ba99cfc/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dec41a2367b995f3067e2e5cb644cff5ba99cfc/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "patch": "@@ -571,36 +571,6 @@ impl<T> Option<T> {\n         !self.is_some()\n     }\n \n-    /// Returns `true` if the option is a [`Some`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Option<u32> = Some(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Option<u32> = None;\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: ~const PartialEq<T>,\n-    {\n-        match self {\n-            Some(y) => x.eq(y),\n-            None => false,\n-        }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for working with references\n     /////////////////////////////////////////////////////////////////////////\n@@ -1573,6 +1543,36 @@ impl<T> Option<T> {\n         mem::replace(self, Some(value))\n     }\n \n+    /// Returns `true` if the option is a [`Some`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Option<u32> = Some(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Option<u32> = Some(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Option<u32> = None;\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn contains<U>(&self, x: &U) -> bool\n+    where\n+        U: ~const PartialEq<T>,\n+    {\n+        match self {\n+            Some(y) => x.eq(y),\n+            None => false,\n+        }\n+    }\n+\n     /// Zips `self` with another `Option`.\n     ///\n     /// If `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some((s, o))`."}, {"sha": "504a01813ac845d2b2deac2daff106606892afcc", "filename": "library/core/src/result.rs", "status": "modified", "additions": 62, "deletions": 58, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7dec41a2367b995f3067e2e5cb644cff5ba99cfc/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dec41a2367b995f3067e2e5cb644cff5ba99cfc/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=7dec41a2367b995f3067e2e5cb644cff5ba99cfc", "patch": "@@ -563,64 +563,6 @@ impl<T, E> Result<T, E> {\n         !self.is_ok()\n     }\n \n-    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Result<u32, &str> = Ok(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    pub fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: PartialEq<T>,\n-    {\n-        match self {\n-            Ok(y) => x == y,\n-            Err(_) => false,\n-        }\n-    }\n-\n-    /// Returns `true` if the result is an [`Err`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_contains_err)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n-    pub fn contains_err<F>(&self, f: &F) -> bool\n-    where\n-        F: PartialEq<E>,\n-    {\n-        match self {\n-            Ok(_) => false,\n-            Err(e) => f == e,\n-        }\n-    }\n-\n     /////////////////////////////////////////////////////////////////////////\n     // Adapter for each variant\n     /////////////////////////////////////////////////////////////////////////\n@@ -1491,6 +1433,68 @@ impl<T, E> Result<T, E> {\n             Err(e) => e,\n         }\n     }\n+\n+    /////////////////////////////////////////////////////////////////////////\n+    // Misc or niche\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_contains)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains(&2), true);\n+    ///\n+    /// let x: Result<u32, &str> = Ok(3);\n+    /// assert_eq!(x.contains(&2), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains(&2), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n+    pub fn contains<U>(&self, x: &U) -> bool\n+    where\n+        U: PartialEq<T>,\n+    {\n+        match self {\n+            Ok(y) => x == y,\n+            Err(_) => false,\n+        }\n+    }\n+\n+    /// Returns `true` if the result is an [`Err`] value containing the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_contains_err)]\n+    ///\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n+    ///\n+    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n+    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n+    pub fn contains_err<F>(&self, f: &F) -> bool\n+    where\n+        F: PartialEq<E>,\n+    {\n+        match self {\n+            Ok(_) => false,\n+            Err(e) => f == e,\n+        }\n+    }\n }\n \n impl<T, E> Result<&T, E> {"}]}