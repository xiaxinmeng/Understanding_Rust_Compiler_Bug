{"sha": "fdcd9743ee611a0486b153715d6e6d88a674c8ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkY2Q5NzQzZWU2MTFhMDQ4NmIxNTM3MTVkNmU2ZDg4YTY3NGM4YWQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-20T11:31:54Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-20T11:31:54Z"}, "message": "Merge pull request #565 from mcarton/or_fun_call\n\nHandle Entry types in OR_FUN_CALL lint", "tree": {"sha": "50967e95b9cd272a2c3f204233384613aaf67f12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50967e95b9cd272a2c3f204233384613aaf67f12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdcd9743ee611a0486b153715d6e6d88a674c8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdcd9743ee611a0486b153715d6e6d88a674c8ad", "html_url": "https://github.com/rust-lang/rust/commit/fdcd9743ee611a0486b153715d6e6d88a674c8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdcd9743ee611a0486b153715d6e6d88a674c8ad/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa49eb0de256760b06a879f8240cb220b7a5435", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa49eb0de256760b06a879f8240cb220b7a5435", "html_url": "https://github.com/rust-lang/rust/commit/6fa49eb0de256760b06a879f8240cb220b7a5435"}, {"sha": "5ac6659814f6605628618ef79cc994df7c6a049b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6659814f6605628618ef79cc994df7c6a049b", "html_url": "https://github.com/rust-lang/rust/commit/5ac6659814f6605628618ef79cc994df7c6a049b"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "7be2e0ee1d8bd6ef348b02a161b39482d2e510c3", "filename": "src/methods.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fdcd9743ee611a0486b153715d6e6d88a674c8ad/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdcd9743ee611a0486b153715d6e6d88a674c8ad/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=fdcd9743ee611a0486b153715d6e6d88a674c8ad", "patch": "@@ -9,7 +9,10 @@ use syntax::codemap::Span;\n \n use utils::{snippet, span_lint, span_note_and_lint, match_path, match_type, method_chain_args, match_trait_method,\n             walk_ptrs_ty_depth, walk_ptrs_ty, get_trait_def_id, implements_trait};\n-use utils::{DEFAULT_TRAIT_PATH, OPTION_PATH, RESULT_PATH, STRING_PATH};\n+use utils::{\n+    BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH,\n+    RESULT_PATH, STRING_PATH\n+};\n use utils::MethodArgs;\n use rustc::middle::cstore::CrateStore;\n \n@@ -343,19 +346,31 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n         or_has_args: bool,\n         span: Span\n     ) {\n+        // (path, fn_has_argument, methods)\n+        let know_types : &[(&[_], _, &[_], _)] = &[\n+            (&BTREEMAP_ENTRY_PATH, false, &[\"or_insert\"], \"with\"),\n+            (&HASHMAP_ENTRY_PATH, false, &[\"or_insert\"], \"with\"),\n+            (&OPTION_PATH, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),\n+            (&RESULT_PATH, true, &[\"or\", \"unwrap_or\"], \"else\"),\n+        ];\n+\n         let self_ty = cx.tcx.expr_ty(self_expr);\n \n-        let is_result = if match_type(cx, self_ty, &RESULT_PATH) {\n-            true\n-        }\n-        else if match_type(cx, self_ty, &OPTION_PATH) {\n-            false\n+        let (fn_has_arguments, poss, suffix) =\n+            if let Some(&(_, fn_has_arguments, poss, suffix)) = know_types.iter().find(|&&i| {\n+                match_type(cx, self_ty, i.0)\n+            }) {\n+                (fn_has_arguments, poss, suffix)\n+            }\n+            else {\n+                return\n+            };\n+\n+        if !poss.contains(&name) {\n+            return\n         }\n-        else {\n-            return;\n-        };\n \n-        let sugg = match (is_result, !or_has_args) {\n+        let sugg = match (fn_has_arguments, !or_has_args) {\n             (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")),\n             (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")),\n             (false, true) => format!(\"{}\", snippet(cx, fun.span, \"..\")),\n@@ -364,13 +379,14 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n         span_lint(cx, OR_FUN_CALL, span,\n                   &format!(\"use of `{}` followed by a function call\", name))\n             .span_suggestion(span, \"try this\",\n-                             format!(\"{}.{}_else({})\",\n+                             format!(\"{}.{}_{}({})\",\n                                      snippet(cx, self_expr.span, \"_\"),\n                                      name,\n+                                     suffix,\n                                      sugg));\n     }\n \n-    if args.len() == 2 && [\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"].contains(&name) {\n+    if args.len() == 2 {\n         if let ExprCall(ref fun, ref or_args) = args[1].node {\n             let or_has_args = !or_args.is_empty();\n             if !check_unwrap_or_default(cx, name, fun, &args[0], &args[1], or_has_args, expr.span) {"}, {"sha": "97d0d2ecf11d7730cf5deb09da4e0a2258dea546", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdcd9743ee611a0486b153715d6e6d88a674c8ad/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdcd9743ee611a0486b153715d6e6d88a674c8ad/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=fdcd9743ee611a0486b153715d6e6d88a674c8ad", "patch": "@@ -20,10 +20,12 @@ pub type MethodArgs = HirVec<P<Expr>>;\n \n // module DefPaths for certain structs/enums we check for\n pub const BEGIN_UNWIND: [&'static str; 3] = [\"std\", \"rt\", \"begin_unwind\"];\n+pub const BTREEMAP_ENTRY_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"Entry\"];\n pub const BTREEMAP_PATH: [&'static str; 4] = [\"collections\", \"btree\", \"map\", \"BTreeMap\"];\n pub const CLONE_PATH: [&'static str; 2] = [\"Clone\", \"clone\"];\n pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const HASHMAP_ENTRY_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const LL_PATH: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n pub const MUTEX_PATH: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];"}, {"sha": "1e2e881c3084d4f3642a86d9870f01b4b327270c", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fdcd9743ee611a0486b153715d6e6d88a674c8ad/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdcd9743ee611a0486b153715d6e6d88a674c8ad/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=fdcd9743ee611a0486b153715d6e6d88a674c8ad", "patch": "@@ -4,6 +4,8 @@\n #![allow(unused)]\n #![deny(clippy, clippy_pedantic)]\n \n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n use std::ops::Mul;\n \n struct T;\n@@ -238,6 +240,18 @@ fn or_fun_call() {\n     //~^ERROR use of `unwrap_or`\n     //~|HELP try this\n     //~|SUGGESTION without_default.unwrap_or_else(Foo::new);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+    //~^ERROR use of `or_insert` followed by a function call\n+    //~|HELP try this\n+    //~|SUGGESTION map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+    //~^ERROR use of `or_insert` followed by a function call\n+    //~|HELP try this\n+    //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n }\n \n fn main() {"}]}