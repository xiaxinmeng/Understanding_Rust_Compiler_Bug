{"sha": "67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "node_id": "C_kwDOAAsO6NoAKDY3YjNlODE4MzgzMGM3YWY0ZTA2YTlhYTkxZGU0ZDFiZTNjODYwZjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-08T00:53:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-08T00:53:41Z"}, "message": "Auto merge of #90887 - jackh726:issue-90729, r=nikomatsakis\n\nTry to normalize associated types before processing obligations\n\nCloses #90729\n\nr? `@nikomatsakis`", "tree": {"sha": "fb444f08e10eb080c832dbe90f81c205ae8a1b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb444f08e10eb080c832dbe90f81c205ae8a1b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "html_url": "https://github.com/rust-lang/rust/commit/67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89adcc636f94d34a6fc90fa117e28ddf6be7b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/89adcc636f94d34a6fc90fa117e28ddf6be7b983", "html_url": "https://github.com/rust-lang/rust/commit/89adcc636f94d34a6fc90fa117e28ddf6be7b983"}, {"sha": "06067d94d8122ef079433fb40ef5e0f87ac7d55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06067d94d8122ef079433fb40ef5e0f87ac7d55c", "html_url": "https://github.com/rust-lang/rust/commit/06067d94d8122ef079433fb40ef5e0f87ac7d55c"}], "stats": {"total": 599, "additions": 383, "deletions": 216}, "files": [{"sha": "62c6c8454797a8f9592a5207a19b55e4b6761739", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -346,6 +346,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n         let obligation = &mut pending_obligation.obligation;\n \n+        debug!(?obligation, \"process_obligation pre-resolve\");\n+\n         if obligation.predicate.has_infer_types_or_consts() {\n             obligation.predicate =\n                 self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);\n@@ -355,6 +357,21 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n         let infcx = self.selcx.infcx();\n \n+        if obligation.predicate.has_projections() {\n+            let mut obligations = Vec::new();\n+            let predicate = crate::traits::project::try_normalize_with_depth_to(\n+                self.selcx,\n+                obligation.param_env,\n+                obligation.cause.clone(),\n+                obligation.recursion_depth + 1,\n+                obligation.predicate,\n+                &mut obligations,\n+            );\n+            if predicate != obligation.predicate {\n+                obligations.push(obligation.with(predicate));\n+                return ProcessResult::Changed(mk_pending(obligations));\n+            }\n+        }\n         let binder = obligation.predicate.kind();\n         match binder.no_bound_vars() {\n             None => match binder.skip_binder() {"}, {"sha": "ea48fab1cebb88b00b12a59bf48d6fba82fd95ab", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 80, "deletions": 10, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -295,6 +295,32 @@ where\n     result\n }\n \n+#[instrument(level = \"info\", skip(selcx, param_env, cause, obligations))]\n+pub fn try_normalize_with_depth_to<'a, 'b, 'tcx, T>(\n+    selcx: &'a mut SelectionContext<'b, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    cause: ObligationCause<'tcx>,\n+    depth: usize,\n+    value: T,\n+    obligations: &mut Vec<PredicateObligation<'tcx>>,\n+) -> T\n+where\n+    T: TypeFoldable<'tcx>,\n+{\n+    debug!(obligations.len = obligations.len());\n+    let mut normalizer = AssocTypeNormalizer::new_without_eager_inference_replacement(\n+        selcx,\n+        param_env,\n+        cause,\n+        depth,\n+        obligations,\n+    );\n+    let result = ensure_sufficient_stack(|| normalizer.fold(value));\n+    debug!(?result, obligations.len = normalizer.obligations.len());\n+    debug!(?normalizer.obligations,);\n+    result\n+}\n+\n pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {\n     match reveal {\n         Reveal::UserFacing => value\n@@ -314,6 +340,10 @@ struct AssocTypeNormalizer<'a, 'b, 'tcx> {\n     obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n     depth: usize,\n     universes: Vec<Option<ty::UniverseIndex>>,\n+    /// If true, when a projection is unable to be completed, an inference\n+    /// variable will be created and an obligation registered to project to that\n+    /// inference variable. Also, constants will be eagerly evaluated.\n+    eager_inference_replacement: bool,\n }\n \n impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n@@ -324,7 +354,33 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n         depth: usize,\n         obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n     ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {\n-        AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }\n+        AssocTypeNormalizer {\n+            selcx,\n+            param_env,\n+            cause,\n+            obligations,\n+            depth,\n+            universes: vec![],\n+            eager_inference_replacement: true,\n+        }\n+    }\n+\n+    fn new_without_eager_inference_replacement(\n+        selcx: &'a mut SelectionContext<'b, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        cause: ObligationCause<'tcx>,\n+        depth: usize,\n+        obligations: &'a mut Vec<PredicateObligation<'tcx>>,\n+    ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {\n+        AssocTypeNormalizer {\n+            selcx,\n+            param_env,\n+            cause,\n+            obligations,\n+            depth,\n+            universes: vec![],\n+            eager_inference_replacement: false,\n+        }\n     }\n \n     fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n@@ -428,14 +484,28 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 // there won't be bound vars there.\n \n                 let data = data.super_fold_with(self);\n-                let normalized_ty = normalize_projection_type(\n-                    self.selcx,\n-                    self.param_env,\n-                    data,\n-                    self.cause.clone(),\n-                    self.depth,\n-                    &mut self.obligations,\n-                );\n+                let normalized_ty = if self.eager_inference_replacement {\n+                    normalize_projection_type(\n+                        self.selcx,\n+                        self.param_env,\n+                        data,\n+                        self.cause.clone(),\n+                        self.depth,\n+                        &mut self.obligations,\n+                    )\n+                } else {\n+                    opt_normalize_projection_type(\n+                        self.selcx,\n+                        self.param_env,\n+                        data,\n+                        self.cause.clone(),\n+                        self.depth,\n+                        &mut self.obligations,\n+                    )\n+                    .ok()\n+                    .flatten()\n+                    .unwrap_or_else(|| ty::Term::Ty(ty.super_fold_with(self)))\n+                };\n                 debug!(\n                     ?self.depth,\n                     ?ty,\n@@ -501,7 +571,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if self.selcx.tcx().lazy_normalization() {\n+        if self.selcx.tcx().lazy_normalization() || !self.eager_inference_replacement {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "162f9e00edd81a369cfe739569cd28af4c81afe1", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -15,9 +15,9 @@ pub trait ThriftService<Bug: NotFoo>:\n {\n     fn get_service(\n     //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n-    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n         &self,\n     ) -> Self::AssocType;\n+    //~^ the trait bound `Bug: Foo` is not satisfied\n }\n \n fn with_factory<H>(factory: dyn ThriftService<()>) {}"}, {"sha": "45d2dfb53757b3347685633aab67c5d4951e5257", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n ...  |\n-LL | |     ) -> Self::AssocType;\n+LL | |\n LL | | }\n    | |_^ the trait `Foo` is not implemented for `Bug`\n    |\n@@ -23,7 +23,7 @@ LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n ...  |\n-LL | |     ) -> Self::AssocType;\n+LL | |\n LL | | }\n    | |_^ the trait `Foo` is not implemented for `Bug`\n    |\n@@ -37,7 +37,6 @@ error[E0277]: the trait bound `Bug: Foo` is not satisfied\n    |\n LL | /     fn get_service(\n LL | |\n-LL | |\n LL | |         &self,\n LL | |     ) -> Self::AssocType;\n    | |_________________________^ the trait `Foo` is not implemented for `Bug`\n@@ -48,10 +47,10 @@ LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n    |                                     +++++\n \n error[E0277]: the trait bound `Bug: Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:16:8\n+  --> $DIR/issue-59324.rs:19:10\n    |\n-LL |     fn get_service(\n-   |        ^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n+LL |     ) -> Self::AssocType;\n+   |          ^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "98295cce8d587fa1b4c9c7096a6ca76e9ff23d16", "filename": "src/test/ui/generic-associated-types/issue-90729.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90729.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -0,0 +1,38 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait Type {\n+    type Ref<'a>;\n+}\n+\n+pub trait AsBytes {}\n+\n+impl AsBytes for &str {}\n+\n+pub struct Utf8;\n+\n+impl Type for Utf8 {\n+    type Ref<'a> = &'a str;\n+}\n+\n+pub struct Bytes<T: Type> {\n+    _marker: PhantomData<T>,\n+}\n+\n+impl<T: Type> Bytes<T>\n+where\n+    for<'a> T::Ref<'a>: AsBytes,\n+{\n+    pub fn new() -> Self {\n+        Self {\n+            _marker: PhantomData,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let _b = Bytes::<Utf8>::new();\n+}"}, {"sha": "a27d811023834aaf7ce4388c00ec371c55e89f35", "filename": "src/test/ui/generic-associated-types/issue-91139.migrate.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -0,0 +1,10 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-91139.rs:27:12\n+   |\n+LL | fn foo<T>() {\n+   |        - help: consider adding an explicit lifetime bound...: `T: 'a`\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to previous error\n+"}, {"sha": "78b2b63dadc5e94179cac8832248c65a9c27d00e", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,4 +1,13 @@\n-// check-pass\n+// revisions: migrate nll\n+//[nll]compile-flags: -Z borrowck=mir\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[nll] check-pass\n+//[migrate] check-fail\n \n #![feature(generic_associated_types)]\n \n@@ -16,6 +25,7 @@ impl<T> Foo<T> for () {\n \n fn foo<T>() {\n     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+    //[migrate]~^ the parameter type `T` may not live long enough\n }\n \n pub fn main() {}"}, {"sha": "e96a768ecda8fcf0a88c8aab5093a9b7072e6bf1", "filename": "src/test/ui/generic-associated-types/issue-93341.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93341.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -0,0 +1,55 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+use std::marker::PhantomData;\n+\n+pub struct Id<'id>(PhantomData<fn(&'id ()) -> &'id ()>);\n+\n+fn new_id() -> Id<'static> {\n+    Id(PhantomData)\n+}\n+\n+pub trait HasLifetime where {\n+    type AtLifetime<'a>;\n+}\n+\n+pub struct ExistentialLifetime<S: HasLifetime>(S::AtLifetime<'static>);\n+\n+impl<S: HasLifetime> ExistentialLifetime<S> {\n+    pub fn new<F>(f: F) -> ExistentialLifetime<S>\n+        where for<'id> F: FnOnce(Id<'id>) -> S::AtLifetime<'id> {\n+        ExistentialLifetime(f(new_id()))\n+    }\n+}\n+\n+\n+struct ExampleS<'id>(Id<'id>);\n+\n+struct ExampleMarker;\n+\n+impl HasLifetime for ExampleMarker {\n+    type AtLifetime<'id> = ExampleS<'id>;\n+}\n+\n+\n+fn broken0() -> ExistentialLifetime<ExampleMarker> {\n+    fn new_helper<'id>(id: Id<'id>) -> ExampleS<'id> {\n+        ExampleS(id)\n+    }\n+\n+    ExistentialLifetime::<ExampleMarker>::new(new_helper)\n+}\n+\n+fn broken1() -> ExistentialLifetime<ExampleMarker> {\n+    fn new_helper<'id>(id: Id<'id>) -> <ExampleMarker as HasLifetime>::AtLifetime<'id> {\n+        ExampleS(id)\n+    }\n+\n+    ExistentialLifetime::<ExampleMarker>::new(new_helper)\n+}\n+\n+fn broken2() -> ExistentialLifetime<ExampleMarker> {\n+    ExistentialLifetime::<ExampleMarker>::new(|id| ExampleS(id))\n+}\n+\n+fn main() {}"}, {"sha": "d8d7adac951611b0eb6869d46d56cc89fc6259ba", "filename": "src/test/ui/generic-associated-types/issue-93342.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-93342.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -0,0 +1,57 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait Scalar: 'static {\n+    type RefType<'a>: ScalarRef<'a>;\n+}\n+\n+pub trait ScalarRef<'a>: 'a {}\n+\n+impl Scalar for i32 {\n+    type RefType<'a> = i32;\n+}\n+\n+impl Scalar for String {\n+    type RefType<'a> = &'a str;\n+}\n+\n+impl Scalar for bool {\n+    type RefType<'a> = i32;\n+}\n+\n+impl<'a> ScalarRef<'a> for bool {}\n+\n+impl<'a> ScalarRef<'a> for i32 {}\n+\n+impl<'a> ScalarRef<'a> for &'a str {}\n+\n+fn str_contains(a: &str, b: &str) -> bool {\n+    a.contains(b)\n+}\n+\n+pub struct BinaryExpression<A: Scalar, B: Scalar, O: Scalar, F>\n+where\n+    F: Fn(A::RefType<'_>, B::RefType<'_>) -> O,\n+{\n+    f: F,\n+    _phantom: PhantomData<(A, B, O)>,\n+}\n+\n+impl<A: Scalar, B: Scalar, O: Scalar, F> BinaryExpression<A, B, O, F>\n+where\n+    F: Fn(A::RefType<'_>, B::RefType<'_>) -> O,\n+{\n+    pub fn new(f: F) -> Self {\n+        Self {\n+            f,\n+            _phantom: PhantomData,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    BinaryExpression::<String, String, bool, _>::new(str_contains);\n+}"}, {"sha": "c6f29fa59085d9258cf9636d2aa84076875ffddd", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n // FamilyType (GAT workaround)\n pub trait FamilyLt<'a> {\n     type Out;\n@@ -78,8 +80,6 @@ where P: Execute + 'static {\n \n fn main() {\n     task(annotate(\n-        //~^ the size\n-        //~^^ the trait bound\n         Annotate::<RefMutFamily<usize>>::new(),\n         |value: &mut usize| {\n             *value = 2;"}, {"sha": "01b14660b6531aa98a6f17f289e90aba6d632ebb", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/89adcc636f94d34a6fc90fa117e28ddf6be7b983/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89adcc636f94d34a6fc90fa117e28ddf6be7b983/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-1.stderr?ref=89adcc636f94d34a6fc90fa117e28ddf6be7b983", "patch": "@@ -1,52 +0,0 @@\n-error[E0277]: the size for values of type `impl Execute` cannot be known at compilation time\n-  --> $DIR/issue-62529-1.rs:80:10\n-   |\n-LL |       task(annotate(\n-   |  _____----_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |\n-LL | |         Annotate::<RefMutFamily<usize>>::new(),\n-...  |\n-LL | |         }\n-LL | |     ));\n-   | |_____^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `impl Execute`\n-note: required by a bound in `task`\n-  --> $DIR/issue-62529-1.rs:69:9\n-   |\n-LL | fn task<P>(processor: P) -> Task\n-   |         ^ required by this bound in `task`\n-help: consider relaxing the implicit `Sized` restriction\n-   |\n-LL | fn task<P: ?Sized>(processor: P) -> Task\n-   |          ++++++++\n-\n-error[E0277]: the trait bound `impl Execute: Execute` is not satisfied\n-  --> $DIR/issue-62529-1.rs:80:10\n-   |\n-LL |       task(annotate(\n-   |  _____----_^\n-   | |     |\n-   | |     required by a bound introduced by this call\n-LL | |\n-LL | |\n-LL | |         Annotate::<RefMutFamily<usize>>::new(),\n-...  |\n-LL | |         }\n-LL | |     ));\n-   | |_____^ the trait `Execute` is not implemented for `impl Execute`\n-   |\n-note: required by a bound in `task`\n-  --> $DIR/issue-62529-1.rs:70:10\n-   |\n-LL | fn task<P>(processor: P) -> Task\n-   |    ---- required by a bound in this\n-LL | where P: Execute + 'static {\n-   |          ^^^^^^^ required by this bound in `task`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "e6ffe38ee92e871329391f24edee74efa7b7bba1", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.migrate.stderr", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.migrate.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:57:5\n+  --> $DIR/issue-71955.rs:54:5\n    |\n LL |     foo(bar, \"string\", |s| s.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n@@ -8,85 +8,13 @@ LL |     foo(bar, \"string\", |s| s.len() == 5);\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:57:5\n-   |\n-LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:57:5\n-   |\n-LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:57:5\n-   |\n-LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:57:5\n-   |\n-LL |     foo(bar, \"string\", |s| s.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, &'a str) {bar}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:63:5\n-   |\n-LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:63:5\n-   |\n-LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:63:5\n-   |\n-LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:63:5\n-   |\n-LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n-   |     ^^^ implementation of `Parser` is not general enough\n-   |\n-   = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n-   = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n-\n-error: implementation of `Parser` is not general enough\n-  --> $DIR/issue-71955.rs:63:5\n+  --> $DIR/issue-71955.rs:58:5\n    |\n LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n    |     ^^^ implementation of `Parser` is not general enough\n    |\n    = note: `for<'a> fn(&'a str) -> (&'a str, Wrapper<'a>) {baz}` must implement `Parser<'0>`, for any lifetime `'0`...\n    = note: ...but it actually implements `Parser<'1>`, for some specific lifetime `'1`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "0f38f8e3283a278a5a6579706eee58b6e1fe4800", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.nll.stderr", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.nll.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,8 +1,79 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-71955.rs:47:1\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:54:5\n    |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r, 's> FnOnce<(&'r &'s str,)>`\n+              found type `for<'r> FnOnce<(&'r &str,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:54:24\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:9\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:54:5\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&&str,)>`\n+              found type `for<'r> FnOnce<(&'r &str,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:54:24\n+   |\n+LL |     foo(bar, \"string\", |s| s.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:44\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |                                            ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r, 's> FnOnce<(&'r Wrapper<'s>,)>`\n+              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:58:24\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:9\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-71955.rs:58:5\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&Wrapper<'_>,)>`\n+              found type `for<'r> FnOnce<(&'r Wrapper<'_>,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-71955.rs:58:24\n+   |\n+LL |     foo(baz, \"string\", |s| s.0.len() == 5);\n+   |                        ^^^^^^^^^^^^^^^^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/issue-71955.rs:34:44\n+   |\n+LL |     F2: FnOnce(&<F1 as Parser>::Output) -> bool\n+   |                                            ^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b7e207b96d49d403512cc978ab55fdeb2f20434", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-71955.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-71955.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -42,10 +42,7 @@ where\n \n struct Wrapper<'a>(&'a str);\n \n-// Because nll currently succeeds and migrate doesn't\n-#[rustc_error]\n fn main() {\n-    //[nll]~^ fatal\n     fn bar<'a>(s: &'a str) -> (&'a str, &'a str) {\n         (&s[..1], &s[..])\n     }\n@@ -56,14 +53,10 @@ fn main() {\n \n     foo(bar, \"string\", |s| s.len() == 5);\n     //[migrate]~^ ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[nll]~^^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n     foo(baz, \"string\", |s| s.0.len() == 5);\n     //[migrate]~^ ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n-    //[migrate]~| ERROR implementation of `Parser` is not general enough\n+    //[nll]~^^ ERROR mismatched types\n+    //[nll]~| ERROR mismatched types\n }"}, {"sha": "fe319e6c8515c7ff51b02b48f72f0b70304220cd", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -6,7 +6,8 @@ trait SomeTrait<'a> {\n \n fn give_me_ice<T>() {\n     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n-    //~^ ERROR: the trait bound `T: SomeTrait<'_>` is not satisfied\n+    //~^ ERROR the trait bound `T: SomeTrait<'_>` is not satisfied [E0277]\n+    //~| ERROR the trait bound `T: SomeTrait<'_>` is not satisfied [E0277]\n }\n \n fn callee<T: Fn<(&'static (),)>>() {"}, {"sha": "13b68b072403a57b148fcca053f9d3b43ea5029c", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -9,6 +9,17 @@ help: consider restricting type parameter `T`\n LL | fn give_me_ice<T: SomeTrait<'_>>() {\n    |                 +++++++++++++++\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `T: SomeTrait<'_>` is not satisfied\n+  --> $DIR/issue-85455.rs:8:14\n+   |\n+LL |     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SomeTrait<'_>` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn give_me_ice<T: SomeTrait<'_>>() {\n+   |                 +++++++++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4baf198b12fae9251139cd00db67c64a0fec14d5", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n-//~^ ERROR the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+//~^ ERROR the trait bound `A: Foo` is not satisfied\n //~| ERROR `A` doesn't implement `Debug`\n //~| ERROR `B` doesn't implement `Debug`\n "}, {"sha": "43471f980b2afe545f3eba8392b8e5d8bc54a044", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -10,13 +10,12 @@ note: previous use here\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+error[E0277]: the trait bound `A: Foo` is not satisfied\n   --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |                  ^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n-   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n help: consider restricting type parameter `A`\n    |\n LL | type Two<A: Foo, B> = impl Debug;\n@@ -28,7 +27,7 @@ error[E0277]: `A` doesn't implement `Debug`\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `A` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n help: consider restricting type parameter `A`\n    |\n LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n@@ -40,7 +39,7 @@ error[E0277]: `B` doesn't implement `Debug`\n LL | type Two<A, B> = impl Debug;\n    |                  ^^^^^^^^^^ `B` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n+   = note: required because of the requirements on the impl of `Debug` for `(A, B, _)`\n help: consider restricting type parameter `B`\n    |\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;"}, {"sha": "f058653dde3389a2a75a3889993d068b74e01939", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -5,8 +5,7 @@\n use std::future::Future;\n \n type G<'a, T> = impl Future<Output = ()>;\n-//~^ ERROR: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n-//~| ERROR: the trait bound `T: Trait` is not satisfied\n+//~^ ERROR: the trait bound `T: Trait` is not satisfied\n \n trait Trait {\n     type F: Future<Output = ()>;"}, {"sha": "0df5a809ebb4748908995fc6e66da8039fef9b91", "filename": "src/test/ui/type-alias-impl-trait/issue-89686.stderr", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-89686.stderr?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,22 +1,3 @@\n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n-  --> $DIR/issue-89686.rs:7:17\n-   |\n-LL | type G<'a, T> = impl Future<Output = ()>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n-...\n-LL |         async move { self.f().await }\n-   |                    ------------------ the found `async` block\n-   |\n-  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n-   |\n-LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-   |                                           ------------------------------- the found opaque type\n-   |\n-   = note:    expected unit type `()`\n-           found associated type `<impl Future<Output = [async output]> as Future>::Output`\n-   = help: consider constraining the associated type `<impl Future<Output = [async output]> as Future>::Output` to `()`\n-   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n-\n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/issue-89686.rs:7:17\n    |\n@@ -28,7 +9,6 @@ help: consider restricting type parameter `T`\n LL | type G<'a, T: Trait> = impl Future<Output = ()>;\n    |             +++++++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0271, E0277.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ea1edf7d45073bba79f19dc573111079c4eb6aab", "filename": "src/test/ui/unboxed-closures/issue-53448.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b3e8183830c7af4e06a9aa91de4d1be3c860f7/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.rs?ref=67b3e8183830c7af4e06a9aa91de4d1be3c860f7", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n #![feature(unboxed_closures)]\n \n trait Lt<'a> {\n@@ -10,6 +12,5 @@ impl<'a> Lt<'a> for () {\n fn main() {\n     let v: <() as Lt<'_>>::T = ();\n     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: <() as Lt<'_>>::T| {};\n-    //~^ ERROR: the size for values of type `<() as Lt<'_>>::T` cannot be known\n     f(v);\n }"}, {"sha": "8f9d918fdba2b1baa582b89629baf63ba4d8c9db", "filename": "src/test/ui/unboxed-closures/issue-53448.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89adcc636f94d34a6fc90fa117e28ddf6be7b983/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89adcc636f94d34a6fc90fa117e28ddf6be7b983/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-53448.stderr?ref=89adcc636f94d34a6fc90fa117e28ddf6be7b983", "patch": "@@ -1,20 +0,0 @@\n-error[E0277]: the size for values of type `<() as Lt<'_>>::T` cannot be known at compilation time\n-  --> $DIR/issue-53448.rs:12:54\n-   |\n-LL |     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: <() as Lt<'_>>::T| {};\n-   |                                                      ^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<() as Lt<'_>>::T`\n-   = help: unsized fn params are gated as an unstable feature\n-help: consider further restricting the associated type\n-   |\n-LL | fn main() where <() as Lt<'_>>::T: Sized {\n-   |           ++++++++++++++++++++++++++++++\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     let f: &mut dyn FnMut<(_,), Output = ()> = &mut |_: &<() as Lt<'_>>::T| {};\n-   |                                                         +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}]}