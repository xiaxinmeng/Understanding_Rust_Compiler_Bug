{"sha": "aceb5d951b8776fc314b9565ea5c987546248e28", "node_id": "C_kwDOAAsO6NoAKGFjZWI1ZDk1MWI4Nzc2ZmMzMTRiOTU2NWVhNWM5ODc1NDYyNDhlMjg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-08T06:09:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T06:09:21Z"}, "message": "Rollup merge of #111056 - JohnBobbo96:fix_box_suggestions, r=compiler-errors\n\nFix some suggestions where a `Box<T>` is expected.\n\nThis fixes #111011, and also adds a suggestion for boxing a unit type when a `Box<T>` was expected and an empty block was found.", "tree": {"sha": "7897f0e555fb47ffbd31713042606eff79e21bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7897f0e555fb47ffbd31713042606eff79e21bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aceb5d951b8776fc314b9565ea5c987546248e28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWJIRCRBK7hj4Ov3rIwAA1RoIAHcSs5E2jesLaZLvTMmuqVSL\ncdkUtGoY2zRfcI56ZDgpThBnMDso8D0XpYL55GGK7cXffj+6baKIuBM0B6CcIAqn\niVahBpeZr3b26XwyhY3JetXNdvkqsXBAmIJ+Fk78sMLV9uv/cBGcNsXRIgBT+nNI\nelMUWakTTL2G8eFChKkW/kIpY7Heu0a2t32l9BkmiffXVluPfF0bQzn3DMgYJpxr\nRB2u5fX4LMbvQvcjej6dLi/144qIttKRjnGnRnw33ZI469FYYD6MvtrCD7teU/A0\nNtdDg+YY1MmbSCH99k2c6eOQJFqYL5UpBrvRs1V02qR7tOH2h254qSr+0ITEZxw=\n=kn9d\n-----END PGP SIGNATURE-----\n", "payload": "tree 7897f0e555fb47ffbd31713042606eff79e21bf7\nparent c75543d648a1b49329ecd3b9bfcf748f4d708a6f\nparent 35985091cc0bf18d40f9fdf9bcb81e3dd74f253b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683526161 +0530\ncommitter GitHub <noreply@github.com> 1683526161 +0530\n\nRollup merge of #111056 - JohnBobbo96:fix_box_suggestions, r=compiler-errors\n\nFix some suggestions where a `Box<T>` is expected.\n\nThis fixes #111011, and also adds a suggestion for boxing a unit type when a `Box<T>` was expected and an empty block was found.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aceb5d951b8776fc314b9565ea5c987546248e28", "html_url": "https://github.com/rust-lang/rust/commit/aceb5d951b8776fc314b9565ea5c987546248e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aceb5d951b8776fc314b9565ea5c987546248e28/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75543d648a1b49329ecd3b9bfcf748f4d708a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c75543d648a1b49329ecd3b9bfcf748f4d708a6f", "html_url": "https://github.com/rust-lang/rust/commit/c75543d648a1b49329ecd3b9bfcf748f4d708a6f"}, {"sha": "35985091cc0bf18d40f9fdf9bcb81e3dd74f253b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35985091cc0bf18d40f9fdf9bcb81e3dd74f253b", "html_url": "https://github.com/rust-lang/rust/commit/35985091cc0bf18d40f9fdf9bcb81e3dd74f253b"}], "stats": {"total": 205, "additions": 174, "deletions": 31}, "files": [{"sha": "aa664031a8742e0bc48f1a714cc5e524256be54d", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -75,3 +75,7 @@ hir_typeck_union_pat_dotdot = `..` cannot be used in union patterns\n \n hir_typeck_arg_mismatch_indeterminate = argument type mismatch was detected, but rustc had trouble determining where\n     .note = we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new\n+\n+hir_typeck_suggest_boxing_note = for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`"}, {"sha": "9d59cdcbc60fe73d745d6a8f693d255d54730cf9", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_non_zero_new_unwrap(err, expr, expected, expr_ty)\n             || self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_no_capture_closure(err, expected, expr_ty)\n-            || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n+            || self.suggest_boxing_when_appropriate(err, expr.span, expr.hir_id, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)"}, {"sha": "ce30bbeca0badea51978a293379c963b95624e2e", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -267,3 +267,31 @@ pub struct ArgMismatchIndeterminate {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum SuggestBoxing {\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    #[multipart_suggestion(\n+        hir_typeck_suggest_boxing_when_appropriate,\n+        applicability = \"machine-applicable\"\n+    )]\n+    Unit {\n+        #[suggestion_part(code = \"Box::new(())\")]\n+        start: Span,\n+        #[suggestion_part(code = \"\")]\n+        end: Span,\n+    },\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    AsyncBody,\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    #[multipart_suggestion(\n+        hir_typeck_suggest_boxing_when_appropriate,\n+        applicability = \"machine-applicable\"\n+    )]\n+    Other {\n+        #[suggestion_part(code = \"Box::new(\")]\n+        start: Span,\n+        #[suggestion_part(code = \")\")]\n+        end: Span,\n+    },\n+}"}, {"sha": "c7011b23a7da7b5ac20a6ec5d2003938d083266a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -1519,7 +1519,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // case we can ignore the tail expression (e.g., `'a: {\n         // break 'a 22; }` would not force the type of the block\n         // to be `()`).\n-        let tail_expr = blk.expr.as_ref();\n         let coerce_to_ty = expected.coercion_target_type(self, blk.span);\n         let coerce = if blk.targeted_by_break {\n             CoerceMany::new(coerce_to_ty)\n@@ -1537,13 +1536,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // check the tail expression **without** holding the\n             // `enclosing_breakables` lock below.\n-            let tail_expr_ty = tail_expr.map(|t| self.check_expr_with_expectation(t, expected));\n+            let tail_expr_ty =\n+                blk.expr.map(|expr| (expr, self.check_expr_with_expectation(expr, expected)));\n \n             let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n             let ctxt = enclosing_breakables.find_breakable(blk.hir_id);\n             let coerce = ctxt.coerce.as_mut().unwrap();\n-            if let Some(tail_expr_ty) = tail_expr_ty {\n-                let tail_expr = tail_expr.unwrap();\n+            if let Some((tail_expr, tail_expr_ty)) = tail_expr_ty {\n                 let span = self.get_expr_coercion_span(tail_expr);\n                 let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n                 let ty_for_diagnostic = coerce.merged_ty();\n@@ -1596,6 +1595,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &self.misc(sp),\n                         &mut |err| {\n                             if let Some(expected_ty) = expected.only_has_type(self) {\n+                                if blk.stmts.is_empty() && blk.expr.is_none() {\n+                                    self.suggest_boxing_when_appropriate(\n+                                        err,\n+                                        blk.span,\n+                                        blk.hir_id,\n+                                        expected_ty,\n+                                        self.tcx.mk_unit(),\n+                                    );\n+                                }\n                                 if !self.consider_removing_semicolon(blk, expected_ty, err) {\n                                     self.err_ctxt().consider_returning_binding(\n                                         blk,\n@@ -1608,7 +1616,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     // silence this redundant error, as we already emit E0070.\n \n                                     // Our block must be a `assign desugar local; assignment`\n-                                    if let Some(hir::Node::Block(hir::Block {\n+                                    if let hir::Block {\n                                         stmts:\n                                             [\n                                                 hir::Stmt {\n@@ -1630,7 +1638,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                 },\n                                             ],\n                                         ..\n-                                    })) = self.tcx.hir().find(blk.hir_id)\n+                                    } = blk\n                                     {\n                                         self.comes_from_while_condition(blk.hir_id, |_| {\n                                             err.downgrade_to_delayed_bug();"}, {"sha": "2867fcc8ecdae5613640d26906cdb09ec7e3d987", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -1,6 +1,6 @@\n use super::FnCtxt;\n \n-use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n+use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel, SuggestBoxing};\n use crate::fluent_generated as fluent;\n use crate::method::probe::{IsSuggestion, Mode, ProbeScope};\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n@@ -9,7 +9,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n-    Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n+    AsyncGeneratorKind, Expr, ExprKind, GeneratorKind, GenericBound, HirId, Node, Path, QPath,\n+    Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::traits::{self, StatementAsExpression};\n@@ -438,33 +439,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn suggest_boxing_when_appropriate(\n         &self,\n         err: &mut Diagnostic,\n-        expr: &hir::Expr<'_>,\n+        span: Span,\n+        hir_id: HirId,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) -> bool {\n-        if self.tcx.hir().is_inside_const_context(expr.hir_id) {\n-            // Do not suggest `Box::new` in const context.\n-            return false;\n-        }\n-        if !expected.is_box() || found.is_box() {\n+        // Do not suggest `Box::new` in const context.\n+        if self.tcx.hir().is_inside_const_context(hir_id) || !expected.is_box() || found.is_box() {\n             return false;\n         }\n-        let boxed_found = self.tcx.mk_box(found);\n-        if self.can_coerce(boxed_found, expected) {\n-            err.multipart_suggestion(\n-                \"store this in the heap by calling `Box::new`\",\n-                vec![\n-                    (expr.span.shrink_to_lo(), \"Box::new(\".to_string()),\n-                    (expr.span.shrink_to_hi(), \")\".to_string()),\n-                ],\n-                Applicability::MachineApplicable,\n-            );\n-            err.note(\n-                \"for more on the distinction between the stack and the heap, read \\\n-                 https://doc.rust-lang.org/book/ch15-01-box.html, \\\n-                 https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n-                 https://doc.rust-lang.org/std/boxed/index.html\",\n-            );\n+        if self.can_coerce(self.tcx.mk_box(found), expected) {\n+            let suggest_boxing = match found.kind() {\n+                ty::Tuple(tuple) if tuple.is_empty() => {\n+                    SuggestBoxing::Unit { start: span.shrink_to_lo(), end: span }\n+                }\n+                ty::Generator(def_id, ..)\n+                    if matches!(\n+                        self.tcx.generator_kind(def_id),\n+                        Some(GeneratorKind::Async(AsyncGeneratorKind::Closure))\n+                    ) =>\n+                {\n+                    SuggestBoxing::AsyncBody\n+                }\n+                _ => SuggestBoxing::Other { start: span.shrink_to_lo(), end: span.shrink_to_hi() },\n+            };\n+            err.subdiagnostic(suggest_boxing);\n+\n             true\n         } else {\n             false"}, {"sha": "927134a588c18f7d063fa144d439c52dafbee92a", "filename": "tests/ui/issues/auxiliary/issue-111011.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+\n+fn foo<X>(x: impl FnOnce() -> Box<X>) {}\n+// just to make sure async closures can still be suggested for boxing.\n+fn bar<X>(x: Box<dyn FnOnce() -> X>) {}\n+\n+fn main() {\n+    foo(async move || {}); //~ ERROR mismatched types\n+    bar(async move || {}); //~ ERROR mismatched types\n+}"}, {"sha": "082f0f035ad46c2de96ef746dd2d7b5d8885ff0b", "filename": "tests/ui/issues/auxiliary/issue-111011.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-111011.rs:10:23\n+   |\n+LL |     foo(async move || {});\n+   |                       ^^ expected `Box<_>`, found `async` closure body\n+   |\n+   = note:            expected struct `Box<_>`\n+           found `async` closure body `[async closure body@$DIR/issue-111011.rs:10:23: 10:25]`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-111011.rs:11:9\n+   |\n+LL |     bar(async move || {});\n+   |     --- ^^^^^^^^^^^^^^^^ expected `Box<dyn FnOnce() -> _>`, found closure\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Box<(dyn FnOnce() -> _ + 'static)>`\n+             found closure `[closure@$DIR/issue-111011.rs:11:9: 11:22]`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+note: function defined here\n+  --> $DIR/issue-111011.rs:7:4\n+   |\n+LL | fn bar<X>(x: Box<dyn FnOnce() -> X>) {}\n+   |    ^^^    -------------------------\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |     bar(Box::new(async move || {}));\n+   |         +++++++++                +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "46683aa095355d1fb8ac99feef34185f6b26b749", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+// run-rustfix\n+\n+fn foo<T>(_: Box<T>) {}\n+fn bar<T>(_: impl Fn() -> Box<T>) {}\n+\n+fn main() {\n+    foo(Box::new(())); //~ ERROR mismatched types\n+    bar(|| Box::new(())); //~ ERROR mismatched types\n+}"}, {"sha": "e19670a50184130114ae274e91d30d372365bbe2", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+// run-rustfix\n+\n+fn foo<T>(_: Box<T>) {}\n+fn bar<T>(_: impl Fn() -> Box<T>) {}\n+\n+fn main() {\n+    foo({}); //~ ERROR mismatched types\n+    bar(|| {}); //~ ERROR mismatched types\n+}"}, {"sha": "474a37b888f357fd873d450a6d17396f00b08e64", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aceb5d951b8776fc314b9565ea5c987546248e28/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr?ref=aceb5d951b8776fc314b9565ea5c987546248e28", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-boxed-empty-block.rs:10:9\n+   |\n+LL |     foo({});\n+   |         ^^ expected `Box<_>`, found `()`\n+   |\n+   = note: expected struct `Box<_>`\n+           found unit type `()`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL -     foo({});\n+LL +     foo(Box::new(()));\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-boxed-empty-block.rs:11:12\n+   |\n+LL |     bar(|| {});\n+   |            ^^ expected `Box<_>`, found `()`\n+   |\n+   = note: expected struct `Box<_>`\n+           found unit type `()`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL -     bar(|| {});\n+LL +     bar(|| Box::new(()));\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}