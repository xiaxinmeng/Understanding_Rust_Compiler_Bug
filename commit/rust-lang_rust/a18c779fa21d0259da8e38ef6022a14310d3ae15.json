{"sha": "a18c779fa21d0259da8e38ef6022a14310d3ae15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGM3NzlmYTIxZDAyNTlkYThlMzhlZjYwMjJhMTQzMTBkM2FlMTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-06-12T15:48:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-07-02T16:15:21Z"}, "message": "pacify the mercilous tidy\n\nlong lines, trailing newlines", "tree": {"sha": "e994adaaf560e655d68799702ad3d10041fea3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e994adaaf560e655d68799702ad3d10041fea3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18c779fa21d0259da8e38ef6022a14310d3ae15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18c779fa21d0259da8e38ef6022a14310d3ae15", "html_url": "https://github.com/rust-lang/rust/commit/a18c779fa21d0259da8e38ef6022a14310d3ae15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18c779fa21d0259da8e38ef6022a14310d3ae15/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4831146afab6d7a2b66f094dabb4f6664587b89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4831146afab6d7a2b66f094dabb4f6664587b89b", "html_url": "https://github.com/rust-lang/rust/commit/4831146afab6d7a2b66f094dabb4f6664587b89b"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "308abb5e1332586a33260dff04dcf9bc4c10b001", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=a18c779fa21d0259da8e38ef6022a14310d3ae15", "patch": "@@ -307,7 +307,8 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> = ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n+pub type QueryOutlivesConstraint<'tcx> =\n+    ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n \n impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// Creates a substitution S for the canonical value with fresh"}, {"sha": "6ec093ee026051a134bcf78b45ab51f07a13c7aa", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=a18c779fa21d0259da8e38ef6022a14310d3ae15", "patch": "@@ -973,6 +973,9 @@ impl<'tcx> RegionConstraintData<'tcx> {\n             verifys,\n             givens,\n         } = self;\n-        constraints.is_empty() && pick_constraints.is_empty() && verifys.is_empty() && givens.is_empty()\n+        constraints.is_empty() &&\n+            pick_constraints.is_empty() &&\n+            verifys.is_empty() &&\n+            givens.is_empty()\n     }\n }"}, {"sha": "7078a5a9c9b4af75329a9983b63d6b2abb1b64e6", "filename": "src/librustc_data_structures/graph/vec_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs?ref=a18c779fa21d0259da8e38ef6022a14310d3ae15", "patch": "@@ -110,4 +110,3 @@ impl<N: Idx> WithSuccessors for VecGraph<N> {\n         self.successors(node).iter().cloned()\n     }\n }\n-"}, {"sha": "c86ce9952389b18e6abd56db432f27d548b50dff", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18c779fa21d0259da8e38ef6022a14310d3ae15/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=a18c779fa21d0259da8e38ef6022a14310d3ae15", "patch": "@@ -1493,19 +1493,25 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(\"check_pick_constraint(p_c_i={:?})\", p_c_i);\n             let p_c = &pick_constraints[p_c_i];\n             let pick_region_vid = p_c.pick_region_vid;\n-            debug!(\"check_pick_constraint: pick_region_vid={:?} with value {}\", pick_region_vid, self.region_value_str(pick_region_vid));\n+            debug!(\n+                \"check_pick_constraint: pick_region_vid={:?} with value {}\",\n+                pick_region_vid,\n+                self.region_value_str(pick_region_vid),\n+            );\n             let option_regions = pick_constraints.option_regions(p_c_i);\n             debug!(\"check_pick_constraint: option_regions={:?}\", option_regions);\n \n             // did the pick-region wind up equal to any of the option regions?\n-            if let Some(o) = option_regions.iter().find(|&&o_r| self.eval_equal(o_r, p_c.pick_region_vid)) {\n+            if let Some(o) = option_regions.iter().find(|&&o_r| {\n+                self.eval_equal(o_r, p_c.pick_region_vid)\n+            }) {\n                 debug!(\"check_pick_constraint: evaluated as equal to {:?}\", o);\n                 continue;\n             }\n \n             // if not, report an error\n             let region_scope_tree = &infcx.tcx.region_scope_tree(mir_def_id);\n-            let pick_region = infcx.tcx.mk_region(ty::ReVar(pick_region_vid)); // XXX\n+            let pick_region = infcx.tcx.mk_region(ty::ReVar(pick_region_vid));\n             opaque_types::unexpected_hidden_region_diagnostic(\n                 infcx.tcx,\n                 Some(region_scope_tree),"}]}