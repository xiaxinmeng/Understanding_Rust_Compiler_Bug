{"sha": "85f74c0eea3667e85720d6f427709873eb576b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1Zjc0YzBlZWEzNjY3ZTg1NzIwZDZmNDI3NzA5ODczZWI1NzZiNDk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-25T22:05:02Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-10T09:21:44Z"}, "message": "Add variants `Def::Macro` and `Namespace::MacroNS`.", "tree": {"sha": "364154df487cf582628dc0efc5c478d26943a1f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/364154df487cf582628dc0efc5c478d26943a1f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f74c0eea3667e85720d6f427709873eb576b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f74c0eea3667e85720d6f427709873eb576b49", "html_url": "https://github.com/rust-lang/rust/commit/85f74c0eea3667e85720d6f427709873eb576b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f74c0eea3667e85720d6f427709873eb576b49/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd0781ea254564cad86e3d594367b1988edf308d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0781ea254564cad86e3d594367b1988edf308d", "html_url": "https://github.com/rust-lang/rust/commit/dd0781ea254564cad86e3d594367b1988edf308d"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "044e36e5c9cd46fdc15aadd9e5ee0a01d401113d", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -52,6 +52,9 @@ pub enum Def {\n           ast::NodeId), // expr node that creates the closure\n     Label(ast::NodeId),\n \n+    // Macro namespace\n+    Macro(DefId),\n+\n     // Both namespaces\n     Err,\n }\n@@ -133,7 +136,7 @@ impl Def {\n             Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n-            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) => {\n+            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) | Def::Macro(id) => {\n                 id\n             }\n \n@@ -173,6 +176,7 @@ impl Def {\n             Def::Upvar(..) => \"closure capture\",\n             Def::Label(..) => \"label\",\n             Def::SelfTy(..) => \"self type\",\n+            Def::Macro(..) => \"macro\",\n             Def::Err => \"unresolved item\",\n         }\n     }"}, {"sha": "0b0dd596784e91cf43b3af98f1bb8474c0fcc401", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -834,7 +834,8 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             Def::Const(..) |\n             Def::AssociatedConst(..) |\n             Def::Local(..) |\n-            Def::Upvar(..) => {\n+            Def::Upvar(..) |\n+            Def::Macro(..) => {\n                 DefHash::SawDefId.hash(self.st);\n                 self.hash_def_id(def.def_id());\n             }"}, {"sha": "8eae46589834f7f2f37f1a6ae10c285d466c5a42", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -690,9 +690,7 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F)\n         where F: FnMut(def::Export)\n     {\n-        if self.dep_kind.get() == DepKind::MacrosOnly {\n-            return\n-        }\n+        let macros_only = self.dep_kind.get() == DepKind::MacrosOnly;\n \n         // Find the item.\n         let item = match self.maybe_entry(id) {\n@@ -702,9 +700,19 @@ impl<'a, 'tcx> CrateMetadata {\n \n         // Iterate over all children.\n         for child_index in item.children.decode(self) {\n+            if macros_only {\n+                continue\n+            }\n+\n             // Get the item.\n             if let Some(child) = self.maybe_entry(child_index) {\n                 let child = child.decode(self);\n+                match child.kind {\n+                    EntryKind::MacroDef(..) => {}\n+                    _ if macros_only => continue,\n+                    _ => {}\n+                }\n+\n                 // Hand off the item to the callback.\n                 match child.kind {\n                     // FIXME(eddyb) Don't encode these in children.\n@@ -763,6 +771,11 @@ impl<'a, 'tcx> CrateMetadata {\n \n         if let EntryKind::Mod(data) = item.kind {\n             for exp in data.decode(self).reexports.decode(self) {\n+                match exp.def {\n+                    Def::Macro(..) => {}\n+                    _ if macros_only => continue,\n+                    _ => {}\n+                }\n                 callback(exp);\n             }\n         }"}, {"sha": "5fb9809104fe06f2890403ac7b0601ea4eb6ade1", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -17,7 +17,7 @@ use macros::{InvocationData, LegacyScope};\n use resolve_imports::ImportDirective;\n use resolve_imports::ImportDirectiveSubclass::{self, GlobImport};\n use {Module, ModuleS, ModuleKind};\n-use Namespace::{self, TypeNS, ValueNS};\n+use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {NameBinding, NameBindingKind, ToNameBinding};\n use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n@@ -485,6 +485,9 @@ impl<'b> Resolver<'b> {\n                 let field_names = self.session.cstore.struct_field_names(def_id);\n                 self.insert_field_names(def_id, field_names);\n             }\n+            Def::Macro(..) => {\n+                self.define(parent, name, MacroNS, (def, DUMMY_SP, vis));\n+            }\n             Def::Local(..) |\n             Def::PrimTy(..) |\n             Def::TyParam(..) |"}, {"sha": "31711c0526d74278632791b0f190c9b9104dfc4e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -533,6 +533,7 @@ impl PatternSource {\n pub enum Namespace {\n     TypeNS,\n     ValueNS,\n+    MacroNS,\n }\n \n impl<'a> Visitor for Resolver<'a> {\n@@ -1346,7 +1347,11 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn get_ribs<'b>(&'b mut self, ns: Namespace) -> &'b mut Vec<Rib<'a>> {\n-        match ns { ValueNS => &mut self.value_ribs, TypeNS => &mut self.type_ribs }\n+        match ns {\n+            ValueNS => &mut self.value_ribs,\n+            TypeNS => &mut self.type_ribs,\n+            MacroNS => panic!(\"The macro namespace has no ribs\"),\n+        }\n     }\n \n     fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n@@ -3421,6 +3426,7 @@ impl<'a> Resolver<'a> {\n         let msg = {\n             let kind = match (ns, old_binding.module()) {\n                 (ValueNS, _) => \"a value\",\n+                (MacroNS, _) => \"a macro\",\n                 (TypeNS, _) if old_binding.is_extern_crate() => \"an extern crate\",\n                 (TypeNS, Ok(module)) if module.is_normal() => \"a module\",\n                 (TypeNS, Ok(module)) if module.is_trait() => \"a trait\","}, {"sha": "e83c2359979c057466fec319fcdd533094343eb3", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -341,6 +341,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n+            Def::Macro(_) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\","}, {"sha": "ab5bbea07a301582999a7fc9847f34781c6e77b6", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f74c0eea3667e85720d6f427709873eb576b49/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=85f74c0eea3667e85720d6f427709873eb576b49", "patch": "@@ -565,6 +565,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |\n             Def::Label(..) |\n+            Def::Macro(..) |\n             Def::Err => None,\n         }\n     }"}]}