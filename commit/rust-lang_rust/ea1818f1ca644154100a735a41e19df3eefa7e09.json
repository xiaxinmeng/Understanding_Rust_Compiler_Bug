{"sha": "ea1818f1ca644154100a735a41e19df3eefa7e09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTgxOGYxY2E2NDQxNTQxMDBhNzM1YTQxZTE5ZGYzZWVmYTdlMDk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-28T01:53:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-28T01:53:17Z"}, "message": "rustbuild: Update how compiler-rt is called\n\nLooks like compiler-rt has been tweaked slightly during the last update,\npropagate these changes to rustbuild as well.", "tree": {"sha": "40124a697c2239f3778eca60ab1217263b024f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40124a697c2239f3778eca60ab1217263b024f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1818f1ca644154100a735a41e19df3eefa7e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1818f1ca644154100a735a41e19df3eefa7e09", "html_url": "https://github.com/rust-lang/rust/commit/ea1818f1ca644154100a735a41e19df3eefa7e09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1818f1ca644154100a735a41e19df3eefa7e09/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126af085be2b760b859d073d8aff164572ef7d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/126af085be2b760b859d073d8aff164572ef7d4a", "html_url": "https://github.com/rust-lang/rust/commit/126af085be2b760b859d073d8aff164572ef7d4a"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "1e677aa48b0f664346ad29af25d756627578b4e7", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ea1818f1ca644154100a735a41e19df3eefa7e09/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1818f1ca644154100a735a41e19df3eefa7e09/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=ea1818f1ca644154100a735a41e19df3eefa7e09", "patch": "@@ -135,27 +135,64 @@ pub fn compiler_rt(build: &Build, target: &str) {\n     let dst = build.compiler_rt_out(target);\n     let arch = target.split('-').next().unwrap();\n     let mode = if build.config.rust_optimize {\"Release\"} else {\"Debug\"};\n+\n+    let build_llvm_config = build.llvm_config(&build.config.build);\n+    let mut cfg = cmake::Config::new(build.src.join(\"src/compiler-rt\"));\n+    cfg.target(target)\n+       .host(&build.config.build)\n+       .out_dir(&dst)\n+       .profile(mode)\n+       .define(\"LLVM_CONFIG_PATH\", build_llvm_config)\n+       .define(\"COMPILER_RT_DEFAULT_TARGET_TRIPLE\", target)\n+       .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"OFF\")\n+       .define(\"COMPILER_RT_BUILD_EMUTLS\", \"OFF\")\n+       // inform about c/c++ compilers, the c++ compiler isn't actually used but\n+       // it's needed to get the initial configure to work on all platforms.\n+       .define(\"CMAKE_C_COMPILER\", build.cc(target))\n+       .define(\"CMAKE_CXX_COMPILER\", build.cc(target));\n+\n     let (dir, build_target, libname) = if target.contains(\"linux\") ||\n                                           target.contains(\"freebsd\") ||\n                                           target.contains(\"netbsd\") {\n-        let os = if target.contains(\"android\") {\"-android\"} else {\"\"};\n-        let arch = if arch.starts_with(\"arm\") && target.contains(\"eabihf\") {\n-            \"armhf\"\n+        let os_extra = if target.contains(\"android\") && target.contains(\"arm\") {\n+            \"-android\"\n         } else {\n-            arch\n+            \"\"\n         };\n-        let target = format!(\"clang_rt.builtins-{}{}\", arch, os);\n+        let builtins_arch = match arch {\n+            \"i586\" => \"i386\",\n+            \"arm\" | \"armv7\" if target.contains(\"android\") => \"armhf\",\n+            \"arm\" if target.contains(\"eabihf\") => \"armhf\",\n+            _ => arch,\n+        };\n+        let target = format!(\"clang_rt.builtins-{}{}\", builtins_arch, os_extra);\n         (\"linux\".to_string(), target.clone(), target)\n-    } else if target.contains(\"darwin\") {\n-        let target = format!(\"clang_rt.builtins_{}_osx\", arch);\n+    } else if target.contains(\"apple-darwin\") {\n+        let builtins_arch = match arch {\n+            \"i686\" => \"i386\",\n+            _ => arch,\n+        };\n+        let target = format!(\"clang_rt.builtins_{}_osx\", builtins_arch);\n+        (\"builtins\".to_string(), target.clone(), target)\n+    } else if target.contains(\"apple-ios\") {\n+        cfg.define(\"COMPILER_RT_ENABLE_IOS\", \"ON\");\n+        let target = match arch {\n+            \"armv7s\" => \"hard_pic_armv7em_macho_embedded\".to_string(),\n+            \"aarch64\" => \"builtins_arm64_ios\".to_string(),\n+            _ => format!(\"hard_pic_{}_macho_embedded\", arch),\n+        };\n         (\"builtins\".to_string(), target.clone(), target)\n     } else if target.contains(\"windows-gnu\") {\n         let target = format!(\"clang_rt.builtins-{}\", arch);\n         (\"windows\".to_string(), target.clone(), target)\n     } else if target.contains(\"windows-msvc\") {\n+        let builtins_arch = match arch {\n+            \"i586\" | \"i686\" => \"i386\",\n+            _ => arch,\n+        };\n         (format!(\"windows/{}\", mode),\n          \"lib/builtins/builtins\".to_string(),\n-         format!(\"clang_rt.builtins-{}\", arch.replace(\"i686\", \"i386\")))\n+         format!(\"clang_rt.builtins-{}\", builtins_arch))\n     } else {\n         panic!(\"can't get os from target: {}\", target)\n     };\n@@ -168,21 +205,7 @@ pub fn compiler_rt(build: &Build, target: &str) {\n     }\n     let _ = fs::remove_dir_all(&dst);\n     t!(fs::create_dir_all(&dst));\n-    let build_llvm_config = build.llvm_config(&build.config.build);\n-    let mut cfg = cmake::Config::new(build.src.join(\"src/compiler-rt\"));\n-    cfg.target(target)\n-       .host(&build.config.build)\n-       .out_dir(&dst)\n-       .profile(mode)\n-       .define(\"LLVM_CONFIG_PATH\", build_llvm_config)\n-       .define(\"COMPILER_RT_DEFAULT_TARGET_TRIPLE\", target)\n-       .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"OFF\")\n-       .define(\"COMPILER_RT_BUILD_EMUTLS\", \"OFF\")\n-       // inform about c/c++ compilers, the c++ compiler isn't actually used but\n-       // it's needed to get the initial configure to work on all platforms.\n-       .define(\"CMAKE_C_COMPILER\", build.cc(target))\n-       .define(\"CMAKE_CXX_COMPILER\", build.cc(target))\n-       .build_target(&build_target);\n+    cfg.build_target(&build_target);\n     cfg.build();\n }\n "}]}