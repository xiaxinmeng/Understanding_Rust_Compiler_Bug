{"sha": "aac2f734dec39a19e412b46fcdc0e67a6eafa3ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzJmNzM0ZGVjMzlhMTllNDEyYjQ2ZmNkYzBlNjdhNmVhZmEzYWQ=", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-07-01T14:59:50Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-07-01T14:59:50Z"}, "message": "Improve comments from https://github.com/rust-lang/rust/pull/72617, as suggested by RalfJung.", "tree": {"sha": "84caf91effe46ae24b947beb9c1d6d023ccfa866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84caf91effe46ae24b947beb9c1d6d023ccfa866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad", "html_url": "https://github.com/rust-lang/rust/commit/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d462551a8600e57d8b6f87e71ea56868bc5da6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d462551a8600e57d8b6f87e71ea56868bc5da6cf", "html_url": "https://github.com/rust-lang/rust/commit/d462551a8600e57d8b6f87e71ea56868bc5da6cf"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "3a81b1f9a0531aabb9685cac5fd246d0c39491e8", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac2f734dec39a19e412b46fcdc0e67a6eafa3ad/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=aac2f734dec39a19e412b46fcdc0e67a6eafa3ad", "patch": "@@ -229,10 +229,10 @@ pub mod panic_count {\n     thread_local! { static LOCAL_PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n     // Sum of panic counts from all threads. The purpose of this is to have\n-    // a fast path in `is_zero` (which is used by `panicking`). Access to\n-    // this variable can be always be done with relaxed ordering because\n-    // it is always guaranteed that, if `GLOBAL_PANIC_COUNT` is zero,\n-    // `LOCAL_PANIC_COUNT` will be zero.\n+    // a fast path in `is_zero` (which is used by `panicking`). In any particular\n+    // thread, if that thread currently views `GLOBAL_PANIC_COUNT` as being zero,\n+    // then `LOCAL_PANIC_COUNT` in that thread is zero. This invariant holds before\n+    // and after increase and decrease, but not necessarily during their execution.\n     static GLOBAL_PANIC_COUNT: AtomicUsize = AtomicUsize::new(0);\n \n     pub fn increase() -> usize {\n@@ -263,6 +263,11 @@ pub mod panic_count {\n             // Fast path: if `GLOBAL_PANIC_COUNT` is zero, all threads\n             // (including the current one) will have `LOCAL_PANIC_COUNT`\n             // equal to zero, so TLS access can be avoided.\n+            //\n+            // A relaxed atomic load is equivalent to a normal aligned memory read\n+            // (e.g., a `mov` instruction in x86), while a TLS access might require\n+            // calling a non-inlinable function (such as `__tls_get_addr` when using\n+            // the GD TLS model).\n             true\n         } else {\n             is_zero_slow_path()"}]}