{"sha": "9ac237dce5cc9155ecf5347401e5046e2abae4be", "node_id": "C_kwDOAAsO6NoAKDlhYzIzN2RjZTVjYzkxNTVlY2Y1MzQ3NDAxZTUwNDZlMmFiYWU0YmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T00:12:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-12T00:12:51Z"}, "message": "Auto merge of #100419 - flip1995:clippyup, r=Manishearth\n\nUpdate Clippy\n\nr? `@Manishearth`", "tree": {"sha": "1dd23c0abbaf84fcade983681eaa155f42c43da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd23c0abbaf84fcade983681eaa155f42c43da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac237dce5cc9155ecf5347401e5046e2abae4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac237dce5cc9155ecf5347401e5046e2abae4be", "html_url": "https://github.com/rust-lang/rust/commit/9ac237dce5cc9155ecf5347401e5046e2abae4be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac237dce5cc9155ecf5347401e5046e2abae4be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8b6d4f247a10714f9e50f0713224a08435810a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8b6d4f247a10714f9e50f0713224a08435810a", "html_url": "https://github.com/rust-lang/rust/commit/4d8b6d4f247a10714f9e50f0713224a08435810a"}, {"sha": "dc29cfb8d5338af23e6b06aaff6cc0229e688da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc29cfb8d5338af23e6b06aaff6cc0229e688da0", "html_url": "https://github.com/rust-lang/rust/commit/dc29cfb8d5338af23e6b06aaff6cc0229e688da0"}], "stats": {"total": 3065, "additions": 2239, "deletions": 826}, "files": [{"sha": "380cd451987bfc982d00448668e1699fb999ffc9", "filename": "CHANGELOG.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -965,7 +965,7 @@ Released 2021-09-09\n   [#7407](https://github.com/rust-lang/rust-clippy/pull/7407)\n * [`redundant_allocation`]: Now additionally supports the `Arc<>` type\n   [#7308](https://github.com/rust-lang/rust-clippy/pull/7308)\n-* [`blacklisted_name`]: Now allows blacklisted names in test code\n+* [`disallowed_names`]: Now allows disallowed names in test code\n   [#7379](https://github.com/rust-lang/rust-clippy/pull/7379)\n * [`redundant_closure`]: Suggests `&mut` for `FnMut`\n   [#7437](https://github.com/rust-lang/rust-clippy/pull/7437)\n@@ -2066,7 +2066,7 @@ Released 2020-08-27\n   [#5692](https://github.com/rust-lang/rust-clippy/pull/5692)\n * [`if_same_then_else`]: Don't assume multiplication is always commutative\n   [#5702](https://github.com/rust-lang/rust-clippy/pull/5702)\n-* [`blacklisted_name`]: Remove `bar` from the default configuration\n+* [`disallowed_names`]: Remove `bar` from the default configuration\n   [#5712](https://github.com/rust-lang/rust-clippy/pull/5712)\n * [`redundant_pattern_matching`]: Avoid suggesting non-`const fn` calls in const contexts\n   [#5724](https://github.com/rust-lang/rust-clippy/pull/5724)\n@@ -3522,6 +3522,7 @@ Released 2018-09-13\n [`derive_partial_eq_without_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\n [`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`disallowed_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods\n+[`disallowed_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names\n [`disallowed_script_idents`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents\n [`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n [`disallowed_types`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types\n@@ -3685,6 +3686,7 @@ Released 2018-09-13\n [`manual_find`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten\n+[`manual_instant_elapsed`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed\n [`manual_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n@@ -3816,11 +3818,13 @@ Released 2018-09-13\n [`or_then_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_then_unwrap\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n+[`overly_complex_bool_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#overly_complex_bool_expr\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n [`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn\n [`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n+[`partialeq_to_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_to_none\n [`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n [`pattern_type_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\n [`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma"}, {"sha": "28b4cfd5f099520cf023e30fbec1d8953b9b29d9", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -30,10 +30,10 @@ All contributors are expected to follow the [Rust Code of Conduct].\n ## The Clippy book\n \n If you're new to Clippy and don't know where to start the [Clippy book] includes\n-a developer guide and is a good place to start your journey.\n+a [developer guide] and is a good place to start your journey.\n \n-<!-- FIXME: Link to the deployed book, once it is deployed through CI -->\n-[Clippy book]: book/src\n+[Clippy book]: https://doc.rust-lang.org/nightly/clippy/index.html\n+[developer guide]: https://doc.rust-lang.org/nightly/clippy/development/index.html\n \n ## High level approach\n "}, {"sha": "b7e136ce9b29e4bddf01074fab885210325d25ac", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "1193771ff736b2471ca8a224098e80ed24efeff4", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -144,7 +144,7 @@ value` mapping e.g.\n \n ```toml\n avoid-breaking-exported-api = false\n-blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n+disallowed-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```\n "}, {"sha": "77f1d2e8797a36c2200c5563e0b05085bc3c4b9e", "filename": "book/src/configuration.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -7,7 +7,7 @@ basic `variable = value` mapping eg.\n \n ```toml\n avoid-breaking-exported-api = false\n-blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n+disallowed-names = [\"toto\", \"tata\", \"titi\"]\n cognitive-complexity-threshold = 30\n ```\n "}, {"sha": "10a8f31f4573f790d63a4c786037abff9ce40004", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -438,7 +438,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n     let mut lint_context = None;\n \n     let mut iter = rustc_lexer::tokenize(&file_contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {"}, {"sha": "05e79a241884f43bb9175afd3b01b483e6596959", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -836,7 +836,7 @@ pub(crate) struct LintDeclSearchResult<'a> {\n fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n     let mut offset = 0usize;\n     let mut iter = tokenize(contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {\n@@ -899,7 +899,7 @@ fn parse_contents(contents: &str, module: &str, lints: &mut Vec<Lint>) {\n fn parse_deprecated_contents(contents: &str, lints: &mut Vec<DeprecatedLint>) {\n     let mut offset = 0usize;\n     let mut iter = tokenize(contents).map(|t| {\n-        let range = offset..offset + t.len;\n+        let range = offset..offset + t.len as usize;\n         offset = range.end;\n \n         LintDeclSearchResult {\n@@ -946,7 +946,7 @@ fn parse_renamed_contents(contents: &str, lints: &mut Vec<RenamedLint>) {\n     for line in contents.lines() {\n         let mut offset = 0usize;\n         let mut iter = tokenize(line).map(|t| {\n-            let range = offset..offset + t.len;\n+            let range = offset..offset + t.len as usize;\n             offset = range.end;\n \n             LintDeclSearchResult {"}, {"sha": "738562ef85597b1edaeabb796c8fb734a947ae87", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "6a6554f968b334e5ca3ce1802ff475440df66090", "filename": "clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -53,13 +53,14 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                 if result_type_with_refs != result_type {\n                     return;\n                 } else if let Res::Local(binding_id) = path_res(cx, recv)\n-                    && local_used_after_expr(cx, binding_id, recv) {\n+                    && local_used_after_expr(cx, binding_id, recv)\n+                {\n                     return;\n                 }\n             }\n             let mut app = Applicability::MachineApplicable;\n             match method_segment.ident.as_str() {\n-                \"is_ok\" if has_debug_impl(cx, substs.type_at(1)) => {\n+                \"is_ok\" if type_suitable_to_unwrap(cx, substs.type_at(1)) => {\n                     span_lint_and_sugg(\n                         cx,\n                         ASSERTIONS_ON_RESULT_STATES,\n@@ -73,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         app,\n                     );\n                 }\n-                \"is_err\" if has_debug_impl(cx, substs.type_at(0)) => {\n+                \"is_err\" if type_suitable_to_unwrap(cx, substs.type_at(0)) => {\n                     span_lint_and_sugg(\n                         cx,\n                         ASSERTIONS_ON_RESULT_STATES,\n@@ -99,3 +100,7 @@ fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         .get_diagnostic_item(sym::Debug)\n         .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n }\n+\n+fn type_suitable_to_unwrap<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    has_debug_impl(cx, ty) && !ty.is_unit() && !ty.is_never()\n+}"}, {"sha": "6eb78d21e826629e7c928153ffe4c007e4c1fc32", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -64,15 +64,15 @@ declare_clippy_lint! {\n     /// if a {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n-    pub LOGIC_BUG,\n+    pub OVERLY_COMPLEX_BOOL_EXPR,\n     correctness,\n     \"boolean expressions that contain terminals which can be eliminated\"\n }\n \n // For each pairs, both orders are considered.\n const METHODS_WITH_NEGATION: [(&str, &str); 2] = [(\"is_some\", \"is_none\"), (\"is_err\", \"is_ok\")];\n \n-declare_lint_pass!(NonminimalBool => [NONMINIMAL_BOOL, LOGIC_BUG]);\n+declare_lint_pass!(NonminimalBool => [NONMINIMAL_BOOL, OVERLY_COMPLEX_BOOL_EXPR]);\n \n impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n     fn check_fn(\n@@ -396,7 +396,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     if stats.terminals[i] != 0 && simplified_stats.terminals[i] == 0 {\n                         span_lint_hir_and_then(\n                             self.cx,\n-                            LOGIC_BUG,\n+                            OVERLY_COMPLEX_BOOL_EXPR,\n                             e.hir_id,\n                             e.span,\n                             \"this boolean expression contains a logic bug\","}, {"sha": "6426e8c25ac1c728de493d03ad475bdbc4256651", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check(\n             span,\n             &format!(\"casting the result of `{cast_from}::abs()` to {cast_to}\"),\n             \"replace with\",\n-            format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\")),\n+            format!(\"{}.unsigned_abs()\", Sugg::hir(cx, &args[0], \"..\").maybe_par()),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "37b2fdcff09ff5467a6ace2c657f7fb78c98d13d", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -270,10 +270,7 @@ fn get_types_from_cast<'a>(\n     let limit_from: Option<(&Expr<'_>, &str)> = call_from_cast.or_else(|| {\n         if_chain! {\n             // `from_type::from, to_type::max_value()`\n-            if let ExprKind::Call(from_func, args) = &expr.kind;\n-            // `to_type::max_value()`\n-            if args.len() == 1;\n-            if let limit = &args[0];\n+            if let ExprKind::Call(from_func, [limit]) = &expr.kind;\n             // `from_type::from`\n             if let ExprKind::Path(ref path) = &from_func.kind;\n             if let Some(from_sym) = get_implementing_type(path, INTS, \"from\");"}, {"sha": "878248a6bdc8c899fec7050fd6f4c41b58817063", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -34,7 +34,7 @@ declare_lint_pass!(CreateDir => [CREATE_DIR]);\n impl LateLintPass<'_> for CreateDir {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Call(func, args) = expr.kind;\n+            if let ExprKind::Call(func, [arg, ..]) = expr.kind;\n             if let ExprKind::Path(ref path) = func.kind;\n             if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::STD_FS_CREATE_DIR);\n@@ -45,7 +45,7 @@ impl LateLintPass<'_> for CreateDir {\n                     expr.span,\n                     \"calling `std::fs::create_dir` where there may be a better way\",\n                     \"consider calling `std::fs::create_dir_all` instead\",\n-                    format!(\"create_dir_all({})\", snippet(cx, args[0].span, \"..\")),\n+                    format!(\"create_dir_all({})\", snippet(cx, arg.span, \"..\")),\n                     Applicability::MaybeIncorrect,\n                 )\n             }"}, {"sha": "74f7df611778ec32d61d9a056f23dccd727756ec", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_sugg};\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{has_drop, is_copy};\n-use clippy_utils::{any_parent_is_automatically_derived, contains_name, get_parent_expr, match_def_path, paths};\n+use clippy_utils::{\n+    any_parent_is_automatically_derived, contains_name, get_parent_expr, is_from_proc_macro, match_def_path, paths,\n+};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -94,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             if let QPath::Resolved(None, _path) = qpath;\n             let expr_ty = cx.typeck_results().expr_ty(expr);\n             if let ty::Adt(def, ..) = expr_ty.kind();\n+            if !is_from_proc_macro(cx, expr);\n             then {\n                 // TODO: Work out a way to put \"whatever the imported way of referencing\n                 // this type in this file\" rather than a fully-qualified type."}, {"sha": "5d41c63928dfb0daeb6cb3a2bb2eed9bd9e80af9", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 211, "deletions": 123, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n-use clippy_utils::ty::{expr_sig, peel_mid_ty_refs, variant_of_res};\n+use clippy_utils::ty::{expr_sig, peel_mid_ty_refs, ty_sig, variant_of_res};\n use clippy_utils::{get_parent_expr, is_lint_allowed, path_to_local, walk_to_expr_usage};\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n@@ -15,9 +15,9 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n+use rustc_middle::ty::{self, Binder, BoundVariableKind, List, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{symbol::sym, Span, Symbol};\n+use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n declare_clippy_lint! {\n@@ -183,24 +183,24 @@ enum State {\n     },\n     DerefedBorrow(DerefedBorrow),\n     ExplicitDeref {\n-        // Span and id of the top-level deref expression if the parent expression is a borrow.\n-        deref_span_id: Option<(Span, HirId)>,\n+        mutability: Option<Mutability>,\n     },\n     ExplicitDerefField {\n         name: Symbol,\n     },\n     Reborrow {\n-        deref_span: Span,\n-        deref_hir_id: HirId,\n+        mutability: Mutability,\n+    },\n+    Borrow {\n+        mutability: Mutability,\n     },\n-    Borrow,\n }\n \n // A reference operation considered by this lint pass\n enum RefOp {\n     Method(Mutability),\n     Deref,\n-    AddrOf,\n+    AddrOf(Mutability),\n }\n \n struct RefPat {\n@@ -263,7 +263,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             ));\n                         } else if position.is_deref_stable() {\n                             self.state = Some((\n-                                State::ExplicitDeref { deref_span_id: None },\n+                                State::ExplicitDeref { mutability: None },\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n                         }\n@@ -289,7 +289,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                             },\n                         ));\n                     },\n-                    RefOp::AddrOf => {\n+                    RefOp::AddrOf(mutability) => {\n                         // Find the number of times the borrow is auto-derefed.\n                         let mut iter = adjustments.iter();\n                         let mut deref_count = 0usize;\n@@ -357,9 +357,13 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                                 }),\n                                 StateData { span: expr.span, hir_id: expr.hir_id, position },\n                             ));\n-                        } else if position.is_deref_stable() {\n+                        } else if position.is_deref_stable()\n+                            // Auto-deref doesn't combine with other adjustments\n+                            && next_adjust.map_or(true, |a| matches!(a.kind, Adjust::Deref(_) | Adjust::Borrow(_)))\n+                            && iter.all(|a| matches!(a.kind, Adjust::Deref(_) | Adjust::Borrow(_)))\n+                        {\n                             self.state = Some((\n-                                State::Borrow,\n+                                State::Borrow { mutability },\n                                 StateData {\n                                     span: expr.span,\n                                     hir_id: expr.hir_id,\n@@ -395,7 +399,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     data,\n                 ));\n             },\n-            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf) if state.count != 0 => {\n+            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf(_)) if state.count != 0 => {\n                 self.state = Some((\n                     State::DerefedBorrow(DerefedBorrow {\n                         count: state.count - 1,\n@@ -404,12 +408,12 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     data,\n                 ));\n             },\n-            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf) => {\n+            (Some((State::DerefedBorrow(state), data)), RefOp::AddrOf(mutability)) => {\n                 let position = data.position;\n                 report(cx, expr, State::DerefedBorrow(state), data);\n                 if position.is_deref_stable() {\n                     self.state = Some((\n-                        State::Borrow,\n+                        State::Borrow { mutability },\n                         StateData {\n                             span: expr.span,\n                             hir_id: expr.hir_id,\n@@ -430,43 +434,28 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                     ));\n                 } else if position.is_deref_stable() {\n                     self.state = Some((\n-                        State::ExplicitDeref { deref_span_id: None },\n+                        State::ExplicitDeref { mutability: None },\n                         StateData { span: expr.span, hir_id: expr.hir_id, position },\n                     ));\n                 }\n             },\n \n-            (Some((State::Borrow, data)), RefOp::Deref) => {\n+            (Some((State::Borrow { mutability }, data)), RefOp::Deref) => {\n                 if typeck.expr_ty(sub_expr).is_ref() {\n-                    self.state = Some((\n-                        State::Reborrow {\n-                            deref_span: expr.span,\n-                            deref_hir_id: expr.hir_id,\n-                        },\n-                        data,\n-                    ));\n+                    self.state = Some((State::Reborrow { mutability }, data));\n                 } else {\n                     self.state = Some((\n                         State::ExplicitDeref {\n-                            deref_span_id: Some((expr.span, expr.hir_id)),\n+                            mutability: Some(mutability),\n                         },\n                         data,\n                     ));\n                 }\n             },\n-            (\n-                Some((\n-                    State::Reborrow {\n-                        deref_span,\n-                        deref_hir_id,\n-                    },\n-                    data,\n-                )),\n-                RefOp::Deref,\n-            ) => {\n+            (Some((State::Reborrow { mutability }, data)), RefOp::Deref) => {\n                 self.state = Some((\n                     State::ExplicitDeref {\n-                        deref_span_id: Some((deref_span, deref_hir_id)),\n+                        mutability: Some(mutability),\n                     },\n                     data,\n                 ));\n@@ -573,7 +562,7 @@ fn try_parse_ref_op<'tcx>(\n         ExprKind::Unary(UnOp::Deref, sub_expr) if !typeck.expr_ty(sub_expr).is_unsafe_ptr() => {\n             return Some((RefOp::Deref, sub_expr));\n         },\n-        ExprKind::AddrOf(BorrowKind::Ref, _, sub_expr) => return Some((RefOp::AddrOf, sub_expr)),\n+        ExprKind::AddrOf(BorrowKind::Ref, mutability, sub_expr) => return Some((RefOp::AddrOf(mutability), sub_expr)),\n         _ => return None,\n     };\n     if tcx.is_diagnostic_item(sym::deref_method, def_id) {\n@@ -609,26 +598,29 @@ enum Position {\n     Postfix,\n     Deref,\n     /// Any other location which will trigger auto-deref to a specific time.\n-    DerefStable(i8),\n+    /// Contains the precedence of the parent expression and whether the target type is sized.\n+    DerefStable(i8, bool),\n     /// Any other location which will trigger auto-reborrowing.\n+    /// Contains the precedence of the parent expression.\n     ReborrowStable(i8),\n+    /// Contains the precedence of the parent expression.\n     Other(i8),\n }\n impl Position {\n     fn is_deref_stable(self) -> bool {\n-        matches!(self, Self::DerefStable(_))\n+        matches!(self, Self::DerefStable(..))\n     }\n \n     fn is_reborrow_stable(self) -> bool {\n-        matches!(self, Self::DerefStable(_) | Self::ReborrowStable(_))\n+        matches!(self, Self::DerefStable(..) | Self::ReborrowStable(_))\n     }\n \n     fn can_auto_borrow(self) -> bool {\n         matches!(self, Self::MethodReceiver | Self::FieldAccess(_) | Self::Callee)\n     }\n \n     fn lint_explicit_deref(self) -> bool {\n-        matches!(self, Self::Other(_) | Self::DerefStable(_) | Self::ReborrowStable(_))\n+        matches!(self, Self::Other(_) | Self::DerefStable(..) | Self::ReborrowStable(_))\n     }\n \n     fn precedence(self) -> i8 {\n@@ -639,7 +631,7 @@ impl Position {\n             | Self::FieldAccess(_)\n             | Self::Postfix => PREC_POSTFIX,\n             Self::Deref => PREC_PREFIX,\n-            Self::DerefStable(p) | Self::ReborrowStable(p) | Self::Other(p) => p,\n+            Self::DerefStable(p, _) | Self::ReborrowStable(p) | Self::Other(p) => p,\n         }\n     }\n }\n@@ -659,7 +651,7 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n         }\n         match parent {\n             Node::Local(Local { ty: Some(ty), span, .. }) if span.ctxt() == ctxt => {\n-                Some(binding_ty_auto_deref_stability(ty, precedence))\n+                Some(binding_ty_auto_deref_stability(cx, ty, precedence, List::empty()))\n             },\n             Node::Item(&Item {\n                 kind: ItemKind::Static(..) | ItemKind::Const(..),\n@@ -680,11 +672,7 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                 ..\n             }) if span.ctxt() == ctxt => {\n                 let ty = cx.tcx.type_of(def_id);\n-                Some(if ty.is_ref() {\n-                    Position::DerefStable(precedence)\n-                } else {\n-                    Position::Other(precedence)\n-                })\n+                Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n             },\n \n             Node::Item(&Item {\n@@ -705,45 +693,38 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                 span,\n                 ..\n             }) if span.ctxt() == ctxt => {\n-                let output = cx.tcx.fn_sig(def_id.to_def_id()).skip_binder().output();\n-                Some(if !output.is_ref() {\n-                    Position::Other(precedence)\n-                } else if output.has_placeholders() || output.has_opaque_types() {\n-                    Position::ReborrowStable(precedence)\n-                } else {\n-                    Position::DerefStable(precedence)\n-                })\n+                let output = cx\n+                    .tcx\n+                    .erase_late_bound_regions(cx.tcx.fn_sig(def_id.to_def_id()).output());\n+                Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n                     let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n                     Some(\n-                        if let Node::Expr(Expr {\n-                            kind: ExprKind::Closure(&Closure { fn_decl, .. }),\n-                            ..\n-                        }) = cx.tcx.hir().get(owner_id)\n+                        if let Node::Expr(\n+                            closure_expr @ Expr {\n+                                kind: ExprKind::Closure(closure),\n+                                ..\n+                            },\n+                        ) = cx.tcx.hir().get(owner_id)\n                         {\n-                            match fn_decl.output {\n-                                FnRetTy::Return(ty) => binding_ty_auto_deref_stability(ty, precedence),\n-                                FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n-                            }\n+                            closure_result_position(cx, closure, cx.typeck_results().expr_ty(closure_expr), precedence)\n                         } else {\n                             let output = cx\n                                 .tcx\n-                                .fn_sig(cx.tcx.hir().local_def_id(owner_id))\n-                                .skip_binder()\n-                                .output();\n-                            if !output.is_ref() {\n-                                Position::Other(precedence)\n-                            } else if output.has_placeholders() || output.has_opaque_types() {\n-                                Position::ReborrowStable(precedence)\n-                            } else {\n-                                Position::DerefStable(precedence)\n-                            }\n+                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).output());\n+                            ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n                         },\n                     )\n                 },\n+                ExprKind::Closure(closure) => Some(closure_result_position(\n+                    cx,\n+                    closure,\n+                    cx.typeck_results().expr_ty(parent),\n+                    precedence,\n+                )),\n                 ExprKind::Call(func, _) if func.hir_id == child_id => {\n                     (child_id == e.hir_id).then_some(Position::Callee)\n                 },\n@@ -755,8 +736,9 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                     .map(|(hir_ty, ty)| match hir_ty {\n                         // Type inference for closures can depend on how they're called. Only go by the explicit\n                         // types here.\n-                        Some(ty) => binding_ty_auto_deref_stability(ty, precedence),\n-                        None => param_auto_deref_stability(ty.skip_binder(), precedence),\n+                        Some(hir_ty) => binding_ty_auto_deref_stability(cx, hir_ty, precedence, ty.bound_vars()),\n+                        None => ty_auto_deref_stability(cx, cx.tcx.erase_late_bound_regions(ty), precedence)\n+                            .position_for_arg(),\n                     }),\n                 ExprKind::MethodCall(_, args, _) => {\n                     let id = cx.typeck_results().type_dependent_def_id(parent.hir_id).unwrap();\n@@ -797,7 +779,12 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                                 Position::MethodReceiver\n                             }\n                         } else {\n-                            param_auto_deref_stability(cx.tcx.fn_sig(id).skip_binder().inputs()[i], precedence)\n+                            ty_auto_deref_stability(\n+                                cx,\n+                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).input(i)),\n+                                precedence,\n+                            )\n+                            .position_for_arg()\n                         }\n                     })\n                 },\n@@ -808,7 +795,9 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                         .find(|f| f.expr.hir_id == child_id)\n                         .zip(variant)\n                         .and_then(|(field, variant)| variant.fields.iter().find(|f| f.name == field.ident.name))\n-                        .map(|field| param_auto_deref_stability(cx.tcx.type_of(field.did), precedence))\n+                        .map(|field| {\n+                            ty_auto_deref_stability(cx, cx.tcx.type_of(field.did), precedence).position_for_arg()\n+                        })\n                 },\n                 ExprKind::Field(child, name) if child.hir_id == e.hir_id => Some(Position::FieldAccess(name.name)),\n                 ExprKind::Unary(UnOp::Deref, child) if child.hir_id == e.hir_id => Some(Position::Deref),\n@@ -831,6 +820,26 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n     (position, adjustments)\n }\n \n+fn closure_result_position<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    closure: &'tcx Closure<'_>,\n+    ty: Ty<'tcx>,\n+    precedence: i8,\n+) -> Position {\n+    match closure.fn_decl.output {\n+        FnRetTy::Return(hir_ty) => {\n+            if let Some(sig) = ty_sig(cx, ty)\n+                && let Some(output) = sig.output()\n+            {\n+                binding_ty_auto_deref_stability(cx, hir_ty, precedence, output.bound_vars())\n+            } else {\n+                Position::Other(precedence)\n+            }\n+        },\n+        FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n+    }\n+}\n+\n // Checks the stability of auto-deref when assigned to a binding with the given explicit type.\n //\n // e.g.\n@@ -840,7 +849,12 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n //\n // Here `y1` and `y2` would resolve to different types, so the type `&Box<_>` is not stable when\n // switching to auto-dereferencing.\n-fn binding_ty_auto_deref_stability(ty: &hir::Ty<'_>, precedence: i8) -> Position {\n+fn binding_ty_auto_deref_stability<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    ty: &'tcx hir::Ty<'_>,\n+    precedence: i8,\n+    binder_args: &'tcx List<BoundVariableKind>,\n+) -> Position {\n     let TyKind::Rptr(_, ty) = &ty.kind else {\n         return Position::Other(precedence);\n     };\n@@ -870,21 +884,33 @@ fn binding_ty_auto_deref_stability(ty: &hir::Ty<'_>, precedence: i8) -> Position\n                 {\n                     Position::ReborrowStable(precedence)\n                 } else {\n-                    Position::DerefStable(precedence)\n+                    Position::DerefStable(\n+                        precedence,\n+                        cx.tcx\n+                            .erase_late_bound_regions(Binder::bind_with_vars(\n+                                cx.typeck_results().node_type(ty.ty.hir_id),\n+                                binder_args,\n+                            ))\n+                            .is_sized(cx.tcx.at(DUMMY_SP), cx.param_env.without_caller_bounds()),\n+                    )\n                 }\n             },\n-            TyKind::Slice(_)\n-            | TyKind::Array(..)\n-            | TyKind::BareFn(_)\n-            | TyKind::Never\n+            TyKind::Slice(_) => Position::DerefStable(precedence, false),\n+            TyKind::Array(..) | TyKind::Ptr(_) | TyKind::BareFn(_) => Position::DerefStable(precedence, true),\n+            TyKind::Never\n             | TyKind::Tup(_)\n-            | TyKind::Ptr(_)\n-            | TyKind::TraitObject(..)\n-            | TyKind::Path(_) => Position::DerefStable(precedence),\n-            TyKind::OpaqueDef(..)\n-            | TyKind::Infer\n-            | TyKind::Typeof(..)\n-            | TyKind::Err => Position::ReborrowStable(precedence),\n+            | TyKind::Path(_) => Position::DerefStable(\n+                precedence,\n+                cx.tcx\n+                    .erase_late_bound_regions(Binder::bind_with_vars(\n+                        cx.typeck_results().node_type(ty.ty.hir_id),\n+                        binder_args,\n+                    ))\n+                    .is_sized(cx.tcx.at(DUMMY_SP), cx.param_env.without_caller_bounds()),\n+            ),\n+            TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(..) | TyKind::TraitObject(..) | TyKind::Err => {\n+                Position::ReborrowStable(precedence)\n+            },\n         };\n     }\n }\n@@ -920,10 +946,39 @@ fn ty_contains_infer(ty: &hir::Ty<'_>) -> bool {\n     v.0\n }\n \n+struct TyPosition<'tcx> {\n+    position: Position,\n+    ty: Option<Ty<'tcx>>,\n+}\n+impl From<Position> for TyPosition<'_> {\n+    fn from(position: Position) -> Self {\n+        Self { position, ty: None }\n+    }\n+}\n+impl<'tcx> TyPosition<'tcx> {\n+    fn new_deref_stable_for_result(precedence: i8, ty: Ty<'tcx>) -> Self {\n+        Self {\n+            position: Position::ReborrowStable(precedence),\n+            ty: Some(ty),\n+        }\n+    }\n+    fn position_for_result(self, cx: &LateContext<'tcx>) -> Position {\n+        match (self.position, self.ty) {\n+            (Position::ReborrowStable(precedence), Some(ty)) => {\n+                Position::DerefStable(precedence, ty.is_sized(cx.tcx.at(DUMMY_SP), cx.param_env))\n+            },\n+            (position, _) => position,\n+        }\n+    }\n+    fn position_for_arg(self) -> Position {\n+        self.position\n+    }\n+}\n+\n // Checks whether a type is stable when switching to auto dereferencing,\n-fn param_auto_deref_stability(ty: Ty<'_>, precedence: i8) -> Position {\n+fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedence: i8) -> TyPosition<'tcx> {\n     let ty::Ref(_, mut ty, _) = *ty.kind() else {\n-        return Position::Other(precedence);\n+        return Position::Other(precedence).into();\n     };\n \n     loop {\n@@ -932,35 +987,38 @@ fn param_auto_deref_stability(ty: Ty<'_>, precedence: i8) -> Position {\n                 ty = ref_ty;\n                 continue;\n             },\n-            ty::Infer(_)\n-            | ty::Error(_)\n-            | ty::Param(_)\n-            | ty::Bound(..)\n-            | ty::Opaque(..)\n-            | ty::Placeholder(_)\n-            | ty::Dynamic(..) => Position::ReborrowStable(precedence),\n-            ty::Adt(..) if ty.has_placeholders() || ty.has_param_types_or_consts() => {\n-                Position::ReborrowStable(precedence)\n+            ty::Param(_) => TyPosition::new_deref_stable_for_result(precedence, ty),\n+            ty::Infer(_) | ty::Error(_) | ty::Bound(..) | ty::Opaque(..) | ty::Placeholder(_) | ty::Dynamic(..) => {\n+                Position::ReborrowStable(precedence).into()\n             },\n-            ty::Adt(..)\n-            | ty::Bool\n+            ty::Adt(..) if ty.has_placeholders() || ty.has_opaque_types() => {\n+                Position::ReborrowStable(precedence).into()\n+            },\n+            ty::Adt(_, substs) if substs.has_param_types_or_consts() => {\n+                TyPosition::new_deref_stable_for_result(precedence, ty)\n+            },\n+            ty::Bool\n             | ty::Char\n             | ty::Int(_)\n             | ty::Uint(_)\n-            | ty::Float(_)\n-            | ty::Foreign(_)\n-            | ty::Str\n             | ty::Array(..)\n-            | ty::Slice(..)\n+            | ty::Float(_)\n             | ty::RawPtr(..)\n+            | ty::FnPtr(_) => Position::DerefStable(precedence, true).into(),\n+            ty::Str | ty::Slice(..) => Position::DerefStable(precedence, false).into(),\n+            ty::Adt(..)\n+            | ty::Foreign(_)\n             | ty::FnDef(..)\n-            | ty::FnPtr(_)\n-            | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n+            | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Projection(_) => Position::DerefStable(precedence),\n+            | ty::Projection(_) => Position::DerefStable(\n+                precedence,\n+                ty.is_sized(cx.tcx.at(DUMMY_SP), cx.param_env.without_caller_bounds()),\n+            )\n+            .into(),\n         };\n     }\n }\n@@ -1040,34 +1098,64 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 diag.span_suggestion(data.span, \"change this to\", sugg, app);\n             });\n         },\n-        State::ExplicitDeref { deref_span_id } => {\n-            let (span, hir_id, precedence) = if let Some((span, hir_id)) = deref_span_id\n+        State::ExplicitDeref { mutability } => {\n+            if matches!(\n+                expr.kind,\n+                ExprKind::Block(..)\n+                    | ExprKind::ConstBlock(_)\n+                    | ExprKind::If(..)\n+                    | ExprKind::Loop(..)\n+                    | ExprKind::Match(..)\n+            ) && matches!(data.position, Position::DerefStable(_, true))\n+            {\n+                // Rustc bug: auto deref doesn't work on block expression when targeting sized types.\n+                return;\n+            }\n+\n+            let (prefix, precedence) = if let Some(mutability) = mutability\n                 && !cx.typeck_results().expr_ty(expr).is_ref()\n             {\n-                (span, hir_id, PREC_PREFIX)\n+                let prefix = match mutability {\n+                    Mutability::Not => \"&\",\n+                    Mutability::Mut => \"&mut \",\n+                };\n+                (prefix, 0)\n             } else {\n-                (data.span, data.hir_id, data.position.precedence())\n+                (\"\", data.position.precedence())\n             };\n             span_lint_hir_and_then(\n                 cx,\n                 EXPLICIT_AUTO_DEREF,\n-                hir_id,\n-                span,\n+                data.hir_id,\n+                data.span,\n                 \"deref which would be done by auto-deref\",\n                 |diag| {\n                     let mut app = Applicability::MachineApplicable;\n-                    let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, span.ctxt(), \"..\", &mut app);\n+                    let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n                     let sugg =\n                         if !snip_is_macro && expr.precedence().order() < precedence && !has_enclosing_paren(&snip) {\n-                            format!(\"({})\", snip)\n+                            format!(\"{}({})\", prefix, snip)\n                         } else {\n-                            snip.into()\n+                            format!(\"{}{}\", prefix, snip)\n                         };\n-                    diag.span_suggestion(span, \"try this\", sugg, app);\n+                    diag.span_suggestion(data.span, \"try this\", sugg, app);\n                 },\n             );\n         },\n         State::ExplicitDerefField { .. } => {\n+            if matches!(\n+                expr.kind,\n+                ExprKind::Block(..)\n+                    | ExprKind::ConstBlock(_)\n+                    | ExprKind::If(..)\n+                    | ExprKind::Loop(..)\n+                    | ExprKind::Match(..)\n+            ) && matches!(data.position, Position::DerefStable(_, true))\n+            {\n+                // Rustc bug: auto deref doesn't work on block expression when targeting sized types.\n+                return;\n+            }\n+\n             span_lint_hir_and_then(\n                 cx,\n                 EXPLICIT_AUTO_DEREF,\n@@ -1081,7 +1169,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 },\n             );\n         },\n-        State::Borrow | State::Reborrow { .. } => (),\n+        State::Borrow { .. } | State::Reborrow { .. } => (),\n     }\n }\n "}, {"sha": "6e6615f08ee71f66b21ee5d8e1bf81a7a99e93f1", "filename": "clippy_lints/src/disallowed_names.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdisallowed_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fdisallowed_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_names.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -6,7 +6,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usage of blacklisted names for variables, such\n+    /// Checks for usage of disallowed names for variables, such\n     /// as `foo`.\n     ///\n     /// ### Why is this bad?\n@@ -18,21 +18,21 @@ declare_clippy_lint! {\n     /// let foo = 3.14;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n-    pub BLACKLISTED_NAME,\n+    pub DISALLOWED_NAMES,\n     style,\n-    \"usage of a blacklisted/placeholder name\"\n+    \"usage of a disallowed/placeholder name\"\n }\n \n #[derive(Clone, Debug)]\n-pub struct BlacklistedName {\n-    blacklist: FxHashSet<String>,\n+pub struct DisallowedNames {\n+    disallow: FxHashSet<String>,\n     test_modules_deep: u32,\n }\n \n-impl BlacklistedName {\n-    pub fn new(blacklist: FxHashSet<String>) -> Self {\n+impl DisallowedNames {\n+    pub fn new(disallow: FxHashSet<String>) -> Self {\n         Self {\n-            blacklist,\n+            disallow,\n             test_modules_deep: 0,\n         }\n     }\n@@ -42,9 +42,9 @@ impl BlacklistedName {\n     }\n }\n \n-impl_lint_pass!(BlacklistedName => [BLACKLISTED_NAME]);\n+impl_lint_pass!(DisallowedNames => [DISALLOWED_NAMES]);\n \n-impl<'tcx> LateLintPass<'tcx> for BlacklistedName {\n+impl<'tcx> LateLintPass<'tcx> for DisallowedNames {\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if is_test_module_or_function(cx.tcx, item) {\n             self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n@@ -58,12 +58,12 @@ impl<'tcx> LateLintPass<'tcx> for BlacklistedName {\n         }\n \n         if let PatKind::Binding(.., ident, _) = pat.kind {\n-            if self.blacklist.contains(&ident.name.to_string()) {\n+            if self.disallow.contains(&ident.name.to_string()) {\n                 span_lint(\n                     cx,\n-                    BLACKLISTED_NAME,\n+                    DISALLOWED_NAMES,\n                     ident.span,\n-                    &format!(\"use of a blacklisted/placeholder name `{}`\", ident.name),\n+                    &format!(\"use of a disallowed/placeholder name `{}`\", ident.name),\n                 );\n             }\n         }", "previous_filename": "clippy_lints/src/blacklisted_name.rs"}, {"sha": "01cefe4af8532638a5179eba0c26fde9599fcdbe", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::is_span_if;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -297,12 +298,11 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n     if_chain! {\n         if !first.span.from_expansion() && !second.span.from_expansion();\n-        if let ExprKind::If(cond_expr, ..) = &first.kind;\n+        if matches!(first.kind, ExprKind::If(..));\n         if is_block(second) || is_if(second);\n \n         // Proc-macros can give weird spans. Make sure this is actually an `if`.\n-        if let Some(if_snip) = snippet_opt(cx, first.span.until(cond_expr.span));\n-        if if_snip.starts_with(\"if\");\n+        if is_span_if(cx, first.span);\n \n         // If there is a line break between the two expressions, don't lint.\n         // If there is a non-whitespace character, this span came from a proc-macro."}, {"sha": "74941d817be360bec835d08f4747b9e0078651fd", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -46,7 +46,7 @@ declare_lint_pass!(FromStrRadix10 => [FROM_STR_RADIX_10]);\n impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::Call(maybe_path, arguments) = &exp.kind;\n+            if let ExprKind::Call(maybe_path, [src, radix]) = &exp.kind;\n             if let ExprKind::Path(QPath::TypeRelative(ty, pathseg)) = &maybe_path.kind;\n \n             // check if the first part of the path is some integer primitive\n@@ -60,20 +60,19 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n             if pathseg.ident.name.as_str() == \"from_str_radix\";\n \n             // check if the second argument is a primitive `10`\n-            if arguments.len() == 2;\n-            if let ExprKind::Lit(lit) = &arguments[1].kind;\n+            if let ExprKind::Lit(lit) = &radix.kind;\n             if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n \n             then {\n-                let expr = if let ExprKind::AddrOf(_, _, expr) = &arguments[0].kind {\n+                let expr = if let ExprKind::AddrOf(_, _, expr) = &src.kind {\n                     let ty = cx.typeck_results().expr_ty(expr);\n                     if is_ty_stringish(cx, ty) {\n                         expr\n                     } else {\n-                        &arguments[0]\n+                        &src\n                     }\n                 } else {\n-                    &arguments[0]\n+                    &src\n                 };\n \n                 let sugg = Sugg::hir_with_applicability("}, {"sha": "01082cc8eeb64933304d54f3c2616d81a723f247", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -15,11 +15,10 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n-    LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n     LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n@@ -46,6 +45,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n     LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n+    LintId::of(disallowed_names::DISALLOWED_NAMES),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),\n     LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n@@ -144,7 +144,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::NEEDLESS_MATCH),\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n-    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n     LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n@@ -267,6 +266,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n+    LintId::of(partialeq_to_none::PARTIALEQ_TO_NONE),\n     LintId::of(precedence::PRECEDENCE),\n     LintId::of(ptr::CMP_NULL),\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),"}, {"sha": "006275d1383ff0d313784fb9a5a486d88068bd3e", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -8,7 +8,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(attrs::DEPRECATED_SEMVER),\n     LintId::of(attrs::MISMATCHED_TARGET_OS),\n     LintId::of(attrs::USELESS_ATTRIBUTE),\n-    LintId::of(booleans::LOGIC_BUG),\n+    LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n     LintId::of(copies::IFS_SAME_COND),"}, {"sha": "c540573b80228e8f3786a4117ab3dbda503266f7", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -55,11 +55,10 @@ store.register_lints(&[\n     await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE,\n     await_holding_invalid::AWAIT_HOLDING_LOCK,\n     await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n-    blacklisted_name::BLACKLISTED_NAME,\n     blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n     bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n-    booleans::LOGIC_BUG,\n     booleans::NONMINIMAL_BOOL,\n+    booleans::OVERLY_COMPLEX_BOOL_EXPR,\n     borrow_as_ptr::BORROW_AS_PTR,\n     borrow_deref_ref::BORROW_DEREF_REF,\n     bytecount::NAIVE_BYTECOUNT,\n@@ -116,6 +115,7 @@ store.register_lints(&[\n     derive::EXPL_IMPL_CLONE_ON_COPY,\n     derive::UNSAFE_DERIVE_DESERIALIZE,\n     disallowed_methods::DISALLOWED_METHODS,\n+    disallowed_names::DISALLOWED_NAMES,\n     disallowed_script_idents::DISALLOWED_SCRIPT_IDENTS,\n     disallowed_types::DISALLOWED_TYPES,\n     doc::DOC_MARKDOWN,\n@@ -244,6 +244,7 @@ store.register_lints(&[\n     manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n     manual_bits::MANUAL_BITS,\n+    manual_instant_elapsed::MANUAL_INSTANT_ELAPSED,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,\n     manual_rem_euclid::MANUAL_REM_EUCLID,\n@@ -453,6 +454,7 @@ store.register_lints(&[\n     panic_unimplemented::UNIMPLEMENTED,\n     panic_unimplemented::UNREACHABLE,\n     partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n+    partialeq_to_none::PARTIALEQ_TO_NONE,\n     pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE,\n     pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF,\n     path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,"}, {"sha": "91210b23afe30c46c31d796b7b4f1e1bdcae82b5", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -13,6 +13,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(future_not_send::FUTURE_NOT_SEND),\n     LintId::of(index_refutable_slice::INDEX_REFUTABLE_SLICE),\n     LintId::of(let_if_seq::USELESS_LET_IF_SEQ),\n+    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(methods::ITER_WITH_DRAIN),\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),"}, {"sha": "bd7d1a15ab4ea1dad05f3b905d28f3392107d38f", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -49,6 +49,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(loops::EXPLICIT_ITER_LOOP),\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n     LintId::of(manual_assert::MANUAL_ASSERT),\n+    LintId::of(manual_instant_elapsed::MANUAL_INSTANT_ELAPSED),\n     LintId::of(manual_ok_or::MANUAL_OK_OR),\n     LintId::of(matches::MATCH_BOOL),\n     LintId::of(matches::MATCH_ON_VEC_ITEMS),"}, {"sha": "bfa654238f130386f1332b134d6a86eefc0fe544", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -4,7 +4,6 @@\n \n store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n-    LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),\n@@ -17,6 +16,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(dereference::NEEDLESS_BORROW),\n     LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n+    LintId::of(disallowed_names::DISALLOWED_NAMES),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),\n     LintId::of(doc::NEEDLESS_DOCTEST_MAIN),\n@@ -100,6 +100,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n     LintId::of(operators::OP_REF),\n     LintId::of(operators::PTR_EQ),\n+    LintId::of(partialeq_to_none::PARTIALEQ_TO_NONE),\n     LintId::of(ptr::CMP_NULL),\n     LintId::of(ptr::PTR_ARG),\n     LintId::of(question_mark::QUESTION_MARK),"}, {"sha": "964992bd94fe259f64aa4cd6a99a3e05621cca44", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -22,7 +22,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n-    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),"}, {"sha": "2975399a8bbbacca3e07ff1b7b42f05ee74ed7e3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -178,7 +178,6 @@ mod assertions_on_result_states;\n mod async_yields_async;\n mod attrs;\n mod await_holding_invalid;\n-mod blacklisted_name;\n mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n mod booleans;\n@@ -206,6 +205,7 @@ mod dereference;\n mod derivable_impls;\n mod derive;\n mod disallowed_methods;\n+mod disallowed_names;\n mod disallowed_script_idents;\n mod disallowed_types;\n mod doc;\n@@ -274,6 +274,7 @@ mod main_recursion;\n mod manual_assert;\n mod manual_async_fn;\n mod manual_bits;\n+mod manual_instant_elapsed;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n mod manual_rem_euclid;\n@@ -332,6 +333,7 @@ mod overflow_check_conditional;\n mod panic_in_result_fn;\n mod panic_unimplemented;\n mod partialeq_ne_impl;\n+mod partialeq_to_none;\n mod pass_by_ref_or_value;\n mod path_buf_push_overwrite;\n mod pattern_type_mismatch;\n@@ -487,7 +489,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         },\n     };\n \n-    let TryConf { conf, errors } = utils::conf::read(&file_name);\n+    let TryConf { conf, errors, warnings } = utils::conf::read(&file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n         sess.err(&format!(\n@@ -497,6 +499,15 @@ pub fn read_conf(sess: &Session) -> Conf {\n         ));\n     }\n \n+    for warning in warnings {\n+        sess.struct_warn(&format!(\n+            \"error reading Clippy's configuration file `{}`: {}\",\n+            file_name.display(),\n+            format_error(warning)\n+        ))\n+        .emit();\n+    }\n+\n     conf\n }\n \n@@ -675,8 +686,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(swap::Swap));\n     store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n     store.register_late_pass(|| Box::new(new_without_default::NewWithoutDefault::default()));\n-    let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(blacklisted_name::BlacklistedName::new(blacklisted_names.clone())));\n+    let disallowed_names = conf.disallowed_names.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n     store.register_late_pass(move || {\n@@ -921,6 +932,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n+    store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n+    store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "a65df48e413e842115fc8154ab7787944d4c2851", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -119,11 +119,9 @@ fn build_manual_memcpy_suggestion<'tcx>(\n \n     let print_limit = |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| {\n         if_chain! {\n-            if let ExprKind::MethodCall(method, len_args, _) = end.kind;\n+            if let ExprKind::MethodCall(method, [recv], _) = end.kind;\n             if method.ident.name == sym::len;\n-            if len_args.len() == 1;\n-            if let Some(arg) = len_args.get(0);\n-            if path_to_local(arg) == path_to_local(base);\n+            if path_to_local(recv) == path_to_local(base);\n             then {\n                 if sugg.to_string() == end_str {\n                     sugg::EMPTY.into()\n@@ -343,10 +341,8 @@ fn get_slice_like_element_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Opti\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, args, _) = expr.kind;\n+        if let ExprKind::MethodCall(method, [arg], _) = expr.kind;\n         if method.ident.name == sym::clone;\n-        if args.len() == 1;\n-        if let Some(arg) = args.get(0);\n         then { arg } else { expr }\n     }\n }"}, {"sha": "7ca4a7c4ebfc276a60a692f1491056942a621810", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -188,10 +188,9 @@ pub(super) fn check<'tcx>(\n \n fn is_len_call(expr: &Expr<'_>, var: Symbol) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, len_args, _) = expr.kind;\n-        if len_args.len() == 1;\n+        if let ExprKind::MethodCall(method, [recv], _) = expr.kind;\n         if method.ident.name == sym::len;\n-        if let ExprKind::Path(QPath::Resolved(_, path)) = len_args[0].kind;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = recv.kind;\n         if path.segments.len() == 1;\n         if path.segments[0].ident.name == var;\n         then {"}, {"sha": "331cda1db8990c8927794f5828420b71e9fa55fd", "filename": "clippy_lints/src/manual_instant_elapsed.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_instant_elapsed.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,69 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints subtraction between `Instant::now()` and another `Instant`.\n+    ///\n+    /// ### Why is this bad?\n+    /// It is easy to accidentally write `prev_instant - Instant::now()`, which will always be 0ns\n+    /// as `Instant` subtraction saturates.\n+    ///\n+    /// `prev_instant.elapsed()` also more clearly signals intention.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = Instant::now() - prev_instant;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::time::Instant;\n+    /// let prev_instant = Instant::now();\n+    /// let duration = prev_instant.elapsed();\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub MANUAL_INSTANT_ELAPSED,\n+    pedantic,\n+    \"subtraction between `Instant::now()` and previous `Instant`\"\n+}\n+\n+declare_lint_pass!(ManualInstantElapsed => [MANUAL_INSTANT_ELAPSED]);\n+\n+impl LateLintPass<'_> for ManualInstantElapsed {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n+        if let ExprKind::Binary(Spanned {node: BinOpKind::Sub, ..}, lhs, rhs) = expr.kind\n+            && check_instant_now_call(cx, lhs)\n+            && let ty_resolved = cx.typeck_results().expr_ty(rhs)\n+            && let rustc_middle::ty::Adt(def, _) = ty_resolved.kind()\n+            && clippy_utils::match_def_path(cx, def.did(), &clippy_utils::paths::INSTANT)\n+            && let Some(sugg) = clippy_utils::sugg::Sugg::hir_opt(cx, rhs)\n+        {\n+            span_lint_and_sugg(\n+                cx,\n+                MANUAL_INSTANT_ELAPSED,\n+                expr.span,\n+                \"manual implementation of `Instant::elapsed`\",\n+                \"try\",\n+                format!(\"{}.elapsed()\", sugg.maybe_par()),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_instant_now_call(cx: &LateContext<'_>, expr_block: &'_ Expr<'_>) -> bool {\n+    if let ExprKind::Call(fn_expr, []) = expr_block.kind\n+        && let Some(fn_id) = clippy_utils::path_def_id(cx, fn_expr)\n+        && clippy_utils::match_def_path(cx, fn_id, &clippy_utils::paths::INSTANT_NOW)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "cf5004399b884cb67e8e1553e4d7aaa9ab9eba5f", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -47,17 +47,14 @@ impl<'tcx> LateLintPass<'tcx> for ManualOkOr {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(method_segment, args, _) = scrutinee.kind;\n+            if let ExprKind::MethodCall(method_segment, [receiver, or_expr, map_expr], _) = scrutinee.kind;\n             if method_segment.ident.name == sym!(map_or);\n-            if args.len() == 3;\n-            let method_receiver = &args[0];\n-            let ty = cx.typeck_results().expr_ty(method_receiver);\n+            let ty = cx.typeck_results().expr_ty(receiver);\n             if is_type_diagnostic_item(cx, ty, sym::Option);\n-            let or_expr = &args[1];\n-            if is_ok_wrapping(cx, &args[2]);\n+            if is_ok_wrapping(cx, map_expr);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;\n             if is_lang_ctor(cx, err_path, ResultErr);\n-            if let Some(method_receiver_snippet) = snippet_opt(cx, method_receiver.span);\n+            if let Some(method_receiver_snippet) = snippet_opt(cx, receiver.span);\n             if let Some(err_arg_snippet) = snippet_opt(cx, err_arg.span);\n             if let Some(indent) = indent_of(cx, scrutinee.span);\n             then {"}, {"sha": "1e542447c96eca92b3668e723c5bef92393abb68", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -113,18 +113,18 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n         }\n \n         // check if this is a method call (e.g. x.foo())\n-        if let ExprKind::MethodCall(method, args, _) = e.kind {\n+        if let ExprKind::MethodCall(method, [_, arg], _) = e.kind {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n-            if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n+            if method.ident.name == sym!(map_err) {\n                 // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n                 // fields\n                 if let ExprKind::Closure(&Closure {\n                     capture_clause,\n                     body,\n                     fn_decl_span,\n                     ..\n-                }) = args[1].kind\n+                }) = arg.kind\n                 {\n                     // check if this is by Reference (meaning there's no move statement)\n                     if capture_clause == CaptureBy::Ref {"}, {"sha": "6db852c3ffe79a1c6f9234f7f3b3a35cd6af7848", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -97,11 +97,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MapUnit => [OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN]);\n \n fn is_unit_type(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Tuple(slice) => slice.is_empty(),\n-        ty::Never => true,\n-        _ => false,\n-    }\n+    ty.is_unit() || ty.is_never()\n }\n \n fn is_unit_function(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {"}, {"sha": "a0efdecec67f49aac5d6af449d4156c6059729e1", "filename": "clippy_lints/src/matches/match_as_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -72,10 +72,10 @@ fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<BindingAnnotat\n         if is_lang_ctor(cx, qpath, LangItem::OptionSome);\n         if let PatKind::Binding(rb, .., ident, _) = first_pat.kind;\n         if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n-        if let ExprKind::Call(e, args) = peel_blocks(arm.body).kind;\n+        if let ExprKind::Call(e, [arg]) = peel_blocks(arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n-        if is_lang_ctor(cx, some_path, LangItem::OptionSome) && args.len() == 1;\n-        if let ExprKind::Path(QPath::Resolved(_, path2)) = args[0].kind;\n+        if is_lang_ctor(cx, some_path, LangItem::OptionSome);\n+        if let ExprKind::Path(QPath::Resolved(_, path2)) = arg.kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n             return Some(rb)"}, {"sha": "e6b183fc05f25df01fabded1ce6bb49835880cf9", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -21,8 +21,8 @@ mod single_match;\n mod try_err;\n mod wild_in_or_pats;\n \n-use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n+use clippy_utils::source::{snippet_opt, walk_span_to_context};\n+use clippy_utils::{higher, in_constant, is_span_match, meets_msrv, msrvs};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -835,7 +835,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.60.0\"]\n     pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n-    suspicious,\n+    nursery,\n     \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n }\n \n@@ -949,7 +949,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         let from_expansion = expr.span.from_expansion();\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n-            if source == MatchSource::Normal && !span_starts_with(cx, expr.span, \"match\") {\n+            if source == MatchSource::Normal && !is_span_match(cx, expr.span) {\n                 return;\n             }\n             if matches!(source, MatchSource::Normal | MatchSource::ForLoopDesugar) {"}, {"sha": "663277d11365fa53e11f8f886d631d2dbcb33bdb", "filename": "clippy_lints/src/matches/try_err.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -23,12 +23,10 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, scrutine\n     //         val,\n     // };\n     if_chain! {\n-        if let ExprKind::Call(match_fun, try_args) = scrutinee.kind;\n+        if let ExprKind::Call(match_fun, [try_arg, ..]) = scrutinee.kind;\n         if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n         if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n-        if let Some(try_arg) = try_args.get(0);\n-        if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n-        if let Some(err_arg) = err_args.get(0);\n+        if let ExprKind::Call(err_fun, [err_arg, ..]) = try_arg.kind;\n         if let ExprKind::Path(ref err_fun_path) = err_fun.kind;\n         if is_lang_ctor(cx, err_fun_path, ResultErr);\n         if let Some(return_ty) = find_return_type(cx, &expr.kind);"}, {"sha": "cad3ea2a176cd0c25b5dc80fc2097cfbce45a2c0", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -163,8 +163,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'\n     }\n \n     if_chain! {\n-        if let ExprKind::Call(repl_func, repl_args) = src.kind;\n-        if repl_args.is_empty();\n+        if let ExprKind::Call(repl_func, []) = src.kind;\n         if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n         if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n         then {\n@@ -246,11 +245,10 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // Check that `expr` is a call to `mem::replace()`\n-            if let ExprKind::Call(func, func_args) = expr.kind;\n+            if let ExprKind::Call(func, [dest, src]) = expr.kind;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n             if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::mem_replace, def_id);\n-            if let [dest, src] = func_args;\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);"}, {"sha": "60e1355f9b92d889036ae7b2c67e4d510e4305c0", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::source::snippet_with_context;\n use clippy_utils::sugg;\n use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Expr, ExprKind, MatchSource, Node, PatKind};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust};\n use rustc_span::symbol::{sym, Symbol};\n@@ -86,6 +86,11 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                 {\n                     return;\n                 },\n+                // ? is a Call, makes sure not to rec *x?, but rather (*x)?\n+                ExprKind::Call(hir_callee, _) => matches!(\n+                    hir_callee.kind,\n+                    ExprKind::Path(QPath::LangItem(rustc_hir::LangItem::TryTraitBranch, _, _))\n+                ),\n                 ExprKind::MethodCall(_, [self_arg, ..], _) if expr.hir_id == self_arg.hir_id => true,\n                 ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n                 | ExprKind::Field(..)"}, {"sha": "5ef08ca6290bae6adbc15a6887edbd755c040711", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -12,9 +12,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((EXPECT_USED, \"an Option\", \"None\"))\n+        Some((EXPECT_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((EXPECT_USED, \"a Result\", \"Err\"))\n+        Some((EXPECT_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,14 +23,14 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `expect()` on `{}` value\", kind,),\n+            &format!(\"used `expect()` on `{kind}` value\"),\n             None,\n-            &format!(\"if this value is an `{}`, it will panic\", none_value,),\n+            &format!(\"if this value is {none_prefix}`{none_value}`, it will panic\"),\n         );\n     }\n }"}, {"sha": "5ac6b09f0aa27bff22fa87c05292791f0a13f1b0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -204,6 +204,17 @@ declare_clippy_lint! {\n     /// option.expect(\"more helpful message\");\n     /// result.expect(\"more helpful message\");\n     /// ```\n+    ///\n+    /// If [expect_used](#expect_used) is enabled, instead:\n+    /// ```rust,ignore\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option?;\n+    ///\n+    /// // or\n+    ///\n+    /// result?;\n+    /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub UNWRAP_USED,\n     restriction,"}, {"sha": "ce1a52e5480afb81226859153023754301935f84", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,20 +1,20 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_in_test_function;\n use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_in_test_function, is_lint_allowed};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-use super::UNWRAP_USED;\n+use super::{EXPECT_USED, UNWRAP_USED};\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_unwrap_in_tests: bool) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((UNWRAP_USED, \"an Option\", \"None\"))\n+        Some((UNWRAP_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((UNWRAP_USED, \"a Result\", \"Err\"))\n+        Some((UNWRAP_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,18 +23,23 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n+        let help = if is_lint_allowed(cx, EXPECT_USED, expr.hir_id) {\n+            format!(\n+                \"if you don't want to handle the `{none_value}` case gracefully, consider \\\n+                using `expect()` to provide a better panic message\"\n+            )\n+        } else {\n+            format!(\"if this value is {none_prefix}`{none_value}`, it will panic\")\n+        };\n+\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `unwrap()` on `{}` value\", kind,),\n+            &format!(\"used `unwrap()` on `{kind}` value\"),\n             None,\n-            &format!(\n-                \"if you don't want to handle the `{}` case gracefully, consider \\\n-                using `expect()` to provide a better panic message\",\n-                none_value,\n-            ),\n+            &help,\n         );\n     }\n }"}, {"sha": "bc304c081b9062ec2f121665a81db06a6a20d48b", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n-use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n+use clippy_utils::{\n+    fn_has_unsatisfiable_preds, is_entrypoint_fn, is_from_proc_macro, meets_msrv, msrvs, trait_ref_of_method,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n@@ -86,10 +88,10 @@ impl MissingConstForFn {\n impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n     fn check_fn(\n         &mut self,\n-        cx: &LateContext<'_>,\n-        kind: FnKind<'_>,\n+        cx: &LateContext<'tcx>,\n+        kind: FnKind<'tcx>,\n         _: &FnDecl<'_>,\n-        _: &Body<'_>,\n+        body: &Body<'tcx>,\n         span: Span,\n         hir_id: HirId,\n     ) {\n@@ -124,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Method(_, sig, ..) => {\n                 if trait_ref_of_method(cx, def_id).is_some()\n                     || already_const(sig.header)\n-                    || method_accepts_dropable(cx, sig.decl.inputs)\n+                    || method_accepts_droppable(cx, sig.decl.inputs)\n                 {\n                     return;\n                 }\n@@ -144,6 +146,10 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             }\n         }\n \n+        if is_from_proc_macro(cx, &(&kind, body, hir_id, span)) {\n+            return;\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {\n@@ -159,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n /// Returns true if any of the method parameters is a type that implements `Drop`. The method\n /// can't be made const then, because `drop` can't be const-evaluated.\n-fn method_accepts_dropable(cx: &LateContext<'_>, param_tys: &[hir::Ty<'_>]) -> bool {\n+fn method_accepts_droppable(cx: &LateContext<'_>, param_tys: &[hir::Ty<'_>]) -> bool {\n     // If any of the params are droppable, return true\n     param_tys.iter().any(|hir_ty| {\n         let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);"}, {"sha": "3701fdb4adbffb1604b38dacf38166161098716a", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -7,7 +7,8 @@\n \n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n-use rustc_ast::ast;\n+use clippy_utils::is_from_proc_macro;\n+use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty::DefIdTree;\n@@ -57,6 +58,20 @@ impl MissingDoc {\n         *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n     }\n \n+    fn has_include(meta: Option<MetaItem>) -> bool {\n+        if_chain! {\n+            if let Some(meta) = meta;\n+            if let MetaItemKind::List(list) = meta.kind;\n+            if let Some(meta) = list.get(0);\n+            if let Some(name) = meta.ident();\n+            then {\n+                name.name == sym::include\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+\n     fn check_missing_docs_attrs(\n         &self,\n         cx: &LateContext<'_>,\n@@ -80,7 +95,9 @@ impl MissingDoc {\n             return;\n         }\n \n-        let has_doc = attrs.iter().any(|a| a.doc_str().is_some());\n+        let has_doc = attrs\n+            .iter()\n+            .any(|a| a.doc_str().is_some() || Self::has_include(a.meta()));\n         if !has_doc {\n             span_lint(\n                 cx,\n@@ -141,14 +158,18 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+        if !is_from_proc_macro(cx, it) {\n+            self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+        }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n         let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+        if !is_from_proc_macro(cx, trait_item) {\n+            self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+        }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n@@ -163,18 +184,24 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n-        self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+        if !is_from_proc_macro(cx, impl_item) {\n+            self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+        }\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n-            self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+            if !is_from_proc_macro(cx, sf) {\n+                self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+            }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n         let attrs = cx.tcx.hir().attrs(v.id);\n-        self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+        if !is_from_proc_macro(cx, v) {\n+            self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+        }\n     }\n }"}, {"sha": "eee7642068d6237bebe5fdcae8b91624fe40518b", "filename": "clippy_lints/src/partialeq_to_none.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_to_none.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,104 @@\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg, is_lang_ctor, peel_hir_expr_refs, peel_ref_operators, sugg,\n+    ty::is_type_diagnostic_item,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, LangItem};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for binary comparisons to a literal `Option::None`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// A programmer checking if some `foo` is `None` via a comparison `foo == None`\n+    /// is usually inspired from other programming languages (e.g. `foo is None`\n+    /// in Python).\n+    /// Checking if a value of type `Option<T>` is (not) equal to `None` in that\n+    /// way relies on `T: PartialEq` to do the comparison, which is unneeded.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo(f: Option<u32>) -> &'static str {\n+    ///     if f != None { \"yay\" } else { \"nay\" }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo(f: Option<u32>) -> &'static str {\n+    ///     if f.is_some() { \"yay\" } else { \"nay\" }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub PARTIALEQ_TO_NONE,\n+    style,\n+    \"Binary comparison to `Option<T>::None` relies on `T: PartialEq`, which is unneeded\"\n+}\n+declare_lint_pass!(PartialeqToNone => [PARTIALEQ_TO_NONE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PartialeqToNone {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        // Skip expanded code, as we have no control over it anyway...\n+        if e.span.from_expansion() {\n+            return;\n+        }\n+\n+        // If the expression is of type `Option`\n+        let is_ty_option =\n+            |expr: &Expr<'_>| is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr).peel_refs(), sym::Option);\n+\n+        // If the expression is a literal `Option::None`\n+        let is_none_ctor = |expr: &Expr<'_>| {\n+            matches!(&peel_hir_expr_refs(expr).0.kind,\n+            ExprKind::Path(p) if is_lang_ctor(cx, p, LangItem::OptionNone))\n+        };\n+\n+        let mut applicability = Applicability::MachineApplicable;\n+\n+        if let ExprKind::Binary(op, left_side, right_side) = e.kind {\n+            // All other comparisons (e.g. `>= None`) have special meaning wrt T\n+            let is_eq = match op.node {\n+                BinOpKind::Eq => true,\n+                BinOpKind::Ne => false,\n+                _ => return,\n+            };\n+\n+            // We are only interested in comparisons between `Option` and a literal `Option::None`\n+            let scrutinee = match (\n+                is_none_ctor(left_side) && is_ty_option(right_side),\n+                is_none_ctor(right_side) && is_ty_option(left_side),\n+            ) {\n+                (true, false) => right_side,\n+                (false, true) => left_side,\n+                _ => return,\n+            };\n+\n+            // Peel away refs/derefs (as long as we don't cross manual deref impls), as\n+            // autoref/autoderef will take care of those\n+            let sugg = format!(\n+                \"{}.{}\",\n+                sugg::Sugg::hir_with_applicability(cx, peel_ref_operators(cx, scrutinee), \"..\", &mut applicability)\n+                    .maybe_par(),\n+                if is_eq { \"is_none()\" } else { \"is_some()\" }\n+            );\n+\n+            span_lint_and_sugg(\n+                cx,\n+                PARTIALEQ_TO_NONE,\n+                e.span,\n+                \"binary comparison to literal `Option::None`\",\n+                if is_eq {\n+                    \"use `Option::is_none()` instead\"\n+                } else {\n+                    \"use `Option::is_some()` instead\"\n+                },\n+                sugg,\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "bc6a918f7035544ace250e7516c78731b1edd98e", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -46,11 +46,9 @@ declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [recv, get_index_arg], _) = expr.kind;\n             if path.ident.name == sym!(push);\n-            if args.len() == 2;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::PathBuf);\n-            if let Some(get_index_arg) = args.get(1);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv).peel_refs(), sym::PathBuf);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n             if let pushed_path = Path::new(path_lit.as_str());"}, {"sha": "964a057f00d32e5c1da41c7a4d1b7a3525710f0c", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -86,8 +86,7 @@ fn check_is_none_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Ex\n     if_chain! {\n         if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let ExprKind::MethodCall(segment, args, _) = &cond.kind;\n-        if let Some(caller) = args.get(0);\n+        if let ExprKind::MethodCall(segment, [caller, ..], _) = &cond.kind;\n         let caller_ty = cx.typeck_results().expr_ty(caller);\n         let if_block = IfBlockType::IfIs(caller, caller_ty, segment.ident.name, then, r#else);\n         if is_early_return(sym::Option, cx, &if_block) || is_early_return(sym::Result, cx, &if_block);"}, {"sha": "fbf842c339e4906b3fff22a5e3a2d608bc40e047", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -385,24 +385,24 @@ fn check_range_zip_with_len(cx: &LateContext<'_>, path: &PathSegment<'_>, args:\n         if path.ident.as_str() == \"zip\";\n         if let [iter, zip_arg] = args;\n         // `.iter()` call\n-        if let ExprKind::MethodCall(iter_path, iter_args, _) = iter.kind;\n+        if let ExprKind::MethodCall(iter_path, [iter_caller, ..], _) = iter.kind;\n         if iter_path.ident.name == sym::iter;\n         // range expression in `.zip()` call: `0..x.len()`\n         if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::Range::hir(zip_arg);\n         if is_integer_const(cx, start, 0);\n         // `.len()` call\n-        if let ExprKind::MethodCall(len_path, len_args, _) = end.kind;\n-        if len_path.ident.name == sym::len && len_args.len() == 1;\n+        if let ExprKind::MethodCall(len_path, [len_caller], _) = end.kind;\n+        if len_path.ident.name == sym::len;\n         // `.iter()` and `.len()` called on same `Path`\n-        if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_args[0].kind;\n-        if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_args[0].kind;\n-        if SpanlessEq::new(cx).eq_path_segments(&iter_path.segments, &len_path.segments);\n+        if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_caller.kind;\n+        if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_caller.kind;\n+        if SpanlessEq::new(cx).eq_path_segments(iter_path.segments, len_path.segments);\n         then {\n             span_lint(cx,\n                 RANGE_ZIP_WITH_LEN,\n                 span,\n                 &format!(\"it is more idiomatic to use `{}.iter().enumerate()`\",\n-                    snippet(cx, iter_args[0].span, \"_\"))\n+                    snippet(cx, iter_caller.span, \"_\"))\n             );\n         }\n     }"}, {"sha": "74eea6de4bbeff43d30c92d83a8553c73d6cfab9", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;\n@@ -69,7 +69,7 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, _, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(_, _, ref r#async, _, ref decl, ref block, _) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n                 visitor.visit_expr(block);\n@@ -81,10 +81,19 @@ impl EarlyLintPass for RedundantClosureCall {\n                         \"try not to call a closure in the expression where it is declared\",\n                         |diag| {\n                             if decl.inputs.is_empty() {\n-                                let mut app = Applicability::MachineApplicable;\n-                                let hint =\n-                                    snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n-                                diag.span_suggestion(expr.span, \"try doing something like\", hint, app);\n+                                let app = Applicability::MachineApplicable;\n+                                let mut hint = Sugg::ast(cx, block, \"..\");\n+\n+                                if r#async.is_async() {\n+                                    // `async x` is a syntax error, so it becomes `async { x }`\n+                                    if !matches!(block.kind, ast::ExprKind::Block(_, _)) {\n+                                        hint = hint.blockify();\n+                                    }\n+\n+                                    hint = hint.asyncify();\n+                                }\n+\n+                                diag.span_suggestion(expr.span, \"try doing something like\", hint.to_string(), app);\n                             }\n                         },\n                     );"}, {"sha": "6bcae0da8f48f1bb0333841620147ec445a56ca7", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -57,21 +57,20 @@ declare_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n impl<'tcx> LateLintPass<'tcx> for Regex {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Call(fun, args) = expr.kind;\n+            if let ExprKind::Call(fun, [arg]) = expr.kind;\n             if let ExprKind::Path(ref qpath) = fun.kind;\n-            if args.len() == 1;\n             if let Some(def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n             then {\n                 if match_def_path(cx, def_id, &paths::REGEX_NEW) ||\n                    match_def_path(cx, def_id, &paths::REGEX_BUILDER_NEW) {\n-                    check_regex(cx, &args[0], true);\n+                    check_regex(cx, arg, true);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_NEW) ||\n                    match_def_path(cx, def_id, &paths::REGEX_BYTES_BUILDER_NEW) {\n-                    check_regex(cx, &args[0], false);\n+                    check_regex(cx, arg, false);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_SET_NEW) {\n-                    check_set(cx, &args[0], true);\n+                    check_set(cx, arg, true);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_SET_NEW) {\n-                    check_set(cx, &args[0], false);\n+                    check_set(cx, arg, false);\n                 }\n             }\n         }"}, {"sha": "6bea6dc0773d5c2fef2d45e8dc300695ffe7de67", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,6 +2,7 @@\n \n #[rustfmt::skip]\n pub static RENAMED_LINTS: &[(&str, &str)] = &[\n+    (\"clippy::blacklisted_name\", \"clippy::disallowed_names\"),\n     (\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\"),\n     (\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\"),\n     (\"clippy::box_vec\", \"clippy::box_collection\"),\n@@ -14,6 +15,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n+    (\"clippy::logic_bug\", \"clippy::overly_complex_bool_expr\"),\n     (\"clippy::new_without_default_derive\", \"clippy::new_without_default\"),\n     (\"clippy::option_and_then_some\", \"clippy::bind_instead_of_map\"),\n     (\"clippy::option_expect_used\", \"clippy::expect_used\"),"}, {"sha": "b59a25e3a40047eb024a24547ba458488d910ce0", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -233,15 +233,10 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     /// Returns `true` if give expression is `repeat(0).take(...)`\n     fn is_repeat_take(&self, expr: &Expr<'_>) -> bool {\n         if_chain! {\n-            if let ExprKind::MethodCall(take_path, take_args, _) = expr.kind;\n+            if let ExprKind::MethodCall(take_path, [recv, len_arg, ..], _) = expr.kind;\n             if take_path.ident.name == sym!(take);\n-\n             // Check that take is applied to `repeat(0)`\n-            if let Some(repeat_expr) = take_args.get(0);\n-            if self.is_repeat_zero(repeat_expr);\n-\n-            if let Some(len_arg) = take_args.get(1);\n-\n+            if self.is_repeat_zero(recv);\n             then {\n                 // Check that len expression is equals to `with_capacity` expression\n                 if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr) {"}, {"sha": "6d54935f81ab26e29d03b3eac6e1fc33e2c88ea9", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -97,12 +97,11 @@ struct LintDetection {\n \n fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintDetection> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, args, _) = &expr.kind;\n-        if let Some(slice) = &args.get(0);\n+        if let ExprKind::MethodCall(method_name, [slice, args @ ..], _) = &expr.kind;\n         if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n-            let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n+            let args_str = args.iter().map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n             Some(LintDetection { slice_name: Sugg::hir(cx, slice, \"..\").to_string(), method, method_args: args_str, slice_type })\n         } else {\n             None"}, {"sha": "546242ebd9a474d1c27d8b39ad986472814f71d7", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -103,7 +103,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitTypes {\n         let_unit_value::check(cx, local);\n     }\n \n-    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         unit_cmp::check(cx, expr);\n         unit_arg::check(cx, expr);\n     }"}, {"sha": "16da2f11b81a6a6650b07d9dde5062461720c5b5", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_from_proc_macro;\n use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -7,7 +8,7 @@ use rustc_lint::LateContext;\n \n use super::{utils, UNIT_ARG};\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n     if expr.span.from_expansion() {\n         return;\n     }\n@@ -44,7 +45,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     }\n                 })\n                 .collect::<Vec<_>>();\n-            if !args_to_recover.is_empty() {\n+            if !args_to_recover.is_empty() && !is_from_proc_macro(cx, expr) {\n                 lint_unit_args(cx, expr, &args_to_recover);\n             }\n         },"}, {"sha": "b6738e2891d3e914b2a31f655b5d2402c6a49efb", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -59,17 +59,17 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     ExprKind::Ret(Some(e)) | ExprKind::Break(_, Some(e)) => e,\n                     _ => return,\n                 };\n-                if let ExprKind::Call(_, args) = e.kind {\n-                    self.try_desugar_arm.push(args[0].hir_id);\n+                if let ExprKind::Call(_, [arg, ..]) = e.kind {\n+                    self.try_desugar_arm.push(arg.hir_id);\n                 }\n             },\n \n-            ExprKind::MethodCall(name, .., args, _) => {\n+            ExprKind::MethodCall(name, .., [recv, ..], _) => {\n                 if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if same_type_and_consts(a, b) {\n-                        let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n+                        let sugg = snippet_with_macro_callsite(cx, recv.span, \"<expr>\").to_string();\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n@@ -90,9 +90,9 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         }\n                     }\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if same_type_and_consts(a, b) {\n-                        let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                        let sugg = snippet(cx, recv.span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if_chain! {\n                     if is_trait_method(cx, e, sym::TryInto) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if is_type_diagnostic_item(cx, a, sym::Result);\n                     if let ty::Adt(_, substs) = a.kind();\n                     if let Some(a_type) = substs.types().next();\n@@ -126,14 +126,13 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 }\n             },\n \n-            ExprKind::Call(path, args) => {\n+            ExprKind::Call(path, [arg]) => {\n                 if_chain! {\n-                    if args.len() == 1;\n                     if let ExprKind::Path(ref qpath) = path.kind;\n                     if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n                     then {\n                         let a = cx.typeck_results().expr_ty(e);\n-                        let b = cx.typeck_results().expr_ty(&args[0]);\n+                        let b = cx.typeck_results().expr_ty(arg);\n                         if_chain! {\n                             if match_def_path(cx, def_id, &paths::TRY_FROM);\n                             if is_type_diagnostic_item(cx, a, sym::Result);\n@@ -159,7 +158,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             if same_type_and_consts(a, b);\n \n                             then {\n-                                let sugg = Sugg::hir_with_macro_callsite(cx, &args[0], \"<expr>\").maybe_par();\n+                                let sugg = Sugg::hir_with_macro_callsite(cx, arg, \"<expr>\").maybe_par();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_sugg("}, {"sha": "3faae9ac0d2b2af6232568015f6874955174c811", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -30,7 +30,7 @@ const DEFAULT_DOC_VALID_IDENTS: &[&str] = &[\n     \"MinGW\",\n     \"CamelCase\",\n ];\n-const DEFAULT_BLACKLISTED_NAMES: &[&str] = &[\"foo\", \"baz\", \"quux\"];\n+const DEFAULT_DISALLOWED_NAMES: &[&str] = &[\"foo\", \"baz\", \"quux\"];\n \n /// Holds information used by `MISSING_ENFORCED_IMPORT_RENAMES` lint.\n #[derive(Clone, Debug, Deserialize)]\n@@ -68,13 +68,15 @@ pub enum DisallowedType {\n pub struct TryConf {\n     pub conf: Conf,\n     pub errors: Vec<Box<dyn Error>>,\n+    pub warnings: Vec<Box<dyn Error>>,\n }\n \n impl TryConf {\n     fn from_error(error: impl Error + 'static) -> Self {\n         Self {\n             conf: Conf::default(),\n             errors: vec![Box::new(error)],\n+            warnings: vec![],\n         }\n     }\n }\n@@ -90,14 +92,14 @@ impl fmt::Display for ConfError {\n \n impl Error for ConfError {}\n \n-fn conf_error(s: String) -> Box<dyn Error> {\n-    Box::new(ConfError(s))\n+fn conf_error(s: impl Into<String>) -> Box<dyn Error> {\n+    Box::new(ConfError(s.into()))\n }\n \n macro_rules! define_Conf {\n     ($(\n         $(#[doc = $doc:literal])+\n-        $(#[conf_deprecated($dep:literal)])?\n+        $(#[conf_deprecated($dep:literal, $new_conf:ident)])?\n         ($name:ident: $ty:ty = $default:expr),\n     )*) => {\n         /// Clippy lint configuration\n@@ -137,17 +139,29 @@ macro_rules! define_Conf {\n \n             fn visit_map<V>(self, mut map: V) -> Result<Self::Value, V::Error> where V: MapAccess<'de> {\n                 let mut errors = Vec::new();\n+                let mut warnings = Vec::new();\n                 $(let mut $name = None;)*\n                 // could get `Field` here directly, but get `str` first for diagnostics\n                 while let Some(name) = map.next_key::<&str>()? {\n                     match Field::deserialize(name.into_deserializer())? {\n                         $(Field::$name => {\n-                            $(errors.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n+                            $(warnings.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n                             match map.next_value() {\n                                 Err(e) => errors.push(conf_error(e.to_string())),\n                                 Ok(value) => match $name {\n                                     Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n-                                    None => $name = Some(value),\n+                                    None => {\n+                                        $name = Some(value);\n+                                        // $new_conf is the same as one of the defined `$name`s, so\n+                                        // this variable is defined in line 2 of this function.\n+                                        $(match $new_conf {\n+                                            Some(_) => errors.push(conf_error(concat!(\n+                                                \"duplicate field `\", stringify!($new_conf),\n+                                                \"` (provided as `\", stringify!($name), \"`)\"\n+                                            ))),\n+                                            None => $new_conf = $name.clone(),\n+                                        })?\n+                                    },\n                                 }\n                             }\n                         })*\n@@ -156,7 +170,7 @@ macro_rules! define_Conf {\n                     }\n                 }\n                 let conf = Conf { $($name: $name.unwrap_or_else(defaults::$name),)* };\n-                Ok(TryConf { conf, errors })\n+                Ok(TryConf { conf, errors, warnings })\n             }\n         }\n \n@@ -203,21 +217,26 @@ define_Conf! {\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),\n-    /// Lint: BLACKLISTED_NAME.\n+    /// DEPRECATED LINT: BLACKLISTED_NAME.\n     ///\n-    /// The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n-    /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n-    /// default configuration of Clippy. By default any configuraction will replace the default value.\n-    (blacklisted_names: Vec<String> = super::DEFAULT_BLACKLISTED_NAMES.iter().map(ToString::to_string).collect()),\n+    /// Use the Disallowed Names lint instead\n+    #[conf_deprecated(\"Please use `disallowed-names` instead\", disallowed_names)]\n+    (blacklisted_names: Vec<String> = Vec::new()),\n     /// Lint: COGNITIVE_COMPLEXITY.\n     ///\n     /// The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold: u64 = 25),\n     /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY.\n     ///\n     /// Use the Cognitive Complexity lint instead.\n-    #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\")]\n-    (cyclomatic_complexity_threshold: Option<u64> = None),\n+    #[conf_deprecated(\"Please use `cognitive-complexity-threshold` instead\", cognitive_complexity_threshold)]\n+    (cyclomatic_complexity_threshold: u64 = 25),\n+    /// Lint: DISALLOWED_NAMES.\n+    ///\n+    /// The list of disallowed names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n+    /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n+    /// default configuration of Clippy. By default any configuration will replace the default value.\n+    (disallowed_names: Vec<String> = super::DEFAULT_DISALLOWED_NAMES.iter().map(ToString::to_string).collect()),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value\n@@ -420,7 +439,7 @@ pub fn read(path: &Path) -> TryConf {\n     match toml::from_str::<TryConf>(&content) {\n         Ok(mut conf) => {\n             extend_vec_if_indicator_present(&mut conf.conf.doc_valid_idents, DEFAULT_DOC_VALID_IDENTS);\n-            extend_vec_if_indicator_present(&mut conf.conf.blacklisted_names, DEFAULT_BLACKLISTED_NAMES);\n+            extend_vec_if_indicator_present(&mut conf.conf.disallowed_names, DEFAULT_DISALLOWED_NAMES);\n \n             conf\n         },"}, {"sha": "5dcacd604be45f6b0a4c4844e05ece2e13287198", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -496,12 +496,14 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                     cx,\n                 };\n                 let body_id = cx.tcx.hir().body_owned_by(\n-                    impl_item_refs\n-                        .iter()\n-                        .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n-                        .expect(\"LintPass needs to implement get_lints\")\n-                        .id\n-                        .hir_id(),\n+                    cx.tcx.hir().local_def_id(\n+                        impl_item_refs\n+                            .iter()\n+                            .find(|iiref| iiref.ident.as_str() == \"get_lints\")\n+                            .expect(\"LintPass needs to implement get_lints\")\n+                            .id\n+                            .hir_id(),\n+                    ),\n                 );\n                 collector.visit_expr(&cx.tcx.hir().body(body_id).value);\n             }\n@@ -569,7 +571,7 @@ fn check_invalid_clippy_version_attribute(cx: &LateContext<'_>, item: &'_ Item<'\n                 item.span,\n                 \"this item has an invalid `clippy::version` attribute\",\n                 None,\n-                \"please use a valid sematic version, see `doc/adding_lints.md`\",\n+                \"please use a valid semantic version, see `doc/adding_lints.md`\",\n             );\n         }\n     } else {"}, {"sha": "92cf42c7ad43f0459fe10051fd2ea4baac6109eb", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -619,7 +619,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n             if_chain! {\n                 // item validation\n                 if is_lint_ref_type(cx, ty);\n-                // blacklist check\n+                // disallow check\n                 let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n@@ -644,7 +644,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n \n             if_chain! {\n                 if is_deprecated_lint(cx, ty);\n-                // blacklist check\n+                // disallow check\n                 let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // Metadata the little we can get from a deprecated lint"}, {"sha": "afd0077a658049160feb972d23c7a0391769602c", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -61,10 +61,10 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n \n fn is_file_read_to_end<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, exprs, _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, [recv, ..], _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_end\";\n-        if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n-        let ty = cx.typeck_results().expr_ty(&exprs[0]);\n+        if let ExprKind::Path(QPath::Resolved(None, _)) = &recv.kind;\n+        let ty = cx.typeck_results().expr_ty(recv);\n         if match_type(cx, ty, &paths::FILE);\n         then {\n             return true"}, {"sha": "a688050f63a6ad659603b248aa78ca785edcf093", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.64\"\n+version = \"0.1.65\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "8335ffae81eb7ce64c97caba247b02847103ca86", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,329 @@\n+//! This module handles checking if the span given is from a proc-macro or not.\n+//!\n+//! Proc-macros are capable of setting the span of every token they output to a few possible spans.\n+//! This includes spans we can detect easily as coming from a proc-macro (e.g. the call site\n+//! or the def site), and spans we can't easily detect as such (e.g. the span of any token\n+//! passed into the proc macro). This capability means proc-macros are capable of generating code\n+//! with a span that looks like it was written by the user, but which should not be linted by clippy\n+//! as it was generated by an external macro.\n+//!\n+//! That brings us to this module. The current approach is to determine a small bit of text which\n+//! must exist at both the start and the end of an item (e.g. an expression or a path) assuming the\n+//! code was written, and check if the span contains that text. Note this will only work correctly\n+//! if the span is not from a `macro_rules` based macro.\n+\n+use rustc_ast::ast::{IntTy, LitIntType, LitKind, StrStyle, UintTy};\n+use rustc_hir::{\n+    intravisit::FnKind, Block, BlockCheckMode, Body, Closure, Destination, Expr, ExprKind, FieldDef, FnHeader, HirId,\n+    Impl, ImplItem, ImplItemKind, IsAuto, Item, ItemKind, LoopSource, MatchSource, Node, QPath, TraitItem,\n+    TraitItemKind, UnOp, UnsafeSource, Unsafety, Variant, VariantData, YieldSource,\n+};\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n+use rustc_span::{Span, Symbol};\n+use rustc_target::spec::abi::Abi;\n+\n+/// The search pattern to look for. Used by `span_matches_pat`\n+#[derive(Clone, Copy)]\n+pub enum Pat {\n+    /// A single string.\n+    Str(&'static str),\n+    /// Any of the given strings.\n+    MultiStr(&'static [&'static str]),\n+    /// The string representation of the symbol.\n+    Sym(Symbol),\n+    /// Any decimal or hexadecimal digit depending on the location.\n+    Num,\n+}\n+\n+/// Checks if the start and the end of the span's text matches the patterns. This will return false\n+/// if the span crosses multiple files or if source is not available.\n+fn span_matches_pat(sess: &Session, span: Span, start_pat: Pat, end_pat: Pat) -> bool {\n+    let pos = sess.source_map().lookup_byte_offset(span.lo());\n+    let Some(ref src) = pos.sf.src else {\n+        return false;\n+    };\n+    let end = span.hi() - pos.sf.start_pos;\n+    src.get(pos.pos.0 as usize..end.0 as usize).map_or(false, |s| {\n+        // Spans can be wrapped in a mixture or parenthesis, whitespace, and trailing commas.\n+        let start_str = s.trim_start_matches(|c: char| c.is_whitespace() || c == '(');\n+        let end_str = s.trim_end_matches(|c: char| c.is_whitespace() || c == ')' || c == ',');\n+        (match start_pat {\n+            Pat::Str(text) => start_str.starts_with(text),\n+            Pat::MultiStr(texts) => texts.iter().any(|s| start_str.starts_with(s)),\n+            Pat::Sym(sym) => start_str.starts_with(sym.as_str()),\n+            Pat::Num => start_str.as_bytes().first().map_or(false, u8::is_ascii_digit),\n+        } && match end_pat {\n+            Pat::Str(text) => end_str.ends_with(text),\n+            Pat::MultiStr(texts) => texts.iter().any(|s| start_str.ends_with(s)),\n+            Pat::Sym(sym) => end_str.ends_with(sym.as_str()),\n+            Pat::Num => end_str.as_bytes().last().map_or(false, u8::is_ascii_hexdigit),\n+        })\n+    })\n+}\n+\n+/// Get the search patterns to use for the given literal\n+fn lit_search_pat(lit: &LitKind) -> (Pat, Pat) {\n+    match lit {\n+        LitKind::Str(_, StrStyle::Cooked) => (Pat::Str(\"\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::Str(_, StrStyle::Raw(0)) => (Pat::Str(\"r\"), Pat::Str(\"\\\"\")),\n+        LitKind::Str(_, StrStyle::Raw(_)) => (Pat::Str(\"r#\"), Pat::Str(\"#\")),\n+        LitKind::ByteStr(_) => (Pat::Str(\"b\\\"\"), Pat::Str(\"\\\"\")),\n+        LitKind::Byte(_) => (Pat::Str(\"b'\"), Pat::Str(\"'\")),\n+        LitKind::Char(_) => (Pat::Str(\"'\"), Pat::Str(\"'\")),\n+        LitKind::Int(_, LitIntType::Signed(IntTy::Isize)) => (Pat::Num, Pat::Str(\"isize\")),\n+        LitKind::Int(_, LitIntType::Unsigned(UintTy::Usize)) => (Pat::Num, Pat::Str(\"usize\")),\n+        LitKind::Int(..) => (Pat::Num, Pat::Num),\n+        LitKind::Float(..) => (Pat::Num, Pat::Str(\"\")),\n+        LitKind::Bool(true) => (Pat::Str(\"true\"), Pat::Str(\"true\")),\n+        LitKind::Bool(false) => (Pat::Str(\"false\"), Pat::Str(\"false\")),\n+        _ => (Pat::Str(\"\"), Pat::Str(\"\")),\n+    }\n+}\n+\n+/// Get the search patterns to use for the given path\n+fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n+    match path {\n+        QPath::Resolved(ty, path) => {\n+            let start = if ty.is_some() {\n+                Pat::Str(\"<\")\n+            } else {\n+                path.segments\n+                    .first()\n+                    .map_or(Pat::Str(\"\"), |seg| Pat::Sym(seg.ident.name))\n+            };\n+            let end = path.segments.last().map_or(Pat::Str(\"\"), |seg| {\n+                if seg.args.is_some() {\n+                    Pat::Str(\">\")\n+                } else {\n+                    Pat::Sym(seg.ident.name)\n+                }\n+            });\n+            (start, end)\n+        },\n+        QPath::TypeRelative(_, name) => (Pat::Str(\"\"), Pat::Sym(name.ident.name)),\n+        QPath::LangItem(..) => (Pat::Str(\"\"), Pat::Str(\"\")),\n+    }\n+}\n+\n+/// Get the search patterns to use for the given expression\n+fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n+    match e.kind {\n+        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n+        ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n+        ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n+        ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Unary(UnOp::Not, e) => (Pat::Str(\"!\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Unary(UnOp::Neg, e) => (Pat::Str(\"-\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Lit(ref lit) => lit_search_pat(&lit.node),\n+        ExprKind::Array(_) | ExprKind::Repeat(..) => (Pat::Str(\"[\"), Pat::Str(\"]\")),\n+        ExprKind::Call(e, []) | ExprKind::MethodCall(_, [e], _) => (expr_search_pat(tcx, e).0, Pat::Str(\"(\")),\n+        ExprKind::Call(first, [.., last])\n+        | ExprKind::MethodCall(_, [first, .., last], _)\n+        | ExprKind::Binary(_, first, last)\n+        | ExprKind::Tup([first, .., last])\n+        | ExprKind::Assign(first, last, _)\n+        | ExprKind::AssignOp(_, first, last) => (expr_search_pat(tcx, first).0, expr_search_pat(tcx, last).1),\n+        ExprKind::Tup([e]) | ExprKind::DropTemps(e) => expr_search_pat(tcx, e),\n+        ExprKind::Cast(e, _) | ExprKind::Type(e, _) => (expr_search_pat(tcx, e).0, Pat::Str(\"\")),\n+        ExprKind::Let(let_expr) => (Pat::Str(\"let\"), expr_search_pat(tcx, let_expr.init).1),\n+        ExprKind::If(..) => (Pat::Str(\"if\"), Pat::Str(\"}\")),\n+        ExprKind::Loop(_, Some(_), _, _) | ExprKind::Block(_, Some(_)) => (Pat::Str(\"'\"), Pat::Str(\"}\")),\n+        ExprKind::Loop(_, None, LoopSource::Loop, _) => (Pat::Str(\"loop\"), Pat::Str(\"}\")),\n+        ExprKind::Loop(_, None, LoopSource::While, _) => (Pat::Str(\"while\"), Pat::Str(\"}\")),\n+        ExprKind::Loop(_, None, LoopSource::ForLoop, _) | ExprKind::Match(_, _, MatchSource::ForLoopDesugar) => {\n+            (Pat::Str(\"for\"), Pat::Str(\"}\"))\n+        },\n+        ExprKind::Match(_, _, MatchSource::Normal) => (Pat::Str(\"match\"), Pat::Str(\"}\")),\n+        ExprKind::Match(e, _, MatchSource::TryDesugar) => (expr_search_pat(tcx, e).0, Pat::Str(\"?\")),\n+        ExprKind::Match(e, _, MatchSource::AwaitDesugar) | ExprKind::Yield(e, YieldSource::Await { .. }) => {\n+            (expr_search_pat(tcx, e).0, Pat::Str(\"await\"))\n+        },\n+        ExprKind::Closure(&Closure { body, .. }) => (Pat::Str(\"\"), expr_search_pat(tcx, &tcx.hir().body(body).value).1),\n+        ExprKind::Block(\n+            Block {\n+                rules: BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided),\n+                ..\n+            },\n+            None,\n+        ) => (Pat::Str(\"unsafe\"), Pat::Str(\"}\")),\n+        ExprKind::Block(_, None) => (Pat::Str(\"{\"), Pat::Str(\"}\")),\n+        ExprKind::Field(e, name) => (expr_search_pat(tcx, e).0, Pat::Sym(name.name)),\n+        ExprKind::Index(e, _) => (expr_search_pat(tcx, e).0, Pat::Str(\"]\")),\n+        ExprKind::Path(ref path) => qpath_search_pat(path),\n+        ExprKind::AddrOf(_, _, e) => (Pat::Str(\"&\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Break(Destination { label: None, .. }, None) => (Pat::Str(\"break\"), Pat::Str(\"break\")),\n+        ExprKind::Break(Destination { label: Some(name), .. }, None) => (Pat::Str(\"break\"), Pat::Sym(name.ident.name)),\n+        ExprKind::Break(_, Some(e)) => (Pat::Str(\"break\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Continue(Destination { label: None, .. }) => (Pat::Str(\"continue\"), Pat::Str(\"continue\")),\n+        ExprKind::Continue(Destination { label: Some(name), .. }) => (Pat::Str(\"continue\"), Pat::Sym(name.ident.name)),\n+        ExprKind::Ret(None) => (Pat::Str(\"return\"), Pat::Str(\"return\")),\n+        ExprKind::Ret(Some(e)) => (Pat::Str(\"return\"), expr_search_pat(tcx, e).1),\n+        ExprKind::Struct(path, _, _) => (qpath_search_pat(path).0, Pat::Str(\"}\")),\n+        ExprKind::Yield(e, YieldSource::Yield) => (Pat::Str(\"yield\"), expr_search_pat(tcx, e).1),\n+        _ => (Pat::Str(\"\"), Pat::Str(\"\")),\n+    }\n+}\n+\n+fn fn_header_search_pat(header: FnHeader) -> Pat {\n+    if header.is_async() {\n+        Pat::Str(\"async\")\n+    } else if header.is_const() {\n+        Pat::Str(\"const\")\n+    } else if header.is_unsafe() {\n+        Pat::Str(\"unsafe\")\n+    } else if header.abi != Abi::Rust {\n+        Pat::Str(\"extern\")\n+    } else {\n+        Pat::MultiStr(&[\"fn\", \"extern\"])\n+    }\n+}\n+\n+fn item_search_pat(item: &Item<'_>) -> (Pat, Pat) {\n+    let (start_pat, end_pat) = match &item.kind {\n+        ItemKind::ExternCrate(_) => (Pat::Str(\"extern\"), Pat::Str(\";\")),\n+        ItemKind::Static(..) => (Pat::Str(\"static\"), Pat::Str(\";\")),\n+        ItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        ItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+        ItemKind::ForeignMod { .. } => (Pat::Str(\"extern\"), Pat::Str(\"}\")),\n+        ItemKind::TyAlias(..) | ItemKind::OpaqueTy(_) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ItemKind::Enum(..) => (Pat::Str(\"enum\"), Pat::Str(\"}\")),\n+        ItemKind::Struct(VariantData::Struct(..), _) => (Pat::Str(\"struct\"), Pat::Str(\"}\")),\n+        ItemKind::Struct(..) => (Pat::Str(\"struct\"), Pat::Str(\";\")),\n+        ItemKind::Union(..) => (Pat::Str(\"union\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(_, Unsafety::Unsafe, ..)\n+        | ItemKind::Impl(Impl {\n+            unsafety: Unsafety::Unsafe,\n+            ..\n+        }) => (Pat::Str(\"unsafe\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(IsAuto::Yes, ..) => (Pat::Str(\"auto\"), Pat::Str(\"}\")),\n+        ItemKind::Trait(..) => (Pat::Str(\"trait\"), Pat::Str(\"}\")),\n+        ItemKind::Impl(_) => (Pat::Str(\"impl\"), Pat::Str(\"}\")),\n+        _ => return (Pat::Str(\"\"), Pat::Str(\"\")),\n+    };\n+    if item.vis_span.is_empty() {\n+        (start_pat, end_pat)\n+    } else {\n+        (Pat::Str(\"pub\"), end_pat)\n+    }\n+}\n+\n+fn trait_item_search_pat(item: &TraitItem<'_>) -> (Pat, Pat) {\n+    match &item.kind {\n+        TraitItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        TraitItemKind::Type(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        TraitItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+    }\n+}\n+\n+fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n+    let (start_pat, end_pat) = match &item.kind {\n+        ImplItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n+        ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+    };\n+    if item.vis_span.is_empty() {\n+        (start_pat, end_pat)\n+    } else {\n+        (Pat::Str(\"pub\"), end_pat)\n+    }\n+}\n+\n+fn field_def_search_pat(def: &FieldDef<'_>) -> (Pat, Pat) {\n+    if def.vis_span.is_empty() {\n+        if def.is_positional() {\n+            (Pat::Str(\"\"), Pat::Str(\"\"))\n+        } else {\n+            (Pat::Sym(def.ident.name), Pat::Str(\"\"))\n+        }\n+    } else {\n+        (Pat::Str(\"pub\"), Pat::Str(\"\"))\n+    }\n+}\n+\n+fn variant_search_pat(v: &Variant<'_>) -> (Pat, Pat) {\n+    match v.data {\n+        VariantData::Struct(..) => (Pat::Sym(v.ident.name), Pat::Str(\"}\")),\n+        VariantData::Tuple(..) => (Pat::Sym(v.ident.name), Pat::Str(\"\")),\n+        VariantData::Unit(..) => (Pat::Sym(v.ident.name), Pat::Sym(v.ident.name)),\n+    }\n+}\n+\n+fn fn_kind_pat(tcx: TyCtxt<'_>, kind: &FnKind<'_>, body: &Body<'_>, hir_id: HirId) -> (Pat, Pat) {\n+    let (start_pat, end_pat) = match kind {\n+        FnKind::ItemFn(.., header) => (fn_header_search_pat(*header), Pat::Str(\"\")),\n+        FnKind::Method(.., sig) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n+        FnKind::Closure => return (Pat::Str(\"\"), expr_search_pat(tcx, &body.value).1),\n+    };\n+    let start_pat = match tcx.hir().get(hir_id) {\n+        Node::Item(Item { vis_span, .. }) | Node::ImplItem(ImplItem { vis_span, .. }) => {\n+            if vis_span.is_empty() {\n+                start_pat\n+            } else {\n+                Pat::Str(\"pub\")\n+            }\n+        },\n+        Node::TraitItem(_) => start_pat,\n+        _ => Pat::Str(\"\"),\n+    };\n+    (start_pat, end_pat)\n+}\n+\n+pub trait WithSearchPat {\n+    type Context: LintContext;\n+    fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat);\n+    fn span(&self) -> Span;\n+}\n+macro_rules! impl_with_search_pat {\n+    ($cx:ident: $ty:ident with $fn:ident $(($tcx:ident))?) => {\n+        impl<'cx> WithSearchPat for $ty<'cx> {\n+            type Context = $cx<'cx>;\n+            #[allow(unused_variables)]\n+            fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat) {\n+                $(let $tcx = cx.tcx;)?\n+                $fn($($tcx,)? self)\n+            }\n+            fn span(&self) -> Span {\n+                self.span\n+            }\n+        }\n+    };\n+}\n+impl_with_search_pat!(LateContext: Expr with expr_search_pat(tcx));\n+impl_with_search_pat!(LateContext: Item with item_search_pat);\n+impl_with_search_pat!(LateContext: TraitItem with trait_item_search_pat);\n+impl_with_search_pat!(LateContext: ImplItem with impl_item_search_pat);\n+impl_with_search_pat!(LateContext: FieldDef with field_def_search_pat);\n+impl_with_search_pat!(LateContext: Variant with variant_search_pat);\n+\n+impl<'cx> WithSearchPat for (&FnKind<'cx>, &Body<'cx>, HirId, Span) {\n+    type Context = LateContext<'cx>;\n+\n+    fn search_pat(&self, cx: &Self::Context) -> (Pat, Pat) {\n+        fn_kind_pat(cx.tcx, self.0, self.1, self.2)\n+    }\n+\n+    fn span(&self) -> Span {\n+        self.3\n+    }\n+}\n+\n+/// Checks if the item likely came from a proc-macro.\n+///\n+/// This should be called after `in_external_macro` and the initial pattern matching of the ast as\n+/// it is significantly slower than both of those.\n+pub fn is_from_proc_macro<T: WithSearchPat>(cx: &T::Context, item: &T) -> bool {\n+    let (start_pat, end_pat) = item.search_pat(cx);\n+    !span_matches_pat(cx.sess(), item.span(), start_pat, end_pat)\n+}\n+\n+/// Checks if the span actually refers to a match expression\n+pub fn is_span_match(cx: &impl LintContext, span: Span) -> bool {\n+    span_matches_pat(cx.sess(), span, Pat::Str(\"match\"), Pat::Str(\"}\"))\n+}\n+\n+/// Checks if the span actually refers to an if expression\n+pub fn is_span_if(cx: &impl LintContext, span: Span) -> bool {\n+    span_matches_pat(cx.sess(), span, Pat::Str(\"if\"), Pat::Str(\"}\"))\n+}"}, {"sha": "2616a578bb884271153d00ca9c038efa6f730058", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -39,6 +39,7 @@ pub mod sym_helper;\n \n pub mod ast_utils;\n pub mod attrs;\n+mod check_proc_macro;\n pub mod comparisons;\n pub mod consts;\n pub mod diagnostics;\n@@ -59,6 +60,7 @@ pub mod usage;\n pub mod visitors;\n \n pub use self::attrs::*;\n+pub use self::check_proc_macro::{is_from_proc_macro, is_span_if, is_span_match};\n pub use self::hir_utils::{\n     both, count_eq, eq_expr_value, hash_expr, hash_stmt, over, HirEqInterExpr, SpanlessEq, SpanlessHash,\n };"}, {"sha": "80098d9766c67b47c0e2e9604cbd76ac6e9ac3ce", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -223,10 +223,12 @@ impl<'a> NumericLiteral<'a> {\n \n fn split_suffix<'a>(src: &'a str, lit_kind: &LitKind) -> (&'a str, Option<&'a str>) {\n     debug_assert!(lit_kind.is_numeric());\n-    lit_suffix_length(lit_kind).map_or((src, None), |suffix_length| {\n-        let (unsuffixed, suffix) = src.split_at(src.len() - suffix_length);\n-        (unsuffixed, Some(suffix))\n-    })\n+    lit_suffix_length(lit_kind)\n+        .and_then(|suffix_length| src.len().checked_sub(suffix_length))\n+        .map_or((src, None), |split_pos| {\n+            let (unsuffixed, suffix) = src.split_at(split_pos);\n+            (unsuffixed, Some(suffix))\n+        })\n }\n \n fn lit_suffix_length(lit_kind: &LitKind) -> Option<usize> {"}, {"sha": "8d697a301c444c354efd1ee383a5be24eae64099", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -194,3 +194,5 @@ pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n pub const PTR_NON_NULL: [&str; 4] = [\"core\", \"ptr\", \"non_null\", \"NonNull\"];\n+pub const INSTANT_NOW: [&str; 4] = [\"std\", \"time\", \"Instant\", \"now\"];\n+pub const INSTANT: [&str; 3] = [\"std\", \"time\", \"Instant\"];"}, {"sha": "d85f591fb9a42f0c087f61dfe95da170d65db5aa", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -11,24 +11,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext};\n use std::borrow::Cow;\n \n-/// Checks if the span starts with the given text. This will return false if the span crosses\n-/// multiple files or if source is not available.\n-///\n-/// This is used to check for proc macros giving unhelpful spans to things.\n-pub fn span_starts_with<T: LintContext>(cx: &T, span: Span, text: &str) -> bool {\n-    fn helper(sm: &SourceMap, span: Span, text: &str) -> bool {\n-        let pos = sm.lookup_byte_offset(span.lo());\n-        let Some(ref src) = pos.sf.src else {\n-            return false;\n-        };\n-        let end = span.hi() - pos.sf.start_pos;\n-        src.get(pos.pos.0 as usize..end.0 as usize)\n-            // Expression spans can include wrapping parenthesis. Remove them first.\n-            .map_or(false, |s| s.trim_start_matches('(').starts_with(text))\n-    }\n-    helper(cx.sess().source_map(), span, text)\n-}\n-\n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n pub fn expr_block<'a, T: LintContext>("}, {"sha": "081c98e2f3ce726ccf9019a46fc4631eefde9a29", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -315,6 +315,12 @@ impl<'a> Sugg<'a> {\n         Sugg::NonParen(Cow::Owned(format!(\"{{ {} }}\", self)))\n     }\n \n+    /// Convenience method to prefix the expression with the `async` keyword.\n+    /// Can be used after `blockify` to create an async block.\n+    pub fn asyncify(self) -> Sugg<'static> {\n+        Sugg::NonParen(Cow::Owned(format!(\"async {}\", self)))\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {"}, {"sha": "e7d670766a050203793c22970b12c09bc26c2806", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -503,7 +503,7 @@ pub fn all_predicates_of(tcx: TyCtxt<'_>, id: DefId) -> impl Iterator<Item = &(P\n pub enum ExprFnSig<'tcx> {\n     Sig(Binder<'tcx, FnSig<'tcx>>, Option<DefId>),\n     Closure(Option<&'tcx FnDecl<'tcx>>, Binder<'tcx, FnSig<'tcx>>),\n-    Trait(Binder<'tcx, Ty<'tcx>>, Option<Binder<'tcx, Ty<'tcx>>>),\n+    Trait(Binder<'tcx, Ty<'tcx>>, Option<Binder<'tcx, Ty<'tcx>>>, Option<DefId>),\n }\n impl<'tcx> ExprFnSig<'tcx> {\n     /// Gets the argument type at the given offset. This will return `None` when the index is out of\n@@ -518,7 +518,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n                 }\n             },\n             Self::Closure(_, sig) => Some(sig.input(0).map_bound(|ty| ty.tuple_fields()[i])),\n-            Self::Trait(inputs, _) => Some(inputs.map_bound(|ty| ty.tuple_fields()[i])),\n+            Self::Trait(inputs, _, _) => Some(inputs.map_bound(|ty| ty.tuple_fields()[i])),\n         }\n     }\n \n@@ -541,7 +541,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n                 decl.and_then(|decl| decl.inputs.get(i)),\n                 sig.input(0).map_bound(|ty| ty.tuple_fields()[i]),\n             )),\n-            Self::Trait(inputs, _) => Some((None, inputs.map_bound(|ty| ty.tuple_fields()[i]))),\n+            Self::Trait(inputs, _, _) => Some((None, inputs.map_bound(|ty| ty.tuple_fields()[i]))),\n         }\n     }\n \n@@ -550,12 +550,16 @@ impl<'tcx> ExprFnSig<'tcx> {\n     pub fn output(self) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         match self {\n             Self::Sig(sig, _) | Self::Closure(_, sig) => Some(sig.output()),\n-            Self::Trait(_, output) => output,\n+            Self::Trait(_, output, _) => output,\n         }\n     }\n \n     pub fn predicates_id(&self) -> Option<DefId> {\n-        if let ExprFnSig::Sig(_, id) = *self { id } else { None }\n+        if let ExprFnSig::Sig(_, id) | ExprFnSig::Trait(_, _, id) = *self {\n+            id\n+        } else {\n+            None\n+        }\n     }\n }\n \n@@ -568,7 +572,8 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n     }\n }\n \n-fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+/// If the type is function like, get the signature for it.\n+pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n     if ty.is_box() {\n         return ty_sig(cx, ty.boxed_ty());\n     }\n@@ -580,7 +585,7 @@ fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>>\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(id, _) => ty_sig(cx, cx.tcx.type_of(id)),\n+        ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -594,38 +599,44 @@ fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>>\n                         .projection_bounds()\n                         .find(|p| lang_items.fn_once_output().map_or(false, |id| id == p.item_def_id()))\n                         .map(|p| p.map_bound(|p| p.term.ty().unwrap()));\n-                    Some(ExprFnSig::Trait(bound.map_bound(|b| b.substs.type_at(0)), output))\n+                    Some(ExprFnSig::Trait(bound.map_bound(|b| b.substs.type_at(0)), output, None))\n                 },\n                 _ => None,\n             }\n         },\n         ty::Projection(proj) => match cx.tcx.try_normalize_erasing_regions(cx.param_env, ty) {\n             Ok(normalized_ty) if normalized_ty != ty => ty_sig(cx, normalized_ty),\n-            _ => sig_for_projection(cx, proj).or_else(|| sig_from_bounds(cx, ty)),\n+            _ => sig_for_projection(cx, proj).or_else(|| sig_from_bounds(cx, ty, cx.param_env.caller_bounds(), None)),\n         },\n-        ty::Param(_) => sig_from_bounds(cx, ty),\n+        ty::Param(_) => sig_from_bounds(cx, ty, cx.param_env.caller_bounds(), None),\n         _ => None,\n     }\n }\n \n-fn sig_from_bounds<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+fn sig_from_bounds<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    ty: Ty<'tcx>,\n+    predicates: &'tcx [Predicate<'tcx>],\n+    predicates_id: Option<DefId>,\n+) -> Option<ExprFnSig<'tcx>> {\n     let mut inputs = None;\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n \n-    for (pred, _) in all_predicates_of(cx.tcx, cx.typeck_results().hir_owner.to_def_id()) {\n+    for pred in predicates {\n         match pred.kind().skip_binder() {\n             PredicateKind::Trait(p)\n                 if (lang_items.fn_trait() == Some(p.def_id())\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id()))\n                     && p.self_ty() == ty =>\n             {\n-                if inputs.is_some() {\n+                let i = pred.kind().rebind(p.trait_ref.substs.type_at(1));\n+                if inputs.map_or(false, |inputs| i != inputs) {\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n                 }\n-                inputs = Some(pred.kind().rebind(p.trait_ref.substs.type_at(1)));\n+                inputs = Some(i);\n             },\n             PredicateKind::Projection(p)\n                 if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output()\n@@ -641,7 +652,7 @@ fn sig_from_bounds<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnS\n         }\n     }\n \n-    inputs.map(|ty| ExprFnSig::Trait(ty, output))\n+    inputs.map(|ty| ExprFnSig::Trait(ty, output, predicates_id))\n }\n \n fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> Option<ExprFnSig<'tcx>> {\n@@ -661,14 +672,15 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id())) =>\n             {\n-                if inputs.is_some() {\n+                let i = pred\n+                    .map_bound(|pred| pred.kind().rebind(p.trait_ref.substs.type_at(1)))\n+                    .subst(cx.tcx, ty.substs);\n+\n+                if inputs.map_or(false, |inputs| inputs != i) {\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n                 }\n-                inputs = Some(\n-                    pred.map_bound(|pred| pred.kind().rebind(p.trait_ref.substs.type_at(1)))\n-                        .subst(cx.tcx, ty.substs),\n-                );\n+                inputs = Some(i);\n             },\n             PredicateKind::Projection(p) if Some(p.projection_ty.item_def_id) == lang_items.fn_once_output() => {\n                 if output.is_some() {\n@@ -684,7 +696,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n         }\n     }\n \n-    inputs.map(|ty| ExprFnSig::Trait(ty, output))\n+    inputs.map(|ty| ExprFnSig::Trait(ty, output, None))\n }\n \n #[derive(Clone, Copy)]"}, {"sha": "7e14df4feea66316953a53425dcde75eee8bf066", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-07-28\"\n+channel = \"nightly-2022-08-11\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "2aa4de490bcf6b99e1dbdf9ca076a366dc15b9f9", "filename": "tests/ui-internal/check_clippy_version_attribute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcheck_clippy_version_attribute.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -16,7 +16,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::invalid_clippy_version_attribute)]` implied by `#[deny(clippy::internal)]`\n-   = help: please use a valid sematic version, see `doc/adding_lints.md`\n+   = help: please use a valid semantic version, see `doc/adding_lints.md`\n    = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this item has an invalid `clippy::version` attribute\n@@ -31,7 +31,7 @@ LL | |     report_in_external_macro: true\n LL | | }\n    | |_^\n    |\n-   = help: please use a valid sematic version, see `doc/adding_lints.md`\n+   = help: please use a valid semantic version, see `doc/adding_lints.md`\n    = note: this error originates in the macro `$crate::declare_tool_lint` which comes from the expansion of the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this lint is missing the `clippy::version` attribute or version value"}, {"sha": "d48bab08f690bc0ca6cdba4e38471e8bbc66b261", "filename": "tests/ui-toml/bad_toml_type/clippy.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fbad_toml_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fbad_toml_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml_type%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1 +1 @@\n-blacklisted-names = 42\n+disallowed-names = 42"}, {"sha": "e3ec60192040e32d3a6b8921ff5db80b3e7fda13", "filename": "tests/ui-toml/bad_toml_type/conf_bad_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: invalid type: integer `42`, expected a sequence for key `blacklisted-names`\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: invalid type: integer `42`, expected a sequence for key `disallowed-names`\n \n error: aborting due to previous error\n "}, {"sha": "9169bb0e866ac2c47cb5698b1dc3ffe02908ab9b", "filename": "tests/ui-toml/blacklisted_names_append/blacklisted_names.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_append%2Fblacklisted_names.stderr?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1,16 +0,0 @@\n-error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_names.rs:5:9\n-   |\n-LL |     let foo = \"bar\";\n-   |         ^^^\n-   |\n-   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n-\n-error: use of a blacklisted/placeholder name `ducks`\n-  --> $DIR/blacklisted_names.rs:7:9\n-   |\n-LL |     let ducks = [\"quack\", \"quack\"];\n-   |         ^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "0e052ef50f07bfe5d42a783614f2209c5219255b", "filename": "tests/ui-toml/blacklisted_names_append/clippy.toml", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_append%2Fclippy.toml?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1 +0,0 @@\n-blacklisted-names = [\"ducks\", \"..\"]"}, {"sha": "ec6f7f084f2a55336408fe0ddeadb30597c5e39b", "filename": "tests/ui-toml/blacklisted_names_replace/blacklisted_names.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_replace%2Fblacklisted_names.stderr?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1,10 +0,0 @@\n-error: use of a blacklisted/placeholder name `ducks`\n-  --> $DIR/blacklisted_names.rs:7:9\n-   |\n-LL |     let ducks = [\"quack\", \"quack\"];\n-   |         ^^^^^\n-   |\n-   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n-\n-error: aborting due to previous error\n-"}, {"sha": "4582f1c06674c1aa4d57709363841698ea581aad", "filename": "tests/ui-toml/blacklisted_names_replace/clippy.toml", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fblacklisted_names_replace%2Fclippy.toml?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1 +0,0 @@\n-blacklisted-names = [\"ducks\"]"}, {"sha": "d79a98d05af48221c7fcfd414c7bf31229d6fdf7", "filename": "tests/ui-toml/conf_deprecated_key/clippy.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,6 @@\n-# that one is an error\n-cyclomatic-complexity-threshold = 42\n+# Expect errors from these deprecated configs\n+cyclomatic-complexity-threshold = 2\n+blacklisted-names = [ \"..\", \"wibble\" ]\n \n # that one is white-listed\n [third-party]"}, {"sha": "b4e677ea124b7d673b14c90e1ea08607ae311dbd", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1 +1,11 @@\n fn main() {}\n+\n+#[warn(clippy::cognitive_complexity)]\n+fn cognitive_complexity() {\n+    let x = vec![1, 2, 3];\n+    for i in x {\n+        if i == 1 {\n+            println!(\"{}\", i);\n+        }\n+    }\n+}"}, {"sha": "4c560299ebdd1385bdfd0878d8970989ba45683e", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,15 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n \n-error: aborting due to previous error\n+warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `blacklisted-names`. Please use `disallowed-names` instead\n+\n+error: the function has a cognitive complexity of (3/2)\n+  --> $DIR/conf_deprecated_key.rs:4:4\n+   |\n+LL | fn cognitive_complexity() {\n+   |    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cognitive-complexity` implied by `-D warnings`\n+   = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "6df96a3c214bd412739f8a0882b06b9c4dca6941", "filename": "tests/ui-toml/disallowed_names_append/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_append%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1 @@\n+disallowed-names = [\"ducks\", \"..\"]"}, {"sha": "a2e2b46c42693a35031610ad6bbc2363b796b628", "filename": "tests/ui-toml/disallowed_names_append/disallowed_names.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,9 +1,9 @@\n-#[warn(clippy::blacklisted_name)]\n+#[warn(clippy::disallowed_names)]\n \n fn main() {\n     // `foo` is part of the default configuration\n     let foo = \"bar\";\n-    // `ducks` was unrightfully blacklisted\n+    // `ducks` was unrightfully disallowed\n     let ducks = [\"quack\", \"quack\"];\n     // `fox` is okay\n     let fox = [\"what\", \"does\", \"the\", \"fox\", \"say\", \"?\"];", "previous_filename": "tests/ui-toml/blacklisted_names_replace/blacklisted_names.rs"}, {"sha": "23c3e96a8d08288a7b37a63a4c2ca273538cc1ce", "filename": "tests/ui-toml/disallowed_names_append/disallowed_names.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_append%2Fdisallowed_names.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,16 @@\n+error: use of a disallowed/placeholder name `foo`\n+  --> $DIR/disallowed_names.rs:5:9\n+   |\n+LL |     let foo = \"bar\";\n+   |         ^^^\n+   |\n+   = note: `-D clippy::disallowed-names` implied by `-D warnings`\n+\n+error: use of a disallowed/placeholder name `ducks`\n+  --> $DIR/disallowed_names.rs:7:9\n+   |\n+LL |     let ducks = [\"quack\", \"quack\"];\n+   |         ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a1c515652d3cb64c3bb859de5cb182bb666ef09c", "filename": "tests/ui-toml/disallowed_names_replace/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_replace%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1 @@\n+disallowed-names = [\"ducks\"]"}, {"sha": "a2e2b46c42693a35031610ad6bbc2363b796b628", "filename": "tests/ui-toml/disallowed_names_replace/disallowed_names.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,9 +1,9 @@\n-#[warn(clippy::blacklisted_name)]\n+#[warn(clippy::disallowed_names)]\n \n fn main() {\n     // `foo` is part of the default configuration\n     let foo = \"bar\";\n-    // `ducks` was unrightfully blacklisted\n+    // `ducks` was unrightfully disallowed\n     let ducks = [\"quack\", \"quack\"];\n     // `fox` is okay\n     let fox = [\"what\", \"does\", \"the\", \"fox\", \"say\", \"?\"];", "previous_filename": "tests/ui-toml/blacklisted_names_append/blacklisted_names.rs"}, {"sha": "d961fa34074b33fb64bbcc3a6c5b095ba9aa0cfa", "filename": "tests/ui-toml/disallowed_names_replace/disallowed_names.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdisallowed_names_replace%2Fdisallowed_names.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,10 @@\n+error: use of a disallowed/placeholder name `ducks`\n+  --> $DIR/disallowed_names.rs:7:9\n+   |\n+LL |     let ducks = [\"quack\", \"quack\"];\n+   |         ^^^^^\n+   |\n+   = note: `-D clippy::disallowed-names` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "63a893cc6c7957529554a0871fa3537c850244d4", "filename": "tests/ui-toml/duplicated_keys/clippy.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,5 @@\n+cognitive-complexity-threshold = 2\n+# This is the deprecated name for the same key\n+cyclomatic-complexity-threshold = 3\n+# Check we get duplication warning regardless of order\n+cognitive-complexity-threshold = 4"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/duplicated_keys/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "d99490a242d4fd3ae0aa0cb461a2b34a68d5e95d", "filename": "tests/ui-toml/duplicated_keys/duplicated_keys.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,8 @@\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive-complexity-threshold`\n+\n+warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "c5d95cb8a147f71fbc8c5e335ea4e77f78b94a8b", "filename": "tests/ui-toml/expect_used/expect_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect_used.rs:11:13"}, {"sha": "6abe5a3bbc2737feba84d51919176142eb8c7fd4", "filename": "tests/ui-toml/toml_blacklist/clippy.toml", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Ftoml_blacklist%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Ftoml_blacklist%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_blacklist%2Fclippy.toml?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1 +0,0 @@\n-blacklisted-names = [\"toto\", \"tata\", \"titi\"]"}, {"sha": "84ba77851f77e91bae30f9241053a44bf08e3170", "filename": "tests/ui-toml/toml_blacklist/conf_french_blacklisted_name.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_blacklist%2Fconf_french_blacklisted_name.stderr?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1,46 +0,0 @@\n-error: use of a blacklisted/placeholder name `toto`\n-  --> $DIR/conf_french_blacklisted_name.rs:6:9\n-   |\n-LL | fn test(toto: ()) {}\n-   |         ^^^^\n-   |\n-   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n-\n-error: use of a blacklisted/placeholder name `toto`\n-  --> $DIR/conf_french_blacklisted_name.rs:9:9\n-   |\n-LL |     let toto = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `tata`\n-  --> $DIR/conf_french_blacklisted_name.rs:10:9\n-   |\n-LL |     let tata = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `titi`\n-  --> $DIR/conf_french_blacklisted_name.rs:11:9\n-   |\n-LL |     let titi = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `toto`\n-  --> $DIR/conf_french_blacklisted_name.rs:17:10\n-   |\n-LL |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |          ^^^^\n-\n-error: use of a blacklisted/placeholder name `tata`\n-  --> $DIR/conf_french_blacklisted_name.rs:17:21\n-   |\n-LL |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |                     ^^^^\n-\n-error: use of a blacklisted/placeholder name `titi`\n-  --> $DIR/conf_french_blacklisted_name.rs:17:28\n-   |\n-LL |         (toto, Some(tata), titi @ Some(_)) => (),\n-   |                            ^^^^\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "e4f0cb6df57af2f49c1cffb68b6610d949e62e73", "filename": "tests/ui-toml/toml_disallow/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallow%2Fclippy.toml?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1 @@\n+disallowed-names = [\"toto\", \"tata\", \"titi\"]"}, {"sha": "2f86b3eda4c52a45946cd9128e074df70b635398", "filename": "tests/ui-toml/toml_disallow/conf_french_disallowed_name.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n #![allow(clippy::single_match)]\n #![allow(unused_variables)]\n-#![warn(clippy::blacklisted_name)]\n+#![warn(clippy::disallowed_names)]\n \n fn test(toto: ()) {}\n ", "previous_filename": "tests/ui-toml/toml_blacklist/conf_french_blacklisted_name.rs"}, {"sha": "9082c1c54c36b9dc87e6d1e3a612961ff595b532", "filename": "tests/ui-toml/toml_disallow/conf_french_disallowed_name.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallow%2Fconf_french_disallowed_name.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,46 @@\n+error: use of a disallowed/placeholder name `toto`\n+  --> $DIR/conf_french_disallowed_name.rs:6:9\n+   |\n+LL | fn test(toto: ()) {}\n+   |         ^^^^\n+   |\n+   = note: `-D clippy::disallowed-names` implied by `-D warnings`\n+\n+error: use of a disallowed/placeholder name `toto`\n+  --> $DIR/conf_french_disallowed_name.rs:9:9\n+   |\n+LL |     let toto = 42;\n+   |         ^^^^\n+\n+error: use of a disallowed/placeholder name `tata`\n+  --> $DIR/conf_french_disallowed_name.rs:10:9\n+   |\n+LL |     let tata = 42;\n+   |         ^^^^\n+\n+error: use of a disallowed/placeholder name `titi`\n+  --> $DIR/conf_french_disallowed_name.rs:11:9\n+   |\n+LL |     let titi = 42;\n+   |         ^^^^\n+\n+error: use of a disallowed/placeholder name `toto`\n+  --> $DIR/conf_french_disallowed_name.rs:17:10\n+   |\n+LL |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |          ^^^^\n+\n+error: use of a disallowed/placeholder name `tata`\n+  --> $DIR/conf_french_disallowed_name.rs:17:21\n+   |\n+LL |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                     ^^^^\n+\n+error: use of a disallowed/placeholder name `titi`\n+  --> $DIR/conf_french_disallowed_name.rs:17:28\n+   |\n+LL |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                            ^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "9f8e778b3b9d1d36b526de62226c03462ab1dff4", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -12,6 +12,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            cognitive-complexity-threshold\n            cyclomatic-complexity-threshold\n            disallowed-methods\n+           disallowed-names\n            disallowed-types\n            doc-valid-idents\n            enable-raw-pointer-heuristic-for-send"}, {"sha": "795f435f24cd40b3e713959334ff266aaba3cc9f", "filename": "tests/ui/assertions_on_result_states.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -27,6 +27,14 @@ fn main() {\n     let r: Result<Foo, Foo> = Ok(Foo);\n     assert!(r.is_ok());\n \n+    // test ok with some messages\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    assert!(r.is_ok(), \"oops\");\n+\n+    // test ok with unit error\n+    let r: Result<Foo, ()> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n     // test temporary ok\n     fn get_ok() -> Result<Foo, DebugFoo> {\n         Ok(Foo)"}, {"sha": "1101aec1e1b34d5cfc29a591b1292ff6bc35d3f6", "filename": "tests/ui/assertions_on_result_states.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -27,6 +27,14 @@ fn main() {\n     let r: Result<Foo, Foo> = Ok(Foo);\n     assert!(r.is_ok());\n \n+    // test ok with some messages\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    assert!(r.is_ok(), \"oops\");\n+\n+    // test ok with unit error\n+    let r: Result<Foo, ()> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n     // test temporary ok\n     fn get_ok() -> Result<Foo, DebugFoo> {\n         Ok(Foo)"}, {"sha": "97a5f3dfca4a65f93f8d49f1f326fea941531c04", "filename": "tests/ui/assertions_on_result_states.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fassertions_on_result_states.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -7,31 +7,31 @@ LL |     assert!(r.is_ok());\n    = note: `-D clippy::assertions-on-result-states` implied by `-D warnings`\n \n error: called `assert!` with `Result::is_ok`\n-  --> $DIR/assertions_on_result_states.rs:34:5\n+  --> $DIR/assertions_on_result_states.rs:42:5\n    |\n LL |     assert!(get_ok().is_ok());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok().unwrap()`\n \n error: called `assert!` with `Result::is_ok`\n-  --> $DIR/assertions_on_result_states.rs:37:5\n+  --> $DIR/assertions_on_result_states.rs:45:5\n    |\n LL |     assert!(get_ok_macro!().is_ok());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok_macro!().unwrap()`\n \n error: called `assert!` with `Result::is_ok`\n-  --> $DIR/assertions_on_result_states.rs:50:5\n+  --> $DIR/assertions_on_result_states.rs:58:5\n    |\n LL |     assert!(r.is_ok());\n    |     ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n \n error: called `assert!` with `Result::is_ok`\n-  --> $DIR/assertions_on_result_states.rs:56:9\n+  --> $DIR/assertions_on_result_states.rs:64:9\n    |\n LL |         assert!(r.is_ok());\n    |         ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n \n error: called `assert!` with `Result::is_err`\n-  --> $DIR/assertions_on_result_states.rs:64:5\n+  --> $DIR/assertions_on_result_states.rs:72:5\n    |\n LL |     assert!(r.is_err());\n    |     ^^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap_err()`"}, {"sha": "70dbdaece8b6bb37083a79cb0d0bafc9b6c00a86", "filename": "tests/ui/blacklisted_name.stderr", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d8b6d4f247a10714f9e50f0713224a08435810a/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=4d8b6d4f247a10714f9e50f0713224a08435810a", "patch": "@@ -1,88 +0,0 @@\n-error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:11:9\n-   |\n-LL | fn test(foo: ()) {}\n-   |         ^^^\n-   |\n-   = note: `-D clippy::blacklisted-name` implied by `-D warnings`\n-\n-error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:14:9\n-   |\n-LL |     let foo = 42;\n-   |         ^^^\n-\n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:15:9\n-   |\n-LL |     let baz = 42;\n-   |         ^^^\n-\n-error: use of a blacklisted/placeholder name `quux`\n-  --> $DIR/blacklisted_name.rs:16:9\n-   |\n-LL |     let quux = 42;\n-   |         ^^^^\n-\n-error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:27:10\n-   |\n-LL |         (foo, Some(baz), quux @ Some(_)) => (),\n-   |          ^^^\n-\n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:27:20\n-   |\n-LL |         (foo, Some(baz), quux @ Some(_)) => (),\n-   |                    ^^^\n-\n-error: use of a blacklisted/placeholder name `quux`\n-  --> $DIR/blacklisted_name.rs:27:26\n-   |\n-LL |         (foo, Some(baz), quux @ Some(_)) => (),\n-   |                          ^^^^\n-\n-error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:32:19\n-   |\n-LL | fn issue_1647(mut foo: u8) {\n-   |                   ^^^\n-\n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:33:13\n-   |\n-LL |     let mut baz = 0;\n-   |             ^^^\n-\n-error: use of a blacklisted/placeholder name `quux`\n-  --> $DIR/blacklisted_name.rs:34:21\n-   |\n-LL |     if let Some(mut quux) = Some(42) {}\n-   |                     ^^^^\n-\n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:38:13\n-   |\n-LL |     let ref baz = 0;\n-   |             ^^^\n-\n-error: use of a blacklisted/placeholder name `quux`\n-  --> $DIR/blacklisted_name.rs:39:21\n-   |\n-LL |     if let Some(ref quux) = Some(42) {}\n-   |                     ^^^^\n-\n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:43:17\n-   |\n-LL |     let ref mut baz = 0;\n-   |                 ^^^\n-\n-error: use of a blacklisted/placeholder name `quux`\n-  --> $DIR/blacklisted_name.rs:44:25\n-   |\n-LL |     if let Some(ref mut quux) = Some(42) {}\n-   |                         ^^^^\n-\n-error: aborting due to 14 previous errors\n-"}, {"sha": "35ed87b0f182fd921e10ee68394a755b39614301", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![deny(clippy::borrowed_box)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "0780c8f0586e0a4740754920ff3d783226b2d22f", "filename": "tests/ui/box_collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n #![allow(\n     clippy::boxed_local,\n     clippy::needless_pass_by_value,\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     unused\n )]\n "}, {"sha": "7ecefd7b13439f5e7df85c5ad3fff049371be523", "filename": "tests/ui/cast_abs_to_unsigned.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     let _ = a.unsigned_abs() as u32;\n     let _ = a.unsigned_abs() as u64;\n     let _ = a.unsigned_abs() as u128;\n+\n+    let _ = (x as i64 - y as i64).unsigned_abs() as u32;\n }"}, {"sha": "30c603fca9a149265ac7d4b0d5a43d9811a71c9b", "filename": "tests/ui/cast_abs_to_unsigned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     let _ = a.abs() as u32;\n     let _ = a.abs() as u64;\n     let _ = a.abs() as u128;\n+\n+    let _ = (x as i64 - y as i64).abs() as u32;\n }"}, {"sha": "0455377452676fe855f8994121c3309b1517dc08", "filename": "tests/ui/cast_abs_to_unsigned.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcast_abs_to_unsigned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_abs_to_unsigned.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -96,5 +96,11 @@ error: casting the result of `isize::abs()` to u128\n LL |     let _ = a.abs() as u128;\n    |             ^^^^^^^ help: replace with: `a.unsigned_abs()`\n \n-error: aborting due to 16 previous errors\n+error: casting the result of `i64::abs()` to u32\n+  --> $DIR/cast_abs_to_unsigned.rs:30:13\n+   |\n+LL |     let _ = (x as i64 - y as i64).abs() as u32;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `(x as i64 - y as i64).unsigned_abs()`\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "72b1222709819447cd8a4589f6e9c92a7dbc546a", "filename": "tests/ui/clone_on_copy.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -21,7 +21,7 @@ fn is_ascii(ch: char) -> bool {\n     ch.is_ascii()\n }\n \n-fn clone_on_copy() {\n+fn clone_on_copy() -> Option<(i32)> {\n     42;\n \n     vec![1].clone(); // ok, not a Copy type\n@@ -71,4 +71,9 @@ fn clone_on_copy() {\n     // Issue #5436\n     let mut vec = Vec::new();\n     vec.push(42);\n+\n+    //  Issue #9277\n+    let opt: &Option<i32> = &None;\n+    let value = (*opt)?; // operator precedence needed (*opt)?\n+    None\n }"}, {"sha": "03e210ebad98c302819ab8b8ed9c5426fa9a6a34", "filename": "tests/ui/clone_on_copy.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -21,7 +21,7 @@ fn is_ascii(ch: char) -> bool {\n     ch.is_ascii()\n }\n \n-fn clone_on_copy() {\n+fn clone_on_copy() -> Option<(i32)> {\n     42.clone();\n \n     vec![1].clone(); // ok, not a Copy type\n@@ -71,4 +71,9 @@ fn clone_on_copy() {\n     // Issue #5436\n     let mut vec = Vec::new();\n     vec.push(42.clone());\n+\n+    //  Issue #9277\n+    let opt: &Option<i32> = &None;\n+    let value = opt.clone()?; // operator precedence needed (*opt)?\n+    None\n }"}, {"sha": "42ae227777c7082a20849bfb489b2332850a6ac9", "filename": "tests/ui/clone_on_copy.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -48,5 +48,11 @@ error: using `clone` on type `i32` which implements the `Copy` trait\n LL |     vec.push(42.clone());\n    |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n \n-error: aborting due to 8 previous errors\n+error: using `clone` on type `std::option::Option<i32>` which implements the `Copy` trait\n+  --> $DIR/clone_on_copy.rs:77:17\n+   |\n+LL |     let value = opt.clone()?; // operator precedence needed (*opt)?\n+   |                 ^^^^^^^^^^^ help: try dereferencing it: `(*opt)`\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "61ef24804986ef82682f7c7b23bc48d8d4cfefcf", "filename": "tests/ui/crashes/ice-2760.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fice-2760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fice-2760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2760.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n #![allow(\n     unused_variables,\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::needless_pass_by_value,\n     dead_code\n )]"}, {"sha": "b402052882adc3010d82788392092cafec2dbdcd", "filename": "tests/ui/crashes/ice-3462.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fice-3462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fice-3462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3462.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name, clippy::equatable_if_let)]\n+#![allow(clippy::disallowed_names, clippy::equatable_if_let)]\n #![allow(unused)]\n \n /// Test for https://github.com/rust-lang/rust-clippy/issues/3462"}, {"sha": "55a8b403407cd8039f97303fc190cb0fea67fa71", "filename": "tests/ui/crashes/regressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fcrashes%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fregressions.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n \n pub fn foo(bar: *const u8) {\n     println!(\"{:#p}\", bar);"}, {"sha": "a7da8f89aa3d45e6abcafb37876d5051732d69b6", "filename": "tests/ui/def_id_nocore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdef_id_nocore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdef_id_nocore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,3 @@\n-// ignore-windows\n // ignore-macos\n \n #![feature(no_core, lang_items, start)]"}, {"sha": "6210d7c6cfd80c1d32369494f3010694b606dc65", "filename": "tests/ui/def_id_nocore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdef_id_nocore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdef_id_nocore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdef_id_nocore.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: methods called `as_*` usually take `self` by reference or `self` by mutable reference\n-  --> $DIR/def_id_nocore.rs:28:19\n+  --> $DIR/def_id_nocore.rs:27:19\n    |\n LL |     pub fn as_ref(self) -> &'static str {\n    |                   ^^^^"}, {"sha": "fce66eb175963ee4b78247e85e5d12545567dbcb", "filename": "tests/ui/default_trait_access.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;\n@@ -51,6 +55,8 @@ fn main() {\n         ..Default::default()\n     };\n \n+    let _s21: String = with_span!(s Default::default());\n+\n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n         s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,"}, {"sha": "3e8e898b7bc61aa8311ae64e29059105747af577", "filename": "tests/ui/default_trait_access.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,8 +1,12 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(unused_imports, dead_code)]\n #![deny(clippy::default_trait_access)]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::default;\n use std::default::Default as D2;\n use std::string;\n@@ -51,6 +55,8 @@ fn main() {\n         ..Default::default()\n     };\n \n+    let _s21: String = with_span!(s Default::default());\n+\n     println!(\n         \"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}] [{:?}]\",\n         s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20,"}, {"sha": "3493de37a55be55beb0d9d736bd2ea6a882581c2", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,53 +1,53 @@\n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:11:22\n+  --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n note: the lint level is defined here\n-  --> $DIR/default_trait_access.rs:4:9\n+  --> $DIR/default_trait_access.rs:5:9\n    |\n LL | #![deny(clippy::default_trait_access)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:15:22\n+  --> $DIR/default_trait_access.rs:19:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:17:22\n+  --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `std::string::String::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:21:22\n+  --> $DIR/default_trait_access.rs:25:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n error: calling `GenericDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:31:46\n+  --> $DIR/default_trait_access.rs:35:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault::default()`\n \n error: calling `TupleDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:37:36\n+  --> $DIR/default_trait_access.rs:41:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n error: calling `ArrayDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:39:36\n+  --> $DIR/default_trait_access.rs:43:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n error: calling `TupleStructDerivedDefault::default()` is more clear than this expression\n-  --> $DIR/default_trait_access.rs:43:42\n+  --> $DIR/default_trait_access.rs:47:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();\n    |                                          ^^^^^^^^^^^^^^^^^^ help: try: `TupleStructDerivedDefault::default()`"}, {"sha": "e937c49f3897f3c9ea1f4df4422e59e18032d00b", "filename": "tests/ui/disallowed_names.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdisallowed_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdisallowed_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_names.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -6,7 +6,7 @@\n     unused_mut,\n     unused_variables\n )]\n-#![warn(clippy::blacklisted_name)]\n+#![warn(clippy::disallowed_names)]\n \n fn test(foo: ()) {}\n \n@@ -46,7 +46,7 @@ fn issue_1647_ref_mut() {\n \n mod tests {\n     fn issue_7305() {\n-        // `blacklisted_name` lint should not be triggered inside of the test code.\n+        // `disallowed_names` lint should not be triggered inside of the test code.\n         let foo = 0;\n \n         // Check that even in nested functions warning is still not triggered.", "previous_filename": "tests/ui/blacklisted_name.rs"}, {"sha": "78cb55096ff0c2978f70820173ae63d23531f6bc", "filename": "tests/ui/disallowed_names.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdisallowed_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdisallowed_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisallowed_names.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,88 @@\n+error: use of a disallowed/placeholder name `foo`\n+  --> $DIR/disallowed_names.rs:11:9\n+   |\n+LL | fn test(foo: ()) {}\n+   |         ^^^\n+   |\n+   = note: `-D clippy::disallowed-names` implied by `-D warnings`\n+\n+error: use of a disallowed/placeholder name `foo`\n+  --> $DIR/disallowed_names.rs:14:9\n+   |\n+LL |     let foo = 42;\n+   |         ^^^\n+\n+error: use of a disallowed/placeholder name `baz`\n+  --> $DIR/disallowed_names.rs:15:9\n+   |\n+LL |     let baz = 42;\n+   |         ^^^\n+\n+error: use of a disallowed/placeholder name `quux`\n+  --> $DIR/disallowed_names.rs:16:9\n+   |\n+LL |     let quux = 42;\n+   |         ^^^^\n+\n+error: use of a disallowed/placeholder name `foo`\n+  --> $DIR/disallowed_names.rs:27:10\n+   |\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n+   |          ^^^\n+\n+error: use of a disallowed/placeholder name `baz`\n+  --> $DIR/disallowed_names.rs:27:20\n+   |\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n+   |                    ^^^\n+\n+error: use of a disallowed/placeholder name `quux`\n+  --> $DIR/disallowed_names.rs:27:26\n+   |\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n+   |                          ^^^^\n+\n+error: use of a disallowed/placeholder name `foo`\n+  --> $DIR/disallowed_names.rs:32:19\n+   |\n+LL | fn issue_1647(mut foo: u8) {\n+   |                   ^^^\n+\n+error: use of a disallowed/placeholder name `baz`\n+  --> $DIR/disallowed_names.rs:33:13\n+   |\n+LL |     let mut baz = 0;\n+   |             ^^^\n+\n+error: use of a disallowed/placeholder name `quux`\n+  --> $DIR/disallowed_names.rs:34:21\n+   |\n+LL |     if let Some(mut quux) = Some(42) {}\n+   |                     ^^^^\n+\n+error: use of a disallowed/placeholder name `baz`\n+  --> $DIR/disallowed_names.rs:38:13\n+   |\n+LL |     let ref baz = 0;\n+   |             ^^^\n+\n+error: use of a disallowed/placeholder name `quux`\n+  --> $DIR/disallowed_names.rs:39:21\n+   |\n+LL |     if let Some(ref quux) = Some(42) {}\n+   |                     ^^^^\n+\n+error: use of a disallowed/placeholder name `baz`\n+  --> $DIR/disallowed_names.rs:43:17\n+   |\n+LL |     let ref mut baz = 0;\n+   |                 ^^^\n+\n+error: use of a disallowed/placeholder name `quux`\n+  --> $DIR/disallowed_names.rs:44:25\n+   |\n+LL |     if let Some(ref mut quux) = Some(42) {}\n+   |                         ^^^^\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "e8f992e6ddedbff2d27ffa3c27ca4301b21c3ddc", "filename": "tests/ui/diverging_sub_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::diverging_sub_expression)]\n-#![allow(clippy::match_same_arms, clippy::logic_bug)]\n+#![allow(clippy::match_same_arms, clippy::overly_complex_bool_expr)]\n #[allow(clippy::empty_loop)]\n fn diverge() -> ! {\n     loop {}"}, {"sha": "e742b396fcde080256206a9523a65281e788e636", "filename": "tests/ui/empty_loop_no_std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fempty_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fempty_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -Clink-arg=-nostartfiles\n // ignore-macos\n-// ignore-windows\n \n #![warn(clippy::empty_loop)]\n #![feature(lang_items, start, libc)]"}, {"sha": "5ded35a6f0d8da3f4a88eaf9415d181178d035ba", "filename": "tests/ui/empty_loop_no_std.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fempty_loop_no_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fempty_loop_no_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: empty `loop {}` wastes CPU cycles\n-  --> $DIR/empty_loop_no_std.rs:14:5\n+  --> $DIR/empty_loop_no_std.rs:13:5\n    |\n LL |     loop {}\n    |     ^^^^^^^\n@@ -8,7 +8,7 @@ LL |     loop {}\n    = help: you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\n \n error: empty `loop {}` wastes CPU cycles\n-  --> $DIR/empty_loop_no_std.rs:26:5\n+  --> $DIR/empty_loop_no_std.rs:25:5\n    |\n LL |     loop {}\n    |     ^^^^^^^"}, {"sha": "ab28aac45563b1cd7bfd3192ad5b192f86638451", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13"}, {"sha": "0415e33b3fa1017fabc10e63c4ae43bea086a557", "filename": "tests/ui/expect_tool_lint_rfc_2383.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -98,7 +98,7 @@ mod clippy_ok {\n         let _ = if true { 42 } else { 42 };\n     }\n \n-    #[expect(clippy::logic_bug)]\n+    #[expect(clippy::overly_complex_bool_expr)]\n     fn burger() {\n         let a = false;\n         let b = true;\n@@ -127,7 +127,7 @@ mod clippy_warn {\n         let _ = if true { 33 } else { 42 };\n     }\n \n-    #[expect(clippy::logic_bug)]\n+    #[expect(clippy::overly_complex_bool_expr)]\n     fn burger() {\n         let a = false;\n         let b = true;"}, {"sha": "7ce9e855b5e05579ee69a46a6d91d10eec93470d", "filename": "tests/ui/expect_tool_lint_rfc_2383.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_tool_lint_rfc_2383.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -33,8 +33,8 @@ LL |     #[expect(clippy::if_same_then_else)]\n error: this lint expectation is unfulfilled\n   --> $DIR/expect_tool_lint_rfc_2383.rs:130:14\n    |\n-LL |     #[expect(clippy::logic_bug)]\n-   |              ^^^^^^^^^^^^^^^^^\n+LL |     #[expect(clippy::overly_complex_bool_expr)]\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d1d35e5c0eb46f493aaa3c7b07fdda965be3bef4", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(closure_lifetime_binder)]\n #![warn(clippy::explicit_auto_deref)]\n #![allow(\n     dead_code,\n@@ -67,6 +68,8 @@ fn main() {\n     let s = String::new();\n \n     let _: &str = &s;\n+    let _: &str = &{ String::new() };\n+    let _: &str = &mut { String::new() };\n     let _ = &*s; // Don't lint. Inferred type would change.\n     let _: &_ = &*s; // Don't lint. Inferred type would change.\n \n@@ -215,4 +218,52 @@ fn main() {\n     let s = &\"str\";\n     let _ = || return *s;\n     let _ = || -> &'static str { return s };\n+\n+    struct X;\n+    struct Y(X);\n+    impl core::ops::Deref for Y {\n+        type Target = X;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    let _: &X = &*{ Y(X) };\n+    let _: &X = &*match 0 {\n+        #[rustfmt::skip]\n+        0 => { Y(X) },\n+        _ => panic!(),\n+    };\n+    let _: &X = &*if true { Y(X) } else { panic!() };\n+\n+    fn deref_to_u<U, T: core::ops::Deref<Target = U>>(x: &T) -> &U {\n+        x\n+    }\n+\n+    let _ = |x: &'static Box<dyn Iterator<Item = u32>>| -> &'static dyn Iterator<Item = u32> { &**x };\n+    fn ret_any(x: &Box<dyn std::any::Any>) -> &dyn std::any::Any {\n+        &**x\n+    }\n+\n+    let x = String::new();\n+    let _: *const str = &*x;\n+\n+    struct S7([u32; 1]);\n+    impl core::ops::Deref for S7 {\n+        type Target = [u32; 1];\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    let x = S7([0]);\n+    let _: &[u32] = &*x;\n+\n+    let c1 = |_: &Vec<&u32>| {};\n+    let x = &&vec![&1u32];\n+    c1(x);\n+    let _ = for<'a, 'b> |x: &'a &'a Vec<&'b u32>, b: bool| -> &'a Vec<&'b u32> {\n+        if b {\n+            return x;\n+        }\n+        x\n+    };\n }"}, {"sha": "deedafad153b97ae0edd6d777637516d65c33410", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n \n+#![feature(closure_lifetime_binder)]\n #![warn(clippy::explicit_auto_deref)]\n #![allow(\n     dead_code,\n@@ -67,6 +68,8 @@ fn main() {\n     let s = String::new();\n \n     let _: &str = &*s;\n+    let _: &str = &*{ String::new() };\n+    let _: &str = &mut *{ String::new() };\n     let _ = &*s; // Don't lint. Inferred type would change.\n     let _: &_ = &*s; // Don't lint. Inferred type would change.\n \n@@ -215,4 +218,52 @@ fn main() {\n     let s = &\"str\";\n     let _ = || return *s;\n     let _ = || -> &'static str { return *s };\n+\n+    struct X;\n+    struct Y(X);\n+    impl core::ops::Deref for Y {\n+        type Target = X;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    let _: &X = &*{ Y(X) };\n+    let _: &X = &*match 0 {\n+        #[rustfmt::skip]\n+        0 => { Y(X) },\n+        _ => panic!(),\n+    };\n+    let _: &X = &*if true { Y(X) } else { panic!() };\n+\n+    fn deref_to_u<U, T: core::ops::Deref<Target = U>>(x: &T) -> &U {\n+        &**x\n+    }\n+\n+    let _ = |x: &'static Box<dyn Iterator<Item = u32>>| -> &'static dyn Iterator<Item = u32> { &**x };\n+    fn ret_any(x: &Box<dyn std::any::Any>) -> &dyn std::any::Any {\n+        &**x\n+    }\n+\n+    let x = String::new();\n+    let _: *const str = &*x;\n+\n+    struct S7([u32; 1]);\n+    impl core::ops::Deref for S7 {\n+        type Target = [u32; 1];\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    let x = S7([0]);\n+    let _: &[u32] = &*x;\n+\n+    let c1 = |_: &Vec<&u32>| {};\n+    let x = &&vec![&1u32];\n+    c1(*x);\n+    let _ = for<'a, 'b> |x: &'a &'a Vec<&'b u32>, b: bool| -> &'a Vec<&'b u32> {\n+        if b {\n+            return *x;\n+        }\n+        *x\n+    };\n }"}, {"sha": "91863abcc5d2436cb297493c45c8f88a74e88703", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 90, "deletions": 54, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,202 +1,238 @@\n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:69:20\n+  --> $DIR/explicit_auto_deref.rs:70:19\n    |\n LL |     let _: &str = &*s;\n-   |                    ^^ help: try this: `s`\n+   |                   ^^^ help: try this: `&s`\n    |\n    = note: `-D clippy::explicit-auto-deref` implied by `-D warnings`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:73:12\n+  --> $DIR/explicit_auto_deref.rs:71:19\n+   |\n+LL |     let _: &str = &*{ String::new() };\n+   |                   ^^^^^^^^^^^^^^^^^^^ help: try this: `&{ String::new() }`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:72:19\n+   |\n+LL |     let _: &str = &mut *{ String::new() };\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut { String::new() }`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:76:11\n    |\n LL |     f_str(&*s);\n-   |            ^^ help: try this: `s`\n+   |           ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:77:14\n+  --> $DIR/explicit_auto_deref.rs:80:13\n    |\n LL |     f_str_t(&*s, &*s); // Don't lint second param.\n-   |              ^^ help: try this: `s`\n+   |             ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:80:25\n+  --> $DIR/explicit_auto_deref.rs:83:24\n    |\n LL |     let _: &Box<i32> = &**b;\n-   |                         ^^^ help: try this: `b`\n+   |                        ^^^^ help: try this: `&b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:86:8\n+  --> $DIR/explicit_auto_deref.rs:89:7\n    |\n LL |     c(&*s);\n-   |        ^^ help: try this: `s`\n+   |       ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:92:9\n+  --> $DIR/explicit_auto_deref.rs:95:9\n    |\n LL |         &**x\n    |         ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:96:11\n+  --> $DIR/explicit_auto_deref.rs:99:11\n    |\n LL |         { &**x }\n    |           ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:100:9\n+  --> $DIR/explicit_auto_deref.rs:103:9\n    |\n LL |         &**{ x }\n    |         ^^^^^^^^ help: try this: `{ x }`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:104:9\n+  --> $DIR/explicit_auto_deref.rs:107:9\n    |\n LL |         &***x\n    |         ^^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:121:13\n+  --> $DIR/explicit_auto_deref.rs:124:12\n    |\n LL |         f1(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:122:13\n+  --> $DIR/explicit_auto_deref.rs:125:12\n    |\n LL |         f2(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:123:13\n+  --> $DIR/explicit_auto_deref.rs:126:12\n    |\n LL |         f3(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:124:28\n+  --> $DIR/explicit_auto_deref.rs:127:27\n    |\n LL |         f4.callable_str()(&*x);\n-   |                            ^^ help: try this: `x`\n+   |                           ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:125:13\n+  --> $DIR/explicit_auto_deref.rs:128:12\n    |\n LL |         f5(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:126:13\n+  --> $DIR/explicit_auto_deref.rs:129:12\n    |\n LL |         f6(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:127:28\n+  --> $DIR/explicit_auto_deref.rs:130:27\n    |\n LL |         f7.callable_str()(&*x);\n-   |                            ^^ help: try this: `x`\n+   |                           ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:128:26\n+  --> $DIR/explicit_auto_deref.rs:131:25\n    |\n LL |         f8.callable_t()(&*x);\n-   |                          ^^ help: try this: `x`\n+   |                         ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:129:13\n+  --> $DIR/explicit_auto_deref.rs:132:12\n    |\n LL |         f9(&*x);\n-   |             ^^ help: try this: `x`\n+   |            ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:130:14\n+  --> $DIR/explicit_auto_deref.rs:133:13\n    |\n LL |         f10(&*x);\n-   |              ^^ help: try this: `x`\n+   |             ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:131:27\n+  --> $DIR/explicit_auto_deref.rs:134:26\n    |\n LL |         f11.callable_t()(&*x);\n-   |                           ^^ help: try this: `x`\n+   |                          ^^^ help: try this: `&x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:135:17\n+  --> $DIR/explicit_auto_deref.rs:138:16\n    |\n LL |     let _ = S1(&*s);\n-   |                 ^^ help: try this: `s`\n+   |                ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:140:22\n+  --> $DIR/explicit_auto_deref.rs:143:21\n    |\n LL |     let _ = S2 { s: &*s };\n-   |                      ^^ help: try this: `s`\n+   |                     ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:156:30\n+  --> $DIR/explicit_auto_deref.rs:159:30\n    |\n LL |             let _ = Self::S1(&**s);\n    |                              ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:157:35\n+  --> $DIR/explicit_auto_deref.rs:160:35\n    |\n LL |             let _ = Self::S2 { s: &**s };\n    |                                   ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:160:21\n+  --> $DIR/explicit_auto_deref.rs:163:20\n    |\n LL |     let _ = E1::S1(&*s);\n-   |                     ^^ help: try this: `s`\n+   |                    ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:161:26\n+  --> $DIR/explicit_auto_deref.rs:164:25\n    |\n LL |     let _ = E1::S2 { s: &*s };\n-   |                          ^^ help: try this: `s`\n+   |                         ^^^ help: try this: `&s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:179:13\n+  --> $DIR/explicit_auto_deref.rs:182:13\n    |\n LL |     let _ = (*b).foo;\n    |             ^^^^ help: try this: `b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:180:13\n+  --> $DIR/explicit_auto_deref.rs:183:13\n    |\n LL |     let _ = (**b).foo;\n    |             ^^^^^ help: try this: `b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:195:19\n+  --> $DIR/explicit_auto_deref.rs:198:19\n    |\n LL |     let _ = f_str(*ref_str);\n    |                   ^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:197:19\n+  --> $DIR/explicit_auto_deref.rs:200:19\n    |\n LL |     let _ = f_str(**ref_ref_str);\n    |                   ^^^^^^^^^^^^^ help: try this: `ref_ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:207:13\n+  --> $DIR/explicit_auto_deref.rs:210:13\n    |\n LL |     f_str(&&*ref_str); // `needless_borrow` will suggest removing both references\n    |             ^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:208:12\n+  --> $DIR/explicit_auto_deref.rs:211:12\n    |\n LL |     f_str(&&**ref_str); // `needless_borrow` will suggest removing only one reference\n    |            ^^^^^^^^^^ help: try this: `ref_str`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:217:41\n+  --> $DIR/explicit_auto_deref.rs:220:41\n    |\n LL |     let _ = || -> &'static str { return *s };\n    |                                         ^^ help: try this: `s`\n \n-error: aborting due to 33 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:239:9\n+   |\n+LL |         &**x\n+   |         ^^^^ help: try this: `x`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:262:8\n+   |\n+LL |     c1(*x);\n+   |        ^^ help: try this: `x`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:265:20\n+   |\n+LL |             return *x;\n+   |                    ^^ help: try this: `x`\n+\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:267:9\n+   |\n+LL |         *x\n+   |         ^^ help: try this: `x`\n+\n+error: aborting due to 39 previous errors\n "}, {"sha": "07d2002eb27f83d1482c0004282d88d9ae3398a3", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::if_same_then_else)]\n #![allow(\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::eq_op,\n     clippy::never_loop,\n     clippy::no_effect,"}, {"sha": "58167f4446dba86a8614b6af3ca3db0160220b83", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::if_same_then_else)]\n #![allow(\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::collapsible_else_if,\n     clippy::equatable_if_let,\n     clippy::collapsible_if,"}, {"sha": "9850fc0919e12b76d78fc709353484d809a00ba8", "filename": "tests/ui/ifs_same_cond.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fifs_same_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fifs_same_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -32,9 +32,9 @@ fn ifs_same_cond() {\n     };\n \n     let mut v = vec![1];\n-    if v.pop() == None {\n+    if v.pop().is_none() {\n         // ok, functions\n-    } else if v.pop() == None {\n+    } else if v.pop().is_none() {\n     }\n \n     if v.len() == 42 {"}, {"sha": "d56d623b5268e9a06b15495e58e6ca47924ce9d5", "filename": "tests/ui/iter_skip_next.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fiter_skip_next.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fiter_skip_next.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n // aux-build:option_helpers.rs\n \n #![warn(clippy::iter_skip_next)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::iter_nth)]\n #![allow(unused_mut, dead_code)]\n "}, {"sha": "3ec5d1b82142671f8d5409d111fd78827a305db9", "filename": "tests/ui/iter_skip_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n // aux-build:option_helpers.rs\n \n #![warn(clippy::iter_skip_next)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::iter_nth)]\n #![allow(unused_mut, dead_code)]\n "}, {"sha": "959567f686703176ca41dff403c0e37c27a60ea1", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n     unused_variables,\n     unused_assignments,\n     clippy::similar_names,\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::branches_sharing_code,\n     clippy::needless_late_init\n )]"}, {"sha": "65598f1eaccc54e928026ccdad249f28f43711a6", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let c = Some(2);\n     if !a.is_empty()\n         && a.len() == 3\n-        && c != None\n+        && c.is_some()\n         && !a.is_empty()\n         && a.len() == 3\n         && !a.is_empty()"}, {"sha": "65598f1eaccc54e928026ccdad249f28f43711a6", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let c = Some(2);\n     if !a.is_empty()\n         && a.len() == 3\n-        && c != None\n+        && c.is_some()\n         && !a.is_empty()\n         && a.len() == 3\n         && !a.is_empty()"}, {"sha": "a2393674fe6129dae1a74fe21562dceb014dafd3", "filename": "tests/ui/manual_assert.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     let c = Some(2);\n     if !a.is_empty()\n         && a.len() == 3\n-        && c != None\n+        && c.is_some()\n         && !a.is_empty()\n         && a.len() == 3\n         && !a.is_empty()"}, {"sha": "4d2706dd6211380804c40f004ca9c86569e644ed", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let c = Some(2);\n     if !a.is_empty()\n         && a.len() == 3\n-        && c != None\n+        && c.is_some()\n         && !a.is_empty()\n         && a.len() == 3\n         && !a.is_empty()"}, {"sha": "0fa776b7b2e4ed4b504691488e28d6ba9451b1f2", "filename": "tests/ui/manual_instant_elapsed.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![warn(clippy::manual_instant_elapsed)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(unused_variables)]\n+#![allow(unused_must_use)]\n+\n+use std::time::Instant;\n+\n+fn main() {\n+    let prev_instant = Instant::now();\n+\n+    {\n+        // don't influence\n+        let another_instant = Instant::now();\n+    }\n+\n+    let duration = prev_instant.elapsed();\n+\n+    // don't catch\n+    let duration = prev_instant.elapsed();\n+\n+    Instant::now() - duration;\n+\n+    let ref_to_instant = &Instant::now();\n+\n+    (*ref_to_instant).elapsed(); // to ensure parens are added correctly\n+}"}, {"sha": "5b11b84535ddc46e766f706f0b0a295aa854f978", "filename": "tests/ui/manual_instant_elapsed.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+#![warn(clippy::manual_instant_elapsed)]\n+#![allow(clippy::unnecessary_operation)]\n+#![allow(unused_variables)]\n+#![allow(unused_must_use)]\n+\n+use std::time::Instant;\n+\n+fn main() {\n+    let prev_instant = Instant::now();\n+\n+    {\n+        // don't influence\n+        let another_instant = Instant::now();\n+    }\n+\n+    let duration = Instant::now() - prev_instant;\n+\n+    // don't catch\n+    let duration = prev_instant.elapsed();\n+\n+    Instant::now() - duration;\n+\n+    let ref_to_instant = &Instant::now();\n+\n+    Instant::now() - *ref_to_instant; // to ensure parens are added correctly\n+}"}, {"sha": "5537f5642a23cd01488caa8cc7f131cd82f4a19b", "filename": "tests/ui/manual_instant_elapsed.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_instant_elapsed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_instant_elapsed.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,16 @@\n+error: manual implementation of `Instant::elapsed`\n+  --> $DIR/manual_instant_elapsed.rs:17:20\n+   |\n+LL |     let duration = Instant::now() - prev_instant;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `prev_instant.elapsed()`\n+   |\n+   = note: `-D clippy::manual-instant-elapsed` implied by `-D warnings`\n+\n+error: manual implementation of `Instant::elapsed`\n+  --> $DIR/manual_instant_elapsed.rs:26:5\n+   |\n+LL |     Instant::now() - *ref_to_instant; // to ensure parens are added correctly\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(*ref_to_instant).elapsed()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d864f85545349669a72ac1fd8ed3fcaac6bdb3f3", "filename": "tests/ui/manual_ok_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_ok_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_ok_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_ok_or)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::redundant_closure)]\n #![allow(dead_code)]\n #![allow(unused_must_use)]"}, {"sha": "6264768460ef60539e1379f1dbc28c16af415b7d", "filename": "tests/ui/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_ok_or.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::manual_ok_or)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::redundant_closure)]\n #![allow(dead_code)]\n #![allow(unused_must_use)]"}, {"sha": "61793e80c98d42591db0781ba8f16e5b4c6ac73d", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::match_same_arms)]\n-#![allow(clippy::blacklisted_name, clippy::diverging_sub_expression)]\n+#![allow(clippy::disallowed_names, clippy::diverging_sub_expression)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool {"}, {"sha": "6f22366eab29adab0ab9f830524a8dffbb8a14f7", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all, clippy::pedantic)]\n #![allow(\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::default_trait_access,\n     clippy::missing_docs_in_private_items,\n     clippy::missing_safety_doc,"}, {"sha": "40c1fcae1fd3fb172004276a8f8a8df3ae8821c6", "filename": "tests/ui/mismatching_type_param_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatching_type_param_order.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::mismatching_type_param_order)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n \n fn main() {\n     struct Foo<A, B> {"}, {"sha": "b950248ef942024d0e003fc5be16c8ba0c249101", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -3,12 +3,16 @@\n //! The .stderr output of this test should be empty. Otherwise it's a bug somewhere.\n \n // aux-build:helper.rs\n+// aux-build:../../auxiliary/proc_macro_with_span.rs\n \n #![warn(clippy::missing_const_for_fn)]\n #![feature(start)]\n #![feature(custom_inner_attributes)]\n \n extern crate helper;\n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n \n struct Game;\n \n@@ -119,3 +123,8 @@ mod const_fn_stabilized_after_msrv {\n         byte.is_ascii_digit();\n     }\n }\n+\n+with_span! {\n+    span\n+    fn dont_check_in_proc_macro() {}\n+}"}, {"sha": "29cc026a8fd394e21b033bb1f45c9b8614252087", "filename": "tests/ui/missing_doc.rs", "status": "renamed", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,10 +1,15 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::missing_docs_in_private_items)]\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n #![allow(dead_code)]\n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::arch::global_asm;\n \n type Typedef = String;\n@@ -100,3 +105,11 @@ fn main() {}\n \n // Ensure global asm doesn't require documentation.\n global_asm! { \"\" }\n+\n+// Don't lint proc macro output with an unexpected span.\n+with_span!(span pub struct FooPm { pub field: u32});\n+with_span!(span pub struct FooPm2;);\n+with_span!(span pub enum FooPm3 { A, B(u32), C { field: u32 }});\n+with_span!(span pub fn foo_pm() {});\n+with_span!(span pub static FOO_PM: u32 = 0;);\n+with_span!(span pub const FOO2_PM: u32 = 0;);", "previous_filename": "tests/ui/missing-doc.rs"}, {"sha": "6c8e66f464377c9f1fd0f36415b1a35926f558f7", "filename": "tests/ui/missing_doc.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,43 +1,43 @@\n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:10:1\n+  --> $DIR/missing_doc.rs:15:1\n    |\n LL | type Typedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a type alias\n-  --> $DIR/missing-doc.rs:11:1\n+  --> $DIR/missing_doc.rs:16:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:13:1\n+  --> $DIR/missing_doc.rs:18:1\n    |\n LL | mod module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:14:1\n+  --> $DIR/missing_doc.rs:19:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:18:1\n+  --> $DIR/missing_doc.rs:23:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:19:1\n+  --> $DIR/missing_doc.rs:24:1\n    |\n LL | fn foo3() {}\n    | ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:33:1\n+  --> $DIR/missing_doc.rs:38:1\n    |\n LL | / enum Baz {\n LL | |     BazA { a: isize, b: isize },\n@@ -46,75 +46,75 @@ LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:34:5\n+  --> $DIR/missing_doc.rs:39:5\n    |\n LL |     BazA { a: isize, b: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:12\n+  --> $DIR/missing_doc.rs:39:12\n    |\n LL |     BazA { a: isize, b: isize },\n    |            ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:34:22\n+  --> $DIR/missing_doc.rs:39:22\n    |\n LL |     BazA { a: isize, b: isize },\n    |                      ^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:35:5\n+  --> $DIR/missing_doc.rs:40:5\n    |\n LL |     BarB,\n    |     ^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/missing-doc.rs:38:1\n+  --> $DIR/missing_doc.rs:43:1\n    |\n LL | / pub enum PubBaz {\n LL | |     PubBazA { a: isize },\n LL | | }\n    | |_^\n \n error: missing documentation for a variant\n-  --> $DIR/missing-doc.rs:39:5\n+  --> $DIR/missing_doc.rs:44:5\n    |\n LL |     PubBazA { a: isize },\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc.rs:39:15\n+  --> $DIR/missing_doc.rs:44:15\n    |\n LL |     PubBazA { a: isize },\n    |               ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:59:1\n+  --> $DIR/missing_doc.rs:64:1\n    |\n LL | const FOO: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/missing-doc.rs:66:1\n+  --> $DIR/missing_doc.rs:71:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:68:1\n+  --> $DIR/missing_doc.rs:73:1\n    |\n LL | static BAR: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/missing-doc.rs:75:1\n+  --> $DIR/missing_doc.rs:80:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/missing-doc.rs:77:1\n+  --> $DIR/missing_doc.rs:82:1\n    |\n LL | / mod internal_impl {\n LL | |     /// dox\n@@ -126,31 +126,31 @@ LL | | }\n    | |_^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:80:5\n+  --> $DIR/missing_doc.rs:85:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:81:5\n+  --> $DIR/missing_doc.rs:86:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:82:5\n+  --> $DIR/missing_doc.rs:87:5\n    |\n LL |     fn undocumented3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:87:9\n+  --> $DIR/missing_doc.rs:92:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/missing-doc.rs:88:9\n+  --> $DIR/missing_doc.rs:93:9\n    |\n LL |         fn also_undocumented2() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/missing-doc.stderr"}, {"sha": "e00c7fbfed15745932a1929049ef96f943ae5fd2", "filename": "tests/ui/missing_doc_crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "previous_filename": "tests/ui/missing-doc-crate.rs"}, {"sha": "51fd57df8df1da962322d50dc6edcf85726e9661", "filename": "tests/ui/missing_doc_crate_missing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate_missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate_missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate_missing.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "previous_filename": "tests/ui/missing-doc-crate-missing.rs"}, {"sha": "19516bf5fab0e176caf6c1dd4d42bd6519d9a7f9", "filename": "tests/ui/missing_doc_crate_missing.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate_missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_crate_missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_crate_missing.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: missing documentation for the crate\n-  --> $DIR/missing-doc-crate-missing.rs:1:1\n+  --> $DIR/missing_doc_crate_missing.rs:1:1\n    |\n LL | / #![warn(clippy::missing_docs_in_private_items)]\n LL | |", "previous_filename": "tests/ui/missing-doc-crate-missing.stderr"}, {"sha": "0396d1193ff5c2b1e3d330e9d8d5b2b1c5cedc7b", "filename": "tests/ui/missing_doc_impl.rs", "status": "renamed", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,10 +1,15 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::missing_docs_in_private_items)]\n #![allow(dead_code)]\n #![feature(associated_type_defaults)]\n \n //! Some garbage docs for the crate here\n #![doc = \"More garbage\"]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n struct Foo {\n     a: isize,\n     b: isize,\n@@ -90,3 +95,13 @@ impl F for Foo {\n }\n \n fn main() {}\n+\n+// don't lint proc macro output\n+with_span!(span\n+    pub struct FooPm;\n+    impl FooPm {\n+        pub fn foo() {}\n+        pub const fn bar() {}\n+        pub const X: u32 = 0;\n+    }\n+);", "previous_filename": "tests/ui/missing-doc-impl.rs"}, {"sha": "f22fa19dbcabc912ed543f1c26228442e7229974", "filename": "tests/ui/missing_doc_impl.stderr", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmissing_doc_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_doc_impl.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: missing documentation for a struct\n-  --> $DIR/missing-doc-impl.rs:8:1\n+  --> $DIR/missing_doc_impl.rs:13:1\n    |\n LL | / struct Foo {\n LL | |     a: isize,\n@@ -10,19 +10,19 @@ LL | | }\n    = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:9:5\n+  --> $DIR/missing_doc_impl.rs:14:5\n    |\n LL |     a: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:10:5\n+  --> $DIR/missing_doc_impl.rs:15:5\n    |\n LL |     b: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a struct\n-  --> $DIR/missing-doc-impl.rs:13:1\n+  --> $DIR/missing_doc_impl.rs:18:1\n    |\n LL | / pub struct PubFoo {\n LL | |     pub a: isize,\n@@ -31,19 +31,19 @@ LL | | }\n    | |_^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:14:5\n+  --> $DIR/missing_doc_impl.rs:19:5\n    |\n LL |     pub a: isize,\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/missing-doc-impl.rs:15:5\n+  --> $DIR/missing_doc_impl.rs:20:5\n    |\n LL |     b: isize,\n    |     ^^^^^^^^\n \n error: missing documentation for a trait\n-  --> $DIR/missing-doc-impl.rs:38:1\n+  --> $DIR/missing_doc_impl.rs:43:1\n    |\n LL | / pub trait C {\n LL | |     fn foo(&self);\n@@ -52,51 +52,51 @@ LL | | }\n    | |_^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:39:5\n+  --> $DIR/missing_doc_impl.rs:44:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:40:5\n+  --> $DIR/missing_doc_impl.rs:45:5\n    |\n LL |     fn foo_with_impl(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/missing-doc-impl.rs:50:5\n+  --> $DIR/missing_doc_impl.rs:55:5\n    |\n LL |     type AssociatedType;\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/missing-doc-impl.rs:51:5\n+  --> $DIR/missing_doc_impl.rs:56:5\n    |\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:62:5\n+  --> $DIR/missing_doc_impl.rs:67:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Foo { a: 0, b: 0 }\n LL | |     }\n    | |_____^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:65:5\n+  --> $DIR/missing_doc_impl.rs:70:5\n    |\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:69:5\n+  --> $DIR/missing_doc_impl.rs:74:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:73:5\n+  --> $DIR/missing_doc_impl.rs:78:5\n    |\n LL | /     fn foo2() -> u32 {\n LL | |         1", "previous_filename": "tests/ui/missing-doc-impl.stderr"}, {"sha": "becb9562a8497212ebcadc13412f904ab39b36a9", "filename": "tests/ui/mistyped_literal_suffix.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(\n     dead_code,\n@@ -9,6 +10,9 @@\n     clippy::unusual_byte_groupings\n )]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n fn main() {\n     let fail14 = 2_i32;\n     let fail15 = 4_i64;\n@@ -40,4 +44,6 @@ fn main() {\n     let ok38 = 124_64.0;\n \n     let _ = 1.123_45E1_f32;\n+\n+    let _ = with_span!(1 2_u32);\n }"}, {"sha": "ee841bcd7e4e995ba5b350d81df461ae2db6aaec", "filename": "tests/ui/mistyped_literal_suffix.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n \n #![allow(\n     dead_code,\n@@ -9,6 +10,9 @@\n     clippy::unusual_byte_groupings\n )]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n fn main() {\n     let fail14 = 2_32;\n     let fail15 = 4_64;\n@@ -40,4 +44,6 @@ fn main() {\n     let ok38 = 124_64.0;\n \n     let _ = 1.12345E1_32;\n+\n+    let _ = with_span!(1 2_u32);\n }"}, {"sha": "ef8e6a33d28f59a8c65009cdd19b573aa153c6ec", "filename": "tests/ui/mistyped_literal_suffix.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmistyped_literal_suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,97 +1,97 @@\n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:13:18\n+  --> $DIR/mistyped_literal_suffix.rs:17:18\n    |\n LL |     let fail14 = 2_32;\n    |                  ^^^^ help: did you mean to write: `2_i32`\n    |\n    = note: `#[deny(clippy::mistyped_literal_suffixes)]` on by default\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:14:18\n+  --> $DIR/mistyped_literal_suffix.rs:18:18\n    |\n LL |     let fail15 = 4_64;\n    |                  ^^^^ help: did you mean to write: `4_i64`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:15:18\n+  --> $DIR/mistyped_literal_suffix.rs:19:18\n    |\n LL |     let fail16 = 7_8; //\n    |                  ^^^ help: did you mean to write: `7_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:16:18\n+  --> $DIR/mistyped_literal_suffix.rs:20:18\n    |\n LL |     let fail17 = 23_16; //\n    |                  ^^^^^ help: did you mean to write: `23_i16`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:19:18\n+  --> $DIR/mistyped_literal_suffix.rs:23:18\n    |\n LL |     let fail20 = 2__8; //\n    |                  ^^^^ help: did you mean to write: `2_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:20:18\n+  --> $DIR/mistyped_literal_suffix.rs:24:18\n    |\n LL |     let fail21 = 4___16; //\n    |                  ^^^^^^ help: did you mean to write: `4_i16`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:23:18\n+  --> $DIR/mistyped_literal_suffix.rs:27:18\n    |\n LL |     let fail25 = 1E2_32;\n    |                  ^^^^^^ help: did you mean to write: `1E2_f32`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:24:18\n+  --> $DIR/mistyped_literal_suffix.rs:28:18\n    |\n LL |     let fail26 = 43E7_64;\n    |                  ^^^^^^^ help: did you mean to write: `43E7_f64`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:25:18\n+  --> $DIR/mistyped_literal_suffix.rs:29:18\n    |\n LL |     let fail27 = 243E17_32;\n    |                  ^^^^^^^^^ help: did you mean to write: `243E17_f32`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:26:18\n+  --> $DIR/mistyped_literal_suffix.rs:30:18\n    |\n LL |     let fail28 = 241251235E723_64;\n    |                  ^^^^^^^^^^^^^^^^ help: did you mean to write: `241_251_235E723_f64`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:30:18\n+  --> $DIR/mistyped_literal_suffix.rs:34:18\n    |\n LL |     let fail30 = 127_8; // should be i8\n    |                  ^^^^^ help: did you mean to write: `127_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:31:18\n+  --> $DIR/mistyped_literal_suffix.rs:35:18\n    |\n LL |     let fail31 = 240_8; // should be u8\n    |                  ^^^^^ help: did you mean to write: `240_u8`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:33:18\n+  --> $DIR/mistyped_literal_suffix.rs:37:18\n    |\n LL |     let fail33 = 0x1234_16;\n    |                  ^^^^^^^^^ help: did you mean to write: `0x1234_i16`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:34:18\n+  --> $DIR/mistyped_literal_suffix.rs:38:18\n    |\n LL |     let fail34 = 0xABCD_16;\n    |                  ^^^^^^^^^ help: did you mean to write: `0xABCD_u16`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:36:18\n+  --> $DIR/mistyped_literal_suffix.rs:40:18\n    |\n LL |     let fail36 = 0xFFFF_FFFF_FFFF_FFFF_64; // u64\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean to write: `0xFFFF_FFFF_FFFF_FFFF_u64`\n \n error: mistyped literal suffix\n-  --> $DIR/mistyped_literal_suffix.rs:42:13\n+  --> $DIR/mistyped_literal_suffix.rs:46:13\n    |\n LL |     let _ = 1.12345E1_32;\n    |             ^^^^^^^^^^^^ help: did you mean to write: `1.123_45E1_f32`"}, {"sha": "6efc7657ec0c92349291ee1f8b250ab3d7d8cd01", "filename": "tests/ui/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmixed_read_write_in_expression.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -4,7 +4,7 @@\n     unused_variables,\n     clippy::no_effect,\n     dead_code,\n-    clippy::blacklisted_name\n+    clippy::disallowed_names\n )]\n fn main() {\n     let mut x = 0;"}, {"sha": "07226b0a1a83b272a250e20429b555b30f04bacd", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::blacklisted_name)]\n+#![allow(unused_variables, clippy::disallowed_names)]\n #![warn(clippy::op_ref)]\n use std::collections::HashSet;\n use std::ops::{BitAnd, Mul};"}, {"sha": "04a30a83250e1108236c933392c6d5433f2fc9a7", "filename": "tests/ui/overly_complex_bool_expr.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Foverly_complex_bool_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Foverly_complex_bool_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverly_complex_bool_expr.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,6 +1,6 @@\n #![feature(lint_reasons)]\n #![allow(unused, clippy::diverging_sub_expression)]\n-#![warn(clippy::logic_bug)]\n+#![warn(clippy::overly_complex_bool_expr)]\n \n fn main() {\n     let a: bool = unimplemented!();\n@@ -29,6 +29,6 @@ fn equality_stuff() {\n fn check_expect() {\n     let a: i32 = unimplemented!();\n     let b: i32 = unimplemented!();\n-    #[expect(clippy::logic_bug)]\n+    #[expect(clippy::overly_complex_bool_expr)]\n     let _ = a < b && a >= b;\n }", "previous_filename": "tests/ui/logic_bug.rs"}, {"sha": "158cae8b8f373a8f6d344ce0be44a52563ef0591", "filename": "tests/ui/overly_complex_bool_expr.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Foverly_complex_bool_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Foverly_complex_bool_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverly_complex_bool_expr.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,60 +1,60 @@\n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:11:13\n+  --> $DIR/overly_complex_bool_expr.rs:11:13\n    |\n LL |     let _ = a && b || a;\n    |             ^^^^^^^^^^^ help: it would look like the following: `a`\n    |\n-   = note: `-D clippy::logic-bug` implied by `-D warnings`\n+   = note: `-D clippy::overly-complex-bool-expr` implied by `-D warnings`\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:11:18\n+  --> $DIR/overly_complex_bool_expr.rs:11:18\n    |\n LL |     let _ = a && b || a;\n    |                  ^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:13:13\n+  --> $DIR/overly_complex_bool_expr.rs:13:13\n    |\n LL |     let _ = false && a;\n    |             ^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:13:22\n+  --> $DIR/overly_complex_bool_expr.rs:13:22\n    |\n LL |     let _ = false && a;\n    |                      ^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:23:13\n+  --> $DIR/overly_complex_bool_expr.rs:23:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:23:13\n+  --> $DIR/overly_complex_bool_expr.rs:23:13\n    |\n LL |     let _ = a == b && a != b;\n    |             ^^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:24:13\n+  --> $DIR/overly_complex_bool_expr.rs:24:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:24:13\n+  --> $DIR/overly_complex_bool_expr.rs:24:13\n    |\n LL |     let _ = a < b && a >= b;\n    |             ^^^^^\n \n error: this boolean expression contains a logic bug\n-  --> $DIR/logic_bug.rs:25:13\n+  --> $DIR/overly_complex_bool_expr.rs:25:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^^^^^^^^^^^ help: it would look like the following: `false`\n    |\n help: this expression can be optimized out by applying boolean operations to the outer expression\n-  --> $DIR/logic_bug.rs:25:13\n+  --> $DIR/overly_complex_bool_expr.rs:25:13\n    |\n LL |     let _ = a > b && a <= b;\n    |             ^^^^^", "previous_filename": "tests/ui/logic_bug.stderr"}, {"sha": "f3e4c58d6949223e0fe16b7e32c5bac5d22a34de", "filename": "tests/ui/partialeq_to_none.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+#![warn(clippy::partialeq_to_none)]\n+\n+struct Foobar;\n+\n+impl PartialEq<Option<()>> for Foobar {\n+    fn eq(&self, _: &Option<()>) -> bool {\n+        false\n+    }\n+}\n+\n+#[allow(dead_code)]\n+fn foo(f: Option<u32>) -> &'static str {\n+    if f.is_some() { \"yay\" } else { \"nay\" }\n+}\n+\n+fn foobar() -> Option<()> {\n+    None\n+}\n+\n+fn bar() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn optref() -> &'static &'static Option<()> {\n+    &&None\n+}\n+\n+fn main() {\n+    let x = Some(0);\n+\n+    let _ = x.is_none();\n+    let _ = x.is_some();\n+    let _ = x.is_none();\n+    let _ = x.is_some();\n+\n+    if foobar().is_none() {}\n+\n+    if bar().ok().is_some() {}\n+\n+    let _ = Some(1 + 2).is_some();\n+\n+    let _ = { Some(0) }.is_none();\n+\n+    let _ = {\n+        /*\n+          This comment runs long\n+        */\n+        Some(1)\n+    }.is_some();\n+\n+    // Should not trigger, as `Foobar` is not an `Option` and has no `is_none`\n+    let _ = Foobar == None;\n+\n+    let _ = optref().is_none();\n+    let _ = optref().is_some();\n+    let _ = optref().is_none();\n+    let _ = optref().is_some();\n+\n+    let x = Box::new(Option::<()>::None);\n+    let _ = (*x).is_some();\n+}"}, {"sha": "767b2a38bcc17ddba17267c2faa09ad10bef6cc1", "filename": "tests/ui/partialeq_to_none.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+#![warn(clippy::partialeq_to_none)]\n+\n+struct Foobar;\n+\n+impl PartialEq<Option<()>> for Foobar {\n+    fn eq(&self, _: &Option<()>) -> bool {\n+        false\n+    }\n+}\n+\n+#[allow(dead_code)]\n+fn foo(f: Option<u32>) -> &'static str {\n+    if f != None { \"yay\" } else { \"nay\" }\n+}\n+\n+fn foobar() -> Option<()> {\n+    None\n+}\n+\n+fn bar() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+fn optref() -> &'static &'static Option<()> {\n+    &&None\n+}\n+\n+fn main() {\n+    let x = Some(0);\n+\n+    let _ = x == None;\n+    let _ = x != None;\n+    let _ = None == x;\n+    let _ = None != x;\n+\n+    if foobar() == None {}\n+\n+    if bar().ok() != None {}\n+\n+    let _ = Some(1 + 2) != None;\n+\n+    let _ = { Some(0) } == None;\n+\n+    let _ = {\n+        /*\n+          This comment runs long\n+        */\n+        Some(1)\n+    } != None;\n+\n+    // Should not trigger, as `Foobar` is not an `Option` and has no `is_none`\n+    let _ = Foobar == None;\n+\n+    let _ = optref() == &&None;\n+    let _ = &&None != optref();\n+    let _ = **optref() == None;\n+    let _ = &None != *optref();\n+\n+    let x = Box::new(Option::<()>::None);\n+    let _ = None != *x;\n+}"}, {"sha": "de15a9f7baaf030b02b5d4ab7a33a2e960134082", "filename": "tests/ui/partialeq_to_none.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fpartialeq_to_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,110 @@\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:14:8\n+   |\n+LL |     if f != None { \"yay\" } else { \"nay\" }\n+   |        ^^^^^^^^^ help: use `Option::is_some()` instead: `f.is_some()`\n+   |\n+   = note: `-D clippy::partialeq-to-none` implied by `-D warnings`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:32:13\n+   |\n+LL |     let _ = x == None;\n+   |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:33:13\n+   |\n+LL |     let _ = x != None;\n+   |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:34:13\n+   |\n+LL |     let _ = None == x;\n+   |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:35:13\n+   |\n+LL |     let _ = None != x;\n+   |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:37:8\n+   |\n+LL |     if foobar() == None {}\n+   |        ^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `foobar().is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:39:8\n+   |\n+LL |     if bar().ok() != None {}\n+   |        ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `bar().ok().is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:41:13\n+   |\n+LL |     let _ = Some(1 + 2) != None;\n+   |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `Some(1 + 2).is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:43:13\n+   |\n+LL |     let _ = { Some(0) } == None;\n+   |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `{ Some(0) }.is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:45:13\n+   |\n+LL |       let _ = {\n+   |  _____________^\n+LL | |         /*\n+LL | |           This comment runs long\n+LL | |         */\n+LL | |         Some(1)\n+LL | |     } != None;\n+   | |_____________^\n+   |\n+help: use `Option::is_some()` instead\n+   |\n+LL ~     let _ = {\n+LL +         /*\n+LL +           This comment runs long\n+LL +         */\n+LL +         Some(1)\n+LL ~     }.is_some();\n+   |\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:55:13\n+   |\n+LL |     let _ = optref() == &&None;\n+   |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:56:13\n+   |\n+LL |     let _ = &&None != optref();\n+   |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:57:13\n+   |\n+LL |     let _ = **optref() == None;\n+   |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:58:13\n+   |\n+LL |     let _ = &None != *optref();\n+   |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n+\n+error: binary comparison to literal `Option::None`\n+  --> $DIR/partialeq_to_none.rs:61:13\n+   |\n+LL |     let _ = None != *x;\n+   |             ^^^^^^^^^^ help: use `Option::is_some()` instead: `(*x).is_some()`\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "432972bbc31757e75681163fff8b4d9dd9774b1a", "filename": "tests/ui/rc_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::rc_mutex)]\n-#![allow(unused, clippy::blacklisted_name)]\n+#![allow(unused, clippy::disallowed_names)]\n \n use std::rc::Rc;\n use std::sync::Mutex;"}, {"sha": "574d34aed2d87d1260b8b8558c7d36e28785c346", "filename": "tests/ui/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,21 +1,13 @@\n #![warn(clippy::all)]\n-#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n-#![allow(unused_imports)]\n+#![allow(clippy::boxed_local, clippy::disallowed_names)]\n \n pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,\n }\n \n-pub enum MyEnum {\n-    One,\n-    Two,\n-}\n-\n mod outer_box {\n-    use crate::MyEnum;\n     use crate::MyStruct;\n     use crate::SubT;\n     use std::boxed::Box;\n@@ -36,7 +28,6 @@ mod outer_box {\n }\n \n mod outer_rc {\n-    use crate::MyEnum;\n     use crate::MyStruct;\n     use crate::SubT;\n     use std::boxed::Box;\n@@ -57,7 +48,6 @@ mod outer_rc {\n }\n \n mod outer_arc {\n-    use crate::MyEnum;\n     use crate::MyStruct;\n     use crate::SubT;\n     use std::boxed::Box;"}, {"sha": "54d4d88dba81933ae1962c267a88ffa35cfae47b", "filename": "tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: usage of `Box<Rc<T>>`\n-  --> $DIR/redundant_allocation.rs:25:30\n+  --> $DIR/redundant_allocation.rs:17:30\n    |\n LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}\n    |                              ^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     pub fn box_test6<T>(foo: Box<Rc<T>>) {}\n    = help: consider using just `Box<T>` or `Rc<T>`\n \n error: usage of `Box<Arc<T>>`\n-  --> $DIR/redundant_allocation.rs:27:30\n+  --> $DIR/redundant_allocation.rs:19:30\n    |\n LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}\n    |                              ^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     pub fn box_test7<T>(foo: Box<Arc<T>>) {}\n    = help: consider using just `Box<T>` or `Arc<T>`\n \n error: usage of `Box<Rc<SubT<usize>>>`\n-  --> $DIR/redundant_allocation.rs:29:27\n+  --> $DIR/redundant_allocation.rs:21:27\n    |\n LL |     pub fn box_test8() -> Box<Rc<SubT<usize>>> {\n    |                           ^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     pub fn box_test8() -> Box<Rc<SubT<usize>>> {\n    = help: consider using just `Box<SubT<usize>>` or `Rc<SubT<usize>>`\n \n error: usage of `Box<Arc<T>>`\n-  --> $DIR/redundant_allocation.rs:33:30\n+  --> $DIR/redundant_allocation.rs:25:30\n    |\n LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n    |                              ^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n    = help: consider using just `Box<T>` or `Arc<T>`\n \n error: usage of `Box<Arc<SubT<T>>>`\n-  --> $DIR/redundant_allocation.rs:33:46\n+  --> $DIR/redundant_allocation.rs:25:46\n    |\n LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n    |                                              ^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     pub fn box_test9<T>(foo: Box<Arc<T>>) -> Box<Arc<SubT<T>>> {\n    = help: consider using just `Box<SubT<T>>` or `Arc<SubT<T>>`\n \n error: usage of `Rc<Box<bool>>`\n-  --> $DIR/redundant_allocation.rs:46:24\n+  --> $DIR/redundant_allocation.rs:37:24\n    |\n LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}\n    |                        ^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     pub fn rc_test5(a: Rc<Box<bool>>) {}\n    = help: consider using just `Rc<bool>` or `Box<bool>`\n \n error: usage of `Rc<Arc<bool>>`\n-  --> $DIR/redundant_allocation.rs:48:24\n+  --> $DIR/redundant_allocation.rs:39:24\n    |\n LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}\n    |                        ^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     pub fn rc_test7(a: Rc<Arc<bool>>) {}\n    = help: consider using just `Rc<bool>` or `Arc<bool>`\n \n error: usage of `Rc<Box<SubT<usize>>>`\n-  --> $DIR/redundant_allocation.rs:50:26\n+  --> $DIR/redundant_allocation.rs:41:26\n    |\n LL |     pub fn rc_test8() -> Rc<Box<SubT<usize>>> {\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     pub fn rc_test8() -> Rc<Box<SubT<usize>>> {\n    = help: consider using just `Rc<SubT<usize>>` or `Box<SubT<usize>>`\n \n error: usage of `Rc<Arc<T>>`\n-  --> $DIR/redundant_allocation.rs:54:29\n+  --> $DIR/redundant_allocation.rs:45:29\n    |\n LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n    |                             ^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n    = help: consider using just `Rc<T>` or `Arc<T>`\n \n error: usage of `Rc<Arc<SubT<T>>>`\n-  --> $DIR/redundant_allocation.rs:54:44\n+  --> $DIR/redundant_allocation.rs:45:44\n    |\n LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n    |                                            ^^^^^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub fn rc_test9<T>(foo: Rc<Arc<T>>) -> Rc<Arc<SubT<T>>> {\n    = help: consider using just `Rc<SubT<T>>` or `Arc<SubT<T>>`\n \n error: usage of `Arc<Box<bool>>`\n-  --> $DIR/redundant_allocation.rs:67:25\n+  --> $DIR/redundant_allocation.rs:57:25\n    |\n LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}\n    |                         ^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL |     pub fn arc_test5(a: Arc<Box<bool>>) {}\n    = help: consider using just `Arc<bool>` or `Box<bool>`\n \n error: usage of `Arc<Rc<bool>>`\n-  --> $DIR/redundant_allocation.rs:69:25\n+  --> $DIR/redundant_allocation.rs:59:25\n    |\n LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}\n    |                         ^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL |     pub fn arc_test6(a: Arc<Rc<bool>>) {}\n    = help: consider using just `Arc<bool>` or `Rc<bool>`\n \n error: usage of `Arc<Box<SubT<usize>>>`\n-  --> $DIR/redundant_allocation.rs:71:27\n+  --> $DIR/redundant_allocation.rs:61:27\n    |\n LL |     pub fn arc_test8() -> Arc<Box<SubT<usize>>> {\n    |                           ^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ LL |     pub fn arc_test8() -> Arc<Box<SubT<usize>>> {\n    = help: consider using just `Arc<SubT<usize>>` or `Box<SubT<usize>>`\n \n error: usage of `Arc<Rc<T>>`\n-  --> $DIR/redundant_allocation.rs:75:30\n+  --> $DIR/redundant_allocation.rs:65:30\n    |\n LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n    |                              ^^^^^^^^^^\n@@ -126,7 +126,7 @@ LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n    = help: consider using just `Arc<T>` or `Rc<T>`\n \n error: usage of `Arc<Rc<SubT<T>>>`\n-  --> $DIR/redundant_allocation.rs:75:45\n+  --> $DIR/redundant_allocation.rs:65:45\n    |\n LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n    |                                             ^^^^^^^^^^^^^^^^\n@@ -135,7 +135,7 @@ LL |     pub fn arc_test9<T>(foo: Arc<Rc<T>>) -> Arc<Rc<SubT<T>>> {\n    = help: consider using just `Arc<SubT<T>>` or `Rc<SubT<T>>`\n \n error: usage of `Rc<Box<Box<dyn T>>>`\n-  --> $DIR/redundant_allocation.rs:97:27\n+  --> $DIR/redundant_allocation.rs:87:27\n    |\n LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n    |                           ^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n    = help: consider using just `Rc<Box<dyn T>>` or `Box<Box<dyn T>>`\n \n error: usage of `Rc<Box<Box<str>>>`\n-  --> $DIR/redundant_allocation.rs:129:31\n+  --> $DIR/redundant_allocation.rs:119:31\n    |\n LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n    |                               ^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n    = help: consider using just `Rc<Box<str>>` or `Box<Box<str>>`\n \n error: usage of `Rc<Box<Box<[usize]>>>`\n-  --> $DIR/redundant_allocation.rs:130:33\n+  --> $DIR/redundant_allocation.rs:120:33\n    |\n LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n    |                                 ^^^^^^^^^^^^^^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n    = help: consider using just `Rc<Box<[usize]>>` or `Box<Box<[usize]>>`\n \n error: usage of `Rc<Box<Box<Path>>>`\n-  --> $DIR/redundant_allocation.rs:131:32\n+  --> $DIR/redundant_allocation.rs:121:32\n    |\n LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n    |                                ^^^^^^^^^^^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n    = help: consider using just `Rc<Box<Path>>` or `Box<Box<Path>>`\n \n error: usage of `Rc<Box<Box<DynSized>>>`\n-  --> $DIR/redundant_allocation.rs:132:34\n+  --> $DIR/redundant_allocation.rs:122:34\n    |\n LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6db02718c70bbe8eb54e349f10394d6a816b2f53", "filename": "tests/ui/redundant_allocation_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![warn(clippy::all)]\n #![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+#![allow(clippy::disallowed_names, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n pub struct MyStruct;"}, {"sha": "c15806f30c049c4c0715dfc897759c141edb3477", "filename": "tests/ui/redundant_allocation_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_allocation_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![warn(clippy::all)]\n #![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+#![allow(clippy::disallowed_names, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n pub struct MyStruct;"}, {"sha": "7cd687c95a003f14c770fed009c8c4062359156b", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,8 +1,28 @@\n // run-rustfix\n \n+#![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n #![allow(unused)]\n \n+async fn something() -> u32 {\n+    21\n+}\n+\n+async fn something_else() -> u32 {\n+    2\n+}\n+\n fn main() {\n     let a = 42;\n+    let b = async {\n+        let x = something().await;\n+        let y = something_else().await;\n+        x * y\n+    };\n+    let c = {\n+        let x = 21;\n+        let y = 2;\n+        x * y\n+    };\n+    let d = async { something().await };\n }"}, {"sha": "37e4d2238641576fbff1184315d1264d2741f205", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,8 +1,28 @@\n // run-rustfix\n \n+#![feature(async_closure)]\n #![warn(clippy::redundant_closure_call)]\n #![allow(unused)]\n \n+async fn something() -> u32 {\n+    21\n+}\n+\n+async fn something_else() -> u32 {\n+    2\n+}\n+\n fn main() {\n     let a = (|| 42)();\n+    let b = (async || {\n+        let x = something().await;\n+        let y = something_else().await;\n+        x * y\n+    })();\n+    let c = (|| {\n+        let x = 21;\n+        let y = 2;\n+        x * y\n+    })();\n+    let d = (async || something().await)();\n }"}, {"sha": "56a8e57c0c362097b74fb1b000b1438a1c62b097", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,10 +1,56 @@\n error: try not to call a closure in the expression where it is declared\n-  --> $DIR/redundant_closure_call_fixable.rs:7:13\n+  --> $DIR/redundant_closure_call_fixable.rs:16:13\n    |\n LL |     let a = (|| 42)();\n    |             ^^^^^^^^^ help: try doing something like: `42`\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:17:13\n+   |\n+LL |       let b = (async || {\n+   |  _____________^\n+LL | |         let x = something().await;\n+LL | |         let y = something_else().await;\n+LL | |         x * y\n+LL | |     })();\n+   | |________^\n+   |\n+help: try doing something like\n+   |\n+LL ~     let b = async {\n+LL +         let x = something().await;\n+LL +         let y = something_else().await;\n+LL +         x * y\n+LL ~     };\n+   |\n+\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:22:13\n+   |\n+LL |       let c = (|| {\n+   |  _____________^\n+LL | |         let x = 21;\n+LL | |         let y = 2;\n+LL | |         x * y\n+LL | |     })();\n+   | |________^\n+   |\n+help: try doing something like\n+   |\n+LL ~     let c = {\n+LL +         let x = 21;\n+LL +         let y = 2;\n+LL +         x * y\n+LL ~     };\n+   |\n+\n+error: try not to call a closure in the expression where it is declared\n+  --> $DIR/redundant_closure_call_fixable.rs:27:13\n+   |\n+LL |     let d = (async || something().await)();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try doing something like: `async { something().await }`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "9cbad2269a099c5b71756222744dabb78f9115a6", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -4,6 +4,7 @@\n \n // run-rustfix\n \n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::blocks_in_if_conditions)]\n #![allow(clippy::box_collection)]\n #![allow(clippy::redundant_static_lifetimes)]\n@@ -14,6 +15,7 @@\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n+#![allow(clippy::overly_complex_bool_expr)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::expect_used)]\n@@ -33,6 +35,7 @@\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n+#![warn(clippy::disallowed_names)]\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::blocks_in_if_conditions)]\n #![warn(clippy::box_collection)]\n@@ -45,6 +48,7 @@\n #![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]\n #![warn(clippy::match_result_ok)]\n+#![warn(clippy::overly_complex_bool_expr)]\n #![warn(clippy::new_without_default)]\n #![warn(clippy::bind_instead_of_map)]\n #![warn(clippy::expect_used)]"}, {"sha": "9153c0dab0290aa213307bdc47827e1f5af4ca1e", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -4,6 +4,7 @@\n \n // run-rustfix\n \n+#![allow(clippy::disallowed_names)]\n #![allow(clippy::blocks_in_if_conditions)]\n #![allow(clippy::box_collection)]\n #![allow(clippy::redundant_static_lifetimes)]\n@@ -14,6 +15,7 @@\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n+#![allow(clippy::overly_complex_bool_expr)]\n #![allow(clippy::new_without_default)]\n #![allow(clippy::bind_instead_of_map)]\n #![allow(clippy::expect_used)]\n@@ -33,6 +35,7 @@\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n+#![warn(clippy::blacklisted_name)]\n #![warn(clippy::block_in_if_condition_expr)]\n #![warn(clippy::block_in_if_condition_stmt)]\n #![warn(clippy::box_vec)]\n@@ -45,6 +48,7 @@\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::identity_conversion)]\n #![warn(clippy::if_let_some_result)]\n+#![warn(clippy::logic_bug)]\n #![warn(clippy::new_without_default_derive)]\n #![warn(clippy::option_and_then_some)]\n #![warn(clippy::option_expect_used)]"}, {"sha": "9c03ea914bb65fef6c94b919523a36ab24d9e833", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 50, "deletions": 38, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,214 +1,226 @@\n+error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n+  --> $DIR/rename.rs:38:9\n+   |\n+LL | #![warn(clippy::blacklisted_name)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n+   |\n+   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n+\n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:36:9\n+  --> $DIR/rename.rs:39:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n-   |\n-   = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:37:9\n+  --> $DIR/rename.rs:40:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:38:9\n+  --> $DIR/rename.rs:41:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:39:9\n+  --> $DIR/rename.rs:42:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:40:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:41:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n+error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n+  --> $DIR/rename.rs:51:9\n+   |\n+LL | #![warn(clippy::logic_bug)]\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n+\n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 37 previous errors\n "}, {"sha": "a48829caac019249bab85a83552340e117574e82", "filename": "tests/ui/same_functions_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fsame_functions_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fsame_functions_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -48,9 +48,9 @@ fn ifs_same_cond_fn() {\n     }\n \n     let mut v = vec![1];\n-    if v.pop() == None {\n+    if v.pop().is_none() {\n         //~ ERROR ifs same condition\n-    } else if v.pop() == None {\n+    } else if v.pop().is_none() {\n     }\n \n     if v.len() == 42 {"}, {"sha": "cd438b830401d746587e10d51b646be076b6de58", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -50,14 +50,14 @@ LL |     if obj.method_arg(a) {\n error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:53:15\n    |\n-LL |     } else if v.pop() == None {\n-   |               ^^^^^^^^^^^^^^^\n+LL |     } else if v.pop().is_none() {\n+   |               ^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n   --> $DIR/same_functions_in_if_condition.rs:51:8\n    |\n-LL |     if v.pop() == None {\n-   |        ^^^^^^^^^^^^^^^\n+LL |     if v.pop().is_none() {\n+   |        ^^^^^^^^^^^^^^^^^\n \n error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:58:15"}, {"sha": "a551c19d98bcddda9bfae895033c143aecde5a50", "filename": "tests/ui/skip_while_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fskip_while_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fskip_while_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fskip_while_next.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,7 +1,7 @@\n // aux-build:option_helpers.rs\n \n #![warn(clippy::skip_while_next)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::disallowed_names)]\n \n extern crate option_helpers;\n use option_helpers::IteratorFalsePositives;"}, {"sha": "24b229235d33a476f5d7ba5e45d7112a188658be", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![allow(\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::no_effect,\n     clippy::redundant_clone,\n     redundant_semicolons,"}, {"sha": "a318c27919c8a4fbdb972f59d48496c695f9e590", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![allow(\n-    clippy::blacklisted_name,\n+    clippy::disallowed_names,\n     clippy::no_effect,\n     clippy::redundant_clone,\n     redundant_semicolons,"}, {"sha": "c0c64ebcabfbb66f979f9d6b4a81d0ee1189dd3b", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n #![deny(clippy::trivially_copy_pass_by_ref)]\n-#![allow(clippy::blacklisted_name, clippy::redundant_field_names)]\n+#![allow(clippy::disallowed_names, clippy::redundant_field_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u32);"}, {"sha": "7bf3adc07ac5645dcecf0abbc88a5743cf416103", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,3 +1,5 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::unit_arg)]\n #![allow(\n     clippy::no_effect,\n@@ -8,9 +10,13 @@\n     clippy::or_fun_call,\n     clippy::needless_question_mark,\n     clippy::self_named_constructors,\n-    clippy::let_unit_value\n+    clippy::let_unit_value,\n+    clippy::never_loop\n )]\n \n+extern crate proc_macro_with_span;\n+\n+use proc_macro_with_span::with_span;\n use std::fmt::Debug;\n \n fn foo<T: Debug>(t: T) {\n@@ -127,6 +133,10 @@ fn returning_expr() -> Option<()> {\n \n fn taking_multiple_units(a: (), b: ()) {}\n \n+fn proc_macro() {\n+    with_span!(span taking_multiple_units(unsafe { (); }, 'x: loop { break 'x (); }));\n+}\n+\n fn main() {\n     bad();\n     ok();"}, {"sha": "1de9d44bb0d6ea80251502616e5843d835d8264a", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:57:5\n+  --> $DIR/unit_arg.rs:63:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL ~     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:60:5\n+  --> $DIR/unit_arg.rs:66:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL ~     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:61:5\n+  --> $DIR/unit_arg.rs:67:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL ~     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:66:5\n+  --> $DIR/unit_arg.rs:72:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL ~     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:69:5\n+  --> $DIR/unit_arg.rs:75:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL ~     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:70:5\n+  --> $DIR/unit_arg.rs:76:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL ~     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:74:5\n+  --> $DIR/unit_arg.rs:80:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -146,7 +146,7 @@ LL ~     );\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:85:13\n+  --> $DIR/unit_arg.rs:91:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -160,7 +160,7 @@ LL ~     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:88:5\n+  --> $DIR/unit_arg.rs:94:5\n    |\n LL |     foo(foo(()));\n    |     ^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL ~     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:125:5\n+  --> $DIR/unit_arg.rs:131:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "0d4a0504a6e04142ea69b6940c01833b7d9f7bbb", "filename": "tests/ui/unwrap_expect_used.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funwrap_expect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funwrap_expect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,10 @@\n+#![warn(clippy::unwrap_used, clippy::expect_used)]\n+\n+fn main() {\n+    Some(3).unwrap();\n+    Some(3).expect(\"Hello world!\");\n+\n+    let a: Result<i32, i32> = Ok(3);\n+    a.unwrap();\n+    a.expect(\"Hello world!\");\n+}"}, {"sha": "f54bfd617c4ee5589b1c906e4ab066c99fb7981e", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -0,0 +1,36 @@\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:4:5\n+   |\n+LL |     Some(3).unwrap();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n+   = help: if this value is `None`, it will panic\n+\n+error: used `expect()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:5:5\n+   |\n+LL |     Some(3).expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n+   = help: if this value is `None`, it will panic\n+\n+error: used `unwrap()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:8:5\n+   |\n+LL |     a.unwrap();\n+   |     ^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: used `expect()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:9:5\n+   |\n+LL |     a.expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "322083511ac1808c61d2fed4df0ccc58bba97735", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac237dce5cc9155ecf5347401e5046e2abae4be/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=9ac237dce5cc9155ecf5347401e5046e2abae4be", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(rustc_private)]\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name, clippy::eq_op)]\n+#![allow(clippy::disallowed_names, clippy::eq_op)]\n #![warn(clippy::used_underscore_binding)]\n \n #[macro_use]"}]}