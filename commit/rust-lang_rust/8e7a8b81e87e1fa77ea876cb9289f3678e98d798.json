{"sha": "8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlN2E4YjgxZTg3ZTFmYTc3ZWE4NzZjYjkyODlmMzY3OGU5OGQ3OTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-29T12:10:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-29T12:10:28Z"}, "message": "Rollup merge of #56021 - RalfJung:track-features, r=oli-obk\n\navoid features_untracked\n\nThe docs say to not use `features_untracked` when we have a tcx.\n\n@oli-obk any particular reason why the untracked version is used all over const qualification?", "tree": {"sha": "3c52bf0f809814ec5b3012c8b76884809697e5e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c52bf0f809814ec5b3012c8b76884809697e5e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb/9c1CRBK7hj4Ov3rIwAAdHIIABVe8f40Sdvzl+F0R6pw7RQu\n626i5DX2FkuL9pkpCYqA7G0R/HC2GlDZ18ZS5idUmozyP00DC4CvM04sdpSStbtG\nJ4Xn667Gep0XNJ7VIli3aVEb7WCzmDAnGgtMD5T7DHGEsO3+KCNYtHnzVrFHdS0N\nGpFo9Ekuwc9YtKHAND2xl7FUY9Vna0ykRrqwDkdmWhrMp40keOkWo8akqXL5/m85\nPyIbEsoKqkPeMyFihF02/zjzJZSHoOo89Hc2XsaN92ri6xF3SHUsuMHW9MeHhXUh\nvGw7av53dlK+J8nN9VFzgnZR3mJSBhERvAUvCaMcR4rRM1S3DS+9XqhtRHLVJbQ=\n=1pWD\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c52bf0f809814ec5b3012c8b76884809697e5e4\nparent 8ca3cb90b35e8e153b4cd9b396f41ffa21b77085\nparent a8f9302047c97a07ecce3a85cdf222ff4da0d1e7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1543493428 +0100\ncommitter GitHub <noreply@github.com> 1543493428 +0100\n\nRollup merge of #56021 - RalfJung:track-features, r=oli-obk\n\navoid features_untracked\n\nThe docs say to not use `features_untracked` when we have a tcx.\n\n@oli-obk any particular reason why the untracked version is used all over const qualification?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "html_url": "https://github.com/rust-lang/rust/commit/8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7a8b81e87e1fa77ea876cb9289f3678e98d798/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca3cb90b35e8e153b4cd9b396f41ffa21b77085", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3cb90b35e8e153b4cd9b396f41ffa21b77085", "html_url": "https://github.com/rust-lang/rust/commit/8ca3cb90b35e8e153b4cd9b396f41ffa21b77085"}, {"sha": "a8f9302047c97a07ecce3a85cdf222ff4da0d1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f9302047c97a07ecce3a85cdf222ff4da0d1e7", "html_url": "https://github.com/rust-lang/rust/commit/a8f9302047c97a07ecce3a85cdf222ff4da0d1e7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "e32913b8905b7b2ac8f761aa875ed5da22064acd", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e7a8b81e87e1fa77ea876cb9289f3678e98d798/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7a8b81e87e1fa77ea876cb9289f3678e98d798/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             }\n         } else {\n             // users enabling the `const_fn` feature gate can do what they want\n-            !self.sess.features_untracked().const_fn\n+            !self.features().const_fn\n         }\n     }\n }"}, {"sha": "09fe7b14c7973896c0c274a0d8c0b6398ab6b05f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e7a8b81e87e1fa77ea876cb9289f3678e98d798/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7a8b81e87e1fa77ea876cb9289f3678e98d798/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8e7a8b81e87e1fa77ea876cb9289f3678e98d798", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if !self.tcx.sess.features_untracked().const_let {\n+                    if !self.tcx.features().const_let {\n                         // Check for unused values. This usually means\n                         // there are extra statements in the AST.\n                         for temp in mir.temps_iter() {\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Var if !self.tcx.sess.features_untracked().const_let => {\n+            LocalKind::Var if !self.tcx.features().const_let => {\n                 if self.mode != Mode::Fn {\n                     emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n                                     self.span, GateIssue::Language,\n@@ -558,7 +558,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 Mode::Fn => {},\n                                 _ => {\n                                     if let ty::RawPtr(_) = base_ty.sty {\n-                                        if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                        if !this.tcx.features().const_raw_ptr_deref {\n                                             emit_feature_err(\n                                                 &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n                                                 this.span, GateIssue::Language,\n@@ -581,7 +581,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                     match this.mode {\n                                         Mode::Fn => this.not_const(),\n                                         Mode::ConstFn => {\n-                                            if !this.tcx.sess.features_untracked().const_fn_union {\n+                                            if !this.tcx.features().const_fn_union {\n                                                 emit_feature_err(\n                                                     &this.tcx.sess.parse_sess, \"const_fn_union\",\n                                                     this.span, GateIssue::Language,\n@@ -807,7 +807,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         if let Mode::Fn = self.mode {\n                             // in normal functions, mark such casts as not promotable\n                             self.add(Qualif::NOT_CONST);\n-                        } else if !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n+                        } else if !self.tcx.features().const_raw_ptr_to_usize_cast {\n                             // in const fn and constants require the feature gate\n                             // FIXME: make it unsafe inside const fn and constants\n                             emit_feature_err(\n@@ -834,7 +834,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if let Mode::Fn = self.mode {\n                         // raw pointer operations are not allowed inside promoteds\n                         self.add(Qualif::NOT_CONST);\n-                    } else if !self.tcx.sess.features_untracked().const_compare_raw_pointers {\n+                    } else if !self.tcx.features().const_compare_raw_pointers {\n                         // require the feature gate inside constants and const fn\n                         // FIXME: make it unsafe to use these operations\n                         emit_feature_err(\n@@ -933,7 +933,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 if self.mode != Mode::Fn {\n                                     is_const_fn = true;\n                                     // const eval transmute calls only with the feature gate\n-                                    if !self.tcx.sess.features_untracked().const_transmute {\n+                                    if !self.tcx.features().const_transmute {\n                                         emit_feature_err(\n                                             &self.tcx.sess.parse_sess, \"const_transmute\",\n                                             self.span, GateIssue::Language,\n@@ -971,7 +971,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 // FIXME: cannot allow this inside `allow_internal_unstable` because\n                                 // that would make `panic!` insta stable in constants, since the\n                                 // macro is marked with the attr\n-                                if self.tcx.sess.features_untracked().const_panic {\n+                                if self.tcx.features().const_panic {\n                                     is_const_fn = true;\n                                 } else {\n                                     // don't allow panics in constants without the feature gate\n@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n         if let (Mode::ConstFn, &Place::Local(index)) = (self.mode, dest) {\n             if self.mir.local_kind(index) == LocalKind::Var &&\n                self.const_fn_arg_vars.insert(index) &&\n-               !self.tcx.sess.features_untracked().const_let {\n+               !self.tcx.features().const_let {\n \n                 // Direct use of an argument is permitted.\n                 match *rvalue {"}]}