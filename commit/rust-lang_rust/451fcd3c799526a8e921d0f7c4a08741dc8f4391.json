{"sha": "451fcd3c799526a8e921d0f7c4a08741dc8f4391", "node_id": "C_kwDOAAsO6NoAKDQ1MWZjZDNjNzk5NTI2YThlOTIxZDBmN2M0YTA4NzQxZGM4ZjQzOTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T12:35:31Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "fix clippy::redundant_closure", "tree": {"sha": "fd768ed364dfaa85a874a245d31ae34e0bd74c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd768ed364dfaa85a874a245d31ae34e0bd74c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451fcd3c799526a8e921d0f7c4a08741dc8f4391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451fcd3c799526a8e921d0f7c4a08741dc8f4391", "html_url": "https://github.com/rust-lang/rust/commit/451fcd3c799526a8e921d0f7c4a08741dc8f4391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451fcd3c799526a8e921d0f7c4a08741dc8f4391/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f70886b152d7c46afe3f6aae9ec41f00d32ac00", "html_url": "https://github.com/rust-lang/rust/commit/1f70886b152d7c46afe3f6aae9ec41f00d32ac00"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "ebb15e20cbafc3e0a70d04304e54d1281b82e80d", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -421,12 +421,12 @@ impl BodySourceMap {\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.expr_map.get(&src).cloned()\n     }\n \n     pub fn node_macro_file(&self, node: InFile<&ast::MacroCall>) -> Option<HirFileId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.expansions.get(&src).cloned()\n     }\n \n@@ -449,15 +449,15 @@ impl BodySourceMap {\n     }\n \n     pub fn node_label(&self, node: InFile<&ast::Label>) -> Option<LabelId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.label_map.get(&src).cloned()\n     }\n \n     pub fn field_syntax(&self, expr: ExprId) -> InFile<AstPtr<ast::RecordExprField>> {\n         self.field_map_back[&expr].clone()\n     }\n     pub fn node_field(&self, node: InFile<&ast::RecordExprField>) -> Option<ExprId> {\n-        let src = node.map(|it| AstPtr::new(it));\n+        let src = node.map(AstPtr::new);\n         self.field_map.get(&src).cloned()\n     }\n "}, {"sha": "512a9312a771a239b3d7a322cefc96d33508bdc7", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -941,17 +941,15 @@ impl From<ast::LiteralKind> for Literal {\n             LiteralKind::IntNumber(lit) => {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n                     Literal::Float(Default::default(), builtin)\n-                } else if let builtin @ Some(_) =\n-                    lit.suffix().and_then(|it| BuiltinInt::from_suffix(it))\n-                {\n+                } else if let builtin @ Some(_) = lit.suffix().and_then(BuiltinInt::from_suffix) {\n                     Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n-                    let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(it));\n+                    let builtin = lit.suffix().and_then(BuiltinUint::from_suffix);\n                     Literal::Uint(lit.value().unwrap_or(0), builtin)\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {\n-                let ty = lit.suffix().and_then(|it| BuiltinFloat::from_suffix(it));\n+                let ty = lit.suffix().and_then(BuiltinFloat::from_suffix);\n                 Literal::Float(Default::default(), ty)\n             }\n             LiteralKind::ByteString(bs) => {"}, {"sha": "456ed9e610382e16f4c3076ca2fd33875d1cf6e6", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -66,7 +66,7 @@ impl FunctionData {\n             .by_key(\"rustc_legacy_const_generics\")\n             .tt_values()\n             .next()\n-            .map(|arg| parse_rustc_legacy_const_generics(arg))\n+            .map(parse_rustc_legacy_const_generics)\n             .unwrap_or_default();\n \n         Arc::new(FunctionData {"}, {"sha": "f7d5532df5e3e3004148ae9162e42b093594d37b", "filename": "crates/hir_expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -88,9 +88,8 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         debug!(\"parsed item has no name\");\n         ExpandError::Other(\"missing name\".into())\n     })?;\n-    let name_token_id = token_map\n-        .token_by_range(name.syntax().text_range())\n-        .unwrap_or_else(|| TokenId::unspecified());\n+    let name_token_id =\n+        token_map.token_by_range(name.syntax().text_range()).unwrap_or_else(TokenId::unspecified);\n     let name_token = tt::Ident { id: name_token_id, text: name.text().into() };\n     let type_or_const_params =\n         params.map_or(0, |type_param_list| type_param_list.type_or_const_params().count());"}, {"sha": "bad5f9aa2434bb34124f2a126d2ebc6d0913733f", "filename": "crates/hir_expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -446,7 +446,7 @@ fn concat_bytes_expand(\n                 match token.kind() {\n                     syntax::SyntaxKind::BYTE => bytes.push(token.text().to_string()),\n                     syntax::SyntaxKind::BYTE_STRING => {\n-                        let components = unquote_byte_string(lit).unwrap_or_else(|| Vec::new());\n+                        let components = unquote_byte_string(lit).unwrap_or_else(Vec::new);\n                         components.into_iter().for_each(|x| bytes.push(x.to_string()));\n                     }\n                     _ => {"}, {"sha": "ad6cd36ca60d1e8eea8d316ad4997e19edcb0a48", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -128,6 +128,6 @@ mod unsafe_tls {\n         // type.\n         let static_p: &DebugContext<'static> =\n             unsafe { std::mem::transmute::<&DebugContext, &DebugContext<'static>>(&ctx) };\n-        PROGRAM.set(static_p, || op())\n+        PROGRAM.set(static_p, op)\n     }\n }"}, {"sha": "6111bdb94aaaf006bb1e4778f2cee5529a471b52", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -283,7 +283,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n         let final_node = delimiter_node\n             .next_sibling_or_token()\n             .and_then(|it| it.into_token())\n-            .filter(|node| is_single_line_ws(node))\n+            .filter(is_single_line_ws)\n             .unwrap_or(delimiter_node);\n \n         return Some(TextRange::new(node.text_range().start(), final_node.text_range().end()));"}, {"sha": "556659d07c95ed2c20e8431b2162a7476236921a", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -417,7 +417,7 @@ impl Module {\n         replacements.append(&mut impl_item_replacements);\n \n         record_field_parents.into_iter().for_each(|x| {\n-            x.1.descendants().filter_map(|x| ast::RecordField::cast(x)).for_each(|desc| {\n+            x.1.descendants().filter_map(ast::RecordField::cast).for_each(|desc| {\n                 let is_record_field_present = record_fields\n                     .clone()\n                     .into_iter()"}, {"sha": "7f5563d9d09305e04d4f6cafe8811e2af9336a4e", "filename": "crates/ide_db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -85,7 +85,7 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n                 }\n                 mods.push(do_nl(after, tok));\n             }\n-            LIFETIME_IDENT if is_next(|it| is_text(it), true) => {\n+            LIFETIME_IDENT if is_next(is_text, true) => {\n                 mods.push(do_ws(after, tok));\n             }\n             AS_KW | DYN_KW | IMPL_KW => {"}, {"sha": "9d46e2b0785d1e8d5ce0dfd88e8f6a12fd822cd0", "filename": "crates/ide_diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -117,12 +117,7 @@ fn make_fixes(\n     }\n \n     // If there are existing `mod m;` items, append after them (after the first group of them, rather).\n-    match ast\n-        .items()\n-        .skip_while(|item| !is_outline_mod(item))\n-        .take_while(|item| is_outline_mod(item))\n-        .last()\n-    {\n+    match ast.items().skip_while(|item| !is_outline_mod(item)).take_while(is_outline_mod).last() {\n         Some(last) => {\n             cov_mark::hit!(unlinked_file_append_to_existing_mods);\n             let offset = last.syntax().text_range().end();"}, {"sha": "a69a77c7ee219d6ee9909877cc2adc68e82b0bda", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451fcd3c799526a8e921d0f7c4a08741dc8f4391/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=451fcd3c799526a8e921d0f7c4a08741dc8f4391", "patch": "@@ -49,7 +49,7 @@ pub mod ext {\n     ) -> Option<ast::Expr> {\n         let mut iter = parts.into_iter();\n         let base = expr_path(ext::ident_path(iter.next()?));\n-        let expr = iter.fold(base, |base, s| expr_field(base, s));\n+        let expr = iter.fold(base, expr_field);\n         Some(expr)\n     }\n "}]}