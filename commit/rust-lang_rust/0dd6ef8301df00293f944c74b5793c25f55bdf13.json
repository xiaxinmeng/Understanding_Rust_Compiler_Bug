{"sha": "0dd6ef8301df00293f944c74b5793c25f55bdf13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDZlZjgzMDFkZjAwMjkzZjk0NGM3NGI1NzkzYzI1ZjU1YmRmMTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-11T10:39:12Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-11T10:39:12Z"}, "message": "Simplify `with_extra`", "tree": {"sha": "52183caa99f155e701584fe9ea32b2f02d5fa429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52183caa99f155e701584fe9ea32b2f02d5fa429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd6ef8301df00293f944c74b5793c25f55bdf13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd6ef8301df00293f944c74b5793c25f55bdf13", "html_url": "https://github.com/rust-lang/rust/commit/0dd6ef8301df00293f944c74b5793c25f55bdf13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd6ef8301df00293f944c74b5793c25f55bdf13/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "html_url": "https://github.com/rust-lang/rust/commit/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "e5b473a70e3bdce70ff5c022aa750a601c2ce85a", "filename": "src/eval_context.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=0dd6ef8301df00293f944c74b5793c25f55bdf13", "patch": "@@ -687,8 +687,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 let val = match extra {\n                     LvalueExtra::None => ptr.to_value(),\n-                    LvalueExtra::Length(len) => ptr.with_extra(PrimVal::from_u128(len as u128)),\n-                    LvalueExtra::Vtable(vtable) => ptr.with_extra(PrimVal::Ptr(vtable)),\n+                    LvalueExtra::Length(len) => ptr.to_value_with_len(len),\n+                    LvalueExtra::Vtable(vtable) => ptr.to_value_with_vtable(vtable),\n                     LvalueExtra::DowncastVariant(..) =>\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n@@ -1346,13 +1346,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         } else {\n             trace!(\"reading fat pointer extra of type {}\", pointee_ty);\n             let extra = ptr.offset(self.memory.pointer_size(), self.memory.layout)?;\n-            let extra = match self.tcx.struct_tail(pointee_ty).sty {\n-                ty::TyDynamic(..) => self.memory.read_ptr(extra)?.into_inner_primval(),\n+            match self.tcx.struct_tail(pointee_ty).sty {\n+                ty::TyDynamic(..) => Ok(p.to_value_with_vtable(self.memory.read_ptr(extra)?.to_ptr()?)),\n                 ty::TySlice(..) |\n-                ty::TyStr => PrimVal::from_u128(self.memory.read_usize(extra)? as u128),\n+                ty::TyStr => Ok(p.to_value_with_len(self.memory.read_usize(extra)?)),\n                 _ => bug!(\"unsized primval ptr read from {:?}\", pointee_ty),\n-            };\n-            Ok(p.with_extra(extra))\n+            }\n         }\n     }\n \n@@ -1466,8 +1465,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n                 let ptr = src.read_ptr(&self.memory)?;\n-                let len = PrimVal::from_u128(length as u128);\n-                self.write_value(ptr.with_extra(len), dest, dest_ty)\n+                // u64 cast is from usize to u64, which is always good\n+                self.write_value(ptr.to_value_with_len(length as u64), dest, dest_ty)\n             }\n             (&ty::TyDynamic(..), &ty::TyDynamic(..)) => {\n                 // For now, upcasts are limited to changes in marker\n@@ -1480,8 +1479,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let trait_ref = self.tcx.erase_regions(&trait_ref);\n                 let vtable = self.get_vtable(src_pointee_ty, trait_ref)?;\n                 let ptr = src.read_ptr(&self.memory)?;\n-                let extra = PrimVal::Ptr(vtable);\n-                self.write_value(ptr.with_extra(extra), dest, dest_ty)\n+                self.write_value(ptr.to_value_with_vtable(vtable), dest, dest_ty)\n             },\n \n             _ => bug!(\"invalid unsizing {:?} -> {:?}\", src_ty, dest_ty),"}, {"sha": "f2581379ea1743f0a1ab22160e35e1f5b1ceb37f", "filename": "src/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=0dd6ef8301df00293f944c74b5793c25f55bdf13", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         let offset = match base_extra {\n             LvalueExtra::Vtable(tab) => {\n-                let (_, align) = self.size_and_align_of_dst(base_ty, base_ptr.with_extra(PrimVal::Ptr(tab)))?;\n+                let (_, align) = self.size_and_align_of_dst(base_ty, base_ptr.to_value_with_vtable(tab))?;\n                 offset.abi_align(Align::from_bytes(align, align).unwrap()).bytes()\n             }\n             _ => offset.bytes(),"}, {"sha": "f69f99f3d28c46369d9aecc0ac67cae0413ed81d", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=0dd6ef8301df00293f944c74b5793c25f55bdf13", "patch": "@@ -12,8 +12,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(crate) fn drop_lvalue(&mut self, lval: Lvalue<'tcx>, instance: ty::Instance<'tcx>, ty: Ty<'tcx>, span: Span) -> EvalResult<'tcx> {\n         trace!(\"drop_lvalue: {:#?}\", lval);\n         let val = match self.force_allocation(lval)? {\n-            Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => ptr.with_extra(PrimVal::Ptr(vtable)),\n-            Lvalue::Ptr { ptr, extra: LvalueExtra::Length(len) } => ptr.with_extra(PrimVal::Bytes(len as u128)),\n+            Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => ptr.to_value_with_vtable(vtable),\n+            Lvalue::Ptr { ptr, extra: LvalueExtra::Length(len) } => ptr.to_value_with_len(len),\n             Lvalue::Ptr { ptr, extra: LvalueExtra::None } => ptr.to_value(),\n             _ => bug!(\"force_allocation broken\"),\n         };"}, {"sha": "7e178afde269c88831fb27f8bc2eb0c84c4f683f", "filename": "src/value.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd6ef8301df00293f944c74b5793c25f55bdf13/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=0dd6ef8301df00293f944c74b5793c25f55bdf13", "patch": "@@ -98,9 +98,14 @@ impl<'tcx> Pointer {\n         }\n     }\n \n-    pub fn with_extra(self, extra: PrimVal) -> Value {\n-        Value::ByValPair(self.primval, extra)\n+    pub fn to_value_with_len(self, len: u64) -> Value {\n+        Value::ByValPair(self.primval, PrimVal::from_u128(len as u128))\n     }\n+\n+    pub fn to_value_with_vtable(self, vtable: MemoryPointer) -> Value {\n+        Value::ByValPair(self.primval, PrimVal::Ptr(vtable))\n+    }\n+\n     pub fn to_value(self) -> Value {\n         Value::ByVal(self.primval)\n     }"}]}