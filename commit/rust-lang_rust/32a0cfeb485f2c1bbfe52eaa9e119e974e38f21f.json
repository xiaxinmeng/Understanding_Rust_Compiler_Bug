{"sha": "32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYTBjZmViNDg1ZjJjMWJiZmU1MmVhYTllMTE5ZTk3NGUzOGYyMWY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-22T08:30:07Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:28Z"}, "message": "Avoid reporting multiple ambiguity errors for a single use of a name.", "tree": {"sha": "f7f3a65cb28f5b8b60601fdde49cb303c2ec598d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7f3a65cb28f5b8b60601fdde49cb303c2ec598d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "html_url": "https://github.com/rust-lang/rust/commit/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9", "html_url": "https://github.com/rust-lang/rust/commit/681a14f29b5e8d8745bda4fc7ba4d4ccb634ddb9"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "a881feaa4d35351641dae6de547f24e46d7f18a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "patch": "@@ -1065,6 +1065,7 @@ pub struct Resolver<'a> {\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n+    ambiguity_errors: Vec<(Span, Name, &'a NameBinding<'a>)>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1218,6 +1219,7 @@ impl<'a> Resolver<'a> {\n             maybe_unused_trait_imports: NodeSet(),\n \n             privacy_errors: Vec::new(),\n+            ambiguity_errors: Vec::new(),\n \n             arenas: arenas,\n             dummy_binding: arenas.alloc_name_binding(NameBinding {\n@@ -1245,7 +1247,7 @@ impl<'a> Resolver<'a> {\n         visit::walk_crate(self, krate);\n \n         check_unused::check_crate(self, krate);\n-        self.report_privacy_errors();\n+        self.report_errors();\n     }\n \n     fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, normal_ancestor_id: NodeId)\n@@ -1276,14 +1278,8 @@ impl<'a> Resolver<'a> {\n             self.add_to_glob_map(directive.id, name);\n         }\n \n-        if let Some((b1, b2)) = binding.ambiguity() {\n-            let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n-            let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);\n-            self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))\n-                .span_note(b1.span, &msg1)\n-                .span_note(b2.span, &msg2)\n-                .note(&format!(\"Consider adding an explicit import of `{}` to disambiguate\", name))\n-                .emit();\n+        if binding.ambiguity().is_some() {\n+            self.ambiguity_errors.push((span, name, binding));\n             return true;\n         }\n \n@@ -3289,9 +3285,21 @@ impl<'a> Resolver<'a> {\n         vis.is_accessible_from(module.normal_ancestor_id, self)\n     }\n \n-    fn report_privacy_errors(&self) {\n-        if self.privacy_errors.len() == 0 { return }\n+    fn report_errors(&self) {\n         let mut reported_spans = FnvHashSet();\n+\n+        for &(span, name, binding) in &self.ambiguity_errors {\n+            if !reported_spans.insert(span) { continue }\n+            let (b1, b2) = binding.ambiguity().unwrap();\n+            let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n+            let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);\n+            self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))\n+                .span_note(b1.span, &msg1)\n+                .span_note(b2.span, &msg2)\n+                .note(&format!(\"Consider adding an explicit import of `{}` to disambiguate\", name))\n+                .emit();\n+        }\n+\n         for &PrivacyError(span, name, binding) in &self.privacy_errors {\n             if !reported_spans.insert(span) { continue }\n             if binding.is_extern_crate() {"}, {"sha": "70936b254464665dc6b781572a3dcd1113c307da", "filename": "src/test/compile-fail/imports/duplicate.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Fduplicate.rs?ref=32a0cfeb485f2c1bbfe52eaa9e119e974e38f21f", "patch": "@@ -50,3 +50,16 @@ fn main() {\n     g::foo(); //~ ERROR `foo` is ambiguous\n               //~| NOTE Consider adding an explicit import of `foo` to disambiguate\n }\n+\n+mod ambiguous_module_errors {\n+    pub mod m1 { pub use super::m1 as foo; }\n+    pub mod m2 { pub use super::m2 as foo; }\n+\n+    use self::m1::*; //~ NOTE\n+    use self::m2::*; //~ NOTE\n+\n+    fn f() {\n+        foo::bar(); //~ ERROR `foo` is ambiguous\n+                    //~| NOTE\n+    }\n+}"}]}