{"sha": "4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "node_id": "C_kwDOAAsO6NoAKDQ4MTVmOTRjNTFkOWM0YTljNDNmY2M3N2RhMGM3ODgwNTZmOWNmOWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-19T11:30:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T11:30:46Z"}, "message": "Rollup merge of #99401 - TaKO8Ki:avoid-symbol-to-&str-conversions, r=nnethercote\n\nAvoid `Symbol` to `&str` conversions\n\n`Symbol::as_str` is a slowish operation, so this patch removes some usages of it.", "tree": {"sha": "aa27e40035aa34bb4384b85a0debf8e2bbee1520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa27e40035aa34bb4384b85a0debf8e2bbee1520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1pXnCRBK7hj4Ov3rIwAAC1cIAJBylLEL9DZct7/1dAvZx/mq\nv5rI60w49U/Rs7yJF78HKYlXoni6SxUde0KRLEXm/BMAR5+HAQrJAdOLL7vpgddj\n7G7t1B8V9w/Ds8jQmCwKd1lN3+y8QeYr/txhKBlAK7Wh0HjWuphIFHRBqMnsDRKG\nWjhI2Y5vUcXiiuBPiYrP6GLwkolCMgoaQrK0K0q0Rdqcqp2ZSyXCpMZFLOJaxSDZ\nA0d1BFdo80TfoXKigv6mLCshJKnN4bjSEbuiMLD7/xgWsAb+i6pzieBQtvNjNbKz\nDqnoyZ3l+zcIb+GcAyXNY67MYNuP/QWm5IZ/kYpUuSU0e3nin3SFGkCvPyJGbm4=\n=e6TJ\n-----END PGP SIGNATURE-----\n", "payload": "tree aa27e40035aa34bb4384b85a0debf8e2bbee1520\nparent 31473928e993517f4e1909478c573628d8119cdc\nparent a22934bea1d02870cda58eb6297ff9332fcc2104\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658230246 +0200\ncommitter GitHub <noreply@github.com> 1658230246 +0200\n\nRollup merge of #99401 - TaKO8Ki:avoid-symbol-to-&str-conversions, r=nnethercote\n\nAvoid `Symbol` to `&str` conversions\n\n`Symbol::as_str` is a slowish operation, so this patch removes some usages of it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "html_url": "https://github.com/rust-lang/rust/commit/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31473928e993517f4e1909478c573628d8119cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/31473928e993517f4e1909478c573628d8119cdc", "html_url": "https://github.com/rust-lang/rust/commit/31473928e993517f4e1909478c573628d8119cdc"}, {"sha": "a22934bea1d02870cda58eb6297ff9332fcc2104", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22934bea1d02870cda58eb6297ff9332fcc2104", "html_url": "https://github.com/rust-lang/rust/commit/a22934bea1d02870cda58eb6297ff9332fcc2104"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "cd77dbca3c440c700bae2df0550c94b4b3c29b00", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     InlineAsmRegOrRegClass::Reg(s) => {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmReg::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                let msg = format!(\"invalid register `{}`: {}\", s.as_str(), e);\n+                                let msg = format!(\"invalid register `{}`: {}\", s, e);\n                                 sess.struct_span_err(*op_sp, &msg).emit();\n                                 asm::InlineAsmReg::Err\n                             })\n@@ -156,7 +156,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     InlineAsmRegOrRegClass::RegClass(s) => {\n                         asm::InlineAsmRegOrRegClass::RegClass(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmRegClass::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                let msg = format!(\"invalid register class `{}`: {}\", s.as_str(), e);\n+                                let msg = format!(\"invalid register class `{}`: {}\", s, e);\n                                 sess.struct_span_err(*op_sp, &msg).emit();\n                                 asm::InlineAsmRegClass::Err\n                             })"}, {"sha": "22cb27af4fbc51afed2d1782a7fce9f7cfb70687", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -62,9 +62,9 @@ impl<'a> PostExpansionVisitor<'a> {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n         if let ast::Const::Yes(_) = constness {\n-            match symbol_unescaped.as_str() {\n+            match symbol_unescaped {\n                 // Stable\n-                \"Rust\" | \"C\" => {}\n+                sym::Rust | sym::C => {}\n                 abi => gate_feature_post!(\n                     &self,\n                     const_extern_fn,"}, {"sha": "80fd9726fc78005cde1f9d7d400f94bf34b31106", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -55,7 +55,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n             // The initial byte `4` instructs GDB that the following pretty printer\n             // is defined inline as opposed to in a standalone file.\n             section_contents.extend_from_slice(b\"\\x04\");\n-            let vis_name = format!(\"pretty-printer-{}-{}\\n\", crate_name.as_str(), index);\n+            let vis_name = format!(\"pretty-printer-{}-{}\\n\", crate_name, index);\n             section_contents.extend_from_slice(vis_name.as_bytes());\n             section_contents.extend_from_slice(&visualizer.src);\n "}, {"sha": "9a2ab3e32248bfda7c966720cc25cabb6de2bda4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -228,7 +228,7 @@ pub fn suggest_adding_lifetime_params<'tcx>(\n     if is_impl {\n         sugg.push_str(\" and update trait if needed\");\n     }\n-    err.multipart_suggestion(sugg.as_str(), suggestions, Applicability::MaybeIncorrect);\n+    err.multipart_suggestion(sugg, suggestions, Applicability::MaybeIncorrect);\n \n     true\n }"}, {"sha": "7381019a620160ff782f0eb05e9e5d2593b35ba1", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -77,7 +77,7 @@ fn err_if_attr_found(ctxt: &EntryContext<'_>, attrs: &[Attribute], sym: Symbol)\n             .sess\n             .struct_span_err(\n                 attr.span,\n-                &format!(\"`{}` attribute can only be used on functions\", sym.as_str()),\n+                &format!(\"`{}` attribute can only be used on functions\", sym),\n             )\n             .emit();\n     }"}, {"sha": "7a1695fc862bf603daa67504d882366b225b79f5", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -1627,7 +1627,7 @@ impl<'a> Resolver<'a> {\n                     \"{}{} `{}` defined here\",\n                     prefix,\n                     suggestion.res.descr(),\n-                    suggestion.candidate.as_str(),\n+                    suggestion.candidate,\n                 ),\n             );\n         }"}, {"sha": "e428bae479bc2f4d70258cfd172203db8502acde", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -83,7 +83,7 @@ impl ForLifetimeSpanType {\n         }\n     }\n \n-    pub(crate) fn suggestion(&self, sugg: &str) -> String {\n+    pub(crate) fn suggestion(&self, sugg: impl std::fmt::Display) -> String {\n         match self {\n             Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n             Self::ClosureEmpty => format!(\"for<{}>\", sugg),\n@@ -2313,8 +2313,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n \n         let suggest_existing =\n             |err: &mut Diagnostic,\n-             name: &str,\n-             formatters: Vec<Option<Box<dyn Fn(&str) -> String>>>| {\n+             name: Symbol,\n+             formatters: Vec<Option<Box<dyn Fn(Symbol) -> String>>>| {\n                 if let Some(MissingLifetimeSpot::HigherRanked { span: for_span, span_type }) =\n                     self.missing_named_lifetime_spots.iter().rev().next()\n                 {\n@@ -2334,7 +2334,8 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     // If all single char lifetime names are present, we wrap around and double the chars.\n                     let lt_name = (1..)\n                         .flat_map(a_to_z_repeat_n)\n-                        .find(|lt| !lifetime_names.contains(&Symbol::intern(&lt)))\n+                        .map(|lt| Symbol::intern(&lt))\n+                        .find(|lt| !lifetime_names.contains(lt))\n                         .unwrap();\n                     let msg = format!(\n                         \"consider making the {} lifetime-generic with a new `{}` lifetime\",\n@@ -2361,7 +2362,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     introduce_suggestion.push((*for_span, for_sugg));\n                     for ((span, _), formatter) in spans_with_counts.iter().zip(formatters.iter()) {\n                         if let Some(formatter) = formatter {\n-                            introduce_suggestion.push((*span, formatter(&lt_name)));\n+                            introduce_suggestion.push((*span, formatter(lt_name)));\n                         }\n                     }\n                     err.multipart_suggestion_verbose(\n@@ -2584,15 +2585,19 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         let lifetime_names: Vec<_> = lifetime_names.iter().collect();\n         match &lifetime_names[..] {\n             [name] => {\n-                let mut suggs: Vec<Option<Box<dyn Fn(&str) -> String>>> = Vec::new();\n+                let mut suggs: Vec<Option<Box<dyn Fn(Symbol) -> String>>> = Vec::new();\n                 for (snippet, (_, count)) in snippets.iter().zip(spans_with_counts.iter().copied())\n                 {\n                     suggs.push(match snippet.as_deref() {\n                         Some(\"&\") => Some(Box::new(|name| format!(\"&{} \", name))),\n                         Some(\"'_\") => Some(Box::new(|n| n.to_string())),\n                         Some(\"\") => Some(Box::new(move |n| format!(\"{}, \", n).repeat(count))),\n                         Some(\"<\") => Some(Box::new(move |n| {\n-                            std::iter::repeat(n).take(count).collect::<Vec<_>>().join(\", \")\n+                            std::iter::repeat(n)\n+                                .take(count)\n+                                .map(|n| n.to_string())\n+                                .collect::<Vec<_>>()\n+                                .join(\", \")\n                         })),\n                         Some(snippet) if !snippet.ends_with('>') => Some(Box::new(move |name| {\n                             format!(\n@@ -2607,7 +2612,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         _ => None,\n                     });\n                 }\n-                suggest_existing(err, name.as_str(), suggs);\n+                suggest_existing(err, **name, suggs);\n             }\n             [] => {\n                 let mut suggs = Vec::new();"}, {"sha": "54dd15270a136cd48b1b49dc36009cf82fe19c58", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -325,7 +325,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 UNUSED_MACROS,\n                 node_id,\n                 ident.span,\n-                &format!(\"unused macro definition: `{}`\", ident.as_str()),\n+                &format!(\"unused macro definition: `{}`\", ident.name),\n             );\n         }\n         for (&(def_id, arm_i), &(ident, rule_span)) in self.unused_macro_rules.iter() {\n@@ -341,7 +341,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 &format!(\n                     \"{} rule of macro `{}` is never used\",\n                     crate::diagnostics::ordinalize(arm_i + 1),\n-                    ident.as_str()\n+                    ident.name\n                 ),\n             );\n         }"}, {"sha": "66aa48fd635603078d0a05ecb4d8c71af152ce21", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -257,6 +257,7 @@ symbols! {\n         Result,\n         Return,\n         Right,\n+        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         Send,"}, {"sha": "29df771b957809c839d79d3127ea65ad72d4d1e6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         if let Some(ref s) = label {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n-                            err.span_label(span, s.as_str());\n+                            err.span_label(span, s);\n                             if !matches!(trait_ref.skip_binder().self_ty().kind(), ty::Param(_)) {\n                                 // When the self type is a type param We don't need to \"the trait\n                                 // `std::marker::Sized` is not implemented for `T`\" as we will point\n@@ -531,7 +531,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             let enclosing_scope_span =\n                                 tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(body));\n \n-                            err.span_label(enclosing_scope_span, s.as_str());\n+                            err.span_label(enclosing_scope_span, s);\n                         }\n \n                         self.suggest_floating_point_literal(&obligation, &mut err, &trait_ref);"}, {"sha": "c733f0d3c86d055fd3d611c6ccaa46d4695e4ab9", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &cause,\n             &mut |err| {\n                 if let Some((span, msg)) = &ret_reason {\n-                    err.span_label(*span, msg.as_str());\n+                    err.span_label(*span, msg);\n                 } else if let ExprKind::Block(block, _) = &then_expr.kind\n                     && let Some(expr) = &block.expr\n                 {"}, {"sha": "a2daf6886f1ec796390ff764e0e60fe8ef75af3a", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4815f94c51d9c4a9c43fcc77da0c788056f9cf9e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=4815f94c51d9c4a9c43fcc77da0c788056f9cf9e", "patch": "@@ -408,8 +408,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 false,\n                             ),\n                         };\n-                        let mut err =\n-                            struct_span_err!(self.tcx.sess, op.span, E0369, \"{}\", message.as_str());\n+                        let mut err = struct_span_err!(self.tcx.sess, op.span, E0369, \"{message}\");\n                         if !lhs_expr.span.eq(&rhs_expr.span) {\n                             self.add_type_neq_err_label(\n                                 &mut err,"}]}