{"sha": "d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZDcxODM4Y2RmMWJkY2I3YzYxYzhkYzYyYzM0MDk1NDViODUwYWU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-05-03T15:35:12Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-05-03T15:35:12Z"}, "message": "Mention missing constructor when complaining about inexhaustive top-level pattern\n\nIt previously, uselessly, only pointed out the constructor when the\ninexhaustive pattern was nested in some other pattern.\n\nCloses #2337", "tree": {"sha": "81ba328807158008dc675e205187a535b8739a6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ba328807158008dc675e205187a535b8739a6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "html_url": "https://github.com/rust-lang/rust/commit/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1129635ee5fc595c3638626884e49e6dd9356d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1129635ee5fc595c3638626884e49e6dd9356d9", "html_url": "https://github.com/rust-lang/rust/commit/f1129635ee5fc595c3638626884e49e6dd9356d9"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "3eb0d1e92236d871071fbfad853d2e1e7c458e30", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "patch": "@@ -122,7 +122,8 @@ fn is_useful(tcx: ty::ctxt, m: matrix, v: [@pat]) -> useful {\n \n     alt pat_ctor_id(tcx, v[0]) {\n       none {\n-        if is_complete(tcx, m, left_ty) {\n+        alt missing_ctor(tcx, m, left_ty) {\n+          none {\n             alt ty::get(left_ty).struct {\n               ty::ty_bool {\n                 alt is_useful_specialized(tcx, m, v, val(const_int(1i64)),\n@@ -149,9 +150,14 @@ fn is_useful(tcx: ty::ctxt, m: matrix, v: [@pat]) -> useful {\n                 is_useful_specialized(tcx, m, v, single, arity, left_ty)\n               }\n             }\n-        } else {\n-            is_useful(tcx, vec::filter_map(m, {|r| default(tcx, r)}),\n-                      vec::tail(v))\n+          }\n+          some(ctor) {\n+            alt is_useful(tcx, vec::filter_map(m, {|r| default(tcx, r)}),\n+                          vec::tail(v)) {\n+              useful_ { useful(left_ty, ctor) }\n+              u { u }\n+            }\n+          }\n         }\n       }\n       some(v0_ctor) {\n@@ -202,13 +208,13 @@ fn is_wild(tcx: ty::ctxt, p: @pat) -> bool {\n     }\n }\n \n-fn is_complete(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> bool {\n+fn missing_ctor(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> option<ctor> {\n     alt ty::get(left_ty).struct {\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_tup(_) | ty::ty_rec(_) {\n         for m.each {|r|\n-            if !is_wild(tcx, r[0]) { ret true; }\n+            if !is_wild(tcx, r[0]) { ret none; }\n         }\n-        ret false;\n+        ret some(single);\n       }\n       ty::ty_enum(eid, _) {\n         let mut found = [];\n@@ -217,9 +223,17 @@ fn is_complete(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> bool {\n                 if !vec::contains(found, id) { found += [id]; }\n             }\n         }\n-        found.len() == (*ty::enum_variants(tcx, eid)).len()\n+        let variants = ty::enum_variants(tcx, eid);\n+        if found.len() != (*variants).len() {\n+            for vec::each(*variants) {|v|\n+                if !found.contains(variant(v.id)) {\n+                    ret some(variant(v.id));\n+                }\n+            }\n+            fail;\n+        } else { none }\n       }\n-      ty::ty_nil { true }\n+      ty::ty_nil { none }\n       ty::ty_bool {\n         let mut true_found = false, false_found = false;\n         for m.each {|r|\n@@ -229,9 +243,11 @@ fn is_complete(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> bool {\n               some(val(const_int(0i64))) { false_found = true; }\n             }\n         }\n-        true_found && false_found\n+        if true_found && false_found { none }\n+        else if true_found { some(val(const_int(0i64))) }\n+        else { some(val(const_int(1i64))) }\n       }\n-      _ { false }\n+      _ { some(single) }\n     }\n }\n "}, {"sha": "8863be414742b0317c69eb2f28a3e4e257f9451f", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "patch": "@@ -16,6 +16,9 @@ fn main() {\n       (a, b) {}\n       (b, a) {}\n     }\n+    alt a { //! ERROR b not covered\n+      a {}\n+    }\n     // This is exhaustive, though the algorithm got it wrong at one point\n     alt (a, b) {\n       (a, _) {}"}]}