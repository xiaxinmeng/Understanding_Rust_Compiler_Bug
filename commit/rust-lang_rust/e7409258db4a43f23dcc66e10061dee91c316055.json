{"sha": "e7409258db4a43f23dcc66e10061dee91c316055", "node_id": "C_kwDOAAsO6NoAKGU3NDA5MjU4ZGI0YTQzZjIzZGNjNjZlMTAwNjFkZWU5MWMzMTYwNTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T10:31:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T10:31:52Z"}, "message": "Auto merge of #112415 - GuillaumeGomez:rollup-5pa9frd, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #112034 (Migrate `item_opaque_ty` to Askama)\n - #112179 (Avoid passing --cpu-features when empty)\n - #112309 (bootstrap: remove dependency `is-terminal`)\n - #112388 (Migrate GUI colors test to original CSS color format)\n - #112389 (Add a test for #105709)\n - #112392 (Fix ICE for while loop with assignment condition with LHS place expr)\n - #112394 (Remove accidental comment)\n - #112396 (Track more diagnostics in `rustc_expand`)\n - #112401 (Don't `use compile_error as print`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee63a261821600f4669877e5f2dbad2e812584e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee63a261821600f4669877e5f2dbad2e812584e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7409258db4a43f23dcc66e10061dee91c316055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7409258db4a43f23dcc66e10061dee91c316055", "html_url": "https://github.com/rust-lang/rust/commit/e7409258db4a43f23dcc66e10061dee91c316055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7409258db4a43f23dcc66e10061dee91c316055/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2", "html_url": "https://github.com/rust-lang/rust/commit/a0df04c0f2b9c0415c53e3cee8c4f9fa394a37b2"}, {"sha": "cf5e0b06183dabee960e4c7f7afd73355b8c3f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5e0b06183dabee960e4c7f7afd73355b8c3f89", "html_url": "https://github.com/rust-lang/rust/commit/cf5e0b06183dabee960e4c7f7afd73355b8c3f89"}], "stats": {"total": 125, "additions": 90, "deletions": 35}, "files": [{"sha": "4c878785b7b45bc35b5dd0798f580d2529b05f1a", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -554,9 +554,6 @@ fn report_missing_placeholders(\n     fmt_span: Span,\n ) {\n     let mut diag = if let &[(span, named)] = &unused[..] {\n-        //let mut diag = ecx.struct_span_err(span, msg);\n-        //diag.span_label(span, msg);\n-        //diag\n         ecx.create_err(errors::FormatUnusedArg { span, named })\n     } else {\n         let unused_labels ="}, {"sha": "b04d2743b378edb4a1d020f86df9cdd38af0a5c7", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -2271,11 +2271,13 @@ fn add_order_independent_options(\n     } else if flavor == LinkerFlavor::Bpf {\n         cmd.arg(\"--cpu\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n-        cmd.arg(\"--cpu-features\");\n-        cmd.arg(match &sess.opts.cg.target_feature {\n-            feat if !feat.is_empty() => feat.as_ref(),\n-            _ => sess.target.options.features.as_ref(),\n-        });\n+        if let Some(feat) = [sess.opts.cg.target_feature.as_str(), &sess.target.options.features]\n+            .into_iter()\n+            .find(|feat| !feat.is_empty())\n+        {\n+            cmd.arg(\"--cpu-features\");\n+            cmd.arg(feat);\n+        }\n     }\n \n     cmd.linker_plugin_lto();"}, {"sha": "c503a44c196985ef5cc2c91f870359199d50d309", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -58,11 +58,18 @@ use std::str;\n use std::sync::OnceLock;\n use std::time::Instant;\n \n+#[allow(unused_macros)]\n+macro do_not_use_print($($t:tt)*) {\n+    std::compile_error!(\n+        \"Don't use `print` or `println` here, use `safe_print` or `safe_println` instead\"\n+    )\n+}\n+\n // This import blocks the use of panicking `print` and `println` in all the code\n // below. Please use `safe_print` and `safe_println` to avoid ICE when\n // encountering an I/O error during print.\n #[allow(unused_imports)]\n-use std::{compile_error as print, compile_error as println};\n+use {do_not_use_print as print, do_not_use_print as println};\n \n pub mod args;\n pub mod pretty;"}, {"sha": "8a251ea29d7fcc80952ae9b03f6ef35ccbf5c5b7", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -1110,6 +1110,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1118,13 +1119,15 @@ impl<'a> ExtCtxt<'a> {\n         self.sess.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n \n+    #[track_caller]\n     pub fn create_err(\n         &self,\n         err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.create_err(err)\n     }\n \n+    #[track_caller]\n     pub fn emit_err(&self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.sess.emit_err(err)\n     }\n@@ -1135,10 +1138,12 @@ impl<'a> ExtCtxt<'a> {\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.sess.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n     #[rustc_lint_diagnostics]\n+    #[track_caller]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) {\n         self.sess.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }"}, {"sha": "30a543aab508fbd1d51a1999e936508c05855a5c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -1640,7 +1640,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                 hir::Stmt {\n                                                     kind:\n                                                         hir::StmtKind::Expr(hir::Expr {\n-                                                            kind: hir::ExprKind::Assign(..),\n+                                                            kind: hir::ExprKind::Assign(lhs, ..),\n                                                             ..\n                                                         }),\n                                                     ..\n@@ -1650,7 +1650,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     } = blk\n                                     {\n                                         self.comes_from_while_condition(blk.hir_id, |_| {\n-                                            err.downgrade_to_delayed_bug();\n+                                            // We cannot suppress the error if the LHS of assignment\n+                                            // is a syntactic place expression because E0070 would\n+                                            // not be emitted by `check_lhs_assignable`.\n+                                            let res = self.typeck_results.borrow().expr_ty_opt(lhs);\n+\n+                                            if !lhs.is_syntactic_place_expr()\n+                                                || res.references_error()\n+                                            {\n+                                                err.downgrade_to_delayed_bug();\n+                                            }\n                                         })\n                                     }\n                                 }"}, {"sha": "d48866d58ce1b6b543ba7842429c5d59eae6fa4b", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -51,7 +51,6 @@ dependencies = [\n  \"filetime\",\n  \"hex\",\n  \"ignore\",\n- \"is-terminal\",\n  \"junction\",\n  \"libc\",\n  \"object\",\n@@ -386,18 +385,6 @@ dependencies = [\n  \"windows-sys\",\n ]\n \n-[[package]]\n-name = \"is-terminal\"\n-version = \"0.4.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"256017f749ab3117e93acb91063009e1f1bb56d03965b14c2c8df4eb02c524d8\"\n-dependencies = [\n- \"hermit-abi 0.3.1\",\n- \"io-lifetimes\",\n- \"rustix\",\n- \"windows-sys\",\n-]\n-\n [[package]]\n name = \"itoa\"\n version = \"1.0.2\""}, {"sha": "85eb543e48ead85bd2a19b0430320a4b3a48a1eb", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -30,7 +30,6 @@ path = \"bin/sccache-plus-cl.rs\"\n test = false\n \n [dependencies]\n-is-terminal = \"0.4\"\n build_helper = { path = \"../tools/build_helper\" }\n cmake = \"0.1.38\"\n filetime = \"0.2\""}, {"sha": "2bc8441759f4d1ebc78f33041d0aa9f21da7f658", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -12,6 +12,7 @@ use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fmt;\n use std::fs;\n+use std::io::IsTerminal;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n@@ -894,8 +895,6 @@ define_config! {\n \n impl Config {\n     pub fn default_opts() -> Config {\n-        use is_terminal::IsTerminal;\n-\n         let mut config = Config::default();\n         config.llvm_optimize = true;\n         config.ninja_in_file = true;"}, {"sha": "4be0a7b4a5fb8b2a69bb564a997f18877c3cce05", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -1129,7 +1129,12 @@ fn item_trait_alias(\n         .unwrap();\n }\n \n-fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n+fn item_opaque_ty(\n+    w: &mut impl fmt::Write,\n+    cx: &mut Context<'_>,\n+    it: &clean::Item,\n+    t: &clean::OpaqueTy,\n+) {\n     wrap_item(w, |w| {\n         write!(\n             w,\n@@ -1139,16 +1144,18 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n             where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds = bounds(&t.bounds, false, cx),\n             attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2));\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n     write!(w, \"{}\", render_assoc_items(cx, it, it.item_id.expect_def_id(), AssocItemRender::All))\n+        .unwrap();\n }\n \n fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Typedef) {"}, {"sha": "e4b031b735eb0f5f30269cd33926a5fdec8b3b43", "filename": "tests/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftheme-change.goml?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -3,9 +3,9 @@ go-to: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n set-local-storage: {\"rustdoc-use-system-theme\": \"false\", \"rustdoc-theme\": \"dark\"}\n reload:\n \n-store-value: (background_light, \"rgb(255, 255, 255)\")\n-store-value: (background_dark, \"rgb(53, 53, 53)\")\n-store-value: (background_ayu, \"rgb(15, 20, 25)\")\n+store-value: (background_light, \"white\")\n+store-value: (background_dark, \"#353535\")\n+store-value: (background_ayu, \"#0f1419\")\n \n click: \"#settings-menu\"\n wait-for: \"#theme-ayu\""}, {"sha": "d81cba6275405d980a6881b5fac8882f587af78d", "filename": "tests/ui/const-generics/generic_const_exprs/inline-const-in-const-generic-defaults.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finline-const-in-const-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finline-const-in-const-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finline-const-in-const-generic-defaults.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![feature(inline_const)]\n+#![allow(incomplete_features)]\n+\n+pub struct ConstDefaultUnstable<const N: usize = { const { 3 } }>;\n+\n+pub fn main() {}"}, {"sha": "21b254054bbc043609ec58fa09bede1cd54cf979", "filename": "tests/ui/suggestions/while-let-typo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let foo = Some(0);\n     let bar = None;\n     while Some(x) = foo {} //~ ERROR cannot find value `x` in this scope\n-    while Some(foo) = bar {}\n+    while Some(foo) = bar {} //~ ERROR mismatched types\n     while 3 = foo {} //~ ERROR mismatched types\n     while Some(3) = foo {} //~ ERROR invalid left-hand side of assignment\n     while x = 5 {} //~ ERROR cannot find value `x` in this scope"}, {"sha": "69a7e5761d42111837735519a5b81e892499570d", "filename": "tests/ui/suggestions/while-let-typo.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fwhile-let-typo.stderr?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -20,6 +20,17 @@ help: you might have meant to use pattern matching\n LL |     while let x = 5 {}\n    |           +++\n \n+error[E0308]: mismatched types\n+  --> $DIR/while-let-typo.rs:5:11\n+   |\n+LL |     while Some(foo) = bar {}\n+   |           ^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     while let Some(foo) = bar {}\n+   |           +++\n+\n error[E0308]: mismatched types\n   --> $DIR/while-let-typo.rs:6:11\n    |\n@@ -39,7 +50,7 @@ help: you might have meant to use pattern destructuring\n LL |     while let Some(3) = foo {}\n    |           +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0070, E0308, E0425.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "3cb011dc06fcd1574a2d32b955e83d81e3b74955", "filename": "tests/ui/typeck/issue-112385-while-assign-lhs-place-expr-ice.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.rs?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -0,0 +1,9 @@\n+// Previously, the while loop with an assignment statement (mistakenly) as the condition\n+// which has a place expr as the LHS would trigger an ICE in typeck.\n+// Reduced from https://github.com/rust-lang/rust/issues/112385.\n+\n+fn main() {\n+    let foo = Some(());\n+    while Some(foo) = None {}\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "cf2648d084079c627c4dc9568aeaaedf7688dca4", "filename": "tests/ui/typeck/issue-112385-while-assign-lhs-place-expr-ice.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7409258db4a43f23dcc66e10061dee91c316055/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-112385-while-assign-lhs-place-expr-ice.stderr?ref=e7409258db4a43f23dcc66e10061dee91c316055", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-112385-while-assign-lhs-place-expr-ice.rs:7:11\n+   |\n+LL |     while Some(foo) = None {}\n+   |           ^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: consider adding `let`\n+   |\n+LL |     while let Some(foo) = None {}\n+   |           +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}