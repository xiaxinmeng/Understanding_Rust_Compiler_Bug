{"sha": "bc7d84c3ce586f0976976d06305115085b63e53d", "node_id": "C_kwDOAAsO6NoAKGJjN2Q4NGMzY2U1ODZmMDk3Njk3NmQwNjMwNTExNTA4NWI2M2U1M2Q", "commit": {"author": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-13T22:35:00Z"}, "committer": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-19T13:45:55Z"}, "message": "Spelling\n\n* a rule\n* access\n* after\n* amount\n* annotations\n* assignment\n* assist\n* associated\n* attribute\n* borrowed\n* built-in type\n* clarification\n* command\n* const\n* constructor\n* corresponding\n* counterparts\n* curlies\n* dependencies\n* deterministic\n* diagnostic\n* duplicates\n* edge\n* edited\n* efficient\n* elsewhere\n* execution\n* expression\n* extensions\n* extracted\n* fill\n* github\n* helper\n* heuristic\n* incomplete\n* indent end\n* inlay\n* invocation\n* lifetime\n* looking\n* maybe\n* move\n* mutability\n* mutable\n* necessarily\n* necessary\n* negative\n* nonexistent\n* occurred\n* offsets\n* offsetted\n* overridden\n* parameters\n* params\n* params_and_where_preds_in_scope\n* paredit\n* parent\n* parentheses\n* prepended if\n* punctuation\n* receive\n* receiver\n* referring\n* repeated\n* representing\n* semantically\n* separately\n* shouldnot\n* siblings\n* similar\n* something's\n* statement\n* struct\n* structure\n* surprise\n* the\n* this\n* transparent\n* unimplemented\n* unnamed\n* unnecessary\n* unneeded\n* unreachable\n* unterminated\n* utilities\n* variant\n* variants\n* visibility\n* work around (v)\n* workaround\n\nSigned-off-by: Josh Soref <2119212+jsoref@users.noreply.github.com>", "tree": {"sha": "c69fe6ac76844927c4a4a02241d76b41212dd24a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69fe6ac76844927c4a4a02241d76b41212dd24a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7d84c3ce586f0976976d06305115085b63e53d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7d84c3ce586f0976976d06305115085b63e53d", "html_url": "https://github.com/rust-lang/rust/commit/bc7d84c3ce586f0976976d06305115085b63e53d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7d84c3ce586f0976976d06305115085b63e53d/comments", "author": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c251a7e2bdd44120f900063bc1809c1475a7372", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c251a7e2bdd44120f900063bc1809c1475a7372", "html_url": "https://github.com/rust-lang/rust/commit/2c251a7e2bdd44120f900063bc1809c1475a7372"}], "stats": {"total": 273, "additions": 137, "deletions": 136}, "files": [{"sha": "c73a5040271e98e3800ce30c14b7b2114ab30f8c", "filename": ".github/actions/github-release/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Factions%2Fgithub-release%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Factions%2Fgithub-release%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Factions%2Fgithub-release%2FREADME.md?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -10,7 +10,7 @@ perform github releases but they all tend to have their set of drawbacks.\n Additionally nothing handles deleting releases which we need for our rolling\n `dev` release.\n \n-To handle all this this action rolls-its-own implementation using the\n+To handle all this action rolls-its-own implementation using the\n actions/toolkit repository and packages published there. These run in a Docker\n container and take various inputs to orchestrate the release from the build.\n "}, {"sha": "7090c94d93cce6d718ebda10a019529ef7608bb8", "filename": ".github/workflows/autopublish.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Fworkflows%2Fautopublish.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Fworkflows%2Fautopublish.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fautopublish.yaml?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -32,7 +32,7 @@ jobs:\n         shell: bash\n         run: |\n           git config --global user.email \"runner@gha.local\"\n-          git config --global user.name \"Github Action\"\n+          git config --global user.name \"GitHub Action\"\n           rm Cargo.lock\n           # Fix names for crates that were published before switch to kebab-case.\n           cargo workspaces rename --from base-db base_db"}, {"sha": "c043573cacf36d2138680fd03f9bbff4f5001843", "filename": ".github/workflows/publish-libs.yaml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Fworkflows%2Fpublish-libs.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/.github%2Fworkflows%2Fpublish-libs.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fpublish-libs.yaml?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -29,7 +29,7 @@ jobs:\n         shell: bash\n         run: |\n           git config --global user.email \"runner@gha.local\"\n-          git config --global user.name \"Github Action\"\n+          git config --global user.name \"GitHub Action\"\n           # Remove r-a crates from the workspaces so we don't auto-publish them as well\n           sed -i 's/ \"crates\\/\\*\"//' ./Cargo.toml\n           cargo workspaces publish --yes --exact --from-git --no-git-commit --allow-dirty"}, {"sha": "c353737a35a837435f63301d0d54f3e728766a83", "filename": ".vscode/launch.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Flaunch.json?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -72,7 +72,7 @@\n     },\n     {\n       // Used for testing the extension with a local build of the LSP server (in `target/release`)\n-      // with all other extendions loaded.\n+      // with all other extensions loaded.\n       \"name\": \"Run With Extensions\",\n       \"type\": \"extensionHost\",\n       \"request\": \"launch\","}, {"sha": "f593f2b2955acb2890e84454ed62f8e18f46ef35", "filename": "bench_data/glorious_old_parser", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/bench_data%2Fglorious_old_parser", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/bench_data%2Fglorious_old_parser", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench_data%2Fglorious_old_parser?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -3808,7 +3808,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(keywords::Else) || !cond.returns() {\n             let sp = self.sess.source_map().next_point(lo);\n             let mut err = self.diagnostic()\n-                .struct_span_err(sp, \"missing condition for `if` statemement\");\n+                .struct_span_err(sp, \"missing condition for `if` statement\");\n             err.span_label(sp, \"expected if condition here\");\n             return Err(err)\n         }"}, {"sha": "30d6d01930905a8565d844f6e5a45840c1e4d767", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -42,7 +42,7 @@ const MAX_PATH_LEN: usize = 15;\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum PrefixKind {\n     /// Causes paths to always start with either `self`, `super`, `crate` or a crate-name.\n-    /// This is the same as plain, just that paths will start with `self` iprepended f the path\n+    /// This is the same as plain, just that paths will start with `self` prepended if the path\n     /// starts with an identifier that is not a crate.\n     BySelf,\n     /// Causes paths to ignore imports in the local module."}, {"sha": "1f4577629ccdc842f19251fe2877f8f87aabf2bf", "filename": "crates/hir-def/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -502,7 +502,7 @@ impl Binding {\n     pub fn is_upvar(&self, relative_to: ExprId) -> bool {\n         match self.owner {\n             Some(x) => {\n-                // We assign expression ids in a way that outer closures will recieve\n+                // We assign expression ids in a way that outer closures will receive\n                 // a lower id\n                 x.into_raw() < relative_to.into_raw()\n             }"}, {"sha": "216c6a4574672b43944d81246cd4a5b51abc8023", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -98,7 +98,7 @@ fn#19 main#20(#21)#21 {#22\n     );\n }\n #[test]\n-fn float_field_acces_macro_input() {\n+fn float_field_access_macro_input() {\n     check(\n         r#\"\n macro_rules! foo {"}, {"sha": "751b7beaac1538a089e3715da344f440c493cd5f", "filename": "crates/hir-def/src/nameres/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -52,7 +52,7 @@ impl Attrs {\n }\n \n // This fn is intended for `#[proc_macro_derive(..)]` and `#[rustc_builtin_macro(..)]`, which have\n-// the same strucuture.\n+// the same structure.\n #[rustfmt::skip]\n pub(crate) fn parse_macro_name_and_helper_attrs(tt: &[TokenTree]) -> Option<(Name, Box<[Name]>)> {\n     match tt {"}, {"sha": "81bc0ff91e3a7643528a0190393c3b8527366960", "filename": "crates/hir-def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -887,7 +887,7 @@ mod module;\n //- /module.rs\n #![cfg(NEVER)]\n \n-struct AlsoShoulntAppear;\n+struct AlsoShouldNotAppear;\n         \"#,\n         expect![[r#\"\n             crate"}, {"sha": "74797622fecd5138e4a4ee34e7cc0eca8c2ca8fd", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -694,7 +694,7 @@ impl ExpansionInfo {\n                 (&attr_args.1, self.attr_input_or_mac_def.clone()?.syntax().cloned())\n             }\n             MacroCallKind::Attr { attr_args, .. } => {\n-                // try unshifting the the token id, if unshifting fails, the token resides in the non-item attribute input\n+                // try unshifting the token id, if unshifting fails, the token resides in the non-item attribute input\n                 // note that the `TokenExpander::map_id_up` earlier only unshifts for declarative macros, so we don't double unshift with this\n                 match self.macro_arg_shift.unshift(token_id) {\n                     Some(unshifted) => {"}, {"sha": "f346910da09b2dd4c0a74b6f8fcd9150b5fa00cd", "filename": "crates/hir-ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -207,7 +207,7 @@ impl ExprValidator {\n \n         let report = compute_match_usefulness(&cx, &m_arms, scrut_ty);\n \n-        // FIXME Report unreacheble arms\n+        // FIXME Report unreachable arms\n         // https://github.com/rust-lang/rust/blob/f31622a50/compiler/rustc_mir_build/src/thir/pattern/check_match.rs#L200\n \n         let witnesses = report.non_exhaustiveness_witnesses;"}, {"sha": "7460f43387f6b765f695404496433b9dc0df6c15", "filename": "crates/hir-ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -82,7 +82,7 @@ fn expand_or_pat(pat: &Pat) -> Vec<&Pat> {\n     pats\n }\n \n-/// [Constructor] uses this in umimplemented variants.\n+/// [Constructor] uses this in unimplemented variants.\n /// It allows porting match expressions from upstream algorithm without losing semantics.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub(super) enum Void {}"}, {"sha": "217454499ef6dd7482180f23db531cc430158b07", "filename": "crates/hir-ty/src/diagnostics/match_check/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fpat_util.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1,4 +1,4 @@\n-//! Pattern untilities.\n+//! Pattern utilities.\n //!\n //! Originates from `rustc_hir::pat_util`\n "}, {"sha": "d737b24ad32bba991b608301508c9b298db08a1d", "filename": "crates/hir-ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -755,7 +755,7 @@ pub(crate) enum Reachability {\n     /// The arm is reachable. This additionally carries a set of or-pattern branches that have been\n     /// found to be unreachable despite the overall arm being reachable. Used only in the presence\n     /// of or-patterns, otherwise it stays empty.\n-    // FIXME: store ureachable subpattern IDs\n+    // FIXME: store unreachable subpattern IDs\n     Reachable,\n     /// The arm is unreachable.\n     Unreachable,"}, {"sha": "158cc289a0181c0030c9efeb716361fec838fc9b", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -483,7 +483,7 @@ pub(crate) struct InferenceContext<'a> {\n     current_closure: Option<ClosureId>,\n     /// Stores the list of closure ids that need to be analyzed before this closure. See the\n     /// comment on `InferenceContext::sort_closures`\n-    closure_dependecies: FxHashMap<ClosureId, Vec<ClosureId>>,\n+    closure_dependencies: FxHashMap<ClosureId, Vec<ClosureId>>,\n     deferred_closures: FxHashMap<ClosureId, Vec<(Ty, Ty, Vec<Ty>, ExprId)>>,\n }\n \n@@ -555,7 +555,7 @@ impl<'a> InferenceContext<'a> {\n             current_captures: vec![],\n             current_closure: None,\n             deferred_closures: FxHashMap::default(),\n-            closure_dependecies: FxHashMap::default(),\n+            closure_dependencies: FxHashMap::default(),\n         }\n     }\n "}, {"sha": "afacb8ef1c957ea2a683cac50252671d248d18a6", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -756,7 +756,7 @@ impl InferenceContext<'_> {\n         let mut deferred_closures = mem::take(&mut self.deferred_closures);\n         let mut dependents_count: FxHashMap<ClosureId, usize> =\n             deferred_closures.keys().map(|x| (*x, 0)).collect();\n-        for (_, deps) in &self.closure_dependecies {\n+        for (_, deps) in &self.closure_dependencies {\n             for dep in deps {\n                 *dependents_count.entry(*dep).or_default() += 1;\n             }\n@@ -768,7 +768,7 @@ impl InferenceContext<'_> {\n             if let Some(d) = deferred_closures.remove(&x) {\n                 result.push((x, d));\n             }\n-            for dep in self.closure_dependecies.get(&x).into_iter().flat_map(|x| x.iter()) {\n+            for dep in self.closure_dependencies.get(&x).into_iter().flat_map(|x| x.iter()) {\n                 let cnt = dependents_count.get_mut(dep).unwrap();\n                 *cnt -= 1;\n                 if *cnt == 0 {"}, {"sha": "2c37d25f54b89859d19b91d6ba9613d61f025d84", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -287,7 +287,7 @@ impl<'a> InferenceContext<'a> {\n                         .intern(Interner);\n                         self.deferred_closures.entry(closure_id).or_default();\n                         if let Some(c) = self.current_closure {\n-                            self.closure_dependecies.entry(c).or_default().push(closure_id);\n+                            self.closure_dependencies.entry(c).or_default().push(closure_id);\n                         }\n                         (Some(closure_id), closure_ty, None)\n                     }\n@@ -349,7 +349,7 @@ impl<'a> InferenceContext<'a> {\n                             self.table.resolve_completely(callee_ty.clone()).kind(Interner)\n                         {\n                             if let Some(par) = self.current_closure {\n-                                self.closure_dependecies.entry(par).or_default().push(*c);\n+                                self.closure_dependencies.entry(par).or_default().push(*c);\n                             }\n                             self.deferred_closures.entry(*c).or_default().push((\n                                 derefed_callee.clone(),"}, {"sha": "03536be88475ff036589c60be32b30fba3ad66d2", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -148,7 +148,7 @@ pub type Guidance = chalk_solve::Guidance<Interner>;\n pub type WhereClause = chalk_ir::WhereClause<Interner>;\n \n /// A constant can have reference to other things. Memory map job is holding\n-/// the neccessary bits of memory of the const eval session to keep the constant\n+/// the necessary bits of memory of the const eval session to keep the constant\n /// meaningful.\n #[derive(Debug, Default, Clone, PartialEq, Eq)]\n pub struct MemoryMap(pub HashMap<usize, Vec<u8>>);"}, {"sha": "d830ae263baeef7723c17a6a9b12846defd72735", "filename": "crates/hir-ty/src/mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -55,7 +55,7 @@ pub struct Local {\n /// This is what is implemented in miri today. Are these the semantics we want for MIR? Is this\n /// something we can even decide without knowing more about Rust's memory model?\n ///\n-/// **Needs clarifiation:** Is loading a place that has its variant index set well-formed? Miri\n+/// **Needs clarification:** Is loading a place that has its variant index set well-formed? Miri\n /// currently implements it, but it seems like this may be something to check against in the\n /// validator.\n #[derive(Debug, PartialEq, Eq, Clone)]"}, {"sha": "016090d509bbbcac7f5bf051d402819b4e7daecb", "filename": "crates/hir-ty/src/mir/borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Fborrowck.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -110,7 +110,7 @@ fn place_case(lvalue: &Place) -> ProjectionCase {\n \n /// Returns a map from basic blocks to the set of locals that might be ever initialized before\n /// the start of the block. Only `StorageDead` can remove something from this map, and we ignore\n-/// `Uninit` and `drop` and similars after initialization.\n+/// `Uninit` and `drop` and similar after initialization.\n fn ever_initialized_map(body: &MirBody) -> ArenaMap<BasicBlockId, ArenaMap<LocalId, bool>> {\n     let mut result: ArenaMap<BasicBlockId, ArenaMap<LocalId, bool>> =\n         body.basic_blocks.iter().map(|x| (x.0, ArenaMap::default())).collect();"}, {"sha": "7b01cc39dd1314def41c051d5b22d19ccdd5fb37", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -123,7 +123,7 @@ impl Interval {\n     }\n \n     fn write_from_interval(&self, memory: &mut Evaluator<'_>, interval: Interval) -> Result<()> {\n-        // FIXME: this could be more efficent\n+        // FIXME: this could be more efficient\n         let bytes = &interval.get(memory)?.to_vec();\n         memory.write_memory(self.addr, bytes)\n     }\n@@ -692,16 +692,16 @@ impl Evaluator<'_> {\n                         Owned(r[0..lc.len()].into())\n                     }\n                     BinOp::Shl | BinOp::Shr => {\n-                        let shift_amout = if r128 < 0 {\n+                        let shift_amount = if r128 < 0 {\n                             return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n                         } else if r128 > 128 {\n                             return Err(MirEvalError::Panic(format!(\"Overflow in {op:?}\")));\n                         } else {\n                             r128 as u8\n                         };\n                         let r = match op {\n-                            BinOp::Shl => l128 << shift_amout,\n-                            BinOp::Shr => l128 >> shift_amout,\n+                            BinOp::Shl => l128 << shift_amount,\n+                            BinOp::Shr => l128 >> shift_amount,\n                             _ => unreachable!(),\n                         };\n                         Owned(r.to_le_bytes()[0..lc.len()].into())\n@@ -966,7 +966,7 @@ impl Evaluator<'_> {\n \n     fn make_by_layout(\n         &mut self,\n-        size: usize, // Not neccessarily equal to variant_layout.size\n+        size: usize, // Not necessarily equal to variant_layout.size\n         variant_layout: &Layout,\n         tag: Option<(usize, usize, i128)>,\n         values: impl Iterator<Item = Interval>,\n@@ -1481,7 +1481,7 @@ impl Evaluator<'_> {\n                 is_dyn_method(self.db, self.trait_env.clone(), def, generic_args.clone())\n             {\n                 // In the layout of current possible receiver, which at the moment of writing this code is one of\n-                // `&T`, `&mut T`, `Box<T>`, `Rc<T>`, `Arc<T>`, and `Pin<P>` where `P` is one of possible recievers,\n+                // `&T`, `&mut T`, `Box<T>`, `Rc<T>`, `Arc<T>`, and `Pin<P>` where `P` is one of possible receivers,\n                 // the vtable is exactly in the `[ptr_size..2*ptr_size]` bytes. So we can use it without branching on\n                 // the type.\n                 let ty = self"}, {"sha": "da5d1aff0a01e3ba998de5702d58b1d16a66f54b", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1206,7 +1206,7 @@ impl<'ctx> MirLowerCtx<'ctx> {\n         );\n         let prev_label = if let Some(label) = label {\n             // We should generate the end now, to make sure that it wouldn't change later. It is\n-            // bad as we may emit end (unneccessary unreachable block) for unterminating loop, but\n+            // bad as we may emit end (unnecessary unreachable block) for unterminating loop, but\n             // it should not affect correctness.\n             self.current_loop_end()?;\n             self.labeled_loop_blocks\n@@ -1278,7 +1278,7 @@ impl<'ctx> MirLowerCtx<'ctx> {\n     /// the appropriated places.\n     fn push_storage_live(&mut self, b: BindingId, current: BasicBlockId) -> Result<()> {\n         // Current implementation is wrong. It adds no `StorageDead` at the end of scope, and before each break\n-        // and continue. It just add a `StorageDead` before the `StorageLive`, which is not wrong, but unneeeded in\n+        // and continue. It just add a `StorageDead` before the `StorageLive`, which is not wrong, but unneeded in\n         // the proper implementation. Due this limitation, implementing a borrow checker on top of this mir will falsely\n         // allow this:\n         //"}, {"sha": "a5b48b6b936176fa0e0383365d540e735b4c1144", "filename": "crates/hir-ty/src/mir/lower/pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -23,7 +23,7 @@ impl MirLowerCtx<'_> {\n     /// mismatched path block is `None`.\n     ///\n     /// By default, it will create a new block for mismatched path. If you already have one, you can provide it with\n-    /// `current_else` argument to save an unneccessary jump. If `current_else` isn't `None`, the result mismatched path\n+    /// `current_else` argument to save an unnecessary jump. If `current_else` isn't `None`, the result mismatched path\n     /// wouldn't be `None` as well. Note that this function will add jumps to the beginning of the `current_else` block,\n     /// so it should be an empty block.\n     pub(super) fn pattern_match("}, {"sha": "4af143829f3da147c8be2cf237e227f01ad02da7", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1060,7 +1060,7 @@ fn infix_parse<T, S>(_state: S, _level_code: &Fn(S)) -> T {\n     loop {}\n }\n \n-fn parse_arule() {\n+fn parse_a_rule() {\n     infix_parse((), &(|_recurse| ()))\n }\n         \"#,"}, {"sha": "857891a21485ea3da7f65a3891bf812cd781ff6b", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -4250,7 +4250,7 @@ impl Trait for () {\n }\n \n #[test]\n-fn associted_type_in_struct_expr_path_enum() {\n+fn associated_type_in_struct_expr_path_enum() {\n     // FIXME: All annotation should be resolvable.\n     // For lines marked as unstable, see rust-lang/rust#86935.\n     // FIXME: Remove the comments once stablized."}, {"sha": "0d1bf9be5a7db59ec24597b32012ff839148798b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -801,7 +801,7 @@ fn precise_macro_call_location(\n     ast: &MacroCallKind,\n     db: &dyn HirDatabase,\n ) -> (InFile<SyntaxNodePtr>, Option<TextRange>, Option<String>, MacroKind) {\n-    // FIXME: maaybe we actually want slightly different ranges for the different macro diagnostics\n+    // FIXME: maybe we actually want slightly different ranges for the different macro diagnostics\n     // - e.g. the full attribute for macro errors, but only the name for name resolution\n     match ast {\n         MacroCallKind::FnLike { ast_id, .. } => {\n@@ -1522,7 +1522,7 @@ impl DefWithBody {\n             match source_map.expr_syntax(expr) {\n                 Ok(expr) => acc.push(MissingUnsafe { expr }.into()),\n                 Err(SyntheticSyntax) => {\n-                    // FIXME: Here and eslwhere in this file, the `expr` was\n+                    // FIXME: Here and elsewhere in this file, the `expr` was\n                     // desugared, report or assert that this doesn't happen.\n                 }\n             }\n@@ -3654,7 +3654,7 @@ impl Type {\n         self.as_adt()\n             .and_then(|a| a.lifetime(db).and_then(|lt| Some((&lt.name).to_smol_str())))\n             .into_iter()\n-            // add the type and const paramaters\n+            // add the type and const parameters\n             .chain(self.type_and_const_arguments(db))\n     }\n "}, {"sha": "9e4e6c1daf777d03a3e258744da733cfb75e9d64", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -252,7 +252,7 @@ impl Foo for S {\n     }\n \n     #[test]\n-    fn test_copied_overriden_members() {\n+    fn test_copied_overridden_members() {\n         check_assist(\n             add_missing_impl_members,\n             r#\""}, {"sha": "17ffb861fdd9d3fc34023c76eb6640266304060c", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -203,7 +203,7 @@ fn relevance_score(\n         // get the distance between the imported path and the current module\n         // (prefer items that are more local)\n         Some((item_module, current_module)) => {\n-            score -= module_distance_hueristic(db, current_module, &item_module) as i32;\n+            score -= module_distance_heuristic(db, current_module, &item_module) as i32;\n         }\n \n         // could not find relevant modules, so just use the length of the path as an estimate\n@@ -214,7 +214,7 @@ fn relevance_score(\n }\n \n /// A heuristic that gives a higher score to modules that are more separated.\n-fn module_distance_hueristic(db: &dyn HirDatabase, current: &Module, item: &Module) -> usize {\n+fn module_distance_heuristic(db: &dyn HirDatabase, current: &Module, item: &Module) -> usize {\n     // get the path starting from the item to the respective crate roots\n     let mut current_path = current.path_to_root(db);\n     let mut item_path = item.path_to_root(db);"}, {"sha": "dcb96ab8af44fe26b9816ca5ada1130070c3f3de", "filename": "crates/ide-assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -504,7 +504,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn ignore_statements_aftert_if() {\n+    fn ignore_statements_after_if() {\n         check_assist_not_applicable(\n             convert_to_guarded_return,\n             r#\""}, {"sha": "58605f7ed5705336657acc8d3860bd388a87785e", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -374,7 +374,7 @@ struct OutlivedLocal {\n \n /// Container of local variable usages\n ///\n-/// Semanticall same as `UsageSearchResult`, but provides more convenient interface\n+/// Semantically same as `UsageSearchResult`, but provides more convenient interface\n struct LocalUsages(ide_db::search::UsageSearchResult);\n \n impl LocalUsages {\n@@ -1291,8 +1291,8 @@ fn find_non_trait_impl(trait_impl: &SyntaxNode) -> Option<ast::Impl> {\n     let as_impl = ast::Impl::cast(trait_impl.clone())?;\n     let impl_type = Some(impl_type_name(&as_impl)?);\n \n-    let sibblings = trait_impl.parent()?.children();\n-    sibblings\n+    let siblings = trait_impl.parent()?.children();\n+    siblings\n         .filter_map(ast::Impl::cast)\n         .find(|s| impl_type_name(s) == impl_type && !is_trait_impl(s))\n }"}, {"sha": "795691d73ed0297b7de86b1f67b853dbd0575e63", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -357,7 +357,7 @@ impl Module {\n \n     fn change_visibility(&mut self, record_fields: Vec<SyntaxNode>) {\n         let (mut replacements, record_field_parents, impls) =\n-            get_replacements_for_visibilty_change(&mut self.body_items, false);\n+            get_replacements_for_visibility_change(&mut self.body_items, false);\n \n         let mut impl_items: Vec<ast::Item> = impls\n             .into_iter()\n@@ -366,7 +366,7 @@ impl Module {\n             .collect();\n \n         let (mut impl_item_replacements, _, _) =\n-            get_replacements_for_visibilty_change(&mut impl_items, true);\n+            get_replacements_for_visibility_change(&mut impl_items, true);\n \n         replacements.append(&mut impl_item_replacements);\n \n@@ -824,7 +824,7 @@ fn does_source_exists_outside_sel_in_same_mod(\n     source_exists_outside_sel_in_same_mod\n }\n \n-fn get_replacements_for_visibilty_change(\n+fn get_replacements_for_visibility_change(\n     items: &mut [ast::Item],\n     is_clone_for_updated: bool,\n ) -> (\n@@ -1236,7 +1236,8 @@ mod modname {\n     }\n \n     #[test]\n-    fn test_extract_module_for_correspoding_adt_of_impl_present_in_same_mod_but_not_in_selection() {\n+    fn test_extract_module_for_corresponding_adt_of_impl_present_in_same_mod_but_not_in_selection()\n+    {\n         check_assist(\n             extract_module,\n             r\""}, {"sha": "f75df2878671e92d144caadc511cf08f40c27133", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1006,7 +1006,7 @@ enum X<'a, 'b, 'x> {\n     }\n \n     #[test]\n-    fn test_extract_struct_with_liftime_type_const() {\n+    fn test_extract_struct_with_lifetime_type_const() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\""}, {"sha": "e87132218ea907c3c240d763cc11e21c237a23b6", "filename": "crates/ide-assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -324,7 +324,7 @@ fn self_name(ast_func: &ast::Fn) -> Option<String> {\n     self_partial_type(ast_func).map(|name| to_lower_snake_case(&name))\n }\n \n-/// Heper function to get the name of the type of `self`\n+/// Helper function to get the name of the type of `self`\n fn self_type(ast_func: &ast::Fn) -> Option<ast::Type> {\n     ast_func.syntax().ancestors().find_map(ast::Impl::cast).and_then(|i| i.self_ty())\n }\n@@ -350,7 +350,7 @@ fn self_type_without_lifetimes(ast_func: &ast::Fn) -> Option<String> {\n     Some(name)\n }\n \n-/// Heper function to get the name of the type of `self` without generic arguments\n+/// Helper function to get the name of the type of `self` without generic arguments\n fn self_partial_type(ast_func: &ast::Fn) -> Option<String> {\n     let mut self_type = self_type(ast_func)?.to_string();\n     if let Some(idx) = self_type.find(|c| ['<', ' '].contains(&c)) {"}, {"sha": "739b466b311a41ecfd3122b2d4098f910b94a1b4", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -893,14 +893,14 @@ fn filter_bounds_in_scope(\n     let target_impl = target.parent().ancestors().find_map(ast::Impl::cast)?;\n     let target_impl = ctx.sema.to_def(&target_impl)?;\n     // It's sufficient to test only the first element of `generic_params` because of the order of\n-    // insertion (see `relevant_parmas_and_where_clauses()`).\n+    // insertion (see `params_and_where_preds_in_scope()`).\n     let def = generic_params.first()?.self_ty_param.parent();\n     if def != hir::GenericDef::Impl(target_impl) {\n         return None;\n     }\n \n     // Now we know every element that belongs to an impl would be in scope at `target`, we can\n-    // filter them out just by lookint at their parent.\n+    // filter them out just by looking at their parent.\n     generic_params.retain(|it| !matches!(it.self_ty_param.parent(), hir::GenericDef::Impl(_)));\n     where_preds.retain(|it| {\n         it.node.syntax().parent().and_then(|it| it.parent()).and_then(ast::Impl::cast).is_none()\n@@ -1087,7 +1087,7 @@ fn calculate_necessary_visibility(\n     }\n }\n \n-// This is never intended to be used as a generic graph strucuture. If there's ever another need of\n+// This is never intended to be used as a generic graph structure. If there's ever another need of\n // graph algorithm, consider adding a library for that (and replace the following).\n /// Minimally implemented directed graph structure represented by adjacency list.\n struct Graph {\n@@ -2380,7 +2380,7 @@ mod s {\n     }\n \n     #[test]\n-    fn create_method_with_cursor_anywhere_on_call_expresion() {\n+    fn create_method_with_cursor_anywhere_on_call_expression() {\n         check_assist(\n             generate_function,\n             r\"\n@@ -2487,7 +2487,7 @@ fn foo() {s::S::bar();}\n     }\n \n     #[test]\n-    fn create_static_method_with_cursor_anywhere_on_call_expresion() {\n+    fn create_static_method_with_cursor_anywhere_on_call_expression() {\n         check_assist(\n             generate_function,\n             r\""}, {"sha": "dd6bbd84afccf03d8126899a76f0cfc29ffce061", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -174,7 +174,7 @@ pub(crate) fn generate_getter_impl(\n                 // this buf inserts a newline at the end of a getter\n                 // automatically, if one wants to add one more newline\n                 // for separating it from other assoc items, that needs\n-                // to be handled spearately\n+                // to be handled separately\n                 let mut getter_buf =\n                     generate_getter_from_info(ctx, &getter_info, record_field_info);\n "}, {"sha": "824255e4f8e32ce666d829c3b3d5787ccf06a767", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -98,9 +98,9 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n             .fields()\n             .enumerate()\n             .filter_map(|(i, f)| {\n-                let contructor = trivial_constructors[i].clone();\n-                if contructor.is_some() {\n-                    contructor\n+                let constructor = trivial_constructors[i].clone();\n+                if constructor.is_some() {\n+                    constructor\n                 } else {\n                     Some(f.name()?.to_string())\n                 }"}, {"sha": "5aa8e56f5626c57e9668926d890a517b58e7a475", "filename": "crates/ide-assists/src/handlers/inline_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -148,7 +148,7 @@ macro_rules! num {\n     #[test]\n     fn inline_macro_simple_not_applicable_broken_macro() {\n         // FIXME: This is a bug. The macro should not expand, but it's\n-        // the same behaviour as the \"Expand Macro Recursively\" commmand\n+        // the same behaviour as the \"Expand Macro Recursively\" command\n         // so it's presumably OK for the time being.\n         check_assist(\n             inline_macro,"}, {"sha": "c5aa9755bc0b26c9f9ee36af748695bb2e68c680", "filename": "crates/ide-assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -66,7 +66,7 @@ fn generate_fn_def_assist(\n         // if we have a self reference, use that\n         Some(NeedsLifetime::SelfParam(self_param))\n     } else {\n-        // otherwise, if there's a single reference parameter without a named liftime, use that\n+        // otherwise, if there's a single reference parameter without a named lifetime, use that\n         let fn_params_without_lifetime: Vec<_> = param_list\n             .params()\n             .filter_map(|param| match param.ty() {\n@@ -79,7 +79,7 @@ fn generate_fn_def_assist(\n         match fn_params_without_lifetime.len() {\n             1 => Some(fn_params_without_lifetime.into_iter().next()?),\n             0 => None,\n-            // multiple unnnamed is invalid. assist is not applicable\n+            // multiple unnamed is invalid. assist is not applicable\n             _ => return None,\n         }\n     };"}, {"sha": "a5c7fea403d31719b88b89f0ed01848c2a144879", "filename": "crates/ide-assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -386,7 +386,7 @@ fn foo() {\n     }\n \n     #[test]\n-    fn pull_assignment_up_if_missing_assigment_not_applicable() {\n+    fn pull_assignment_up_if_missing_assignment_not_applicable() {\n         check_assist_not_applicable(\n             pull_assignment_up,\n             r#\"\n@@ -401,7 +401,7 @@ fn foo() {\n     }\n \n     #[test]\n-    fn pull_assignment_up_match_missing_assigment_not_applicable() {\n+    fn pull_assignment_up_match_missing_assignment_not_applicable() {\n         check_assist_not_applicable(\n             pull_assignment_up,\n             r#\""}, {"sha": "4bf974a5655af4607a18f215eea0fa61fdd5320f", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -507,7 +507,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn struct_method_over_stuct_instance() {\n+    fn struct_method_over_struct_instance() {\n         check_assist_not_applicable(\n             qualify_method_call,\n             r#\"\n@@ -525,7 +525,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn trait_method_over_stuct_instance() {\n+    fn trait_method_over_struct_instance() {\n         check_assist_not_applicable(\n             qualify_method_call,\n             r#\""}, {"sha": "ffc32f8049968c55998820beeecf8d3ef2b1e920", "filename": "crates/ide-assists/src/handlers/remove_parentheses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -124,7 +124,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn remove_parens_doesnt_apply_weird_syntax_and_adge_cases() {\n+    fn remove_parens_doesnt_apply_weird_syntax_and_edge_cases() {\n         // removing `()` would break code because {} would be counted as the loop/if body\n         check_assist_not_applicable(remove_parentheses, r#\"fn f() { for _ in $0(0..{3}) {} }\"#);\n         check_assist_not_applicable(remove_parentheses, r#\"fn f() { for _ in $0(S {}) {} }\"#);"}, {"sha": "0772b168d49c8e57977748a5d4fc55898148dd49", "filename": "crates/ide-assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -232,7 +232,7 @@ fn b() { foo( ) }\n     }\n \n     #[test]\n-    fn remove_unused_surrounded_by_parms() {\n+    fn remove_unused_surrounded_by_params() {\n         check_assist(\n             remove_unused_param,\n             r#\""}, {"sha": "6310981ccce7a34f9bd6449b0b250d05a206975b", "filename": "crates/ide-assists/src/handlers/replace_string_with_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -31,14 +31,14 @@ pub(crate) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext<'_\n     if value.chars().take(2).count() != 1 {\n         return None;\n     }\n-    let quote_offets = token.quote_offsets()?;\n+    let quote_offsets = token.quote_offsets()?;\n \n     acc.add(\n         AssistId(\"replace_string_with_char\", AssistKind::RefactorRewrite),\n         \"Replace string with char\",\n         target,\n         |edit| {\n-            let (left, right) = quote_offets.quotes;\n+            let (left, right) = quote_offsets.quotes;\n             edit.replace(left, '\\'');\n             edit.replace(right, '\\'');\n             if value == \"'\" {"}, {"sha": "94787abf73b061b006741fcafac503fbad5ab57f", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -609,14 +609,14 @@ fn classify_name_ref(\n                     _ => false,\n                 };\n \n-                let reciever_is_part_of_indivisible_expression = match &receiver {\n+                let receiver_is_part_of_indivisible_expression = match &receiver {\n                     Some(ast::Expr::IfExpr(_)) => {\n                         let next_token_kind = next_non_trivia_token(name_ref.syntax().clone()).map(|t| t.kind());\n                         next_token_kind == Some(SyntaxKind::ELSE_KW)\n                     },\n                     _ => false\n                 };\n-                if reciever_is_part_of_indivisible_expression {\n+                if receiver_is_part_of_indivisible_expression {\n                     return None;\n                 }\n "}, {"sha": "a88798563de48550c64478578011793874d75fb5", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -133,7 +133,7 @@ pub use crate::{\n ///\n /// Another case where this would be instrumental is macro expansion. We want to\n /// insert a fake ident and re-expand code. There's `expand_speculative` as a\n-/// work-around for this.\n+/// workaround for this.\n ///\n /// A different use-case is completion of injection (examples and links in doc\n /// comments). When computing completion for a path in a doc-comment, you want"}, {"sha": "ce7af1d3400e78d9f16af16a662c59d1d49b9396", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -74,7 +74,7 @@ fn render(\n             item.insert_text(banged_name(&escaped_name)).lookup_by(banged_name(&name));\n         }\n         _ => {\n-            cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n+            cov_mark::hit!(dont_insert_macro_call_parens_unnecessary);\n             item.insert_text(escaped_name);\n         }\n     };\n@@ -140,8 +140,8 @@ mod tests {\n     use crate::tests::check_edit;\n \n     #[test]\n-    fn dont_insert_macro_call_parens_unncessary() {\n-        cov_mark::check!(dont_insert_macro_call_parens_unncessary);\n+    fn dont_insert_macro_call_parens_unnecessary() {\n+        cov_mark::check!(dont_insert_macro_call_parens_unnecessary);\n         check_edit(\n             \"frobnicate\",\n             r#\""}, {"sha": "ef4c939fe64931733c4af124a247d152fca12d6f", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -105,7 +105,7 @@ fn completion_list_with_config(\n     include_keywords: bool,\n     trigger_character: Option<char>,\n ) -> String {\n-    // filter out all but one builtintype completion for smaller test outputs\n+    // filter out all but one built-in type completion for smaller test outputs\n     let items = get_all_items(config, ra_fixture, trigger_character);\n     let items = items\n         .into_iter()"}, {"sha": "be5b7f8a3404e207d5ab04fa5e8a9ef651bf7f6e", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -667,7 +667,7 @@ fn main() {\n }\n \n #[test]\n-fn varaiant_with_struct() {\n+fn variant_with_struct() {\n     check_empty(\n         r#\"\n pub struct YoloVariant {"}, {"sha": "2d6234e310c6054595f0a4aa9fa804855c3b19f0", "filename": "crates/ide-completion/src/tests/proc_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fproc_macros.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -81,7 +81,7 @@ impl Foo {\n }\n \n #[proc_macros::input_replace(\n-    fn suprise() {\n+    fn surprise() {\n         Foo.$0\n     }\n )]\n@@ -114,7 +114,7 @@ impl Foo {\n }\n \n #[proc_macros::input_replace(\n-    fn suprise() {\n+    fn surprise() {\n         Foo.f$0\n     }\n )]"}, {"sha": "7a7328f312d201e948259ebff33fba011d4fd7e8", "filename": "crates/ide-db/src/assists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fassists.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -98,7 +98,7 @@ impl FromStr for AssistKind {\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub struct AssistId(pub &'static str, pub AssistKind);\n \n-/// A way to control how many asssist to resolve during the assist resolution.\n+/// A way to control how many assist to resolve during the assist resolution.\n /// When an assist is resolved, its edits are calculated that might be costly to always do by default.\n #[derive(Debug)]\n pub enum AssistResolveStrategy {"}, {"sha": "e488300b41caacae21aaccdb5a0d0a10d412c767", "filename": "crates/ide-db/src/generated/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fgenerated%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fgenerated%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fgenerated%2Flints.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -4230,7 +4230,7 @@ pub union GenericUnion<T: Copy> { // Unions with non-`Copy` fields are unstable.\n pub const THIS_IS_OKAY: GenericUnion<()> = GenericUnion { field: () };\n ```\n \n-Like transarent `struct`s, a transparent `union` of type `U` has the same\n+Like transparent `struct`s, a transparent `union` of type `U` has the same\n layout, size, and ABI as its single non-ZST field. If it is generic over a type\n `T`, and all its fields are ZSTs except for exactly one field of type `T`, then\n it has the same layout and ABI as `T` (even if `T` is a ZST when monomorphized).\n@@ -6548,7 +6548,7 @@ subtracting elements in an Add impl.\"##,\n     },\n     Lint {\n         label: \"clippy::suspicious_assignment_formatting\",\n-        description: r##\"Checks for use of the non-existent `=*`, `=!` and `=-`\n+        description: r##\"Checks for use of the nonexistent `=*`, `=!` and `=-`\n operators.\"##,\n     },\n     Lint {"}, {"sha": "5a3e352b2ec5e9976507e606d768bf073d637bb4", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -181,7 +181,7 @@ impl SourceChangeBuilder {\n     /// mutability, and different nodes in the same tree see the same mutations.\n     ///\n     /// The typical pattern for an assist is to find specific nodes in the read\n-    /// phase, and then get their mutable couterparts using `make_mut` in the\n+    /// phase, and then get their mutable counterparts using `make_mut` in the\n     /// mutable state.\n     pub fn make_syntax_mut(&mut self, node: SyntaxNode) -> SyntaxNode {\n         self.mutated_tree.get_or_insert_with(|| TreeMutator::new(&node)).make_syntax_mut(&node)"}, {"sha": "acf0a67de4a126bb354321a0d463d9b9e01fef70", "filename": "crates/ide-db/src/syntax_helpers/format_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -92,7 +92,7 @@ pub fn lex_format_specifiers(\n                 let (_, second) = cloned.next().unwrap_or_default();\n                 match second {\n                     '<' | '^' | '>' => {\n-                        // alignment specifier, first char specifies fillment\n+                        // alignment specifier, first char specifies fill\n                         skip_char_and_emit(&mut chars, FormatSpecifier::Fill, &mut callback);\n                         skip_char_and_emit(&mut chars, FormatSpecifier::Align, &mut callback);\n                     }"}, {"sha": "fc230818193dc06b9a1d9a7f892ba62b04ae48e7", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1,7 +1,7 @@\n //! Tools to work with expressions present in format string literals for the `format_args!` family of macros.\n //! Primarily meant for assists and completions.\n \n-/// Enum for represenging extraced format string args.\n+/// Enum for representing extracted format string args.\n /// Can either be extracted expressions (which includes identifiers),\n /// or placeholders `{}`.\n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "f96ea29ae2f9d1df722985d87b00dd9e4c5a1fb1", "filename": "crates/ide-db/src/use_trivial_constructor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fuse_trivial_constructor.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1,9 +1,9 @@\n-//! Functionality for generating trivial contructors\n+//! Functionality for generating trivial constructors\n \n use hir::StructKind;\n use syntax::ast;\n \n-/// given a type return the trivial contructor (if one exists)\n+/// given a type return the trivial constructor (if one exists)\n pub fn use_trivial_constructor(\n     db: &crate::RootDatabase,\n     path: ast::Path,"}, {"sha": "25ab0ca6f9898a486c331620bf898a5c956cacdf", "filename": "crates/ide-diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -295,7 +295,7 @@ impl someStruct {\n     }\n \n     #[test]\n-    fn no_diagnostic_for_enum_varinats() {\n+    fn no_diagnostic_for_enum_variants() {\n         check_diagnostics(\n             r#\"\n enum Option { Some, None }"}, {"sha": "41ac83c0076b67280b836733c8130cf64e939c39", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -368,7 +368,7 @@ fn main() {\n     #[test]\n     fn mutation_in_dead_code() {\n         // This one is interesting. Dead code is not represented at all in the MIR, so\n-        // there would be no mutablility error for locals in dead code. Rustc tries to\n+        // there would be no mutability error for locals in dead code. Rustc tries to\n         // not emit `unused_mut` in this case, but since it works without `mut`, and\n         // special casing it is not trivial, we emit it.\n         check_diagnostics(\n@@ -773,7 +773,7 @@ fn fn_once(mut x: impl FnOnce(u8) -> u8) -> u8 {\n \n     #[test]\n     fn closure() {\n-        // FIXME: Diagnositc spans are too large\n+        // FIXME: Diagnostic spans are too large\n         check_diagnostics(\n             r#\"\n         //- minicore: copy, fn"}, {"sha": "c232381c1e980d4079864e4ab1d6be53799b7a93", "filename": "crates/ide-diagnostics/src/handlers/unresolved_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -45,7 +45,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::UnresolvedField) -> Option<Vec<A\n     }\n }\n \n-// FIXME: We should fill out the call here, mvoe the cursor and trigger signature help\n+// FIXME: We should fill out the call here, move the cursor and trigger signature help\n fn method_fix(\n     ctx: &DiagnosticsContext<'_>,\n     expr_ptr: &InFile<AstPtr<ast::Expr>>,"}, {"sha": "b278924721c0fc9865c9d3dbf8e8d9ad459e2572", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -219,7 +219,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_nagative_trait_bound() {\n+    fn test_negative_trait_bound() {\n         let txt = r#\"impl !Unpin for Test {}\"#;\n         check(\n             txt,"}, {"sha": "2e5903c0602e3a70a6a29a9c94cf0821d0fbc257", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -66,7 +66,7 @@ pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(Fil\n     (host.analysis(), FilePosition { file_id, offset }, annotations)\n }\n \n-/// Creates analysis from a multi-file fixture with annonations without $0\n+/// Creates analysis from a multi-file fixture with annotations without $0\n pub(crate) fn annotations_without_marker(ra_fixture: &str) -> (Analysis, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n     let change_fixture = ChangeFixture::parse(ra_fixture);"}, {"sha": "7294b625539c54d2ba7fba1d90e513a56c0e38e7", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -3115,7 +3115,7 @@ mod Foo$0 {\n }\n \n #[test]\n-fn hover_doc_outer_inner_attribue() {\n+fn hover_doc_outer_inner_attribute() {\n     check(\n         r#\"\n #[doc = \"Be quick;\"]\n@@ -3146,7 +3146,7 @@ mod Foo$0 {\n }\n \n #[test]\n-fn hover_doc_block_style_indentend() {\n+fn hover_doc_block_style_indent_end() {\n     check(\n         r#\"\n /**\n@@ -4288,7 +4288,7 @@ fn hover_builtin() {\n     check(\n         r#\"\n //- /main.rs crate:main deps:std\n-cosnt _: &str$0 = \"\"; }\n+const _: &str$0 = \"\"; }\n \n //- /libstd.rs crate:std\n /// Docs for prim_str"}, {"sha": "d5be0c5b8834e1fc625f928c1485f00218642ad5", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -148,7 +148,7 @@ pub(super) fn hints(\n     Some(())\n }\n \n-/// Returns whatever the hint should be postfix and if we need to add paretheses on the inside and/or outside of `expr`,\n+/// Returns whatever the hint should be postfix and if we need to add parentheses on the inside and/or outside of `expr`,\n /// if we are going to add (`postfix`) adjustments hints to it.\n fn mode_and_needs_parens_for_adjustment_hints(\n     expr: &ast::Expr,\n@@ -183,7 +183,7 @@ fn mode_and_needs_parens_for_adjustment_hints(\n     }\n }\n \n-/// Returns whatever we need to add paretheses on the inside and/or outside of `expr`,\n+/// Returns whatever we need to add parentheses on the inside and/or outside of `expr`,\n /// if we are going to add (`postfix`) adjustments hints to it.\n fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool, bool) {\n     // This is a very miserable pile of hacks...\n@@ -194,10 +194,10 @@ fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool,\n     // But we want to check what would happen if we add `*`/`.*` to the inner expression.\n     // To check for inner we need `` expr.needs_parens_in(`*expr`) ``,\n     // to check for outer we need `` `*expr`.needs_parens_in(parent) ``,\n-    // where \"expr\" is the `expr` parameter, `*expr` is the editted `expr`,\n+    // where \"expr\" is the `expr` parameter, `*expr` is the edited `expr`,\n     // and \"parent\" is the parent of the original expression...\n     //\n-    // For this we utilize mutable mutable trees, which is a HACK, but it works.\n+    // For this we utilize mutable trees, which is a HACK, but it works.\n     //\n     // FIXME: comeup with a better API for `needs_parens_in`, so that we don't have to do *this*\n \n@@ -243,7 +243,7 @@ fn needs_parens_for_adjustment_hints(expr: &ast::Expr, postfix: bool) -> (bool,\n     };\n \n     // At this point\n-    // - `parent`     is the parrent of the original expression\n+    // - `parent`     is the parent of the original expression\n     // - `dummy_expr` is the original expression wrapped in the operator we want (`*`/`.*`)\n     // - `expr`       is the clone of the original expression (with `dummy_expr` as the parent)\n "}, {"sha": "141f77abb8b41ec3eadba239a581a72897056825", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -108,7 +108,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n                     }\n                     try_cnt += 1;\n                     if try_cnt > 100 {\n-                        panic!(\"invocaton fixture {name} cannot be generated.\\n\");\n+                        panic!(\"invocation fixture {name} cannot be generated.\\n\");\n                     }\n                 }\n             }\n@@ -195,7 +195,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, DeclarativeMacro>) -> Vec<(Stri\n             Op::Ignore { .. } | Op::Index { .. } => {}\n         };\n \n-        // Simple linear congruential generator for determistic result\n+        // Simple linear congruential generator for deterministic result\n         fn rand(seed: &mut usize) -> usize {\n             let a = 1664525;\n             let c = 1013904223;"}, {"sha": "6fe8c005cf5005c3ff76c88d320b9b39fa150b86", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -332,7 +332,7 @@ struct MatchState<'t> {\n     /// Cached result of meta variable parsing\n     meta_result: Option<(TtIter<'t>, ExpandResult<Option<Fragment>>)>,\n \n-    /// Is error occuried in this state, will `poised` to \"parent\"\n+    /// Is error occurred in this state, will `poised` to \"parent\"\n     is_error: bool,\n }\n "}, {"sha": "5ae16475b65d3fb8b97676316749c64cc0730412", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -59,7 +59,7 @@ pub(super) fn ascription(p: &mut Parser<'_>) {\n     assert!(p.at(T![:]));\n     p.bump(T![:]);\n     if p.at(T![=]) {\n-        // recover from `let x: = expr;`, `const X: = expr;` and similars\n+        // recover from `let x: = expr;`, `const X: = expr;` and similar\n         // hopefully no type starts with `=`\n         p.error(\"missing type\");\n         return;"}, {"sha": "674c8d536cac56d6ee6dbad142ce667bb57ee6aa", "filename": "crates/parser/test_data/parser/err/0027_incomplete_where_for.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rast?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "previous_filename": "crates/parser/test_data/parser/err/0027_incomplere_where_for.rast"}, {"sha": "2792c20843a832c051b0206c2a30b15cf5de264d", "filename": "crates/parser/test_data/parser/err/0027_incomplete_where_for.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0027_incomplete_where_for.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "previous_filename": "crates/parser/test_data/parser/err/0027_incomplere_where_for.rs"}, {"sha": "4b2a740362ed1c7a9cb4621d3b3956eda2bfd9ef", "filename": "crates/parser/test_data/parser/err/0047_repeated_extern_modifier.rast", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rast?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "previous_filename": "crates/parser/test_data/parser/err/0047_repated_extern_modifier.rast"}, {"sha": "db32b98dfb05d14ec0edb79a6903d0b645b9946e", "filename": "crates/parser/test_data/parser/err/0047_repeated_extern_modifier.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0047_repeated_extern_modifier.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "previous_filename": "crates/parser/test_data/parser/err/0047_repated_extern_modifier.rs"}, {"sha": "fad574a4769505a210d9b4e0d793bb0e7d2997f9", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rast?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -60,7 +60,7 @@ SOURCE_FILE\n                         IDENT \"doc\"\n                   TOKEN_TREE\n                     L_PAREN \"(\"\n-                    STRING \"\\\"Being validated is not affected by duplcates\\\"\"\n+                    STRING \"\\\"Being validated is not affected by duplicates\\\"\"\n                     R_PAREN \")\"\n                 R_BRACK \"]\"\n               WHITESPACE \"\\n        \""}, {"sha": "0969ea1659dd6fa12677f42963c462e8fc6a33c1", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -3,7 +3,7 @@ fn inner() {\n     //! As are ModuleDoc style comments\n     {\n         #![doc(\"Inner attributes are allowed in blocks used as statements\")]\n-        #![doc(\"Being validated is not affected by duplcates\")]\n+        #![doc(\"Being validated is not affected by duplicates\")]\n         //! As are ModuleDoc style comments\n     };\n     {"}, {"sha": "e2a815fb7c552860ced1f5119a94879df49b231d", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -48,7 +48,7 @@ tracing-tree = \"0.2.1\"\n always-assert = \"0.1.2\"\n \n # These dependencies are unused, but we pin them to a version here to restrict them for our transitive dependencies\n-# so that we don't pull in duplicates of their depdendenceies like windows-sys and syn 1 vs 2\n+# so that we don't pull in duplicates of their dependencies like windows-sys and syn 1 vs 2\n # these would pull in serde 2\n thiserror = \"=1.0.39\"\n serde_repr = \"=0.1.11\""}, {"sha": "a7e949e21f39728a798423a1d1202dc877e72772", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -338,7 +338,7 @@ config_data! {\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n         /// Whether to show inlay type hints for return types of closures.\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n-        /// Closure notation in type and chaining inaly hints.\n+        /// Closure notation in type and chaining inlay hints.\n         inlayHints_closureStyle: ClosureStyle                                = \"\\\"impl_fn\\\"\",\n         /// Whether to show enum variant discriminant hints.\n         inlayHints_discriminantHints_enable: DiscriminantHintsDef            = \"\\\"never\\\"\",\n@@ -488,15 +488,15 @@ config_data! {\n         /// When enabled, rust-analyzer will emit special token types for operator tokens instead\n         /// of the generic `operator` token type.\n         semanticHighlighting_operator_specialization_enable: bool = \"false\",\n-        /// Use semantic tokens for punctuations.\n+        /// Use semantic tokens for punctuation.\n         ///\n         /// When disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\n         /// they are tagged with modifiers or have a special role.\n         semanticHighlighting_punctuation_enable: bool = \"false\",\n         /// When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\n         /// calls.\n         semanticHighlighting_punctuation_separate_macro_bang: bool = \"false\",\n-        /// Use specialized semantic tokens for punctuations.\n+        /// Use specialized semantic tokens for punctuation.\n         ///\n         /// When enabled, rust-analyzer will emit special token types for punctuation tokens instead\n         /// of the generic `punctuation` token type.\n@@ -1967,7 +1967,7 @@ fn get_field<T: DeserializeOwned>(\n     alias: Option<&'static str>,\n     default: &str,\n ) -> T {\n-    // XXX: check alias first, to work-around the VS Code where it pre-fills the\n+    // XXX: check alias first, to work around the VS Code where it pre-fills the\n     // defaults instead of sending an empty object.\n     alias\n         .into_iter()\n@@ -2199,8 +2199,8 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"enumDescriptions\": [\n                 \"Always show adjustment hints as prefix (`*expr`).\",\n                 \"Always show adjustment hints as postfix (`expr.*`).\",\n-                \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n-                \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, preferring prefix.\",\n+                \"Show prefix or postfix depending on which uses less parenthesis, preferring postfix.\",\n             ]\n         },\n         \"CargoFeaturesDef\" => set! {"}, {"sha": "4fe957e854d9998faca9e0f9b28f829a35b2734b", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -288,7 +288,7 @@ impl GlobalState {\n         {\n             let raw_database = self.analysis_host.raw_database();\n             // FIXME: ideally we should only trigger a workspace fetch for non-library changes\n-            // but somethings going wrong with the source root business when we add a new local\n+            // but something's going wrong with the source root business when we add a new local\n             // crate see https://github.com/rust-lang/rust-analyzer/issues/13029\n             if let Some(path) = workspace_structure_change {\n                 self.fetch_workspaces_queue"}, {"sha": "ccb04cb0f15a50285ac05266957f4c5efae59a1e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -36,7 +36,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     // temporary bumped. This optimization backfires in our case: each time the\n     // `main_loop` schedules a task to run on a threadpool, the worker threads\n     // gets a higher priority, and (on a machine with fewer cores) displaces the\n-    // main loop! We work-around this by marking the main loop as a\n+    // main loop! We work around this by marking the main loop as a\n     // higher-priority thread.\n     //\n     // https://docs.microsoft.com/en-us/windows/win32/procthread/scheduling-priorities"}, {"sha": "f3d644c680e2e950e08f3b7872aad5ee4ba899ad", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -166,8 +166,8 @@ fn merge_errors(\n     }\n     res.extend(new_errors.into_iter().map(|new_err| {\n         // fighting borrow checker with a variable ;)\n-        let offseted_range = new_err.range() + range_before_reparse.start();\n-        new_err.with_range(offseted_range)\n+        let offsetted_range = new_err.range() + range_before_reparse.start();\n+        new_err.with_range(offsetted_range)\n     }));\n     res\n }\n@@ -408,7 +408,7 @@ enum Foo {\n \n     #[test]\n     fn reparse_str_token_with_error_fixed() {\n-        do_check(r#\"\"unterinated$0$0\"#, \"\\\"\", 12);\n+        do_check(r#\"\"unterminated$0$0\"#, \"\\\"\", 13);\n     }\n \n     #[test]"}, {"sha": "5ff01eb44e719f70ac1f64e9e89df60fad155161", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -175,14 +175,14 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n                     assert_eq!(\n                         node.parent(),\n                         pair.parent(),\n-                        \"\\nunpaired curlys:\\n{}\\n{:#?}\\n\",\n+                        \"\\nunpaired curlies:\\n{}\\n{:#?}\\n\",\n                         root.text(),\n                         root,\n                     );\n                     assert!(\n                         node.next_sibling_or_token().is_none()\n                             && pair.prev_sibling_or_token().is_none(),\n-                        \"\\nfloating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n+                        \"\\nfloating curlies at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n                         node,\n                         root.text(),\n                         node,"}, {"sha": "13852aa78b84fb8201109008b06a68e3259997c0", "filename": "crates/syntax/test_data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -39,13 +39,13 @@\n         ast::Root::cast(self.syntax()).unwrap()\n     }\n     pub fn syntax(&self) -> SyntaxNodeRef {\n-        self.root.brroowed()\n+        self.root.borrowed()\n     }\n     mp_tree(root),\n                     );\n                     assert!(\n                         node.next_sibling().is_none() && pair.prev_sibling().is_none(),\n-                        \"\\nfloating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n+                        \"\\nfloating curlies at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n                         node,\n                         root.text(),\n                         node.text(),"}, {"sha": "d748400b695963135240eb7ab584213d0cb3cef9", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -333,7 +333,7 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n \n ### Unresolved Question\n \n-* Should we return a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n+* Should we return a nested brace structure, to allow [paredit](https://paredit.org/)-like actions of jump *out* of the current brace pair?\n   This is how `SelectionRange` request works.\n * Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n "}, {"sha": "0c3432e9036a4dc45672eacde817bfe60f344aac", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -477,7 +477,7 @@ Whether to show inlay type hints for return types of closures.\n [[rust-analyzer.inlayHints.closureStyle]]rust-analyzer.inlayHints.closureStyle (default: `\"impl_fn\"`)::\n +\n --\n-Closure notation in type and chaining inaly hints.\n+Closure notation in type and chaining inlay hints.\n --\n [[rust-analyzer.inlayHints.discriminantHints.enable]]rust-analyzer.inlayHints.discriminantHints.enable (default: `\"never\"`)::\n +\n@@ -758,7 +758,7 @@ of the generic `operator` token type.\n [[rust-analyzer.semanticHighlighting.punctuation.enable]]rust-analyzer.semanticHighlighting.punctuation.enable (default: `false`)::\n +\n --\n-Use semantic tokens for punctuations.\n+Use semantic tokens for punctuation.\n \n When disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\n they are tagged with modifiers or have a special role.\n@@ -772,7 +772,7 @@ calls.\n [[rust-analyzer.semanticHighlighting.punctuation.specialization.enable]]rust-analyzer.semanticHighlighting.punctuation.specialization.enable (default: `false`)::\n +\n --\n-Use specialized semantic tokens for punctuations.\n+Use specialized semantic tokens for punctuation.\n \n When enabled, rust-analyzer will emit special token types for punctuation tokens instead\n of the generic `punctuation` token type."}, {"sha": "f6ad2f7908f0be3c4f7674b6a759407a63597420", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -1030,7 +1030,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.inlayHints.closureStyle\": {\n-                    \"markdownDescription\": \"Closure notation in type and chaining inaly hints.\",\n+                    \"markdownDescription\": \"Closure notation in type and chaining inlay hints.\",\n                     \"default\": \"impl_fn\",\n                     \"type\": \"string\",\n                     \"enum\": [\n@@ -1094,8 +1094,8 @@\n                     \"enumDescriptions\": [\n                         \"Always show adjustment hints as prefix (`*expr`).\",\n                         \"Always show adjustment hints as postfix (`expr.*`).\",\n-                        \"Show prefix or postfix depending on which uses less parenthesis, prefering prefix.\",\n-                        \"Show prefix or postfix depending on which uses less parenthesis, prefering postfix.\"\n+                        \"Show prefix or postfix depending on which uses less parenthesis, preferring prefix.\",\n+                        \"Show prefix or postfix depending on which uses less parenthesis, preferring postfix.\"\n                     ]\n                 },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n@@ -1381,7 +1381,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.semanticHighlighting.punctuation.enable\": {\n-                    \"markdownDescription\": \"Use semantic tokens for punctuations.\\n\\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\\nthey are tagged with modifiers or have a special role.\",\n+                    \"markdownDescription\": \"Use semantic tokens for punctuation.\\n\\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\\nthey are tagged with modifiers or have a special role.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n@@ -1391,7 +1391,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.semanticHighlighting.punctuation.specialization.enable\": {\n-                    \"markdownDescription\": \"Use specialized semantic tokens for punctuations.\\n\\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\\nof the generic `punctuation` token type.\",\n+                    \"markdownDescription\": \"Use specialized semantic tokens for punctuation.\\n\\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\\nof the generic `punctuation` token type.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },"}, {"sha": "623fb102953bc7cf7e1338a98cd366a3ec89b676", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7d84c3ce586f0976976d06305115085b63e53d/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bc7d84c3ce586f0976976d06305115085b63e53d/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=bc7d84c3ce586f0976976d06305115085b63e53d", "patch": "@@ -157,7 +157,7 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n \n     cargoTask.presentationOptions.clear = true;\n     // Sadly, this doesn't prevent focus stealing if the terminal is currently\n-    // hidden, and will become revealed due to task exucution.\n+    // hidden, and will become revealed due to task execution.\n     cargoTask.presentationOptions.focus = false;\n \n     return cargoTask;"}]}