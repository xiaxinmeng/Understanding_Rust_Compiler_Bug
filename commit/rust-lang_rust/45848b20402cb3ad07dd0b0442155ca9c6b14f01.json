{"sha": "45848b20402cb3ad07dd0b0442155ca9c6b14f01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODQ4YjIwNDAyY2IzYWQwN2RkMGIwNDQyMTU1Y2E5YzZiMTRmMDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-10T21:59:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T23:33:33Z"}, "message": "librustc: Automatically move non-implicitly-copyable types into unique closures. r=nmatsakis", "tree": {"sha": "be3d282f4e40aa4eb0b7f0f0ded7c8836d4d2559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3d282f4e40aa4eb0b7f0f0ded7c8836d4d2559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45848b20402cb3ad07dd0b0442155ca9c6b14f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45848b20402cb3ad07dd0b0442155ca9c6b14f01", "html_url": "https://github.com/rust-lang/rust/commit/45848b20402cb3ad07dd0b0442155ca9c6b14f01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45848b20402cb3ad07dd0b0442155ca9c6b14f01/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca94369dad596421276c26ab98bdaa7bb1787cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca94369dad596421276c26ab98bdaa7bb1787cf", "html_url": "https://github.com/rust-lang/rust/commit/7ca94369dad596421276c26ab98bdaa7bb1787cf"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "f9a7459c67176561fdddcdc35e7dc1a621dd2e5b", "filename": "src/librustc/middle/capture.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcapture.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -110,22 +110,29 @@ fn compute_capture_vars(tcx: ty::ctxt,\n     // now go through anything that is referenced but was not explicitly\n     // named and add that\n \n-    let implicit_mode;\n-    if fn_proto == ast::ProtoBorrowed {\n-        implicit_mode = cap_ref;\n-    } else {\n-        implicit_mode = cap_copy;\n-    }\n-\n+    let implicit_mode_is_by_ref = fn_proto == ast::ProtoBorrowed;\n     for vec::each(*freevars) |fvar| {\n         let fvar_def_id = ast_util::def_id_of_def(fvar.def).node;\n         match cap_map.find(fvar_def_id) {\n             option::Some(_) => { /* was explicitly named, do nothing */ }\n             option::None => {\n+                // Move if this type implicitly moves; copy otherwise.\n+                let mode;\n+                if implicit_mode_is_by_ref {\n+                    mode = cap_ref;\n+                } else {\n+                    let fvar_ty = ty::node_id_to_type(tcx, fvar_def_id);\n+                    if ty::type_implicitly_moves(tcx, fvar_ty) {\n+                        mode = cap_move;\n+                    } else {\n+                        mode = cap_copy;\n+                    }\n+                };\n+\n                 cap_map.insert(fvar_def_id, {def:fvar.def,\n                                              span: fvar.span,\n                                              cap_item: None,\n-                                             mode:implicit_mode});\n+                                             mode:mode});\n             }\n         }\n     }"}, {"sha": "8075fdfe65e4113762e22affc38dedb0c4da0126", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -201,7 +201,6 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             let cap_def = cx.tcx.def_map.get(cap_item.id);\n             let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n             let ty = ty::node_id_to_type(cx.tcx, cap_def_id);\n-            // Here's where is_move isn't always false...\n             chk(cx, fn_id, None, cap_item.is_move, ty, cap_item.span);\n             cap_def_id\n         };\n@@ -215,9 +214,12 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             if captured_vars.contains(&id) { loop; }\n \n             let ty = ty::node_id_to_type(cx.tcx, id);\n-            // is_move is always false here. See the let captured_vars...\n-            // code above for where it's not always false.\n-            chk(cx, fn_id, Some(*fv), false, ty, fv.span);\n+\n+            // is_move is true if this type implicitly moves and false\n+            // otherwise.\n+            let is_move = ty::type_implicitly_moves(cx.tcx, ty);\n+\n+            chk(cx, fn_id, Some(*fv), is_move, ty, fv.span);\n         }\n     }\n "}, {"sha": "47284c1df5ac060c7c96356ccdd2fc92b732551e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -524,8 +524,8 @@ fn visit_expr(expr: @expr, &&self: @IrMaps, vt: vt<@IrMaps>) {\n         // in better error messages than just pointing at the closure\n         // construction site.\n         let proto = ty::ty_fn_proto(ty::expr_ty(self.tcx, expr));\n-        let cvs = capture::compute_capture_vars(self.tcx, expr.id,\n-                                                proto, cap_clause);\n+        let cvs = capture::compute_capture_vars(self.tcx, expr.id, proto,\n+                                                cap_clause);\n         let mut call_caps = ~[];\n         for cvs.each |cv| {\n             match relevant_def(cv.def) {"}, {"sha": "f9694b0ced6e9b5ae8a9185f53775dbaa1936f11", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -621,8 +621,8 @@ fn trans_arg_expr(bcx: block,\n                     let arg_ty = expr_ty(bcx, arg_expr);\n                     let proto = ty::ty_fn_proto(arg_ty);\n                     let bcx = closure::trans_expr_fn(\n-                        bcx, proto, decl, (*body), blk.id,\n-                        cap, Some(ret_flag), expr::SaveIn(scratch));\n+                        bcx, proto, decl, (*body), blk.id, cap,\n+                        Some(ret_flag), expr::SaveIn(scratch));\n                     DatumBlock {bcx: bcx,\n                                 datum: Datum {val: scratch,\n                                               ty: scratch_ty,"}, {"sha": "d7a1b14fae3e05a0bfbd99c8c7cb2edd91a4eeef", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -549,9 +549,8 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_fn(proto, decl, ref body, cap_clause) => {\n             // Don't use this function for anything real. Use the one in\n             // astconv instead.\n-            return closure::trans_expr_fn(bcx, proto,\n-                                          decl, (*body), expr.id, cap_clause,\n-                                          None, dest);\n+            return closure::trans_expr_fn(bcx, proto, decl, *body, expr.id,\n+                                          cap_clause, None, dest);\n         }\n         ast::expr_fn_block(decl, ref body, cap_clause) => {\n             let expr_ty = expr_ty(bcx, expr);\n@@ -561,9 +560,8 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                            expr_to_str(expr, tcx.sess.intr()),\n                            ty_to_str(tcx, expr_ty));\n                     return closure::trans_expr_fn(\n-                        bcx, fn_ty.meta.proto, decl, (*body),\n-                        expr.id, cap_clause, None,\n-                        dest);\n+                        bcx, fn_ty.meta.proto, decl, *body, expr.id,\n+                        cap_clause, None, dest);\n                 }\n                 _ => {\n                     bcx.sess().impossible_case(\n@@ -577,7 +575,7 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                     match blk.node {\n                         ast::expr_fn_block(decl, ref body, cap) => {\n                             return closure::trans_expr_fn(\n-                                bcx, fn_ty.meta.proto, decl, (*body), blk.id,\n+                                bcx, fn_ty.meta.proto, decl, *body, blk.id,\n                                 cap, Some(None), dest);\n                         }\n                         _ => {"}, {"sha": "26c1e1360e9e1634b970494be0ee5944251db120", "filename": "src/test/compile-fail/moves-based-on-type-capture-clause-bad.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = ~\"Hello world!\";\n+    do task::spawn {\n+        io::println(x);\n+    }\n+    io::println(x); //~ ERROR use of moved variable\n+}\n+"}, {"sha": "206d45b74fa33133c931f9dc7c56b2da2eb5b566", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45848b20402cb3ad07dd0b0442155ca9c6b14f01/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=45848b20402cb3ad07dd0b0442155ca9c6b14f01", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = ~\"Hello world!\";\n+    do task::spawn {\n+        io::println(x);\n+    }\n+}\n+"}]}