{"sha": "7e9ecfae5a5de432696ead26c296247fbe3d9b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOWVjZmFlNWE1ZGU0MzI2OTZlYWQyNmMyOTYyNDdmYmUzZDliOGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-20T20:14:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-20T20:14:28Z"}, "message": "Rollup merge of #61996 - Xanewok:unescape-raw-strings, r=matklad\n\nAdd unit tests for unescaping raw (byte) strings\n\nAdds unit tests for functionality introduced in #60793.\n\nr? @matklad @petrochenkov", "tree": {"sha": "2edb40f81756dd73b76aaca2c7f733a4331c5eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edb40f81756dd73b76aaca2c7f733a4331c5eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e9ecfae5a5de432696ead26c296247fbe3d9b8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdC+kkCRBK7hj4Ov3rIwAAdHIIAC8ACj2dogjpL17Gf1eoX5Qb\nj81dxbq289+kciPFOhP9Jo/LjA3REOIwZI2s2Q3kAywNWnMVJ8H3/0P/rk4IGs/K\nuuInUJnEzrYLjIa1YeJ+ctKS7HfncghpCFCdcLG3oA5M9j+xLIO1BfyXTcMnOSMF\nqaIaHo8gWGT6aV5dNb0iZoO7kyjAB6Bi7dvyJMwhS/ku4vKcu0vvsgLv1hwweAfj\nM7r9ngt0P0FaQTOCUpqGtj3twhncNEA1aGeFU69IjGwo0iwU0W0Wq+4FlZezKaNd\nJC0O8B1R5XDDoGHi+lBVz20deRlybffOelIIUwM5nuOfT4MnYNjxsRu/UlhwQy0=\n=JdiT\n-----END PGP SIGNATURE-----\n", "payload": "tree 2edb40f81756dd73b76aaca2c7f733a4331c5eee\nparent fdbc4ce686f814c5149b6a35ac442b7fb36255cf\nparent 047421e69efa88f1a5f65c39b1562063ab859436\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561061668 +0200\ncommitter GitHub <noreply@github.com> 1561061668 +0200\n\nRollup merge of #61996 - Xanewok:unescape-raw-strings, r=matklad\n\nAdd unit tests for unescaping raw (byte) strings\n\nAdds unit tests for functionality introduced in #60793.\n\nr? @matklad @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9ecfae5a5de432696ead26c296247fbe3d9b8d", "html_url": "https://github.com/rust-lang/rust/commit/7e9ecfae5a5de432696ead26c296247fbe3d9b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e9ecfae5a5de432696ead26c296247fbe3d9b8d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdbc4ce686f814c5149b6a35ac442b7fb36255cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbc4ce686f814c5149b6a35ac442b7fb36255cf", "html_url": "https://github.com/rust-lang/rust/commit/fdbc4ce686f814c5149b6a35ac442b7fb36255cf"}, {"sha": "047421e69efa88f1a5f65c39b1562063ab859436", "url": "https://api.github.com/repos/rust-lang/rust/commits/047421e69efa88f1a5f65c39b1562063ab859436", "html_url": "https://github.com/rust-lang/rust/commit/047421e69efa88f1a5f65c39b1562063ab859436"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "87cc9c1c9e323efd1b9dee8bc763eb1400889d20", "filename": "src/libsyntax/parse/unescape.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e9ecfae5a5de432696ead26c296247fbe3d9b8d/src%2Flibsyntax%2Fparse%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e9ecfae5a5de432696ead26c296247fbe3d9b8d/src%2Flibsyntax%2Fparse%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape.rs?ref=7e9ecfae5a5de432696ead26c296247fbe3d9b8d", "patch": "@@ -569,4 +569,34 @@ mod tests {\n         check(\"hello \\\\\\r\\n     world\", b\"hello world\");\n         check(\"thread's\", b\"thread's\")\n     }\n+\n+    #[test]\n+    fn test_unescape_raw_str() {\n+        fn check(literal: &str, expected: &[(Range<usize>, Result<char, EscapeError>)]) {\n+            let mut unescaped = Vec::with_capacity(literal.len());\n+            unescape_raw_str(literal, &mut |range, res| unescaped.push((range, res)));\n+            assert_eq!(unescaped, expected);\n+        }\n+\n+        check(\"\\r\\n\", &[(0..2, Ok('\\n'))]);\n+        check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n+        check(\"\\rx\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString)), (1..2, Ok('x'))]);\n+    }\n+\n+    #[test]\n+    fn test_unescape_raw_byte_str() {\n+        fn check(literal: &str, expected: &[(Range<usize>, Result<u8, EscapeError>)]) {\n+            let mut unescaped = Vec::with_capacity(literal.len());\n+            unescape_raw_byte_str(literal, &mut |range, res| unescaped.push((range, res)));\n+            assert_eq!(unescaped, expected);\n+        }\n+\n+        check(\"\\r\\n\", &[(0..2, Ok(byte_from_char('\\n')))]);\n+        check(\"\\r\", &[(0..1, Err(EscapeError::BareCarriageReturnInRawString))]);\n+        check(\"\ud83e\udd80\", &[(0..4, Err(EscapeError::NonAsciiCharInByteString))]);\n+        check(\n+            \"\ud83e\udd80a\",\n+            &[(0..4, Err(EscapeError::NonAsciiCharInByteString)), (4..5, Ok(byte_from_char('a')))],\n+        );\n+    }\n }"}]}