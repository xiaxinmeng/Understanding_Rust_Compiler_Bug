{"sha": "d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "node_id": "C_kwDOAAsO6NoAKGQ3YzY0NTc0ZTAzZjFkNDRjMGE5ZTIwMGI3ZGJlYmE5OGM1MGQ4YjM", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-22T16:39:17Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Implement IntoDiagnosticArg for rustc_ast::token::Token(Kind)", "tree": {"sha": "8919fb00645f33b14da43004f27e50a70b65de78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8919fb00645f33b14da43004f27e50a70b65de78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "html_url": "https://github.com/rust-lang/rust/commit/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37fdcb4b364aeb8164a21a39dac984eb1e772872", "url": "https://api.github.com/repos/rust-lang/rust/commits/37fdcb4b364aeb8164a21a39dac984eb1e772872", "html_url": "https://github.com/rust-lang/rust/commit/37fdcb4b364aeb8164a21a39dac984eb1e772872"}], "stats": {"total": 139, "additions": 73, "deletions": 66}, "files": [{"sha": "6d34cdce3408f3b4fbb44400004690bc29beeb78", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -291,11 +291,11 @@ parser_inner_doc_comment_not_permitted = expected outer doc comment\n     .label_does_not_annotate_this = the inner doc comment doesn't annotate this {$item}\n     .sugg_change_inner_to_outer = to annotate the {$item}, change the doc comment from inner to outer style\n \n-parser_expected_identifier_found_reserved_identifier_str = expected identifier, found reserved identifier `{$token_str}`\n-parser_expected_identifier_found_keyword_str = expected identifier, found keyword `{$token_str}`\n-parser_expected_identifier_found_reserved_keyword_str = expected identifier, found reserved keyword `{$token_str}`\n-parser_expected_identifier_found_doc_comment_str = expected identifier, found doc comment `{$token_str}`\n-parser_expected_identifier_found_str = expected identifier, found `{$token_str}`\n+parser_expected_identifier_found_reserved_identifier_str = expected identifier, found reserved identifier `{$token}`\n+parser_expected_identifier_found_keyword_str = expected identifier, found keyword `{$token}`\n+parser_expected_identifier_found_reserved_keyword_str = expected identifier, found reserved keyword `{$token}`\n+parser_expected_identifier_found_doc_comment_str = expected identifier, found doc comment `{$token}`\n+parser_expected_identifier_found_str = expected identifier, found `{$token}`\n \n parser_expected_identifier_found_reserved_identifier = expected identifier, found reserved identifier\n parser_expected_identifier_found_keyword = expected identifier, found keyword\n@@ -307,11 +307,11 @@ parser_sugg_escape_to_use_as_identifier = escape `{$ident_name}` to use it as an\n \n parser_sugg_remove_comma = remove this comma\n \n-parser_expected_semi_found_reserved_identifier_str = expected `;`, found reserved identifier `{$token_str}`\n-parser_expected_semi_found_keyword_str = expected `;`, found keyword `{$token_str}`\n-parser_expected_semi_found_reserved_keyword_str = expected `;`, found reserved keyword `{$token_str}`\n-parser_expected_semi_found_doc_comment_str = expected `;`, found doc comment `{$token_str}`\n-parser_expected_semi_found_str = expected `;`, found `{$token_str}`\n+parser_expected_semi_found_reserved_identifier_str = expected `;`, found reserved identifier `{$token}`\n+parser_expected_semi_found_keyword_str = expected `;`, found keyword `{$token}`\n+parser_expected_semi_found_reserved_keyword_str = expected `;`, found reserved keyword `{$token}`\n+parser_expected_semi_found_doc_comment_str = expected `;`, found doc comment `{$token}`\n+parser_expected_semi_found_str = expected `;`, found `{$token}`\n \n parser_sugg_change_this_to_semi = change this to `;`\n parser_sugg_add_semi = add `;` here"}, {"sha": "5520e22e4767c720b8b3eb63dd28d2e2b7ac87fb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -183,6 +183,18 @@ impl IntoDiagnosticArg for ast::Path {\n     }\n }\n \n+impl IntoDiagnosticArg for ast::token::Token {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_to_string(&self))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for ast::token::TokenKind {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(pprust::token_kind_to_string(&self))\n+    }\n+}\n+\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n #[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]"}, {"sha": "98fee997427270d42f2f4459c55bb6c6440e7b21", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -1,11 +1,12 @@\n+use rustc_ast::token::Token;\n use rustc_ast::Path;\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, Symbol};\n \n-use crate::parser::{TokenDescription, TokenDescriptionKind};\n+use crate::parser::TokenDescription;\n \n #[derive(Diagnostic)]\n #[diag(parser::maybe_report_ambiguous_plus)]\n@@ -572,7 +573,7 @@ pub(crate) struct FoundExprWouldBeStmt {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    pub token: String,\n+    pub token: Token,\n     #[subdiagnostic]\n     pub suggestion: ExprParenthesesNeeded,\n }\n@@ -871,7 +872,7 @@ pub(crate) struct SuffixedLiteralInAttribute {\n pub(crate) struct InvalidMetaItem {\n     #[primary_span]\n     pub span: Span,\n-    pub token: String,\n+    pub token: Token,\n }\n \n #[derive(Subdiagnostic)]\n@@ -908,22 +909,22 @@ pub(crate) enum ExpectedIdentifierFound {\n }\n \n impl ExpectedIdentifierFound {\n-    pub fn new(token_descr_kind: Option<TokenDescriptionKind>, span: Span) -> Self {\n-        (match token_descr_kind {\n-            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+    pub fn new(token_descr: Option<TokenDescription>, span: Span) -> Self {\n+        (match token_descr {\n+            Some(TokenDescription::ReservedIdentifier) => {\n                 ExpectedIdentifierFound::ReservedIdentifier\n             }\n-            Some(TokenDescriptionKind::Keyword) => ExpectedIdentifierFound::Keyword,\n-            Some(TokenDescriptionKind::ReservedKeyword) => ExpectedIdentifierFound::ReservedKeyword,\n-            Some(TokenDescriptionKind::DocComment) => ExpectedIdentifierFound::DocComment,\n+            Some(TokenDescription::Keyword) => ExpectedIdentifierFound::Keyword,\n+            Some(TokenDescription::ReservedKeyword) => ExpectedIdentifierFound::ReservedKeyword,\n+            Some(TokenDescription::DocComment) => ExpectedIdentifierFound::DocComment,\n             None => ExpectedIdentifierFound::Other,\n         })(span)\n     }\n }\n \n pub(crate) struct ExpectedIdentifier {\n     pub span: Span,\n-    pub token_descr: TokenDescription,\n+    pub token: Token,\n     pub suggest_raw: Option<SuggEscapeToUseAsIdentifier>,\n     pub suggest_remove_comma: Option<SuggRemoveComma>,\n }\n@@ -933,29 +934,31 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n         self,\n         handler: &'a rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n-        let mut diag = handler.struct_diagnostic(match self.token_descr.kind {\n-            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+        let token_descr = super::parser::TokenDescription::from_token(&self.token);\n+\n+        let mut diag = handler.struct_diagnostic(match token_descr {\n+            Some(TokenDescription::ReservedIdentifier) => {\n                 fluent::parser::expected_identifier_found_reserved_identifier_str\n             }\n-            Some(TokenDescriptionKind::Keyword) => {\n+            Some(TokenDescription::Keyword) => {\n                 fluent::parser::expected_identifier_found_keyword_str\n             }\n-            Some(TokenDescriptionKind::ReservedKeyword) => {\n+            Some(TokenDescription::ReservedKeyword) => {\n                 fluent::parser::expected_identifier_found_reserved_keyword_str\n             }\n-            Some(TokenDescriptionKind::DocComment) => {\n+            Some(TokenDescription::DocComment) => {\n                 fluent::parser::expected_identifier_found_doc_comment_str\n             }\n             None => fluent::parser::expected_identifier_found_str,\n         });\n         diag.set_span(self.span);\n-        diag.set_arg(\"token_str\", self.token_descr.name);\n+        diag.set_arg(\"token\", self.token);\n \n         if let Some(sugg) = self.suggest_raw {\n             sugg.add_to_diagnostic(&mut diag);\n         }\n \n-        ExpectedIdentifierFound::new(self.token_descr.kind, self.span).add_to_diagnostic(&mut diag);\n+        ExpectedIdentifierFound::new(token_descr, self.span).add_to_diagnostic(&mut diag);\n \n         if let Some(sugg) = self.suggest_remove_comma {\n             sugg.add_to_diagnostic(&mut diag);\n@@ -967,7 +970,7 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n \n pub(crate) struct ExpectedSemi {\n     pub span: Span,\n-    pub token_descr: TokenDescription,\n+    pub token: Token,\n \n     pub unexpected_token_label: Option<Span>,\n     pub sugg: ExpectedSemiSugg,\n@@ -978,21 +981,23 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedSemi {\n         self,\n         handler: &'a rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n-        let mut diag = handler.struct_diagnostic(match self.token_descr.kind {\n-            Some(TokenDescriptionKind::ReservedIdentifier) => {\n+        let token_descr = super::parser::TokenDescription::from_token(&self.token);\n+\n+        let mut diag = handler.struct_diagnostic(match token_descr {\n+            Some(TokenDescription::ReservedIdentifier) => {\n                 fluent::parser::expected_semi_found_reserved_identifier_str\n             }\n-            Some(TokenDescriptionKind::Keyword) => fluent::parser::expected_semi_found_keyword_str,\n-            Some(TokenDescriptionKind::ReservedKeyword) => {\n+            Some(TokenDescription::Keyword) => fluent::parser::expected_semi_found_keyword_str,\n+            Some(TokenDescription::ReservedKeyword) => {\n                 fluent::parser::expected_semi_found_reserved_keyword_str\n             }\n-            Some(TokenDescriptionKind::DocComment) => {\n+            Some(TokenDescription::DocComment) => {\n                 fluent::parser::expected_semi_found_doc_comment_str\n             }\n             None => fluent::parser::expected_semi_found_str,\n         });\n         diag.set_span(self.span);\n-        diag.set_arg(\"token_str\", self.token_descr.name);\n+        diag.set_arg(\"token\", self.token);\n \n         if let Some(unexpected_token_label) = self.unexpected_token_label {\n             diag.span_label(unexpected_token_label, fluent::parser::label_unexpected_token);"}, {"sha": "58be348883c0c765a89982ca871c57fbce731ad2", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -4,7 +4,6 @@ use super::{AttrWrapper, Capturing, FnParseMode, ForceCollect, Parser, PathStyle\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Delimiter, Nonterminal};\n-use rustc_ast_pretty::pprust;\n use rustc_errors::{error_code, fluent, Diagnostic, IntoDiagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n@@ -414,8 +413,7 @@ impl<'a> Parser<'a> {\n             Err(err) => err.cancel(),\n         }\n \n-        let token = pprust::token_to_string(&self.token).to_string();\n-        Err(InvalidMetaItem { span: self.token.span, token }\n+        Err(InvalidMetaItem { span: self.token.span, token: self.token.clone() }\n             .into_diagnostic(&self.sess.span_diagnostic))\n     }\n }"}, {"sha": "b512f26335f6c9af58aa46ea21791869f00f898f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -326,7 +326,7 @@ impl<'a> Parser<'a> {\n \n         let err = ExpectedIdentifier {\n             span: self.token.span,\n-            token_descr: super::token_descr_struct(&self.token),\n+            token: self.token.clone(),\n             suggest_raw,\n             suggest_remove_comma,\n         };\n@@ -426,7 +426,7 @@ impl<'a> Parser<'a> {\n                 //   let y = 42;\n                 self.sess.emit_err(ExpectedSemi {\n                     span: self.token.span,\n-                    token_descr: super::token_descr_struct(&self.token),\n+                    token: self.token.clone(),\n                     unexpected_token_label: None,\n                     sugg: ExpectedSemiSugg::ChangeToSemi(self.token.span),\n                 });\n@@ -451,7 +451,7 @@ impl<'a> Parser<'a> {\n                 let span = self.prev_token.span.shrink_to_hi();\n                 self.sess.emit_err(ExpectedSemi {\n                     span,\n-                    token_descr: super::token_descr_struct(&self.token),\n+                    token: self.token.clone(),\n                     unexpected_token_label: Some(self.token.span),\n                     sugg: ExpectedSemiSugg::AddSemi(span),\n                 });"}, {"sha": "8b328e593ae807c791f6801e9450227015cf8d82", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -430,8 +430,7 @@ impl<'a> Parser<'a> {\n     fn error_found_expr_would_be_stmt(&self, lhs: &Expr) {\n         self.sess.emit_err(FoundExprWouldBeStmt {\n             span: self.token.span,\n-            // FIXME(#100717)\n-            token: pprust::token_to_string(&self.token).to_string(),\n+            token: self.token.clone(),\n             suggestion: ExprParenthesesNeeded::surrounding(lhs.span),\n         });\n     }"}, {"sha": "2aebaf7c3af2acbce9a2761a69dfe8d6db7fabb6", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=d7c64574e03f1d44c0a9e200b7dbeba98c50d8b3", "patch": "@@ -411,40 +411,33 @@ pub enum FollowedByType {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq)]\n-pub enum TokenDescriptionKind {\n+pub enum TokenDescription {\n     ReservedIdentifier,\n     Keyword,\n     ReservedKeyword,\n     DocComment,\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n-pub struct TokenDescription {\n-    pub kind: Option<TokenDescriptionKind>,\n-    pub name: String,\n-}\n-\n-pub(super) fn token_descr_struct(token: &Token) -> TokenDescription {\n-    let kind = match token.kind {\n-        _ if token.is_special_ident() => Some(TokenDescriptionKind::ReservedIdentifier),\n-        _ if token.is_used_keyword() => Some(TokenDescriptionKind::Keyword),\n-        _ if token.is_unused_keyword() => Some(TokenDescriptionKind::ReservedKeyword),\n-        token::DocComment(..) => Some(TokenDescriptionKind::DocComment),\n-        _ => None,\n-    };\n-    let name = pprust::token_to_string(token).to_string();\n-\n-    TokenDescription { kind, name }\n+impl TokenDescription {\n+    pub fn from_token(token: &Token) -> Option<Self> {\n+        match token.kind {\n+            _ if token.is_special_ident() => Some(TokenDescription::ReservedIdentifier),\n+            _ if token.is_used_keyword() => Some(TokenDescription::Keyword),\n+            _ if token.is_unused_keyword() => Some(TokenDescription::ReservedKeyword),\n+            token::DocComment(..) => Some(TokenDescription::DocComment),\n+            _ => None,\n+        }\n+    }\n }\n \n pub(super) fn token_descr(token: &Token) -> String {\n-    let TokenDescription { kind, name } = token_descr_struct(token);\n+    let name = pprust::token_to_string(token).to_string();\n \n-    let kind = kind.map(|kind| match kind {\n-        TokenDescriptionKind::ReservedIdentifier => \"reserved identifier\",\n-        TokenDescriptionKind::Keyword => \"keyword\",\n-        TokenDescriptionKind::ReservedKeyword => \"reserved keyword\",\n-        TokenDescriptionKind::DocComment => \"doc comment\",\n+    let kind = TokenDescription::from_token(token).map(|kind| match kind {\n+        TokenDescription::ReservedIdentifier => \"reserved identifier\",\n+        TokenDescription::Keyword => \"keyword\",\n+        TokenDescription::ReservedKeyword => \"reserved keyword\",\n+        TokenDescription::DocComment => \"doc comment\",\n     });\n \n     if let Some(kind) = kind { format!(\"{} `{}`\", kind, name) } else { format!(\"`{}`\", name) }"}]}