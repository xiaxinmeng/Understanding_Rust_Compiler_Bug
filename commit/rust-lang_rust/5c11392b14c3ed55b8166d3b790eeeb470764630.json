{"sha": "5c11392b14c3ed55b8166d3b790eeeb470764630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTEzOTJiMTRjM2VkNTViODE2NmQzYjc5MGVlZWI0NzA3NjQ2MzA=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-02T00:33:05Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-12-02T00:35:05Z"}, "message": "Redo the docs for Vec::set_len\n\nInspired by the recent conversation on IRLO.", "tree": {"sha": "ddcbba6f1bcde6a102a5d71c42f19d920bf45b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddcbba6f1bcde6a102a5d71c42f19d920bf45b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c11392b14c3ed55b8166d3b790eeeb470764630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c11392b14c3ed55b8166d3b790eeeb470764630", "html_url": "https://github.com/rust-lang/rust/commit/5c11392b14c3ed55b8166d3b790eeeb470764630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c11392b14c3ed55b8166d3b790eeeb470764630/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca", "html_url": "https://github.com/rust-lang/rust/commit/aef4dbfaa7df8221cb4e99cbda1299b47b1c2aca"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "4ff38247dae24f6c8d6891793432eac74a2bc3c5", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 53, "deletions": 27, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5c11392b14c3ed55b8166d3b790eeeb470764630/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c11392b14c3ed55b8166d3b790eeeb470764630/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=5c11392b14c3ed55b8166d3b790eeeb470764630", "patch": "@@ -748,28 +748,64 @@ impl<T> Vec<T> {\n         self\n     }\n \n-    /// Sets the length of a vector.\n+    /// Forces the length of a vector to a particular value.\n     ///\n-    /// This will explicitly set the size of the vector, without actually\n-    /// modifying its buffers, so it is up to the caller to ensure that the\n-    /// vector is actually the specified size.\n+    /// This is a low-level operation that maintains none of the normal\n+    /// invariants of the type.  Normally changing the length of a `Vec`\n+    /// is done using one of the safe operations instead, such as\n+    /// [`truncate`], [`resize`], [`extend`], or [`clear`].\n     ///\n-    /// # Examples\n+    /// [`truncate`]: #method.truncate\n+    /// [`resize`]: #method.resize\n+    /// [`extend`]: #method.extend-1\n+    /// [`clear`]: #method.clear\n     ///\n-    /// ```\n-    /// use std::ptr;\n+    /// # Safety\n     ///\n-    /// let mut vec = vec!['r', 'u', 's', 't'];\n+    /// - `new_len` must be less than or equal to `capacity()`.\n+    /// - All elements between past the previous end up to the `new_len`\n+    ///   must be initialized.\n     ///\n-    /// unsafe {\n-    ///     ptr::drop_in_place(&mut vec[3]);\n-    ///     vec.set_len(3);\n+    /// # Examples\n+    ///\n+    /// This method can be useful for situations in which the `Vec` is\n+    /// serving as a buffer for other code, particularly over FFI:\n+    ///\n+    /// ```no_run\n+    /// # #![allow(dead_code)]\n+    /// # // This is just a minimal skeleton for the doc example;\n+    /// # // don't use this as a starting point for a real library.\n+    /// # pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n+    /// # const Z_OK: i32 = 0;\n+    /// # extern \"C\" {\n+    /// #     fn deflateGetDictionary(\n+    /// #         strm: *mut std::ffi::c_void,\n+    /// #         dictionary: *mut u8,\n+    /// #         dictLength: *mut usize,\n+    /// #     ) -> i32;\n+    /// # }\n+    /// # impl StreamWrapper {\n+    /// pub fn get_dictionary(&self) -> Option<Vec<u8>> {\n+    ///     // Per the docs, \"32768 bytes is always enough\".\n+    ///     let mut dict = Vec::with_capacity(32_768);\n+    ///     let mut dict_length = 0;\n+    ///     unsafe {\n+    ///         // Make the FFI call...\n+    ///         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n+    ///         if r == Z_OK {\n+    ///             // ...and update the length to what was initialized.\n+    ///             dict.set_len(dict_length);\n+    ///             Some(dict)\n+    ///         } else {\n+    ///             None\n+    ///         }\n+    ///     }\n     /// }\n-    /// assert_eq!(vec, ['r', 'u', 's']);\n+    /// # }\n     /// ```\n     ///\n-    /// In this example, there is a memory leak since the memory locations\n-    /// owned by the inner vectors were not freed prior to the `set_len` call:\n+    /// While the following example is sound, there is a memory leak since\n+    /// the inner vectors were not freed prior to the `set_len` call:\n     ///\n     /// ```\n     /// let mut vec = vec![vec![1, 0, 0],\n@@ -780,21 +816,11 @@ impl<T> Vec<T> {\n     /// }\n     /// ```\n     ///\n-    /// In this example, the vector gets expanded from zero to four items\n-    /// without any memory allocations occurring, resulting in vector\n-    /// values of unallocated memory:\n-    ///\n-    /// ```\n-    /// let mut vec: Vec<char> = Vec::new();\n-    ///\n-    /// unsafe {\n-    ///     vec.set_len(4);\n-    /// }\n-    /// ```\n+    /// (Instead, one would normally use [`clear`] in this situation.)\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn set_len(&mut self, len: usize) {\n-        self.len = len;\n+    pub unsafe fn set_len(&mut self, new_len: usize) {\n+        self.len = new_len;\n     }\n \n     /// Removes an element from the vector and returns it."}]}