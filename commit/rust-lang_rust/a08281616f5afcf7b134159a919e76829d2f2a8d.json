{"sha": "a08281616f5afcf7b134159a919e76829d2f2a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwODI4MTYxNmY1YWZjZjdiMTM0MTU5YTkxOWU3NjgyOWQyZjJhOGQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-26T18:13:02Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-26T21:08:16Z"}, "message": "More perf tweaks (issue #2719)", "tree": {"sha": "3d53d60ca402c3e94a7487ba36cdddfe1a67bed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d53d60ca402c3e94a7487ba36cdddfe1a67bed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08281616f5afcf7b134159a919e76829d2f2a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08281616f5afcf7b134159a919e76829d2f2a8d", "html_url": "https://github.com/rust-lang/rust/commit/a08281616f5afcf7b134159a919e76829d2f2a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08281616f5afcf7b134159a919e76829d2f2a8d/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51468b65a48e7e897ff7ac080c33efb7b5ce289d", "url": "https://api.github.com/repos/rust-lang/rust/commits/51468b65a48e7e897ff7ac080c33efb7b5ce289d", "html_url": "https://github.com/rust-lang/rust/commit/51468b65a48e7e897ff7ac080c33efb7b5ce289d"}], "stats": {"total": 91, "additions": 70, "deletions": 21}, "files": [{"sha": "84a4981fb3c149cc9218be5593e987fd69c0a90e", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -161,7 +161,6 @@ impl extensions<A> for dvec<A> {\n         vec::push(self.data, t);\n     }\n \n-\n     #[doc = \"Remove and return the first element\"]\n     fn shift() -> A {\n         self.borrow { |v|"}, {"sha": "39322f68ad741e6b37ea843e69b75d86bc56d877", "filename": "src/libcore/io.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -52,7 +52,7 @@ impl reader_util for reader {\n                 i += 1u;\n                 assert (w > 0u);\n                 if w == 1u {\n-                    chars += [ b0 as char ]/~;\n+                    vec::push(chars,  b0 as char );\n                     cont;\n                 }\n                 // can't satisfy this char with the existing data\n@@ -71,7 +71,7 @@ impl reader_util for reader {\n                 // See str::char_at\n                 val += ((b0 << ((w + 1u) as u8)) as uint)\n                     << (w - 1u) * 6u - w - 1u;\n-                chars += [ val as char ]/~;\n+                vec::push(chars,  val as char );\n             }\n             ret (i, 0u);\n         }\n@@ -86,7 +86,7 @@ impl reader_util for reader {\n                 // we're split in a unicode char?\n                 break;\n             }\n-            buf += data;\n+            vec::push_all(buf, data);\n             let (offset, nbreq) = chars_from_buf(buf, chars);\n             let ncreq = n - vec::len(chars);\n             // again we either know we need a certain number of bytes\n@@ -110,11 +110,11 @@ impl reader_util for reader {\n     }\n \n     fn read_line() -> str {\n-        let mut buf: [u8]/~ = []/~;\n+        let mut buf = []/~;\n         loop {\n             let ch = self.read_byte();\n             if ch == -1 || ch == 10 { break; }\n-            buf += [ch as u8]/~;\n+            vec::push(buf, ch as u8);\n         }\n         str::from_bytes(buf)\n     }\n@@ -123,7 +123,7 @@ impl reader_util for reader {\n         let mut buf: [u8]/~ = []/~;\n         loop {\n             let ch = self.read_byte();\n-            if ch < 1 { break; } else { buf += [ch as u8]/~; }\n+            if ch < 1 { break; } else { vec::push(buf, ch as u8); }\n         }\n         str::from_bytes(buf)\n     }\n@@ -158,7 +158,7 @@ impl reader_util for reader {\n \n     fn read_whole_stream() -> [u8]/~ {\n         let mut buf: [u8]/~ = []/~;\n-        while !self.eof() { buf += self.read_bytes(2048u); }\n+        while !self.eof() { vec::push_all(buf, self.read_bytes(2048u)); }\n         buf\n     }\n \n@@ -453,7 +453,7 @@ fn u64_to_le_bytes<T>(n: u64, size: uint, f: fn([u8]/&) -> T) -> T {\n \n         let mut bytes: [u8]/~ = []/~, i = size, n = n;\n         while i > 0u {\n-            bytes += [(n & 255_u64) as u8]/~;\n+            vec::push(bytes, (n & 255_u64) as u8);\n             n >>= 8_u64;\n             i -= 1u;\n         }\n@@ -485,7 +485,7 @@ fn u64_to_be_bytes<T>(n: u64, size: uint, f: fn([u8]/&) -> T) -> T {\n         let mut i = size;\n         while i > 0u {\n             let shift = ((i - 1u) * 8u) as u64;\n-            bytes += [(n >> shift) as u8]/~;\n+            vec::push(bytes, (n >> shift) as u8);\n             i -= 1u;\n         }\n         f(bytes)"}, {"sha": "0367398c5d08f5a3e20928cab6e8e5d417127615", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -122,7 +122,7 @@ Convert a vector of bytes to a UTF-8 string\n \n Fails if invalid UTF-8\n \"]\n-pure fn from_bytes(vv: [u8]/~) -> str {\n+pure fn from_bytes(+vv: [u8]/~) -> str {\n     assert is_utf8(vv);\n     ret unsafe { unsafe::from_bytes(vv) };\n }\n@@ -1750,9 +1750,9 @@ mod unsafe {\n \n    Does not verify that the vector contains valid UTF-8.\n    \"]\n-   unsafe fn from_bytes(v: [const u8]/~) -> str {\n+   unsafe fn from_bytes(+v: [const u8]/~) -> str {\n        unsafe {\n-           let mut vcopy = ::unsafe::transmute(copy v);\n+           let mut vcopy = ::unsafe::transmute(v);\n            vec::push(vcopy, 0u8);\n            ::unsafe::transmute(vcopy)\n        }"}, {"sha": "be402f317a1fb02487df6f271e0dddceb1877134", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -384,13 +384,12 @@ fn shift<T>(&v: [T]/~) -> T {\n         let mut rr;\n         {\n             let vv = unsafe::to_ptr(vv);\n-            let mut r <- *vv;\n+            rr <- *vv;\n \n             for uint::range(1u, ln) {|i|\n                 let r <- *ptr::offset(vv, i);\n                 push(v, r);\n             }\n-            rr <- r;\n         }\n         unsafe::set_len(vv, 0u);\n "}, {"sha": "823900ac55bdfdae8101b8b22dcff64abf2d50bb", "filename": "src/test/bench/core-std.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -0,0 +1,48 @@\n+// Microbenchmarks for various functions in core and std\n+\n+use std;\n+\n+import std::time::precise_time_s;\n+\n+import io::{reader, reader_util};\n+\n+fn main() {\n+    #macro[\n+        [#bench[id],\n+         run_test(#stringify(id), id)]\n+    ];\n+\n+    #bench[shift_push];\n+    #bench[read_line];\n+}\n+\n+fn run_test(name: str, test: fn()) {\n+    let start = precise_time_s();\n+    test();\n+    let stop = precise_time_s();\n+\n+    io::println(#fmt(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f));\n+}\n+\n+fn shift_push() {\n+    let mut v1 = vec::from_elem(30000, 1);\n+    let mut v2 = []/~;\n+\n+    while v1.len() > 0 {\n+        vec::push(v2, vec::shift(v1));\n+    }\n+}\n+\n+fn read_line() {\n+    let path = path::connect(\n+        #env(\"CFG_SRC_DIR\"),\n+        \"src/test/bench/shootout-k-nucleotide.data\"\n+    );\n+\n+    for int::range(0, 3) {|_i|\n+        let reader = result::get(io::file_reader(path));\n+        while !reader.eof() {\n+            reader.read_line();\n+        }\n+    }\n+}"}, {"sha": "e83b660b9bba217127f411a0460538add9a56e27", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08281616f5afcf7b134159a919e76829d2f2a8d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=a08281616f5afcf7b134159a919e76829d2f2a8d", "patch": "@@ -62,29 +62,32 @@ fn find(mm: hashmap<[u8]/~, uint>, key: str) -> uint {\n }\n \n // given a map, increment the counter for a key\n-fn update_freq(mm: hashmap<[u8]/~, uint>, key: [u8]/~) {\n-   alt mm.find(key) {\n+fn update_freq(mm: hashmap<[u8]/~, uint>, key: [u8]/&) {\n+    let key = vec::slice(key, 0, key.len());\n+    alt mm.find(key) {\n       option::none      { mm.insert(key, 1u      ); }\n       option::some(val) { mm.insert(key, 1u + val); }\n-   }\n+    }\n }\n \n // given a [u8]/~, for each window call a function\n // i.e., for \"hello\" and windows of size four,\n // run it(\"hell\") and it(\"ello\"), then return \"llo\"\n-fn windows_with_carry(bb: [const u8]/~, nn: uint, it: fn(window: [u8]/~)) -> [u8]/~ {\n+fn windows_with_carry(bb: [const u8]/~, nn: uint,\n+                      it: fn(window: [u8]/&)) -> [u8]/~ {\n    let mut ii = 0u;\n \n    let len = vec::len(bb);\n    while ii < len - (nn - 1u) {\n-      it(vec::slice(bb, ii, ii+nn));\n+      it(vec::view(bb, ii, ii+nn));\n       ii += 1u;\n    }\n \n    ret vec::slice(bb, len - (nn - 1u), len); \n }\n \n-fn make_sequence_processor(sz: uint, from_parent: comm::port<[u8]/~>, to_parent: comm::chan<str>) {\n+fn make_sequence_processor(sz: uint, from_parent: comm::port<[u8]/~>,\n+                           to_parent: comm::chan<str>) {\n    \n    let freqs: hashmap<[u8]/~, uint> = map::bytes_hash();\n    let mut carry: [u8]/~ = []/~;"}]}