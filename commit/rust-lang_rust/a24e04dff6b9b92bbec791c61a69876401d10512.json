{"sha": "a24e04dff6b9b92bbec791c61a69876401d10512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGUwNGRmZjZiOWI5MmJiZWM3OTFjNjFhNjk4NzY0MDFkMTA1MTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-19T00:13:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:06Z"}, "message": "say \"the lifetime\" instead of \"some lifetime\" when it feels right\n\nIn particular, when we want to indicate that there is a connection\nbetween the self type and the other types.", "tree": {"sha": "07fe5b5ea663020329ccfbe0fd7561a529c8c737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fe5b5ea663020329ccfbe0fd7561a529c8c737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24e04dff6b9b92bbec791c61a69876401d10512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24e04dff6b9b92bbec791c61a69876401d10512", "html_url": "https://github.com/rust-lang/rust/commit/a24e04dff6b9b92bbec791c61a69876401d10512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24e04dff6b9b92bbec791c61a69876401d10512/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc3f5585aef5eba62f752eaaf89247972769109", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc3f5585aef5eba62f752eaaf89247972769109", "html_url": "https://github.com/rust-lang/rust/commit/7bc3f5585aef5eba62f752eaaf89247972769109"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "07a61eb6d776ee92391565b997efcbb2dac2014c", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=a24e04dff6b9b92bbec791c61a69876401d10512", "patch": "@@ -95,7 +95,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n                 ty::RePlaceholder(_),\n             )) => {\n                 // I actually can't see why this would be the case ever.\n-            },\n+            }\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(TypeTrace {\n@@ -219,6 +219,10 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n             }\n         });\n \n+        let self_ty_has_vid = self\n+            .tcx\n+            .any_free_region_meets(&actual_trait_ref.self_ty(), |r| Some(r) == vid);\n+\n         RegionHighlightMode::maybe_highlighting_region(sub_placeholder, has_sub, || {\n             RegionHighlightMode::maybe_highlighting_region(sup_placeholder, has_sup, || {\n                 match (has_sub, has_sup) {\n@@ -254,12 +258,21 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n \n         RegionHighlightMode::maybe_highlighting_region(vid, has_vid, || match has_vid {\n             Some(n) => {\n-                err.note(&format!(\n-                    \"but `{}` only implements `{}` for some lifetime `'{}`\",\n-                    actual_trait_ref.self_ty(),\n-                    actual_trait_ref,\n-                    n\n-                ));\n+                if self_ty_has_vid {\n+                    err.note(&format!(\n+                        \"but `{}` only implements `{}` for the lifetime `'{}`\",\n+                        actual_trait_ref.self_ty(),\n+                        actual_trait_ref,\n+                        n\n+                    ));\n+                } else {\n+                    err.note(&format!(\n+                        \"but `{}` only implements `{}` for some lifetime `'{}`\",\n+                        actual_trait_ref.self_ty(),\n+                        actual_trait_ref,\n+                        n\n+                    ));\n+                }\n             }\n             None => {\n                 err.note(&format!("}, {"sha": "1b4dfe2df1c0c92948ee58447895766f3e9a44f4", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=a24e04dff6b9b92bbec791c61a69876401d10512", "patch": "@@ -5,7 +5,7 @@ LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n    = note: `&'0 OnlyFooIfStaticRef` must implement `Foo` for any lifetime `'0`\n-   = note: but `&'1 OnlyFooIfStaticRef` only implements `Foo` for some lifetime `'1`\n+   = note: but `&'1 OnlyFooIfStaticRef` only implements `Foo` for the lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/auto-trait-regions.rs:48:5\n@@ -14,7 +14,7 @@ LL |     assert_foo(gen);\n    |     ^^^^^^^^^^\n    |\n    = note: `A<'0, '1>` must implement `Foo` for any two lifetimes `'0` and `'1`\n-   = note: but `A<'_, '2>` only implements `Foo` for some lifetime `'2`\n+   = note: but `A<'_, '2>` only implements `Foo` for the lifetime `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "094c449802415ff757f5c99263d5beef76f4bcc2", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=a24e04dff6b9b92bbec791c61a69876401d10512", "patch": "@@ -16,7 +16,7 @@ LL |     want_hrtb::<&'a u32>() //~ ERROR\n    |\n    = note: Due to a where-clause on `want_hrtb`,\n    = note: `&'a u32` must implement `Foo<&'0 isize>` for any lifetime `'0`\n-   = note: but `&'1 u32` only implements `Foo<&'1 isize>` for some lifetime `'1`\n+   = note: but `&'1 u32` only implements `Foo<&'1 isize>` for the lifetime `'1`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1329d331a18130cc6dd419714c187b17d1ef095", "filename": "src/test/ui/issues/issue-54302-cases.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54302-cases.stderr?ref=a24e04dff6b9b92bbec791c61a69876401d10512", "patch": "@@ -5,7 +5,7 @@ LL |     <u32 as RefFoo<u32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'0 u32` must implement `Foo<'static, u32>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:69:5\n@@ -14,7 +14,7 @@ LL |     <i32 as RefFoo<i32>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'0 i32` must implement `Foo<'static, i32>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:75:5\n@@ -23,7 +23,7 @@ LL |     <u64 as RefFoo<u64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'0 u64` must implement `Foo<'static, u64>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/issue-54302-cases.rs:81:5\n@@ -32,7 +32,7 @@ LL |     <i64 as RefFoo<i64>>::ref_foo(a)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `&'0 i64` must implement `Foo<'static, i64>` for any lifetime `'0`\n-   = note: but `&'1 _` only implements `Foo<'_, _>` for some lifetime `'1`\n+   = note: but `&'1 _` only implements `Foo<'_, _>` for the lifetime `'1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "afc80bf4d8ee653b040ed3adea2e65d1b99391cf", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a24e04dff6b9b92bbec791c61a69876401d10512/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=a24e04dff6b9b92bbec791c61a69876401d10512", "patch": "@@ -6,7 +6,7 @@ LL |     foo(&X); //~ ERROR implementation of `Bar` is not general enough\n    |\n    = note: Due to a where-clause on `foo`,\n    = note: `&'0 _` must implement `Bar` for any lifetime `'0`\n-   = note: but `&'1 u32` only implements `Bar` for some lifetime `'1`\n+   = note: but `&'1 u32` only implements `Bar` for the lifetime `'1`\n \n error: aborting due to previous error\n "}]}