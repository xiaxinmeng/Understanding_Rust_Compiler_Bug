{"sha": "34ee63e93bd763326e676bd634f6f17a8f77791d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZWU2M2U5M2JkNzYzMzI2ZTY3NmJkNjM0ZjZmMTdhOGY3Nzc5MWQ=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-04T10:03:58Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-04T10:03:58Z"}, "message": "std::cell: Modernize constructors\n\nPart of #3853", "tree": {"sha": "844bf025d2763daf4913cd7ae965803c20e0e2a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/844bf025d2763daf4913cd7ae965803c20e0e2a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ee63e93bd763326e676bd634f6f17a8f77791d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ee63e93bd763326e676bd634f6f17a8f77791d", "html_url": "https://github.com/rust-lang/rust/commit/34ee63e93bd763326e676bd634f6f17a8f77791d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ee63e93bd763326e676bd634f6f17a8f77791d/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133d45171564c8b7de14523c9f3aa87140b9f043", "url": "https://api.github.com/repos/rust-lang/rust/commits/133d45171564c8b7de14523c9f3aa87140b9f043", "html_url": "https://github.com/rust-lang/rust/commit/133d45171564c8b7de14523c9f3aa87140b9f043"}], "stats": {"total": 304, "additions": 152, "deletions": 152}, "files": [{"sha": "c40cec262f822ff33a279845a72c52bdbaa496a9", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -260,7 +260,7 @@ pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n \n pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n     use core::cell::Cell;\n-    let config = Cell(copy *config);\n-    let testfile = Cell(testfile.to_str());\n+    let config = Cell::new(copy *config);\n+    let testfile = Cell::new(testfile.to_str());\n     test::DynTestFn(|| { runtest::run(config.take(), testfile.take()) })\n }"}, {"sha": "15c24052563b45b581daa35341cf74ffa823ceca", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -558,7 +558,7 @@ mod tests {\n             let arc = ~MutexARC(false);\n             let arc2 = ~arc.clone();\n             let (p,c) = comm::oneshot();\n-            let (c,p) = (Cell(c), Cell(p));\n+            let (c,p) = (Cell::new(c), Cell::new(p));\n             do task::spawn || {\n                 // wait until parent gets in\n                 comm::recv_one(p.take());"}, {"sha": "5efd6c33804a8f9f3ca20b42df5b9f824d480f2c", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -791,8 +791,8 @@ mod test {\n \n         let addr0 = ip::v4::parse_addr(\"127.0.0.1\");\n \n-        let begin_connect_chan = Cell(begin_connect_chan);\n-        let accept_chan = Cell(accept_chan);\n+        let begin_connect_chan = Cell::new(begin_connect_chan);\n+        let accept_chan = Cell::new(accept_chan);\n \n         // The server task\n         let addr = copy addr0;"}, {"sha": "40cfeebd5dcd8b869dceb5717c3c60732662211d", "filename": "src/libextra/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -109,7 +109,7 @@ pub fn from_port<A:Owned>(port: PortOne<A>) -> Future<A> {\n      * waiting for the result to be received on the port.\n      */\n \n-    let port = Cell(port);\n+    let port = Cell::new(port);\n     do from_fn {\n         recv_one(port.take())\n     }\n@@ -137,7 +137,7 @@ pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n \n     let (port, chan) = oneshot();\n \n-    let chan = Cell(chan);\n+    let chan = Cell::new(chan);\n     do task::spawn {\n         let chan = chan.take();\n         send_one(chan, blk());\n@@ -204,7 +204,7 @@ mod test {\n     #[test]\n     fn test_sendable_future() {\n         let expected = \"schlorf\";\n-        let f = Cell(do spawn { expected });\n+        let f = Cell::new(do spawn { expected });\n         do task::spawn {\n             let mut f = f.take();\n             let actual = f.get();"}, {"sha": "87ebfdfb7976c25433fb9d1cc9c91875992f1c3c", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -1830,7 +1830,7 @@ mod test {\n         let (server_po, server_ch) = stream::<~str>();\n         let server_ch = SharedChan::new(server_ch);\n         let server_ip_addr = ip::v4::parse_addr(server_ip);\n-        let resp_cell = Cell(resp);\n+        let resp_cell = Cell::new(resp);\n         let listen_result = listen(server_ip_addr, server_port, 128,\n                                    iotask,\n             // on_establish_cb -- called when listener is set up\n@@ -1842,7 +1842,7 @@ mod test {\n             // risky to run this on the loop, but some users\n             // will want the POWER\n             |new_conn, kill_ch| {\n-                let resp_cell2 = Cell(resp_cell.take());\n+                let resp_cell2 = Cell::new(resp_cell.take());\n                 debug!(\"SERVER: new connection!\");\n                 let (cont_po, cont_ch) = stream();\n                 let server_ch = server_ch.clone();"}, {"sha": "96ad629ea83744d0d26cb3676ab22fe677fba00d", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -105,7 +105,7 @@ mod test_rc {\n \n     #[test]\n     fn test_clone() {\n-        let x = rc_from_owned(Cell(5));\n+        let x = rc_from_owned(Cell::new(5));\n         let y = x.clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;\n@@ -115,7 +115,7 @@ mod test_rc {\n \n     #[test]\n     fn test_deep_clone() {\n-        let x = rc_from_owned(Cell(5));\n+        let x = rc_from_owned(Cell::new(5));\n         let y = x.deep_clone();\n         do x.borrow().with_mut_ref |inner| {\n             *inner = 20;"}, {"sha": "8f09ddea9ba78d5dd31dd5268d988ab441f1fcc7", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -818,7 +818,7 @@ mod tests {\n             let s = ~semaphore(1);\n             let s2 = ~s.clone();\n             let (p,c) = comm::stream();\n-            let child_data = Cell((s2, c));\n+            let child_data = Cell::new((s2, c));\n             do s.access {\n                 let (s2, c) = child_data.take();\n                 do task::spawn || {\n@@ -999,7 +999,7 @@ mod tests {\n             let mut sibling_convos = ~[];\n             for 2.times {\n                 let (p,c) = comm::stream();\n-                let c = Cell(c);\n+                let c = Cell::new(c);\n                 sibling_convos.push(p);\n                 let mi = ~m2.clone();\n                 // spawn sibling task"}, {"sha": "6a9751b66e01e46ef9c74413d0151e1479b002f5", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -568,7 +568,7 @@ pub fn run_test(force_ignore: bool,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: SharedChan<MonitorMsg>,\n                       testfn: ~fn()) {\n-        let testfn_cell = ::core::cell::Cell(testfn);\n+        let testfn_cell = ::core::cell::Cell::new(testfn);\n         do task::spawn {\n             let mut result_future = None; // task::future_result(builder);\n "}, {"sha": "f251336666309d6f1180d927b0a49c076a8a4a52", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -282,7 +282,7 @@ mod test {\n \n         for (times as uint).times {\n             let mut rng = rand::rng();\n-            let expected = Cell(rng.gen_str(16u));\n+            let expected = Cell::new(rng.gen_str(16u));\n             let (test_po, test_ch) = stream::<~str>();\n             let hl_loop_clone = hl_loop.clone();\n             do task::spawn() {"}, {"sha": "b2fd998b73fd2cc389815ff66e4976bc4324c29e", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -347,7 +347,7 @@ impl TPrep for Prep {\n             _ => {\n                 let (port, chan) = oneshot();\n                 let blk = replace(&mut bo, None).unwrap();\n-                let chan = Cell(chan);\n+                let chan = Cell::new(chan);\n \n                 do task::spawn {\n                     let exe = Exec {"}, {"sha": "b004e6080468bba5d70e4cb953981f75e7c54dab", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -546,7 +546,7 @@ use middle::typeck::infer::cres;\n use util::common::indenter;\n use util::ppaux::note_and_explain_region;\n \n-use core::cell::{Cell, empty_cell};\n+use core::cell::Cell;\n use core::hashmap::{HashMap, HashSet};\n use core::to_bytes;\n use core::uint;\n@@ -633,7 +633,7 @@ pub fn RegionVarBindings(tcx: ty::ctxt) -> RegionVarBindings {\n     RegionVarBindings {\n         tcx: tcx,\n         var_spans: ~[],\n-        values: empty_cell(),\n+        values: Cell::new_empty(),\n         constraints: HashMap::new(),\n         lubs: HashMap::new(),\n         glbs: HashMap::new(),"}, {"sha": "c4fc377bc8bf7d4c8c7530a6b8f12d9c73ff0941", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -65,8 +65,8 @@ fn run<T>(owner: SrvOwner<T>, source: ~str, parse: Parser) -> T {\n \n     let (po, ch) = stream();\n \n-    let source = Cell(source);\n-    let parse = Cell(parse);\n+    let source = Cell::new(source);\n+    let parse = Cell::new(parse);\n     do task::spawn {\n         act(&po, source.take(), parse.take());\n     }"}, {"sha": "691f0dfedc4caa11099c6b0510725ac334f6ab95", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -178,7 +178,7 @@ fn config_from_opts(\n             }\n         }\n     };\n-    let process_output = Cell(process_output);\n+    let process_output = Cell::new(process_output);\n     let result = do result::chain(result) |config| {\n         let pandoc_cmd = getopts::opt_maybe_str(matches, opt_pandoc_cmd());\n         let pandoc_cmd = maybe_find_pandoc("}, {"sha": "b17816d4e36525b6932b99e404bd1a4fdd40969e", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -28,7 +28,7 @@ use core::vec;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n-    let writer_factory = Cell(writer_factory);\n+    let writer_factory = Cell::new(writer_factory);\n     Pass {\n         name: ~\"markdown\",\n         f: |srv, doc| run(srv, doc, writer_factory.take())"}, {"sha": "96a67ea32435616227fbf53c9a0b5bdb095068a9", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -23,7 +23,7 @@ use util::NominalOp;\n use core::cell::Cell;\n \n pub fn mk_pass(name: ~str, op: @fn(&str) -> ~str) -> Pass {\n-    let op = Cell(op);\n+    let op = Cell::new(op);\n     Pass {\n         name: copy name,\n         f: |srv: astsrv::Srv, doc: doc::Doc| -> doc::Doc {"}, {"sha": "56a87eb805579b7c7f4ee823cb414ed6a203d28e", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -365,8 +365,8 @@ pub fn run_line(repl: &mut Repl, in: @io::Reader, out: @io::Writer, line: ~str,\n         }\n     }\n \n-    let line = Cell(line);\n-    let r = Cell(copy *repl);\n+    let line = Cell::new(line);\n+    let r = Cell::new(copy *repl);\n     let result = do task::try {\n         run(r.take(), line.take())\n     };"}, {"sha": "e1d2b246dd3704c9983958163ca9d175443f15fe", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -29,17 +29,17 @@ pub struct Cell<T> {\n     priv value: Option<T>\n }\n \n-/// Creates a new full cell with the given value.\n-pub fn Cell<T>(value: T) -> Cell<T> {\n-    Cell { value: Some(value) }\n-}\n+impl<T> Cell<T> {\n+    /// Creates a new full cell with the given value.\n+    pub fn new(value: T) -> Cell<T> {\n+        Cell { value: Some(value) }\n+    }\n \n-/// Creates a new empty cell with no value inside.\n-pub fn empty_cell<T>() -> Cell<T> {\n-    Cell { value: None }\n-}\n+    /// Creates a new empty cell with no value inside.\n+    pub fn new_empty() -> Cell<T> {\n+        Cell { value: None }\n+    }\n \n-impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     pub fn take(&self) -> T {\n         let this = unsafe { transmute_mut(self) };\n@@ -83,7 +83,7 @@ impl<T> Cell<T> {\n \n #[test]\n fn test_basic() {\n-    let value_cell = Cell(~10);\n+    let value_cell = Cell::new(~10);\n     assert!(!value_cell.is_empty());\n     let value = value_cell.take();\n     assert!(value == ~10);\n@@ -96,22 +96,22 @@ fn test_basic() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_take_empty() {\n-    let value_cell = empty_cell::<~int>();\n+    let value_cell = Cell::new_empty::<~int>();\n     value_cell.take();\n }\n \n #[test]\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_put_back_non_empty() {\n-    let value_cell = Cell(~10);\n+    let value_cell = Cell::new(~10);\n     value_cell.put_back(~20);\n }\n \n #[test]\n fn test_with_ref() {\n     let good = 6;\n-    let c = Cell(~[1, 2, 3, 4, 5, 6]);\n+    let c = Cell::new(~[1, 2, 3, 4, 5, 6]);\n     let l = do c.with_ref() |v| { v.len() };\n     assert_eq!(l, good);\n }\n@@ -120,7 +120,7 @@ fn test_with_ref() {\n fn test_with_mut_ref() {\n     let good = ~[1, 2, 3];\n     let v = ~[1, 2];\n-    let c = Cell(v);\n+    let c = Cell::new(v);\n     do c.with_mut_ref() |v| { v.push(3); }\n     let v = c.take();\n     assert_eq!(v, good);"}, {"sha": "8a8f31bbdfa52ec732b2c87b509876112ffa75ca", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -309,8 +309,8 @@ pub struct Port<T> {\n \n pub fn stream<T: Owned>() -> (Port<T>, Chan<T>) {\n     let (pone, cone) = oneshot();\n-    let port = Port { next: Cell(pone) };\n-    let chan = Chan { next: Cell(cone) };\n+    let port = Port { next: Cell::new(pone) };\n+    let chan = Chan { next: Cell::new(cone) };\n     return (port, chan);\n }\n \n@@ -483,7 +483,7 @@ mod test {\n     fn oneshot_multi_task_recv_then_send() {\n         do run_in_newsched_task {\n             let (port, chan) = oneshot::<~int>();\n-            let port_cell = Cell(port);\n+            let port_cell = Cell::new(port);\n             do spawntask_immediately {\n                 assert!(port_cell.take().recv() == ~10);\n             }\n@@ -496,8 +496,8 @@ mod test {\n     fn oneshot_multi_task_recv_then_close() {\n         do run_in_newsched_task {\n             let (port, chan) = oneshot::<~int>();\n-            let port_cell = Cell(port);\n-            let chan_cell = Cell(chan);\n+            let port_cell = Cell::new(port);\n+            let chan_cell = Cell::new(chan);\n             do spawntask_later {\n                 let _cell = chan_cell.take();\n             }\n@@ -513,7 +513,7 @@ mod test {\n         for stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n-                let port_cell = Cell(port);\n+                let port_cell = Cell::new(port);\n                 let _thread = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n@@ -527,8 +527,8 @@ mod test {\n         for stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n-                let chan_cell = Cell(chan);\n-                let port_cell = Cell(port);\n+                let chan_cell = Cell::new(chan);\n+                let port_cell = Cell::new(port);\n                 let _thread1 = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n@@ -545,17 +545,17 @@ mod test {\n         for stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n-                let chan_cell = Cell(chan);\n-                let port_cell = Cell(port);\n+                let chan_cell = Cell::new(chan);\n+                let port_cell = Cell::new(port);\n                 let _thread1 = do spawntask_thread {\n-                    let port_cell = Cell(port_cell.take());\n+                    let port_cell = Cell::new(port_cell.take());\n                     let res = do spawntask_try {\n                         port_cell.take().recv();\n                     };\n                     assert!(res.is_err());\n                 };\n                 let _thread2 = do spawntask_thread {\n-                    let chan_cell = Cell(chan_cell.take());\n+                    let chan_cell = Cell::new(chan_cell.take());\n                     do spawntask {\n                         chan_cell.take();\n                     }\n@@ -569,8 +569,8 @@ mod test {\n         for stress_factor().times {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<~int>();\n-                let chan_cell = Cell(chan);\n-                let port_cell = Cell(port);\n+                let chan_cell = Cell::new(chan);\n+                let port_cell = Cell::new(port);\n                 let _thread1 = do spawntask_thread {\n                     chan_cell.take().send(~10);\n                 };\n@@ -593,7 +593,7 @@ mod test {\n                 fn send(chan: Chan<~int>, i: int) {\n                     if i == 10 { return }\n \n-                    let chan_cell = Cell(chan);\n+                    let chan_cell = Cell::new(chan);\n                     let _thread = do spawntask_thread {\n                         let chan = chan_cell.take();\n                         chan.send(~i);\n@@ -604,7 +604,7 @@ mod test {\n                 fn recv(port: Port<~int>, i: int) {\n                     if i == 10 { return }\n \n-                    let port_cell = Cell(port);\n+                    let port_cell = Cell::new(port);\n                     let _thread = do spawntask_thread {\n                         let port = port_cell.take();\n                         assert!(port.recv() == ~i);"}, {"sha": "7d6d89ce9979ffe27cde6c1b0a1ce6d07f8e544b", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -604,7 +604,7 @@ mod test {\n     #[test]\n     fn read_byte_0_bytes() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -652,7 +652,7 @@ mod test {\n     #[test]\n     fn read_bytes_partial() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -691,7 +691,7 @@ mod test {\n     #[test]\n     fn push_bytes_partial() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -725,7 +725,7 @@ mod test {\n     #[test]\n     fn push_bytes_error() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -754,7 +754,7 @@ mod test {\n         // push_bytes unsafely sets the vector length. This is testing that\n         // upon failure the length is reset correctly.\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -779,7 +779,7 @@ mod test {\n     #[test]\n     fn read_to_end() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {\n@@ -806,7 +806,7 @@ mod test {\n     #[ignore(cfg(windows))]\n     fn read_to_end_error() {\n         let mut reader = MockReader::new();\n-        let count = Cell(0);\n+        let count = Cell::new(0);\n         reader.read = |buf| {\n             do count.with_mut_ref |count| {\n                 if *count == 0 {"}, {"sha": "3607f781da3ffb359b5f100123cefd767c4d83f1", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -287,7 +287,7 @@ mod test {\n             do spawntask_immediately {\n                 let mut listener = TcpListener::bind(addr);\n                 for int::range(0, MAX) |i| {\n-                    let stream = Cell(listener.accept());\n+                    let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection\n                     do spawntask_immediately {\n@@ -326,7 +326,7 @@ mod test {\n             do spawntask_immediately {\n                 let mut listener = TcpListener::bind(addr);\n                 for int::range(0, MAX) |_| {\n-                    let stream = Cell(listener.accept());\n+                    let stream = Cell::new(listener.accept());\n                     rtdebug!(\"accepted\");\n                     // Start another task to handle the connection\n                     do spawntask_later {"}, {"sha": "0db903f81eec7fb7ff9b8a54d354ae50e845bdaa", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -79,7 +79,7 @@ pub unsafe fn borrow<T>(f: &fn(&mut T)) {\n \n     // XXX: Need a different abstraction from 'finally' here to avoid unsafety\n     let unsafe_ptr = cast::transmute_mut_region(&mut *value);\n-    let value_cell = Cell(value);\n+    let value_cell = Cell::new(value);\n \n     do (|| {\n         f(unsafe_ptr);"}, {"sha": "5b60543344de1304868ba1505b8d3fe94e3fe5f0", "filename": "src/libstd/rt/message_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmessage_queue.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -30,7 +30,7 @@ impl<T: Owned> MessageQueue<T> {\n \n     pub fn push(&mut self, value: T) {\n         unsafe {\n-            let value = Cell(value);\n+            let value = Cell::new(value);\n             self.queue.with(|q| q.push(value.take()) );\n         }\n     }"}, {"sha": "f9f433b9416b476abd2d2830d65b6a0be0b7682a", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -194,7 +194,7 @@ pub fn context() -> RuntimeContext {\n         return OldTaskContext;\n     } else {\n         if Local::exists::<Scheduler>() {\n-            let context = ::cell::empty_cell();\n+            let context = ::cell::Cell::new_empty();\n             do Local::borrow::<Scheduler> |sched| {\n                 if sched.in_task_context() {\n                     context.put_back(TaskContext);\n@@ -231,7 +231,7 @@ fn test_context() {\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then() |task| {\n                 assert_eq!(context(), SchedulerContext);\n-                let task = Cell(task);\n+                let task = Cell::new(task);\n                 do Local::borrow::<Scheduler> |sched| {\n                     sched.enqueue_task(task.take());\n                 }"}, {"sha": "929b44f79b5d9c40f2ba316d878d13501703345b", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -146,7 +146,7 @@ impl Scheduler {\n         rtdebug!(\"ending running task\");\n \n         do self.deschedule_running_task_and_then |dead_task| {\n-            let dead_task = Cell(dead_task);\n+            let dead_task = Cell::new(dead_task);\n             do Local::borrow::<Scheduler> |sched| {\n                 dead_task.take().recycle(&mut sched.stack_pool);\n             }\n@@ -159,7 +159,7 @@ impl Scheduler {\n         assert!(self.in_task_context());\n \n         do self.switch_running_tasks_and_then(task) |last_task| {\n-            let last_task = Cell(last_task);\n+            let last_task = Cell::new(last_task);\n             do Local::borrow::<Scheduler> |sched| {\n                 sched.enqueue_task(last_task.take());\n             }\n@@ -170,7 +170,7 @@ impl Scheduler {\n         assert!(self.in_task_context());\n \n         do self.switch_running_tasks_and_then(task) |last_task| {\n-            let last_task = Cell(last_task);\n+            let last_task = Cell::new(last_task);\n             do Local::borrow::<Scheduler> |sched| {\n                 sched.enqueue_task(last_task.take());\n             }\n@@ -462,7 +462,7 @@ mod test {\n                 };\n                 // Context switch directly to the new task\n                 do sched.switch_running_tasks_and_then(task2) |task1| {\n-                    let task1 = Cell(task1);\n+                    let task1 = Cell::new(task1);\n                     do Local::borrow::<Scheduler> |sched| {\n                         sched.enqueue_task(task1.take());\n                     }\n@@ -516,7 +516,7 @@ mod test {\n                 let sched = Local::take::<Scheduler>();\n                 assert!(sched.in_task_context());\n                 do sched.deschedule_running_task_and_then() |task| {\n-                    let task = Cell(task);\n+                    let task = Cell::new(task);\n                     do Local::borrow::<Scheduler> |sched| {\n                         assert!(!sched.in_task_context());\n                         sched.enqueue_task(task.take());\n@@ -539,7 +539,7 @@ mod test {\n                 let sched = Local::take::<Scheduler>();\n                 do sched.deschedule_running_task_and_then |task| {\n                     let mut sched = Local::take::<Scheduler>();\n-                    let task = Cell(task);\n+                    let task = Cell::new(task);\n                     do sched.event_loop.callback_ms(10) {\n                         rtdebug!(\"in callback\");\n                         let mut sched = Local::take::<Scheduler>();"}, {"sha": "453eab09730ee390110b2dbbf8437e72c2ddd53f", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -25,7 +25,7 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     use unstable::run_in_bare_thread;\n     use rt::uv::uvio::UvEventLoop;\n \n-    let f = Cell(f);\n+    let f = Cell::new(f);\n \n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n@@ -46,7 +46,7 @@ pub fn spawntask(f: ~fn()) {\n                                      ~Task::without_unwinding(),\n                                      f);\n     do sched.switch_running_tasks_and_then(task) |task| {\n-        let task = Cell(task);\n+        let task = Cell::new(task);\n         let sched = Local::take::<Scheduler>();\n         sched.schedule_new_task(task.take());\n     }\n@@ -61,7 +61,7 @@ pub fn spawntask_immediately(f: ~fn()) {\n                                      ~Task::without_unwinding(),\n                                      f);\n     do sched.switch_running_tasks_and_then(task) |task| {\n-        let task = Cell(task);\n+        let task = Cell::new(task);\n         do Local::borrow::<Scheduler> |sched| {\n             sched.enqueue_task(task.take());\n         }\n@@ -96,7 +96,7 @@ pub fn spawntask_random(f: ~fn()) {\n \n     if run_now {\n         do sched.switch_running_tasks_and_then(task) |task| {\n-            let task = Cell(task);\n+            let task = Cell::new(task);\n             do Local::borrow::<Scheduler> |sched| {\n                 sched.enqueue_task(task.take());\n             }\n@@ -120,10 +120,10 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n     let failed_ptr: *mut bool = &mut failed;\n \n     // Switch to the scheduler\n-    let f = Cell(Cell(f));\n+    let f = Cell::new(Cell::new(f));\n     let sched = Local::take::<Scheduler>();\n     do sched.deschedule_running_task_and_then() |old_task| {\n-        let old_task = Cell(old_task);\n+        let old_task = Cell::new(old_task);\n         let f = f.take();\n         let mut sched = Local::take::<Scheduler>();\n         let new_task = ~do Coroutine::new(&mut sched.stack_pool) {\n@@ -134,7 +134,7 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n                 unsafe { *failed_ptr = task::failing(); }\n                 let sched = Local::take::<Scheduler>();\n                 do sched.switch_running_tasks_and_then(old_task.take()) |new_task| {\n-                    let new_task = Cell(new_task);\n+                    let new_task = Cell::new(new_task);\n                     do Local::borrow::<Scheduler> |sched| {\n                         sched.enqueue_task(new_task.take());\n                     }\n@@ -153,7 +153,7 @@ pub fn spawntask_thread(f: ~fn()) -> Thread {\n     use rt::sched::*;\n     use rt::uv::uvio::UvEventLoop;\n \n-    let f = Cell(f);\n+    let f = Cell::new(f);\n     let thread = do Thread::start {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~Coroutine::with_task(&mut sched.stack_pool,"}, {"sha": "03e11dfad1d8d2b492d91be50fe356308de0dfaa", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -105,7 +105,7 @@ mod test {\n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n             let tube_clone = tube.clone();\n-            let tube_clone_cell = Cell(tube_clone);\n+            let tube_clone_cell = Cell::new(tube_clone);\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then |task| {\n                 let mut tube_clone = tube_clone_cell.take();\n@@ -123,7 +123,7 @@ mod test {\n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n             let tube_clone = tube.clone();\n-            let tube_clone = Cell(Cell(Cell(tube_clone)));\n+            let tube_clone = Cell::new(Cell::new(Cell::new(tube_clone)));\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then |task| {\n                 let tube_clone = tube_clone.take();\n@@ -151,15 +151,15 @@ mod test {\n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n             let tube_clone = tube.clone();\n-            let tube_clone = Cell(tube_clone);\n+            let tube_clone = Cell::new(tube_clone);\n             let sched = Local::take::<Scheduler>();\n             do sched.deschedule_running_task_and_then |task| {\n                 callback_send(tube_clone.take(), 0);\n \n                 fn callback_send(tube: Tube<int>, i: int) {\n                     if i == 100 { return; }\n \n-                    let tube = Cell(Cell(tube));\n+                    let tube = Cell::new(Cell::new(tube));\n                     do Local::borrow::<Scheduler> |sched| {\n                         let tube = tube.take();\n                         do sched.event_loop.callback {"}, {"sha": "4571747cebf6c54048d7b131b4346e1ef01528ef", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -374,7 +374,7 @@ mod test {\n                 let client_tcp_watcher = TcpWatcher::new(&mut loop_);\n                 let mut client_tcp_watcher = client_tcp_watcher.as_stream();\n                 server_stream_watcher.accept(client_tcp_watcher);\n-                let count_cell = Cell(0);\n+                let count_cell = Cell::new(0);\n                 let server_stream_watcher = server_stream_watcher;\n                 rtdebug!(\"starting read\");\n                 let alloc: AllocCallback = |size| {\n@@ -414,11 +414,11 @@ mod test {\n                     let mut stream_watcher = stream_watcher;\n                     let msg = ~[0, 1, 2, 3, 4, 5, 6 ,7 ,8, 9];\n                     let buf = slice_to_uv_buf(msg);\n-                    let msg_cell = Cell(msg);\n+                    let msg_cell = Cell::new(msg);\n                     do stream_watcher.write(buf) |stream_watcher, status| {\n                         rtdebug!(\"writing\");\n                         assert!(status.is_none());\n-                        let msg_cell = Cell(msg_cell.take());\n+                        let msg_cell = Cell::new(msg_cell.take());\n                         stream_watcher.close(||ignore(msg_cell.take()));\n                     }\n                 }"}, {"sha": "964ee460c1d2e44c3ea1009cbb588c4d9b1e6cf8", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -11,7 +11,7 @@\n use option::*;\n use result::*;\n use ops::Drop;\n-use cell::{Cell, empty_cell};\n+use cell::Cell;\n use cast::transmute;\n use clone::Clone;\n use rt::io::IoError;\n@@ -115,7 +115,7 @@ impl IoFactory for UvIoFactory {\n     fn tcp_connect(&mut self, addr: IpAddr) -> Result<~RtioTcpStreamObject, IoError> {\n         // Create a cell in the task to hold the result. We will fill\n         // the cell before resuming the task.\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<~RtioTcpStreamObject, IoError>> = &result_cell;\n \n         let scheduler = Local::take::<Scheduler>();\n@@ -129,7 +129,7 @@ impl IoFactory for UvIoFactory {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut tcp_watcher = TcpWatcher::new(self.uv_loop());\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n \n             // Wait for a connection\n             do tcp_watcher.connect(addr) |stream_watcher, status| {\n@@ -146,7 +146,7 @@ impl IoFactory for UvIoFactory {\n                     scheduler.resume_task_immediately(task_cell.take());\n                 } else {\n                     rtdebug!(\"status is some\");\n-                    let task_cell = Cell(task_cell.take());\n+                    let task_cell = Cell::new(task_cell.take());\n                     do stream_watcher.close {\n                         let res = Err(uv_error_to_io_error(status.get()));\n                         unsafe { (*result_cell_ptr).put_back(res); }\n@@ -168,7 +168,7 @@ impl IoFactory for UvIoFactory {\n             Err(uverr) => {\n                 let scheduler = Local::take::<Scheduler>();\n                 do scheduler.deschedule_running_task_and_then |task| {\n-                    let task_cell = Cell(task);\n+                    let task_cell = Cell::new(task);\n                     do watcher.as_stream().close {\n                         let scheduler = Local::take::<Scheduler>();\n                         scheduler.resume_task_immediately(task_cell.take());\n@@ -204,7 +204,7 @@ impl Drop for UvTcpListener {\n         let watcher = self.watcher();\n         let scheduler = Local::take::<Scheduler>();\n         do scheduler.deschedule_running_task_and_then |task| {\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             do watcher.as_stream().close {\n                 let scheduler = Local::take::<Scheduler>();\n                 scheduler.resume_task_immediately(task_cell.take());\n@@ -225,9 +225,9 @@ impl RtioTcpListener for UvTcpListener {\n         self.listening = true;\n \n         let server_tcp_watcher = self.watcher();\n-        let incoming_streams_cell = Cell(self.incoming_streams.clone());\n+        let incoming_streams_cell = Cell::new(self.incoming_streams.clone());\n \n-        let incoming_streams_cell = Cell(incoming_streams_cell.take());\n+        let incoming_streams_cell = Cell::new(incoming_streams_cell.take());\n         let mut server_tcp_watcher = server_tcp_watcher;\n         do server_tcp_watcher.listen |server_stream_watcher, status| {\n             let maybe_stream = if status.is_none() {\n@@ -266,7 +266,7 @@ impl Drop for UvTcpStream {\n         let watcher = self.watcher();\n         let scheduler = Local::take::<Scheduler>();\n         do scheduler.deschedule_running_task_and_then |task| {\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             do watcher.close {\n                 let scheduler = Local::take::<Scheduler>();\n                 scheduler.resume_task_immediately(task_cell.take());\n@@ -277,7 +277,7 @@ impl Drop for UvTcpStream {\n \n impl RtioTcpStream for UvTcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> Result<uint, IoError> {\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<uint, IoError>> = &result_cell;\n \n         let scheduler = Local::take::<Scheduler>();\n@@ -290,7 +290,7 @@ impl RtioTcpStream for UvTcpStream {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut watcher = watcher;\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             // XXX: We shouldn't reallocate these callbacks every\n             // call to read\n             let alloc: AllocCallback = |_| unsafe {\n@@ -324,15 +324,15 @@ impl RtioTcpStream for UvTcpStream {\n     }\n \n     fn write(&mut self, buf: &[u8]) -> Result<(), IoError> {\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<(), IoError>> = &result_cell;\n         let scheduler = Local::take::<Scheduler>();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             let mut watcher = watcher;\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             let buf = unsafe { slice_to_uv_buf(*buf_ptr) };\n             do watcher.write(buf) |_watcher, status| {\n                 let result = if status.is_none() {\n@@ -425,7 +425,7 @@ fn test_read_and_block() {\n                 // will trigger a read callback while we are\n                 // not ready for it\n                 do scheduler.deschedule_running_task_and_then |task| {\n-                    let task = Cell(task);\n+                    let task = Cell::new(task);\n                     do Local::borrow::<Scheduler> |scheduler| {\n                         scheduler.enqueue_task(task.take());\n                     }"}, {"sha": "070ccf7fb446d4bd6ca4ba8ae314e372220ae061", "filename": "src/libstd/rt/uvio.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuvio.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -16,7 +16,7 @@ use super::uv::*;\n use super::rtio::*;\n use ops::Drop;\n use old_iter::CopyableIter;\n-use cell::{Cell, empty_cell};\n+use cell::Cell;\n use cast::transmute;\n use super::sched::{Scheduler, local_sched};\n \n@@ -103,7 +103,7 @@ impl IoFactory for UvIoFactory {\n     fn connect(&mut self, addr: IpAddr) -> Option<~StreamObject> {\n         // Create a cell in the task to hold the result. We will fill\n         // the cell before resuming the task.\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n         let scheduler = local_sched::take();\n@@ -117,7 +117,7 @@ impl IoFactory for UvIoFactory {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut tcp_watcher = TcpWatcher::new(self.uv_loop());\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n \n             // Wait for a connection\n             do tcp_watcher.connect(addr) |stream_watcher, status| {\n@@ -175,7 +175,7 @@ impl TcpListener for UvTcpListener {\n \n     fn listen(&mut self) -> Option<~StreamObject> {\n         rtdebug!(\"entering listen\");\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n         let server_tcp_watcher = self.watcher();\n@@ -184,7 +184,7 @@ impl TcpListener for UvTcpListener {\n         assert!(scheduler.in_task_context());\n \n         do scheduler.deschedule_running_task_and_then |task| {\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             let mut server_tcp_watcher = server_tcp_watcher;\n             do server_tcp_watcher.listen |server_stream_watcher, status| {\n                 let maybe_stream = if status.is_none() {\n@@ -239,7 +239,7 @@ impl Drop for UvStream {\n \n impl Stream for UvStream {\n     fn read(&mut self, buf: &mut [u8]) -> Result<uint, ()> {\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<uint, ()>> = &result_cell;\n \n         let scheduler = local_sched::take();\n@@ -252,7 +252,7 @@ impl Stream for UvStream {\n                 assert!(!scheduler.in_task_context());\n             }\n             let mut watcher = watcher;\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             // XXX: We shouldn't reallocate these callbacks every\n             // call to read\n             let alloc: AllocCallback = |_| unsafe {\n@@ -286,15 +286,15 @@ impl Stream for UvStream {\n     }\n \n     fn write(&mut self, buf: &[u8]) -> Result<(), ()> {\n-        let result_cell = empty_cell();\n+        let result_cell = Cell::new_empty();\n         let result_cell_ptr: *Cell<Result<(), ()>> = &result_cell;\n         let scheduler = local_sched::take();\n         assert!(scheduler.in_task_context());\n         let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |task| {\n             let mut watcher = watcher;\n-            let task_cell = Cell(task);\n+            let task_cell = Cell::new(task);\n             let buf = unsafe { &*buf_ptr };\n             // XXX: OMGCOPIES\n             let buf = buf.to_vec();\n@@ -390,7 +390,7 @@ fn test_read_and_block() {\n                 // will trigger a read callback while we are\n                 // not ready for it\n                 do scheduler.deschedule_running_task_and_then |task| {\n-                    let task = Cell(task);\n+                    let task = Cell::new(task);\n                     do local_sched::borrow |scheduler| {\n                         scheduler.task_queue.push_back(task.take());\n                     }"}, {"sha": "cfffc55a58c80c8be03917f7831907109cc6502a", "filename": "src/libstd/rt/work_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fwork_queue.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -30,7 +30,7 @@ impl<T: Owned> WorkQueue<T> {\n \n     pub fn push(&mut self, value: T) {\n         unsafe {\n-            let value = Cell(value);\n+            let value = Cell::new(value);\n             self.queue.with(|q| q.unshift(value.take()) );\n         }\n     }"}, {"sha": "223afbce091b8450a26b93c2141c4585440608a4", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -308,7 +308,7 @@ impl TaskBuilder {\n                 f\n             }\n         };\n-        let prev_gen_body = Cell(prev_gen_body);\n+        let prev_gen_body = Cell::new(prev_gen_body);\n         let next_gen_body = {\n             let f: ~fn(~fn()) -> ~fn() = |body| {\n                 let prev_gen_body = prev_gen_body.take();\n@@ -354,7 +354,7 @@ impl TaskBuilder {\n \n     /// Runs a task, while transfering ownership of one argument to the child.\n     pub fn spawn_with<A:Owned>(&mut self, arg: A, f: ~fn(v: A)) {\n-        let arg = Cell(arg);\n+        let arg = Cell::new(arg);\n         do self.spawn {\n             f(arg.take());\n         }\n@@ -791,9 +791,9 @@ struct Wrapper {\n fn test_add_wrapper() {\n     let (po, ch) = stream::<()>();\n     let mut b0 = task();\n-    let ch = Cell(ch);\n+    let ch = Cell::new(ch);\n     do b0.add_wrapper |body| {\n-        let ch = Cell(ch.take());\n+        let ch = Cell::new(ch.take());\n         let result: ~fn() = || {\n             let ch = ch.take();\n             body();\n@@ -890,10 +890,10 @@ fn test_spawn_sched_childs_on_default_sched() {\n     // Assuming tests run on the default scheduler\n     let default_id = unsafe { rt::rust_get_sched_id() };\n \n-    let ch = Cell(ch);\n+    let ch = Cell::new(ch);\n     do spawn_sched(SingleThreaded) {\n         let parent_sched_id = unsafe { rt::rust_get_sched_id() };\n-        let ch = Cell(ch.take());\n+        let ch = Cell::new(ch.take());\n         do spawn {\n             let ch = ch.take();\n             let child_sched_id = unsafe { rt::rust_get_sched_id() };"}, {"sha": "87e9296657f48b62365731cb79593f5349ed9720", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -594,7 +594,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n         gen_child_taskgroup(opts.linked, opts.supervised);\n \n     unsafe {\n-        let child_data = Cell((child_tg, ancestors, f));\n+        let child_data = Cell::new((child_tg, ancestors, f));\n         // Being killed with the unsafe task/closure pointers would leak them.\n         do unkillable {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n@@ -636,7 +636,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n                           notify_chan: Option<Chan<TaskResult>>,\n                           f: ~fn())\n                        -> ~fn() {\n-        let child_data = Cell((child_arc, ancestors));\n+        let child_data = Cell::new((child_arc, ancestors));\n         let result: ~fn() = || {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n             let mut (child_arc, ancestors) = child_data.take();"}, {"sha": "7819fe00597556352b3b0e6232a715926a6f1a4f", "filename": "src/libstd/unstable/weak_task.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Flibstd%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fweak_task.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -39,7 +39,7 @@ pub unsafe fn weaken_task(f: &fn(Port<ShutdownMsg>)) {\n     let service = global_data_clone_create(global_data_key,\n                                            create_global_service);\n     let (shutdown_port, shutdown_chan) = stream::<ShutdownMsg>();\n-    let shutdown_port = Cell(shutdown_port);\n+    let shutdown_port = Cell::new(shutdown_port);\n     let task = get_task_id();\n     // Expect the weak task service to be alive\n     assert!(service.try_send(RegisterWeakTask(task, shutdown_chan)));\n@@ -68,15 +68,15 @@ fn create_global_service() -> ~WeakTaskService {\n \n     debug!(\"creating global weak task service\");\n     let (port, chan) = stream::<ServiceMsg>();\n-    let port = Cell(port);\n+    let port = Cell::new(port);\n     let chan = SharedChan::new(chan);\n     let chan_clone = chan.clone();\n \n     let mut task = task();\n     task.unlinked();\n     do task.spawn {\n         debug!(\"running global weak task service\");\n-        let port = Cell(port.take());\n+        let port = Cell::new(port.take());\n         do (|| {\n             let port = port.take();\n             // The weak task service is itself a weak task\n@@ -192,7 +192,7 @@ fn test_select_stream_and_oneshot() {\n     use either::{Left, Right};\n \n     let (port, chan) = stream();\n-    let port = Cell(port);\n+    let port = Cell::new(port);\n     let (waitport, waitchan) = stream();\n     do spawn {\n         unsafe {"}, {"sha": "c0e147b2db55660461d08b2f1f2e98502ec284c8", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -84,7 +84,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Cell(num_chan);\n+    let mut num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -94,8 +94,8 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan.take());\n-        let num_port = Cell(num_port);\n+        let num_chan2 = Cell::new(num_chan.take());\n+        let num_port = Cell::new(num_port);\n         let new_future = do future::spawn() {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();"}, {"sha": "d7b05ea635065fc7c8f63f29d9ad4a75d1cc1a92", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -74,7 +74,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_port, num_chan) = ring::init();\n-    let mut num_chan = Cell(num_chan);\n+    let mut num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -84,8 +84,8 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (num_port, new_chan) = ring::init();\n-        let num_chan2 = Cell(num_chan.take());\n-        let num_port = Cell(num_port);\n+        let num_chan2 = Cell::new(num_chan.take());\n+        let num_port = Cell::new(num_port);\n         let new_future = do future::spawn || {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();"}, {"sha": "9aaf565f368347156a0137875ab1a8da17ee4320", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -80,7 +80,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Cell(num_chan);\n+    let mut num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -90,8 +90,8 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan.take());\n-        let num_port = Cell(num_port);\n+        let num_chan2 = Cell::new(num_chan.take());\n+        let num_port = Cell::new(num_port);\n         let new_future = do future::spawn {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();"}, {"sha": "63e4174a0fc7c7c0f12a6d4acb7de53ed8601daa", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -91,7 +91,7 @@ pub fn spawn_service<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = Cell(server);\n+    let server = Cell::new(server);\n     do task::spawn {\n         service(server.take());\n     }\n@@ -112,7 +112,7 @@ pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = Cell(server);\n+    let server = Cell::new(server);\n     do task::spawn {\n         service(server.take())\n     }"}, {"sha": "53b47b12144379d4c58745385ed9d7b5db24ad6f", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -160,7 +160,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n             let to_rendezvous = to_rendezvous.clone();\n             let to_rendezvous_log = to_rendezvous_log.clone();\n             let (from_rendezvous, to_creature) = stream();\n-            let from_rendezvous = Cell(from_rendezvous);\n+            let from_rendezvous = Cell::new(from_rendezvous);\n             do task::spawn || {\n                 creature(ii, col, from_rendezvous.take(), to_rendezvous.clone(),\n                          to_rendezvous_log.clone());"}, {"sha": "e5732b7d5800ec10eafafebf8e384191532d23ef", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -27,7 +27,7 @@ fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    let c = Cell(c);\n+    let c = Cell::new(c);\n     do task::spawn_supervised {\n         let c = c.take();\n         if gens_left & 1 == 1 {"}, {"sha": "5e18a40a99c807005a97f46700046bf720c35caf", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         }\n     }\n \n-    let x = Cell(foo(Port(@())));\n+    let x = Cell::new(foo(Port(@())));\n \n     do task::spawn {\n         let y = x.take();   //~ ERROR value has non-owned type"}, {"sha": "4ef83e405be408160d0aa36d9adb66091bf92afc", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -318,8 +318,8 @@ pub fn main() {\n //    Commented out because of option::get error\n \n     let (client_, server_) = pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n+    let client_ = Cell::new(client_);\n+    let server_ = Cell::new(server_);\n \n     task::spawn {|client_|\n         let client__ = client_.take();"}, {"sha": "abee0f36330e9e0f2b0fae69aae5c4807123f8e7", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let iotask = &uv::global_loop::get();\n \n     let (port, chan) = oneshot::init();\n-    let port = Cell(port);\n+    let port = Cell::new(port);\n     do spawn {\n         match try_recv(port.take()) {\n           Some(*) => { fail!() }"}, {"sha": "ab17607c4d7d56866cd60d416f6abfe391acede6", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -113,8 +113,8 @@ mod test {\n \n pub fn main() {\n     let (server_, client_) = ::pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n+    let client_ = Cell::new(client_);\n+    let server_ = Cell::new(server_);\n     do task::spawn {\n         let client__ = client_.take();\n         test::client(client__);"}, {"sha": "a4268f9456b30b06d3b072742191181eb9311133", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -51,8 +51,8 @@ mod test {\n \n pub fn main() {\n     let (server_, client_) = pingpong::init();\n-    let client_ = Cell(client_);\n-    let server_ = Cell(server_);\n+    let client_ = Cell::new(client_);\n+    let server_ = Cell::new(server_);\n \n     do task::spawn {\n         let client__ = client_.take();"}, {"sha": "0a860d0a1e22c216b145e5e2c3f7189f815e71d2", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -43,7 +43,7 @@ pub fn spawn_service<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = Cell(server);\n+    let server = Cell::new(server);\n     do task::spawn {\n         service(server.take());\n     }"}, {"sha": "dc88f36ba113a6e7609eeb46cc612dcfb7761f1c", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -42,7 +42,7 @@ pub fn spawn_service<T:Owned,Tb:Owned>(\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n-    let server = Cell(server);\n+    let server = Cell::new(server);\n     do task::spawn {\n         service(server.take());\n     }"}, {"sha": "2399aa5b035cc80e22778b75a2277013f335a557", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -23,7 +23,7 @@ fn test05() {\n         error!(*three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };\n-    let fn_to_send = Cell(fn_to_send);\n+    let fn_to_send = Cell::new(fn_to_send);\n     task::spawn(|| {\n         test05_start(fn_to_send.take());\n     });"}, {"sha": "2025a5c304c8f3d9f146e53666f93168c6712a3a", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ee63e93bd763326e676bd634f6f17a8f77791d/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=34ee63e93bd763326e676bd634f6f17a8f77791d", "patch": "@@ -55,7 +55,7 @@ fn joinable(f: ~fn()) -> Port<bool> {\n         *b = true;\n     }\n     let (p, c) = stream();\n-    let c = Cell(c);\n+    let c = Cell::new(c);\n     do task::spawn_unlinked {\n         let ccc = c.take();\n         wrapper(ccc, f)"}]}