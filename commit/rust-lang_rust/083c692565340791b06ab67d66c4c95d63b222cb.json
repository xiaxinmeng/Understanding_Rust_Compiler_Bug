{"sha": "083c692565340791b06ab67d66c4c95d63b222cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4M2M2OTI1NjUzNDA3OTFiMDZhYjY3ZDY2YzRjOTVkNjNiMjIyY2I=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-19T22:39:18Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-19T22:39:18Z"}, "message": "Changed visibility from being on the impl to being on methods per language syntax change.", "tree": {"sha": "2931a9b0e305b63e56b45f90ae69f6314ca9ce80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2931a9b0e305b63e56b45f90ae69f6314ca9ce80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083c692565340791b06ab67d66c4c95d63b222cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083c692565340791b06ab67d66c4c95d63b222cb", "html_url": "https://github.com/rust-lang/rust/commit/083c692565340791b06ab67d66c4c95d63b222cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083c692565340791b06ab67d66c4c95d63b222cb/comments", "author": null, "committer": null, "parents": [{"sha": "d777ba01cbfc01d1241722e2c27fcd4a4650a300", "url": "https://api.github.com/repos/rust-lang/rust/commits/d777ba01cbfc01d1241722e2c27fcd4a4650a300", "html_url": "https://github.com/rust-lang/rust/commit/d777ba01cbfc01d1241722e2c27fcd4a4650a300"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "c88d96bd2306e9f4364494d117332ca5ef0f69aa", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/083c692565340791b06ab67d66c4c95d63b222cb/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083c692565340791b06ab67d66c4c95d63b222cb/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=083c692565340791b06ab67d66c4c95d63b222cb", "patch": "@@ -17,6 +17,7 @@ use rt::uv::{Loop, Watcher, Request, UvError, Buf, NativeHandle, NullCallback,\n              status_to_maybe_uv_error};\n use rt::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::uv::last_uv_error;\n+use vec;\n \n fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n     match addr {\n@@ -161,7 +162,7 @@ pub struct TcpWatcher(*uvll::uv_tcp_t);\n impl Watcher for TcpWatcher { }\n \n impl TcpWatcher {\n-    pub fn new(loop_: &mut Loop) -> TcpWatcher {\n+    pub fn new(loop_: &Loop) -> TcpWatcher {\n         unsafe {\n             let handle = malloc_handle(UV_TCP);\n             assert!(handle.is_not_null());\n@@ -264,8 +265,8 @@ impl NativeHandle<*uvll::uv_tcp_t> for TcpWatcher {\n pub struct UdpWatcher(*uvll::uv_udp_t);\n impl Watcher for UdpWatcher { }\n \n-pub impl UdpWatcher {\n-    fn new(loop_: &mut Loop) -> UdpWatcher {\n+impl UdpWatcher {\n+    pub fn new(loop_: &mut Loop) -> UdpWatcher {\n         unsafe {\n             let handle = malloc_handle(UV_UDP);\n             assert!(handle.is_not_null());\n@@ -276,7 +277,7 @@ pub impl UdpWatcher {\n         }\n     }\n \n-    fn bind(&mut self, address: IpAddr) -> Result<(), UvError> {\n+    pub fn bind(&mut self, address: IpAddr) -> Result<(), UvError> {\n         match address {\n             Ipv4(*) => {\n                 do ip4_as_uv_ip4(address) |addr| {\n@@ -294,7 +295,7 @@ pub impl UdpWatcher {\n         }\n     }\n \n-    fn recv_start(&mut self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n+    pub fn recv_start(&mut self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n         {\n             let data = self.get_watcher_data();\n             data.alloc_cb = Some(alloc);\n@@ -325,12 +326,12 @@ pub impl UdpWatcher {\n         }\n     }\n \n-    fn recv_stop(&mut self) {\n+    pub fn recv_stop(&mut self) {\n         let handle = self.native_handle();\n         unsafe { uvll::udp_recv_stop(handle); }\n     }\n \n-    fn send(&mut self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n+    pub fn send(&mut self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n         {\n             let data = self.get_watcher_data();\n             assert!(data.udp_send_cb.is_none());\n@@ -366,7 +367,7 @@ pub impl UdpWatcher {\n         }\n     }\n \n-    fn close(self, cb: NullCallback) {\n+    pub fn close(self, cb: NullCallback) {\n         {\n             let mut this = self;\n             let data = this.get_watcher_data();\n@@ -470,11 +471,10 @@ impl NativeHandle<*uvll::uv_write_t> for WriteRequest {\n }\n \n pub struct UdpSendRequest(*uvll::uv_udp_send_t);\n-\n impl Request for UdpSendRequest { }\n \n-pub impl UdpSendRequest {\n-    fn new() -> UdpSendRequest {\n+impl UdpSendRequest {\n+    pub fn new() -> UdpSendRequest {\n         let send_handle = unsafe {\n             malloc_req(UV_UDP_SEND)\n         };\n@@ -483,14 +483,14 @@ pub impl UdpSendRequest {\n         UdpSendRequest(send_handle)\n     }\n \n-    fn handle(&self) -> UdpWatcher {\n+    pub fn handle(&self) -> UdpWatcher {\n         unsafe {\n             let udp_handle = uvll::get_udp_handle_from_send_req(self.native_handle());\n             NativeHandle::from_native_handle(udp_handle)\n         }\n     }\n \n-    fn delete(self) {\n+    pub fn delete(self) {\n         unsafe { free_req(self.native_handle() as *c_void) }\n     }\n }"}]}