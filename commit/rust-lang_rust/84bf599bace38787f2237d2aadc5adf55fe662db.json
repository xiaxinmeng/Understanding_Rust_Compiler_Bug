{"sha": "84bf599bace38787f2237d2aadc5adf55fe662db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YmY1OTliYWNlMzg3ODdmMjIzN2QyYWFkYzVhZGY1NWZlNjYyZGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-11T10:49:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-11T11:24:43Z"}, "message": "Add inlining.", "tree": {"sha": "ce0e5f05d3d7580c8e4e885ae5257e7c2b5b29b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0e5f05d3d7580c8e4e885ae5257e7c2b5b29b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84bf599bace38787f2237d2aadc5adf55fe662db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84bf599bace38787f2237d2aadc5adf55fe662db", "html_url": "https://github.com/rust-lang/rust/commit/84bf599bace38787f2237d2aadc5adf55fe662db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84bf599bace38787f2237d2aadc5adf55fe662db/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2", "html_url": "https://github.com/rust-lang/rust/commit/17a07d71bfd692f9b2dad2a566aff52bf3d4bfe2"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "ff28784a1dc4264b3c9f37fa95419028e16550bd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84bf599bace38787f2237d2aadc5adf55fe662db/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf599bace38787f2237d2aadc5adf55fe662db/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=84bf599bace38787f2237d2aadc5adf55fe662db", "patch": "@@ -35,6 +35,7 @@ impl StableHasher {\n         StableHasher { state: SipHasher128::new_with_keys(0, 0) }\n     }\n \n+    #[inline]\n     pub fn finish<W: StableHasherResult>(self) -> W {\n         W::finish(self)\n     }"}, {"sha": "30569f20793fbae6431915bd63d0c43074690f39", "filename": "compiler/rustc_macros/src/hash_stable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84bf599bace38787f2237d2aadc5adf55fe662db/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf599bace38787f2237d2aadc5adf55fe662db/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fhash_stable.rs?ref=84bf599bace38787f2237d2aadc5adf55fe662db", "patch": "@@ -74,6 +74,7 @@ pub fn hash_stable_generic_derive(mut s: synstructure::Structure<'_>) -> proc_ma\n     s.bound_impl(\n         quote!(::rustc_data_structures::stable_hasher::HashStable<__CTX>),\n         quote! {\n+            #[inline]\n             fn hash_stable(\n                 &self,\n                 __hcx: &mut __CTX,\n@@ -119,6 +120,7 @@ pub fn hash_stable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::To\n             >\n         ),\n         quote! {\n+            #[inline]\n             fn hash_stable(\n                 &self,\n                 __hcx: &mut ::rustc_middle::ich::StableHashingContext<'__ctx>,"}, {"sha": "dcdf019266016ca305552baed3fb4680911a26d1", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/84bf599bace38787f2237d2aadc5adf55fe662db/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84bf599bace38787f2237d2aadc5adf55fe662db/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=84bf599bace38787f2237d2aadc5adf55fe662db", "patch": "@@ -548,10 +548,12 @@ mod impls {\n         ($(($ty:ident, $meth:ident),)*) => {$(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Hash for $ty {\n+                #[inline]\n                 fn hash<H: Hasher>(&self, state: &mut H) {\n                     state.$meth(*self)\n                 }\n \n+                #[inline]\n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n                     let newlen = data.len() * mem::size_of::<$ty>();\n                     let ptr = data.as_ptr() as *const u8;\n@@ -582,20 +584,23 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for bool {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write_u8(*self as u8)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for char {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write_u32(*self as u32)\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Hash for str {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             state.write(self.as_bytes());\n             state.write_u8(0xff)\n@@ -604,6 +609,7 @@ mod impls {\n \n     #[stable(feature = \"never_hash\", since = \"1.29.0\")]\n     impl Hash for ! {\n+        #[inline]\n         fn hash<H: Hasher>(&self, _: &mut H) {\n             *self\n         }\n@@ -613,6 +619,7 @@ mod impls {\n         () => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Hash for () {\n+                #[inline]\n                 fn hash<H: Hasher>(&self, _state: &mut H) {}\n             }\n         );\n@@ -621,6 +628,7 @@ mod impls {\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($name: Hash),+> Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n+                #[inline]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n                     let ($(ref $name,)+) = *self;\n                     $($name.hash(state);)+\n@@ -650,6 +658,7 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: Hash> Hash for [T] {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             self.len().hash(state);\n             Hash::hash_slice(self, state)\n@@ -658,20 +667,23 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized + Hash> Hash for &T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized + Hash> Hash for &mut T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             (**self).hash(state);\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *const T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             #[cfg(not(bootstrap))]\n             {\n@@ -701,6 +713,7 @@ mod impls {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Hash for *mut T {\n+        #[inline]\n         fn hash<H: Hasher>(&self, state: &mut H) {\n             #[cfg(not(bootstrap))]\n             {"}]}