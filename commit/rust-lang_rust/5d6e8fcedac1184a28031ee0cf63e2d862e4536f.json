{"sha": "5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNmU4ZmNlZGFjMTE4NGEyODAzMWVlMGNmNjNlMmQ4NjJlNDUzNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-26T13:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-26T13:26:08Z"}, "message": "Auto merge of #31214 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31172, #31177, #31211\n- Failed merges:", "tree": {"sha": "73ca828212a1d995b4cab760b207964f9c6e8231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ca828212a1d995b4cab760b207964f9c6e8231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "html_url": "https://github.com/rust-lang/rust/commit/5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c1a173a874f5513db58b2f5321489a00087484", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c1a173a874f5513db58b2f5321489a00087484", "html_url": "https://github.com/rust-lang/rust/commit/43c1a173a874f5513db58b2f5321489a00087484"}, {"sha": "b6faae11f46b18221555759d3e6fad12cbd0ee97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6faae11f46b18221555759d3e6fad12cbd0ee97", "html_url": "https://github.com/rust-lang/rust/commit/b6faae11f46b18221555759d3e6fad12cbd0ee97"}], "stats": {"total": 157, "additions": 147, "deletions": 10}, "files": [{"sha": "3f1c0f6a5492a1cc8ff81ec1c4511873f3fbea76", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -4252,13 +4252,15 @@ impl<A: Step> RangeFrom<A> {\n     ///\n     /// # Examples\n     ///\n-    /// ```ignore\n-    /// for i in (0u8..).step_by(2) {\n+    /// ```\n+    /// # #![feature(step_by)]\n+    ///\n+    /// for i in (0u8..).step_by(2).take(10) {\n     ///     println!(\"{}\", i);\n     /// }\n     /// ```\n     ///\n-    /// This prints all even `u8` values.\n+    /// This prints the first ten even natural integers (0 to 18).\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {"}, {"sha": "cd2d5e52462bb91b8e63d4bd02e74411ad0ec874", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -112,7 +112,7 @@ impl<W: io::Write> io::Write for Maybe<W> {\n impl<R: io::Read> io::Read for Maybe<R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         match *self {\n-            Maybe::Real(ref mut r) => handle_ebadf(r.read(buf), buf.len()),\n+            Maybe::Real(ref mut r) => handle_ebadf(r.read(buf), 0),\n             Maybe::Fake => Ok(0)\n         }\n     }"}, {"sha": "61f73b00265b836de013c0bdfcb5278f80ab944d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -351,10 +351,15 @@ fn make_dirp(d: Option<&OsString>) -> (*const u16, Vec<u16>) {\n impl Stdio {\n     fn to_handle(&self, stdio_id: c::DWORD) -> io::Result<Handle> {\n         match *self {\n+            // If no stdio handle is available, then inherit means that it\n+            // should still be unavailable so propagate the\n+            // INVALID_HANDLE_VALUE.\n             Stdio::Inherit => {\n-                stdio::get(stdio_id).and_then(|io| {\n-                    io.handle().duplicate(0, true, c::DUPLICATE_SAME_ACCESS)\n-                })\n+                match stdio::get(stdio_id) {\n+                    Ok(io) => io.handle().duplicate(0, true,\n+                                                    c::DUPLICATE_SAME_ACCESS),\n+                    Err(..) => Ok(Handle::new(c::INVALID_HANDLE_VALUE)),\n+                }\n             }\n             Stdio::Raw(handle) => {\n                 RawHandle::new(handle).duplicate(0, true, c::DUPLICATE_SAME_ACCESS)"}, {"sha": "51013d68930ea9a36f3770544aff4f8f2712b60c", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -10,7 +10,7 @@\n \n use self::Destination::*;\n \n-use codemap::{self, COMMAND_LINE_SP, COMMAND_LINE_EXPN, Pos, Span};\n+use codemap::{self, COMMAND_LINE_SP, COMMAND_LINE_EXPN, DUMMY_SP, Pos, Span};\n use diagnostics;\n \n use errors::{Level, RenderSpan, DiagnosticBuilder};\n@@ -109,8 +109,8 @@ impl Emitter for EmitterWriter {\n             lvl: Level) {\n         let error = match sp {\n             Some(COMMAND_LINE_SP) => self.emit_(FileLine(COMMAND_LINE_SP), msg, code, lvl),\n+            Some(DUMMY_SP) | None => print_diagnostic(&mut self.dst, \"\", lvl, msg, code),\n             Some(sp) => self.emit_(FullSpan(sp), msg, code, lvl),\n-            None => print_diagnostic(&mut self.dst, \"\", lvl, msg, code),\n         };\n \n         if let Err(e) = error {"}, {"sha": "2249faac6d7010627ab2a9120fe20ec1c8da2c30", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -2218,6 +2218,12 @@ impl<'a> Parser<'a> {\n                         ex = ExprBreak(None);\n                     }\n                     hi = self.last_span.hi;\n+                } else if self.token.is_keyword(keywords::Let) {\n+                    // Catch this syntax error here, instead of in `check_strict_keywords`, so\n+                    // that we can explicitly mention that let is not to be used as an expression\n+                    let mut db = self.fatal(\"expected expression, found statement (`let`)\");\n+                    db.note(\"variable declaration using `let` is a statement\");\n+                    return Err(db);\n                 } else if self.check(&token::ModSep) ||\n                         self.token.is_ident() &&\n                         !self.check_keyword(keywords::True) &&"}, {"sha": "41a6fd05c3741fb6090cc956442c5ee0bfb8ae2c", "filename": "src/test/run-fail-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail-fulldeps%2Fqquote.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-cross-compile\n \n-// error-pattern:expected identifier, found keyword `let`\n+// error-pattern:expected expression, found statement (`let`)\n \n #![feature(quote, rustc_private)]\n "}, {"sha": "3658b6a508ab27f70dced8393300d83bd11e90a6", "filename": "src/test/run-pass/no-stdio.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6e8fcedac1184a28031ee0cf63e2d862e4536f/src%2Ftest%2Frun-pass%2Fno-stdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-stdio.rs?ref=5d6e8fcedac1184a28031ee0cf63e2d862e4536f", "patch": "@@ -0,0 +1,124 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(libc)]\n+\n+extern crate libc;\n+\n+use std::process::{Command, Stdio};\n+use std::env;\n+use std::io::{self, Read, Write};\n+\n+#[cfg(unix)]\n+unsafe fn without_stdio<R, F: FnOnce() -> R>(f: F) -> R {\n+    let doit = |a| {\n+        let r = libc::dup(a);\n+        assert!(r >= 0);\n+        return r\n+    };\n+    let a = doit(0);\n+    let b = doit(1);\n+    let c = doit(2);\n+\n+    assert!(libc::close(0) >= 0);\n+    assert!(libc::close(1) >= 0);\n+    assert!(libc::close(2) >= 0);\n+\n+    let r = f();\n+\n+    assert!(libc::dup2(a, 0) >= 0);\n+    assert!(libc::dup2(b, 1) >= 0);\n+    assert!(libc::dup2(c, 2) >= 0);\n+\n+    return r\n+}\n+\n+#[cfg(windows)]\n+unsafe fn without_stdio<R, F: FnOnce() -> R>(f: F) -> R {\n+    type DWORD = u32;\n+    type HANDLE = *mut u8;\n+    type BOOL = i32;\n+\n+    const STD_INPUT_HANDLE: DWORD = -10i32 as DWORD;\n+    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n+    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n+    const INVALID_HANDLE_VALUE: HANDLE = !0 as HANDLE;\n+\n+    extern \"system\" {\n+        fn GetStdHandle(which: DWORD) -> HANDLE;\n+        fn SetStdHandle(which: DWORD, handle: HANDLE) -> BOOL;\n+    }\n+\n+    let doit = |id| {\n+        let handle = GetStdHandle(id);\n+        assert!(handle != INVALID_HANDLE_VALUE);\n+        assert!(SetStdHandle(id, INVALID_HANDLE_VALUE) != 0);\n+        return handle\n+    };\n+\n+    let a = doit(STD_INPUT_HANDLE);\n+    let b = doit(STD_OUTPUT_HANDLE);\n+    let c = doit(STD_ERROR_HANDLE);\n+\n+    let r = f();\n+\n+    let doit = |id, handle| {\n+        assert!(SetStdHandle(id, handle) != 0);\n+    };\n+    doit(STD_INPUT_HANDLE, a);\n+    doit(STD_OUTPUT_HANDLE, b);\n+    doit(STD_ERROR_HANDLE, c);\n+\n+    return r\n+}\n+\n+fn main() {\n+    if env::args().len() > 1 {\n+        println!(\"test\");\n+        assert!(io::stdout().write(b\"test\\n\").is_ok());\n+        assert!(io::stderr().write(b\"test\\n\").is_ok());\n+        assert_eq!(io::stdin().read(&mut [0; 10]).unwrap(), 0);\n+        return\n+    }\n+\n+    // First, make sure reads/writes without stdio work if stdio itself is\n+    // missing.\n+    let (a, b, c) = unsafe {\n+        without_stdio(|| {\n+            let a = io::stdout().write(b\"test\\n\");\n+            let b = io::stderr().write(b\"test\\n\");\n+            let c = io::stdin().read(&mut [0; 10]);\n+\n+            (a, b, c)\n+        })\n+    };\n+\n+    assert_eq!(a.unwrap(), 5);\n+    assert_eq!(b.unwrap(), 5);\n+    assert_eq!(c.unwrap(), 0);\n+\n+    // Second, spawn a child and do some work with \"null\" descriptors to make\n+    // sure it's ok\n+    let me = env::current_exe().unwrap();\n+    let status = Command::new(&me)\n+                        .arg(\"next\")\n+                        .stdin(Stdio::null())\n+                        .stdout(Stdio::null())\n+                        .stderr(Stdio::null())\n+                        .status().unwrap();\n+    assert!(status.success(), \"{:?} isn't a success\", status);\n+\n+    // Finally, close everything then spawn a child to make sure everything is\n+    // *still* ok.\n+    let status = unsafe {\n+        without_stdio(|| Command::new(&me).arg(\"next\").status())\n+    }.unwrap();\n+    assert!(status.success(), \"{:?} isn't a success\", status);\n+}"}]}