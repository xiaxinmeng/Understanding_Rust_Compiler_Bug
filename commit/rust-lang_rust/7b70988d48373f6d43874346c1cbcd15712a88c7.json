{"sha": "7b70988d48373f6d43874346c1cbcd15712a88c7", "node_id": "C_kwDOAAsO6NoAKDdiNzA5ODhkNDgzNzNmNmQ0Mzg3NDM0NmMxY2JjZDE1NzEyYTg4Yzc", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-21T10:51:58Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-21T11:07:36Z"}, "message": "fix: consider all tokens in macro expr when analyzing locals\n\nAlso consider `self` token along with ordinary identifiers.", "tree": {"sha": "6d30a6a2965fbfb1dbae5f8917b690cbf8eea5ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d30a6a2965fbfb1dbae5f8917b690cbf8eea5ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b70988d48373f6d43874346c1cbcd15712a88c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRp/BQACgkQ4laYqTBY\nYXFVcA//QbJKSr5dq4gqCFDEfUOmoz+fuGV/4B+ExwhhWcpqWUxaTvJvMIYsySZQ\nDIFlL7cked1yEBpymXWg8frwU2ie3nwwKW7I8d3SrFbLQQUbGQK1ujFHAFAlSYGF\nsFEmbFIAHp3xxBjJkaIH6YnknDEF7pBzK+P23lo6V2ZGkHC7Ej2a8PbbiIleETxO\nUz326tZOywlkryImYkWQEaWQcbDNN1e2q73eCsNfhX7Fvwy8Fbf5PmyJzbJ75M54\nhhDQgCH0MmE5/WTkIaRnAJYThKCSbA+WxyNsCNK/v5gCEr/EmqzRaiF0tgsqInE4\n7xZosIYWeBfZ2JT/aperiCTrdKf2RR6+Ugn0wreTXCnBm4DFB3P4t4DbD4sSdSou\n0zvXj94rWpo48Kt231KMl/K04EszUqEf5k1ow5dgDpqxMBc5hE2sGTKUlhSz9PO3\nokmGcZwnZfq6i4IK+8wR2B2hT6ebn/OsS1lZp3C+MKSScmLpsGhMcYFPIoRBI1OT\nuu4bpJdnrsrVkT7YUAnIQ7Qik9llxtBrFqyxiCrPk92lLXEA8MGLuuWNqgQOd8ee\nm1lvYitpRp46q2ud5db0H8ax6eQsJkWX8X1NTLdez6f7swDABwutoItcyA5lQ+lX\n4swZfjPqPE456yL+oqptTilUveaXsJwi6KdtmXQwlJs5r+q1LIQ=\n=RxTs\n-----END PGP SIGNATURE-----", "payload": "tree 6d30a6a2965fbfb1dbae5f8917b690cbf8eea5ff\nparent bb78059be4d090571bd70de57831f84eee5be678\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1684666318 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1684667256 +0900\n\nfix: consider all tokens in macro expr when analyzing locals\n\nAlso consider `self` token along with ordinary identifiers.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b70988d48373f6d43874346c1cbcd15712a88c7", "html_url": "https://github.com/rust-lang/rust/commit/7b70988d48373f6d43874346c1cbcd15712a88c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b70988d48373f6d43874346c1cbcd15712a88c7/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb78059be4d090571bd70de57831f84eee5be678", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb78059be4d090571bd70de57831f84eee5be678", "html_url": "https://github.com/rust-lang/rust/commit/bb78059be4d090571bd70de57831f84eee5be678"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "c29721b4648782f0ae05337b438d08d09eaaa14a", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7b70988d48373f6d43874346c1cbcd15712a88c7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b70988d48373f6d43874346c1cbcd15712a88c7/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=7b70988d48373f6d43874346c1cbcd15712a88c7", "patch": "@@ -707,7 +707,7 @@ impl FunctionBody {\n     ) -> (FxIndexSet<Local>, Option<ast::SelfParam>) {\n         let mut self_param = None;\n         let mut res = FxIndexSet::default();\n-        let mut cb = |name_ref: Option<_>| {\n+        let mut add_name_if_local = |name_ref: Option<_>| {\n             let local_ref =\n                 match name_ref.and_then(|name_ref| NameRefClass::classify(sema, &name_ref)) {\n                     Some(\n@@ -731,21 +731,24 @@ impl FunctionBody {\n         };\n         self.walk_expr(&mut |expr| match expr {\n             ast::Expr::PathExpr(path_expr) => {\n-                cb(path_expr.path().and_then(|it| it.as_single_name_ref()))\n+                add_name_if_local(path_expr.path().and_then(|it| it.as_single_name_ref()))\n             }\n             ast::Expr::ClosureExpr(closure_expr) => {\n                 if let Some(body) = closure_expr.body() {\n-                    body.syntax().descendants().map(ast::NameRef::cast).for_each(|it| cb(it));\n+                    body.syntax()\n+                        .descendants()\n+                        .map(ast::NameRef::cast)\n+                        .for_each(&mut add_name_if_local);\n                 }\n             }\n             ast::Expr::MacroExpr(expr) => {\n                 if let Some(tt) = expr.macro_call().and_then(|call| call.token_tree()) {\n                     tt.syntax()\n-                        .children_with_tokens()\n-                        .flat_map(SyntaxElement::into_token)\n-                        .filter(|it| it.kind() == SyntaxKind::IDENT)\n+                        .descendants_with_tokens()\n+                        .filter_map(SyntaxElement::into_token)\n+                        .filter(|it| matches!(it.kind(), SyntaxKind::IDENT | T![self]))\n                         .flat_map(|t| sema.descend_into_macros(t))\n-                        .for_each(|t| cb(t.parent().and_then(ast::NameRef::cast)));\n+                        .for_each(|t| add_name_if_local(t.parent().and_then(ast::NameRef::cast)));\n                 }\n             }\n             _ => (),\n@@ -4344,6 +4347,82 @@ fn $0fun_name(n: i32) -> i32 {\n         );\n     }\n \n+    #[test]\n+    fn param_usage_in_macro_with_nested_tt() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+macro_rules! m {\n+    ($val:expr) => { $val };\n+}\n+\n+fn foo() {\n+    let n = 1;\n+    let t = 1;\n+    $0let k = n * m!((n) + { t });$0\n+    let m = k + 1;\n+}\n+\"#,\n+            r#\"\n+macro_rules! m {\n+    ($val:expr) => { $val };\n+}\n+\n+fn foo() {\n+    let n = 1;\n+    let t = 1;\n+    let k = fun_name(n, t);\n+    let m = k + 1;\n+}\n+\n+fn $0fun_name(n: i32, t: i32) -> i32 {\n+    let k = n * m!((n) + { t });\n+    k\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn param_usage_in_macro_with_nested_tt_2() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+macro_rules! m {\n+    ($val:expr) => { $val };\n+}\n+\n+struct S(i32);\n+impl S {\n+    fn foo(&self) {\n+        let n = 1;\n+        $0let k = n * m!((n) + { self.0 });$0\n+        let m = k + 1;\n+    }\n+}\n+\"#,\n+            r#\"\n+macro_rules! m {\n+    ($val:expr) => { $val };\n+}\n+\n+struct S(i32);\n+impl S {\n+    fn foo(&self) {\n+        let n = 1;\n+        let k = self.fun_name(n);\n+        let m = k + 1;\n+    }\n+\n+    fn $0fun_name(&self, n: i32) -> i32 {\n+        let k = n * m!((n) + { self.0 });\n+        k\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn extract_with_await() {\n         check_assist("}]}