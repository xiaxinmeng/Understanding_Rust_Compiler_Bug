{"sha": "f2b92174e3c25e54156efcbdc105a48d50afb6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjkyMTc0ZTNjMjVlNTQxNTZlZmNiZGMxMDVhNDhkNTBhZmI2YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T14:35:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T14:35:58Z"}, "message": "Auto merge of #56838 - Aaron1011:fix/rustdoc-infer-unify, r=nikomatsakis\n\nCall poly_project_and_unify_type on types that contain inference types\n\nCommit f57247c48cb59 (Ensure that Rusdoc discovers all necessary auto\ntrait bounds) added a check to ensure that we only attempt to unify a\nprojection predicatre with inference variables. However, the check it\nadded was too strict - instead of checking that a type *contains* an\ninference variable (e.g. '&_', 'MyType<_>'), it required the type to\n*be* an inference variable (i.e. only '_' would match).\n\nThis commit relaxes the check to use 'ty.has_infer_types', ensuring that\nwe perform unification wherever possible.\n\nFixes #56822", "tree": {"sha": "2fa787b7af7ea3bf9e02c7363cfdb772896102bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fa787b7af7ea3bf9e02c7363cfdb772896102bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b92174e3c25e54156efcbdc105a48d50afb6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b92174e3c25e54156efcbdc105a48d50afb6be", "html_url": "https://github.com/rust-lang/rust/commit/f2b92174e3c25e54156efcbdc105a48d50afb6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b92174e3c25e54156efcbdc105a48d50afb6be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d174173552cfa031b63e8b1dabbd08943748dea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d174173552cfa031b63e8b1dabbd08943748dea1", "html_url": "https://github.com/rust-lang/rust/commit/d174173552cfa031b63e8b1dabbd08943748dea1"}, {"sha": "a375410e1f8f95f13ed096ff937bf3c64f2ff905", "url": "https://api.github.com/repos/rust-lang/rust/commits/a375410e1f8f95f13ed096ff937bf3c64f2ff905", "html_url": "https://github.com/rust-lang/rust/commit/a375410e1f8f95f13ed096ff937bf3c64f2ff905"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "edcdf7f7f9e3fa5121dac3fdc41d28f243811490", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2b92174e3c25e54156efcbdc105a48d50afb6be/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b92174e3c25e54156efcbdc105a48d50afb6be/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=f2b92174e3c25e54156efcbdc105a48d50afb6be", "patch": "@@ -732,9 +732,9 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n \n                     // We can only call poly_project_and_unify_type when our predicate's\n-                    // Ty is an inference variable - otherwise, there won't be anything to\n+                    // Ty contains an inference variable - otherwise, there won't be anything to\n                     // unify\n-                    if p.ty().skip_binder().is_ty_infer() {\n+                    if p.ty().skip_binder().has_infer_types() {\n                         debug!(\"Projecting and unifying projection predicate {:?}\",\n                                predicate);\n                         match poly_project_and_unify_type(select, &obligation.with(p.clone())) {"}, {"sha": "41aba1a007ad8fc3f97f9af506e13c7bfe27220e", "filename": "src/test/rustdoc/issue-56822.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2b92174e3c25e54156efcbdc105a48d50afb6be/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b92174e3c25e54156efcbdc105a48d50afb6be/src%2Ftest%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-56822.rs?ref=f2b92174e3c25e54156efcbdc105a48d50afb6be", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Wrapper<T>(T);\n+\n+trait MyTrait {\n+    type Output;\n+}\n+\n+impl<'a, I, T: 'a> MyTrait for Wrapper<I>\n+    where I: MyTrait<Output=&'a T>\n+{\n+    type Output = T;\n+}\n+\n+struct Inner<'a, T>(&'a T);\n+\n+impl<'a, T> MyTrait for Inner<'a, T> {\n+    type Output = &'a T;\n+}\n+\n+// @has issue_56822/struct.Parser.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<'a> Send for \\\n+// Parser<'a>\"\n+pub struct Parser<'a> {\n+    field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output\n+}"}]}