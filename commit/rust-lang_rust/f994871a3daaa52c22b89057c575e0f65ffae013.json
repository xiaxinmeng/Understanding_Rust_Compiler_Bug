{"sha": "f994871a3daaa52c22b89057c575e0f65ffae013", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTQ4NzFhM2RhYWE1MmMyMmI4OTA1N2M1NzVlMGY2NWZmYWUwMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T05:08:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:07Z"}, "message": "remove unsafe tags", "tree": {"sha": "bb2c8134463094104feec2335719cd9bc700520a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2c8134463094104feec2335719cd9bc700520a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f994871a3daaa52c22b89057c575e0f65ffae013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f994871a3daaa52c22b89057c575e0f65ffae013", "html_url": "https://github.com/rust-lang/rust/commit/f994871a3daaa52c22b89057c575e0f65ffae013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f994871a3daaa52c22b89057c575e0f65ffae013/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b015288b5bcac1e7cf3e001db1c2df2a1b56bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b015288b5bcac1e7cf3e001db1c2df2a1b56bc4", "html_url": "https://github.com/rust-lang/rust/commit/5b015288b5bcac1e7cf3e001db1c2df2a1b56bc4"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "c028c028e6b268c15d848c22d68865ae8e2af00b", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f994871a3daaa52c22b89057c575e0f65ffae013/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f994871a3daaa52c22b89057c575e0f65ffae013/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=f994871a3daaa52c22b89057c575e0f65ffae013", "patch": "@@ -925,7 +925,7 @@ fn type_to_str(names: type_names, ty: TypeRef) -> str {\n }\n \n fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n-   str unsafe {\n+   str {\n \n     if names.type_has_name(ty) { ret names.get_name(ty); }\n \n@@ -956,7 +956,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n       7 {\n         ret \"i\" + std::int::str(llvm::LLVMGetIntTypeWidth(ty) as int);\n       }\n-      8 {\n+      8 unsafe {\n         let s = \"fn(\";\n         let out_ty: TypeRef = llvm::LLVMGetReturnType(ty);\n         let n_args: uint = llvm::LLVMCountParamTypes(ty);\n@@ -969,7 +969,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         s += type_to_str_inner(names, outer, out_ty);\n         ret s;\n       }\n-      9 {\n+      9 unsafe {\n         let s: str = \"{\";\n         let n_elts: uint = llvm::LLVMCountStructElementTypes(ty);\n         let elts: [TypeRef] = vec::init_elt::<TypeRef>(0 as TypeRef, n_elts);\n@@ -1003,7 +1003,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n     }\n }\n \n-fn float_width(llt: TypeRef) -> uint unsafe {\n+fn float_width(llt: TypeRef) -> uint {\n     ret alt llvm::LLVMGetTypeKind(llt) {\n           1 { 32u }\n           2 { 64u }\n@@ -1022,53 +1022,53 @@ fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n \n /* Memory-managed interface to target data. */\n \n-resource target_data_res(TD: TargetDataRef) unsafe {\n+resource target_data_res(TD: TargetDataRef) {\n     llvm::LLVMDisposeTargetData(TD);\n }\n \n type target_data = {lltd: TargetDataRef, dtor: @target_data_res};\n \n-fn mk_target_data(string_rep: str) -> target_data unsafe {\n+fn mk_target_data(string_rep: str) -> target_data {\n     let lltd =\n         str::as_buf(string_rep, {|buf| llvm::LLVMCreateTargetData(buf) });\n     ret {lltd: lltd, dtor: @target_data_res(lltd)};\n }\n \n /* Memory-managed interface to pass managers. */\n \n-resource pass_manager_res(PM: PassManagerRef) unsafe {\n+resource pass_manager_res(PM: PassManagerRef) {\n     llvm::LLVMDisposePassManager(PM);\n }\n \n type pass_manager = {llpm: PassManagerRef, dtor: @pass_manager_res};\n \n-fn mk_pass_manager() -> pass_manager unsafe {\n+fn mk_pass_manager() -> pass_manager {\n     let llpm = llvm::LLVMCreatePassManager();\n     ret {llpm: llpm, dtor: @pass_manager_res(llpm)};\n }\n \n /* Memory-managed interface to object files. */\n \n-resource object_file_res(ObjectFile: ObjectFileRef) unsafe {\n+resource object_file_res(ObjectFile: ObjectFileRef) {\n     llvm::LLVMDisposeObjectFile(ObjectFile);\n }\n \n type object_file = {llof: ObjectFileRef, dtor: @object_file_res};\n \n-fn mk_object_file(llmb: MemoryBufferRef) -> object_file unsafe {\n+fn mk_object_file(llmb: MemoryBufferRef) -> object_file {\n     let llof = llvm::LLVMCreateObjectFile(llmb);\n     ret {llof: llof, dtor: @object_file_res(llof)};\n }\n \n /* Memory-managed interface to section iterators. */\n \n-resource section_iter_res(SI: SectionIteratorRef) unsafe {\n+resource section_iter_res(SI: SectionIteratorRef) {\n     llvm::LLVMDisposeSectionIterator(SI);\n }\n \n type section_iter = {llsi: SectionIteratorRef, dtor: @section_iter_res};\n \n-fn mk_section_iter(llof: ObjectFileRef) -> section_iter unsafe {\n+fn mk_section_iter(llof: ObjectFileRef) -> section_iter {\n     let llsi = llvm::LLVMGetSections(llof);\n     ret {llsi: llsi, dtor: @section_iter_res(llsi)};\n }"}]}