{"sha": "f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5", "node_id": "C_kwDOAAsO6NoAKGYwYmM3NmFjNDFhMGE4MzJjOWVlNjIxZTMxYWFmMWY1MTVkM2Q2YTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-24T23:48:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-24T23:48:44Z"}, "message": "Auto merge of #91742 - cjgillot:force-backtrace, r=estebank\n\nPrint a backtrace when query forcing fails.\n\nThe aim of this PR is to help debugging incremental compilation bugs where query forcing panics.\nFor instance: https://github.com/rust-lang/rust/issues/90682 https://github.com/rust-lang/rust/issues/90697 https://github.com/rust-lang/rust/issues/90715 https://github.com/rust-lang/rust/issues/90739 https://github.com/rust-lang/rust/issues/91401\n\nThese bugs happen when the dep-graph attempts to force a dep-node whose fingerprint does not correspond to an actual DefPathHash. PR https://github.com/rust-lang/rust/pull/91741 attempts to hide this bug.\n\nI still don't know how to reproduce these bugs, so I sadly could not test this debugging device.", "tree": {"sha": "62bff777f85cb032bf69f0c858aec7332865ef34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bff777f85cb032bf69f0c858aec7332865ef34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5", "html_url": "https://github.com/rust-lang/rust/commit/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5c7d2b37780dac1092e75f12ab97dd56c30861d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c7d2b37780dac1092e75f12ab97dd56c30861d", "html_url": "https://github.com/rust-lang/rust/commit/c5c7d2b37780dac1092e75f12ab97dd56c30861d"}, {"sha": "870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d", "html_url": "https://github.com/rust-lang/rust/commit/870dd1678ecf8c8ea39d67a1147f02fca5be4a6d"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "35fa932e0f1f0d806cd56ddcdd609ddd1229bbf7", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=f0bc76ac41a0a832c9ee621e31aaf1f515d3d6a5", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n+use rustc_data_structures::OnDrop;\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use smallvec::{smallvec, SmallVec};\n@@ -671,17 +672,24 @@ impl<K: DepKind> DepGraph<K> {\n         let prev_index = data.previous.node_to_index_opt(dep_node)?;\n \n         match data.colors.get(prev_index) {\n-            Some(DepNodeColor::Green(dep_node_index)) => Some((prev_index, dep_node_index)),\n-            Some(DepNodeColor::Red) => None,\n-            None => {\n-                // This DepNode and the corresponding query invocation existed\n-                // in the previous compilation session too, so we can try to\n-                // mark it as green by recursively marking all of its\n-                // dependencies green.\n-                self.try_mark_previous_green(qcx, data, prev_index, &dep_node)\n-                    .map(|dep_node_index| (prev_index, dep_node_index))\n-            }\n+            Some(DepNodeColor::Green(dep_node_index)) => return Some((prev_index, dep_node_index)),\n+            Some(DepNodeColor::Red) => return None,\n+            None => {}\n         }\n+\n+        let backtrace = backtrace_printer(qcx.dep_context().sess(), data, prev_index);\n+\n+        // This DepNode and the corresponding query invocation existed\n+        // in the previous compilation session too, so we can try to\n+        // mark it as green by recursively marking all of its\n+        // dependencies green.\n+        let ret = self\n+            .try_mark_previous_green(qcx, data, prev_index, &dep_node)\n+            .map(|dep_node_index| (prev_index, dep_node_index));\n+\n+        // We succeeded, no backtrace.\n+        backtrace.disable();\n+        return ret;\n     }\n \n     #[instrument(skip(self, qcx, data, parent_dep_node_index), level = \"debug\")]\n@@ -794,7 +802,10 @@ impl<K: DepKind> DepGraph<K> {\n         let prev_deps = data.previous.edge_targets_from(prev_dep_node_index);\n \n         for &dep_dep_node_index in prev_deps {\n-            self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node)?\n+            let backtrace = backtrace_printer(qcx.dep_context().sess(), data, dep_dep_node_index);\n+            let success = self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node);\n+            backtrace.disable();\n+            success?;\n         }\n \n         // If we got here without hitting a `return` that means that all\n@@ -1364,3 +1375,26 @@ impl DepNodeColorMap {\n         )\n     }\n }\n+\n+fn backtrace_printer<'a, K: DepKind>(\n+    sess: &'a rustc_session::Session,\n+    graph: &'a DepGraphData<K>,\n+    node: SerializedDepNodeIndex,\n+) -> OnDrop<impl Fn() + 'a> {\n+    OnDrop(\n+        #[inline(never)]\n+        #[cold]\n+        move || {\n+            let node = graph.previous.index_to_node(node);\n+            // Do not try to rely on DepNode's Debug implementation, since it may panic.\n+            let diag = rustc_errors::Diagnostic::new(\n+                rustc_errors::Level::FailureNote,\n+                &format!(\n+                    \"encountered while trying to mark dependency green: {:?}({})\",\n+                    node.kind, node.hash\n+                ),\n+            );\n+            sess.diagnostic().force_print_diagnostic(diag);\n+        },\n+    )\n+}"}]}