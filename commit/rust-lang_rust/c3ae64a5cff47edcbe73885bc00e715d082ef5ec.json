{"sha": "c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYWU2NGE1Y2ZmNDdlZGNiZTczODg1YmMwMGU3MTVkMDgyZWY1ZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-02T22:38:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-07-02T22:40:09Z"}, "message": "librustc: Take the parameter space into account when combining type\nparameters.\n\nThis can break code that mistakenly used type parameters in place of\n`Self`. For example, this will break:\n\n    trait Foo {\n        fn bar<X>(u: X) -> Self {\n            u\n        }\n    }\n\nChange this code to not contain a type error. For example:\n\n    trait Foo {\n        fn bar<X>(_: X) -> Self {\n            self\n        }\n    }\n\nCloses #15172.\n\n[breaking-change]", "tree": {"sha": "4005174e5b7ecba5556c18d742eb220852a99724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4005174e5b7ecba5556c18d742eb220852a99724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "html_url": "https://github.com/rust-lang/rust/commit/c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169c988d09a9d4e46de2b7fead9489e94964c7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/169c988d09a9d4e46de2b7fead9489e94964c7c7", "html_url": "https://github.com/rust-lang/rust/commit/169c988d09a9d4e46de2b7fead9489e94964c7c7"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "2984ea086efc59064d00919ddf70c15ccf5ffa64", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "patch": "@@ -445,7 +445,8 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n         }\n       }\n \n-      (&ty::ty_param(ref a_p), &ty::ty_param(ref b_p)) if a_p.idx == b_p.idx => {\n+      (&ty::ty_param(ref a_p), &ty::ty_param(ref b_p)) if\n+          a_p.idx == b_p.idx && a_p.space == b_p.space => {\n         Ok(a)\n       }\n "}, {"sha": "6e32e6e48354cb97eafec143928564f95bcae440", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::num::Num;\n+\n+trait BrokenAdd: Num {\n+    fn broken_add<T>(&self, rhs: T) -> Self {\n+        *self + rhs //~ ERROR mismatched types\n+    }\n+}\n+\n+impl<T: Num> BrokenAdd for T {}\n+\n+pub fn main() {\n+    let foo: u8 = 0u8;\n+    let x: u8 = foo.broken_add(\"hello darkness my old friend\".to_string());\n+    println!(\"{}\", x);\n+}"}, {"sha": "955efeef30d79ddb5e84de6048ffb32074908bfd", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Tr<T> {\n+    fn op(T) -> Self;\n+}\n+\n+// these compile as if Self: Tr<U>, even tho only Self: Tr<Self or T>\n+trait A:    Tr<Self> {\n+    fn test<U>(u: U) -> Self {\n+        Tr::op(u)   //~ ERROR expected Tr<U>, but found Tr<Self>\n+    }\n+}\n+trait B<T>: Tr<T> {\n+    fn test<U>(u: U) -> Self {\n+        Tr::op(u)   //~ ERROR expected Tr<U>, but found Tr<T>\n+    }\n+}\n+\n+impl<T> Tr<T> for T {\n+    fn op(t: T) -> T { t }\n+}\n+impl<T> A for T {}\n+\n+fn main() {\n+    std::io::println(A::test((&7306634593706211700, 8)));\n+}\n+"}, {"sha": "a3d69d53ba9c0b7e3bbbcb51b4da327597395d8b", "filename": "src/test/compile-fail/type-params-in-different-spaces-3.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ae64a5cff47edcbe73885bc00e715d082ef5ec/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-3.rs?ref=c3ae64a5cff47edcbe73885bc00e715d082ef5ec", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Tr {\n+    fn test<X>(u: X) -> Self {\n+        u   //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}\n+"}]}