{"sha": "cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "node_id": "C_kwDOAAsO6NoAKGNmMmM0OTJlZjhjODdjMDQ5YjRlM2E2MmY0M2M4NDFhYWZjODhjYmE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-13T10:40:28Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-08-18T14:19:40Z"}, "message": "session: stabilize split debuginfo on linux\n\nStabilize the `-Csplit-debuginfo` flag...\n\n- ...on Linux for all values of the flag. Split DWARF has been\n  implemented for a few months, hasn't had any bug reports and has had\n  some promising benchmarking for incremental debug build performance.\n- ..on other platforms for the default value. It doesn't make any sense\n  that `-Csplit-debuginfo=packed` is unstable on Windows MSVC when\n  that's the default behaviour, but keep the other values unstable.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "ec6ee935cb54a462d017d19dccbf2f7697708044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec6ee935cb54a462d017d19dccbf2f7697708044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "html_url": "https://github.com/rust-lang/rust/commit/cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8556e6620e4866526b3cea767ad8c20ae877a569", "url": "https://api.github.com/repos/rust-lang/rust/commits/8556e6620e4866526b3cea767ad8c20ae877a569", "html_url": "https://github.com/rust-lang/rust/commit/8556e6620e4866526b3cea767ad8c20ae877a569"}], "stats": {"total": 244, "additions": 184, "deletions": 60}, "files": [{"sha": "162fc9aa0a6ea622e3202fb47a2fe2f967777ebe", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -2423,13 +2423,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let pretty = parse_pretty(&unstable_opts, error_format);\n \n-    if !unstable_opts.unstable_options\n-        && !target_triple.triple().contains(\"apple\")\n-        && cg.split_debuginfo.is_some()\n-    {\n-        early_error(error_format, \"`-Csplit-debuginfo` is unstable on this platform\");\n-    }\n-\n     // Try to find a directory containing the Rust `src`, for more details see\n     // the doc comment on the `real_rust_source_base_dir` field.\n     let tmp_buf;"}, {"sha": "e9092d7abdfcacfb2ec4f754b824a208c8ac6ad7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -31,7 +31,7 @@ use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n use rustc_target::spec::{\n-    SanitizerSet, SplitDebuginfo, StackProtector, Target, TargetTriple, TlsModel,\n+    DebuginfoKind, SanitizerSet, SplitDebuginfo, StackProtector, Target, TargetTriple, TlsModel,\n };\n \n use std::cell::{self, RefCell};\n@@ -661,8 +661,9 @@ impl Session {\n             )\n     }\n \n+    /// Returns `true` if the target can use the current split debuginfo configuration.\n     pub fn target_can_use_split_dwarf(&self) -> bool {\n-        !self.target.is_like_windows && !self.target.is_like_osx\n+        self.target.debuginfo_kind == DebuginfoKind::Dwarf\n     }\n \n     pub fn generate_proc_macro_decls_symbol(&self, stable_crate_id: StableCrateId) -> String {\n@@ -1543,6 +1544,15 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             sess.err(&format!(\"requested DWARF version {} is greater than 5\", dwarf_version));\n         }\n     }\n+\n+    if !sess.target.options.supported_split_debuginfo.contains(&sess.split_debuginfo())\n+        && !sess.opts.unstable_opts.unstable_options\n+    {\n+        sess.err(&format!(\n+            \"`-Csplit-debuginfo={}` is unstable on this platform\",\n+            sess.split_debuginfo()\n+        ));\n+    }\n }\n \n /// Holds data on the current incremental compilation session, if there is one."}, {"sha": "9bbee88a894cad82a8ab012a26242ba1dfc47b23", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,6 +1,6 @@\n use std::{borrow::Cow, env};\n \n-use crate::spec::{cvs, FramePointer, SplitDebuginfo, TargetOptions};\n+use crate::spec::{cvs, DebuginfoKind, FramePointer, SplitDebuginfo, TargetOptions};\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor};\n \n fn pre_link_args(os: &'static str, arch: &'static str, abi: &'static str) -> LinkArgs {\n@@ -76,9 +76,15 @@ pub fn opts(os: &'static str, arch: &'static str, abi: &'static str) -> TargetOp\n         eh_frame_header: false,\n         lld_flavor: LldFlavor::Ld64,\n \n+        debuginfo_kind: DebuginfoKind::DwarfDsym,\n         // The historical default for macOS targets is to run `dsymutil` which\n         // generates a packed version of debuginfo split from the main file.\n         split_debuginfo: SplitDebuginfo::Packed,\n+        supported_split_debuginfo: Cow::Borrowed(&[\n+            SplitDebuginfo::Packed,\n+            SplitDebuginfo::Unpacked,\n+            SplitDebuginfo::Off,\n+        ]),\n \n         // This environment variable is pretty magical but is intended for\n         // producing deterministic builds. This was first discovered to be used"}, {"sha": "df8e848124a9b0219b1216802fd79cbf60e58212", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{cvs, RelroLevel, TargetOptions};\n+use crate::spec::{cvs, RelroLevel, SplitDebuginfo, TargetOptions};\n+use std::borrow::Cow;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n@@ -10,6 +11,11 @@ pub fn opts() -> TargetOptions {\n         relro_level: RelroLevel::Full,\n         has_thread_local: true,\n         crt_static_respected: true,\n+        supported_split_debuginfo: Cow::Borrowed(&[\n+            SplitDebuginfo::Packed,\n+            SplitDebuginfo::Unpacked,\n+            SplitDebuginfo::Off,\n+        ]),\n         ..Default::default()\n     }\n }"}, {"sha": "1dc82b565442293b23114e6c6c7ecfc188216900", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 99, "deletions": 5, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -468,23 +468,74 @@ impl fmt::Display for LinkOutputKind {\n \n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n \n-#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n+/// Which kind of debuginfo does the target use?\n+///\n+/// Useful in determining whether a target supports Split DWARF (a target with\n+/// `DebuginfoKind::Dwarf` and supporting `SplitDebuginfo::Unpacked` for example).\n+#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq)]\n+pub enum DebuginfoKind {\n+    /// DWARF debuginfo (such as that used on `x86_64_unknown_linux_gnu`).\n+    #[default]\n+    Dwarf,\n+    /// DWARF debuginfo in dSYM files (such as on Apple platforms).\n+    DwarfDsym,\n+    /// Program database files (such as on Windows).\n+    Pdb,\n+}\n+\n+impl DebuginfoKind {\n+    fn as_str(&self) -> &'static str {\n+        match self {\n+            DebuginfoKind::Dwarf => \"dwarf\",\n+            DebuginfoKind::DwarfDsym => \"dwarf-dsym\",\n+            DebuginfoKind::Pdb => \"pdb\",\n+        }\n+    }\n+}\n+\n+impl FromStr for DebuginfoKind {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        Ok(match s {\n+            \"dwarf\" => DebuginfoKind::Dwarf,\n+            \"dwarf-dsym\" => DebuginfoKind::DwarfDsym,\n+            \"pdb\" => DebuginfoKind::Pdb,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for DebuginfoKind {\n+    fn to_json(&self) -> Json {\n+        self.as_str().to_json()\n+    }\n+}\n+\n+impl fmt::Display for DebuginfoKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(self.as_str())\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, Default, Eq, Hash, PartialEq)]\n pub enum SplitDebuginfo {\n     /// Split debug-information is disabled, meaning that on supported platforms\n     /// you can find all debug information in the executable itself. This is\n     /// only supported for ELF effectively.\n     ///\n     /// * Windows - not supported\n     /// * macOS - don't run `dsymutil`\n-    /// * ELF - `.dwarf_*` sections\n+    /// * ELF - `.debug_*` sections\n+    #[default]\n     Off,\n \n     /// Split debug-information can be found in a \"packed\" location separate\n     /// from the final artifact. This is supported on all platforms.\n     ///\n     /// * Windows - `*.pdb`\n     /// * macOS - `*.dSYM` (run `dsymutil`)\n-    /// * ELF - `*.dwp` (run `rust-llvm-dwp`)\n+    /// * ELF - `*.dwp` (run `thorin`)\n     Packed,\n \n     /// Split debug-information can be found in individual object files on the\n@@ -509,7 +560,7 @@ impl SplitDebuginfo {\n impl FromStr for SplitDebuginfo {\n     type Err = ();\n \n-    fn from_str(s: &str) -> Result<SplitDebuginfo, ()> {\n+    fn from_str(s: &str) -> Result<Self, ()> {\n         Ok(match s {\n             \"off\" => SplitDebuginfo::Off,\n             \"unpacked\" => SplitDebuginfo::Unpacked,\n@@ -1435,9 +1486,13 @@ pub struct TargetOptions {\n     /// thumb and arm interworking.\n     pub has_thumb_interworking: bool,\n \n+    /// Which kind of debuginfo is used by this target?\n+    pub debuginfo_kind: DebuginfoKind,\n     /// How to handle split debug information, if at all. Specifying `None` has\n     /// target-specific meaning.\n     pub split_debuginfo: SplitDebuginfo,\n+    /// Which kinds of split debuginfo are supported by the target?\n+    pub supported_split_debuginfo: StaticCow<[SplitDebuginfo]>,\n \n     /// The sanitizers supported by this target\n     ///\n@@ -1595,7 +1650,10 @@ impl Default for TargetOptions {\n             use_ctors_section: false,\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n-            split_debuginfo: SplitDebuginfo::Off,\n+            debuginfo_kind: Default::default(),\n+            split_debuginfo: Default::default(),\n+            // `Off` is supported by default, but targets can remove this manually, e.g. Windows.\n+            supported_split_debuginfo: Cow::Borrowed(&[SplitDebuginfo::Off]),\n             supported_sanitizers: SanitizerSet::empty(),\n             default_adjusted_cabi: None,\n             c_enum_min_bits: 32,\n@@ -1868,6 +1926,19 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, DebuginfoKind) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n+                    match s.parse::<DebuginfoKind>() {\n+                        Ok(level) => base.$key_name = level,\n+                        _ => return Some(Err(\n+                            format!(\"'{s}' is not a valid value for debuginfo-kind. Use 'dwarf', \\\n+                                  'dwarf-dsym' or 'pdb'.\")\n+                        )),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, SplitDebuginfo) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n@@ -1904,6 +1975,25 @@ impl Target {\n                     }\n                 }\n             } );\n+            ($key_name:ident, falliable_list) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.remove(&name).and_then(|j| {\n+                    if let Some(v) = j.as_array() {\n+                        match v.iter().map(|a| FromStr::from_str(a.as_str().unwrap())).collect() {\n+                            Ok(l) => { base.$key_name = l },\n+                            // FIXME: `falliable_list` can't re-use the `key!` macro for list\n+                            // elements and the error messages from that macro, so it has a bad\n+                            // generic message instead\n+                            Err(_) => return Some(Err(\n+                                format!(\"`{:?}` is not a valid value for `{}`\", j, name)\n+                            )),\n+                        }\n+                    } else {\n+                        incorrect_type.push(name)\n+                    }\n+                    Some(Ok(()))\n+                }).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.remove(&name) {\n@@ -2190,7 +2280,9 @@ impl Target {\n         key!(use_ctors_section, bool);\n         key!(eh_frame_header, bool);\n         key!(has_thumb_interworking, bool);\n+        key!(debuginfo_kind, DebuginfoKind)?;\n         key!(split_debuginfo, SplitDebuginfo)?;\n+        key!(supported_split_debuginfo, falliable_list)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n         key!(c_enum_min_bits, u64);\n@@ -2434,7 +2526,9 @@ impl ToJson for Target {\n         target_option_val!(use_ctors_section);\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n+        target_option_val!(debuginfo_kind);\n         target_option_val!(split_debuginfo);\n+        target_option_val!(supported_split_debuginfo);\n         target_option_val!(supported_sanitizers);\n         target_option_val!(c_enum_min_bits);\n         target_option_val!(generate_arange_section);"}, {"sha": "ec9609a2b26a185af568828ad2ba408df2160773", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,4 +1,5 @@\n use crate::spec::{LinkerFlavor, LldFlavor, SplitDebuginfo, TargetOptions};\n+use std::borrow::Cow;\n \n pub fn opts() -> TargetOptions {\n     // Suppress the verbose logo and authorship debugging output, which would needlessly\n@@ -18,6 +19,7 @@ pub fn opts() -> TargetOptions {\n         // Currently this is the only supported method of debuginfo on MSVC\n         // where `*.pdb` files show up next to the final artifact.\n         split_debuginfo: SplitDebuginfo::Packed,\n+        supported_split_debuginfo: Cow::Borrowed(&[SplitDebuginfo::Packed]),\n \n         ..Default::default()\n     }"}, {"sha": "81d44a963f1f30fd0f7fd5f7ae534518b7680150", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,5 +1,6 @@\n use crate::spec::crt_objects::{self, LinkSelfContainedDefault};\n-use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n+use crate::spec::{cvs, DebuginfoKind, LinkerFlavor, SplitDebuginfo, TargetOptions};\n+use std::borrow::Cow;\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = TargetOptions::link_args(\n@@ -86,6 +87,10 @@ pub fn opts() -> TargetOptions {\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,\n         eh_frame_header: false,\n+        // FIXME(davidtwco): Support Split DWARF on Windows GNU - may require LLVM changes to\n+        // output DWO, despite using DWARF, doesn't use ELF..\n+        debuginfo_kind: DebuginfoKind::Pdb,\n+        supported_split_debuginfo: Cow::Borrowed(&[SplitDebuginfo::Off]),\n         ..Default::default()\n     }\n }"}, {"sha": "67282c19541148db7dcd5171e83180c616b2fc8c", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{cvs, TargetOptions};\n+use crate::spec::{cvs, DebuginfoKind, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n@@ -28,6 +28,7 @@ pub fn opts() -> TargetOptions {\n         // not ever be possible for us to pass this flag.\n         no_default_libraries: false,\n         has_thread_local: true,\n+        debuginfo_kind: DebuginfoKind::Pdb,\n \n         ..base\n     }"}, {"sha": "c041da34b844a4ad210b35c4da0dbc4adafe0345", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1759,23 +1759,21 @@ impl<'a> Builder<'a> {\n             },\n         );\n \n-        if !target.contains(\"windows\") {\n-            let needs_unstable_opts = target.contains(\"linux\")\n-                || target.contains(\"solaris\")\n-                || target.contains(\"windows\")\n-                || target.contains(\"bsd\")\n-                || target.contains(\"dragonfly\")\n-                || target.contains(\"illumos\");\n-\n-            if needs_unstable_opts {\n-                rustflags.arg(\"-Zunstable-options\");\n-            }\n-            match self.config.rust_split_debuginfo {\n-                SplitDebuginfo::Packed => rustflags.arg(\"-Csplit-debuginfo=packed\"),\n-                SplitDebuginfo::Unpacked => rustflags.arg(\"-Csplit-debuginfo=unpacked\"),\n-                SplitDebuginfo::Off => rustflags.arg(\"-Csplit-debuginfo=off\"),\n-            };\n+        let split_debuginfo_is_stable = target.contains(\"linux\")\n+            || target.contains(\"apple\")\n+            || (target.contains(\"msvc\")\n+                && self.config.rust_split_debuginfo == SplitDebuginfo::Packed)\n+            || (target.contains(\"windows\")\n+                && self.config.rust_split_debuginfo == SplitDebuginfo::Off);\n+\n+        if !split_debuginfo_is_stable {\n+            rustflags.arg(\"-Zunstable-options\");\n         }\n+        match self.config.rust_split_debuginfo {\n+            SplitDebuginfo::Packed => rustflags.arg(\"-Csplit-debuginfo=packed\"),\n+            SplitDebuginfo::Unpacked => rustflags.arg(\"-Csplit-debuginfo=unpacked\"),\n+            SplitDebuginfo::Off => rustflags.arg(\"-Csplit-debuginfo=off\"),\n+        };\n \n         if self.config.cmd.bless() {\n             // Bless `expect!` tests."}, {"sha": "ba8385f89a726fd4d012715a7e76318947b2391e", "filename": "src/test/incremental/split_debuginfo_cached.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fincremental%2Fsplit_debuginfo_cached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fincremental%2Fsplit_debuginfo_cached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsplit_debuginfo_cached.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -6,8 +6,8 @@\n // only-x86_64-unknown-linux-gnu\n // revisions:rpass1 rpass2\n \n-// [rpass1]compile-flags: -g -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split\n-// [rpass2]compile-flags: -g -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split\n+// [rpass1]compile-flags: -g -Zquery-dep-graph -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split\n+// [rpass2]compile-flags: -g -Zquery-dep-graph -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split\n \n #![feature(rustc_attrs)]\n // For `rpass2`, nothing has changed so everything should re-used."}, {"sha": "edc1a80d30e0ecc165dc6619691243f696e70ebb", "filename": "src/test/incremental/split_debuginfo_mode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fincremental%2Fsplit_debuginfo_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fincremental%2Fsplit_debuginfo_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsplit_debuginfo_mode.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -6,10 +6,10 @@\n // only-x86_64-unknown-linux-gnu\n // revisions:rpass1 rpass2 rpass3 rpass4\n \n-// [rpass1]compile-flags: -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=unpacked -Zsplit-dwarf-kind=single -Zsplit-dwarf-inlining=on\n-// [rpass2]compile-flags: -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=packed -Zsplit-dwarf-kind=single -Zsplit-dwarf-inlining=on\n-// [rpass3]compile-flags: -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split -Zsplit-dwarf-inlining=on\n-// [rpass4]compile-flags: -Zquery-dep-graph -Zunstable-options -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split -Zsplit-dwarf-inlining=off\n+// [rpass1]compile-flags: -Zquery-dep-graph -Csplit-debuginfo=unpacked -Zsplit-dwarf-kind=single -Zsplit-dwarf-inlining=on\n+// [rpass2]compile-flags: -Zquery-dep-graph -Csplit-debuginfo=packed -Zsplit-dwarf-kind=single -Zsplit-dwarf-inlining=on\n+// [rpass3]compile-flags: -Zquery-dep-graph -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split -Zsplit-dwarf-inlining=on\n+// [rpass4]compile-flags: -Zquery-dep-graph -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split -Zsplit-dwarf-inlining=off\n \n #![feature(rustc_attrs)]\n // For rpass2 we change -Csplit-debuginfo and thus expect every CGU to be recompiled"}, {"sha": "2a650ea7dfb9fa824ad9476a5160d8adaf8c0419", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -29,14 +29,19 @@ unpacked:\n \t[ ! -d $(TMPDIR)/foo.dSYM ]\n else\n ifdef IS_WINDOWS\n-# Windows only supports =off\n+# Windows only supports =packed\n off:\n packed:\n unpacked:\n else\n-# If disabled, don't run dsymutil\n+ifeq ($(UNAME),Linux)\n+  UNSTABLEOPTS :=\n+else\n+  UNSTABLEOPTS := -Zunstable-options\n+endif\n+\n off:\n-\t$(RUSTC) foo.rs -g -C split-debuginfo=off -Z unstable-options\n+\t$(RUSTC) foo.rs -g -C $(UNSTABLEOPTS) split-debuginfo=off\n \t[ ! -f $(TMPDIR)/*.dwp ]\n \t[ ! -f $(TMPDIR)/*.dwo ]\n \n@@ -47,74 +52,74 @@ off:\n packed: packed-split packed-single\n \n packed-split:\n-\t$(RUSTC) foo.rs -g -C split-debuginfo=packed -Z unstable-options -Zsplit-dwarf-kind=split\n+\t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=packed -Zsplit-dwarf-kind=split\n \tls $(TMPDIR)/*.dwp\n \trm -rf $(TMPDIR)/*.dwp $(TMPDIR)/*.dwo\n \n packed-single:\n-\t$(RUSTC) foo.rs -g -C split-debuginfo=packed -Z unstable-options -Zsplit-dwarf-kind=single\n+\t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=packed -Zsplit-dwarf-kind=single\n \tls $(TMPDIR)/*.dwp\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \trm -rf $(TMPDIR)/*.dwp\n \n packed-remapped: packed-remapped-split packed-remapped-single\n \n packed-remapped-split:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 \\\n+\t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=packed -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n \n packed-remapped-single:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=packed -C debuginfo=2 \\\n+\t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=packed -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n \n packed-crosscrate: packed-crosscrate-split packed-crosscrate-single\n \n packed-crosscrate-split:\n-\t$(RUSTC) --crate-type lib -Z unstable-options -C split-debuginfo=packed \\\n+\t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=packed \\\n \t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g bar.rs\n \tls $(TMPDIR)/*.rlib\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n-\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options -C split-debuginfo=packed \\\n-\t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g main.rs\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options $(UNSTABLEOPTS) \\\n+\t\t-C split-debuginfo=packed -Zsplit-dwarf-kind=split -C debuginfo=2 -g main.rs\n \trm $(TMPDIR)/*.dwo\n \trm $(TMPDIR)/main.dwp\n \trm $(TMPDIR)/$(call BIN,main)\n \n packed-crosscrate-single:\n-\t$(RUSTC) --crate-type lib -Z unstable-options -C split-debuginfo=packed \\\n+\t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=packed \\\n \t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g bar.rs\n \tls $(TMPDIR)/*.rlib\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n-\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options -C split-debuginfo=packed \\\n-\t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g main.rs\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options $(UNSTABLEOPTS) \\\n+\t\t-C split-debuginfo=packed -Zsplit-dwarf-kind=single -C debuginfo=2 -g main.rs\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \trm $(TMPDIR)/main.dwp\n \trm $(TMPDIR)/$(call BIN,main)\n \n unpacked: unpacked-split unpacked-single unpacked-remapped-split unpacked-remapped-single\n \n unpacked-split:\n-\t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked -Z unstable-options -Zsplit-dwarf-kind=split\n+\t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=unpacked -Zsplit-dwarf-kind=split\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo\n \trm -rf $(TMPDIR)/*.dwp $(TMPDIR)/*.dwo\n \n unpacked-single:\n-\t$(RUSTC) foo.rs -g -C split-debuginfo=unpacked -Z unstable-options -Zsplit-dwarf-kind=single\n+\t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=unpacked -Zsplit-dwarf-kind=single\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \n unpacked-remapped-split:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 \\\n+\t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=unpacked -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n \n unpacked-remapped-single:\n-\t$(RUSTC) -Z unstable-options -C split-debuginfo=unpacked -C debuginfo=2 \\\n+\t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=unpacked -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n endif"}, {"sha": "ff764015dc76f317c052ab0b6063af0a78152a4c", "filename": "src/test/ui/debuginfo/debuginfo-emit-llvm-ir-and-split-debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -1,6 +1,7 @@\n // build-pass\n+// only-linux\n //\n-// compile-flags: -g --emit=llvm-ir -Zunstable-options -Csplit-debuginfo=unpacked\n+// compile-flags: -g --emit=llvm-ir -Csplit-debuginfo=unpacked\n //\n // Make sure that we don't explode with an error if we don't actually end up emitting any `dwo`s,\n // as would be the case if we don't actually codegen anything."}, {"sha": "782c0c254315d609a059300f35363d58f38d8d0d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c492ef8c87c049b4e3a62f43c841aafc88cba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cf2c492ef8c87c049b4e3a62f43c841aafc88cba", "patch": "@@ -2015,11 +2015,14 @@ impl<'test> TestCx<'test> {\n             Some(CompareMode::Chalk) => {\n                 rustc.args(&[\"-Zchalk\"]);\n             }\n-            Some(CompareMode::SplitDwarf) => {\n+            Some(CompareMode::SplitDwarf) if self.config.target.contains(\"windows\") => {\n                 rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);\n             }\n+            Some(CompareMode::SplitDwarf) => {\n+                rustc.args(&[\"-Csplit-debuginfo=unpacked\"]);\n+            }\n             Some(CompareMode::SplitDwarfSingle) => {\n-                rustc.args(&[\"-Csplit-debuginfo=packed\", \"-Zunstable-options\"]);\n+                rustc.args(&[\"-Csplit-debuginfo=packed\"]);\n             }\n             None => {}\n         }"}]}