{"sha": "5c8e8e565d854f72691031262fcf945bcf1f24f9", "node_id": "C_kwDOAAsO6NoAKDVjOGU4ZTU2NWQ4NTRmNzI2OTEwMzEyNjJmY2Y5NDViY2YxZjI0Zjk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T03:19:56Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T03:19:56Z"}, "message": "Give clearer names to several search index functions", "tree": {"sha": "9a326778d53a313093c66604dbfab760fbfa3cac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a326778d53a313093c66604dbfab760fbfa3cac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8e8e565d854f72691031262fcf945bcf1f24f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8e8e565d854f72691031262fcf945bcf1f24f9", "html_url": "https://github.com/rust-lang/rust/commit/5c8e8e565d854f72691031262fcf945bcf1f24f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8e8e565d854f72691031262fcf945bcf1f24f9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb77a959a45571ea6180053a63a25c752995380", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb77a959a45571ea6180053a63a25c752995380", "html_url": "https://github.com/rust-lang/rust/commit/afb77a959a45571ea6180053a63a25c752995380"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "6b9ccd37cfb371196476b7c65fb1738541202d33", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c8e8e565d854f72691031262fcf945bcf1f24f9/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8e8e565d854f72691031262fcf945bcf1f24f9/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5c8e8e565d854f72691031262fcf945bcf1f24f9", "patch": "@@ -12,7 +12,7 @@ use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n use crate::html::markdown::short_markdown_summary;\n-use crate::html::render::search_index::get_index_search_type;\n+use crate::html::render::search_index::get_function_type_for_search;\n use crate::html::render::IndexItem;\n \n /// This cache is used to store information about the [`clean::Crate`] being\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             desc,\n                             parent,\n                             parent_idx: None,\n-                            search_type: get_index_search_type(&item, self.tcx),\n+                            search_type: get_function_type_for_search(&item, self.tcx),\n                             aliases: item.attrs.get_doc_aliases(),\n                         });\n                     }"}, {"sha": "9543afc68a4003cdaf56b72ec7e1b03e7808924f", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5c8e8e565d854f72691031262fcf945bcf1f24f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8e8e565d854f72691031262fcf945bcf1f24f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=5c8e8e565d854f72691031262fcf945bcf1f24f9", "patch": "@@ -32,7 +32,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 desc,\n                 parent: Some(did),\n                 parent_idx: None,\n-                search_type: get_index_search_type(item, tcx),\n+                search_type: get_function_type_for_search(item, tcx),\n                 aliases: item.attrs.get_doc_aliases(),\n             });\n         }\n@@ -181,14 +181,14 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     )\n }\n \n-crate fn get_index_search_type<'tcx>(\n+crate fn get_function_type_for_search<'tcx>(\n     item: &clean::Item,\n     tcx: TyCtxt<'tcx>,\n ) -> Option<IndexItemFunctionType> {\n     let (mut inputs, mut output) = match *item.kind {\n-        clean::FunctionItem(ref f) => get_all_types(f, tcx),\n-        clean::MethodItem(ref m, _) => get_all_types(m, tcx),\n-        clean::TyMethodItem(ref m) => get_all_types(m, tcx),\n+        clean::FunctionItem(ref f) => get_fn_inputs_and_outputs(f, tcx),\n+        clean::MethodItem(ref m, _) => get_fn_inputs_and_outputs(m, tcx),\n+        clean::TyMethodItem(ref m) => get_fn_inputs_and_outputs(m, tcx),\n         _ => return None,\n     };\n \n@@ -237,7 +237,7 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n ///\n /// Important note: It goes through generics recursively. So if you have\n /// `T: Option<Result<(), ()>>`, it'll go into `Option` and then into `Result`.\n-fn get_real_types<'tcx>(\n+fn add_generics_and_bounds_as_types<'tcx>(\n     generics: &Generics,\n     arg: &Type,\n     tcx: TyCtxt<'tcx>,\n@@ -337,7 +337,13 @@ fn get_real_types<'tcx>(\n                     for param_def in poly_trait.generic_params.iter() {\n                         match &param_def.kind {\n                             clean::GenericParamDefKind::Type { default: Some(ty), .. } => {\n-                                get_real_types(generics, ty, tcx, recurse + 1, &mut ty_generics)\n+                                add_generics_and_bounds_as_types(\n+                                    generics,\n+                                    ty,\n+                                    tcx,\n+                                    recurse + 1,\n+                                    &mut ty_generics,\n+                                )\n                             }\n                             _ => {}\n                         }\n@@ -352,7 +358,13 @@ fn get_real_types<'tcx>(\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n                 if let Some(path) = bound.get_trait_path() {\n                     let ty = Type::Path { path };\n-                    get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics);\n+                    add_generics_and_bounds_as_types(\n+                        generics,\n+                        &ty,\n+                        tcx,\n+                        recurse + 1,\n+                        &mut ty_generics,\n+                    );\n                 }\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n@@ -366,7 +378,7 @@ fn get_real_types<'tcx>(\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {\n-                get_real_types(generics, gen, tcx, recurse + 1, &mut ty_generics);\n+                add_generics_and_bounds_as_types(generics, gen, tcx, recurse + 1, &mut ty_generics);\n             }\n         }\n         insert_ty(res, tcx, arg.clone(), ty_generics);\n@@ -377,7 +389,7 @@ fn get_real_types<'tcx>(\n ///\n /// i.e. `fn foo<A: Display, B: Option<A>>(x: u32, y: B)` will return\n /// `[u32, Display, Option]`.\n-fn get_all_types<'tcx>(\n+fn get_fn_inputs_and_outputs<'tcx>(\n     func: &Function,\n     tcx: TyCtxt<'tcx>,\n ) -> (Vec<TypeWithKind>, Vec<TypeWithKind>) {\n@@ -390,7 +402,7 @@ fn get_all_types<'tcx>(\n             continue;\n         }\n         let mut args = Vec::new();\n-        get_real_types(generics, &arg.type_, tcx, 0, &mut args);\n+        add_generics_and_bounds_as_types(generics, &arg.type_, tcx, 0, &mut args);\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n@@ -404,7 +416,7 @@ fn get_all_types<'tcx>(\n     let mut ret_types = Vec::new();\n     match decl.output {\n         FnRetTy::Return(ref return_type) => {\n-            get_real_types(generics, return_type, tcx, 0, &mut ret_types);\n+            add_generics_and_bounds_as_types(generics, return_type, tcx, 0, &mut ret_types);\n             if ret_types.is_empty() {\n                 if let Some(kind) =\n                     return_type.def_id_no_primitives().map(|did| tcx.def_kind(did).into())"}]}