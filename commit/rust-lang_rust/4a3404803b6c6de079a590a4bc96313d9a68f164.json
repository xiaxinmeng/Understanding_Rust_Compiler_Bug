{"sha": "4a3404803b6c6de079a590a4bc96313d9a68f164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMzQwNDgwM2I2YzZkZTA3OWE1OTBhNGJjOTYzMTNkOWE2OGYxNjQ=", "commit": {"author": {"name": "Or Brostovski", "email": "tohava@gmail.com", "date": "2010-08-31T03:07:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-30T20:45:57Z"}, "message": "implemented break for while-loop case\n\nast.ml - added break and cont statements\nitem.ml - added break and cont statements\nlexer.mll - added break and cont statements\ntoken.ml - added break and cont statements\ntrans.ml - implemented the break statement for the while-loop case\n         - replaced hash table accesses with get_stmt_depth where needed\ntype.ml = added break and cont statements\ntypestate.ml - implemented the break statement for the while-loop case\n             - added shorthand filter_live_block_slots\nwalk.ml - added break and cont statements\nwhile-with-break.rs - code for testing while loops", "tree": {"sha": "705b0f8710b408c49e3a609bb7ddfc6bdb4a68b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705b0f8710b408c49e3a609bb7ddfc6bdb4a68b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3404803b6c6de079a590a4bc96313d9a68f164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3404803b6c6de079a590a4bc96313d9a68f164", "html_url": "https://github.com/rust-lang/rust/commit/4a3404803b6c6de079a590a4bc96313d9a68f164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3404803b6c6de079a590a4bc96313d9a68f164/comments", "author": {"login": "tohava", "id": 329651, "node_id": "MDQ6VXNlcjMyOTY1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/329651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tohava", "html_url": "https://github.com/tohava", "followers_url": "https://api.github.com/users/tohava/followers", "following_url": "https://api.github.com/users/tohava/following{/other_user}", "gists_url": "https://api.github.com/users/tohava/gists{/gist_id}", "starred_url": "https://api.github.com/users/tohava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tohava/subscriptions", "organizations_url": "https://api.github.com/users/tohava/orgs", "repos_url": "https://api.github.com/users/tohava/repos", "events_url": "https://api.github.com/users/tohava/events{/privacy}", "received_events_url": "https://api.github.com/users/tohava/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cb9508cd122b7863f179c69c406e0f47572354", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cb9508cd122b7863f179c69c406e0f47572354", "html_url": "https://github.com/rust-lang/rust/commit/74cb9508cd122b7863f179c69c406e0f47572354"}], "stats": {"total": 156, "additions": 120, "deletions": 36}, "files": [{"sha": "4bca59e89259c579cef1e5066bc668cced5d9a94", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -579,6 +579,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       vec-slice.rs \\\n                       vec.rs \\\n                       while-flow-graph.rs \\\n+                      while-with-break.rs \\\n                       writealias.rs \\\n                       yield.rs \\\n                       yield2.rs \\"}, {"sha": "46a87dfe01bd694458cdd6d99201941c73e584af", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -207,6 +207,8 @@ and stmt' =\n   | STMT_put_each of (lval * (atom array))\n   | STMT_ret of (atom option)\n   | STMT_be of (lval * (atom array))\n+  | STMT_break\n+  | STMT_cont\n   | STMT_alt_tag of stmt_alt_tag\n   | STMT_alt_type of stmt_alt_type\n   | STMT_alt_port of stmt_alt_port\n@@ -1228,6 +1230,10 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           fmt_atoms ff az;\n           fmt ff \";\";\n \n+      | STMT_break -> fmt ff \"break;\";\n+\n+      | STMT_cont -> fmt ff \"cont;\";\n+\n       | STMT_block b -> fmt_block ff b.node\n \n       | STMT_copy (lv, ex) ->"}, {"sha": "c1746cc2f9991d2e2d588da6042c049790cc6494", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -188,7 +188,14 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n           let (stmts, atom) = ctxt \"stmts: log value\" parse_expr_atom ps in\n             expect ps SEMI;\n             spans ps stmts apos (Ast.STMT_log atom)\n-\n+      | BREAK ->\n+          bump ps;\n+          expect ps SEMI;\n+          [| span ps apos (lexpos ps) Ast.STMT_break |]\n+      | CONT ->\n+          bump ps;\n+          expect ps SEMI;\n+          [| span ps apos (lexpos ps) Ast.STMT_cont |]\n       | CHECK ->\n           bump ps;\n           begin"}, {"sha": "151af8276578933196d26c47b804d8d5cd10bd04", "filename": "src/boot/fe/lexer.mll", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Flexer.mll", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Flexer.mll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Flexer.mll?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -113,6 +113,8 @@\n                 (\"const\", CONST);\n \n                 (\"log\", LOG);\n+                (\"break\", BREAK);\n+                (\"cont\", CONT);\n                 (\"spawn\", SPAWN);\n                 (\"thread\", THREAD);\n                 (\"yield\", YIELD);"}, {"sha": "cd41ec2fec5d45cc82f342e93a93420e77b08cb5", "filename": "src/boot/fe/token.ml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Ftoken.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Ffe%2Ftoken.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ftoken.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -71,6 +71,8 @@ type token =\n   | PUT\n   | RET\n   | BE\n+  | BREAK\n+  | CONT\n \n   (* Type and type-state keywords *)\n   | TYPE\n@@ -226,6 +228,8 @@ let rec string_of_tok t =\n     | PUT        -> \"put\"\n     | RET        -> \"ret\"\n     | BE         -> \"be\"\n+    | BREAK      -> \"break\"\n+    | CONT       -> \"cont\"\n \n     (* Type and type-state keywords *)\n     | TYPE       -> \"type\""}, {"sha": "1161b58e458fec1844bb2222d4beb989062b7cb9", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -234,6 +234,7 @@ let trans_visitor\n   in\n \n   let epilogue_jumps = Stack.create() in\n+  let simple_break_jumps = Stack.create() in (* not used for for-each *)\n \n   let path_name (_:unit) : string =\n     string_of_name (path_to_name path)\n@@ -4717,7 +4718,7 @@ let trans_visitor\n             Some params -> params\n           | None -> [| |]\n       in\n-      let depth = Hashtbl.find cx.ctxt_stmt_loop_depths stmt_id in\n+      let depth = get_stmt_depth cx stmt_id in\n       let fc = { for_each_fixup = fix; for_each_depth = depth } in\n         iflog (fun _ ->\n                  log cx \"for-each at depth %d\\n\" depth);\n@@ -5059,12 +5060,16 @@ let trans_visitor\n           let fwd_jmp = mark () in\n             emit (Il.jmp Il.JMP Il.CodeNone);\n             let block_begin = mark () in\n+              Stack.push (Stack.create()) simple_break_jumps;\n               trans_block sw.Ast.while_body;\n               patch fwd_jmp;\n               Array.iter trans_stmt head_stmts;\n               check_interrupt_flag ();\n-              let back_jmps = trans_cond false head_expr in\n-                List.iter (fun j -> patch_existing j block_begin) back_jmps;\n+              begin\n+                let back_jmps = trans_cond false head_expr in\n+                  List.iter (fun j -> patch_existing j block_begin) back_jmps;\n+              end;\n+              Stack.iter patch (Stack.pop simple_break_jumps);\n \n       | Ast.STMT_if si ->\n           let skip_thn_jmps = trans_cond true si.Ast.if_test in\n@@ -5108,6 +5113,13 @@ let trans_visitor\n           let (dst_cell, _) = get_current_output_cell_and_slot () in\n             trans_be_fn cx dst_cell flv ty_params args\n \n+      | Ast.STMT_break ->\n+          if get_stmt_depth cx stmt.id > 0\n+          then unimpl (Some stmt.id) \"break within iterator-block\";\n+          drop_slots_at_curr_stmt();\n+          Stack.push (mark()) (Stack.top simple_break_jumps);\n+          emit (Il.jmp Il.JMP Il.CodeNone);\n+\n       | Ast.STMT_put atom_opt ->\n           trans_put atom_opt\n "}, {"sha": "782d2e27bc9928f2ba8c198a7925c37cfa465b03", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -945,7 +945,9 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n \n         | Ast.STMT_alt_port _ -> () (* TODO *)\n \n-        | Ast.STMT_fail | Ast.STMT_yield -> ()  (* always well-typed *)\n+        (* always well-typed *)\n+        | Ast.STMT_fail | Ast.STMT_yield \n+        | Ast.STMT_break | Ast.STMT_cont -> ()\n \n         | Ast.STMT_join lval -> infer_lval Ast.TY_task lval\n "}, {"sha": "124541911a88351562c6ef9e74892e601173e78b", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 65, "deletions": 29, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -445,6 +445,15 @@ let bitmap_assigning_visitor\n         Walk.visit_block_pre = visit_block_pre }\n ;;\n \n+type slots_stack = node_id Stack.t;;\n+type block_slots_stack = slots_stack Stack.t;;\n+type frame_block_slots_stack = block_slots_stack Stack.t;;\n+type loop_block_slots_stack = block_slots_stack option Stack.t;;\n+(* like ret drops slots from all blocks in the frame\n+ * break from a simple loo drops slots from all block in a loop *)\n+let (loop_blocks:loop_block_slots_stack) = \n+  let s = Stack.create() in Stack.push None s; s\n+\n let condition_assigning_visitor\n     (cx:ctxt)\n     (tables_stack:typestate_tables Stack.t)\n@@ -574,7 +583,7 @@ let condition_assigning_visitor\n           let precond = slot_inits (lval_slots cx lval) in\n             raise_precondition sid precond;\n   in\n-\n+    \n   let visit_stmt_pre s =\n     begin\n       match s.node with\n@@ -694,7 +703,6 @@ let condition_assigning_visitor\n         | Ast.STMT_check_expr expr ->\n             let precond = slot_inits (expr_slots cx expr) in\n               raise_pre_post_cond s.id precond\n-\n         | Ast.STMT_while sw ->\n             let (_, expr) = sw.Ast.while_lval in\n             let precond = slot_inits (expr_slots cx expr) in\n@@ -1275,9 +1283,6 @@ let typestate_verify_visitor\n         Walk.visit_block_pre = visit_block_pre }\n ;;\n \n-type slots_stack = node_id Stack.t;;\n-type block_slots_stack = slots_stack Stack.t;;\n-type frame_block_slots_stack = block_slots_stack Stack.t;;\n \n let lifecycle_visitor\n     (cx:ctxt)\n@@ -1312,18 +1317,24 @@ let lifecycle_visitor\n \n \n   let visit_block_pre b =\n-    Stack.push (Stack.create()) (Stack.top frame_blocks);\n-    begin\n-      match htab_search implicit_init_block_slots b.id with\n-          None -> ()\n-        | Some slots ->\n+   \n+    let s = Stack.create() in\n+      begin\n+        match Stack.top loop_blocks with \n+            Some loop -> Stack.push s loop | None -> ()\n+      end;\n+      Stack.push s (Stack.top frame_blocks);\n+      begin\n+        match htab_search implicit_init_block_slots b.id with\n+            None -> ()\n+          | Some slots ->\n             List.iter\n               (fun slot ->\n                  push_slot slot;\n                  mark_slot_live slot)\n               slots\n-    end;\n-    inner.Walk.visit_block_pre b\n+      end;\n+      inner.Walk.visit_block_pre b\n   in\n \n   let note_drops stmt slots =\n@@ -1341,8 +1352,20 @@ let lifecycle_visitor\n     htab_put cx.ctxt_post_stmt_slot_drops stmt.id slots\n   in\n \n+  let filter_live_block_slots slots =\n+    List.filter (fun i -> Hashtbl.mem live_block_slots i) slots\n+  in\n+\n   let visit_block_post b =\n     inner.Walk.visit_block_post b;\n+    begin\n+      match Stack.top loop_blocks with\n+          Some loop -> \n+            ignore(Stack.pop loop);\n+            if Stack.is_empty loop then\n+              ignore(Stack.pop loop_blocks);\n+        | None -> ()\n+    end;\n     let block_slots = Stack.pop (Stack.top frame_blocks) in\n     let stmts = b.node in\n     let len = Array.length stmts in\n@@ -1352,7 +1375,8 @@ let lifecycle_visitor\n           let s = stmts.(len-1) in\n             match s.node with\n                 Ast.STMT_ret _\n-              | Ast.STMT_be _ ->\n+              | Ast.STMT_be _ \n+              | Ast.STMT_break ->\n                   () (* Taken care of in visit_stmt_post below. *)\n               | _ ->\n                 (* The blk_slots stack we have has accumulated slots in\n@@ -1364,11 +1388,7 @@ let lifecycle_visitor\n                  * point in the block.\n                  *)\n                 let slots = stk_elts_from_top block_slots in\n-                let live =\n-                  List.filter\n-                    (fun i -> Hashtbl.mem live_block_slots i)\n-                    slots\n-                in\n+                let live = filter_live_block_slots slots in\n                   note_drops s live\n         end;\n   in\n@@ -1440,6 +1460,10 @@ let lifecycle_visitor\n                 f.Ast.for_each_body.id\n                 [ (fst f.Ast.for_each_slot).id ]\n \n+          | Ast.STMT_while _ ->\n+              iflog cx (fun _ -> log cx \"entering a loop\");\n+              Stack.push (Some (Stack.create ()))  loop_blocks;\n+\n           | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms } ->\n               let note_slot block slot_id =\n                 log cx\n@@ -1475,26 +1499,38 @@ let lifecycle_visitor\n \n   let visit_stmt_post s =\n     inner.Walk.visit_stmt_post s;\n+    let handle_ret_like_stmt block_stack =\n+      let blocks = stk_elts_from_top block_stack in\n+          let slots = List.concat (List.map stk_elts_from_top blocks) in\n+          let live = filter_live_block_slots slots in\n+            note_drops s live\n+    in\n     match s.node with\n         Ast.STMT_ret _\n       | Ast.STMT_be _ ->\n-          let blocks = stk_elts_from_top (Stack.top frame_blocks) in\n-          let slots = List.concat (List.map stk_elts_from_top blocks) in\n-          let live =\n-            List.filter\n-              (fun i -> Hashtbl.mem live_block_slots i)\n-              slots\n-          in\n-            note_drops s live\n+          handle_ret_like_stmt (Stack.top frame_blocks)\n+      | Ast.STMT_break ->\n+          begin\n+            match (Stack.top loop_blocks) with\n+                Some loop -> handle_ret_like_stmt loop\n+              | None -> \n+                  iflog cx (fun _ ->\n+                              log cx \"break statement outside of a loop\");\n+                  err (Some s.id) \"break statement outside of a loop\"\n+          end\n       | _ -> ()\n   in\n \n   let enter_frame _ =\n-    Stack.push (Stack.create()) frame_blocks\n+    Stack.push (Stack.create()) frame_blocks;\n+    Stack.push None loop_blocks\n   in\n-\n+    \n   let leave_frame _ =\n-    ignore (Stack.pop frame_blocks)\n+    ignore (Stack.pop frame_blocks);\n+    match Stack.pop loop_blocks with\n+        Some _ -> bug () \"leave_frame should not end a loop\"\n+      | None -> ()\n   in\n \n   let visit_mod_item_pre n p i ="}, {"sha": "d776d82d345d86334d026cec8caa1ab822980fa6", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -481,8 +481,7 @@ and walk_stmt\n       | Ast.STMT_decl (Ast.DECL_slot (_, slot)) ->\n           walk_slot_identified v slot\n \n-      | Ast.STMT_yield\n-      | Ast.STMT_fail ->\n+      | Ast.STMT_break | Ast.STMT_cont | Ast.STMT_yield | Ast.STMT_fail ->\n           ()\n \n       | Ast.STMT_join task ->"}, {"sha": "0e27f252ebb310e69e4cf3a7834d44fccef790f7", "filename": "src/test/run-pass/while-with-break.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3404803b6c6de079a590a4bc96313d9a68f164/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=4a3404803b6c6de079a590a4bc96313d9a68f164", "patch": "@@ -0,0 +1,15 @@\n+// -*- rust -*-\n+\n+fn main() {\n+  let int i = 90;\n+  while (i < 100) {\n+    log i;\n+    i = i + 1;\n+    if (i == 95) { \n+      let vec[int] v = vec(1,2,3,4,5); // we check that it is freed by break\n+      log \"breaking\"; \n+      break; \n+    }\n+  }\n+  check(i == 95);\n+}"}]}