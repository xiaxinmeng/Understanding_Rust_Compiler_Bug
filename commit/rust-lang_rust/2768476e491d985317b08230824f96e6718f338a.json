{"sha": "2768476e491d985317b08230824f96e6718f338a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Njg0NzZlNDkxZDk4NTMxN2IwODIzMDgyNGY5NmU2NzE4ZjMzOGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-18T11:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T11:26:10Z"}, "message": "Merge #3214\n\n3214: Fully document ra_lsp_server r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "08e5d3f64f545d402b1a9f4fe65330ca56e1d741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e5d3f64f545d402b1a9f4fe65330ca56e1d741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2768476e491d985317b08230824f96e6718f338a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeS8nSCRBK7hj4Ov3rIwAAdHIIAAvrrVQjKroT78efzy1fONJf\nL5I+gCQ3bsFnJFru82OnAD97qFH3u8mQjjKRHdhggZTyZLEdo1YjPd2blY1XJGHY\n+/a6aHm5zkyDDaqLOhI/9t7ASY6OzhIcNZqRGvq4airBe3WZCkV9iK/dgEtbzS6G\nq15F7W9AmdxnBDmuqiAHt5Tk+8JPGXKvlDcP3GZwttNGGtzE3eOYcvePJ2T8Db6h\nm0nf1Xu7HoL7KZhatSMvJRHgNGkyGqJhpznkbKcPyhOsXoEUglgynXKgbSCVTzZQ\nqtLHJWHRhXnEjxsYO58d2QOORr9F2CvO1bOddqG29xqndXxIjbwkTFvyVkDRxP0=\n=7w2R\n-----END PGP SIGNATURE-----\n", "payload": "tree 08e5d3f64f545d402b1a9f4fe65330ca56e1d741\nparent a349e5d4fcda1a6b96a09491a59d1ec940a48654\nparent 4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582025170 +0000\ncommitter GitHub <noreply@github.com> 1582025170 +0000\n\nMerge #3214\n\n3214: Fully document ra_lsp_server r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2768476e491d985317b08230824f96e6718f338a", "html_url": "https://github.com/rust-lang/rust/commit/2768476e491d985317b08230824f96e6718f338a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2768476e491d985317b08230824f96e6718f338a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a349e5d4fcda1a6b96a09491a59d1ec940a48654", "url": "https://api.github.com/repos/rust-lang/rust/commits/a349e5d4fcda1a6b96a09491a59d1ec940a48654", "html_url": "https://github.com/rust-lang/rust/commit/a349e5d4fcda1a6b96a09491a59d1ec940a48654"}, {"sha": "4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "html_url": "https://github.com/rust-lang/rust/commit/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977"}], "stats": {"total": 187, "additions": 105, "deletions": 82}, "files": [{"sha": "151ca3da51fc27f3586041582350efcfa4662a03", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -3,10 +3,15 @@ edition = \"2018\"\n name = \"ra_lsp_server\"\n version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n+autobins = false\n \n [lib]\n doctest = false\n \n+[[bin]]\n+name = \"ra_lsp_server\"\n+path = \"./src/bin/main.rs\"\n+\n [dependencies]\n anyhow = \"1.0\"\n crossbeam-channel = \"0.4\""}, {"sha": "3890fe13a3f1abf40217c8276d7acc2e14d56784", "filename": "crates/ra_lsp_server/src/bin/args.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs?ref=2768476e491d985317b08230824f96e6718f338a", "previous_filename": "crates/ra_lsp_server/src/args.rs"}, {"sha": "e25d54a0d6e724ebcba400b51cbd9c8acd3bcc07", "filename": "crates/ra_lsp_server/src/bin/main.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,6 @@\n-//! `ra_lsp_server` binary\n+//! Driver for rust-analyzer.\n+//!\n+//! Based on cli flags, either spawns an LSP server, or runs a batch analysis\n mod args;\n \n use lsp_server::Connection;", "previous_filename": "crates/ra_lsp_server/src/main.rs"}, {"sha": "53751aafb705b35552578da294690baef1bca01f", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 59, "deletions": 54, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,69 +1,74 @@\n-//! FIXME: write short doc here\n+//! See `CargoTargetSpec`\n \n use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, ProjectWorkspace, TargetKind};\n \n use crate::{world::WorldSnapshot, Result};\n \n-pub(crate) fn runnable_args(\n-    world: &WorldSnapshot,\n-    file_id: FileId,\n-    kind: &RunnableKind,\n-) -> Result<Vec<String>> {\n-    let spec = CargoTargetSpec::for_file(world, file_id)?;\n-    let mut res = Vec::new();\n-    match kind {\n-        RunnableKind::Test { test_id } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n+/// Abstract representation of Cargo target.\n+///\n+/// We use it to cook up the set of cli args we need to pass to Cargo to\n+/// build/test/run the target.\n+pub(crate) struct CargoTargetSpec {\n+    pub(crate) package: String,\n+    pub(crate) target: String,\n+    pub(crate) target_kind: TargetKind,\n+}\n+\n+impl CargoTargetSpec {\n+    pub(crate) fn runnable_args(\n+        spec: Option<CargoTargetSpec>,\n+        kind: &RunnableKind,\n+    ) -> Result<Vec<String>> {\n+        let mut res = Vec::new();\n+        match kind {\n+            RunnableKind::Test { test_id } => {\n+                res.push(\"test\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(test_id.to_string());\n+                if let TestId::Path(_) = test_id {\n+                    res.push(\"--exact\".to_string());\n+                }\n+                res.push(\"--nocapture\".to_string());\n             }\n-            res.push(\"--\".to_string());\n-            res.push(test_id.to_string());\n-            if let TestId::Path(_) = test_id {\n-                res.push(\"--exact\".to_string());\n+            RunnableKind::TestMod { path } => {\n+                res.push(\"test\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(path.to_string());\n+                res.push(\"--nocapture\".to_string());\n             }\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::TestMod { path } => {\n-            res.push(\"test\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n+            RunnableKind::Bench { test_id } => {\n+                res.push(\"bench\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(test_id.to_string());\n+                if let TestId::Path(_) = test_id {\n+                    res.push(\"--exact\".to_string());\n+                }\n+                res.push(\"--nocapture\".to_string());\n             }\n-            res.push(\"--\".to_string());\n-            res.push(path.to_string());\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::Bench { test_id } => {\n-            res.push(\"bench\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n-            }\n-            res.push(\"--\".to_string());\n-            res.push(test_id.to_string());\n-            if let TestId::Path(_) = test_id {\n-                res.push(\"--exact\".to_string());\n-            }\n-            res.push(\"--nocapture\".to_string());\n-        }\n-        RunnableKind::Bin => {\n-            res.push(\"run\".to_string());\n-            if let Some(spec) = spec {\n-                spec.push_to(&mut res);\n+            RunnableKind::Bin => {\n+                res.push(\"run\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n             }\n         }\n+        Ok(res)\n     }\n-    Ok(res)\n-}\n \n-pub struct CargoTargetSpec {\n-    pub package: String,\n-    pub target: String,\n-    pub target_kind: TargetKind,\n-}\n-\n-impl CargoTargetSpec {\n-    pub fn for_file(world: &WorldSnapshot, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n+    pub(crate) fn for_file(\n+        world: &WorldSnapshot,\n+        file_id: FileId,\n+    ) -> Result<Option<CargoTargetSpec>> {\n         let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n             Some(crate_id) => crate_id,\n             None => return Ok(None),\n@@ -84,7 +89,7 @@ impl CargoTargetSpec {\n         Ok(res)\n     }\n \n-    pub fn push_to(self, buf: &mut Vec<String>) {\n+    pub(crate) fn push_to(self, buf: &mut Vec<String>) {\n         buf.push(\"--package\".to_string());\n         buf.push(self.package);\n         match self.target_kind {"}, {"sha": "c9738d1010b8c7736a75b825b16c0feacd8a9eb9", "filename": "crates/ra_lsp_server/src/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Various batch processing tasks, intended primarily for debugging.\n \n mod load_cargo;\n mod analysis_stats;"}, {"sha": "91855e59252f944f99a4620263d39257771129d9", "filename": "crates/ra_lsp_server/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Benchmark operations like highlighting or goto definition.\n \n use std::{\n     path::{Path, PathBuf},"}, {"sha": "99ab6e443723e3edc821bf7ff4373d1ef08cb19a", "filename": "crates/ra_lsp_server/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! Fully type-check project and print various stats, like the number of type\n+//! errors.\n \n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n "}, {"sha": "8cd08ecb6f446a702bbb1bd318d629fa58bf57aa", "filename": "crates/ra_lsp_server/src/cli/load_cargo.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,26 +1,28 @@\n-//! FIXME: write short doc here\n+//! Loads a Cargo project into a static instance of analysis, without support\n+//! for incorporating changes.\n \n-use std::{collections::HashSet, path::Path};\n+use std::path::Path;\n \n+use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost, FeatureFlags};\n use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::vfs_glob::RustPackageFilterBuilder;\n \n-use anyhow::Result;\n-\n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n     FileId(f.0)\n }\n fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n     SourceRootId(r.0)\n }\n \n-pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n+pub(crate) fn load_cargo(\n+    root: &Path,\n+) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(root.as_ref(), &Default::default())?;\n     let project_roots = ws.to_roots();\n@@ -74,7 +76,7 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n     Ok((host, source_roots))\n }\n \n-pub fn load(\n+pub(crate) fn load(\n     source_roots: &FxHashMap<SourceRootId, PackageRoot>,\n     crate_graph: CrateGraph,\n     vfs: &mut Vfs,\n@@ -86,7 +88,7 @@ pub fn load(\n     analysis_change.set_crate_graph(crate_graph);\n \n     // wait until Vfs has loaded all roots\n-    let mut roots_loaded = HashSet::new();\n+    let mut roots_loaded = FxHashSet::default();\n     for task in receiver {\n         vfs.handle_task(task);\n         let mut done = false;"}, {"sha": "90ef74056b08b54e87b74c75a804eb1c02403d12", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,5 @@\n-//! Convenience module responsible for translating between rust-analyzer's types and LSP types.\n+//! Convenience module responsible for translating between rust-analyzer's types\n+//! and LSP types.\n \n use lsp_types::{\n     self, CreateFile, DiagnosticSeverity, DocumentChangeOperation, DocumentChanges, Documentation,"}, {"sha": "e7924f0a30f77e21e2256d3ad177ba9fc984431d", "filename": "crates/ra_lsp_server/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,7 +1,9 @@\n //! Book keeping for keeping diagnostics easily in sync with the client.\n+\n+use std::{collections::HashMap, sync::Arc};\n+\n use lsp_types::{CodeActionOrCommand, Diagnostic, Range};\n use ra_ide::FileId;\n-use std::{collections::HashMap, sync::Arc};\n \n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n "}, {"sha": "0dae30e46ec456367a9d702e9063f1e3e60eaa32", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,10 +1,13 @@\n //! Implementation of the LSP for rust-analyzer.\n //!\n-//! This crate takes Rust-specific analysis results from ra_ide and\n-//! translates into LSP types.\n+//! This crate takes Rust-specific analysis results from ra_ide and translates\n+//! into LSP types.\n //!\n //! It also is the root of all state. `world` module defines the bulk of the\n //! state, and `main_loop` module defines the rules for modifying it.\n+//!\n+//! The `cli` submodule implements some batch-processing analysis, primarily as\n+//! a debugging aid.\n #![recursion_limit = \"512\"]\n \n pub mod cli;"}, {"sha": "67d8a5f6fab23a652f13bdda666e0a8136aca0b4", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,5 +1,5 @@\n-//! The main loop of `ra_lsp_server` responsible for dispatching LSP requests/replies and\n-//! notifications back to the client.\n+//! The main loop of `ra_lsp_server` responsible for dispatching LSP\n+//! requests/replies and notifications back to the client.\n \n mod handlers;\n mod subscriptions;"}, {"sha": "bb7bab3729458e0c3abc61b17c12afa16df01b19", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,5 +1,6 @@\n-//! This module is responsible for implementing handlers for Lanuage Server Protocol.\n-//! The majority of requests are fulfilled by calling into the `ra_ide` crate.\n+//! This module is responsible for implementing handlers for Language Server\n+//! Protocol. The majority of requests are fulfilled by calling into the\n+//! `ra_ide` crate.\n \n use std::{\n     collections::hash_map::Entry,\n@@ -29,7 +30,7 @@ use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n \n use crate::{\n-    cargo_target_spec::{runnable_args, CargoTargetSpec},\n+    cargo_target_spec::CargoTargetSpec,\n     conv::{\n         to_call_hierarchy_item, to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith,\n         TryConvWithToVec,\n@@ -921,7 +922,8 @@ fn to_lsp_runnable(\n     file_id: FileId,\n     runnable: Runnable,\n ) -> Result<req::Runnable> {\n-    let args = runnable_args(world, file_id, &runnable.kind)?;\n+    let spec = CargoTargetSpec::for_file(world, file_id)?;\n+    let args = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n         RunnableKind::Test { test_id } => format!(\"test {}\", test_id),"}, {"sha": "73b33e41942c65505f44d2c2e934665e2aacb7f9", "filename": "crates/ra_lsp_server/src/main_loop/pending_requests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,4 @@\n-//! Datastructures that keep track of inflight requests.\n+//! Data structures that keep track of inflight requests.\n \n use std::time::{Duration, Instant};\n "}, {"sha": "bee6437cf34b6f8664171cd6f7b9bbbcf51067d5", "filename": "crates/ra_lsp_server/src/main_loop/subscriptions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,5 @@\n-//! Keeps track of file subscriptions.\n+//! Keeps track of file subscriptions -- the set of currently opened files for\n+//! which we want to publish diagnostics, syntax highlighting, etc.\n \n use ra_ide::FileId;\n use rustc_hash::FxHashSet;"}, {"sha": "91b33f94e8681d3664ffa05621695bf6d8de1625", "filename": "crates/ra_lsp_server/src/vfs_glob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fvfs_glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fvfs_glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_glob.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,4 +1,4 @@\n-//! `ra_vfs_glob` crate implements exclusion rules for vfs.\n+//! Exclusion rules for vfs.\n //!\n //! By default, we include only `.rs` files, and skip some know offenders like\n //! `/target` or `/node_modules` altogether."}, {"sha": "96efab844d5704020dd41a057df1f2150cea5447", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -1,5 +1,5 @@\n-//! The context or environment in which the language server functions.\n-//! In our server implementation this is know as the `WorldState`.\n+//! The context or environment in which the language server functions. In our\n+//! server implementation this is know as the `WorldState`.\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n "}, {"sha": "62c4f844139db470cab851bd87361fe3962908b2", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2768476e491d985317b08230824f96e6718f338a/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2768476e491d985317b08230824f96e6718f338a/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=2768476e491d985317b08230824f96e6718f338a", "patch": "@@ -77,7 +77,6 @@ fn no_docs_comments() {\n         \"ra_hir\",\n         \"ra_hir_expand\",\n         \"ra_ide\",\n-        \"ra_lsp_server\",\n         \"ra_mbe\",\n         \"ra_parser\",\n         \"ra_prof\","}]}