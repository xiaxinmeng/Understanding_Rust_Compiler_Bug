{"sha": "67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "node_id": "C_kwDOAAsO6NoAKDY3ZDVjYzA0NjJmMzM3NzNmMDQyZGMzYzVlYzliZDcxMDA5NWIxYjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-08T07:22:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-17T02:56:38Z"}, "message": "Use `ThinVec` in `ast::Path`.", "tree": {"sha": "60d45d9f781c885fb435f70d9d1993511fe269ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d45d9f781c885fb435f70d9d1993511fe269ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "html_url": "https://github.com/rust-lang/rust/commit/67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b7ca2fcf2ebbba705f7a98c00bd56b5348ee9d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7ca2fcf2ebbba705f7a98c00bd56b5348ee9d7", "html_url": "https://github.com/rust-lang/rust/commit/6b7ca2fcf2ebbba705f7a98c00bd56b5348ee9d7"}], "stats": {"total": 324, "additions": 168, "deletions": 156}, "files": [{"sha": "e1359b9e9e402ae27f53502cda5680aaf2534315", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -3476,6 +3476,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n \n@@ -3916,6 +3917,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"thin-vec\",\n  \"tracing\",\n  \"unicode-normalization\",\n  \"unicode-width\",\n@@ -4051,6 +4053,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\",\n+ \"thin-vec\",\n  \"tracing\",\n ]\n "}, {"sha": "e6b72bd58c540f50d14a77a0ac3e6ae9ee8c44bc", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -36,7 +36,7 @@ use rustc_span::{Span, DUMMY_SP};\n use std::convert::TryFrom;\n use std::fmt;\n use std::mem;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n /// A \"Label\" is an identifier of some point in sources,\n /// e.g. in the following code:\n@@ -90,7 +90,7 @@ pub struct Path {\n     pub span: Span,\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n-    pub segments: Vec<PathSegment>,\n+    pub segments: ThinVec<PathSegment>,\n     pub tokens: Option<LazyAttrTokenStream>,\n }\n \n@@ -114,7 +114,7 @@ impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n-        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n+        Path { segments: thin_vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n \n     pub fn is_global(&self) -> bool {\n@@ -3046,28 +3046,28 @@ mod size_asserts {\n     static_assert_size!(AssocItemKind, 32);\n     static_assert_size!(Attribute, 32);\n     static_assert_size!(Block, 48);\n-    static_assert_size!(Expr, 88);\n-    static_assert_size!(ExprKind, 56);\n+    static_assert_size!(Expr, 72);\n+    static_assert_size!(ExprKind, 40);\n     static_assert_size!(Fn, 184);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n     static_assert_size!(GenericArg, 24);\n-    static_assert_size!(GenericBound, 88);\n+    static_assert_size!(GenericBound, 72);\n     static_assert_size!(Generics, 72);\n-    static_assert_size!(Impl, 200);\n+    static_assert_size!(Impl, 184);\n     static_assert_size!(Item, 184);\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(Lit, 48);\n     static_assert_size!(LitKind, 24);\n     static_assert_size!(Local, 72);\n     static_assert_size!(Param, 40);\n-    static_assert_size!(Pat, 104);\n-    static_assert_size!(Path, 40);\n+    static_assert_size!(Pat, 88);\n+    static_assert_size!(Path, 24);\n     static_assert_size!(PathSegment, 24);\n-    static_assert_size!(PatKind, 80);\n+    static_assert_size!(PatKind, 64);\n     static_assert_size!(Stmt, 32);\n     static_assert_size!(StmtKind, 16);\n-    static_assert_size!(Ty, 80);\n-    static_assert_size!(TyKind, 56);\n+    static_assert_size!(Ty, 64);\n+    static_assert_size!(TyKind, 40);\n     // tidy-alphabetical-end\n }"}, {"sha": "09b08d5059c1c30e936ad6c2078abe2ede39449c", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -10,19 +10,18 @@ use crate::token::{self, CommentKind, Delimiter, Token};\n use crate::tokenstream::{DelimSpan, Spacing, TokenTree};\n use crate::tokenstream::{LazyAttrTokenStream, TokenStream};\n use crate::util::comments;\n-\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_span::source_map::BytePos;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n-\n use std::cell::Cell;\n use std::iter;\n #[cfg(debug_assertions)]\n use std::ops::BitXor;\n #[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicU32, Ordering};\n+use thin_vec::thin_vec;\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n@@ -471,12 +470,12 @@ impl MetaItem {\n                         tokens.peek()\n                     {\n                         tokens.next();\n-                        vec![PathSegment::from_ident(Ident::new(name, span))]\n+                        thin_vec![PathSegment::from_ident(Ident::new(name, span))]\n                     } else {\n                         break 'arm Path::from_ident(Ident::new(name, span));\n                     }\n                 } else {\n-                    vec![PathSegment::path_root(span)]\n+                    thin_vec![PathSegment::path_root(span)]\n                 };\n                 loop {\n                     if let Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }, _)) ="}, {"sha": "18d5e70ecb0174b4821b5116afc634e8efc2a533", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -20,8 +20,8 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-\n use std::iter;\n+use thin_vec::ThinVec;\n \n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n@@ -243,7 +243,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix.\n-                let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n+                let prefix = Path { segments: ThinVec::new(), span: use_tree.span, tokens: None };\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis_span, ident, attrs)\n             }"}, {"sha": "192f54171cee6885d1d327f6397908b6d3afaab0", "filename": "compiler/rustc_expand/Cargo.toml", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2FCargo.toml?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -8,20 +8,21 @@ build = false\n doctest = false\n \n [dependencies]\n-rustc_serialize = { path = \"../rustc_serialize\" }\n-tracing = \"0.1\"\n-rustc_span = { path = \"../rustc_span\" }\n-rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n+crossbeam-channel = \"0.5.0\"\n rustc_ast_passes = { path = \"../rustc_ast_passes\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_parse = { path = \"../rustc_parse\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-rustc_ast = { path = \"../rustc_ast\" }\n-crossbeam-channel = \"0.5.0\"\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "e17cba1478ab6e939eb3153cf76565e4dffb3446", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -1,13 +1,12 @@\n use crate::base::ExtCtxt;\n-\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-\n use rustc_span::Span;\n+use thin_vec::ThinVec;\n \n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<Ident>) -> ast::Path {\n@@ -28,7 +27,7 @@ impl<'a> ExtCtxt<'a> {\n     ) -> ast::Path {\n         assert!(!idents.is_empty());\n         let add_root = global && !idents[0].is_path_segment_keyword();\n-        let mut segments = Vec::with_capacity(idents.len() + add_root as usize);\n+        let mut segments = ThinVec::with_capacity(idents.len() + add_root as usize);\n         if add_root {\n             segments.push(ast::PathSegment::path_root(span));\n         }"}, {"sha": "97b1871028ec043075f2f6a7f5cdc1bafc411c8a", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -1,14 +1,12 @@\n use crate::expand::{AstFragment, AstFragmentKind};\n-\n use rustc_ast as ast;\n use rustc_ast::mut_visit::*;\n use rustc_ast::ptr::P;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Ident;\n-\n use smallvec::{smallvec, SmallVec};\n-\n-use rustc_data_structures::fx::FxHashMap;\n+use thin_vec::ThinVec;\n \n pub fn placeholder(\n     kind: AstFragmentKind,\n@@ -17,7 +15,7 @@ pub fn placeholder(\n ) -> AstFragment {\n     fn mac_placeholder() -> P<ast::MacCall> {\n         P(ast::MacCall {\n-            path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n+            path: ast::Path { span: DUMMY_SP, segments: ThinVec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n         })"}, {"sha": "dbcfb390333100ae34ce0be134cd5f5d27584e02", "filename": "compiler/rustc_parse/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2FCargo.toml?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -7,15 +7,16 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.0\"\n-tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\"\n unicode-normalization = \"0.1.11\"\n unicode-width = \"0.1.4\""}, {"sha": "350b270cc3dfee287c4ac8957e439b3f2165a67c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -18,6 +18,7 @@ use crate::errors::{\n };\n \n use crate::lexer::UnmatchedBrace;\n+use crate::parser;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Lit, LitKind, TokenKind};\n@@ -37,11 +38,10 @@ use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n-use std::ops::{Deref, DerefMut};\n-\n use std::mem::take;\n-\n-use crate::parser;\n+use std::ops::{Deref, DerefMut};\n+use thin_vec::{thin_vec, ThinVec};\n+use tracing::{debug, trace};\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -638,8 +638,11 @@ impl<'a> Parser<'a> {\n             //     field: value,\n             // }\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n-            let path =\n-                Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n+            let path = Path {\n+                segments: ThinVec::new(),\n+                span: self.prev_token.span.shrink_to_lo(),\n+                tokens: None,\n+            };\n             let struct_expr = snapshot.parse_struct_expr(None, path, false);\n             let block_tail = self.parse_block_tail(lo, s, AttemptLocalParseRecovery::No);\n             return Some(match (struct_expr, block_tail) {\n@@ -1426,7 +1429,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n \n-        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP, tokens: None };\n+        let mut path = ast::Path { segments: ThinVec::new(), span: DUMMY_SP, tokens: None };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE, None)?;\n         path.span = ty_span.to(self.prev_token.span);\n \n@@ -2434,7 +2437,7 @@ impl<'a> Parser<'a> {\n                                             None,\n                                             Path {\n                                                 span: new_span,\n-                                                segments: vec![\n+                                                segments: thin_vec![\n                                                     PathSegment::from_ident(*old_ident),\n                                                     PathSegment::from_ident(*ident),\n                                                 ],"}, {"sha": "e5f58ca38946334116dcd58fe031ef3c4dddcbfd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -3,7 +3,6 @@ use crate::errors::{DocCommentDoesNotDocumentAnything, UseEmptyBlockNotSemi};\n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n-\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -22,9 +21,10 @@ use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n-\n use std::convert::TryFrom;\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n@@ -972,7 +972,8 @@ impl<'a> Parser<'a> {\n     fn parse_use_tree(&mut self) -> PResult<'a, UseTree> {\n         let lo = self.token.span;\n \n-        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo(), tokens: None };\n+        let mut prefix =\n+            ast::Path { segments: ThinVec::new(), span: lo.shrink_to_lo(), tokens: None };\n         let kind = if self.check(&token::OpenDelim(Delimiter::Brace))\n             || self.check(&token::BinOp(token::Star))\n             || self.is_import_coupler()"}, {"sha": "2d432e3f5bd65500b5ab8279efb4bd9298eaef62", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -11,8 +11,9 @@ use rustc_ast::{\n use rustc_errors::{pluralize, Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n-\n use std::mem;\n+use thin_vec::ThinVec;\n+use tracing::debug;\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -63,7 +64,7 @@ impl<'a> Parser<'a> {\n             path_span = path_lo.to(self.prev_token.span);\n         } else {\n             path_span = self.token.span.to(self.token.span);\n-            path = ast::Path { segments: Vec::new(), span: path_span, tokens: None };\n+            path = ast::Path { segments: ThinVec::new(), span: path_span, tokens: None };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -179,7 +180,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.token.span;\n-        let mut segments = Vec::new();\n+        let mut segments = ThinVec::new();\n         let mod_sep_ctxt = self.token.span.ctxt();\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n@@ -191,7 +192,7 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_path_segments(\n         &mut self,\n-        segments: &mut Vec<PathSegment>,\n+        segments: &mut ThinVec<PathSegment>,\n         style: PathStyle,\n         ty_generics: Option<&Generics>,\n     ) -> PResult<'a, ()> {"}, {"sha": "b97f4560c37b3fee08c6808b524670fc0beed45b", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -7,10 +7,8 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n-tracing = \"0.1\"\n-rustc_ast = { path = \"../rustc_ast\" }\n rustc_arena = { path = \"../rustc_arena\" }\n-rustc_middle = { path = \"../rustc_middle\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n@@ -20,7 +18,10 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+thin-vec = \"0.2.8\"\n+tracing = \"0.1\""}, {"sha": "5482e1ccefa1d09847d2258d3ab22985322313a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -25,6 +25,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span, SyntaxContext};\n+use thin_vec::ThinVec;\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};\n@@ -1295,7 +1296,7 @@ impl<'a> Resolver<'a> {\n     {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), true)];\n+        let mut worklist = vec![(start_module, ThinVec::<ast::PathSegment>::new(), true)];\n         let mut worklist_via_import = vec![];\n \n         while let Some((in_module, path_segments, accessible)) = match worklist.pop() {"}, {"sha": "e0c927dd1e7602ac12e1550cbddb892359e86109", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -33,6 +33,8 @@ use rustc_span::{BytePos, Span};\n use std::iter;\n use std::ops::Deref;\n \n+use thin_vec::ThinVec;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure.\n@@ -78,7 +80,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     let path_len = suggestion.path.segments.len();\n     let enum_path = ast::Path {\n         span: suggestion.path.span,\n-        segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+        segments: suggestion.path.segments[0..path_len - 1].iter().cloned().collect(),\n         tokens: None,\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n@@ -1831,7 +1833,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {\n         let mut result = None;\n         let mut seen_modules = FxHashSet::default();\n-        let mut worklist = vec![(self.r.graph_root, Vec::new())];\n+        let mut worklist = vec![(self.r.graph_root, ThinVec::new())];\n \n         while let Some((in_module, path_segments)) = worklist.pop() {\n             // abort if the module is already found"}, {"sha": "d6dc179da7f9897b0112a5d23abb3f524bad9dc0", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -25,6 +25,7 @@ extern crate rustc_data_structures;\n extern crate rustc_parse;\n extern crate rustc_session;\n extern crate rustc_span;\n+extern crate thin_vec;\n \n use rustc_ast::mut_visit::{self, visit_clobber, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -35,6 +36,7 @@ use rustc_session::parse::ParseSess;\n use rustc_span::source_map::FilePathMapping;\n use rustc_span::source_map::{FileName, Spanned, DUMMY_SP};\n use rustc_span::symbol::Ident;\n+use thin_vec::thin_vec;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n@@ -51,7 +53,7 @@ fn expr(kind: ExprKind) -> P<Expr> {\n \n fn make_x() -> P<Expr> {\n     let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n-    let path = Path { segments: vec![seg], span: DUMMY_SP, tokens: None };\n+    let path = Path { segments: thin_vec![seg], span: DUMMY_SP, tokens: None };\n     expr(ExprKind::Path(None, path))\n }\n "}, {"sha": "109306cd7af897c4f0110340c061df70d9a90bf8", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67d5cc0462f33773f042dc3c5ec9bd710095b1b4/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=67d5cc0462f33773f042dc3c5ec9bd710095b1b4", "patch": "@@ -2,118 +2,118 @@ ast-stats-1 PRE EXPANSION AST STATS\n ast-stats-1 Name                Accumulated Size         Count     Item Size\n ast-stats-1 ----------------------------------------------------------------\n ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n-ast-stats-1 Crate                     56 ( 0.7%)             1            56\n-ast-stats-1 Attribute                 64 ( 0.8%)             2            32\n+ast-stats-1 Crate                     56 ( 0.8%)             1            56\n+ast-stats-1 Attribute                 64 ( 0.9%)             2            32\n ast-stats-1 - Normal                    32 ( 0.4%)             1\n ast-stats-1 - DocComment                32 ( 0.4%)             1\n-ast-stats-1 GenericArgs               64 ( 0.8%)             1            64\n-ast-stats-1 - AngleBracketed            64 ( 0.8%)             1\n-ast-stats-1 Local                     72 ( 0.9%)             1            72\n-ast-stats-1 WherePredicate            72 ( 0.9%)             1            72\n-ast-stats-1 - BoundPredicate            72 ( 0.9%)             1\n-ast-stats-1 Arm                       96 ( 1.2%)             2            48\n-ast-stats-1 ForeignItem               96 ( 1.2%)             1            96\n-ast-stats-1 - Fn                        96 ( 1.2%)             1\n-ast-stats-1 FieldDef                 160 ( 2.0%)             2            80\n-ast-stats-1 Stmt                     160 ( 2.0%)             5            32\n+ast-stats-1 GenericArgs               64 ( 0.9%)             1            64\n+ast-stats-1 - AngleBracketed            64 ( 0.9%)             1\n+ast-stats-1 Local                     72 ( 1.0%)             1            72\n+ast-stats-1 WherePredicate            72 ( 1.0%)             1            72\n+ast-stats-1 - BoundPredicate            72 ( 1.0%)             1\n+ast-stats-1 Arm                       96 ( 1.3%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.3%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.3%)             1\n+ast-stats-1 FieldDef                 160 ( 2.2%)             2            80\n+ast-stats-1 Stmt                     160 ( 2.2%)             5            32\n ast-stats-1 - Local                     32 ( 0.4%)             1\n ast-stats-1 - MacCall                   32 ( 0.4%)             1\n-ast-stats-1 - Expr                      96 ( 1.2%)             3\n-ast-stats-1 Param                    160 ( 2.0%)             4            40\n-ast-stats-1 FnDecl                   200 ( 2.5%)             5            40\n-ast-stats-1 Variant                  240 ( 3.0%)             2           120\n-ast-stats-1 Block                    288 ( 3.6%)             6            48\n-ast-stats-1 GenericBound             352 ( 4.4%)             4            88\n-ast-stats-1 - Trait                    352 ( 4.4%)             4\n-ast-stats-1 AssocItem                416 ( 5.2%)             4           104\n-ast-stats-1 - Type                     208 ( 2.6%)             2\n-ast-stats-1 - Fn                       208 ( 2.6%)             2\n-ast-stats-1 GenericParam             480 ( 6.0%)             5            96\n-ast-stats-1 Expr                     704 ( 8.9%)             8            88\n-ast-stats-1 - Path                      88 ( 1.1%)             1\n-ast-stats-1 - Match                     88 ( 1.1%)             1\n-ast-stats-1 - Struct                    88 ( 1.1%)             1\n-ast-stats-1 - Lit                      176 ( 2.2%)             2\n-ast-stats-1 - Block                    264 ( 3.3%)             3\n-ast-stats-1 PathSegment              720 ( 9.1%)            30            24\n-ast-stats-1 Pat                      728 ( 9.2%)             7           104\n-ast-stats-1 - Struct                   104 ( 1.3%)             1\n-ast-stats-1 - Wild                     104 ( 1.3%)             1\n-ast-stats-1 - Ident                    520 ( 6.5%)             5\n-ast-stats-1 Ty                     1_120 (14.1%)            14            80\n-ast-stats-1 - Rptr                      80 ( 1.0%)             1\n-ast-stats-1 - Ptr                       80 ( 1.0%)             1\n-ast-stats-1 - ImplicitSelf             160 ( 2.0%)             2\n-ast-stats-1 - Path                     800 (10.1%)            10\n-ast-stats-1 Item                   1_656 (20.8%)             9           184\n-ast-stats-1 - Trait                    184 ( 2.3%)             1\n-ast-stats-1 - Enum                     184 ( 2.3%)             1\n-ast-stats-1 - ForeignMod               184 ( 2.3%)             1\n-ast-stats-1 - Impl                     184 ( 2.3%)             1\n-ast-stats-1 - Fn                       368 ( 4.6%)             2\n-ast-stats-1 - Use                      552 ( 6.9%)             3\n+ast-stats-1 - Expr                      96 ( 1.3%)             3\n+ast-stats-1 Param                    160 ( 2.2%)             4            40\n+ast-stats-1 FnDecl                   200 ( 2.7%)             5            40\n+ast-stats-1 Variant                  240 ( 3.2%)             2           120\n+ast-stats-1 GenericBound             288 ( 3.9%)             4            72\n+ast-stats-1 - Trait                    288 ( 3.9%)             4\n+ast-stats-1 Block                    288 ( 3.9%)             6            48\n+ast-stats-1 AssocItem                416 ( 5.6%)             4           104\n+ast-stats-1 - Type                     208 ( 2.8%)             2\n+ast-stats-1 - Fn                       208 ( 2.8%)             2\n+ast-stats-1 GenericParam             480 ( 6.5%)             5            96\n+ast-stats-1 Expr                     576 ( 7.8%)             8            72\n+ast-stats-1 - Path                      72 ( 1.0%)             1\n+ast-stats-1 - Match                     72 ( 1.0%)             1\n+ast-stats-1 - Struct                    72 ( 1.0%)             1\n+ast-stats-1 - Lit                      144 ( 1.9%)             2\n+ast-stats-1 - Block                    216 ( 2.9%)             3\n+ast-stats-1 Pat                      616 ( 8.3%)             7            88\n+ast-stats-1 - Struct                    88 ( 1.2%)             1\n+ast-stats-1 - Wild                      88 ( 1.2%)             1\n+ast-stats-1 - Ident                    440 ( 5.9%)             5\n+ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n+ast-stats-1 Ty                       896 (12.1%)            14            64\n+ast-stats-1 - Rptr                      64 ( 0.9%)             1\n+ast-stats-1 - Ptr                       64 ( 0.9%)             1\n+ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n+ast-stats-1 - Path                     640 ( 8.6%)            10\n+ast-stats-1 Item                   1_656 (22.3%)             9           184\n+ast-stats-1 - Trait                    184 ( 2.5%)             1\n+ast-stats-1 - Enum                     184 ( 2.5%)             1\n+ast-stats-1 - ForeignMod               184 ( 2.5%)             1\n+ast-stats-1 - Impl                     184 ( 2.5%)             1\n+ast-stats-1 - Fn                       368 ( 5.0%)             2\n+ast-stats-1 - Use                      552 ( 7.4%)             3\n ast-stats-1 ----------------------------------------------------------------\n-ast-stats-1 Total                  7_952\n+ast-stats-1 Total                  7_424\n ast-stats-1\n ast-stats-2 POST EXPANSION AST STATS\n ast-stats-2 Name                Accumulated Size         Count     Item Size\n ast-stats-2 ----------------------------------------------------------------\n ast-stats-2 ExprField                 48 ( 0.6%)             1            48\n-ast-stats-2 Crate                     56 ( 0.6%)             1            56\n-ast-stats-2 GenericArgs               64 ( 0.7%)             1            64\n-ast-stats-2 - AngleBracketed            64 ( 0.7%)             1\n-ast-stats-2 Local                     72 ( 0.8%)             1            72\n-ast-stats-2 WherePredicate            72 ( 0.8%)             1            72\n-ast-stats-2 - BoundPredicate            72 ( 0.8%)             1\n-ast-stats-2 Arm                       96 ( 1.1%)             2            48\n-ast-stats-2 ForeignItem               96 ( 1.1%)             1            96\n-ast-stats-2 - Fn                        96 ( 1.1%)             1\n-ast-stats-2 InlineAsm                120 ( 1.4%)             1           120\n-ast-stats-2 Attribute                128 ( 1.5%)             4            32\n+ast-stats-2 Crate                     56 ( 0.7%)             1            56\n+ast-stats-2 GenericArgs               64 ( 0.8%)             1            64\n+ast-stats-2 - AngleBracketed            64 ( 0.8%)             1\n+ast-stats-2 Local                     72 ( 0.9%)             1            72\n+ast-stats-2 WherePredicate            72 ( 0.9%)             1            72\n+ast-stats-2 - BoundPredicate            72 ( 0.9%)             1\n+ast-stats-2 Arm                       96 ( 1.2%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.2%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.2%)             1\n+ast-stats-2 InlineAsm                120 ( 1.5%)             1           120\n+ast-stats-2 Attribute                128 ( 1.6%)             4            32\n ast-stats-2 - DocComment                32 ( 0.4%)             1\n-ast-stats-2 - Normal                    96 ( 1.1%)             3\n-ast-stats-2 FieldDef                 160 ( 1.8%)             2            80\n-ast-stats-2 Stmt                     160 ( 1.8%)             5            32\n+ast-stats-2 - Normal                    96 ( 1.2%)             3\n+ast-stats-2 FieldDef                 160 ( 2.0%)             2            80\n+ast-stats-2 Stmt                     160 ( 2.0%)             5            32\n ast-stats-2 - Local                     32 ( 0.4%)             1\n ast-stats-2 - Semi                      32 ( 0.4%)             1\n-ast-stats-2 - Expr                      96 ( 1.1%)             3\n-ast-stats-2 Param                    160 ( 1.8%)             4            40\n-ast-stats-2 FnDecl                   200 ( 2.3%)             5            40\n-ast-stats-2 Variant                  240 ( 2.8%)             2           120\n-ast-stats-2 Block                    288 ( 3.3%)             6            48\n-ast-stats-2 GenericBound             352 ( 4.1%)             4            88\n-ast-stats-2 - Trait                    352 ( 4.1%)             4\n-ast-stats-2 AssocItem                416 ( 4.8%)             4           104\n-ast-stats-2 - Type                     208 ( 2.4%)             2\n-ast-stats-2 - Fn                       208 ( 2.4%)             2\n-ast-stats-2 GenericParam             480 ( 5.5%)             5            96\n-ast-stats-2 Pat                      728 ( 8.4%)             7           104\n-ast-stats-2 - Struct                   104 ( 1.2%)             1\n-ast-stats-2 - Wild                     104 ( 1.2%)             1\n-ast-stats-2 - Ident                    520 ( 6.0%)             5\n-ast-stats-2 PathSegment              792 ( 9.1%)            33            24\n-ast-stats-2 Expr                     792 ( 9.1%)             9            88\n-ast-stats-2 - Path                      88 ( 1.0%)             1\n-ast-stats-2 - Match                     88 ( 1.0%)             1\n-ast-stats-2 - Struct                    88 ( 1.0%)             1\n-ast-stats-2 - InlineAsm                 88 ( 1.0%)             1\n-ast-stats-2 - Lit                      176 ( 2.0%)             2\n-ast-stats-2 - Block                    264 ( 3.0%)             3\n-ast-stats-2 Ty                     1_120 (12.9%)            14            80\n-ast-stats-2 - Rptr                      80 ( 0.9%)             1\n-ast-stats-2 - Ptr                       80 ( 0.9%)             1\n-ast-stats-2 - ImplicitSelf             160 ( 1.8%)             2\n-ast-stats-2 - Path                     800 ( 9.2%)            10\n-ast-stats-2 Item                   2_024 (23.4%)            11           184\n-ast-stats-2 - Trait                    184 ( 2.1%)             1\n-ast-stats-2 - Enum                     184 ( 2.1%)             1\n-ast-stats-2 - ExternCrate              184 ( 2.1%)             1\n-ast-stats-2 - ForeignMod               184 ( 2.1%)             1\n-ast-stats-2 - Impl                     184 ( 2.1%)             1\n-ast-stats-2 - Fn                       368 ( 4.2%)             2\n-ast-stats-2 - Use                      736 ( 8.5%)             4\n+ast-stats-2 - Expr                      96 ( 1.2%)             3\n+ast-stats-2 Param                    160 ( 2.0%)             4            40\n+ast-stats-2 FnDecl                   200 ( 2.5%)             5            40\n+ast-stats-2 Variant                  240 ( 3.0%)             2           120\n+ast-stats-2 GenericBound             288 ( 3.5%)             4            72\n+ast-stats-2 - Trait                    288 ( 3.5%)             4\n+ast-stats-2 Block                    288 ( 3.5%)             6            48\n+ast-stats-2 AssocItem                416 ( 5.1%)             4           104\n+ast-stats-2 - Type                     208 ( 2.6%)             2\n+ast-stats-2 - Fn                       208 ( 2.6%)             2\n+ast-stats-2 GenericParam             480 ( 5.9%)             5            96\n+ast-stats-2 Pat                      616 ( 7.6%)             7            88\n+ast-stats-2 - Struct                    88 ( 1.1%)             1\n+ast-stats-2 - Wild                      88 ( 1.1%)             1\n+ast-stats-2 - Ident                    440 ( 5.4%)             5\n+ast-stats-2 Expr                     648 ( 8.0%)             9            72\n+ast-stats-2 - Path                      72 ( 0.9%)             1\n+ast-stats-2 - Match                     72 ( 0.9%)             1\n+ast-stats-2 - Struct                    72 ( 0.9%)             1\n+ast-stats-2 - InlineAsm                 72 ( 0.9%)             1\n+ast-stats-2 - Lit                      144 ( 1.8%)             2\n+ast-stats-2 - Block                    216 ( 2.7%)             3\n+ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n+ast-stats-2 Ty                       896 (11.0%)            14            64\n+ast-stats-2 - Rptr                      64 ( 0.8%)             1\n+ast-stats-2 - Ptr                       64 ( 0.8%)             1\n+ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n+ast-stats-2 - Path                     640 ( 7.9%)            10\n+ast-stats-2 Item                   2_024 (24.9%)            11           184\n+ast-stats-2 - Trait                    184 ( 2.3%)             1\n+ast-stats-2 - Enum                     184 ( 2.3%)             1\n+ast-stats-2 - ExternCrate              184 ( 2.3%)             1\n+ast-stats-2 - ForeignMod               184 ( 2.3%)             1\n+ast-stats-2 - Impl                     184 ( 2.3%)             1\n+ast-stats-2 - Fn                       368 ( 4.5%)             2\n+ast-stats-2 - Use                      736 ( 9.1%)             4\n ast-stats-2 ----------------------------------------------------------------\n-ast-stats-2 Total                  8_664\n+ast-stats-2 Total                  8_120\n ast-stats-2\n hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size"}]}