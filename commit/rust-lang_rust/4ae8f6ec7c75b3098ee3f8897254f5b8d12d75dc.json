{"sha": "4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZThmNmVjN2M3NWIzMDk4ZWUzZjg4OTcyNTRmNWI4ZDEyZDc1ZGM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-09T23:51:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-10T05:00:48Z"}, "message": "address review comments", "tree": {"sha": "003f8c1d82f5609511c8a1f2772734b4c0cb8051", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/003f8c1d82f5609511c8a1f2772734b4c0cb8051"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "html_url": "https://github.com/rust-lang/rust/commit/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdbe4ce5c14286f2b3081ed17718ed5c26d6780a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbe4ce5c14286f2b3081ed17718ed5c26d6780a", "html_url": "https://github.com/rust-lang/rust/commit/fdbe4ce5c14286f2b3081ed17718ed5c26d6780a"}], "stats": {"total": 106, "additions": 97, "deletions": 9}, "files": [{"sha": "245353c2e0756495099f5b703b076722464723c3", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "patch": "@@ -1884,6 +1884,16 @@ impl Clone for Ty {\n     }\n }\n \n+impl Ty {\n+    pub fn peel_refs(&self) -> &Self {\n+        let mut final_ty = self;\n+        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+            final_ty = &ty;\n+        }\n+        final_ty\n+    }\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafe,"}, {"sha": "bee05e7738280ebc56e6e2701b1a07d5bb2d4e7c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "patch": "@@ -442,7 +442,11 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         if !self.type_ascription_suggestion(&mut err, base_span) {\n             let mut fallback = false;\n-            if let PathSource::Trait(AliasPossibility::Maybe) = source {\n+            if let (\n+                PathSource::Trait(AliasPossibility::Maybe),\n+                Some(Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, _)),\n+            ) = (source, res)\n+            {\n                 if let Some(bounds @ [_, .., _]) = self.diagnostic_metadata.current_trait_object {\n                     fallback = true;\n                     let spans: Vec<Span> = bounds\n@@ -580,7 +584,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             return false;\n         };\n \n-        if let ast::TyKind::Path(None, type_param_path) = &ty.kind {\n+        if let ast::TyKind::Path(None, type_param_path) = &ty.peel_refs().kind {\n             // Confirm that the `SelfTy` is a type parameter.\n             let partial_res = if let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n                 bounded_ty.id,\n@@ -603,20 +607,24 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 return false;\n             }\n             if let (\n-                [ast::PathSegment { ident, args: None, .. }],\n+                [ast::PathSegment { ident: constrain_ident, args: None, .. }],\n                 [ast::GenericBound::Trait(poly_trait_ref, ast::TraitBoundModifier::None)],\n             ) = (&type_param_path.segments[..], &bounds[..])\n             {\n-                if let [ast::PathSegment { ident: bound_ident, args: None, .. }] =\n+                if let [ast::PathSegment { ident, args: None, .. }] =\n                     &poly_trait_ref.trait_ref.path.segments[..]\n                 {\n-                    if bound_ident.span == span {\n+                    if ident.span == span {\n                         err.span_suggestion_verbose(\n                             *where_span,\n-                            &format!(\"constrain the associated type to `{}`\", bound_ident),\n+                            &format!(\"constrain the associated type to `{}`\", ident),\n                             format!(\n                                 \"{}: {}<{} = {}>\",\n-                                ident,\n+                                self.r\n+                                    .session\n+                                    .source_map()\n+                                    .span_to_snippet(ty.span) // Account for `<&'a T as Foo>::Bar`.\n+                                    .unwrap_or_else(|_| constrain_ident.to_string()),\n                                 path.segments[..*position]\n                                     .iter()\n                                     .map(|segment| path_segment_to_string(segment))\n@@ -627,7 +635,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                     .map(|segment| path_segment_to_string(segment))\n                                     .collect::<Vec<_>>()\n                                     .join(\"::\"),\n-                                bound_ident,\n+                                ident,\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "c66009fe24c06ce0cd9cbd2dacffe285c8f4f720", "filename": "src/test/ui/traits/assoc_type_bound_with_struct.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.rs?ref=4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "patch": "@@ -6,4 +6,14 @@ struct Foo<T> where T: Bar, <T as Bar>::Baz: String { //~ ERROR expected trait,\n     t: T,\n }\n \n+struct Qux<'a, T> where T: Bar, <&'a T as Bar>::Baz: String { //~ ERROR expected trait, found struct\n+    t: &'a T,\n+}\n+\n+fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String { //~ ERROR expected trait, found struct\n+}\n+\n+fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String { //~ ERROR expected trait, found\n+}\n+\n fn main() {}"}, {"sha": "7cf872eb6ac6907553e32a62343fcd55354eb4fc", "filename": "src/test/ui/traits/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc_type_bound_with_struct.stderr?ref=4ae8f6ec7c75b3098ee3f8897254f5b8d12d75dc", "patch": "@@ -18,6 +18,66 @@ help: a trait with a similar name exists\n LL | struct Foo<T> where T: Bar, <T as Bar>::Baz: ToString {\n    |                                              ^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0404]: expected trait, found struct `String`\n+  --> $DIR/assoc_type_bound_with_struct.rs:9:54\n+   |\n+LL | struct Qux<'a, T> where T: Bar, <&'a T as Bar>::Baz: String {\n+   |                                                      ^^^^^^ not a trait\n+   | \n+  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n+   |\n+LL | pub trait ToString {\n+   | ------------------ similarly named trait `ToString` defined here\n+   |\n+help: constrain the associated type to `String`\n+   |\n+LL | struct Qux<'a, T> where T: Bar, &'a T: Bar<Baz = String> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: a trait with a similar name exists\n+   |\n+LL | struct Qux<'a, T> where T: Bar, <&'a T as Bar>::Baz: ToString {\n+   |                                                      ^^^^^^^^\n+\n+error[E0404]: expected trait, found struct `String`\n+  --> $DIR/assoc_type_bound_with_struct.rs:13:45\n+   |\n+LL | fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String {\n+   |                                             ^^^^^^ not a trait\n+   | \n+  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n+   |\n+LL | pub trait ToString {\n+   | ------------------ similarly named trait `ToString` defined here\n+   |\n+help: constrain the associated type to `String`\n+   |\n+LL | fn foo<T: Bar>(_: T) where T: Bar<Baz = String> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^\n+help: a trait with a similar name exists\n+   |\n+LL | fn foo<T: Bar>(_: T) where <T as Bar>::Baz: ToString {\n+   |                                             ^^^^^^^^\n+\n+error[E0404]: expected trait, found struct `String`\n+  --> $DIR/assoc_type_bound_with_struct.rs:16:57\n+   |\n+LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String {\n+   |                                                         ^^^^^^ not a trait\n+   | \n+  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n+   |\n+LL | pub trait ToString {\n+   | ------------------ similarly named trait `ToString` defined here\n+   |\n+help: constrain the associated type to `String`\n+   |\n+LL | fn qux<'a, T: Bar>(_: &'a T) where &'a T: Bar<Baz = String> {\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: a trait with a similar name exists\n+   |\n+LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: ToString {\n+   |                                                         ^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0404`."}]}