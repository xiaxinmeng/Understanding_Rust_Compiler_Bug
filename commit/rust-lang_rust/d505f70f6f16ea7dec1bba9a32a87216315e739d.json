{"sha": "d505f70f6f16ea7dec1bba9a32a87216315e739d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MDVmNzBmNmYxNmVhN2RlYzFiYmE5YTMyYTg3MjE2MzE1ZTczOWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-30T23:31:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T03:31:20Z"}, "message": "rustdoc: Stop ignoring dox on fields/variants\n\nThis is progress towards #9611", "tree": {"sha": "c9ae33a9b62748ee831c332004264611412a0eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ae33a9b62748ee831c332004264611412a0eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d505f70f6f16ea7dec1bba9a32a87216315e739d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d505f70f6f16ea7dec1bba9a32a87216315e739d", "html_url": "https://github.com/rust-lang/rust/commit/d505f70f6f16ea7dec1bba9a32a87216315e739d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d505f70f6f16ea7dec1bba9a32a87216315e739d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb259855dc938e830eb532241ad75fc8d7c3b112", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb259855dc938e830eb532241ad75fc8d7c3b112", "html_url": "https://github.com/rust-lang/rust/commit/fb259855dc938e830eb532241ad75fc8d7c3b112"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "58527b37a82d90e0f1d22e697a6db6484f02f393", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d505f70f6f16ea7dec1bba9a32a87216315e739d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d505f70f6f16ea7dec1bba9a32a87216315e739d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d505f70f6f16ea7dec1bba9a32a87216315e739d", "patch": "@@ -1081,6 +1081,20 @@ fn item_struct(w: &mut io::Writer, it: &clean::Item, s: &clean::Struct) {\n     write!(w, \"</pre>\");\n \n     document(w, it);\n+    match s.struct_type {\n+        doctree::Plain => {\n+            write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\");\n+            for field in s.fields.iter() {\n+                write!(w, \"<tr><td id='structfield.{name}'>\\\n+                                <code>{name}</code></td><td>\",\n+                       name = field.name.get_ref().as_slice());\n+                document(w, field);\n+                write!(w, \"</td></tr>\");\n+            }\n+            write!(w, \"</table>\");\n+        }\n+        _ => {}\n+    }\n     render_methods(w, it);\n }\n \n@@ -1094,36 +1108,46 @@ fn item_enum(w: &mut io::Writer, it: &clean::Item, e: &clean::Enum) {\n     } else {\n         write!(w, \" \\\\{\\n\");\n         for v in e.variants.iter() {\n-            let name = format!(\"<a name='variant.{0}'>{0}</a>\",\n-                               v.name.get_ref().as_slice());\n+            write!(w, \"    \");\n+            let name = v.name.get_ref().as_slice();\n             match v.inner {\n                 clean::VariantItem(ref var) => {\n                     match var.kind {\n-                        clean::CLikeVariant => write!(w, \"    {},\\n\", name),\n+                        clean::CLikeVariant => write!(w, \"{}\", name),\n                         clean::TupleVariant(ref tys) => {\n-                            write!(w, \"    {}(\", name);\n+                            write!(w, \"{}(\", name);\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 { write!(w, \", \") }\n                                 write!(w, \"{}\", *ty);\n                             }\n-                            write!(w, \"),\\n\");\n+                            write!(w, \")\");\n                         }\n                         clean::StructVariant(ref s) => {\n-                            write!(w, \"    \");\n                             render_struct(w, v, None, s.struct_type, s.fields,\n                                           \"    \", false);\n-                            write!(w, \",\\n\");\n                         }\n                     }\n                 }\n                 _ => unreachable!()\n             }\n+            write!(w, \",\\n\");\n         }\n         write!(w, \"\\\\}\");\n     }\n     write!(w, \"</pre>\");\n \n     document(w, it);\n+    if e.variants.len() > 0 {\n+        write!(w, \"<h2 class='variants'>Variants</h2>\\n<table>\");\n+        for variant in e.variants.iter() {\n+            write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n+                   name = variant.name.get_ref().as_slice());\n+            document(w, variant);\n+            write!(w, \"</td></tr>\");\n+        }\n+        write!(w, \"</table>\");\n+\n+    }\n     render_methods(w, it);\n }\n \n@@ -1147,12 +1171,11 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n             for field in fields.iter() {\n                 match field.inner {\n                     clean::StructFieldItem(ref ty) => {\n-                        write!(w, \"    {}<a name='structfield.{name}'>{name}</a>: \\\n-                                   {},\\n{}\",\n+                        write!(w, \"    {}{}: {},\\n{}\",\n                                VisSpace(field.visibility),\n+                               field.name.get_ref().as_slice(),\n                                ty.type_,\n-                               tab,\n-                               name = field.name.get_ref().as_slice());\n+                               tab);\n                     }\n                     _ => unreachable!()\n                 }"}]}