{"sha": "daa949e51665c4ef850249ebf4c13dd6c8da26db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYTk0OWU1MTY2NWM0ZWY4NTAyNDllYmY0YzEzZGQ2YzhkYTI2ZGI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-17T20:19:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-17T20:40:35Z"}, "message": "libsyntax: DSTify `ToSource` and `ToSourceWithHygiene`", "tree": {"sha": "6304fa16eb0565177ba34beb8782e66a64081191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6304fa16eb0565177ba34beb8782e66a64081191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa949e51665c4ef850249ebf4c13dd6c8da26db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa949e51665c4ef850249ebf4c13dd6c8da26db", "html_url": "https://github.com/rust-lang/rust/commit/daa949e51665c4ef850249ebf4c13dd6c8da26db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa949e51665c4ef850249ebf4c13dd6c8da26db/comments", "author": null, "committer": null, "parents": [{"sha": "38c17dc324b82f8f7be2e9f87930e0bd11a38e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c17dc324b82f8f7be2e9f87930e0bd11a38e1c", "html_url": "https://github.com/rust-lang/rust/commit/38c17dc324b82f8f7be2e9f87930e0bd11a38e1c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "ec69175707746693a724479551e5f0f456f20635", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/daa949e51665c4ef850249ebf4c13dd6c8da26db/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa949e51665c4ef850249ebf4c13dd6c8da26db/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=daa949e51665c4ef850249ebf4c13dd6c8da26db", "patch": "@@ -90,14 +90,14 @@ pub mod rt {\n     */\n \n     // FIXME: Move this trait to pprust and get rid of *_to_str?\n-    pub trait ToSource {\n+    pub trait ToSource for Sized? {\n         // Takes a thing and generates a string containing rust code for it.\n         fn to_source(&self) -> String;\n     }\n \n     // FIXME (Issue #16472): This should go away after ToToken impls\n     // are revised to go directly to token-trees.\n-    trait ToSourceWithHygiene : ToSource {\n+    trait ToSourceWithHygiene for Sized? : ToSource {\n         // Takes a thing and generates a string containing rust code\n         // for it, encoding Idents as special byte sequences to\n         // maintain hygiene across serialization and deserialization.\n@@ -150,15 +150,15 @@ pub mod rt {\n \n     macro_rules! impl_to_source_slice(\n         ($t:ty, $sep:expr) => (\n-            impl<'a> ToSource for &'a [$t] {\n+            impl ToSource for [$t] {\n                 fn to_source(&self) -> String {\n-                    slice_to_source($sep, *self)\n+                    slice_to_source($sep, self)\n                 }\n             }\n \n-            impl<'a> ToSourceWithHygiene for &'a [$t] {\n+            impl ToSourceWithHygiene for [$t] {\n                 fn to_source_with_hygiene(&self) -> String {\n-                    slice_to_source_with_hygiene($sep, *self)\n+                    slice_to_source_with_hygiene($sep, self)\n                 }\n             }\n         )\n@@ -200,14 +200,14 @@ pub mod rt {\n         }\n     }\n \n-    impl<'a> ToSource for &'a str {\n+    impl ToSource for str {\n         fn to_source(&self) -> String {\n             let lit = dummy_spanned(ast::LitStr(\n-                    token::intern_and_get_ident(*self), ast::CookedStr));\n+                    token::intern_and_get_ident(self), ast::CookedStr));\n             pprust::lit_to_string(&lit)\n         }\n     }\n-    impl<'a> ToSourceWithHygiene for &'a str {\n+    impl ToSourceWithHygiene for str {\n         fn to_source_with_hygiene(&self) -> String {\n             self.to_source()\n         }"}]}