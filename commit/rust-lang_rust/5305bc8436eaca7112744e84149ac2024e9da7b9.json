{"sha": "5305bc8436eaca7112744e84149ac2024e9da7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDViYzg0MzZlYWNhNzExMjc0NGU4NDE0OWFjMjAyNGU5ZGE3Yjk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-27T22:25:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-27T22:25:59Z"}, "message": "test fallout", "tree": {"sha": "f6c9772e37f11128772c02d1b0b3434c91f169c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c9772e37f11128772c02d1b0b3434c91f169c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5305bc8436eaca7112744e84149ac2024e9da7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5305bc8436eaca7112744e84149ac2024e9da7b9", "html_url": "https://github.com/rust-lang/rust/commit/5305bc8436eaca7112744e84149ac2024e9da7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5305bc8436eaca7112744e84149ac2024e9da7b9/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8692797ae9620b68223f36b52dfbc42c3c6e34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8692797ae9620b68223f36b52dfbc42c3c6e34e", "html_url": "https://github.com/rust-lang/rust/commit/a8692797ae9620b68223f36b52dfbc42c3c6e34e"}], "stats": {"total": 447, "additions": 133, "deletions": 314}, "files": [{"sha": "d234a96fd125d1f8f8b0abcb85586d5299eacb31", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -110,10 +110,7 @@ fn format_crate(verbosity: Verbosity) -> Result<ExitStatus, std::io::Error> {\n \n fn get_fmt_args() -> Vec<String> {\n     // All arguments after -- are passed to rustfmt\n-    env::args()\n-        .skip_while(|a| a != \"--\")\n-        .skip(1)\n-        .collect()\n+    env::args().skip_while(|a| a != \"--\").skip(1).collect()\n }\n \n #[derive(Debug)]\n@@ -146,17 +143,12 @@ pub struct Target {\n // Returns a vector of all compile targets of a crate\n fn get_targets() -> Result<Vec<Target>, std::io::Error> {\n     let mut targets: Vec<Target> = vec![];\n-    let output = try!(Command::new(\"cargo\")\n-                          .arg(\"read-manifest\")\n-                          .output());\n+    let output = try!(Command::new(\"cargo\").arg(\"read-manifest\").output());\n     if output.status.success() {\n         // None of the unwraps should fail if output of `cargo read-manifest` is correct\n         let data = &String::from_utf8(output.stdout).unwrap();\n         let json = Json::from_str(data).unwrap();\n-        let jtargets = json.find(\"targets\")\n-            .unwrap()\n-            .as_array()\n-            .unwrap();\n+        let jtargets = json.find(\"targets\").unwrap().as_array().unwrap();\n         for jtarget in jtargets {\n             targets.push(target_from_json(jtarget));\n         }\n@@ -171,16 +163,8 @@ fn get_targets() -> Result<Vec<Target>, std::io::Error> {\n \n fn target_from_json(jtarget: &Json) -> Target {\n     let jtarget = jtarget.as_object().unwrap();\n-    let path = PathBuf::from(jtarget\n-                                 .get(\"src_path\")\n-                                 .unwrap()\n-                                 .as_string()\n-                                 .unwrap());\n-    let kinds = jtarget\n-        .get(\"kind\")\n-        .unwrap()\n-        .as_array()\n-        .unwrap();\n+    let path = PathBuf::from(jtarget.get(\"src_path\").unwrap().as_string().unwrap());\n+    let kinds = jtarget.get(\"kind\").unwrap().as_array().unwrap();\n     let kind = match kinds[0].as_string().unwrap() {\n         \"bin\" => TargetKind::Bin,\n         \"lib\" | \"dylib\" | \"staticlib\" | \"cdylib\" | \"rlib\" => TargetKind::Lib,"}, {"sha": "af6996613bfc81087f10b7ae0f728b9277c6cb68", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -226,11 +226,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             let options = try!(CliOptions::from_matches(&matches));\n \n             // Add any additional files that were specified via `--file-lines`.\n-            files.extend(options\n-                             .file_lines\n-                             .files()\n-                             .cloned()\n-                             .map(PathBuf::from));\n+            files.extend(options.file_lines.files().cloned().map(PathBuf::from));\n \n             let mut config = Config::default();\n             let mut path = None;\n@@ -311,10 +307,7 @@ fn main() {\n fn print_usage(opts: &Options, reason: &str) {\n     let reason = format!(\"{}\\nusage: {} [options] <file>...\",\n                          reason,\n-                         env::args_os()\n-                             .next()\n-                             .unwrap()\n-                             .to_string_lossy());\n+                         env::args_os().next().unwrap().to_string_lossy());\n     println!(\"{}\", opts.usage(&reason));\n }\n \n@@ -365,11 +358,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n     }\n \n     // We append files from `--file-lines` later in `execute()`.\n-    let files: Vec<_> = matches\n-        .free\n-        .iter()\n-        .map(PathBuf::from)\n-        .collect();\n+    let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n     Ok(Operation::Format {\n            files: files,"}, {"sha": "23085bb66e223031634d498f12fa6182a0fb98ed", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -160,10 +160,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         Some(first_child_shape)\n             .into_iter()\n             .chain(::std::iter::repeat(other_child_shape).take(subexpr_list.len() - 1));\n-    let iter = subexpr_list\n-        .iter()\n-        .rev()\n-        .zip(child_shape_iter);\n+    let iter = subexpr_list.iter().rev().zip(child_shape_iter);\n     let mut rewrites =\n         try_opt!(iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n                      .collect::<Option<Vec<_>>>());\n@@ -182,14 +179,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         // line, we won't consider putting them on a single line either.\n         let last_span = context.snippet(mk_sp(subexpr_list[1].span.hi, total_span.hi));\n         let first_span = context.snippet(subexpr_list[1].span);\n-        let last_iter = last_span\n-            .chars()\n-            .take_while(|c| c.is_whitespace());\n-\n-        first_span\n-            .chars()\n-            .chain(last_iter)\n-            .any(|c| c == '\\n')\n+        let last_iter = last_span.chars().take_while(|c| c.is_whitespace());\n+\n+        first_span.chars().chain(last_iter).any(|c| c == '\\n')\n     } else {\n         false\n     };\n@@ -258,9 +250,7 @@ pub fn rewrite_try(expr: &ast::Expr,\n     let sub_expr = try_opt!(expr.rewrite(context, try_opt!(shape.sub_width(try_count))));\n     Some(format!(\"{}{}\",\n                  sub_expr,\n-                 iter::repeat(\"?\")\n-                     .take(try_count)\n-                     .collect::<String>()))\n+                 iter::repeat(\"?\").take(try_count).collect::<String>()))\n }\n \n fn join_rewrites(rewrites: &[String], subexps: &[ast::Expr], connector: &str) -> String {"}, {"sha": "69d0495a07c6cf28964f7373e0cdfb93372a722a", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 58, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -340,11 +340,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     };\n \n     let nested_shape = match context.config.array_layout {\n-        IndentStyle::Block => {\n-            shape\n-                .block()\n-                .block_indent(context.config.tab_spaces)\n-        }\n+        IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces),\n         IndentStyle::Visual => {\n             try_opt!(shape\n                          .visual_indent(bracket_size)\n@@ -902,10 +898,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             label_string.len() + self.keyword.len() + pat_expr_string.len() + 2\n         };\n \n-        let block_width = shape\n-            .width\n-            .checked_sub(used_width)\n-            .unwrap_or(0);\n+        let block_width = shape.width.checked_sub(used_width).unwrap_or(0);\n         // This is used only for the empty block case: `{}`. So, we use 1 if we know\n         // we should avoid the single line case.\n         let block_width = if self.else_block.is_some() || self.nested_if {\n@@ -946,10 +939,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n             extract_comment(mk_sp(cond_span.hi, self.block.span.lo), context, shape);\n \n         let alt_block_sep = String::from(\"\\n\") +\n-                            &shape\n-                                 .indent\n-                                 .block_only()\n-                                 .to_string(context.config);\n+                            &shape.indent.block_only().to_string(context.config);\n         let block_sep = if self.cond.is_none() && between_kwd_cond_comment.is_some() {\n             \"\"\n         } else if context.config.control_brace_style ==\n@@ -972,9 +962,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                                              },\n                                              |s| &**s),\n                                  pat_expr_string,\n-                                 after_cond_comment\n-                                     .as_ref()\n-                                     .map_or(block_sep, |s| &**s),\n+                                 after_cond_comment.as_ref().map_or(block_sep, |s| &**s),\n                                  block_str);\n \n         if let Some(else_block) = self.else_block {\n@@ -1048,9 +1036,7 @@ impl<'a> Rewrite for ControlFlow<'a> {\n                             between_kwd_else_block_comment\n                                 .as_ref()\n                                 .map_or(between_sep, |s| &**s),\n-                            after_else_comment\n-                                .as_ref()\n-                                .map_or(after_sep, |s| &**s))\n+                            after_else_comment.as_ref().map_or(after_sep, |s| &**s))\n                              .ok());\n             result.push_str(&try_opt!(rewrite));\n         }\n@@ -1132,9 +1118,7 @@ fn rewrite_match_arm_comment(context: &RewriteContext,\n \n     let mut result = String::new();\n     // any text not preceeded by a newline is pushed unmodified to the block\n-    let first_brk = missed_str\n-        .find(|c: char| c == '\\n')\n-        .unwrap_or(0);\n+    let first_brk = missed_str.find(|c: char| c == '\\n').unwrap_or(0);\n     result.push_str(&missed_str[..first_brk]);\n     let missed_str = &missed_str[first_brk..]; // If missed_str had one newline, it starts with it\n \n@@ -1174,11 +1158,7 @@ fn rewrite_match(context: &RewriteContext,\n     let cond_shape = try_opt!(shape.shrink_left(6));\n     let cond_shape = try_opt!(cond_shape.sub_width(2));\n     let cond_str = try_opt!(cond.rewrite(context, cond_shape));\n-    let alt_block_sep = String::from(\"\\n\") +\n-                        &shape\n-                             .indent\n-                             .block_only()\n-                             .to_string(context.config);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n     let block_sep = match context.config.control_brace_style {\n         ControlBraceStyle::AlwaysSameLine => \" \",\n         _ => alt_block_sep.as_str(),\n@@ -1305,10 +1285,7 @@ impl Rewrite for ast::Arm {\n                                     .collect::<Option<Vec<_>>>());\n \n         let all_simple = pat_strs.iter().all(|p| pat_is_simple(p));\n-        let items: Vec<_> = pat_strs\n-            .into_iter()\n-            .map(ListItem::from_str)\n-            .collect();\n+        let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n         let fmt = ListFormatting {\n             tactic: if all_simple {\n                 DefinitiveListTactic::Mixed\n@@ -1354,10 +1331,7 @@ impl Rewrite for ast::Arm {\n \n         let comma = arm_comma(&context.config, body);\n         let alt_block_sep = String::from(\"\\n\") +\n-                            &shape\n-                                 .indent\n-                                 .block_only()\n-                                 .to_string(context.config);\n+                            &shape.indent.block_only().to_string(context.config);\n \n         let pat_width = extra_offset(&pats_str, shape);\n         // Let's try and get the arm body on the same line as the condition.\n@@ -1447,10 +1421,7 @@ impl Rewrite for ast::Arm {\n // E.g. `Foo::Bar` is simple, but `Foo(..)` is not.\n fn pat_is_simple(pat_str: &str) -> bool {\n     pat_str.len() <= 16 ||\n-    (pat_str.len() <= 24 &&\n-     pat_str\n-         .chars()\n-         .all(|c| c.is_alphabetic() || c == ':'))\n+    (pat_str.len() <= 24 && pat_str.chars().all(|c| c.is_alphabetic() || c == ':'))\n }\n \n // The `if ...` guard on a match arm.\n@@ -1478,10 +1449,7 @@ fn rewrite_guard(context: &RewriteContext,\n         }\n \n         // Not enough space to put the guard after the pattern, try a newline.\n-        let overhead = shape\n-            .indent\n-            .block_indent(context.config)\n-            .width() + 4 + 5;\n+        let overhead = shape.indent.block_indent(context.config).width() + 4 + 5;\n         if overhead < shape.width {\n             let cond_str = guard.rewrite(context,\n                                          Shape::legacy(shape.width - overhead,\n@@ -1556,10 +1524,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n         }\n     }\n \n-    let nested_indent = shape\n-        .indent\n-        .block_only()\n-        .block_indent(context.config);\n+    let nested_indent = shape.indent.block_only().block_indent(context.config);\n \n     // The expression won't fit on the current line, jump to next.\n     result.push('\\n');\n@@ -1608,11 +1573,7 @@ fn string_requires_rewrite(context: &RewriteContext,\n                            string: &str,\n                            shape: Shape)\n                            -> bool {\n-    if context\n-           .codemap\n-           .lookup_char_pos(span.lo)\n-           .col\n-           .0 != shape.indent.width() {\n+    if context.codemap.lookup_char_pos(span.lo).col.0 != shape.indent.width() {\n         return true;\n     }\n \n@@ -1728,9 +1689,7 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n             indent: nested_shape.indent.block_only(),\n             ..nested_shape\n         };\n-        let rewrite = args.last()\n-            .unwrap()\n-            .rewrite(context, nested_shape);\n+        let rewrite = args.last().unwrap().rewrite(context, nested_shape);\n \n         if let Some(rewrite) = rewrite {\n             let rewrite_first_line = Some(rewrite[..first_line_width(&rewrite)].to_owned());\n@@ -1875,9 +1834,7 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     let span_lo = |item: &StructLitField| match *item {\n         StructLitField::Regular(field) => field.span.lo,\n         StructLitField::Base(expr) => {\n-            let last_field_hi = fields\n-                .last()\n-                .map_or(span.lo, |field| field.span.hi);\n+            let last_field_hi = fields.last().map_or(span.lo, |field| field.span.hi);\n             let snippet = context.snippet(mk_sp(last_field_hi, expr.span.lo));\n             let pos = snippet.find_uncommented(\"..\").unwrap();\n             last_field_hi + BytePos(pos as u32)"}, {"sha": "9ae5f190ede6dba0a624941129e5cef14cd0258b", "filename": "src/file_lines.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -127,11 +127,7 @@ impl FileLines {\n                                                                        map.get_vec(&canonical)\n                                                                            .ok_or(())\n                                                                    }) {\n-            Ok(ranges) => {\n-                ranges\n-                    .iter()\n-                    .any(|r| r.contains(Range::from(range)))\n-            }\n+            Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n             Err(_) => false,\n         }\n     }\n@@ -146,11 +142,7 @@ impl FileLines {\n \n         match map.get_vec(range.file_name()) {\n             None => false,\n-            Some(ranges) => {\n-                ranges\n-                    .iter()\n-                    .any(|r| r.intersects(Range::from(range)))\n-            }\n+            Some(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n         }\n     }\n }\n@@ -168,12 +160,7 @@ impl<'a> iter::Iterator for Files<'a> {\n \n fn canonicalize_path_string(s: &str) -> Result<String, ()> {\n     match path::PathBuf::from(s).canonicalize() {\n-        Ok(canonicalized) => {\n-            canonicalized\n-                .to_str()\n-                .map(|s| s.to_string())\n-                .ok_or(())\n-        }\n+        Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()).ok_or(()),\n         _ => Err(()),\n     }\n }\n@@ -184,9 +171,7 @@ impl str::FromStr for FileLines {\n \n     fn from_str(s: &str) -> Result<FileLines, String> {\n         let v: Vec<JsonSpan> = try!(json::decode(s).map_err(|e| e.to_string()));\n-        let m = try!(v.into_iter()\n-                         .map(JsonSpan::into_tuple)\n-                         .collect());\n+        let m = try!(v.into_iter().map(JsonSpan::into_tuple).collect());\n         Ok(FileLines::from_multimap(m))\n     }\n }"}, {"sha": "791ff0ee387cbac489f921de1612feb8e856b753", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -65,12 +65,7 @@ fn compare_path_list_items(a: &ast::PathListItem, b: &ast::PathListItem) -> Orde\n         match a.node.rename {\n             Some(a_rename) => {\n                 match b.node.rename {\n-                    Some(b_rename) => {\n-                        a_rename\n-                            .name\n-                            .as_str()\n-                            .cmp(&b_rename.name.as_str())\n-                    }\n+                    Some(b_rename) => a_rename.name.as_str().cmp(&b_rename.name.as_str()),\n                     None => Ordering::Greater,\n                 }\n             }\n@@ -135,11 +130,8 @@ fn rewrite_view_path_prefix(path: &ast::Path,\n                             context: &RewriteContext,\n                             shape: Shape)\n                             -> Option<String> {\n-    let path_str = if path.segments\n-           .last()\n-           .unwrap()\n-           .identifier\n-           .to_string() == \"self\" && path.segments.len() > 1 {\n+    let path_str = if path.segments.last().unwrap().identifier.to_string() == \"self\" &&\n+                      path.segments.len() > 1 {\n         let path = &ast::Path {\n                         span: path.span.clone(),\n                         segments: path.segments[..path.segments.len() - 1].to_owned(),"}, {"sha": "4819816c4ebee705fcee419d0a18888c85eb4748", "filename": "src/issues.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -225,15 +225,12 @@ fn find_unnumbered_issue() {\n     fn check_fail(text: &str, failing_pos: usize) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n         assert_eq!(Some(failing_pos),\n-                   text.chars()\n-                       .position(|c| seeker.inspect(c).is_some()));\n+                   text.chars().position(|c| seeker.inspect(c).is_some()));\n     }\n \n     fn check_pass(text: &str) {\n         let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n-        assert_eq!(None,\n-                   text.chars()\n-                       .position(|c| seeker.inspect(c).is_some()));\n+        assert_eq!(None, text.chars().position(|c| seeker.inspect(c).is_some()));\n     }\n \n     check_fail(\"TODO\\n\", 4);\n@@ -253,8 +250,7 @@ fn find_unnumbered_issue() {\n fn find_issue() {\n     fn is_bad_issue(text: &str, report_todo: ReportTactic, report_fixme: ReportTactic) -> bool {\n         let mut seeker = BadIssueSeeker::new(report_todo, report_fixme);\n-        text.chars()\n-            .any(|c| seeker.inspect(c).is_some())\n+        text.chars().any(|c| seeker.inspect(c).is_some())\n     }\n \n     assert!(is_bad_issue(\"TODO(@maintainer, #1222, hello)\\n\","}, {"sha": "c218d629d198d7181db1087b59d568a9f3afc3a0", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 50, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -370,8 +370,7 @@ impl<'a> FmtVisitor<'a> {\n                       enum_def: &ast::EnumDef,\n                       generics: &ast::Generics,\n                       span: Span) {\n-        self.buffer\n-            .push_str(&format_header(\"enum \", ident, vis));\n+        self.buffer.push_str(&format_header(\"enum \", ident, vis));\n \n         let enum_snippet = self.snippet(span);\n         let brace_pos = enum_snippet.find_uncommented(\"{\").unwrap();\n@@ -584,9 +583,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n-            visitor.block_indent = offset\n-                .block_only()\n-                .block_indent(context.config);\n+            visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n             for item in items {\n@@ -665,10 +662,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                 result.push_str(\" \");\n             }\n             let used_space = last_line_width(&result);\n-            let budget = try_opt!(context\n-                                      .config\n-                                      .max_width\n-                                      .checked_sub(used_space));\n+            let budget = try_opt!(context.config.max_width.checked_sub(used_space));\n             let indent = offset + used_space;\n             result.push_str(&*try_opt!(trait_ref.rewrite(context, Shape::legacy(budget, indent))));\n \n@@ -698,10 +692,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n         }\n \n         // 1 = space before the type.\n-        let budget = try_opt!(context\n-                                  .config\n-                                  .max_width\n-                                  .checked_sub(used_space + 1));\n+        let budget = try_opt!(context.config.max_width.checked_sub(used_space + 1));\n         let indent = offset + result.len() + 1;\n         let self_ty_str = self_ty.rewrite(context, Shape::legacy(budget, indent));\n         if let Some(self_ty_str) = self_ty_str {\n@@ -713,10 +704,7 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n         // Can't fit the self type on what's left of the line, so start a new one.\n         let indent = offset.block_indent(context.config);\n         result.push_str(&format!(\"\\n{}\", indent.to_string(context.config)));\n-        let budget = try_opt!(context\n-                                  .config\n-                                  .max_width\n-                                  .checked_sub(indent.width()));\n+        let budget = try_opt!(context.config.max_width.checked_sub(indent.width()));\n         result.push_str(&*try_opt!(self_ty.rewrite(context, Shape::legacy(budget, indent))));\n         Some(result)\n     } else {\n@@ -790,9 +778,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         if offset.width() + last_line_width(&result) + trait_bound_str.len() >\n            context.config.comment_width {\n             result.push('\\n');\n-            let trait_indent = offset\n-                .block_only()\n-                .block_indent(context.config);\n+            let trait_indent = offset.block_only().block_indent(context.config);\n             result.push_str(&trait_indent.to_string(context.config));\n         }\n         result.push_str(&trait_bound_str);\n@@ -860,9 +846,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n         if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n-            visitor.block_indent = offset\n-                .block_only()\n-                .block_indent(context.config);\n+            visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n             for item in trait_items {\n@@ -1060,10 +1044,7 @@ fn format_tuple_struct(context: &RewriteContext,\n             (ListTactic::HorizontalVertical, offset.block_only() + result.len() + 1)\n         }\n         IndentStyle::Block => {\n-            (ListTactic::HorizontalVertical,\n-             offset\n-                 .block_only()\n-                 .block_indent(&context.config))\n+            (ListTactic::HorizontalVertical, offset.block_only().block_indent(&context.config))\n         }\n     };\n     // 3 = `();`\n@@ -1379,9 +1360,7 @@ impl Rewrite for ast::Arg {\n                     result.push_str(\" \");\n                 }\n                 result.push_str(\":\");\n-                if context\n-                       .config\n-                       .space_after_type_annotation_colon {\n+                if context.config.space_after_type_annotation_colon {\n                     result.push_str(\" \");\n                 }\n                 let max_width = try_opt!(shape.width.checked_sub(result.len()));\n@@ -1695,10 +1674,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n         if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-            let budget = try_opt!(context\n-                                      .config\n-                                      .max_width\n-                                      .checked_sub(ret_indent.width()));\n+            let budget = try_opt!(context.config.max_width.checked_sub(ret_indent.width()));\n             let ret_str = try_opt!(fd.output\n                                        .rewrite(context, Shape::legacy(budget, ret_indent)));\n             result.push_str(&ret_str);\n@@ -1821,9 +1797,7 @@ fn rewrite_args(context: &RewriteContext,\n             };\n             let reduced_span = mk_sp(span.lo, second_arg_start);\n \n-            context\n-                .codemap\n-                .span_after_last(reduced_span, \",\")\n+            context.codemap.span_after_last(reduced_span, \",\")\n         } else {\n             span.lo\n         };\n@@ -1835,9 +1809,7 @@ fn rewrite_args(context: &RewriteContext,\n \n         let variadic_arg = if variadic {\n             let variadic_span = mk_sp(args.last().unwrap().ty.span.hi, span.hi);\n-            let variadic_start = context\n-                .codemap\n-                .span_after(variadic_span, \"...\") - BytePos(3);\n+            let variadic_start = context.codemap.span_after(variadic_span, \"...\") - BytePos(3);\n             Some(ArgumentKind::Variadic(variadic_start))\n         } else {\n             None\n@@ -1879,10 +1851,7 @@ fn rewrite_args(context: &RewriteContext,\n     };\n \n     let tactic = definitive_tactic(&arg_items,\n-                                   context\n-                                       .config\n-                                       .fn_args_density\n-                                       .to_list_tactic(),\n+                                   context.config.fn_args_density.to_list_tactic(),\n                                    one_line_budget);\n     let budget = match tactic {\n         DefinitiveListTactic::Horizontal => one_line_budget,\n@@ -1988,9 +1957,7 @@ fn rewrite_generics(context: &RewriteContext,\n         IndentStyle::Visual => generics_offset + 1,\n     };\n \n-    let h_budget = try_opt!(shape\n-                                .width\n-                                .checked_sub(generics_offset.width() + 2));\n+    let h_budget = try_opt!(shape.width.checked_sub(generics_offset.width() + 2));\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n@@ -2014,9 +1981,7 @@ fn rewrite_generics(context: &RewriteContext,\n     let ty_spans = tys.iter().map(span_for_ty_param);\n \n     let items = itemize_list(context.codemap,\n-                             lt_spans\n-                                 .chain(ty_spans)\n-                                 .zip(lt_strs.chain(ty_strs)),\n+                             lt_spans.chain(ty_spans).zip(lt_strs.chain(ty_strs)),\n                              \">\",\n                              |&(sp, _)| sp.lo,\n                              |&(sp, _)| sp.hi,"}, {"sha": "aa93061602e1c18839daa1b6a8641867840fbdff", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -536,9 +536,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n                     });\n     }\n \n-    report\n-        .file_error_map\n-        .insert(name.to_owned(), errors);\n+    report.file_error_map.insert(name.to_owned(), errors);\n }\n \n fn parse_input(input: Input,"}, {"sha": "62ad48971d5d4311eb4d8365ed7d43c3f719512a", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -118,9 +118,7 @@ pub struct ListItem {\n \n impl ListItem {\n     pub fn is_multiline(&self) -> bool {\n-        self.item\n-            .as_ref()\n-            .map_or(false, |s| s.contains('\\n')) || self.pre_comment.is_some() ||\n+        self.item.as_ref().map_or(false, |s| s.contains('\\n')) || self.pre_comment.is_some() ||\n         self.post_comment\n             .as_ref()\n             .map_or(false, |s| s.contains('\\n'))\n@@ -199,10 +197,7 @@ pub fn write_list<I, T>(items: I, formatting: &ListFormatting) -> Option<String>\n     let mut iter = items.into_iter().enumerate().peekable();\n \n     let mut line_len = 0;\n-    let indent_str = &formatting\n-                          .shape\n-                          .indent\n-                          .to_string(formatting.config);\n+    let indent_str = &formatting.shape.indent.to_string(formatting.config);\n     while let Some((i, item)) = iter.next() {\n         let item = item.as_ref();\n         let inner_item = try_opt!(item.item.as_ref());\n@@ -412,9 +407,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n \n                     // Everything from the separator to the next item.\n                     let test_snippet = &post_snippet[comment_end - 1..];\n-                    let first_newline = test_snippet\n-                        .find('\\n')\n-                        .unwrap_or(test_snippet.len());\n+                    let first_newline = test_snippet.find('\\n').unwrap_or(test_snippet.len());\n                     // From the end of the first line of comments.\n                     let test_snippet = &test_snippet[first_newline..];\n                     let first = test_snippet\n@@ -423,10 +416,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                     // From the end of the first line of comments to the next non-whitespace char.\n                     let test_snippet = &test_snippet[..first];\n \n-                    if test_snippet\n-                           .chars()\n-                           .filter(|c| c == &'\\n')\n-                           .count() > 1 {\n+                    if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n                         // There were multiple line breaks which got trimmed to nothing.\n                         new_lines = true;\n                     }"}, {"sha": "9d1367ebadc19eef940ab20143ac8d98fb6725e9", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -109,10 +109,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             let expr = match parser.parse_expr() {\n                 Ok(expr) => {\n                     // Recovered errors.\n-                    if context\n-                           .parse_session\n-                           .span_diagnostic\n-                           .has_errors() {\n+                    if context.parse_session.span_diagnostic.has_errors() {\n                         return None;\n                     }\n "}, {"sha": "c0f04f56e15e93bdd707f2badbaa373f1130d840", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -75,10 +75,7 @@ impl<'a> FmtVisitor<'a> {\n         // Get a snippet from the file start to the span's hi without allocating.\n         // We need it to determine what precedes the current comment. If the comment\n         // follows code on the same line, we won't touch it.\n-        let big_span_lo = self.codemap\n-            .lookup_char_pos(span.lo)\n-            .file\n-            .start_pos;\n+        let big_span_lo = self.codemap.lookup_char_pos(span.lo).file.start_pos;\n         let local_begin = self.codemap.lookup_byte_offset(big_span_lo);\n         let local_end = self.codemap.lookup_byte_offset(span.hi);\n         let start_index = local_begin.pos.to_usize();\n@@ -189,8 +186,7 @@ impl<'a> FmtVisitor<'a> {\n                         self.buffer.push_str(&snippet[line_start..lw]);\n                         self.buffer.push_str(\"\\n\");\n                     } else {\n-                        self.buffer\n-                            .push_str(&snippet[line_start..i + 1]);\n+                        self.buffer.push_str(&snippet[line_start..i + 1]);\n                     }\n \n                     line_start = i + 1;"}, {"sha": "bc5c917dc00619228de9b14e5cfd572e93178740", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -92,16 +92,12 @@ impl Rewrite for Pat {\n             PatKind::Lit(ref expr) => expr.rewrite(context, shape),\n             PatKind::Slice(ref prefix, ref slice_pat, ref suffix) => {\n                 // Rewrite all the sub-patterns.\n-                let prefix = prefix\n-                    .iter()\n-                    .map(|p| p.rewrite(context, shape));\n+                let prefix = prefix.iter().map(|p| p.rewrite(context, shape));\n                 let slice_pat =\n                     slice_pat\n                         .as_ref()\n                         .map(|p| Some(format!(\"{}..\", try_opt!(p.rewrite(context, shape)))));\n-                let suffix = suffix\n-                    .iter()\n-                    .map(|p| p.rewrite(context, shape));\n+                let suffix = suffix.iter().map(|p| p.rewrite(context, shape));\n \n                 // Munge them together.\n                 let pats: Option<Vec<String>> = prefix\n@@ -280,10 +276,7 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n     // add comma if `(x,)`\n     let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n \n-    let path_len = path_str\n-        .as_ref()\n-        .map(|p| p.len())\n-        .unwrap_or(0);\n+    let path_len = path_str.as_ref().map(|p| p.len()).unwrap_or(0);\n     // 2 = \"()\".len(), 3 = \"(,)\".len()\n     let nested_shape = try_opt!(shape.sub_width(path_len + if add_comma { 3 } else { 2 }));\n     // 1 = \"(\".len()"}, {"sha": "23cb3f21bf2d4dd743f71fe0129f86401cc2cfcb", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -42,14 +42,10 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n-                    mismatch\n-                        .lines\n-                        .push(DiffLine::Context(line.to_owned()));\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n-                mismatch\n-                    .lines\n-                    .push(DiffLine::Resulting(str.to_owned()));\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n@@ -59,14 +55,10 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 }\n \n                 while let Some(line) = context_queue.pop_front() {\n-                    mismatch\n-                        .lines\n-                        .push(DiffLine::Context(line.to_owned()));\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n-                mismatch\n-                    .lines\n-                    .push(DiffLine::Expected(str.to_owned()));\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n                 line_number += 1;\n                 lines_since_mismatch = 0;\n             }\n@@ -76,9 +68,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                 }\n \n                 if lines_since_mismatch < context_size {\n-                    mismatch\n-                        .lines\n-                        .push(DiffLine::Context(str.to_owned()));\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n                 } else {\n                     context_queue.push_back(str);\n                 }"}, {"sha": "c76031e3f5eac81fae8a4d1b28eb772b090994bf", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -203,12 +203,8 @@ fn rewrite_segment(path_context: PathContext,\n                 let param_list = data.lifetimes\n                     .iter()\n                     .map(SegmentParam::LifeTime)\n-                    .chain(data.types\n-                               .iter()\n-                               .map(|x| SegmentParam::Type(&*x)))\n-                    .chain(data.bindings\n-                               .iter()\n-                               .map(|x| SegmentParam::Binding(&*x)))\n+                    .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n+                    .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n                     .collect::<Vec<_>>();\n \n                 let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n@@ -500,9 +496,7 @@ impl Rewrite for ast::TyParamBounds {\n             TypeDensity::Compressed => \"+\",\n             TypeDensity::Wide => \" + \",\n         };\n-        let strs: Vec<_> = try_opt!(self.iter()\n-                                        .map(|b| b.rewrite(context, shape))\n-                                        .collect());\n+        let strs: Vec<_> = try_opt!(self.iter().map(|b| b.rewrite(context, shape)).collect());\n         wrap_str(strs.join(joiner), context.config.max_width, shape)\n     }\n }"}, {"sha": "2a5b868f5464b2f139125c79597df482588bb488", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -44,9 +44,7 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n         Visibility::Crate(_) => Cow::from(\"pub(crate) \"),\n         Visibility::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n-            let mut segments_iter = segments\n-                .iter()\n-                .map(|seg| seg.identifier.name.as_str());\n+            let mut segments_iter = segments.iter().map(|seg| seg.identifier.name.as_str());\n             if path.is_global() {\n                 segments_iter\n                     .next()\n@@ -184,9 +182,7 @@ pub fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n pub fn trim_newlines(input: &str) -> &str {\n     match input.find(|c| c != '\\n' && c != '\\r') {\n         Some(start) => {\n-            let end = input\n-                .rfind(|c| c != '\\n' && c != '\\r')\n-                .unwrap_or(0) + 1;\n+            let end = input.rfind(|c| c != '\\n' && c != '\\r').unwrap_or(0) + 1;\n             &input[start..end]\n         }\n         None => \"\","}, {"sha": "caf67c0683ff0364a017432a21cbbc412867f8e3", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -118,8 +118,7 @@ impl<'a> FmtVisitor<'a> {\n         } else {\n             self.config.tab_spaces\n         };\n-        self.buffer\n-            .truncate(total_len - chars_too_many);\n+        self.buffer.truncate(total_len - chars_too_many);\n         self.buffer.push_str(\"}\");\n         self.block_indent = self.block_indent.block_unindent(self.config);\n     }\n@@ -190,9 +189,7 @@ impl<'a> FmtVisitor<'a> {\n         // the AST lumps them all together.\n         match item.node {\n             ast::ItemKind::Mod(ref m) => {\n-                let outer_file = self.codemap\n-                    .lookup_char_pos(item.span.lo)\n-                    .file;\n+                let outer_file = self.codemap.lookup_char_pos(item.span.lo).file;\n                 let inner_file = self.codemap.lookup_char_pos(m.inner.lo).file;\n                 if outer_file.name == inner_file.name {\n                     // Module is inline, in this case we treat modules like any\n@@ -535,8 +532,7 @@ impl<'a> FmtVisitor<'a> {\n         let is_internal = !(inner_span.lo.0 == 0 && inner_span.hi.0 == 0) &&\n                           local_file_name == self.codemap.span_to_filename(inner_span);\n \n-        self.buffer\n-            .push_str(&*utils::format_visibility(vis));\n+        self.buffer.push_str(&*utils::format_visibility(vis));\n         self.buffer.push_str(\"mod \");\n         self.buffer.push_str(&ident.to_string());\n "}, {"sha": "5987195e0316ebf1615cdeba59f376d495b94f6c", "filename": "tests/source/chains.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -4,7 +4,6 @@\n // Test chain formatting.\n \n fn main() {\n-    // Don't put chains on a single line if it wasn't so in source.\n     let a = b .c\n     .d.1\n                 .foo(|x| x + 1);"}, {"sha": "7eeea235679fd75db384d34afc674a8bdc953734", "filename": "tests/system.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -28,7 +28,9 @@ const DIFF_CONTEXT_SIZE: usize = 3;\n fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n     let path = dir_entry.expect(\"Couldn't get DirEntry\").path();\n \n-    path.to_str().expect(\"Couldn't stringify path\").to_owned()\n+    path.to_str()\n+        .expect(\"Couldn't stringify path\")\n+        .to_owned()\n }\n \n // Integration tests. The files in the tests/source are formatted and compared\n@@ -84,7 +86,9 @@ fn assert_output(source: &str, expected_filename: &str) {\n \n     let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n-    expected_file.read_to_string(&mut expected_text).expect(\"Failed reading target\");\n+    expected_file\n+        .read_to_string(&mut expected_text)\n+        .expect(\"Failed reading target\");\n \n     let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n     if compare.len() > 0 {\n@@ -100,8 +104,9 @@ fn assert_output(source: &str, expected_filename: &str) {\n #[test]\n fn idempotence_tests() {\n     // Get all files in the tests/target directory.\n-    let files =\n-        fs::read_dir(\"tests/target\").expect(\"Couldn't read target dir\").map(get_path_string);\n+    let files = fs::read_dir(\"tests/target\")\n+        .expect(\"Couldn't read target dir\")\n+        .map(get_path_string);\n     let (_reports, count, fails) = check_files(files);\n \n     // Display results.\n@@ -276,7 +281,9 @@ fn get_config(config_file: Option<&str>) -> Config {\n \n     let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).expect(\"Couldn't read config\");\n+    def_config_file\n+        .read_to_string(&mut def_config)\n+        .expect(\"Couldn't read config\");\n \n     Config::from_toml(&def_config)\n }\n@@ -298,11 +305,22 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .map(|line| line.expect(\"Failed getting line\"))\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n-                        regex.captures_iter(&line).next().map(|capture| {\n-                (capture.get(1).expect(\"Couldn't unwrap capture\").as_str().to_owned(),\n-                 capture.get(2).expect(\"Couldn't unwrap capture\").as_str().to_owned())\n-            })\n-                    })\n+            regex\n+                .captures_iter(&line)\n+                .next()\n+                .map(|capture| {\n+                    (capture\n+                         .get(1)\n+                         .expect(\"Couldn't unwrap capture\")\n+                         .as_str()\n+                         .to_owned(),\n+                     capture\n+                         .get(2)\n+                         .expect(\"Couldn't unwrap capture\")\n+                         .as_str()\n+                         .to_owned())\n+                })\n+        })\n         .collect()\n }\n \n@@ -319,7 +337,8 @@ fn handle_result(result: HashMap<String, String>,\n         let mut f = fs::File::open(&target).expect(\"Couldn't open target\");\n \n         let mut text = String::new();\n-        f.read_to_string(&mut text).expect(\"Failed reading target\");\n+        f.read_to_string(&mut text)\n+            .expect(\"Failed reading target\");\n \n         if fmt_text != text {\n             let diff = make_diff(&text, &fmt_text, DIFF_CONTEXT_SIZE);"}, {"sha": "2795237d51b9e15999b3812877c142f4fdbcdd9b", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -5,12 +5,10 @@\n \n fn main() {\n     // Don't put chains on a single line if it wasn't so in source.\n-    let a = b.c\n-             .d\n-             .1\n-             .foo(|x| x + 1);\n+    let a = b.c.d.1.foo(|x| x + 1);\n \n-    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd();\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+                       .ddddddddddddddddddddddddddd();\n \n     bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n                        .ddddddddddddddddddddddddddd\n@@ -49,7 +47,9 @@ fn main() {\n     });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum =\n-        xxxxxxx.map(|x| x + 5).map(|x| x / 2).fold(0, |acc, x| acc + x);\n+        xxxxxxx.map(|x| x + 5)\n+               .map(|x| x / 2)\n+               .fold(0, |acc, x| acc + x);\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n                              x += 1;\n@@ -125,7 +125,8 @@ fn floaters() {\n }\n \n fn is_replaced_content() -> bool {\n-    constellat.send(ConstellationMsg::ViewportConstrained(self.id, constraints)).unwrap();\n+    constellat.send(ConstellationMsg::ViewportConstrained(self.id, constraints))\n+              .unwrap();\n }\n \n fn issue587() {"}, {"sha": "1d9b8a086223d707181bbec4763112967fe704c1", "filename": "tests/target/chains.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -4,11 +4,7 @@\n // Test chain formatting.\n \n fn main() {\n-    // Don't put chains on a single line if it wasn't so in source.\n-    let a = b.c\n-        .d\n-        .1\n-        .foo(|x| x + 1);\n+    let a = b.c.d.1.foo(|x| x + 1);\n \n     bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd();\n \n@@ -139,11 +135,8 @@ fn issue587() {\n fn try_shorthand() {\n     let x = expr?;\n     let y = expr.kaas()?.test();\n-    let loooooooooooooooooooooooooooooooooooooooooong = does_this?\n-        .look?\n-        .good?\n-        .should_we_break?\n-        .after_the_first_question_mark?;\n+    let loooooooooooooooooooooooooooooooooooooooooong =\n+        does_this?.look?.good?.should_we_break?.after_the_first_question_mark?;\n     let yyyy = expr?\n         .another?\n         .another?\n@@ -154,11 +147,7 @@ fn try_shorthand() {\n         .another?\n         .another?\n         .test();\n-    let zzzz = expr?\n-        .another?\n-        .another?\n-        .another?\n-        .another?;\n+    let zzzz = expr?.another?.another?.another?.another?;\n     let aaa = x??????????????????????????????????????????????????????????????????????????;\n \n     let y = a.very"}, {"sha": "c2a39cc5bbc493772ea73714942877ec0c22f647", "filename": "tests/target/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -291,7 +291,7 @@ fn issue1106() {\n             self.ast_map.expect_item(enum_node_id).node {}\n     }\n \n-    for entry in WalkDir::new(path).into_iter().filter_entry(|entry| {\n-                                                                 exclusions.filter_entry(entry)\n-                                                             }) {}\n+    for entry in WalkDir::new(path)\n+            .into_iter()\n+            .filter_entry(|entry| exclusions.filter_entry(entry)) {}\n }"}, {"sha": "d47a7d5a13e6102597c130a1ae7d0b2b866845f1", "filename": "tests/target/long_field_access.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Flong_field_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Flong_field_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flong_field_access.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -1,4 +1,6 @@\n fn f() {\n-    block_flow.base.stacking_relative_position_of_display_port =\n+    block_flow\n+        .base\n+        .stacking_relative_position_of_display_port =\n         self.base.stacking_relative_position_of_display_port;\n }"}, {"sha": "b7cbf82f4119bdd3f9ab303fe85362ab8de985e3", "filename": "tests/target/tuple.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5305bc8436eaca7112744e84149ac2024e9da7b9/tests%2Ftarget%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftuple.rs?ref=5305bc8436eaca7112744e84149ac2024e9da7b9", "patch": "@@ -29,13 +29,14 @@ fn b() {\n }\n \n fn issue550() {\n-    self.visitor.visit_volume(self.level.sector_id(sector),\n-                              (floor_y,\n-                               if is_sky_flat(ceil_tex) {\n-                                   from_wad_height(self.height_range.1)\n-                               } else {\n-                                   ceil_y\n-                               }));\n+    self.visitor\n+        .visit_volume(self.level.sector_id(sector),\n+                      (floor_y,\n+                       if is_sky_flat(ceil_tex) {\n+                           from_wad_height(self.height_range.1)\n+                       } else {\n+                           ceil_y\n+                       }));\n }\n \n fn issue775() {"}]}