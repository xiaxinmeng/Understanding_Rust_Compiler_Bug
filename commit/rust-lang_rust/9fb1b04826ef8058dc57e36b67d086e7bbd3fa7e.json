{"sha": "9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "node_id": "C_kwDOAAsO6NoAKDlmYjFiMDQ4MjZlZjgwNThkYzU3ZTM2YjY3ZDA4NmU3YmJkM2ZhN2U", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-14T08:34:41Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-14T08:34:41Z"}, "message": "Encode closing delimiter span in FlatTrees", "tree": {"sha": "1b3f12a7943c9098f76a93700512e9fc368f6043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3f12a7943c9098f76a93700512e9fc368f6043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "html_url": "https://github.com/rust-lang/rust/commit/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c7b6716d1ab458664a8b372b79347b9a9cacb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7b6716d1ab458664a8b372b79347b9a9cacb98", "html_url": "https://github.com/rust-lang/rust/commit/3c7b6716d1ab458664a8b372b79347b9a9cacb98"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "14a7b913bf05e2bb7c99b8c8f307f3ff9c0047c1", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "patch": "@@ -146,15 +146,16 @@ impl ProcMacro {\n         attr: Option<&tt::Subtree>,\n         env: Vec<(String, String)>,\n     ) -> Result<Result<tt::Subtree, PanicMessage>, ServerError> {\n+        let version = self.process.lock().unwrap_or_else(|e| e.into_inner()).version();\n         let current_dir = env\n             .iter()\n             .find(|(name, _)| name == \"CARGO_MANIFEST_DIR\")\n             .map(|(_, value)| value.clone());\n \n         let task = ExpandMacro {\n-            macro_body: FlatTree::new(subtree),\n+            macro_body: FlatTree::new(subtree, version),\n             macro_name: self.name.to_string(),\n-            attributes: attr.map(FlatTree::new),\n+            attributes: attr.map(|subtree| FlatTree::new(subtree, version)),\n             lib: self.dylib_path.to_path_buf().into(),\n             env,\n             current_dir,\n@@ -163,7 +164,9 @@ impl ProcMacro {\n         let request = msg::Request::ExpandMacro(task);\n         let response = self.process.lock().unwrap_or_else(|e| e.into_inner()).send_task(request)?;\n         match response {\n-            msg::Response::ExpandMacro(it) => Ok(it.map(FlatTree::to_subtree)),\n+            msg::Response::ExpandMacro(it) => {\n+                Ok(it.map(|tree| FlatTree::to_subtree(tree, version)))\n+            }\n             msg::Response::ListMacros(..) | msg::Response::ApiVersionCheck(..) => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }"}, {"sha": "4b01643c2a29888c9d1c9e302517a7f3dfaaaf98", "filename": "crates/proc-macro-api/src/msg.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs?ref=9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "patch": "@@ -12,8 +12,12 @@ use crate::ProcMacroKind;\n \n pub use crate::msg::flat::FlatTree;\n \n+// The versions of the server protocol\n pub const NO_VERSION_CHECK_VERSION: u32 = 0;\n-pub const CURRENT_API_VERSION: u32 = 1;\n+pub const VERSION_CHECK_VERSION: u32 = 1;\n+pub const ENCODE_CLOSE_SPAN_VERSION: u32 = 2;\n+\n+pub const CURRENT_API_VERSION: u32 = ENCODE_CLOSE_SPAN_VERSION;\n \n #[derive(Debug, Serialize, Deserialize)]\n pub enum Request {\n@@ -146,7 +150,7 @@ mod tests {\n     fn test_proc_macro_rpc_works() {\n         let tt = fixture_token_tree();\n         let task = ExpandMacro {\n-            macro_body: FlatTree::new(&tt),\n+            macro_body: FlatTree::new(&tt, CURRENT_API_VERSION),\n             macro_name: Default::default(),\n             attributes: None,\n             lib: std::env::current_dir().unwrap(),\n@@ -158,6 +162,6 @@ mod tests {\n         // println!(\"{}\", json);\n         let back: ExpandMacro = serde_json::from_str(&json).unwrap();\n \n-        assert_eq!(tt, back.macro_body.to_subtree());\n+        assert_eq!(tt, back.macro_body.to_subtree(CURRENT_API_VERSION));\n     }\n }"}, {"sha": "44245336f01669f6d1a9d89121c55a5b7e3ace0f", "filename": "crates/proc-macro-api/src/msg/flat.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg%2Fflat.rs?ref=9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "patch": "@@ -39,7 +39,10 @@ use std::collections::{HashMap, VecDeque};\n \n use serde::{Deserialize, Serialize};\n \n-use crate::tt::{self, TokenId};\n+use crate::{\n+    msg::ENCODE_CLOSE_SPAN_VERSION,\n+    tt::{self, TokenId},\n+};\n \n #[derive(Serialize, Deserialize, Debug)]\n pub struct FlatTree {\n@@ -52,7 +55,8 @@ pub struct FlatTree {\n }\n \n struct SubtreeRepr {\n-    id: tt::TokenId,\n+    open: tt::TokenId,\n+    close: tt::TokenId,\n     kind: tt::DelimiterKind,\n     tt: [u32; 2],\n }\n@@ -74,7 +78,7 @@ struct IdentRepr {\n }\n \n impl FlatTree {\n-    pub fn new(subtree: &tt::Subtree) -> FlatTree {\n+    pub fn new(subtree: &tt::Subtree, version: u32) -> FlatTree {\n         let mut w = Writer {\n             string_table: HashMap::new(),\n             work: VecDeque::new(),\n@@ -89,7 +93,11 @@ impl FlatTree {\n         w.write(subtree);\n \n         return FlatTree {\n-            subtree: write_vec(w.subtree, SubtreeRepr::write),\n+            subtree: if version >= ENCODE_CLOSE_SPAN_VERSION {\n+                write_vec(w.subtree, SubtreeRepr::write_with_close_span)\n+            } else {\n+                write_vec(w.subtree, SubtreeRepr::write)\n+            },\n             literal: write_vec(w.literal, LiteralRepr::write),\n             punct: write_vec(w.punct, PunctRepr::write),\n             ident: write_vec(w.ident, IdentRepr::write),\n@@ -102,9 +110,13 @@ impl FlatTree {\n         }\n     }\n \n-    pub fn to_subtree(self) -> tt::Subtree {\n+    pub fn to_subtree(self, version: u32) -> tt::Subtree {\n         return Reader {\n-            subtree: read_vec(self.subtree, SubtreeRepr::read),\n+            subtree: if version >= ENCODE_CLOSE_SPAN_VERSION {\n+                read_vec(self.subtree, SubtreeRepr::read_with_close_span)\n+            } else {\n+                read_vec(self.subtree, SubtreeRepr::read)\n+            },\n             literal: read_vec(self.literal, LiteralRepr::read),\n             punct: read_vec(self.punct, PunctRepr::read),\n             ident: read_vec(self.ident, IdentRepr::read),\n@@ -130,17 +142,36 @@ impl SubtreeRepr {\n             tt::DelimiterKind::Brace => 2,\n             tt::DelimiterKind::Bracket => 3,\n         };\n-        [self.id.0, kind, self.tt[0], self.tt[1]]\n+        [self.open.0, kind, self.tt[0], self.tt[1]]\n     }\n-    fn read([id, kind, lo, len]: [u32; 4]) -> SubtreeRepr {\n+    fn read([open, kind, lo, len]: [u32; 4]) -> SubtreeRepr {\n         let kind = match kind {\n             0 => tt::DelimiterKind::Invisible,\n             1 => tt::DelimiterKind::Parenthesis,\n             2 => tt::DelimiterKind::Brace,\n             3 => tt::DelimiterKind::Bracket,\n             other => panic!(\"bad kind {other}\"),\n         };\n-        SubtreeRepr { id: TokenId(id), kind, tt: [lo, len] }\n+        SubtreeRepr { open: TokenId(open), close: TokenId::UNSPECIFIED, kind, tt: [lo, len] }\n+    }\n+    fn write_with_close_span(self) -> [u32; 5] {\n+        let kind = match self.kind {\n+            tt::DelimiterKind::Invisible => 0,\n+            tt::DelimiterKind::Parenthesis => 1,\n+            tt::DelimiterKind::Brace => 2,\n+            tt::DelimiterKind::Bracket => 3,\n+        };\n+        [self.open.0, self.close.0, kind, self.tt[0], self.tt[1]]\n+    }\n+    fn read_with_close_span([open, close, kind, lo, len]: [u32; 5]) -> SubtreeRepr {\n+        let kind = match kind {\n+            0 => tt::DelimiterKind::Invisible,\n+            1 => tt::DelimiterKind::Parenthesis,\n+            2 => tt::DelimiterKind::Brace,\n+            3 => tt::DelimiterKind::Bracket,\n+            other => panic!(\"bad kind {other}\"),\n+        };\n+        SubtreeRepr { open: TokenId(open), close: TokenId(close), kind, tt: [lo, len] }\n     }\n }\n \n@@ -244,9 +275,10 @@ impl<'a> Writer<'a> {\n \n     fn enqueue(&mut self, subtree: &'a tt::Subtree) -> u32 {\n         let idx = self.subtree.len();\n-        let delimiter_id = subtree.delimiter.open;\n+        let open = subtree.delimiter.open;\n+        let close = subtree.delimiter.close;\n         let delimiter_kind = subtree.delimiter.kind;\n-        self.subtree.push(SubtreeRepr { id: delimiter_id, kind: delimiter_kind, tt: [!0, !0] });\n+        self.subtree.push(SubtreeRepr { open, close, kind: delimiter_kind, tt: [!0, !0] });\n         self.work.push_back((idx, subtree));\n         idx as u32\n     }\n@@ -277,11 +309,7 @@ impl Reader {\n             let repr = &self.subtree[i];\n             let token_trees = &self.token_tree[repr.tt[0] as usize..repr.tt[1] as usize];\n             let s = tt::Subtree {\n-                delimiter: tt::Delimiter {\n-                    open: repr.id,\n-                    close: TokenId::UNSPECIFIED,\n-                    kind: repr.kind,\n-                },\n+                delimiter: tt::Delimiter { open: repr.open, close: repr.close, kind: repr.kind },\n                 token_trees: token_trees\n                     .iter()\n                     .copied()"}, {"sha": "a526a21831bf3e3e3ae5d4cae3d3117033f1811e", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "patch": "@@ -56,6 +56,10 @@ impl ProcMacroProcessSrv {\n         }\n     }\n \n+    pub(crate) fn version(&self) -> u32 {\n+        self.version\n+    }\n+\n     pub(crate) fn version_check(&mut self) -> Result<u32, ServerError> {\n         let request = Request::ApiVersionCheck {};\n         let response = self.send_task(request)?;"}, {"sha": "84bd15efb8bee13ca823cbfef432d9834146c52d", "filename": "crates/proc-macro-srv/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs?ref=9fb1b04826ef8058dc57e36b67d086e7bbd3fa7e", "patch": "@@ -31,7 +31,10 @@ use std::{\n     time::SystemTime,\n };\n \n-use proc_macro_api::{msg, ProcMacroKind};\n+use proc_macro_api::{\n+    msg::{self, CURRENT_API_VERSION},\n+    ProcMacroKind,\n+};\n \n use ::tt::token_id as tt;\n \n@@ -67,16 +70,16 @@ impl ProcMacroSrv {\n             None => None,\n         };\n \n-        let macro_body = task.macro_body.to_subtree();\n-        let attributes = task.attributes.map(|it| it.to_subtree());\n+        let macro_body = task.macro_body.to_subtree(CURRENT_API_VERSION);\n+        let attributes = task.attributes.map(|it| it.to_subtree(CURRENT_API_VERSION));\n         let result = thread::scope(|s| {\n             let thread = thread::Builder::new()\n                 .stack_size(EXPANDER_STACK_SIZE)\n                 .name(task.macro_name.clone())\n                 .spawn_scoped(s, || {\n                     expander\n                         .expand(&task.macro_name, &macro_body, attributes.as_ref())\n-                        .map(|it| msg::FlatTree::new(&it))\n+                        .map(|it| msg::FlatTree::new(&it, CURRENT_API_VERSION))\n                 });\n             let res = match thread {\n                 Ok(handle) => handle.join(),"}]}