{"sha": "5ebede0c14d00f50a2db3d5a8e944563e40244c7", "node_id": "C_kwDOAAsO6NoAKDVlYmVkZTBjMTRkMDBmNTBhMmRiM2Q1YThlOTQ0NTYzZTQwMjQ0Yzc", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:37:37Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Fix full projection identifier + move applicability to `MaybeIncorrect`", "tree": {"sha": "18dbe24eefa9d32a989958c327c3c42da50e9b19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18dbe24eefa9d32a989958c327c3c42da50e9b19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebede0c14d00f50a2db3d5a8e944563e40244c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebede0c14d00f50a2db3d5a8e944563e40244c7", "html_url": "https://github.com/rust-lang/rust/commit/5ebede0c14d00f50a2db3d5a8e944563e40244c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebede0c14d00f50a2db3d5a8e944563e40244c7/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1176b8e5e9e697978ad563924f1561b52b330c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1176b8e5e9e697978ad563924f1561b52b330c07", "html_url": "https://github.com/rust-lang/rust/commit/1176b8e5e9e697978ad563924f1561b52b330c07"}], "stats": {"total": 246, "additions": 228, "deletions": 18}, "files": [{"sha": "a3449c1fe1213a72995b2508ea3ac8f9d070c417", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -185,7 +185,7 @@ fn get_closure_suggestion<'tcx>(cx: &LateContext<'_>, search_expr: &'tcx hir::Ex\n             closure_arg_is_double_ref,\n             next_pos: search_expr.span.lo(),\n             suggestion_start: String::new(),\n-            applicability: Applicability::MachineApplicable,\n+            applicability: Applicability::MaybeIncorrect,\n         };\n \n         let fn_def_id = cx.tcx.hir().local_def_id(search_expr.hir_id);\n@@ -252,11 +252,15 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             let map = self.cx.tcx.hir();\n-            let ident_str = map.name(id).to_string();\n             let span = map.span(cmt.hir_id);\n             let start_span = Span::new(self.next_pos, span.lo(), span.ctxt(), None);\n             let mut start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n \n+            // identifier referring to the variable currently triggered (i.e.: `fp`)\n+            let ident_str = map.name(id).to_string();\n+            // full identifier that includes projection (i.e.: `fp.field`)\n+            let ident_str_with_proj = snippet(self.cx, span, \"..\").to_string();\n+\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n@@ -276,7 +280,8 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, _, [self_expr, ..], _) if self_expr.hir_id == cmt.hir_id => {\n-                            self.suggestion_start.push_str(&format!(\"{}{}\", start_snip, ident_str));\n+                            self.suggestion_start\n+                                .push_str(&format!(\"{}{}\", start_snip, ident_str_with_proj));\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -291,13 +296,26 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                                 let takes_arg_by_double_ref =\n                                     self.func_takes_arg_by_double_ref(parent_expr, cmt.hir_id);\n \n+                                // compiler will automatically dereference field projection, so no need\n+                                // to suggest ampersand, but full identifier that includes projection is required\n+                                let has_field_projection = cmt\n+                                    .place\n+                                    .projections\n+                                    .iter()\n+                                    .any(|proj| matches!(proj.kind, ProjectionKind::Field(..)));\n+\n                                 // no need to bind again if the function doesn't take arg by double ref\n                                 // and if the item is already a double ref\n                                 let ident_sugg = if !call_args.is_empty()\n                                     && !takes_arg_by_double_ref\n-                                    && self.closure_arg_is_double_ref\n+                                    && (self.closure_arg_is_double_ref || has_field_projection)\n                                 {\n-                                    format!(\"{}{}\", start_snip, ident_str)\n+                                    let ident = if has_field_projection {\n+                                        ident_str_with_proj\n+                                    } else {\n+                                        ident_str\n+                                    };\n+                                    format!(\"{}{}\", start_snip, ident)\n                                 } else {\n                                     format!(\"{}&{}\", start_snip, ident_str)\n                                 };\n@@ -318,17 +336,9 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     match proj.kind {\n                         // Field projection like `|v| v.foo`\n                         // no adjustment needed here, as field projections are handled by the compiler\n-                        ProjectionKind::Field(idx, variant) => match cmt.place.ty_before_projection(i).kind() {\n-                            ty::Adt(def, ..) => {\n-                                replacement_str = format!(\n-                                    \"{}.{}\",\n-                                    replacement_str,\n-                                    def.variants[variant].fields[idx as usize].ident.name.as_str()\n-                                );\n-                                projections_handled = true;\n-                            },\n-                            ty::Tuple(_) => {\n-                                replacement_str = format!(\"{}.{}\", replacement_str, idx);\n+                        ProjectionKind::Field(..) => match cmt.place.ty_before_projection(i).kind() {\n+                            ty::Adt(..) | ty::Tuple(_) => {\n+                                replacement_str = ident_str_with_proj.clone();\n                                 projections_handled = true;\n                             },\n                             _ => (),"}, {"sha": "6831fb2cf59e0476ae0c9ab1ae5b36d4e7fc2a02", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -182,4 +182,35 @@ mod issue7392 {\n         let _ = ![&(&1, 2), &(&3, 4), &(&5, 4)].iter().any(|(&x, y)| x == *y);\n         let _ = ![&(&1, 2), &(&3, 4), &(&5, 4)].iter().any(|(&x, y)| x == *y);\n     }\n+\n+    fn test_string_1(s: &str) -> bool {\n+        s.is_empty()\n+    }\n+\n+    fn test_u32_1(s: &u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn test_u32_2(s: u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn projection_in_args_test() {\n+        // Index projections\n+        let lst = &[String::from(\"Hello\"), String::from(\"world\")];\n+        let v: Vec<&[String]> = vec![lst];\n+        let _ = !v.iter().any(|s| s[0].is_empty());\n+        let _ = !v.iter().any(|s| test_string_1(&s[0]));\n+\n+        // Field projections\n+        struct FieldProjection<'a> {\n+            field: &'a u32,\n+        }\n+        let field = 123456789;\n+        let instance = FieldProjection { field: &field };\n+        let v = vec![instance];\n+        let _ = !v.iter().any(|fp| fp.field.is_power_of_two());\n+        let _ = !v.iter().any(|fp| test_u32_1(fp.field));\n+        let _ = !v.iter().any(|fp| test_u32_2(*fp.field));\n+    }\n }"}, {"sha": "778f4f6fa257e6d9192c8c90ce3a0cea40b00bba", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -188,4 +188,35 @@ mod issue7392 {\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|(&x, y)| x == *y).is_none();\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|&(&x, y)| x == *y).is_none();\n     }\n+\n+    fn test_string_1(s: &String) -> bool {\n+        s.is_empty()\n+    }\n+\n+    fn test_u32_1(s: &u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn test_u32_2(s: u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn projection_in_args_test() {\n+        // Index projections\n+        let lst = &[String::from(\"Hello\"), String::from(\"world\")];\n+        let v: Vec<&[String]> = vec![lst];\n+        let _ = v.iter().find(|s| s[0].is_empty()).is_none();\n+        let _ = v.iter().find(|s| test_string_1(&s[0])).is_none();\n+\n+        // Field projections\n+        struct FieldProjection<'a> {\n+            field: &'a u32,\n+        }\n+        let field = 123456789;\n+        let instance = FieldProjection { field: &field };\n+        let v = vec![instance];\n+        let _ = v.iter().find(|fp| fp.field.is_power_of_two()).is_none();\n+        let _ = v.iter().find(|fp| test_u32_1(fp.field)).is_none();\n+        let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_none();\n+    }\n }"}, {"sha": "7c5e5eb589c1a53d2b9deb1ed33639b383843327", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -251,5 +251,43 @@ error: called `is_none()` after searching an `Iterator` with `find`\n LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|&(&x, y)| x == *y).is_none();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `![&(&1, 2), &(&3, 4), &(&5, 4)].iter().any(|(&x, y)| x == *y)`\n \n-error: aborting due to 38 previous errors\n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n+  --> $DIR/search_is_some_fixable_none.rs:192:25\n+   |\n+LL |     fn test_string_1(s: &String) -> bool {\n+   |                         ^^^^^^^ help: change this to: `&str`\n+   |\n+   = note: `-D clippy::ptr-arg` implied by `-D warnings`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:208:17\n+   |\n+LL |         let _ = v.iter().find(|s| s[0].is_empty()).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|s| s[0].is_empty())`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:209:17\n+   |\n+LL |         let _ = v.iter().find(|s| test_string_1(&s[0])).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|s| test_string_1(&s[0]))`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:218:17\n+   |\n+LL |         let _ = v.iter().find(|fp| fp.field.is_power_of_two()).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|fp| fp.field.is_power_of_two())`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:219:17\n+   |\n+LL |         let _ = v.iter().find(|fp| test_u32_1(fp.field)).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|fp| test_u32_1(fp.field))`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:220:17\n+   |\n+LL |         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_none();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|fp| test_u32_2(*fp.field))`\n+\n+error: aborting due to 44 previous errors\n "}, {"sha": "7c940a2b069e47ed52a467251fedc3fa99c93fb2", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -184,4 +184,35 @@ mod issue7392 {\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().any(|(&x, y)| x == *y);\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().any(|(&x, y)| x == *y);\n     }\n+\n+    fn test_string_1(s: &str) -> bool {\n+        s.is_empty()\n+    }\n+\n+    fn test_u32_1(s: &u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn test_u32_2(s: u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn projection_in_args_test() {\n+        // Index projections\n+        let lst = &[String::from(\"Hello\"), String::from(\"world\")];\n+        let v: Vec<&[String]> = vec![lst];\n+        let _ = v.iter().any(|s| s[0].is_empty());\n+        let _ = v.iter().any(|s| test_string_1(&s[0]));\n+\n+        // Field projections\n+        struct FieldProjection<'a> {\n+            field: &'a u32,\n+        }\n+        let field = 123456789;\n+        let instance = FieldProjection { field: &field };\n+        let v = vec![instance];\n+        let _ = v.iter().any(|fp| fp.field.is_power_of_two());\n+        let _ = v.iter().any(|fp| test_u32_1(fp.field));\n+        let _ = v.iter().any(|fp| test_u32_2(*fp.field));\n+    }\n }"}, {"sha": "241641fceae3d898fd015ece4b64db063d4f9bf8", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -187,4 +187,35 @@ mod issue7392 {\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|(&x, y)| x == *y).is_some();\n         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|&(&x, y)| x == *y).is_some();\n     }\n+\n+    fn test_string_1(s: &String) -> bool {\n+        s.is_empty()\n+    }\n+\n+    fn test_u32_1(s: &u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn test_u32_2(s: u32) -> bool {\n+        s.is_power_of_two()\n+    }\n+\n+    fn projection_in_args_test() {\n+        // Index projections\n+        let lst = &[String::from(\"Hello\"), String::from(\"world\")];\n+        let v: Vec<&[String]> = vec![lst];\n+        let _ = v.iter().find(|s| s[0].is_empty()).is_some();\n+        let _ = v.iter().find(|s| test_string_1(&s[0])).is_some();\n+\n+        // Field projections\n+        struct FieldProjection<'a> {\n+            field: &'a u32,\n+        }\n+        let field = 123456789;\n+        let instance = FieldProjection { field: &field };\n+        let v = vec![instance];\n+        let _ = v.iter().find(|fp| fp.field.is_power_of_two()).is_some();\n+        let _ = v.iter().find(|fp| test_u32_1(fp.field)).is_some();\n+        let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n+    }\n }"}, {"sha": "9212c6e71ff54bb7c3c4286683dadc5ec4be5da7", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ebede0c14d00f50a2db3d5a8e944563e40244c7/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=5ebede0c14d00f50a2db3d5a8e944563e40244c7", "patch": "@@ -234,5 +234,43 @@ error: called `is_some()` after searching an `Iterator` with `find`\n LL |         let _ = [&(&1, 2), &(&3, 4), &(&5, 4)].iter().find(|&(&x, y)| x == *y).is_some();\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|(&x, y)| x == *y)`\n \n-error: aborting due to 38 previous errors\n+error: writing `&String` instead of `&str` involves a new object where a slice will do\n+  --> $DIR/search_is_some_fixable_some.rs:191:25\n+   |\n+LL |     fn test_string_1(s: &String) -> bool {\n+   |                         ^^^^^^^ help: change this to: `&str`\n+   |\n+   = note: `-D clippy::ptr-arg` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:207:26\n+   |\n+LL |         let _ = v.iter().find(|s| s[0].is_empty()).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|s| s[0].is_empty())`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:208:26\n+   |\n+LL |         let _ = v.iter().find(|s| test_string_1(&s[0])).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|s| test_string_1(&s[0]))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:217:26\n+   |\n+LL |         let _ = v.iter().find(|fp| fp.field.is_power_of_two()).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|fp| fp.field.is_power_of_two())`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:218:26\n+   |\n+LL |         let _ = v.iter().find(|fp| test_u32_1(fp.field)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|fp| test_u32_1(fp.field))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:219:26\n+   |\n+LL |         let _ = v.iter().find(|fp| test_u32_2(*fp.field)).is_some();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|fp| test_u32_2(*fp.field))`\n+\n+error: aborting due to 44 previous errors\n "}]}