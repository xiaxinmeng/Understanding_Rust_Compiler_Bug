{"sha": "82e17504143e7f26427269fabfb99129a602c8b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTE3NTA0MTQzZTdmMjY0MjcyNjlmYWJmYjk5MTI5YTYwMmM4Yjk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-15T04:27:55Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-17T12:30:01Z"}, "message": "Add -Z dont-buffer-diagnostics, a way to force NLL to immediately emit its diagnostics.\n\nThis is mainly intended for `rustc` developers who want to see a\ndiagnostic in its original context in the control flow.  Two uses\ncases for that are:\n\n * `-Z treat-err-as-bug` which then allows extraction of a stack-trace to the origin of the error\n   (a case that is so important that we make that flag imply this one, effectively).\n\n * `RUST_LOG=... rustc`, in which case it is often useful to see the logging statements that\n   occurred immediately prior to the point where the diagnostic was signalled.\n\nDrive-by: Added some documentation pointing future devs at\nHandlerFlags, and documented the fields of `HandlerFlags` itself.", "tree": {"sha": "469ada29e9704b469f45b5e18e516e1ce07c3f4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469ada29e9704b469f45b5e18e516e1ce07c3f4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e17504143e7f26427269fabfb99129a602c8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e17504143e7f26427269fabfb99129a602c8b9", "html_url": "https://github.com/rust-lang/rust/commit/82e17504143e7f26427269fabfb99129a602c8b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e17504143e7f26427269fabfb99129a602c8b9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f789b6bd6dc01a4412819c0733a6c99e092446fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f789b6bd6dc01a4412819c0733a6c99e092446fe", "html_url": "https://github.com/rust-lang/rust/commit/f789b6bd6dc01a4412819c0733a6c99e092446fe"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "25698129d82b38cee1f933003e9e50894a1d37b3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=82e17504143e7f26427269fabfb99129a602c8b9", "patch": "@@ -1331,6 +1331,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n         \"in match codegen, do not include ReadForMatch statements (used by mir-borrowck)\"),\n+    dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting).\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],\n         \"enable polonius-based borrow-checker\"),\n     codegen_time_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "52e1ab477038d9b1906991f8dd285be0d7b7a9ab", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=82e17504143e7f26427269fabfb99129a602c8b9", "patch": "@@ -1012,6 +1012,7 @@ pub fn build_session_with_source_map(\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n+    let dont_buffer_diagnostics = sopts.debugging_opts.dont_buffer_diagnostics;\n     let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n@@ -1059,6 +1060,7 @@ pub fn build_session_with_source_map(\n             can_emit_warnings,\n             treat_err_as_bug,\n             report_delayed_bugs,\n+            dont_buffer_diagnostics,\n             external_macro_backtrace,\n             ..Default::default()\n         },"}, {"sha": "5e962a4af32f6de741db62fcb5748ba3f522ff8b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=82e17504143e7f26427269fabfb99129a602c8b9", "patch": "@@ -21,6 +21,10 @@ use std::thread::panicking;\n use syntax_pos::{MultiSpan, Span};\n \n /// Used for emitting structured error messages and other diagnostic information.\n+///\n+/// If there is some state in a downstream crate you would like to\n+/// access in the methods of `DiagnosticBuilder` here, consider\n+/// extending `HandlerFlags`, accessed via `self.handler.flags`.\n #[must_use]\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n@@ -89,8 +93,14 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.cancel();\n     }\n \n-    /// Buffers the diagnostic for later emission.\n-    pub fn buffer(self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n+    /// Buffers the diagnostic for later emission, unless handler\n+    /// has disabled such buffering.\n+    pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n+        if self.handler.flags.dont_buffer_diagnostics || self.handler.flags.treat_err_as_bug {\n+            self.emit();\n+            return;\n+        }\n+\n         // We need to use `ptr::read` because `DiagnosticBuilder`\n         // implements `Drop`.\n         let diagnostic;"}, {"sha": "d0ea6fba5ebb31ac60e59d098f9d1383d58fb681", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e17504143e7f26427269fabfb99129a602c8b9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=82e17504143e7f26427269fabfb99129a602c8b9", "patch": "@@ -303,9 +303,20 @@ thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n \n #[derive(Default)]\n pub struct HandlerFlags {\n+    /// If false, warning-level lints are suppressed.\n+    /// (rustc: see `--allow warnings` and `--cap-lints`)\n     pub can_emit_warnings: bool,\n+    /// If true, error-level diagnostics are upgraded to bug-level.\n+    /// (rustc: see `-Z treat-err-as-bug`)\n     pub treat_err_as_bug: bool,\n+    /// If true, immediately emit diagnostics that would otherwise be buffered.\n+    /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n+    pub dont_buffer_diagnostics: bool,\n+    /// If true, immediately print bugs registered with `delay_span_bug`.\n+    /// (rustc: see `-Z report-delayed-bugs`)\n     pub report_delayed_bugs: bool,\n+    /// show macro backtraces even for non-local macros.\n+    /// (rustc: see `-Z external-macro-backtrace`)\n     pub external_macro_backtrace: bool,\n }\n "}]}