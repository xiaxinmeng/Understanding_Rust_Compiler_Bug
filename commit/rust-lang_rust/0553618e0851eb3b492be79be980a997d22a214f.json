{"sha": "0553618e0851eb3b492be79be980a997d22a214f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTM2MThlMDg1MWViM2I0OTJiZTc5YmU5ODBhOTk3ZDIyYTIxNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T18:00:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-30T18:00:43Z"}, "message": "auto merge of #8858 : blake2-ppc/rust/small-bugs, r=alexcrichton\n\nFix a bug in `s.slice_chars(a, b)` that did not accept `a == s.len()`.\r\n\r\nFix a bug in `!=` defined for DList.\r\n\r\nAlso simplify NormalizationIterator to use the CharIterator directly instead of mimicing the iteration itself.", "tree": {"sha": "fa2f01c9614f53c4c74beed7948b21d33d0ce5db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa2f01c9614f53c4c74beed7948b21d33d0ce5db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0553618e0851eb3b492be79be980a997d22a214f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0553618e0851eb3b492be79be980a997d22a214f", "html_url": "https://github.com/rust-lang/rust/commit/0553618e0851eb3b492be79be980a997d22a214f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0553618e0851eb3b492be79be980a997d22a214f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7077aefb10df0b85e482163047c68baecdae3c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/7077aefb10df0b85e482163047c68baecdae3c05", "html_url": "https://github.com/rust-lang/rust/commit/7077aefb10df0b85e482163047c68baecdae3c05"}, {"sha": "15bb9b4e1abf06ada9985effc3ef034d017a4c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/15bb9b4e1abf06ada9985effc3ef034d017a4c18", "html_url": "https://github.com/rust-lang/rust/commit/15bb9b4e1abf06ada9985effc3ef034d017a4c18"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "fa8b50fbf672994c71b15571264efe104597557d", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0553618e0851eb3b492be79be980a997d22a214f/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0553618e0851eb3b492be79be980a997d22a214f/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=0553618e0851eb3b492be79be980a997d22a214f", "patch": "@@ -594,7 +594,7 @@ impl<A: Eq> Eq for DList<A> {\n     }\n \n     fn ne(&self, other: &DList<A>) -> bool {\n-        self.len() != other.len() &&\n+        self.len() != other.len() ||\n             iterator::order::ne(self.iter(), other.iter())\n     }\n }\n@@ -978,6 +978,10 @@ mod tests {\n         assert!(n != m);\n         m.push_back(1);\n         assert_eq!(&n, &m);\n+\n+        let n = list_from([2,3,4]);\n+        let m = list_from([1,2,3]);\n+        assert!(n != m);\n     }\n \n     #[test]"}, {"sha": "4b01d29a98b96d6fb14d13c22c85323df7349875", "filename": "src/libstd/str.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0553618e0851eb3b492be79be980a997d22a214f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0553618e0851eb3b492be79be980a997d22a214f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0553618e0851eb3b492be79be980a997d22a214f", "patch": "@@ -621,8 +621,7 @@ enum NormalizationForm {\n #[deriving(Clone)]\n struct NormalizationIterator<'self> {\n     priv kind: NormalizationForm,\n-    priv index: uint,\n-    priv string: &'self str,\n+    priv iter: CharIterator<'self>,\n     priv buffer: ~[(char, u8)],\n     priv sorted: bool\n }\n@@ -650,16 +649,17 @@ impl<'self> Iterator<char> for NormalizationIterator<'self> {\n             NFKD => char::decompose_compatible\n         };\n \n-        while !self.sorted && self.index < self.string.len() {\n-            let CharRange {ch, next} = self.string.char_range_at(self.index);\n-            self.index = next;\n-            do decomposer(ch) |d| {\n-                let class = canonical_combining_class(d);\n-                if class == 0 && !self.sorted {\n-                    canonical_sort(self.buffer);\n-                    self.sorted = true;\n+        if !self.sorted {\n+            for ch in self.iter {\n+                do decomposer(ch) |d| {\n+                    let class = canonical_combining_class(d);\n+                    if class == 0 && !self.sorted {\n+                        canonical_sort(self.buffer);\n+                        self.sorted = true;\n+                    }\n+                    self.buffer.push((d, class));\n                 }\n-                self.buffer.push((d, class));\n+                if self.sorted { break }\n             }\n         }\n \n@@ -678,7 +678,10 @@ impl<'self> Iterator<char> for NormalizationIterator<'self> {\n         }\n     }\n \n-    fn size_hint(&self) -> (uint, Option<uint>) { (self.string.len(), None) }\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (lower, _) = self.iter.size_hint();\n+        (lower, None)\n+    }\n }\n \n /// Replace all occurrences of one string with another\n@@ -1588,8 +1591,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// Returns the string in Unicode Normalization Form D (canonical decomposition)\n     fn nfd_iter(&self) -> NormalizationIterator<'self> {\n         NormalizationIterator {\n-            index: 0,\n-            string: *self,\n+            iter: self.iter(),\n             buffer: ~[],\n             sorted: false,\n             kind: NFD\n@@ -1599,8 +1601,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     /// Returns the string in Unicode Normalization Form KD (compatibility decomposition)\n     fn nfkd_iter(&self) -> NormalizationIterator<'self> {\n         NormalizationIterator {\n-            index: 0,\n-            string: *self,\n+            iter: self.iter(),\n             buffer: ~[],\n             sorted: false,\n             kind: NFKD\n@@ -1672,6 +1673,7 @@ impl<'self> StrSlice<'self> for &'self str {\n             if count == end { end_byte = Some(idx); break; }\n             count += 1;\n         }\n+        if begin_byte.is_none() && count == begin { begin_byte = Some(self.len()) }\n         if end_byte.is_none() && count == end { end_byte = Some(self.len()) }\n \n         match (begin_byte, end_byte) {\n@@ -2659,8 +2661,11 @@ mod tests {\n         fn t(a: &str, b: &str, start: uint) {\n             assert_eq!(a.slice_chars(start, start + b.char_len()), b);\n         }\n+        t(\"\", \"\", 0);\n         t(\"hello\", \"llo\", 2);\n         t(\"hello\", \"el\", 1);\n+        t(\"\u03b1\u03b2\u03bb\", \"\u03b2\", 1);\n+        t(\"\u03b1\u03b2\u03bb\", \"\", 3);\n         assert_eq!(\"\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\", \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".slice_chars(2, 8));\n     }\n "}]}