{"sha": "a36b2cf377a90cf13bb097e57878b8384d30c53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNmIyY2YzNzdhOTBjZjEzYmIwOTdlNTc4NzhiODM4NGQzMGM1M2E=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T14:56:10Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T14:56:10Z"}, "message": "Merge #549\n\n549: remove Cancelable from module_tree_query r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e5776811753f66c50d98dd155199c9cadd6b2bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5776811753f66c50d98dd155199c9cadd6b2bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36b2cf377a90cf13bb097e57878b8384d30c53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36b2cf377a90cf13bb097e57878b8384d30c53a", "html_url": "https://github.com/rust-lang/rust/commit/a36b2cf377a90cf13bb097e57878b8384d30c53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36b2cf377a90cf13bb097e57878b8384d30c53a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "443ff27724855ffbfccad3513bb82d59e1a4f8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/443ff27724855ffbfccad3513bb82d59e1a4f8ae", "html_url": "https://github.com/rust-lang/rust/commit/443ff27724855ffbfccad3513bb82d59e1a4f8ae"}, {"sha": "68ff52566d44e916868de1b52a9688182c26ebde", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ff52566d44e916868de1b52a9688182c26ebde", "html_url": "https://github.com/rust-lang/rust/commit/68ff52566d44e916868de1b52a9688182c26ebde"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "712c6c86a55539713f004d8f2175446c0e1645f7", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -25,7 +25,7 @@ impl Crate {\n         let file_id = crate_graph.crate_root(self.crate_id);\n         let source_root_id = db.file_source_root(file_id);\n         let file_id = HirFileId::from(file_id);\n-        let module_tree = db.module_tree(source_root_id)?;\n+        let module_tree = db.module_tree(source_root_id);\n         // FIXME: teach module tree about crate roots instead of guessing\n         let source = SourceItemId {\n             file_id,"}, {"sha": "2ec3ab469618801b842dc508429eeb2d56f9847b", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -19,7 +19,7 @@ impl Module {\n         source_root_id: SourceRootId,\n         module_id: ModuleId,\n     ) -> Cancelable<Self> {\n-        let module_tree = db.module_tree(source_root_id)?;\n+        let module_tree = db.module_tree(source_root_id);\n         let def_loc = DefLoc {\n             kind: DefKind::Module,\n             source_root_id,\n@@ -33,7 +33,7 @@ impl Module {\n \n     pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let link = ctry!(loc.module_id.parent_link(&module_tree));\n         Ok(Some(link.name(&module_tree).clone()))\n     }\n@@ -59,7 +59,7 @@ impl Module {\n         db: &impl HirDatabase,\n     ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let link = ctry!(loc.module_id.parent_link(&module_tree));\n         let file_id = link\n             .owner(&module_tree)\n@@ -82,15 +82,15 @@ impl Module {\n \n     pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let module_id = loc.module_id.crate_root(&module_tree);\n         Module::from_module_id(db, loc.source_root_id, module_id)\n     }\n \n     /// Finds a child module with the specified name.\n     pub fn child_impl(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let child_id = ctry!(loc.module_id.child(&module_tree, name));\n         Module::from_module_id(db, loc.source_root_id, child_id).map(Some)\n     }\n@@ -101,7 +101,7 @@ impl Module {\n         // it's kind of hard since the iterator needs to keep a reference to the\n         // module tree.\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let children = loc\n             .module_id\n             .children(&module_tree)\n@@ -112,7 +112,7 @@ impl Module {\n \n     pub fn parent_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         let parent_id = ctry!(loc.module_id.parent(&module_tree));\n         Module::from_module_id(db, loc.source_root_id, parent_id).map(Some)\n     }\n@@ -190,7 +190,7 @@ impl Module {\n         db: &impl HirDatabase,\n     ) -> Cancelable<Vec<(TreeArc<SyntaxNode>, Problem)>> {\n         let loc = self.def_id.loc(db);\n-        let module_tree = db.module_tree(loc.source_root_id)?;\n+        let module_tree = db.module_tree(loc.source_root_id);\n         Ok(loc.module_id.problems(&module_tree, db))\n     }\n }"}, {"sha": "68c3eb4e4d73384830016ae885d6d3f966edca6f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -77,7 +77,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::file_item;\n     }\n \n-    fn submodules(source: SourceItemId) -> Cancelable<Arc<Vec<crate::module_tree::Submodule>>> {\n+    fn submodules(source: SourceItemId) -> Arc<Vec<crate::module_tree::Submodule>> {\n         type SubmodulesQuery;\n         use fn crate::module_tree::Submodule::submodules_query;\n     }\n@@ -92,7 +92,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::item_map;\n     }\n \n-    fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n+    fn module_tree(source_root_id: SourceRootId) -> Arc<ModuleTree> {\n         type ModuleTreeQuery;\n         use fn crate::module_tree::ModuleTree::module_tree_query;\n     }"}, {"sha": "0256d79968726aa2dd353866ca819890d1d56f41", "filename": "crates/ra_hir/src/module_tree.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule_tree.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n use rustc_hash::{FxHashMap, FxHashSet};\n use arrayvec::ArrayVec;\n use relative_path::RelativePathBuf;\n-use ra_db::{FileId, SourceRootId, Cancelable, SourceRoot};\n+use ra_db::{FileId, SourceRootId, SourceRoot};\n use ra_syntax::{\n     SyntaxNode, TreeArc,\n     algo::generate,\n@@ -41,7 +41,7 @@ impl Submodule {\n     pub(crate) fn submodules_query(\n         db: &impl HirDatabase,\n         source: SourceItemId,\n-    ) -> Cancelable<Arc<Vec<Submodule>>> {\n+    ) -> Arc<Vec<Submodule>> {\n         db.check_canceled();\n         let file_id = source.file_id;\n         let file_items = db.file_items(file_id);\n@@ -54,7 +54,7 @@ impl Submodule {\n                 collect_submodules(file_id, &file_items, module.item_list().unwrap())\n             }\n         };\n-        return Ok(Arc::new(submodules));\n+        return Arc::new(submodules);\n \n         fn collect_submodules(\n             file_id: HirFileId,\n@@ -116,10 +116,10 @@ impl ModuleTree {\n     pub(crate) fn module_tree_query(\n         db: &impl HirDatabase,\n         source_root: SourceRootId,\n-    ) -> Cancelable<Arc<ModuleTree>> {\n+    ) -> Arc<ModuleTree> {\n         db.check_canceled();\n         let res = create_module_tree(db, source_root);\n-        Ok(Arc::new(res?))\n+        Arc::new(res)\n     }\n \n     pub(crate) fn modules<'a>(&'a self) -> impl Iterator<Item = ModuleId> + 'a {\n@@ -225,10 +225,7 @@ fn modules(root: &impl ast::ModuleItemOwner) -> impl Iterator<Item = (Name, &ast\n         })\n }\n \n-fn create_module_tree<'a>(\n-    db: &impl HirDatabase,\n-    source_root: SourceRootId,\n-) -> Cancelable<ModuleTree> {\n+fn create_module_tree<'a>(db: &impl HirDatabase, source_root: SourceRootId) -> ModuleTree {\n     let mut tree = ModuleTree::default();\n \n     let mut roots = FxHashMap::default();\n@@ -252,10 +249,10 @@ fn create_module_tree<'a>(\n             &mut roots,\n             None,\n             source,\n-        )?;\n+        );\n         roots.insert(file_id, module_id);\n     }\n-    Ok(tree)\n+    tree\n }\n \n fn build_subtree(\n@@ -266,14 +263,14 @@ fn build_subtree(\n     roots: &mut FxHashMap<FileId, ModuleId>,\n     parent: Option<LinkId>,\n     source: SourceItemId,\n-) -> Cancelable<ModuleId> {\n+) -> ModuleId {\n     visited.insert(source);\n     let id = tree.push_mod(ModuleData {\n         source,\n         parent,\n         children: Vec::new(),\n     });\n-    for sub in db.submodules(source)?.iter() {\n+    for sub in db.submodules(source).iter() {\n         let link = tree.push_link(LinkData {\n             source: sub.source,\n             name: sub.name.clone(),\n@@ -289,7 +286,7 @@ fn build_subtree(\n                 .map(|file_id| match roots.remove(&file_id) {\n                     Some(module_id) => {\n                         tree.mods[module_id].parent = Some(link);\n-                        Ok(module_id)\n+                        module_id\n                     }\n                     None => build_subtree(\n                         db,\n@@ -304,7 +301,7 @@ fn build_subtree(\n                         },\n                     ),\n                 })\n-                .collect::<Cancelable<Vec<_>>>()?;\n+                .collect::<Vec<_>>();\n             (points_to, problem)\n         } else {\n             let points_to = build_subtree(\n@@ -315,14 +312,14 @@ fn build_subtree(\n                 roots,\n                 Some(link),\n                 sub.source,\n-            )?;\n+            );\n             (vec![points_to], None)\n         };\n \n         tree.links[link].points_to = points_to;\n         tree.links[link].problem = problem;\n     }\n-    Ok(id)\n+    id\n }\n \n fn resolve_submodule("}, {"sha": "d84efbf957ac3e33aa3066a17237faf3834508bf", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -48,7 +48,7 @@ pub(super) fn input_module_items(\n     source_root_id: SourceRootId,\n     module_id: ModuleId,\n ) -> Cancelable<Arc<InputModuleItems>> {\n-    let module_tree = db.module_tree(source_root_id)?;\n+    let module_tree = db.module_tree(source_root_id);\n     let source = module_id.source(&module_tree);\n     let file_id = source.file_id;\n     let source = ModuleSource::from_source_item_id(db, source);\n@@ -98,7 +98,7 @@ pub(super) fn item_map(\n     source_root: SourceRootId,\n ) -> Cancelable<Arc<ItemMap>> {\n     let start = Instant::now();\n-    let module_tree = db.module_tree(source_root)?;\n+    let module_tree = db.module_tree(source_root);\n     let input = module_tree\n         .modules()\n         .map(|id| {"}, {"sha": "70dd850d7c31053f57e8211ca69385f004084afb", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36b2cf377a90cf13bb097e57878b8384d30c53a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a36b2cf377a90cf13bb097e57878b8384d30c53a", "patch": "@@ -92,7 +92,7 @@ pub fn module_from_child_node(\n \n fn module_from_source(db: &impl HirDatabase, source: SourceItemId) -> Cancelable<Option<Module>> {\n     let source_root_id = db.file_source_root(source.file_id.as_original_file());\n-    let module_tree = db.module_tree(source_root_id)?;\n+    let module_tree = db.module_tree(source_root_id);\n     let module_id = ctry!(module_tree.find_module_by_source(source));\n     Ok(Some(Module::from_module_id(db, source_root_id, module_id)?))\n }"}]}