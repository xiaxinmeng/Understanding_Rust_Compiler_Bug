{"sha": "f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "node_id": "C_kwDOAAsO6NoAKGY3NGZlOGJmNGNhNzczZTQxNmQ0ZGEzYTNiZjM3MDQ1YjA2ZWEzZGU", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-04-21T19:53:21Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-04-21T19:54:12Z"}, "message": "Limit read size in `File::read_to_end` loop\n\nThis works around performance issues on  Windows by limiting reads the size of reads when the expected size is known.", "tree": {"sha": "828455c5b97c5af6b7b87c46f6f6068f09f06743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/828455c5b97c5af6b7b87c46f6f6068f09f06743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmRC6eQACgkQcTRy8vRW\nJ9733xAAnEgawFYXd7cMW/AJUiDteEHiBwBdqjjPEqamPdULqptNqPDj1aHDQ6UU\ns0187R4sqNcjCLvBI2BsoHHSOPHE1UM8K9jkGzFuAWOQXq9yKBa/BRLtbiAabwYH\nTlEUUvEgNL5pJP+PXOxkWv3rVjJmTMYr8RDDdjWcx3J+UFCD/dmr5x48huuZpYZz\n5IWSBB3FoUCKoD79JlSqjxuCmVL6vk74L6hSC0E3E3iHmLhcZauKZqcx3rnjUaAf\nqHq7GuSzNNMYlMnqMXGYTHZjvwp0ilO1bzxd/r75u5wGpnWG3keG1rcQ2ZuIX/hM\nU3GovMNCy8kuRJtcUrzERxlw2WI1d1eX3Txjh3eDUPWNwjNLHwyhrvGK8zdavl8G\nvfxbQ6qqQbR59RZaiCSnCm+Eop1TkSVVlj7DtPEPni0z58nDz5+Y4+bssLNJN6z2\nJCQhT4Gf6oOJ6aRun+17nusSfaDZHF3sssCW+LXMyWH3Gdg4yhs1yXpXGHtLfh9A\n4Kt/dlsH2vSh0nrzHQqtzBfFWzYPRgWSYZBT38QiPm7goOT/H53/wD444lufP7d+\ntWxqTbsWLgKK9YbvoCBjcsbE4bIPRCXGCl7gIwwPukQ5ysCOseORGvpA8T63iB1v\nzH7aJghSniVrp36wPyNvqE4MEUwtlsbG6zH+/Ie8CFNEe5c5YBo=\n=7ePs\n-----END PGP SIGNATURE-----", "payload": "tree 828455c5b97c5af6b7b87c46f6f6068f09f06743\nparent fa4cc63a6bd6f32903269e52b8f59b284d0e76c4\nauthor Chris Denton <chris@chrisdenton.dev> 1682106801 +0100\ncommitter Chris Denton <chris@chrisdenton.dev> 1682106852 +0100\n\nLimit read size in `File::read_to_end` loop\n\nThis works around performance issues on  Windows by limiting reads the size of reads when the expected size is known.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "html_url": "https://github.com/rust-lang/rust/commit/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4", "html_url": "https://github.com/rust-lang/rust/commit/fa4cc63a6bd6f32903269e52b8f59b284d0e76c4"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "55580b23a6249a31541e61170b3385580b9c4055", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "patch": "@@ -249,9 +249,9 @@ pub struct DirBuilder {\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n     fn inner(path: &Path) -> io::Result<Vec<u8>> {\n         let mut file = File::open(path)?;\n-        let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n-        let mut bytes = Vec::with_capacity(size as usize);\n-        io::default_read_to_end(&mut file, &mut bytes)?;\n+        let size = file.metadata().map(|m| m.len() as usize).ok();\n+        let mut bytes = Vec::with_capacity(size.unwrap_or(0));\n+        io::default_read_to_end(&mut file, &mut bytes, size)?;\n         Ok(bytes)\n     }\n     inner(path.as_ref())\n@@ -289,9 +289,9 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n     fn inner(path: &Path) -> io::Result<String> {\n         let mut file = File::open(path)?;\n-        let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n-        let mut string = String::with_capacity(size as usize);\n-        io::default_read_to_string(&mut file, &mut string)?;\n+        let size = file.metadata().map(|m| m.len() as usize).ok();\n+        let mut string = String::with_capacity(size.unwrap_or(0));\n+        io::default_read_to_string(&mut file, &mut string, size)?;\n         Ok(string)\n     }\n     inner(path.as_ref())\n@@ -732,12 +732,12 @@ impl fmt::Debug for File {\n }\n \n /// Indicates how much extra capacity is needed to read the rest of the file.\n-fn buffer_capacity_required(mut file: &File) -> usize {\n-    let size = file.metadata().map(|m| m.len()).unwrap_or(0);\n-    let pos = file.stream_position().unwrap_or(0);\n+fn buffer_capacity_required(mut file: &File) -> Option<usize> {\n+    let size = file.metadata().map(|m| m.len()).ok()?;\n+    let pos = file.stream_position().ok()?;\n     // Don't worry about `usize` overflow because reading will fail regardless\n     // in that case.\n-    size.saturating_sub(pos) as usize\n+    Some(size.saturating_sub(pos) as usize)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -761,14 +761,16 @@ impl Read for File {\n \n     // Reserves space in the buffer based on the file size when available.\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        buf.reserve(buffer_capacity_required(self));\n-        io::default_read_to_end(self, buf)\n+        let size = buffer_capacity_required(self);\n+        buf.reserve(size.unwrap_or(0));\n+        io::default_read_to_end(self, buf, size)\n     }\n \n     // Reserves space in the buffer based on the file size when available.\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n-        buf.reserve(buffer_capacity_required(self));\n-        io::default_read_to_string(self, buf)\n+        let size = buffer_capacity_required(self);\n+        buf.reserve(size.unwrap_or(0));\n+        io::default_read_to_string(self, buf, size)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -817,14 +819,16 @@ impl Read for &File {\n \n     // Reserves space in the buffer based on the file size when available.\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        buf.reserve(buffer_capacity_required(self));\n-        io::default_read_to_end(self, buf)\n+        let size = buffer_capacity_required(self);\n+        buf.reserve(size.unwrap_or(0));\n+        io::default_read_to_end(self, buf, size)\n     }\n \n     // Reserves space in the buffer based on the file size when available.\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n-        buf.reserve(buffer_capacity_required(self));\n-        io::default_read_to_string(self, buf)\n+        let size = buffer_capacity_required(self);\n+        buf.reserve(size.unwrap_or(0));\n+        io::default_read_to_string(self, buf, size)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b3b5803bf59c3ac2559fbea3a6858af021c0f115", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "patch": "@@ -357,17 +357,30 @@ where\n // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every\n // time is 4,500 times (!) slower than a default reservation size of 32 if the\n // reader has a very small amount of data to return.\n-pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n+pub(crate) fn default_read_to_end<R: Read + ?Sized>(\n+    r: &mut R,\n+    buf: &mut Vec<u8>,\n+    size_hint: Option<usize>,\n+) -> Result<usize> {\n     let start_len = buf.len();\n     let start_cap = buf.capacity();\n+    // Optionally limit the maximum bytes read on each iteration.\n+    // This adds an arbitrary fiddle factor to allow for more data than we expect.\n+    let max_read_size =\n+        size_hint.and_then(|s| s.checked_add(1024)?.checked_next_multiple_of(DEFAULT_BUF_SIZE));\n \n     let mut initialized = 0; // Extra initialized bytes from previous loop iteration\n     loop {\n         if buf.len() == buf.capacity() {\n             buf.reserve(32); // buf is full, need more space\n         }\n \n-        let mut read_buf: BorrowedBuf<'_> = buf.spare_capacity_mut().into();\n+        let mut spare = buf.spare_capacity_mut();\n+        if let Some(size) = max_read_size {\n+            let len = cmp::min(spare.len(), size);\n+            spare = &mut spare[..len]\n+        }\n+        let mut read_buf: BorrowedBuf<'_> = spare.into();\n \n         // SAFETY: These bytes were initialized but not filled in the previous loop\n         unsafe {\n@@ -419,6 +432,7 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n pub(crate) fn default_read_to_string<R: Read + ?Sized>(\n     r: &mut R,\n     buf: &mut String,\n+    size_hint: Option<usize>,\n ) -> Result<usize> {\n     // Note that we do *not* call `r.read_to_end()` here. We are passing\n     // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`\n@@ -429,7 +443,7 @@ pub(crate) fn default_read_to_string<R: Read + ?Sized>(\n     // To prevent extraneously checking the UTF-8-ness of the entire buffer\n     // we pass it to our hardcoded `default_read_to_end` implementation which\n     // we know is guaranteed to only read data into the end of the buffer.\n-    unsafe { append_to_string(buf, |b| default_read_to_end(r, b)) }\n+    unsafe { append_to_string(buf, |b| default_read_to_end(r, b, size_hint)) }\n }\n \n pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>\n@@ -709,7 +723,7 @@ pub trait Read {\n     /// [`std::fs::read`]: crate::fs::read\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n-        default_read_to_end(self, buf)\n+        default_read_to_end(self, buf, None)\n     }\n \n     /// Read all bytes until EOF in this source, appending them to `buf`.\n@@ -752,7 +766,7 @@ pub trait Read {\n     /// [`std::fs::read_to_string`]: crate::fs::read_to_string\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {\n-        default_read_to_string(self, buf)\n+        default_read_to_string(self, buf, None)\n     }\n \n     /// Read the exact number of bytes required to fill `buf`."}, {"sha": "6d30f5e6c6c8d6b1afe7bacb3f6a8134cdbddd59", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "patch": "@@ -314,7 +314,7 @@ fn bench_read_to_end(b: &mut test::Bencher) {\n     b.iter(|| {\n         let mut lr = repeat(1).take(10000000);\n         let mut vec = Vec::with_capacity(1024);\n-        super::default_read_to_end(&mut lr, &mut vec)\n+        super::default_read_to_end(&mut lr, &mut vec, None)\n     });\n }\n "}, {"sha": "318a46d1b637e53eddfd56779bf76853265bc814", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe8bf4ca773e416d4da3a3bf37045b06ea3de/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f74fe8bf4ca773e416d4da3a3bf37045b06ea3de", "patch": "@@ -289,6 +289,7 @@\n #![feature(float_next_up_down)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(hashmap_internals)]\n+#![feature(int_roundings)]\n #![feature(ip)]\n #![feature(ip_in_core)]\n #![feature(maybe_uninit_slice)]"}]}