{"sha": "8aeb9303e954502f67f4af7c5c7e79f6d4f706eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZWI5MzAzZTk1NDUwMmY2N2Y0YWY3YzVjN2U3OWY2ZDRmNzA2ZWI=", "commit": {"author": {"name": "mitchmindtree", "email": "mitchell.nordine@gmail.com", "date": "2016-07-08T12:12:36Z"}, "committer": {"name": "mitchmindtree", "email": "mitchell.nordine@gmail.com", "date": "2016-07-08T12:12:36Z"}, "message": "add a non blocking iterator for the mpsc::Receiver\n\nCurrently, the `mpsc::Receiver` offers methods for receiving values in\nboth blocking (`recv`) and non-blocking (`try_recv`) flavours. However\nonly blocking iteration over values is supported. This commit adds a\nnon-blocking iterator to complement the `try_recv` method, just as the\nblocking iterator complements the `recv` method.", "tree": {"sha": "f20307a74b668d186f9747d22d77b66695e6bf1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f20307a74b668d186f9747d22d77b66695e6bf1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb", "html_url": "https://github.com/rust-lang/rust/commit/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb/comments", "author": {"login": "mitchmindtree", "id": 4587373, "node_id": "MDQ6VXNlcjQ1ODczNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4587373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchmindtree", "html_url": "https://github.com/mitchmindtree", "followers_url": "https://api.github.com/users/mitchmindtree/followers", "following_url": "https://api.github.com/users/mitchmindtree/following{/other_user}", "gists_url": "https://api.github.com/users/mitchmindtree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchmindtree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchmindtree/subscriptions", "organizations_url": "https://api.github.com/users/mitchmindtree/orgs", "repos_url": "https://api.github.com/users/mitchmindtree/repos", "events_url": "https://api.github.com/users/mitchmindtree/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchmindtree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitchmindtree", "id": 4587373, "node_id": "MDQ6VXNlcjQ1ODczNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4587373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchmindtree", "html_url": "https://github.com/mitchmindtree", "followers_url": "https://api.github.com/users/mitchmindtree/followers", "following_url": "https://api.github.com/users/mitchmindtree/following{/other_user}", "gists_url": "https://api.github.com/users/mitchmindtree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchmindtree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchmindtree/subscriptions", "organizations_url": "https://api.github.com/users/mitchmindtree/orgs", "repos_url": "https://api.github.com/users/mitchmindtree/repos", "events_url": "https://api.github.com/users/mitchmindtree/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchmindtree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4e2a5b2d410318051a38e6b7da10b45975d022", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4e2a5b2d410318051a38e6b7da10b45975d022", "html_url": "https://github.com/rust-lang/rust/commit/9b4e2a5b2d410318051a38e6b7da10b45975d022"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "30ce9c3f382b7916cb6b561887dab05934d16b8c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aeb9303e954502f67f4af7c5c7e79f6d4f706eb/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=8aeb9303e954502f67f4af7c5c7e79f6d4f706eb", "patch": "@@ -311,6 +311,16 @@ pub struct Iter<'a, T: 'a> {\n     rx: &'a Receiver<T>\n }\n \n+/// An iterator that attempts to yield all pending values for a receiver.\n+/// `None` will be returned when there are no pending values remaining or\n+/// if the corresponding channel has hung up.\n+///\n+/// This Iterator will never block the caller in order to wait for data to\n+/// become available. Instead, it will return `None`.\n+pub struct TryIter<'a, T: 'a> {\n+    rx: &'a Receiver<T>\n+}\n+\n /// An owning iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n@@ -982,6 +992,15 @@ impl<T> Receiver<T> {\n     pub fn iter(&self) -> Iter<T> {\n         Iter { rx: self }\n     }\n+\n+    /// Returns an iterator that will attempt to yield all pending values.\n+    /// It will return `None` if there are no more pending values or if the\n+    /// channel has hung up. The iterator will never `panic!` or block the\n+    /// user by waiting for values.\n+    pub fn try_iter(&self) -> TryIter<T> {\n+        TryIter { rx: self }\n+    }\n+\n }\n \n impl<T> select::Packet for Receiver<T> {\n@@ -1077,6 +1096,12 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n+impl<'a, T> Iterator for TryIter<'a, T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> { self.rx.try_recv().ok() }\n+}\n+\n #[stable(feature = \"receiver_into_iter\", since = \"1.1.0\")]\n impl<'a, T> IntoIterator for &'a Receiver<T> {\n     type Item = T;"}]}