{"sha": "f1de04c7609ea31f76e445e3189dc6143f959f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZGUwNGM3NjA5ZWEzMWY3NmU0NDVlMzE4OWRjNjE0M2Y5NTlmNDA=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-09T07:49:31Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-14T01:00:48Z"}, "message": "rustdoc: Represent item types as a small number in the search index.\n\nHas negligible improvements with gzip, but saves about 7% without it.\nThis also has an effect of changing the tie-breaking order of item types.", "tree": {"sha": "66277c00b3c88cdcce5be2911bd17f7fe9b7429b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66277c00b3c88cdcce5be2911bd17f7fe9b7429b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1de04c7609ea31f76e445e3189dc6143f959f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1de04c7609ea31f76e445e3189dc6143f959f40", "html_url": "https://github.com/rust-lang/rust/commit/f1de04c7609ea31f76e445e3189dc6143f959f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1de04c7609ea31f76e445e3189dc6143f959f40/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e", "html_url": "https://github.com/rust-lang/rust/commit/ab6915d7b530a1fa50ce87f2c227b2a33e4ce61e"}], "stats": {"total": 207, "additions": 158, "deletions": 49}, "files": [{"sha": "ca55d1f04ad2f16715d49ff9e8c04efcbf262d55", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f1de04c7609ea31f76e445e3189dc6143f959f40", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -24,6 +24,8 @@ use syntax::ast;\n use syntax::ast_util;\n \n use clean;\n+use html::item_type;\n+use html::item_type::ItemType;\n use html::render;\n use html::render::{cache_key, current_location_key};\n \n@@ -172,17 +174,17 @@ fn external_path(w: &mut io::Writer, p: &clean::Path, print_all: bool,\n         },\n         |_cache| {\n             Some((Vec::from_slice(fqn), match kind {\n-                clean::TypeStruct => \"struct\",\n-                clean::TypeEnum => \"enum\",\n-                clean::TypeFunction => \"fn\",\n-                clean::TypeTrait => \"trait\",\n+                clean::TypeStruct => item_type::Struct,\n+                clean::TypeEnum => item_type::Enum,\n+                clean::TypeFunction => item_type::Function,\n+                clean::TypeTrait => item_type::Trait,\n             }))\n         })\n }\n \n fn path(w: &mut io::Writer, path: &clean::Path, print_all: bool,\n         root: |&render::Cache, &[~str]| -> Option<~str>,\n-        info: |&render::Cache| -> Option<(Vec<~str> , &'static str)>)\n+        info: |&render::Cache| -> Option<(Vec<~str> , ItemType)>)\n     -> fmt::Result\n {\n     // The generics will get written to both the title and link\n@@ -252,12 +254,12 @@ fn path(w: &mut io::Writer, path: &clean::Path, print_all: bool,\n                         url.push_str(\"/\");\n                     }\n                     match shortty {\n-                        \"mod\" => {\n+                        item_type::Module => {\n                             url.push_str(*fqp.last().unwrap());\n                             url.push_str(\"/index.html\");\n                         }\n                         _ => {\n-                            url.push_str(shortty);\n+                            url.push_str(shortty.to_static_str());\n                             url.push_str(\".\");\n                             url.push_str(*fqp.last().unwrap());\n                             url.push_str(\".html\");"}, {"sha": "f59e8cb248738edb49e82e82bef397dadc89e50d", "filename": "src/librustdoc/html/item_type.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=f1de04c7609ea31f76e445e3189dc6143f959f40", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Item types.\n+\n+use std::fmt;\n+use clean;\n+\n+/// Item type. Corresponds to `clean::ItemEnum` variants.\n+///\n+/// The search index uses item types encoded as smaller numbers which equal to\n+/// discriminants. JavaScript then is used to decode them into the original value.\n+/// Consequently, every change to this type should be synchronized to\n+/// the `itemTypes` mapping table in `static/main.js`.\n+#[deriving(Eq, Clone)]\n+pub enum ItemType {\n+    Module          = 0,\n+    Struct          = 1,\n+    Enum            = 2,\n+    Function        = 3,\n+    Typedef         = 4,\n+    Static          = 5,\n+    Trait           = 6,\n+    Impl            = 7,\n+    ViewItem        = 8,\n+    TyMethod        = 9,\n+    Method          = 10,\n+    StructField     = 11,\n+    Variant         = 12,\n+    ForeignFunction = 13,\n+    ForeignStatic   = 14,\n+    Macro           = 15,\n+}\n+\n+impl ItemType {\n+    pub fn to_static_str(&self) -> &'static str {\n+        match *self {\n+            Module          => \"mod\",\n+            Struct          => \"struct\",\n+            Enum            => \"enum\",\n+            Function        => \"fn\",\n+            Typedef         => \"typedef\",\n+            Static          => \"static\",\n+            Trait           => \"trait\",\n+            Impl            => \"impl\",\n+            ViewItem        => \"viewitem\",\n+            TyMethod        => \"tymethod\",\n+            Method          => \"method\",\n+            StructField     => \"structfield\",\n+            Variant         => \"variant\",\n+            ForeignFunction => \"ffi\",\n+            ForeignStatic   => \"ffs\",\n+            Macro           => \"macro\",\n+        }\n+    }\n+}\n+\n+impl fmt::Show for ItemType {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.to_static_str().fmt(f)\n+    }\n+}\n+\n+impl fmt::Unsigned for ItemType {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        (*self as uint).fmt(f)\n+    }\n+}\n+\n+pub fn shortty(item: &clean::Item) -> ItemType {\n+    match item.inner {\n+        clean::ModuleItem(..)          => Module,\n+        clean::StructItem(..)          => Struct,\n+        clean::EnumItem(..)            => Enum,\n+        clean::FunctionItem(..)        => Function,\n+        clean::TypedefItem(..)         => Typedef,\n+        clean::StaticItem(..)          => Static,\n+        clean::TraitItem(..)           => Trait,\n+        clean::ImplItem(..)            => Impl,\n+        clean::ViewItemItem(..)        => ViewItem,\n+        clean::TyMethodItem(..)        => TyMethod,\n+        clean::MethodItem(..)          => Method,\n+        clean::StructFieldItem(..)     => StructField,\n+        clean::VariantItem(..)         => Variant,\n+        clean::ForeignFunctionItem(..) => ForeignFunction,\n+        clean::ForeignStaticItem(..)   => ForeignStatic,\n+        clean::MacroItem(..)           => Macro,\n+    }\n+}\n+"}, {"sha": "d2763f494ea4cd2448d9216ada27964af04e9dcb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f1de04c7609ea31f76e445e3189dc6143f959f40", "patch": "@@ -52,6 +52,8 @@ use rustc::util::nodemap::NodeSet;\n use clean;\n use doctree;\n use fold::DocFolder;\n+use html::item_type;\n+use html::item_type::{ItemType, shortty};\n use html::format::{VisSpace, Method, FnStyleSpace};\n use html::layout;\n use html::markdown;\n@@ -138,7 +140,7 @@ pub struct Cache {\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n     /// necessary.\n-    pub paths: HashMap<ast::NodeId, (Vec<~str> , &'static str)>,\n+    pub paths: HashMap<ast::NodeId, (Vec<~str> , ItemType)>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n@@ -193,7 +195,7 @@ struct Sidebar<'a> { cx: &'a Context, item: &'a clean::Item, }\n /// Struct representing one entry in the JS search index. These are all emitted\n /// by hand to a large JS file at the end of cache-creation.\n struct IndexItem {\n-    ty: &'static str,\n+    ty: ItemType,\n     name: ~str,\n     path: ~str,\n     desc: ~str,\n@@ -311,7 +313,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             if i > 0 {\n                 try!(write!(&mut w, \",\"));\n             }\n-            try!(write!(&mut w, \"\\\\{ty:\\\"{}\\\",name:\\\"{}\\\",path:\\\"{}\\\",desc:{}\",\n+            try!(write!(&mut w, \"\\\\{ty:{:u},name:\\\"{}\\\",path:\\\"{}\\\",desc:{}\",\n                         item.ty, item.name, item.path,\n                         item.desc.to_json().to_str()));\n             match item.parent {\n@@ -330,7 +332,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n             if i > 0 {\n                 try!(write!(&mut w, \",\"));\n             }\n-            try!(write!(&mut w, \"\\\\{type:'{}',name:'{}'\\\\}\",\n+            try!(write!(&mut w, \"\\\\{type:{:u},name:'{}'\\\\}\",\n                         short, *fqp.last().unwrap()));\n         }\n         try!(write!(&mut w, \"];\"));\n@@ -622,12 +624,13 @@ impl DocFolder for Cache {\n                         } else {\n                             let last = self.parent_stack.last().unwrap();\n                             let path = match self.paths.find(last) {\n-                                Some(&(_, \"trait\")) =>\n+                                Some(&(_, item_type::Trait)) =>\n                                     Some(self.stack.slice_to(self.stack.len() - 1)),\n                                 // The current stack not necessarily has correlation for\n                                 // where the type was defined. On the other hand,\n                                 // `paths` always has the right information if present.\n-                                Some(&(ref fqp, \"struct\")) | Some(&(ref fqp, \"enum\")) =>\n+                                Some(&(ref fqp, item_type::Struct)) |\n+                                Some(&(ref fqp, item_type::Enum)) =>\n                                     Some(fqp.slice_to(fqp.len() - 1)),\n                                 Some(..) => Some(self.stack.as_slice()),\n                                 None => None\n@@ -687,7 +690,7 @@ impl DocFolder for Cache {\n             clean::VariantItem(..) => {\n                 let mut stack = self.stack.clone();\n                 stack.pop();\n-                self.paths.insert(item.id, (stack, \"enum\"));\n+                self.paths.insert(item.id, (stack, item_type::Enum));\n             }\n             _ => {}\n         }\n@@ -845,7 +848,7 @@ impl Context {\n             }\n             title.push_str(\" - Rust\");\n             let page = layout::Page {\n-                ty: shortty(it),\n+                ty: shortty(it).to_static_str(),\n                 root_path: cx.root_path.as_slice(),\n                 title: title.as_slice(),\n             };\n@@ -899,27 +902,6 @@ impl Context {\n     }\n }\n \n-fn shortty(item: &clean::Item) -> &'static str {\n-    match item.inner {\n-        clean::ModuleItem(..)          => \"mod\",\n-        clean::StructItem(..)          => \"struct\",\n-        clean::EnumItem(..)            => \"enum\",\n-        clean::FunctionItem(..)        => \"fn\",\n-        clean::TypedefItem(..)         => \"typedef\",\n-        clean::StaticItem(..)          => \"static\",\n-        clean::TraitItem(..)           => \"trait\",\n-        clean::ImplItem(..)            => \"impl\",\n-        clean::ViewItemItem(..)        => \"viewitem\",\n-        clean::TyMethodItem(..)        => \"tymethod\",\n-        clean::MethodItem(..)          => \"method\",\n-        clean::StructFieldItem(..)     => \"structfield\",\n-        clean::VariantItem(..)         => \"variant\",\n-        clean::ForeignFunctionItem(..) => \"ffi\",\n-        clean::ForeignStaticItem(..)   => \"ffs\",\n-        clean::MacroItem(..)           => \"macro\",\n-    }\n-}\n-\n impl<'a> Item<'a> {\n     fn ismodule(&self) -> bool {\n         match self.item.inner {\n@@ -1009,7 +991,7 @@ impl<'a> fmt::Show for Item<'a> {\n fn item_path(item: &clean::Item) -> ~str {\n     match item.inner {\n         clean::ModuleItem(..) => *item.name.get_ref() + \"/index.html\",\n-        _ => shortty(item) + \".\" + *item.name.get_ref() + \".html\"\n+        _ => shortty(item).to_static_str() + \".\" + *item.name.get_ref() + \".html\"\n     }\n }\n \n@@ -1095,13 +1077,13 @@ fn item_module(w: &mut Writer, cx: &Context,\n     indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n \n     debug!(\"{:?}\", indices);\n-    let mut curty = \"\";\n+    let mut curty = None;\n     for &idx in indices.iter() {\n         let myitem = &items[idx];\n \n-        let myty = shortty(myitem);\n+        let myty = Some(shortty(myitem));\n         if myty != curty {\n-            if curty != \"\" {\n+            if curty.is_some() {\n                 try!(write!(w, \"</table>\"));\n             }\n             curty = myty;\n@@ -1704,8 +1686,9 @@ impl<'a> fmt::Show for Sidebar<'a> {\n             };\n             try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n             for item in items.iter() {\n+                let curty = shortty(cur).to_static_str();\n                 let class = if cur.name.get_ref() == item &&\n-                               short == shortty(cur) { \"current\" } else { \"\" };\n+                               short == curty { \"current\" } else { \"\" };\n                 try!(write!(w, \"<a class='{ty} {class}' href='{curty, select,\n                                 mod{../}\n                                 other{}\n@@ -1716,7 +1699,7 @@ impl<'a> fmt::Show for Sidebar<'a> {\n                        ty = short,\n                        tysel = short,\n                        class = class,\n-                       curty = shortty(cur),\n+                       curty = curty,\n                        name = item.as_slice()));\n             }\n             try!(write!(w, \"</div>\"));\n@@ -1735,7 +1718,7 @@ impl<'a> fmt::Show for Sidebar<'a> {\n fn build_sidebar(m: &clean::Module) -> HashMap<~str, Vec<~str> > {\n     let mut map = HashMap::new();\n     for item in m.items.iter() {\n-        let short = shortty(item);\n+        let short = shortty(item).to_static_str();\n         let myname = match item.name {\n             None => continue,\n             Some(ref s) => s.to_owned(),"}, {"sha": "43fb02f62be2e95630ce946633d114c95edf36b3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f1de04c7609ea31f76e445e3189dc6143f959f40", "patch": "@@ -135,7 +135,7 @@\n         function execQuery(query, max, searchWords) {\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n-                typeFilter = query.type,\n+                typeFilter = itemTypeFromName(query.type),\n                 results = [],\n                 split = valLower.split(\"::\");\n \n@@ -156,7 +156,7 @@\n                 for (var i = 0; i < nSearchWords; i += 1) {\n                     if (searchWords[i] === val) {\n                         // filter type: ... queries\n-                        if (!typeFilter || typeFilter === searchIndex[i].ty) {\n+                        if (typeFilter < 0 || typeFilter === searchIndex[i].ty) {\n                             results.push({id: i, index: -1});\n                         }\n                     }\n@@ -174,7 +174,7 @@\n                             searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n                         {\n                             // filter type: ... queries\n-                            if (!typeFilter || typeFilter === searchIndex[j].ty) {\n+                            if (typeFilter < 0 || typeFilter === searchIndex[j].ty) {\n                                 results.push({id: j, index: searchWords[j].replace(/_/g, \"\").indexOf(val)});\n                             }\n                         }\n@@ -405,7 +405,7 @@\n \n                     shown.push(item);\n                     name = item.name;\n-                    type = item.ty;\n+                    type = itemTypes[item.ty];\n \n                     output += '<tr class=\"' + type + ' result\"><td>';\n \n@@ -427,7 +427,7 @@\n                         output += item.path + '::' + myparent.name +\n                             '::<a href=\"' + rootPath +\n                             item.path.replace(/::/g, '/') +\n-                            '/' + myparent.type +\n+                            '/' + itemTypes[myparent.type] +\n                             '.' + myparent.name +\n                             '.html' + anchor +\n                             '\" class=\"' + type +\n@@ -505,6 +505,32 @@\n             showResults(results);\n         }\n \n+        // This mapping table should match the discriminants of\n+        // `rustdoc::html::item_type::ItemType` type in Rust.\n+        var itemTypes = [\"mod\",\n+                         \"struct\",\n+                         \"enum\",\n+                         \"fn\",\n+                         \"typedef\",\n+                         \"static\",\n+                         \"trait\",\n+                         \"impl\",\n+                         \"viewitem\",\n+                         \"tymethod\",\n+                         \"method\",\n+                         \"structfield\",\n+                         \"variant\",\n+                         \"ffi\",\n+                         \"ffs\",\n+                         \"macro\"];\n+\n+        function itemTypeFromName(typename) {\n+            for (var i = 0; i < itemTypes.length; ++i) {\n+                if (itemTypes[i] === typename) return i;\n+            }\n+            return -1;\n+        }\n+\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];"}, {"sha": "db6f6778efcad0ee4e9dc86e696c08be5c70db74", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1de04c7609ea31f76e445e3189dc6143f959f40/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f1de04c7609ea31f76e445e3189dc6143f959f40", "patch": "@@ -41,6 +41,7 @@ pub mod fold;\n pub mod html {\n     pub mod highlight;\n     pub mod escape;\n+    pub mod item_type;\n     pub mod format;\n     pub mod layout;\n     pub mod markdown;"}]}