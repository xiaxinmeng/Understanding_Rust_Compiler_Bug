{"sha": "16ae078fe994535f3b362c6af0389549b6516063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YWUwNzhmZTk5NDUzNWYzYjM2MmM2YWYwMzg5NTQ5YjY1MTYwNjM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-12T08:38:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-12T08:38:37Z"}, "message": "Rollup merge of #37503 - nwin:patch-3, r=steveklabnik\n\nRemove remark about poor code style\n\nThe current wording [seems to be confusing](https://www.reddit.com/r/rust/comments/5aat03/why_is_implementing_traits_on_primitive_types/). As an explanation when and why this could be considered as poor style would go beyond of the scope of this chapter I suggest to remove this remark.", "tree": {"sha": "f80041d64eb855892cc1ac80216b6d9cf11382d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f80041d64eb855892cc1ac80216b6d9cf11382d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ae078fe994535f3b362c6af0389549b6516063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ae078fe994535f3b362c6af0389549b6516063", "html_url": "https://github.com/rust-lang/rust/commit/16ae078fe994535f3b362c6af0389549b6516063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ae078fe994535f3b362c6af0389549b6516063/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7894d2aad68be19a7e97194e3df4ec835ca524b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7894d2aad68be19a7e97194e3df4ec835ca524b6", "html_url": "https://github.com/rust-lang/rust/commit/7894d2aad68be19a7e97194e3df4ec835ca524b6"}, {"sha": "5cf07f1d60f38491339b3c3b963aca3622674891", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf07f1d60f38491339b3c3b963aca3622674891", "html_url": "https://github.com/rust-lang/rust/commit/5cf07f1d60f38491339b3c3b963aca3622674891"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "d1166e686c7b647bf9d5a12bb646b14e6f84f240", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16ae078fe994535f3b362c6af0389549b6516063/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/16ae078fe994535f3b362c6af0389549b6516063/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=16ae078fe994535f3b362c6af0389549b6516063", "patch": "@@ -243,28 +243,22 @@ to know more about [operator traits][operators-and-overloading].\n # Rules for implementing traits\n \n So far, we\u2019ve only added trait implementations to structs, but you can\n-implement a trait for any type. So technically, we _could_ implement `HasArea`\n-for `i32`:\n+implement a trait for any type such as `f32`:\n \n ```rust\n-trait HasArea {\n-    fn area(&self) -> f64;\n+trait ApproxEqual {\n+    fn approx_equal(&self, other: &Self) -> bool;\n }\n-\n-impl HasArea for i32 {\n-    fn area(&self) -> f64 {\n-        println!(\"this is silly\");\n-\n-        *self as f64\n+impl ApproxEqual for f32 {\n+    fn approx_equal(&self, other: &Self) -> bool {\n+        // Appropriate for `self` and `other` being close to 1.0.\n+        (self - other).abs() <= ::std::f32::EPSILON\n     }\n }\n \n-5.area();\n+println!(\"{}\", 1.0.approx_equal(&1.00000001));\n ```\n \n-It is considered poor style to implement methods on such primitive types, even\n-though it is possible.\n-\n This may seem like the Wild West, but there are two restrictions around\n implementing traits that prevent this from getting out of hand. The first is\n that if the trait isn\u2019t defined in your scope, it doesn\u2019t apply. Here\u2019s an"}]}