{"sha": "8bd37e672411bf004a4ad64bb7d2160e455a72b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZDM3ZTY3MjQxMWJmMDA0YTRhZDY0YmI3ZDIxNjBlNDU1YTcyYjA=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-02T11:58:46Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-03T13:20:37Z"}, "message": "Deprecate {f32, f64}::from_str_hex\n\nThis is now covered by `FromStrRadix::from_str_radix`", "tree": {"sha": "9040cc58cc6aa3d6ba5f4f99c837f46494ddee6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9040cc58cc6aa3d6ba5f4f99c837f46494ddee6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bd37e672411bf004a4ad64bb7d2160e455a72b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd37e672411bf004a4ad64bb7d2160e455a72b0", "html_url": "https://github.com/rust-lang/rust/commit/8bd37e672411bf004a4ad64bb7d2160e455a72b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bd37e672411bf004a4ad64bb7d2160e455a72b0/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ded5898b1863e195856d2678323315ae224463", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ded5898b1863e195856d2678323315ae224463", "html_url": "https://github.com/rust-lang/rust/commit/01ded5898b1863e195856d2678323315ae224463"}], "stats": {"total": 107, "additions": 27, "deletions": 80}, "files": [{"sha": "63c3956ef24121cee057eed930aea25036bda765", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8bd37e672411bf004a4ad64bb7d2160e455a72b0/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd37e672411bf004a4ad64bb7d2160e455a72b0/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=8bd37e672411bf004a4ad64bb7d2160e455a72b0", "patch": "@@ -333,34 +333,10 @@ pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n     r\n }\n \n-/// Convert a string in base 16 to a float.\n-/// Accepts an optional binary exponent.\n-///\n-/// This function accepts strings such as\n-///\n-/// * 'a4.fe'\n-/// * '+a4.fe', equivalent to 'a4.fe'\n-/// * '-a4.fe'\n-/// * '2b.aP128', or equivalently, '2b.ap128'\n-/// * '2b.aP-128'\n-/// * '.' (understood as 0)\n-/// * 'c.'\n-/// * '.c', or, equivalently,  '0.c'\n-/// * '+inf', 'inf', '-inf', 'NaN'\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-///\n-/// # Return value\n-///\n-/// `None` if the string did not represent a valid number.  Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `[num]`.\n #[inline]\n+#[deprecated=\"Use `FromStrRadix::from_str_radix(src, 16)`\"]\n pub fn from_str_hex(src: &str) -> Option<f32> {\n-    strconv::from_str_radix_float(src, 16u)\n+    strconv::from_str_radix_float(src, 16)\n }\n \n impl FromStr for f32 {\n@@ -383,12 +359,12 @@ impl FromStr for f32 {\n     ///\n     /// # Arguments\n     ///\n-    /// * num - A string\n+    /// * src - A string\n     ///\n     /// # Return value\n     ///\n     /// `None` if the string did not represent a valid number.  Otherwise,\n-    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    /// `Some(n)` where `n` is the floating-point number represented by `src`.\n     #[inline]\n     fn from_str(src: &str) -> Option<f32> {\n         strconv::from_str_radix_float(src, 10u)\n@@ -406,13 +382,13 @@ impl num::FromStrRadix for f32 {\n     ///\n     /// # Arguments\n     ///\n-    /// * num - A string\n+    /// * src - A string\n     /// * radix - The base to use. Must lie in the range [2 .. 36]\n     ///\n     /// # Return value\n     ///\n     /// `None` if the string did not represent a valid number. Otherwise,\n-    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    /// `Some(n)` where `n` is the floating-point number represented by `src`.\n     #[inline]\n     fn from_str_radix(src: &str, radix: uint) -> Option<f32> {\n         strconv::from_str_radix_float(src, radix)\n@@ -707,8 +683,8 @@ mod tests {\n     fn test_ldexp() {\n         // We have to use from_str until base-2 exponents\n         // are supported in floating-point literals\n-        let f1: f32 = from_str_hex(\"1p-123\").unwrap();\n-        let f2: f32 = from_str_hex(\"1p-111\").unwrap();\n+        let f1: f32 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n+        let f2: f32 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         assert_eq!(FloatMath::ldexp(1f32, -123), f1);\n         assert_eq!(FloatMath::ldexp(1f32, -111), f2);\n \n@@ -727,8 +703,8 @@ mod tests {\n     fn test_frexp() {\n         // We have to use from_str until base-2 exponents\n         // are supported in floating-point literals\n-        let f1: f32 = from_str_hex(\"1p-123\").unwrap();\n-        let f2: f32 = from_str_hex(\"1p-111\").unwrap();\n+        let f1: f32 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n+        let f2: f32 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         let (x1, exp1) = f1.frexp();\n         let (x2, exp2) = f2.frexp();\n         assert_eq!((x1, exp1), (0.5f32, -122));"}, {"sha": "6e8e92eb91d03ce1080490d9f60618d3a203ba12", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 17, "deletions": 46, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8bd37e672411bf004a4ad64bb7d2160e455a72b0/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bd37e672411bf004a4ad64bb7d2160e455a72b0/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=8bd37e672411bf004a4ad64bb7d2160e455a72b0", "patch": "@@ -341,89 +341,60 @@ pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n     r\n }\n \n-/// Convert a string in base 16 to a float.\n-/// Accepts an optional binary exponent.\n-///\n-/// This function accepts strings such as\n-///\n-/// * 'a4.fe'\n-/// * '+a4.fe', equivalent to 'a4.fe'\n-/// * '-a4.fe'\n-/// * '2b.aP128', or equivalently, '2b.ap128'\n-/// * '2b.aP-128'\n-/// * '.' (understood as 0)\n-/// * 'c.'\n-/// * '.c', or, equivalently,  '0.c'\n-/// * '+inf', 'inf', '-inf', 'NaN'\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-///\n-/// # Return value\n-///\n-/// `None` if the string did not represent a valid number.  Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `[num]`.\n #[inline]\n-pub fn from_str_hex(num: &str) -> Option<f64> {\n-    strconv::from_str_radix_float(num, 16u)\n+#[deprecated=\"Use `FromStrRadix::from_str_radix(src, 16)`\"]\n+pub fn from_str_hex(src: &str) -> Option<f64> {\n+    strconv::from_str_radix_float(src, 16)\n }\n \n impl FromStr for f64 {\n     /// Convert a string in base 10 to a float.\n     /// Accepts an optional decimal exponent.\n     ///\n-    /// This function accepts strings such as\n+    /// This function accepts strings such as:\n     ///\n     /// * '3.14'\n-    /// * '+3.14', equivalent to '3.14'\n     /// * '-3.14'\n     /// * '2.5E10', or equivalently, '2.5e10'\n     /// * '2.5E-10'\n     /// * '.' (understood as 0)\n     /// * '5.'\n     /// * '.5', or, equivalently,  '0.5'\n-    /// * '+inf', 'inf', '-inf', 'NaN'\n+    /// * inf', '-inf', 'NaN'\n     ///\n     /// Leading and trailing whitespace represent an error.\n     ///\n     /// # Arguments\n     ///\n-    /// * num - A string\n+    /// * src - A string\n     ///\n     /// # Return value\n     ///\n     /// `none` if the string did not represent a valid number.  Otherwise,\n-    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    /// `Some(n)` where `n` is the floating-point number represented by `src`.\n     #[inline]\n-    fn from_str(val: &str) -> Option<f64> {\n-        strconv::from_str_radix_float(val, 10u)\n+    fn from_str(src: &str) -> Option<f64> {\n+        strconv::from_str_radix_float(src, 10u)\n     }\n }\n \n impl num::FromStrRadix for f64 {\n     /// Convert a string in a given base to a float.\n     ///\n-    /// Due to possible conflicts, this function does **not** accept\n-    /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n-    /// does it recognize exponents of any kind.\n-    ///\n     /// Leading and trailing whitespace represent an error.\n     ///\n     /// # Arguments\n     ///\n-    /// * num - A string\n+    /// * src - A string\n     /// * radix - The base to use. Must lie in the range [2 .. 36]\n     ///\n     /// # Return value\n     ///\n     /// `None` if the string did not represent a valid number. Otherwise,\n-    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    /// `Some(n)` where `n` is the floating-point number represented by `src`.\n     #[inline]\n-    fn from_str_radix(val: &str, radix: uint) -> Option<f64> {\n-        strconv::from_str_radix_float(val, radix)\n+    fn from_str_radix(src: &str, radix: uint) -> Option<f64> {\n+        strconv::from_str_radix_float(src, radix)\n     }\n }\n \n@@ -709,8 +680,8 @@ mod tests {\n     fn test_ldexp() {\n         // We have to use from_str until base-2 exponents\n         // are supported in floating-point literals\n-        let f1: f64 = from_str_hex(\"1p-123\").unwrap();\n-        let f2: f64 = from_str_hex(\"1p-111\").unwrap();\n+        let f1: f64 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n+        let f2: f64 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         assert_eq!(FloatMath::ldexp(1f64, -123), f1);\n         assert_eq!(FloatMath::ldexp(1f64, -111), f2);\n \n@@ -729,8 +700,8 @@ mod tests {\n     fn test_frexp() {\n         // We have to use from_str until base-2 exponents\n         // are supported in floating-point literals\n-        let f1: f64 = from_str_hex(\"1p-123\").unwrap();\n-        let f2: f64 = from_str_hex(\"1p-111\").unwrap();\n+        let f1: f64 = FromStrRadix::from_str_radix(\"1p-123\", 16).unwrap();\n+        let f2: f64 = FromStrRadix::from_str_radix(\"1p-111\", 16).unwrap();\n         let (x1, exp1) = f1.frexp();\n         let (x2, exp2) = f2.frexp();\n         assert_eq!((x1, exp1), (0.5f64, -122));"}]}