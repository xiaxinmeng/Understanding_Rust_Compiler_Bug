{"sha": "022756f81408c70888a6a60179a5df0ba097d862", "node_id": "C_kwDOAAsO6NoAKDAyMjc1NmY4MTQwOGM3MDg4OGE2YTYwMTc5YTVkZjBiYTA5N2Q4NjI", "commit": {"author": {"name": "SaltyKitkat", "email": "954537646@qq.com", "date": "2022-02-13T09:30:10Z"}, "committer": {"name": "SaltyKitkat", "email": "954537646@qq.com", "date": "2022-02-13T09:30:10Z"}, "message": "update stderr messages", "tree": {"sha": "0609fbcbcd82bbe5124949e0bd11550524156deb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0609fbcbcd82bbe5124949e0bd11550524156deb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/022756f81408c70888a6a60179a5df0ba097d862", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmI/5M4ACgkQ+boUO5X/\nbYLw9hAApvFStUCakCJpqfzGFCq/BbrrnsNP87v+rNuy8lTLguKxDdPcegB9ndPs\nHgF6F4rWGcnFrEs0ciJ80kpfHcxaO4cRKrZaqNvKlFNFYgC2uRwNLmbofj5E3rl3\nJTdAGjVzfJjHiLRLghYzpW4+FUOc6L30yOCpaumVplGwM0BXi7ezOgHfIPMbUroD\nM6t73tzXhvrGak1lRj0ZpNOapp7FJGPC4PKQcN6glEirWZh1kKYEGxhoeOCDPrUW\naYOc5i9QvEyGyMtrD/BIkcsGxm6e7zXPy9UehqS+m13CplQ4Tj7Cm3ZGxK5BhtL2\nbcaXSteb5bAY/uGCetWnwVa93oHVjFqedvwFna7jt39aic+4jgJ1Y/tgrdcCy23o\nUiF5ywuN6OciyShyme1C6q4FbLG5bg8hj8yyoswcYAciEtcy02/Zi/fPgvMzHZS5\nYXgEs2FQnIG0EAPDIpg3leKrb++4RbaM+N04l7BU0QcOHVUBkIb4gjVDoQIwF1EX\nsc29tXXsworDBBUj+ATqZvoUMzdIEyg7HiNnkYtLz2kWb86xDcASaD+PqE7OeJi4\nRVWNArtOqorwg0dD6nL0ZrfwG0gOxiK2p5uzfvn4LcVR91TtO2PTIebEV47YZyE6\nPMlbn5WpQZtdWIsyd8reJRrkPAamw/D6UZYjID7N1QpAFwp+qcY=\n=Eg9z\n-----END PGP SIGNATURE-----", "payload": "tree 0609fbcbcd82bbe5124949e0bd11550524156deb\nparent ee87c80a856541eb96332c4067fdfec3740a3db6\nauthor SaltyKitkat <954537646@qq.com> 1644744610 +0800\ncommitter SaltyKitkat <954537646@qq.com> 1644744610 +0800\n\nupdate stderr messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/022756f81408c70888a6a60179a5df0ba097d862", "html_url": "https://github.com/rust-lang/rust/commit/022756f81408c70888a6a60179a5df0ba097d862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/022756f81408c70888a6a60179a5df0ba097d862/comments", "author": {"login": "SaltyKitkat", "id": 56984513, "node_id": "MDQ6VXNlcjU2OTg0NTEz", "avatar_url": "https://avatars.githubusercontent.com/u/56984513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaltyKitkat", "html_url": "https://github.com/SaltyKitkat", "followers_url": "https://api.github.com/users/SaltyKitkat/followers", "following_url": "https://api.github.com/users/SaltyKitkat/following{/other_user}", "gists_url": "https://api.github.com/users/SaltyKitkat/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaltyKitkat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaltyKitkat/subscriptions", "organizations_url": "https://api.github.com/users/SaltyKitkat/orgs", "repos_url": "https://api.github.com/users/SaltyKitkat/repos", "events_url": "https://api.github.com/users/SaltyKitkat/events{/privacy}", "received_events_url": "https://api.github.com/users/SaltyKitkat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SaltyKitkat", "id": 56984513, "node_id": "MDQ6VXNlcjU2OTg0NTEz", "avatar_url": "https://avatars.githubusercontent.com/u/56984513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SaltyKitkat", "html_url": "https://github.com/SaltyKitkat", "followers_url": "https://api.github.com/users/SaltyKitkat/followers", "following_url": "https://api.github.com/users/SaltyKitkat/following{/other_user}", "gists_url": "https://api.github.com/users/SaltyKitkat/gists{/gist_id}", "starred_url": "https://api.github.com/users/SaltyKitkat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SaltyKitkat/subscriptions", "organizations_url": "https://api.github.com/users/SaltyKitkat/orgs", "repos_url": "https://api.github.com/users/SaltyKitkat/repos", "events_url": "https://api.github.com/users/SaltyKitkat/events{/privacy}", "received_events_url": "https://api.github.com/users/SaltyKitkat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee87c80a856541eb96332c4067fdfec3740a3db6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee87c80a856541eb96332c4067fdfec3740a3db6", "html_url": "https://github.com/rust-lang/rust/commit/ee87c80a856541eb96332c4067fdfec3740a3db6"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "678714d0e055a7254bf3bef4dca34a8e928049f6", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -7,10 +7,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         memory access failed: alloc7 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n    |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:13:33\n+  ::: $DIR/out_of_bounds_read.rs:12:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n+   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:12:33\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -26,10 +26,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:14:39\n+  ::: $DIR/out_of_bounds_read.rs:13:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n+   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:13:39\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -45,10 +45,10 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n LL |         unsafe { read(self) }\n    |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/out_of_bounds_read.rs:15:37\n+  ::: $DIR/out_of_bounds_read.rs:14:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n+   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:14:37\n \n error: aborting due to 3 previous errors\n "}, {"sha": "38c38d1ae673281fd05700d62afa1e2731f1baa8", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:41:1\n+  --> $DIR/invalid-union.rs:40:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+  --> $DIR/invalid-union.rs:41:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "6bfa97a2fded7875aeed1c92e698265662037f8e", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-union.rs:41:1\n+  --> $DIR/invalid-union.rs:40:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n@@ -10,7 +10,7 @@ LL | fn main() {\n            }\n \n error: erroneous constant used\n-  --> $DIR/invalid-union.rs:42:25\n+  --> $DIR/invalid-union.rs:41:25\n    |\n LL |     let _: &'static _ = &C;\n    |                         ^^ referenced constant has errors"}, {"sha": "87882449c7342c936f0249ce7caffb6023ac665e", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -7,9 +7,9 @@ LL |           copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |           unable to turn pointer into raw bytes\n    |           inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |           inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |           inside `C` at $DIR/issue-miri-1910.rs:8:5\n+   |           inside `C` at $DIR/issue-miri-1910.rs:7:5\n    |\n-  ::: $DIR/issue-miri-1910.rs:5:1\n+  ::: $DIR/issue-miri-1910.rs:4:1\n    |\n LL | / const C: () = unsafe {\n LL | |     let foo = Some(&42 as *const i32);"}, {"sha": "4d3e7ee2411106da7c7cce2b2bad58f81282f527", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -7,10 +7,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:8:46\n+  ::: $DIR/offset_ub.rs:7:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:8:46\n+   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -21,10 +21,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:9:43\n+  ::: $DIR/offset_ub.rs:8:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:9:43\n+   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -35,10 +35,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:10:45\n+  ::: $DIR/offset_ub.rs:9:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:10:45\n+   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -49,10 +49,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:12:43\n+  ::: $DIR/offset_ub.rs:11:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:12:43\n+   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -63,10 +63,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:13:44\n+  ::: $DIR/offset_ub.rs:12:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:13:44\n+   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -77,10 +77,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:14:56\n+  ::: $DIR/offset_ub.rs:13:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:56\n+   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -91,10 +91,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  overflowing in-bounds pointer arithmetic\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:15:57\n+  ::: $DIR/offset_ub.rs:14:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:15:57\n+   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -105,10 +105,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:16:49\n+  ::: $DIR/offset_ub.rs:15:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n-   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:16:49\n+   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:15:49\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -119,10 +119,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:18:50\n+  ::: $DIR/offset_ub.rs:17:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:18:50\n+   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:17:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -133,10 +133,10 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  pointer arithmetic failed: 0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:19:42\n+  ::: $DIR/offset_ub.rs:18:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:19:42\n+   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:18:42\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -147,10 +147,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: null pointer is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:22:50\n+  ::: $DIR/offset_ub.rs:21:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:22:50\n+   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:21:50\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -161,10 +161,10 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/offset_ub.rs:25:47\n+  ::: $DIR/offset_ub.rs:24:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:25:47\n+   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:24:47\n \n error: aborting due to 12 previous errors\n "}, {"sha": "678ce5d3a35c8aa40065353ca73d7f73427d3b63", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/022756f81408c70888a6a60179a5df0ba097d862/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=022756f81408c70888a6a60179a5df0ba097d862", "patch": "@@ -7,19 +7,19 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  pointer arithmetic failed: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n    |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n-  ::: $DIR/ptr_comparisons.rs:59:34\n+  ::: $DIR/ptr_comparisons.rs:58:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:59:34\n+   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:58:34\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ptr_comparisons.rs:62:33\n+  --> $DIR/ptr_comparisons.rs:61:33\n    |\n LL |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: alloc3 has size $WORD, so pointer to 1000 bytes starting at offset 0 is out-of-bounds\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:66:27\n+  --> $DIR/ptr_comparisons.rs:65:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -31,7 +31,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:71:27\n+  --> $DIR/ptr_comparisons.rs:70:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}