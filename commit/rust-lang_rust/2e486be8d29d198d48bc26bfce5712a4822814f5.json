{"sha": "2e486be8d29d198d48bc26bfce5712a4822814f5", "node_id": "C_kwDOAAsO6NoAKDJlNDg2YmU4ZDI5ZDE5OGQ0OGJjMjZiZmNlNTcxMmE0ODIyODE0ZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T18:35:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T18:35:34Z"}, "message": "Auto merge of #107925 - thomcc:sip13, r=cjgillot\n\nUse SipHash-1-3 instead of SipHash-2-4 for StableHasher\n\nNoticed this, and it seems easy and likely a perf win. IIUC we don't need DDOS resistance (just collision) so we ideally would have an even faster hash, but it's hard to beat this SipHash impl here, since it's been so highly tuned for the interface.\n\nIt wouldn't surprise me if there's some subtle reason changing this sucks, as it's so obvious it seems likely to have been done. Still, SipHash-1-3 seems to still have the guarantees StableHasher should need (and seemingly more), and is clearly less work. So it's worth a shot.\n\nNot fully tested locally.", "tree": {"sha": "b7ae3dd753c0638c2481f4e3822a9889b7030a09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ae3dd753c0638c2481f4e3822a9889b7030a09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e486be8d29d198d48bc26bfce5712a4822814f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e486be8d29d198d48bc26bfce5712a4822814f5", "html_url": "https://github.com/rust-lang/rust/commit/2e486be8d29d198d48bc26bfce5712a4822814f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e486be8d29d198d48bc26bfce5712a4822814f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b676d886ded452125712a304c524c08360f916", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b676d886ded452125712a304c524c08360f916", "html_url": "https://github.com/rust-lang/rust/commit/b2b676d886ded452125712a304c524c08360f916"}, {"sha": "46a3d28e8840f8f7e400e661fc6c544697ad50a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a3d28e8840f8f7e400e661fc6c544697ad50a7", "html_url": "https://github.com/rust-lang/rust/commit/46a3d28e8840f8f7e400e661fc6c544697ad50a7"}], "stats": {"total": 556, "additions": 179, "deletions": 377}, "files": [{"sha": "d849fe0373f28740c986e34571d631e471a31683", "filename": "compiler/rustc_data_structures/src/sip128.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsip128.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -247,7 +247,7 @@ impl SipHasher128 {\n         for i in 0..BUFFER_CAPACITY {\n             let elem = self.buf.get_unchecked(i).assume_init().to_le();\n             self.state.v3 ^= elem;\n-            Sip24Rounds::c_rounds(&mut self.state);\n+            Sip13Rounds::c_rounds(&mut self.state);\n             self.state.v0 ^= elem;\n         }\n \n@@ -327,7 +327,7 @@ impl SipHasher128 {\n         for i in 0..last {\n             let elem = self.buf.get_unchecked(i).assume_init().to_le();\n             self.state.v3 ^= elem;\n-            Sip24Rounds::c_rounds(&mut self.state);\n+            Sip13Rounds::c_rounds(&mut self.state);\n             self.state.v0 ^= elem;\n         }\n \n@@ -340,7 +340,7 @@ impl SipHasher128 {\n         for _ in 0..elems_left {\n             let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();\n             self.state.v3 ^= elem;\n-            Sip24Rounds::c_rounds(&mut self.state);\n+            Sip13Rounds::c_rounds(&mut self.state);\n             self.state.v0 ^= elem;\n             processed += ELEM_SIZE;\n         }\n@@ -368,7 +368,7 @@ impl SipHasher128 {\n         for i in 0..last {\n             let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };\n             state.v3 ^= elem;\n-            Sip24Rounds::c_rounds(&mut state);\n+            Sip13Rounds::c_rounds(&mut state);\n             state.v0 ^= elem;\n         }\n \n@@ -392,15 +392,15 @@ impl SipHasher128 {\n         let b: u64 = ((length as u64 & 0xff) << 56) | elem;\n \n         state.v3 ^= b;\n-        Sip24Rounds::c_rounds(&mut state);\n+        Sip13Rounds::c_rounds(&mut state);\n         state.v0 ^= b;\n \n         state.v2 ^= 0xee;\n-        Sip24Rounds::d_rounds(&mut state);\n+        Sip13Rounds::d_rounds(&mut state);\n         let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;\n \n         state.v1 ^= 0xdd;\n-        Sip24Rounds::d_rounds(&mut state);\n+        Sip13Rounds::d_rounds(&mut state);\n         let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;\n \n         (_0, _1)\n@@ -477,20 +477,18 @@ impl Hasher for SipHasher128 {\n }\n \n #[derive(Debug, Clone, Default)]\n-struct Sip24Rounds;\n+struct Sip13Rounds;\n \n-impl Sip24Rounds {\n+impl Sip13Rounds {\n     #[inline]\n     fn c_rounds(state: &mut State) {\n         compress!(state);\n-        compress!(state);\n     }\n \n     #[inline]\n     fn d_rounds(state: &mut State) {\n         compress!(state);\n         compress!(state);\n         compress!(state);\n-        compress!(state);\n     }\n }"}, {"sha": "cc6d3b0f471525430823bc7f5b776677d4ab58a7", "filename": "compiler/rustc_data_structures/src/sip128/tests.rs", "status": "modified", "additions": 66, "deletions": 259, "changes": 325, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fsip128%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fsip128%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsip128%2Ftests.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -22,269 +22,76 @@ fn hash_with<T: Hash>(mut st: SipHasher128, x: &T) -> (u64, u64) {\n fn hash<T: Hash>(x: &T) -> (u64, u64) {\n     hash_with(SipHasher128::new_with_keys(0, 0), x)\n }\n-\n+#[rustfmt::skip]\n const TEST_VECTOR: [[u8; 16]; 64] = [\n-    [\n-        0xa3, 0x81, 0x7f, 0x04, 0xba, 0x25, 0xa8, 0xe6, 0x6d, 0xf6, 0x72, 0x14, 0xc7, 0x55, 0x02,\n-        0x93,\n-    ],\n-    [\n-        0xda, 0x87, 0xc1, 0xd8, 0x6b, 0x99, 0xaf, 0x44, 0x34, 0x76, 0x59, 0x11, 0x9b, 0x22, 0xfc,\n-        0x45,\n-    ],\n-    [\n-        0x81, 0x77, 0x22, 0x8d, 0xa4, 0xa4, 0x5d, 0xc7, 0xfc, 0xa3, 0x8b, 0xde, 0xf6, 0x0a, 0xff,\n-        0xe4,\n-    ],\n-    [\n-        0x9c, 0x70, 0xb6, 0x0c, 0x52, 0x67, 0xa9, 0x4e, 0x5f, 0x33, 0xb6, 0xb0, 0x29, 0x85, 0xed,\n-        0x51,\n-    ],\n-    [\n-        0xf8, 0x81, 0x64, 0xc1, 0x2d, 0x9c, 0x8f, 0xaf, 0x7d, 0x0f, 0x6e, 0x7c, 0x7b, 0xcd, 0x55,\n-        0x79,\n-    ],\n-    [\n-        0x13, 0x68, 0x87, 0x59, 0x80, 0x77, 0x6f, 0x88, 0x54, 0x52, 0x7a, 0x07, 0x69, 0x0e, 0x96,\n-        0x27,\n-    ],\n-    [\n-        0x14, 0xee, 0xca, 0x33, 0x8b, 0x20, 0x86, 0x13, 0x48, 0x5e, 0xa0, 0x30, 0x8f, 0xd7, 0xa1,\n-        0x5e,\n-    ],\n-    [\n-        0xa1, 0xf1, 0xeb, 0xbe, 0xd8, 0xdb, 0xc1, 0x53, 0xc0, 0xb8, 0x4a, 0xa6, 0x1f, 0xf0, 0x82,\n-        0x39,\n-    ],\n-    [\n-        0x3b, 0x62, 0xa9, 0xba, 0x62, 0x58, 0xf5, 0x61, 0x0f, 0x83, 0xe2, 0x64, 0xf3, 0x14, 0x97,\n-        0xb4,\n-    ],\n-    [\n-        0x26, 0x44, 0x99, 0x06, 0x0a, 0xd9, 0xba, 0xab, 0xc4, 0x7f, 0x8b, 0x02, 0xbb, 0x6d, 0x71,\n-        0xed,\n-    ],\n-    [\n-        0x00, 0x11, 0x0d, 0xc3, 0x78, 0x14, 0x69, 0x56, 0xc9, 0x54, 0x47, 0xd3, 0xf3, 0xd0, 0xfb,\n-        0xba,\n-    ],\n-    [\n-        0x01, 0x51, 0xc5, 0x68, 0x38, 0x6b, 0x66, 0x77, 0xa2, 0xb4, 0xdc, 0x6f, 0x81, 0xe5, 0xdc,\n-        0x18,\n-    ],\n-    [\n-        0xd6, 0x26, 0xb2, 0x66, 0x90, 0x5e, 0xf3, 0x58, 0x82, 0x63, 0x4d, 0xf6, 0x85, 0x32, 0xc1,\n-        0x25,\n-    ],\n-    [\n-        0x98, 0x69, 0xe2, 0x47, 0xe9, 0xc0, 0x8b, 0x10, 0xd0, 0x29, 0x93, 0x4f, 0xc4, 0xb9, 0x52,\n-        0xf7,\n-    ],\n-    [\n-        0x31, 0xfc, 0xef, 0xac, 0x66, 0xd7, 0xde, 0x9c, 0x7e, 0xc7, 0x48, 0x5f, 0xe4, 0x49, 0x49,\n-        0x02,\n-    ],\n-    [\n-        0x54, 0x93, 0xe9, 0x99, 0x33, 0xb0, 0xa8, 0x11, 0x7e, 0x08, 0xec, 0x0f, 0x97, 0xcf, 0xc3,\n-        0xd9,\n-    ],\n-    [\n-        0x6e, 0xe2, 0xa4, 0xca, 0x67, 0xb0, 0x54, 0xbb, 0xfd, 0x33, 0x15, 0xbf, 0x85, 0x23, 0x05,\n-        0x77,\n-    ],\n-    [\n-        0x47, 0x3d, 0x06, 0xe8, 0x73, 0x8d, 0xb8, 0x98, 0x54, 0xc0, 0x66, 0xc4, 0x7a, 0xe4, 0x77,\n-        0x40,\n-    ],\n-    [\n-        0xa4, 0x26, 0xe5, 0xe4, 0x23, 0xbf, 0x48, 0x85, 0x29, 0x4d, 0xa4, 0x81, 0xfe, 0xae, 0xf7,\n-        0x23,\n-    ],\n-    [\n-        0x78, 0x01, 0x77, 0x31, 0xcf, 0x65, 0xfa, 0xb0, 0x74, 0xd5, 0x20, 0x89, 0x52, 0x51, 0x2e,\n-        0xb1,\n-    ],\n-    [\n-        0x9e, 0x25, 0xfc, 0x83, 0x3f, 0x22, 0x90, 0x73, 0x3e, 0x93, 0x44, 0xa5, 0xe8, 0x38, 0x39,\n-        0xeb,\n-    ],\n-    [\n-        0x56, 0x8e, 0x49, 0x5a, 0xbe, 0x52, 0x5a, 0x21, 0x8a, 0x22, 0x14, 0xcd, 0x3e, 0x07, 0x1d,\n-        0x12,\n-    ],\n-    [\n-        0x4a, 0x29, 0xb5, 0x45, 0x52, 0xd1, 0x6b, 0x9a, 0x46, 0x9c, 0x10, 0x52, 0x8e, 0xff, 0x0a,\n-        0xae,\n-    ],\n-    [\n-        0xc9, 0xd1, 0x84, 0xdd, 0xd5, 0xa9, 0xf5, 0xe0, 0xcf, 0x8c, 0xe2, 0x9a, 0x9a, 0xbf, 0x69,\n-        0x1c,\n-    ],\n-    [\n-        0x2d, 0xb4, 0x79, 0xae, 0x78, 0xbd, 0x50, 0xd8, 0x88, 0x2a, 0x8a, 0x17, 0x8a, 0x61, 0x32,\n-        0xad,\n-    ],\n-    [\n-        0x8e, 0xce, 0x5f, 0x04, 0x2d, 0x5e, 0x44, 0x7b, 0x50, 0x51, 0xb9, 0xea, 0xcb, 0x8d, 0x8f,\n-        0x6f,\n-    ],\n-    [\n-        0x9c, 0x0b, 0x53, 0xb4, 0xb3, 0xc3, 0x07, 0xe8, 0x7e, 0xae, 0xe0, 0x86, 0x78, 0x14, 0x1f,\n-        0x66,\n-    ],\n-    [\n-        0xab, 0xf2, 0x48, 0xaf, 0x69, 0xa6, 0xea, 0xe4, 0xbf, 0xd3, 0xeb, 0x2f, 0x12, 0x9e, 0xeb,\n-        0x94,\n-    ],\n-    [\n-        0x06, 0x64, 0xda, 0x16, 0x68, 0x57, 0x4b, 0x88, 0xb9, 0x35, 0xf3, 0x02, 0x73, 0x58, 0xae,\n-        0xf4,\n-    ],\n-    [\n-        0xaa, 0x4b, 0x9d, 0xc4, 0xbf, 0x33, 0x7d, 0xe9, 0x0c, 0xd4, 0xfd, 0x3c, 0x46, 0x7c, 0x6a,\n-        0xb7,\n-    ],\n-    [\n-        0xea, 0x5c, 0x7f, 0x47, 0x1f, 0xaf, 0x6b, 0xde, 0x2b, 0x1a, 0xd7, 0xd4, 0x68, 0x6d, 0x22,\n-        0x87,\n-    ],\n-    [\n-        0x29, 0x39, 0xb0, 0x18, 0x32, 0x23, 0xfa, 0xfc, 0x17, 0x23, 0xde, 0x4f, 0x52, 0xc4, 0x3d,\n-        0x35,\n-    ],\n-    [\n-        0x7c, 0x39, 0x56, 0xca, 0x5e, 0xea, 0xfc, 0x3e, 0x36, 0x3e, 0x9d, 0x55, 0x65, 0x46, 0xeb,\n-        0x68,\n-    ],\n-    [\n-        0x77, 0xc6, 0x07, 0x71, 0x46, 0xf0, 0x1c, 0x32, 0xb6, 0xb6, 0x9d, 0x5f, 0x4e, 0xa9, 0xff,\n-        0xcf,\n-    ],\n-    [\n-        0x37, 0xa6, 0x98, 0x6c, 0xb8, 0x84, 0x7e, 0xdf, 0x09, 0x25, 0xf0, 0xf1, 0x30, 0x9b, 0x54,\n-        0xde,\n-    ],\n-    [\n-        0xa7, 0x05, 0xf0, 0xe6, 0x9d, 0xa9, 0xa8, 0xf9, 0x07, 0x24, 0x1a, 0x2e, 0x92, 0x3c, 0x8c,\n-        0xc8,\n-    ],\n-    [\n-        0x3d, 0xc4, 0x7d, 0x1f, 0x29, 0xc4, 0x48, 0x46, 0x1e, 0x9e, 0x76, 0xed, 0x90, 0x4f, 0x67,\n-        0x11,\n-    ],\n-    [\n-        0x0d, 0x62, 0xbf, 0x01, 0xe6, 0xfc, 0x0e, 0x1a, 0x0d, 0x3c, 0x47, 0x51, 0xc5, 0xd3, 0x69,\n-        0x2b,\n-    ],\n-    [\n-        0x8c, 0x03, 0x46, 0x8b, 0xca, 0x7c, 0x66, 0x9e, 0xe4, 0xfd, 0x5e, 0x08, 0x4b, 0xbe, 0xe7,\n-        0xb5,\n-    ],\n-    [\n-        0x52, 0x8a, 0x5b, 0xb9, 0x3b, 0xaf, 0x2c, 0x9c, 0x44, 0x73, 0xcc, 0xe5, 0xd0, 0xd2, 0x2b,\n-        0xd9,\n-    ],\n-    [\n-        0xdf, 0x6a, 0x30, 0x1e, 0x95, 0xc9, 0x5d, 0xad, 0x97, 0xae, 0x0c, 0xc8, 0xc6, 0x91, 0x3b,\n-        0xd8,\n-    ],\n-    [\n-        0x80, 0x11, 0x89, 0x90, 0x2c, 0x85, 0x7f, 0x39, 0xe7, 0x35, 0x91, 0x28, 0x5e, 0x70, 0xb6,\n-        0xdb,\n-    ],\n-    [\n-        0xe6, 0x17, 0x34, 0x6a, 0xc9, 0xc2, 0x31, 0xbb, 0x36, 0x50, 0xae, 0x34, 0xcc, 0xca, 0x0c,\n-        0x5b,\n-    ],\n-    [\n-        0x27, 0xd9, 0x34, 0x37, 0xef, 0xb7, 0x21, 0xaa, 0x40, 0x18, 0x21, 0xdc, 0xec, 0x5a, 0xdf,\n-        0x89,\n-    ],\n-    [\n-        0x89, 0x23, 0x7d, 0x9d, 0xed, 0x9c, 0x5e, 0x78, 0xd8, 0xb1, 0xc9, 0xb1, 0x66, 0xcc, 0x73,\n-        0x42,\n-    ],\n-    [\n-        0x4a, 0x6d, 0x80, 0x91, 0xbf, 0x5e, 0x7d, 0x65, 0x11, 0x89, 0xfa, 0x94, 0xa2, 0x50, 0xb1,\n-        0x4c,\n-    ],\n-    [\n-        0x0e, 0x33, 0xf9, 0x60, 0x55, 0xe7, 0xae, 0x89, 0x3f, 0xfc, 0x0e, 0x3d, 0xcf, 0x49, 0x29,\n-        0x02,\n-    ],\n-    [\n-        0xe6, 0x1c, 0x43, 0x2b, 0x72, 0x0b, 0x19, 0xd1, 0x8e, 0xc8, 0xd8, 0x4b, 0xdc, 0x63, 0x15,\n-        0x1b,\n-    ],\n-    [\n-        0xf7, 0xe5, 0xae, 0xf5, 0x49, 0xf7, 0x82, 0xcf, 0x37, 0x90, 0x55, 0xa6, 0x08, 0x26, 0x9b,\n-        0x16,\n-    ],\n-    [\n-        0x43, 0x8d, 0x03, 0x0f, 0xd0, 0xb7, 0xa5, 0x4f, 0xa8, 0x37, 0xf2, 0xad, 0x20, 0x1a, 0x64,\n-        0x03,\n-    ],\n-    [\n-        0xa5, 0x90, 0xd3, 0xee, 0x4f, 0xbf, 0x04, 0xe3, 0x24, 0x7e, 0x0d, 0x27, 0xf2, 0x86, 0x42,\n-        0x3f,\n-    ],\n-    [\n-        0x5f, 0xe2, 0xc1, 0xa1, 0x72, 0xfe, 0x93, 0xc4, 0xb1, 0x5c, 0xd3, 0x7c, 0xae, 0xf9, 0xf5,\n-        0x38,\n-    ],\n-    [\n-        0x2c, 0x97, 0x32, 0x5c, 0xbd, 0x06, 0xb3, 0x6e, 0xb2, 0x13, 0x3d, 0xd0, 0x8b, 0x3a, 0x01,\n-        0x7c,\n-    ],\n-    [\n-        0x92, 0xc8, 0x14, 0x22, 0x7a, 0x6b, 0xca, 0x94, 0x9f, 0xf0, 0x65, 0x9f, 0x00, 0x2a, 0xd3,\n-        0x9e,\n-    ],\n-    [\n-        0xdc, 0xe8, 0x50, 0x11, 0x0b, 0xd8, 0x32, 0x8c, 0xfb, 0xd5, 0x08, 0x41, 0xd6, 0x91, 0x1d,\n-        0x87,\n-    ],\n-    [\n-        0x67, 0xf1, 0x49, 0x84, 0xc7, 0xda, 0x79, 0x12, 0x48, 0xe3, 0x2b, 0xb5, 0x92, 0x25, 0x83,\n-        0xda,\n-    ],\n-    [\n-        0x19, 0x38, 0xf2, 0xcf, 0x72, 0xd5, 0x4e, 0xe9, 0x7e, 0x94, 0x16, 0x6f, 0xa9, 0x1d, 0x2a,\n-        0x36,\n-    ],\n-    [\n-        0x74, 0x48, 0x1e, 0x96, 0x46, 0xed, 0x49, 0xfe, 0x0f, 0x62, 0x24, 0x30, 0x16, 0x04, 0x69,\n-        0x8e,\n-    ],\n-    [\n-        0x57, 0xfc, 0xa5, 0xde, 0x98, 0xa9, 0xd6, 0xd8, 0x00, 0x64, 0x38, 0xd0, 0x58, 0x3d, 0x8a,\n-        0x1d,\n-    ],\n-    [\n-        0x9f, 0xec, 0xde, 0x1c, 0xef, 0xdc, 0x1c, 0xbe, 0xd4, 0x76, 0x36, 0x74, 0xd9, 0x57, 0x53,\n-        0x59,\n-    ],\n-    [\n-        0xe3, 0x04, 0x0c, 0x00, 0xeb, 0x28, 0xf1, 0x53, 0x66, 0xca, 0x73, 0xcb, 0xd8, 0x72, 0xe7,\n-        0x40,\n-    ],\n-    [\n-        0x76, 0x97, 0x00, 0x9a, 0x6a, 0x83, 0x1d, 0xfe, 0xcc, 0xa9, 0x1c, 0x59, 0x93, 0x67, 0x0f,\n-        0x7a,\n-    ],\n-    [\n-        0x58, 0x53, 0x54, 0x23, 0x21, 0xf5, 0x67, 0xa0, 0x05, 0xd5, 0x47, 0xa4, 0xf0, 0x47, 0x59,\n-        0xbd,\n-    ],\n-    [\n-        0x51, 0x50, 0xd1, 0x77, 0x2f, 0x50, 0x83, 0x4a, 0x50, 0x3e, 0x06, 0x9a, 0x97, 0x3f, 0xbd,\n-        0x7c,\n-    ],\n+    [0xe7, 0x7e, 0xbc, 0xb2, 0x27, 0x88, 0xa5, 0xbe, 0xfd, 0x62, 0xdb, 0x6a, 0xdd, 0x30, 0x30, 0x01],\n+    [0xfc, 0x6f, 0x37, 0x04, 0x60, 0xd3, 0xed, 0xa8, 0x5e, 0x05, 0x73, 0xcc, 0x2b, 0x2f, 0xf0, 0x63],\n+    [0x75, 0x78, 0x7f, 0x09, 0x05, 0x69, 0x83, 0x9b, 0x85, 0x5b, 0xc9, 0x54, 0x8c, 0x6a, 0xea, 0x95],\n+    [0x6b, 0xc5, 0xcc, 0xfa, 0x1e, 0xdc, 0xf7, 0x9f, 0x48, 0x23, 0x18, 0x77, 0x12, 0xeb, 0xd7, 0x43],\n+    [0x0c, 0x78, 0x4e, 0x71, 0xac, 0x2b, 0x28, 0x5a, 0x9f, 0x8e, 0x92, 0xe7, 0x8f, 0xbf, 0x2c, 0x25],\n+    [0xf3, 0x28, 0xdb, 0x89, 0x34, 0x5b, 0x62, 0x0c, 0x79, 0x52, 0x29, 0xa4, 0x26, 0x95, 0x84, 0x3e],\n+    [0xdc, 0xd0, 0x3d, 0x29, 0xf7, 0x43, 0xe7, 0x10, 0x09, 0x51, 0xb0, 0xe8, 0x39, 0x85, 0xa6, 0xf8],\n+    [0x10, 0x84, 0xb9, 0x23, 0xf2, 0xaa, 0xe0, 0xc3, 0xa6, 0x2f, 0x2e, 0xc8, 0x08, 0x48, 0xab, 0x77],\n+    [0xaa, 0x12, 0xfe, 0xe1, 0xd5, 0xe3, 0xda, 0xb4, 0x72, 0x4f, 0x16, 0xab, 0x35, 0xf9, 0xc7, 0x99],\n+    [0x81, 0xdd, 0xb8, 0x04, 0x2c, 0xf3, 0x39, 0x94, 0xf4, 0x72, 0x0e, 0x00, 0x94, 0x13, 0x7c, 0x42],\n+    [0x4f, 0xaa, 0x54, 0x1d, 0x5d, 0x49, 0x8e, 0x89, 0xba, 0x0e, 0xa4, 0xc3, 0x87, 0xb2, 0x2f, 0xb4],\n+    [0x72, 0x3b, 0x9a, 0xf3, 0x55, 0x44, 0x91, 0xdb, 0xb1, 0xd6, 0x63, 0x3d, 0xfc, 0x6e, 0x0c, 0x4e],\n+    [0xe5, 0x3f, 0x92, 0x85, 0x9e, 0x48, 0x19, 0xa8, 0xdc, 0x06, 0x95, 0x73, 0x9f, 0xea, 0x8c, 0x65],\n+    [0xb2, 0xf8, 0x58, 0xc7, 0xc9, 0xea, 0x80, 0x1d, 0x53, 0xd6, 0x03, 0x59, 0x6d, 0x65, 0x78, 0x44],\n+    [0x87, 0xe7, 0x62, 0x68, 0xdb, 0xc9, 0x22, 0x72, 0x26, 0xb0, 0xca, 0x66, 0x5f, 0x64, 0xe3, 0x78],\n+    [0xc1, 0x7e, 0x55, 0x05, 0xb2, 0xbd, 0x52, 0x6c, 0x29, 0x21, 0xcd, 0xec, 0x1e, 0x7e, 0x01, 0x09],\n+    [0xd0, 0xa8, 0xd9, 0x57, 0x15, 0x51, 0x8e, 0xeb, 0xb5, 0x13, 0xb0, 0xf8, 0x3d, 0x9e, 0x17, 0x93],\n+    [0x23, 0x41, 0x26, 0xf9, 0x3f, 0xbb, 0x66, 0x8d, 0x97, 0x51, 0x12, 0xe8, 0xfe, 0xbd, 0xf7, 0xec],\n+    [0xef, 0x42, 0xf0, 0x3d, 0xb7, 0x8f, 0x70, 0x4d, 0x02, 0x3c, 0x44, 0x9f, 0x16, 0xb7, 0x09, 0x2b],\n+    [0xab, 0xf7, 0x62, 0x38, 0xc2, 0x0a, 0xf1, 0x61, 0xb2, 0x31, 0x4b, 0x4d, 0x55, 0x26, 0xbc, 0xe9],\n+    [0x3c, 0x2c, 0x2f, 0x11, 0xbb, 0x90, 0xcf, 0x0b, 0xe3, 0x35, 0xca, 0x9b, 0x2e, 0x91, 0xe9, 0xb7],\n+    [0x2a, 0x7a, 0x68, 0x0f, 0x22, 0xa0, 0x2a, 0x92, 0xf4, 0x51, 0x49, 0xd2, 0x0f, 0xec, 0xe0, 0xef],\n+    [0xc9, 0xa8, 0xd1, 0x30, 0x23, 0x1d, 0xd4, 0x3e, 0x42, 0xe6, 0x45, 0x69, 0x57, 0xf8, 0x37, 0x79],\n+    [0x1d, 0x12, 0x7b, 0x84, 0x40, 0x5c, 0xea, 0xb9, 0x9f, 0xd8, 0x77, 0x5a, 0x9b, 0xe6, 0xc5, 0x59],\n+    [0x9e, 0x4b, 0xf8, 0x37, 0xbc, 0xfd, 0x92, 0xca, 0xce, 0x09, 0xd2, 0x06, 0x1a, 0x84, 0xd0, 0x4a],\n+    [0x39, 0x03, 0x1a, 0x96, 0x5d, 0x73, 0xb4, 0xaf, 0x5a, 0x27, 0x4d, 0x18, 0xf9, 0x73, 0xb1, 0xd2],\n+    [0x7f, 0x4d, 0x0a, 0x12, 0x09, 0xd6, 0x7e, 0x4e, 0xd0, 0x6f, 0x75, 0x38, 0xe1, 0xcf, 0xad, 0x64],\n+    [0xe6, 0x1e, 0xe2, 0x40, 0xfb, 0xdc, 0xce, 0x38, 0x96, 0x9f, 0x4c, 0xd2, 0x49, 0x27, 0xdd, 0x93],\n+    [0x4c, 0x3b, 0xa2, 0xb3, 0x7b, 0x0f, 0xdd, 0x8c, 0xfa, 0x5e, 0x95, 0xc1, 0x89, 0xb2, 0x94, 0x14],\n+    [0xe0, 0x6f, 0xd4, 0xca, 0x06, 0x6f, 0xec, 0xdd, 0x54, 0x06, 0x8a, 0x5a, 0xd8, 0x89, 0x6f, 0x86],\n+    [0x5c, 0xa8, 0x4c, 0x34, 0x13, 0x9c, 0x65, 0x80, 0xa8, 0x8a, 0xf2, 0x49, 0x90, 0x72, 0x07, 0x06],\n+    [0x42, 0xea, 0x96, 0x1c, 0x5b, 0x3c, 0x85, 0x8b, 0x17, 0xc3, 0xe5, 0x50, 0xdf, 0xa7, 0x90, 0x10],\n+    [0x40, 0x6c, 0x44, 0xde, 0xe6, 0x78, 0x57, 0xb2, 0x94, 0x31, 0x60, 0xf3, 0x0c, 0x74, 0x17, 0xd3],\n+    [0xc5, 0xf5, 0x7b, 0xae, 0x13, 0x20, 0xfc, 0xf4, 0xb4, 0xe8, 0x68, 0xe7, 0x1d, 0x56, 0xc6, 0x6b],\n+    [0x04, 0xbf, 0x73, 0x7a, 0x5b, 0x67, 0x6b, 0xe7, 0xc3, 0xde, 0x05, 0x01, 0x7d, 0xf4, 0xbf, 0xf9],\n+    [0x51, 0x63, 0xc9, 0xc0, 0x3f, 0x19, 0x07, 0xea, 0x10, 0x44, 0xed, 0x5c, 0x30, 0x72, 0x7b, 0x4f],\n+    [0x37, 0xa1, 0x10, 0xf0, 0x02, 0x71, 0x8e, 0xda, 0xd2, 0x4b, 0x3f, 0x9e, 0xe4, 0x53, 0xf1, 0x40],\n+    [0xb9, 0x87, 0x7e, 0x38, 0x1a, 0xed, 0xd3, 0xda, 0x08, 0xc3, 0x3e, 0x75, 0xff, 0x23, 0xac, 0x10],\n+    [0x7c, 0x50, 0x04, 0x00, 0x5e, 0xc5, 0xda, 0x4c, 0x5a, 0xc9, 0x44, 0x0e, 0x5c, 0x72, 0x31, 0x93],\n+    [0x81, 0xb8, 0x24, 0x37, 0x83, 0xdb, 0xc6, 0x46, 0xca, 0x9d, 0x0c, 0xd8, 0x2a, 0xbd, 0xb4, 0x6c],\n+    [0x50, 0x57, 0x20, 0x54, 0x3e, 0xb9, 0xb4, 0x13, 0xd5, 0x0b, 0x3c, 0xfa, 0xd9, 0xee, 0xf9, 0x38],\n+    [0x94, 0x5f, 0x59, 0x4d, 0xe7, 0x24, 0x11, 0xe4, 0xd3, 0x35, 0xbe, 0x87, 0x44, 0x56, 0xd8, 0xf3],\n+    [0x37, 0x92, 0x3b, 0x3e, 0x37, 0x17, 0x77, 0xb2, 0x11, 0x70, 0xbf, 0x9d, 0x7e, 0x62, 0xf6, 0x02],\n+    [0x3a, 0xd4, 0xe7, 0xc8, 0x57, 0x64, 0x96, 0x46, 0x11, 0xeb, 0x0a, 0x6c, 0x4d, 0x62, 0xde, 0x56],\n+    [0xcd, 0x91, 0x39, 0x6c, 0x44, 0xaf, 0x4f, 0x51, 0x85, 0x57, 0x8d, 0x9d, 0xd9, 0x80, 0x3f, 0x0a],\n+    [0xfe, 0x28, 0x15, 0x8e, 0x72, 0x7b, 0x86, 0x8f, 0x39, 0x03, 0xc9, 0xac, 0xda, 0x64, 0xa2, 0x58],\n+    [0x40, 0xcc, 0x10, 0xb8, 0x28, 0x8c, 0xe5, 0xf0, 0xbc, 0x3a, 0xc0, 0xb6, 0x8a, 0x0e, 0xeb, 0xc8],\n+    [0x6f, 0x14, 0x90, 0xf5, 0x40, 0x69, 0x9a, 0x3c, 0xd4, 0x97, 0x44, 0x20, 0xec, 0xc9, 0x27, 0x37],\n+    [0xd5, 0x05, 0xf1, 0xb7, 0x5e, 0x1a, 0x84, 0xa6, 0x03, 0xc4, 0x35, 0x83, 0xb2, 0xed, 0x03, 0x08],\n+    [0x49, 0x15, 0x73, 0xcf, 0xd7, 0x2b, 0xb4, 0x68, 0x2b, 0x7c, 0xa5, 0x88, 0x0e, 0x1c, 0x8d, 0x6f],\n+    [0x3e, 0xd6, 0x9c, 0xfe, 0x45, 0xab, 0x40, 0x3f, 0x2f, 0xd2, 0xad, 0x95, 0x9b, 0xa2, 0x76, 0x66],\n+    [0x8b, 0xe8, 0x39, 0xef, 0x1b, 0x20, 0xb5, 0x7c, 0x83, 0xba, 0x7e, 0xb6, 0xa8, 0xc2, 0x2b, 0x6a],\n+    [0x14, 0x09, 0x18, 0x6a, 0xb4, 0x22, 0x31, 0xfe, 0xde, 0xe1, 0x81, 0x62, 0xcf, 0x1c, 0xb4, 0xca],\n+    [0x2b, 0xf3, 0xcc, 0xc2, 0x4a, 0xb6, 0x72, 0xcf, 0x15, 0x1f, 0xb8, 0xd2, 0xf3, 0xf3, 0x06, 0x9b],\n+    [0xb9, 0xb9, 0x3a, 0x28, 0x82, 0xd6, 0x02, 0x5c, 0xdb, 0x8c, 0x56, 0xfa, 0x13, 0xf7, 0x53, 0x7b],\n+    [0xd9, 0x7c, 0xca, 0x36, 0x94, 0xfb, 0x20, 0x6d, 0xb8, 0xbd, 0x1f, 0x36, 0x50, 0xc3, 0x33, 0x22],\n+    [0x94, 0xec, 0x2e, 0x19, 0xa4, 0x0b, 0xe4, 0x1a, 0xf3, 0x94, 0x0d, 0x6b, 0x30, 0xc4, 0x93, 0x84],\n+    [0x4b, 0x41, 0x60, 0x3f, 0x20, 0x9a, 0x04, 0x5b, 0xe1, 0x40, 0xa3, 0x41, 0xa3, 0xdf, 0xfe, 0x10],\n+    [0x23, 0xfb, 0xcb, 0x30, 0x9f, 0x1c, 0xf0, 0x94, 0x89, 0x07, 0x55, 0xab, 0x1b, 0x42, 0x65, 0x69],\n+    [0xe7, 0xd9, 0xb6, 0x56, 0x90, 0x91, 0x8a, 0x2b, 0x23, 0x2f, 0x2f, 0x5c, 0x12, 0xc8, 0x30, 0x0e],\n+    [0xad, 0xe8, 0x3c, 0xf7, 0xe7, 0xf3, 0x84, 0x7b, 0x36, 0xfa, 0x4b, 0x54, 0xb0, 0x0d, 0xce, 0x61],\n+    [0x06, 0x10, 0xc5, 0xf2, 0xee, 0x57, 0x1c, 0x8a, 0xc8, 0x0c, 0xbf, 0xe5, 0x38, 0xbd, 0xf1, 0xc7],\n+    [0x27, 0x1d, 0x5d, 0x00, 0xfb, 0xdb, 0x5d, 0x15, 0x5d, 0x9d, 0xce, 0xa9, 0x7c, 0xb4, 0x02, 0x18],\n+    [0x4c, 0x58, 0x00, 0xe3, 0x4e, 0xfe, 0x42, 0x6f, 0x07, 0x9f, 0x6b, 0x0a, 0xa7, 0x52, 0x60, 0xad],\n ];\n \n-// Test vector from reference implementation\n #[test]\n-fn test_siphash_2_4_test_vector() {\n+fn test_siphash_1_3_test_vector() {\n     let k0 = 0x_07_06_05_04_03_02_01_00;\n     let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08;\n "}, {"sha": "a98b1bc36261ce1d12646c7efae7f2c8af3990d6", "filename": "compiler/rustc_data_structures/src/stable_hasher/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher%2Ftests.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -39,7 +39,7 @@ fn test_hash_integers() {\n     test_isize.hash(&mut h);\n \n     // This depends on the hashing algorithm. See note at top of file.\n-    let expected = (1784307454142909076, 11471672289340283879);\n+    let expected = (13997337031081104755, 6178945012502239489);\n \n     assert_eq!(h.finalize(), expected);\n }\n@@ -53,7 +53,7 @@ fn test_hash_usize() {\n     test_usize.hash(&mut h);\n \n     // This depends on the hashing algorithm. See note at top of file.\n-    let expected = (5798740672699530587, 11186240177685111648);\n+    let expected = (12037165114281468837, 3094087741167521712);\n \n     assert_eq!(h.finalize(), expected);\n }\n@@ -67,7 +67,7 @@ fn test_hash_isize() {\n     test_isize.hash(&mut h);\n \n     // This depends on the hashing algorithm. See note at top of file.\n-    let expected = (2789913510339652884, 674280939192711005);\n+    let expected = (3979067582695659080, 2322428596355037273);\n \n     assert_eq!(h.finalize(), expected);\n }"}, {"sha": "36f017cf9d606562ce26bbbce141cca9f3bf94a7", "filename": "tests/assembly/asm/global_asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -25,9 +25,9 @@ global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));\n global_asm!(\"call {}\", sym my_func);\n // CHECK: lea rax, [rip + MY_STATIC]\n global_asm!(\"lea rax, [rip + {}]\", sym MY_STATIC);\n-// CHECK: call _RNvCsiubXh4Yz005_10global_asm6foobar\n+// CHECK: call _RNvCsddMtV7nAi4C_10global_asm6foobar\n global_asm!(\"call {}\", sym foobar);\n-// CHECK: _RNvCsiubXh4Yz005_10global_asm6foobar:\n+// CHECK: _RNvCsddMtV7nAi4C_10global_asm6foobar:\n fn foobar() {\n     loop {}\n }"}, {"sha": "fc2badc417c21bc8c886438db2730ab0a1286f1a", "filename": "tests/codegen/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fconsts.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -9,7 +9,7 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @alloc_701ed935fbda2002838d0a2cbbc171e5 = {{.*}}, align 2\n+// CHECK: @alloc_af1f8e8e6f4b341431a1d405e652df2d = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used"}, {"sha": "f1e1dd69b969126f02dff3eb1145a02fd4732f8c", "filename": "tests/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -12,7 +12,7 @@ mod aux_mod;\n include!(\"aux_mod.rs\");\n \n // Here we check that the expansion of the file!() macro is mapped.\n-// CHECK: @alloc_af9d0c7bc6ca3c31bb051d2862714536 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>\n+// CHECK: @alloc_5761061597a97f66e13ef2ff92712c4b = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c\"/the/src/remap_path_prefix/main.rs\" }>\n pub static FILE_PATH: &'static str = file!();\n \n fn main() {"}, {"sha": "f22176a024fc78e92ebaaa75e952f4c2113f1ed8", "filename": "tests/codegen/virtual-function-elimination.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fvirtual-function-elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fcodegen%2Fvirtual-function-elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvirtual-function-elimination.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -82,7 +82,7 @@ fn taking_u(u: &dyn U) -> i32 {\n }\n \n pub fn taking_v(v: &dyn V) -> i32 {\n-    // CHECK: @llvm.type.checked.load({{.*}}, i32 24, metadata !\"NtCsfRpWlKdQPZn_28virtual_function_elimination1V\")\n+    // CHECK: @llvm.type.checked.load({{.*}}, i32 24, metadata !\"NtCs64ITQYi9761_28virtual_function_elimination1V\")\n     v.public_function()\n }\n \n@@ -97,5 +97,5 @@ pub fn main() {\n // CHECK: ![[TYPE0]] = !{i64 0, !\"[[MANGLED_TYPE0]]\"}\n // CHECK: ![[VCALL_VIS0]] = !{i64 2}\n // CHECK: ![[TYPE1]] = !{i64 0, !\"[[MANGLED_TYPE1]]\"}\n-// CHECK: ![[TYPE2]] = !{i64 0, !\"NtCsfRpWlKdQPZn_28virtual_function_elimination1V\"}\n+// CHECK: ![[TYPE2]] = !{i64 0, !\"NtCs64ITQYi9761_28virtual_function_elimination1V\"}\n // CHECK: ![[VCALL_VIS2]] = !{i64 1}"}, {"sha": "d9aa03fee624346fc5c906b1473861d64e2f29c9", "filename": "tests/debuginfo/function-names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Ffunction-names.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -37,7 +37,7 @@\n // Const generic parameter\n // gdb-command:info functions -q function_names::const_generic_fn.*\n // gdb-check:[...]static fn function_names::const_generic_fn_bool<false>();\n-// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#6348c650c7b26618}>();\n+// gdb-check:[...]static fn function_names::const_generic_fn_non_int<{CONST#ad91263f6d2dd96e}>();\n // gdb-check:[...]static fn function_names::const_generic_fn_signed_int<-7>();\n // gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int<14>();\n \n@@ -76,9 +76,9 @@\n // Const generic parameter\n // cdb-command:x a!function_names::const_generic_fn*\n // cdb-check:[...] a!function_names::const_generic_fn_bool<false> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$ad91263f6d2dd96e> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_unsigned_int<14> (void)\n // cdb-check:[...] a!function_names::const_generic_fn_signed_int<-7> (void)\n-// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$6348c650c7b26618> (void)\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "1d2f99cbe68ea4a0d27a434a0827616ba8387e60", "filename": "tests/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -23,7 +23,7 @@ fn foo(_1: T, _2: i32) -> i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure.rs:+1:9: +1:10\n         _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure.rs:+1:13: +1:24\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure[92ba]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure[8f32]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "80274bb7e7ef6c7db963c77ecad2be73881a02be", "filename": "tests/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -26,7 +26,7 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n         _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:13: +4:6\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[96e9]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[f89f]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "b36711f82f40e32fe58e31a107735ab35fcee926", "filename": "tests/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -32,7 +32,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _5 = &_1;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n         _3 = [closure@foo::<T>::{closure#0}] { q: move _4, t: move _5 }; // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_captures[8bc0]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure_captures[63a5]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "04de3e61e5ff81f6b148d18fae783ac62bad7dc8", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -6,21 +6,18 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n-+             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:31:9: 31:28\n-+                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle_generic.rs:23:9: 23:31\n-+                 }\n-+             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n+-                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n +                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "c3ca2d7d42c2b6811e59c2565013dee109c09c49", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -44,7 +44,7 @@\n -     bb1: {\n +         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)]; // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n +                                          // generator\n-+                                          // + def_id: DefId(0:7 ~ inline_generator[ea31]::g::{closure#0})\n++                                          // + def_id: DefId(0:7 ~ inline_generator[e37e]::g::{closure#0})\n +                                          // + substs: [\n +                                          //     bool,\n +                                          //     i32,"}, {"sha": "1da3c8bb7977883103f02991ceb86964b3dca868", "filename": "tests/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n         _1 = [closure@$DIR/issue_76997_inline_scopes_parenting.rs:5:13: 5:16]; // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:13: +1:33\n                                          // closure\n-                                         // + def_id: DefId(0:4 ~ issue_76997_inline_scopes_parenting[bc59]::main::{closure#0})\n+                                         // + def_id: DefId(0:4 ~ issue_76997_inline_scopes_parenting[5cd2]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     extern \"rust-call\" fn(((),)),"}, {"sha": "2324f53566c1f5c96cbe5bda480063bd2c0accc6", "filename": "tests/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[22bb]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[22bb]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_99325.rs:+0:15: +0:15"}, {"sha": "2eb2a0980ce22fd92f53c133ce3df5a90b54d52c", "filename": "tests/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -108,7 +108,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:+11:31: +14:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[4622]::main::{closure#0})\n+                                         // + def_id: DefId(0:14 ~ retag[7654]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'a> extern \"rust-call\" fn((&'a i32,)) -> &'a i32,"}, {"sha": "ed89fa8391d6e8157926eb28cf99d2f855635d06", "filename": "tests/rustdoc-ui/intra-doc/issue-108653-associated-items.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fintra-doc%2Fissue-108653-associated-items.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -33,21 +33,6 @@ help: to link to the associated type, prefix with `type@`\n LL | /// [`type@Self::IDENT2`]\n    |       +++++\n \n-error: `Self::IDENT2` is both an associated constant and an associated type\n-  --> $DIR/issue-108653-associated-items.rs:30:7\n-   |\n-LL | /// [`Self::IDENT2`]\n-   |       ^^^^^^^^^^^^ ambiguous link\n-   |\n-help: to link to the associated constant, prefix with `const@`\n-   |\n-LL | /// [`const@Self::IDENT2`]\n-   |       ++++++\n-help: to link to the associated type, prefix with `type@`\n-   |\n-LL | /// [`type@Self::IDENT2`]\n-   |       +++++\n-\n error: `Self::IDENT` is both an associated function and a variant\n   --> $DIR/issue-108653-associated-items.rs:16:7\n    |\n@@ -63,5 +48,20 @@ help: to link to the variant, prefix with `type@`\n LL | /// [`type@Self::IDENT`]\n    |       +++++\n \n+error: `Self::IDENT2` is both an associated constant and an associated type\n+  --> $DIR/issue-108653-associated-items.rs:30:7\n+   |\n+LL | /// [`Self::IDENT2`]\n+   |       ^^^^^^^^^^^^ ambiguous link\n+   |\n+help: to link to the associated constant, prefix with `const@`\n+   |\n+LL | /// [`const@Self::IDENT2`]\n+   |       ++++++\n+help: to link to the associated type, prefix with `type@`\n+   |\n+LL | /// [`type@Self::IDENT2`]\n+   |       +++++\n+\n error: aborting due to 4 previous errors\n "}, {"sha": "268fae59496ac2a0c2a219021330ff5e5cee2ced", "filename": "tests/rustdoc/issue-25001.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-25001.rs?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -21,14 +21,14 @@ impl Foo<u32> {\n }\n \n impl<T> Bar for Foo<T> {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' 'type Item = T'\n+    // @has - '//*[@id=\"associatedtype.Item-1\"]//h4[@class=\"code-header\"]' 'type Item = T'\n     type Item=T;\n \n     // @has - '//*[@id=\"method.quux\"]//h4[@class=\"code-header\"]' 'fn quux(self)'\n     fn quux(self) {}\n }\n impl<'a, T> Bar for &'a Foo<T> {\n-    // @has - '//*[@id=\"associatedtype.Item-1\"]//h4[@class=\"code-header\"]' \"type Item = &'a T\"\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item = &'a T\"\n     type Item=&'a T;\n \n     // @has - '//*[@id=\"method.quux-1\"]//h4[@class=\"code-header\"]' 'fn quux(self)'"}, {"sha": "ec24527d6c0e5965710a458d3ad876aec96ab515", "filename": "tests/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:11:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[ca29]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:18:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n+   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[ca29]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "429b202f603835edf093bb53229e577816b1f269", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -37,17 +37,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "01a30fd2f4e99598378b9519ef66ad71e7433df1", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking_mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n note: required by a bound in `require_send`\n@@ -33,17 +33,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "429b202f603835edf093bb53229e577816b1f269", "filename": "tests/ui/generator/print/generator-print-verbose-1.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -37,17 +37,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "da4b9595c0ee5a42f017c1fd73de9466be1e2a07", "filename": "tests/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,16 +1,16 @@\n-error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[aeb9]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                  --     ------------ opaque type defined here\n    |                  |\n-   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |\n-help: to declare that `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(2, 'a)])` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n+help: to declare that `Opaque(DefId(0:13 ~ impl_trait_captures[aeb9]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(2, 'a)])` captures `ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "c1cbefac828d63346070e3b196706b9ff9b3cab2", "filename": "tests/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17he9f658e438f1cac0E)\n+error: symbol-name(_ZN5basic4main17h6fc0c8d27b1a289fE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::he9f658e438f1cac0)\n+error: demangling(basic::main::h6fc0c8d27b1a289f)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "17c6d0ce704c4d779bad9c0990055645c7afb8ef", "filename": "tests/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvCsCRATE_HASH_5basic4main)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[b751b4a00e2291d9]::main)\n+error: demangling(basic[a90d658f4748b9d1]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "9c8633742b249c5d72e246d45b4d36594cb60831", "filename": "tests/ui/symbol-names/foreign-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RMCsCRATE_HASH_13foreign_typesINtB<REF>_5CheckNvB<REF>_11For\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<foreign_types[49eeeb51f120b431]::Check<foreign_types[49eeeb51f120b431]::ForeignType>>)\n+error: demangling(<foreign_types[fcdd87e190ad88e3]::Check<foreign_types[fcdd87e190ad88e3]::ForeignType>>)\n   --> $DIR/foreign-types.rs:13:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "a7cc5fc8ed211e32f9a41c7cfea8ec49269a843a", "filename": "tests/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13fooNtB<REF>_3Foo3bar)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::bar)\n+error: demangling(<impl1[d5591eb39db23cbb]::foo::Foo>::bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -28,7 +28,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13barNtNtB<REF>_3foo3Foo3baz)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::baz)\n+error: demangling(<impl1[d5591eb39db23cbb]::foo::Foo>::baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -52,7 +52,7 @@ error: symbol-name(_RNvXNCNvCsCRATE_HASH_5impl14mains_0ARDNtB<REF>_3Foop5AssocFG\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[2c09c4f1c7c8e90c]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[2c09c4f1c7c8e90c]::AutoTrait; 3usize] as impl1[2c09c4f1c7c8e90c]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[d5591eb39db23cbb]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[d5591eb39db23cbb]::AutoTrait; 3usize] as impl1[d5591eb39db23cbb]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "7dd68e6e3a8e2d2edbe33b04c564c6654653ef5d", "filename": "tests/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h13209029be24b923E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hab58a402db4ebf3aE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h13209029be24b923)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hab58a402db4ebf3a)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "77449becc84d283e482a0561e9c3078b8820927f", "filename": "tests/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_11issue_609253fooINtB<REF>_3FooNtNtB<REF>\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[775bc577f14ef671]::foo::Foo<issue_60925[775bc577f14ef671]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[294a1bee3c0c9a2f]::foo::Foo<issue_60925[294a1bee3c0c9a2f]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "fb742f5e44902f15f4f97f58567386ccb5cdf1d5", "filename": "tests/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXINICsCRATE_HASH_11issue_75326s_0pppEINtB<REF>_3FooppENtB\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[e8e253d78520f2a2]::Foo<_, _> as issue_75326[e8e253d78520f2a2]::Iterator2>::next)\n+error: demangling(<issue_75326[189ebc60e18860d7]::Foo<_, _> as issue_75326[189ebc60e18860d7]::Iterator2>::next)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "84f2bce66be1a545947de5a68fd7e270496edfc1", "filename": "tests/ui/symbol-names/trait-objects.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXCsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4cor\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[7260a56bea9f357b]::Bar>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[3c073c57f94bedc2]::Bar>::method)\n   --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -22,7 +22,7 @@ error: symbol-name(_RNvXs_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4c\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Foo>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3c073c57f94bedc2]::Foo>::method)\n   --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -40,7 +40,7 @@ error: symbol-name(_RNvXs0_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Baz>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3c073c57f94bedc2]::Baz>::method)\n   --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "9d467f73d09702148df6581449364efb7a692bab", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_flat[45a6]::main):\n+DefId(0:3 ~ thir_flat[7b97]::main):\n Thir {\n     body_type: Fn(\n         ([]; c_variadic: false)->(),\n@@ -30,7 +30,7 @@ Thir {\n             kind: Scope {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n-                    HirId(DefId(0:3 ~ thir_flat[45a6]::main).2),\n+                    HirId(DefId(0:3 ~ thir_flat[7b97]::main).2),\n                 ),\n                 value: e0,\n             },"}, {"sha": "eea04c0951d39d5666ff7ce0cb2de673aa662e62", "filename": "tests/ui/thir-print/thir-tree-match.stdout", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,10 +1,10 @@\n-DefId(0:16 ~ thir_tree_match[3c9a]::has_match):\n+DefId(0:16 ~ thir_tree_match[fcf8]::has_match):\n params: [\n     Param {\n         ty: Foo\n         ty_span: Some($DIR/thir-tree-match.rs:15:19: 15:22 (#0))\n         self_kind: None\n-        hir_id: Some(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).1))\n+        hir_id: Some(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).1))\n         param: Some( \n             Pat: {\n                 ty: Foo\n@@ -14,7 +14,7 @@ params: [\n                         mutability: Not\n                         name: \"foo\"\n                         mode: ByValue\n-                        var: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                        var: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).2))\n                         ty: Foo\n                         is_primary: true\n                         subpattern: None\n@@ -41,7 +41,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(26)\n-                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).26))\n+                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).26))\n                                 value:\n                                     Expr {\n                                         ty: bool\n@@ -63,7 +63,7 @@ body:\n                                                         kind: \n                                                             Scope {\n                                                                 region_scope: Node(3)\n-                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).3))\n+                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).3))\n                                                                 value:\n                                                                     Expr {\n                                                                         ty: bool\n@@ -79,15 +79,15 @@ body:\n                                                                                         kind: \n                                                                                             Scope {\n                                                                                                 region_scope: Node(4)\n-                                                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).4))\n+                                                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).4))\n                                                                                                 value:\n                                                                                                     Expr {\n                                                                                                         ty: Foo\n                                                                                                         temp_lifetime: Some(Node(26))\n                                                                                                         span: $DIR/thir-tree-match.rs:16:11: 16:14 (#0)\n                                                                                                         kind: \n                                                                                                             VarRef {\n-                                                                                                                id: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                                                                                                                id: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).2))\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n@@ -102,10 +102,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 0\n                                                                                                         subpatterns: [\n@@ -116,10 +116,10 @@ body:\n                                                                                                                     Variant {\n                                                                                                                         adt_def: \n                                                                                                                             AdtDef {\n-                                                                                                                                did: DefId(0:3 ~ thir_tree_match[3c9a]::Bar)\n-                                                                                                                                variants: [VariantDef { def_id: DefId(0:4 ~ thir_tree_match[3c9a]::Bar::First), ctor: Some((Const, DefId(0:5 ~ thir_tree_match[3c9a]::Bar::First::{constructor#0}))), name: \"First\", discr: Relative(0), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:6 ~ thir_tree_match[3c9a]::Bar::Second), ctor: Some((Const, DefId(0:7 ~ thir_tree_match[3c9a]::Bar::Second::{constructor#0}))), name: \"Second\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:8 ~ thir_tree_match[3c9a]::Bar::Third), ctor: Some((Const, DefId(0:9 ~ thir_tree_match[3c9a]::Bar::Third::{constructor#0}))), name: \"Third\", discr: Relative(2), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                                did: DefId(0:3 ~ thir_tree_match[fcf8]::Bar)\n+                                                                                                                                variants: [VariantDef { def_id: DefId(0:4 ~ thir_tree_match[fcf8]::Bar::First), ctor: Some((Const, DefId(0:5 ~ thir_tree_match[fcf8]::Bar::First::{constructor#0}))), name: \"First\", discr: Relative(0), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:6 ~ thir_tree_match[fcf8]::Bar::Second), ctor: Some((Const, DefId(0:7 ~ thir_tree_match[fcf8]::Bar::Second::{constructor#0}))), name: \"Second\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:8 ~ thir_tree_match[fcf8]::Bar::Third), ctor: Some((Const, DefId(0:9 ~ thir_tree_match[fcf8]::Bar::Third::{constructor#0}))), name: \"Third\", discr: Relative(2), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                                 flags: IS_ENUM\n-                                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3125160937860410723 }\n+                                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 10333377570083945360 }\n                                                                                                                         substs: []\n                                                                                                                         variant_index: 0\n                                                                                                                         subpatterns: []\n@@ -148,7 +148,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(13)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).13))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).13))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -162,7 +162,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).12))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).12))\n                                                                                         scope: Node(12)\n                                                                                         span: $DIR/thir-tree-match.rs:17:9: 17:40 (#0)\n                                                                                     }\n@@ -175,10 +175,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 0\n                                                                                                         subpatterns: [\n@@ -211,7 +211,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(19)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).19))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).19))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -225,7 +225,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).18))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).18))\n                                                                                         scope: Node(18)\n                                                                                         span: $DIR/thir-tree-match.rs:18:9: 18:32 (#0)\n                                                                                     }\n@@ -238,10 +238,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 1\n                                                                                                         subpatterns: []\n@@ -266,7 +266,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(24)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).24))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).24))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -280,7 +280,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).23))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).23))\n                                                                                         scope: Node(23)\n                                                                                         span: $DIR/thir-tree-match.rs:19:9: 19:28 (#0)\n                                                                                     }\n@@ -297,7 +297,7 @@ body:\n     }\n \n \n-DefId(0:17 ~ thir_tree_match[3c9a]::main):\n+DefId(0:17 ~ thir_tree_match[fcf8]::main):\n params: [\n ]\n body:\n@@ -317,7 +317,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(2)\n-                                lint_level: Explicit(HirId(DefId(0:17 ~ thir_tree_match[3c9a]::main).2))\n+                                lint_level: Explicit(HirId(DefId(0:17 ~ thir_tree_match[fcf8]::main).2))\n                                 value:\n                                     Expr {\n                                         ty: ()"}, {"sha": "1b478dbef993fcb27afbd8636d2c91320415ea4b", "filename": "tests/ui/thir-print/thir-tree.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree.stdout?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_tree[8f1d]::main):\n+DefId(0:3 ~ thir_tree[7aaa]::main):\n params: [\n ]\n body:\n@@ -18,7 +18,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(2)\n-                                lint_level: Explicit(HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2))\n+                                lint_level: Explicit(HirId(DefId(0:3 ~ thir_tree[7aaa]::main).2))\n                                 value:\n                                     Expr {\n                                         ty: ()"}, {"sha": "ce409f627be208354eaaa8850f0504bac5e86cc8", "filename": "tests/ui/where-clauses/higher-ranked-fn-type.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e486be8d29d198d48bc26bfce5712a4822814f5/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr?ref=2e486be8d29d198d48bc26bfce5712a4822814f5", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b))> fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ()): Foo` is not satisfied\n+error[E0277]: the trait bound `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b))> fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b) }) ()): Foo` is not satisfied\n   --> $DIR/higher-ranked-fn-type.rs:20:5\n    |\n LL |     called()\n-   |     ^^^^^^ the trait `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b))> Foo` is not implemented for `fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ())`\n+   |     ^^^^^^ the trait `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b))> Foo` is not implemented for `fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b) }) ())`\n    |\n note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25"}]}