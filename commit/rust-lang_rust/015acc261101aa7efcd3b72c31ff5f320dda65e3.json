{"sha": "015acc261101aa7efcd3b72c31ff5f320dda65e3", "node_id": "C_kwDOAAsO6NoAKDAxNWFjYzI2MTEwMWFhN2VmY2QzYjcyYzMxZmY1ZjMyMGRkYTY1ZTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T00:57:13Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T01:34:03Z"}, "message": "Provide RHS type hint when reporting operator error", "tree": {"sha": "c3bca8b517b21b16291149f6d2eae0198eaef660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3bca8b517b21b16291149f6d2eae0198eaef660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015acc261101aa7efcd3b72c31ff5f320dda65e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015acc261101aa7efcd3b72c31ff5f320dda65e3", "html_url": "https://github.com/rust-lang/rust/commit/015acc261101aa7efcd3b72c31ff5f320dda65e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015acc261101aa7efcd3b72c31ff5f320dda65e3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d80dd983d4048f0a480a76421cf30773d2a9081", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d80dd983d4048f0a480a76421cf30773d2a9081", "html_url": "https://github.com/rust-lang/rust/commit/3d80dd983d4048f0a480a76421cf30773d2a9081"}], "stats": {"total": 195, "additions": 137, "deletions": 58}, "files": [{"sha": "3f7f2d6e1e11856b5bc9fe64ca5382f8f983df70", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -776,6 +776,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Ok(method)\n             }\n             None => {\n+                // This path may do some inference, so make sure we've really\n+                // doomed compilation so as to not accidentally stabilize new\n+                // inference or something here...\n+                self.tcx.sess.delay_span_bug(span, \"this path really should be doomed...\");\n+                // Guide inference for the RHS expression if it's provided --\n+                // this will allow us to better error reporting, at the expense\n+                // of making some error messages a bit more specific.\n+                if let Some((rhs_expr, rhs_ty)) = opt_rhs\n+                    && rhs_ty.is_ty_var()\n+                {\n+                    self.check_expr_coercible_to_type(rhs_expr, rhs_ty, None);\n+                }\n+\n                 let (obligation, _) =\n                     self.obligation_for_method(cause, trait_did, lhs_ty, Some(input_types));\n                 // FIXME: This should potentially just add the obligation to the `FnCtxt`"}, {"sha": "a77c4c5aabcddac8a560cc0b8df6f3ad7339ed79", "filename": "tests/ui/binop/eq-arr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-arr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-arr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Feq-arr.rs?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    struct X;\n+    //~^ HELP consider annotating `X` with `#[derive(PartialEq)]`\n+    let xs = [X, X, X];\n+    let eq = xs == [X, X, X];\n+    //~^ ERROR binary operation `==` cannot be applied to type `[X; 3]`\n+}"}, {"sha": "a22f8e3ab0c7923fccdfa2218e4f1a4609abbc32", "filename": "tests/ui/binop/eq-arr.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-arr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-arr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Feq-arr.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -0,0 +1,22 @@\n+error[E0369]: binary operation `==` cannot be applied to type `[X; 3]`\n+  --> $DIR/eq-arr.rs:5:17\n+   |\n+LL |     let eq = xs == [X, X, X];\n+   |              -- ^^ --------- [X; 3]\n+   |              |\n+   |              [X; 3]\n+   |\n+note: an implementation of `PartialEq` might be missing for `X`\n+  --> $DIR/eq-arr.rs:2:5\n+   |\n+LL |     struct X;\n+   |     ^^^^^^^^ must implement `PartialEq`\n+help: consider annotating `X` with `#[derive(PartialEq)]`\n+   |\n+LL +     #[derive(PartialEq)]\n+LL |     struct X;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "17ce8df8564253b7757a25db2b870716fe793290", "filename": "tests/ui/binop/eq-vec.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Feq-vec.rs?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    #[derive(Debug)]\n+    enum Foo {\n+        //~^ HELP consider annotating `Foo` with `#[derive(PartialEq)]`\n+        Bar,\n+        Qux,\n+    }\n+\n+    let vec1 = vec![Foo::Bar, Foo::Qux];\n+    let vec2 = vec![Foo::Bar, Foo::Qux];\n+    assert_eq!(vec1, vec2);\n+    //~^ ERROR binary operation `==` cannot be applied to type `Vec<Foo>`\n+}"}, {"sha": "0a98cddfe05a996f87f46abe316bc2a1939d5227", "filename": "tests/ui/binop/eq-vec.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Feq-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Feq-vec.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -0,0 +1,24 @@\n+error[E0369]: binary operation `==` cannot be applied to type `Vec<Foo>`\n+  --> $DIR/eq-vec.rs:11:5\n+   |\n+LL |     assert_eq!(vec1, vec2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     Vec<Foo>\n+   |     Vec<Foo>\n+   |\n+note: an implementation of `PartialEq` might be missing for `Foo`\n+  --> $DIR/eq-vec.rs:3:5\n+   |\n+LL |     enum Foo {\n+   |     ^^^^^^^^ must implement `PartialEq`\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `Foo` with `#[derive(PartialEq)]`\n+   |\n+LL +     #[derive(PartialEq)]\n+LL |     enum Foo {\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "6c98edd3af8e8032f29c8a413d019b79983760b6", "filename": "tests/ui/binop/issue-28837.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fissue-28837.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |     a + a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Add<_>` might be missing for `A`\n+note: an implementation of `Add` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Add<_>`\n+   | ^^^^^^^^ must implement `Add`\n note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n@@ -22,11 +22,11 @@ LL |     a - a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Sub<_>` might be missing for `A`\n+note: an implementation of `Sub` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Sub<_>`\n+   | ^^^^^^^^ must implement `Sub`\n note: the trait `Sub` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n@@ -38,11 +38,11 @@ LL |     a * a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Mul<_>` might be missing for `A`\n+note: an implementation of `Mul` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Mul<_>`\n+   | ^^^^^^^^ must implement `Mul`\n note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n@@ -54,11 +54,11 @@ LL |     a / a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Div<_>` might be missing for `A`\n+note: an implementation of `Div` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Div<_>`\n+   | ^^^^^^^^ must implement `Div`\n note: the trait `Div` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n@@ -70,11 +70,11 @@ LL |     a % a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Rem<_>` might be missing for `A`\n+note: an implementation of `Rem` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Rem<_>`\n+   | ^^^^^^^^ must implement `Rem`\n note: the trait `Rem` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n@@ -86,11 +86,11 @@ LL |     a & a;\n    |     |\n    |     A\n    |\n-note: an implementation of `BitAnd<_>` might be missing for `A`\n+note: an implementation of `BitAnd` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `BitAnd<_>`\n+   | ^^^^^^^^ must implement `BitAnd`\n note: the trait `BitAnd` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n@@ -102,11 +102,11 @@ LL |     a | a;\n    |     |\n    |     A\n    |\n-note: an implementation of `BitOr<_>` might be missing for `A`\n+note: an implementation of `BitOr` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `BitOr<_>`\n+   | ^^^^^^^^ must implement `BitOr`\n note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n@@ -118,11 +118,11 @@ LL |     a << a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Shl<_>` might be missing for `A`\n+note: an implementation of `Shl` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Shl<_>`\n+   | ^^^^^^^^ must implement `Shl`\n note: the trait `Shl` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n@@ -134,11 +134,11 @@ LL |     a >> a;\n    |     |\n    |     A\n    |\n-note: an implementation of `Shr<_>` might be missing for `A`\n+note: an implementation of `Shr` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `Shr<_>`\n+   | ^^^^^^^^ must implement `Shr`\n note: the trait `Shr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n \n@@ -150,11 +150,11 @@ LL |     a == a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `A`\n+note: an implementation of `PartialEq` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^ must implement `PartialEq`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n LL + #[derive(PartialEq)]\n@@ -169,11 +169,11 @@ LL |     a != a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `A`\n+note: an implementation of `PartialEq` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^ must implement `PartialEq`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n LL + #[derive(PartialEq)]\n@@ -188,11 +188,11 @@ LL |     a < a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialOrd<_>` might be missing for `A`\n+note: an implementation of `PartialOrd` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL + #[derive(PartialEq, PartialOrd)]\n@@ -207,11 +207,11 @@ LL |     a <= a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialOrd<_>` might be missing for `A`\n+note: an implementation of `PartialOrd` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL + #[derive(PartialEq, PartialOrd)]\n@@ -226,11 +226,11 @@ LL |     a > a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialOrd<_>` might be missing for `A`\n+note: an implementation of `PartialOrd` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL + #[derive(PartialEq, PartialOrd)]\n@@ -245,11 +245,11 @@ LL |     a >= a;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialOrd<_>` might be missing for `A`\n+note: an implementation of `PartialOrd` might be missing for `A`\n   --> $DIR/issue-28837.rs:1:1\n    |\n LL | struct A;\n-   | ^^^^^^^^ must implement `PartialOrd<_>`\n+   | ^^^^^^^^ must implement `PartialOrd`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n LL + #[derive(PartialEq, PartialOrd)]"}, {"sha": "cfa78a41dbf08a8047f5704555060f6ab0595b00", "filename": "tests/ui/binop/issue-3820.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fbinop%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fissue-3820.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |     let w = u * 3;\n    |             |\n    |             Thing\n    |\n-note: an implementation of `Mul<_>` might be missing for `Thing`\n+note: an implementation of `Mul<{integer}>` might be missing for `Thing`\n   --> $DIR/issue-3820.rs:1:1\n    |\n LL | struct Thing {\n-   | ^^^^^^^^^^^^ must implement `Mul<_>`\n+   | ^^^^^^^^^^^^ must implement `Mul<{integer}>`\n note: the trait `Mul` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n "}, {"sha": "e3b17431f89af3d6fa481a3a19a8b4769109446b", "filename": "tests/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(PartialEq)]\n LL |      x: Error\n    |      ^^^^^^^^\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `Error`\n+note: an implementation of `PartialEq` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "d1631732a34f488adaedd3a455a2242ae2aa86be", "filename": "tests/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(PartialEq)]\n LL |      Error\n    |      ^^^^^\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `Error`\n+note: an implementation of `PartialEq` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "ab6c6951fc634bba8a039cc73bbe4e5666b6a4a6", "filename": "tests/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `Error`\n+note: an implementation of `PartialEq` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "865ecad0e8e6d2556f8b120df40f4d1758be6ccb", "filename": "tests/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `Error`\n+note: an implementation of `PartialEq` might be missing for `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:4:1\n    |\n LL | struct Error;\n-   | ^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^ must implement `PartialEq`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |"}, {"sha": "ab99ba9fab5a693ff3bdc5120b9770d217c44ca0", "filename": "tests/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -7,11 +7,11 @@ LL | struct E {\n LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `NoCloneOrEq`\n+note: an implementation of `PartialEq` might be missing for `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:1:1\n    |\n LL | struct NoCloneOrEq;\n-   | ^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^^^^^^^^ must implement `PartialEq`\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NoCloneOrEq` with `#[derive(PartialEq)]`\n    |"}, {"sha": "f556330070cb1dcae9379829587d50edd08155b8", "filename": "tests/ui/destructuring-assignment/note-unsupported.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdestructuring-assignment%2Fnote-unsupported.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -44,11 +44,11 @@ LL |     S { x: a, y: b } += s;\n    |     |\n    |     cannot use `+=` on type `S`\n    |\n-note: an implementation of `AddAssign<_>` might be missing for `S`\n+note: an implementation of `AddAssign` might be missing for `S`\n   --> $DIR/note-unsupported.rs:1:1\n    |\n LL | struct S { x: u8, y: u8 }\n-   | ^^^^^^^^ must implement `AddAssign<_>`\n+   | ^^^^^^^^ must implement `AddAssign`\n note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n "}, {"sha": "8a0e17a409a5fe53be9abb53073f4ed484dc2976", "filename": "tests/ui/issues/issue-62375.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fissues%2Fissue-62375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fissues%2Fissue-62375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-62375.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |     a == A::Value;\n    |     |\n    |     A\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `A`\n+note: an implementation of `PartialEq<fn(()) -> A {A::Value}>` might be missing for `A`\n   --> $DIR/issue-62375.rs:1:1\n    |\n LL | enum A {\n-   | ^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^ must implement `PartialEq<fn(()) -> A {A::Value}>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n LL + #[derive(PartialEq)]"}, {"sha": "66a85c4656af536677c42ccd9673b316b8b88da6", "filename": "tests/ui/mismatched_types/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fassignment-operator-unimplemented.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |   a += *b;\n    |   |\n    |   cannot use `+=` on type `Foo`\n    |\n-note: an implementation of `AddAssign<_>` might be missing for `Foo`\n+note: an implementation of `AddAssign` might be missing for `Foo`\n   --> $DIR/assignment-operator-unimplemented.rs:1:1\n    |\n LL | struct Foo;\n-   | ^^^^^^^^^^ must implement `AddAssign<_>`\n+   | ^^^^^^^^^^ must implement `AddAssign`\n note: the trait `AddAssign` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n "}, {"sha": "604bba417e6cc0c4698f2a947e42c86ad9cf2dc2", "filename": "tests/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -30,11 +30,11 @@ LL |     let _ = |A | B: E| ();\n    |                  |\n    |                  E\n    |\n-note: an implementation of `BitOr<_>` might be missing for `E`\n+note: an implementation of `BitOr<()>` might be missing for `E`\n   --> $DIR/or-patterns-syntactic-fail.rs:6:1\n    |\n LL | enum E { A, B }\n-   | ^^^^^^ must implement `BitOr<_>`\n+   | ^^^^^^ must implement `BitOr<()>`\n note: the trait `BitOr` must be implemented\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n "}, {"sha": "bae936392717414e6adf33e70115c12928083a1b", "filename": "tests/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-39018.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -21,11 +21,11 @@ LL |     let y = World::Hello + World::Goodbye;\n    |             |\n    |             World\n    |\n-note: an implementation of `Add<_>` might be missing for `World`\n+note: an implementation of `Add` might be missing for `World`\n   --> $DIR/issue-39018.rs:15:1\n    |\n LL | enum World {\n-   | ^^^^^^^^^^ must implement `Add<_>`\n+   | ^^^^^^^^^^ must implement `Add`\n note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n "}, {"sha": "570afcea6434baba4803a1b970656475b79895a2", "filename": "tests/ui/suggestions/invalid-bin-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |     let _ = s == t;\n    |             |\n    |             S<T>\n    |\n-note: an implementation of `PartialEq<_>` might be missing for `S<T>`\n+note: an implementation of `PartialEq` might be missing for `S<T>`\n   --> $DIR/invalid-bin-op.rs:5:1\n    |\n LL | struct S<T>(T);\n-   | ^^^^^^^^^^^ must implement `PartialEq<_>`\n+   | ^^^^^^^^^^^ must implement `PartialEq`\n help: consider annotating `S<T>` with `#[derive(PartialEq)]`\n    |\n LL + #[derive(PartialEq)]"}, {"sha": "3c7d42888d83342fe2625886cb127d7e67843ba8", "filename": "tests/ui/suggestions/restrict-type-not-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Frestrict-type-not-param.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -6,11 +6,11 @@ LL |     a + b\n    |     |\n    |     Wrapper<T>\n    |\n-note: an implementation of `Add<_>` might be missing for `Wrapper<T>`\n+note: an implementation of `Add<T>` might be missing for `Wrapper<T>`\n   --> $DIR/restrict-type-not-param.rs:3:1\n    |\n LL | struct Wrapper<T>(T);\n-   | ^^^^^^^^^^^^^^^^^ must implement `Add<_>`\n+   | ^^^^^^^^^^^^^^^^^ must implement `Add<T>`\n note: the trait `Add` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement"}, {"sha": "0b76ba8eb7e837245a28f7ee7580b02829d57a90", "filename": "tests/ui/type/type-unsatisfiable.usage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/015acc261101aa7efcd3b72c31ff5f320dda65e3/tests%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-unsatisfiable.usage.stderr?ref=015acc261101aa7efcd3b72c31ff5f320dda65e3", "patch": "@@ -1,8 +1,8 @@\n-error[E0369]: cannot subtract `(dyn Vector2<ScalarType = i32> + 'static)` from `dyn Vector2<ScalarType = i32>`\n+error[E0369]: cannot subtract `dyn Vector2<ScalarType = i32>` from `dyn Vector2<ScalarType = i32>`\n   --> $DIR/type-unsatisfiable.rs:57:20\n    |\n LL |     let bar = *hey - *word;\n-   |               ---- ^ ----- (dyn Vector2<ScalarType = i32> + 'static)\n+   |               ---- ^ ----- dyn Vector2<ScalarType = i32>\n    |               |\n    |               dyn Vector2<ScalarType = i32>\n "}]}