{"sha": "2420d82a7c55432071a2094dac29dfe96f303dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjBkODJhN2M1NTQzMjA3MWEyMDk0ZGFjMjlkZmU5NmYzMDNkZmU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-03T20:21:53Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T18:37:38Z"}, "message": "Add a test for match scopes", "tree": {"sha": "4c60eb5aa91f9953040d7b5e4515ae3de3973e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c60eb5aa91f9953040d7b5e4515ae3de3973e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2420d82a7c55432071a2094dac29dfe96f303dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2420d82a7c55432071a2094dac29dfe96f303dfe", "html_url": "https://github.com/rust-lang/rust/commit/2420d82a7c55432071a2094dac29dfe96f303dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2420d82a7c55432071a2094dac29dfe96f303dfe/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abab9efbdb82b76f418115462311f8852600c9a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/abab9efbdb82b76f418115462311f8852600c9a2", "html_url": "https://github.com/rust-lang/rust/commit/abab9efbdb82b76f418115462311f8852600c9a2"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "0f026b8a08dfa9fe97c7b8018f9c0e025b3c2d15", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/2420d82a7c55432071a2094dac29dfe96f303dfe/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420d82a7c55432071a2094dac29dfe96f303dfe/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=2420d82a7c55432071a2094dac29dfe96f303dfe", "patch": "@@ -0,0 +1,245 @@\n+// Test that StorageDead and Drops are generated properly for bindings in\n+// matches:\n+// * The MIR should only contain a single drop of `s` and `t`: at the end\n+//   of their respective arms.\n+// * StorageDead and StorageLive statements are correctly matched up on\n+//   non-unwind paths.\n+// * The visibility scopes of the match arms should be disjoint, and contain.\n+//   all of the bindings for that scope.\n+// * No drop flags are used.\n+\n+#![feature(nll, bind_by_move_pattern_guards)]\n+\n+fn complicated_match(cond: bool, items: (bool, bool, String)) -> i32 {\n+    match items {\n+        (false, a, s) | (a, false, s) if if cond { return 3 } else { a } => 1,\n+        (true, b, t) | (false, b, t) => 2,\n+    }\n+}\n+\n+const CASES: &[(bool, bool, bool, i32)] = &[\n+    (false, false, false, 2),\n+    (false, false, true, 1),\n+    (false, true, false, 1),\n+    (false, true, true, 2),\n+    (true, false, false, 3),\n+    (true, false, true, 3),\n+    (true, true, false, 3),\n+    (true, true, true, 2),\n+];\n+\n+fn main() {\n+    for &(cond, items_1, items_2, result) in CASES {\n+        assert_eq!(\n+            complicated_match(cond, (items_1, items_2, String::new())),\n+            result,\n+        );\n+    }\n+}\n+\n+// END RUST SOURCE\n+// START rustc.complicated_match.SimplifyCfg-initial.after.mir\n+// let mut _0: i32;\n+// let mut _3: &bool;                   // Temp for fake borrow of `items.0`\n+// let mut _4: &bool;                   // Temp for fake borrow of `items.1`\n+// let _5: bool;                    // `a` in arm\n+// let _6: &bool;                   // `a` in guard\n+// let _7: std::string::String;     // `s` in arm\n+// let _8: &std::string::String;    // `s` in guard\n+// let mut _9: bool;                    // `if cond { return 3 } else { a }`\n+// let mut _10: bool;                   // `cond`\n+// let mut _11: !;                      // `return 3`\n+// let mut _12: bool;                   // `if cond { return 3 } else { a }`\n+// let mut _13: bool;                   // `cond`\n+// let mut _14: !;                      // `return 3`\n+// let _15: bool;                   // `b`\n+// let _16: std::string::String;    // `t`\n+// scope 1 {\n+// }\n+// scope 2 {\n+// }\n+// bb0: {\n+//     FakeRead(ForMatchedPlace, _2);\n+//     switchInt((_2.0: bool)) -> [false: bb2, otherwise: bb7];\n+// }\n+// bb1 (cleanup): {\n+//     resume;\n+// }\n+// bb2: {\n+//     falseEdges -> [real: bb10, imaginary: bb3];\n+// }\n+// bb3: {\n+//     falseEdges -> [real: bb21, imaginary: bb4];\n+// }\n+// bb4: {\n+//     falseEdges -> [real: bb31, imaginary: bb5];\n+// }\n+// bb5: {\n+//     falseEdges -> [real: bb32, imaginary: bb6];\n+// }\n+// bb6: {\n+//     unreachable;\n+// }\n+// bb7: {\n+//     switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb8];\n+// }\n+// bb8: {\n+//     switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb4];\n+// }\n+// bb9: {                               // arm 1\n+//     _0 = const 1i32;\n+//     drop(_7) -> [return: bb29, unwind: bb16];\n+// }\n+// bb10: {                              // guard - first time\n+//     StorageLive(_6);\n+//     _6 = &(_2.1: bool);\n+//     StorageLive(_8);\n+//     _8 = &(_2.2: std::string::String);\n+//     _3 = &shallow (_2.0: bool);\n+//     _4 = &shallow (_2.1: bool);\n+//     StorageLive(_9);\n+//     StorageLive(_10);\n+//     _10 = _1;\n+//     FakeRead(ForMatchedPlace, _10);\n+//     switchInt(_10) -> [false: bb12, otherwise: bb11];\n+// }\n+// bb11: {\n+//     falseEdges -> [real: bb14, imaginary: bb12];\n+// }\n+// bb12: {\n+//     falseEdges -> [real: bb18, imaginary: bb13];\n+// }\n+// bb13: {\n+//     unreachable;\n+// }\n+// bb14: {                              // `return 3` - first time\n+//     _0 = const 3i32;\n+//     StorageDead(_10);\n+//     StorageDead(_9);\n+//     StorageDead(_8);\n+//     StorageDead(_6);\n+//     goto -> bb17;\n+// }\n+// bb15: {\n+//     return;\n+// }\n+// bb16 (cleanup): {\n+//     drop(_2) -> bb1;\n+// }\n+// bb17: {\n+//     drop(_2) -> [return: bb15, unwind: bb1];\n+// }\n+// bb18: {                              // `else` block - first time\n+//     _9 = (*_6);\n+//     StorageDead(_10);\n+//     FakeRead(ForMatchGuard, _3);\n+//     FakeRead(ForMatchGuard, _4);\n+//     FakeRead(ForGuardBinding, _6);\n+//     FakeRead(ForGuardBinding, _8);\n+//     switchInt(move _9) -> [false: bb20, otherwise: bb19];\n+// }\n+// bb19: {\n+//     StorageDead(_9);\n+//     StorageLive(_5);\n+//     _5 = (_2.1: bool);\n+//     StorageLive(_7);\n+//     _7 = move (_2.2: std::string::String);\n+//     goto -> bb9;\n+// }\n+// bb20: {                              // guard otherwise case - first time\n+//     StorageDead(_9);\n+//     StorageDead(_8);\n+//     StorageDead(_6);\n+//     falseEdges -> [real: bb7, imaginary: bb3];\n+// }\n+// bb21: {                              // guard - second time\n+//     StorageLive(_6);\n+//     _6 = &(_2.0: bool);\n+//     StorageLive(_8);\n+//     _8 = &(_2.2: std::string::String);\n+//     _3 = &shallow (_2.0: bool);\n+//     _4 = &shallow (_2.1: bool);\n+//     StorageLive(_12);\n+//     StorageLive(_13);\n+//     _13 = _1;\n+//     FakeRead(ForMatchedPlace, _13);\n+//     switchInt(_13) -> [false: bb23, otherwise: bb22];\n+// }\n+// bb22: {\n+//     falseEdges -> [real: bb25, imaginary: bb23];\n+// }\n+// bb23: {\n+//     falseEdges -> [real: bb26, imaginary: bb24];\n+// }\n+// bb24: {\n+//     unreachable;\n+// }\n+// bb25: {                              // `return 3` - second time\n+//     _0 = const 3i32;\n+//     StorageDead(_13);\n+//     StorageDead(_12);\n+//     StorageDead(_8);\n+//     StorageDead(_6);\n+//     goto -> bb17;\n+// }\n+// bb26: {                              // `else` block - second time\n+//     _12 = (*_6);\n+//     StorageDead(_13);\n+//     FakeRead(ForMatchGuard, _3);\n+//     FakeRead(ForMatchGuard, _4);\n+//     FakeRead(ForGuardBinding, _6);\n+//     FakeRead(ForGuardBinding, _8);\n+//     switchInt(move _12) -> [false: bb28, otherwise: bb27];\n+// }\n+// bb27: {                              // Guard otherwise case - second time\n+//     StorageDead(_12);\n+//     StorageLive(_5);\n+//     _5 = (_2.0: bool);\n+//     StorageLive(_7);\n+//     _7 = move (_2.2: std::string::String);\n+//     goto -> bb9;\n+// }\n+// bb28: {                              // rest of arm 1\n+//     StorageDead(_12);\n+//     StorageDead(_8);\n+//     StorageDead(_6);\n+//     falseEdges -> [real: bb8, imaginary: bb4];\n+// }\n+// bb29: {\n+//     StorageDead(_7);\n+//     StorageDead(_5);\n+//     StorageDead(_8);\n+//     StorageDead(_6);\n+//     goto -> bb34;\n+// }\n+// bb30: {                              // arm 2\n+//     _0 = const 2i32;\n+//     drop(_16) -> [return: bb33, unwind: bb16];\n+// }\n+// bb31: {                              // bindings for arm 2 - first pattern\n+//     StorageLive(_15);\n+//     _15 = (_2.1: bool);\n+//     StorageLive(_16);\n+//     _16 = move (_2.2: std::string::String);\n+//     goto -> bb30;\n+// }\n+// bb32: {                              // bindings for arm 2 - first pattern\n+//     StorageLive(_15);\n+//     _15 = (_2.1: bool);\n+//     StorageLive(_16);\n+//     _16 = move (_2.2: std::string::String);\n+//     goto -> bb30;\n+// }\n+// bb33: {                              // rest of arm 2\n+//     StorageDead(_16);\n+//     StorageDead(_15);\n+//     goto -> bb34;\n+// }\n+// bb34: {                              // end of match\n+//     drop(_2) -> [return: bb15, unwind: bb1];\n+// }\n+// END rustc.complicated_match.SimplifyCfg-initial.after.mir\n+// START rustc.complicated_match.ElaborateDrops.after.mir\n+// let _16: std::string::String;      // No drop flags, which would come after this.\n+// scope 1 {\n+// END rustc.complicated_match.ElaborateDrops.after.mir"}]}