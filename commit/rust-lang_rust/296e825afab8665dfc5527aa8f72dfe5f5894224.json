{"sha": "296e825afab8665dfc5527aa8f72dfe5f5894224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmU4MjVhZmFiODY2NWRmYzU1MjdhYThmNzJkZmU1ZjU4OTQyMjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-06T20:14:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-06T20:14:35Z"}, "message": "Rollup merge of #61862 - vorner:weak-into-raw-methods, r=sfackler\n\nMake the Weak::{into,as}_raw methods\n\nBecause Weak doesn't Deref, so there's no reason for them to be only\nassociated methods.\n\nAs kindly pointed out here https://github.com/rust-lang/rust/pull/60766#issuecomment-501706422 by @chpio.", "tree": {"sha": "2da2fdb77115fd9850a3e7304fef6cb4854e39e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da2fdb77115fd9850a3e7304fef6cb4854e39e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296e825afab8665dfc5527aa8f72dfe5f5894224", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdIQErCRBK7hj4Ov3rIwAAdHIIAAMxH+b6DxJ3Uq6ZfLwmL+DB\nNfSWYzlMlozl7+a61lxPnVTmyXGVDiyAMxZd0Utq/iOzQ7giYm3tebyByBnCo1wR\nRXJPFFkzQc/TtBd3aX/BaAe8n11/nznHBbvJTQpP4HbXqWH09iEZCXCsgKHBfUJM\n+/JnAwE+Bc4iZXzhHu1AcicyRqswXg4W9cxtddhsU1C4iN+qD8GDa7A1TGNoKqkO\nBkI3gI9yv9N+IfnBcKjLXB7si5NK0yY5MsGtkjl8NjHeW6vLtAifXd4kklQU29g+\nPGhcWe8dWEr1xZlUELRg3i38BiSBN+7HL/RIZ1mGPDblfS3Eai+8GL4cOcztwc4=\n=oLAx\n-----END PGP SIGNATURE-----\n", "payload": "tree 2da2fdb77115fd9850a3e7304fef6cb4854e39e9\nparent 327c54ed02e412013e8ffabc61c71f10c2777fe1\nparent 49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562444075 +0200\ncommitter GitHub <noreply@github.com> 1562444075 +0200\n\nRollup merge of #61862 - vorner:weak-into-raw-methods, r=sfackler\n\nMake the Weak::{into,as}_raw methods\n\nBecause Weak doesn't Deref, so there's no reason for them to be only\nassociated methods.\n\nAs kindly pointed out here https://github.com/rust-lang/rust/pull/60766#issuecomment-501706422 by @chpio.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296e825afab8665dfc5527aa8f72dfe5f5894224", "html_url": "https://github.com/rust-lang/rust/commit/296e825afab8665dfc5527aa8f72dfe5f5894224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296e825afab8665dfc5527aa8f72dfe5f5894224/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327c54ed02e412013e8ffabc61c71f10c2777fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/327c54ed02e412013e8ffabc61c71f10c2777fe1", "html_url": "https://github.com/rust-lang/rust/commit/327c54ed02e412013e8ffabc61c71f10c2777fe1"}, {"sha": "49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "html_url": "https://github.com/rust-lang/rust/commit/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "45a8b4a25c8a80edb17e7c3cd299dada38c5e93d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/296e825afab8665dfc5527aa8f72dfe5f5894224/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e825afab8665dfc5527aa8f72dfe5f5894224/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=296e825afab8665dfc5527aa8f72dfe5f5894224", "patch": "@@ -1291,26 +1291,26 @@ impl<T> Weak<T> {\n     /// ```\n     /// #![feature(weak_into_raw)]\n     ///\n-    /// use std::rc::{Rc, Weak};\n+    /// use std::rc::Rc;\n     /// use std::ptr;\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     /// let weak = Rc::downgrade(&strong);\n     /// // Both point to the same object\n-    /// assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    /// assert!(ptr::eq(&*strong, weak.as_raw()));\n     /// // The strong here keeps it alive, so we can still access the object.\n-    /// assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     ///\n     /// drop(strong);\n-    /// // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n+    /// // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to\n     /// // undefined behaviour.\n-    /// // assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn as_raw(this: &Self) -> *const T {\n-        match this.inner() {\n+    pub fn as_raw(&self) -> *const T {\n+        match self.inner() {\n             None => ptr::null(),\n             Some(inner) => {\n                 let offset = data_offset_sized::<T>();\n@@ -1341,7 +1341,7 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     /// let weak = Rc::downgrade(&strong);\n-    /// let raw = Weak::into_raw(weak);\n+    /// let raw = weak.into_raw();\n     ///\n     /// assert_eq!(1, Rc::weak_count(&strong));\n     /// assert_eq!(\"hello\", unsafe { &*raw });\n@@ -1353,9 +1353,9 @@ impl<T> Weak<T> {\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_raw`]: struct.Weak.html#method.as_raw\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn into_raw(this: Self) -> *const T {\n-        let result = Self::as_raw(&this);\n-        mem::forget(this);\n+    pub fn into_raw(self) -> *const T {\n+        let result = self.as_raw();\n+        mem::forget(self);\n         result\n     }\n \n@@ -1382,18 +1382,18 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     ///\n-    /// let raw_1 = Weak::into_raw(Rc::downgrade(&strong));\n-    /// let raw_2 = Weak::into_raw(Rc::downgrade(&strong));\n+    /// let raw_1 = Rc::downgrade(&strong).into_raw();\n+    /// let raw_2 = Rc::downgrade(&strong).into_raw();\n     ///\n     /// assert_eq!(2, Rc::weak_count(&strong));\n     ///\n-    /// assert_eq!(\"hello\", &*Weak::upgrade(&unsafe { Weak::from_raw(raw_1) }).unwrap());\n+    /// assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\n     /// assert_eq!(1, Rc::weak_count(&strong));\n     ///\n     /// drop(strong);\n     ///\n     /// // Decrement the last weak count.\n-    /// assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n+    /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html"}, {"sha": "126169b5c8206bd0324a394c6a45c7db3188181c", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/296e825afab8665dfc5527aa8f72dfe5f5894224/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e825afab8665dfc5527aa8f72dfe5f5894224/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=296e825afab8665dfc5527aa8f72dfe5f5894224", "patch": "@@ -1080,26 +1080,26 @@ impl<T> Weak<T> {\n     /// ```\n     /// #![feature(weak_into_raw)]\n     ///\n-    /// use std::sync::{Arc, Weak};\n+    /// use std::sync::Arc;\n     /// use std::ptr;\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     /// let weak = Arc::downgrade(&strong);\n     /// // Both point to the same object\n-    /// assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    /// assert!(ptr::eq(&*strong, weak.as_raw()));\n     /// // The strong here keeps it alive, so we can still access the object.\n-    /// assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     ///\n     /// drop(strong);\n-    /// // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n+    /// // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to\n     /// // undefined behaviour.\n-    /// // assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn as_raw(this: &Self) -> *const T {\n-        match this.inner() {\n+    pub fn as_raw(&self) -> *const T {\n+        match self.inner() {\n             None => ptr::null(),\n             Some(inner) => {\n                 let offset = data_offset_sized::<T>();\n@@ -1130,7 +1130,7 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     /// let weak = Arc::downgrade(&strong);\n-    /// let raw = Weak::into_raw(weak);\n+    /// let raw = weak.into_raw();\n     ///\n     /// assert_eq!(1, Arc::weak_count(&strong));\n     /// assert_eq!(\"hello\", unsafe { &*raw });\n@@ -1142,9 +1142,9 @@ impl<T> Weak<T> {\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_raw`]: struct.Weak.html#method.as_raw\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn into_raw(this: Self) -> *const T {\n-        let result = Self::as_raw(&this);\n-        mem::forget(this);\n+    pub fn into_raw(self) -> *const T {\n+        let result = self.as_raw();\n+        mem::forget(self);\n         result\n     }\n \n@@ -1172,18 +1172,18 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     ///\n-    /// let raw_1 = Weak::into_raw(Arc::downgrade(&strong));\n-    /// let raw_2 = Weak::into_raw(Arc::downgrade(&strong));\n+    /// let raw_1 = Arc::downgrade(&strong).into_raw();\n+    /// let raw_2 = Arc::downgrade(&strong).into_raw();\n     ///\n     /// assert_eq!(2, Arc::weak_count(&strong));\n     ///\n-    /// assert_eq!(\"hello\", &*Weak::upgrade(&unsafe { Weak::from_raw(raw_1) }).unwrap());\n+    /// assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\n     /// assert_eq!(1, Arc::weak_count(&strong));\n     ///\n     /// drop(strong);\n     ///\n     /// // Decrement the last weak count.\n-    /// assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n+    /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html"}]}