{"sha": "fc740a729721d5063be367de99b5fcb62a99f2d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNzQwYTcyOTcyMWQ1MDYzYmUzNjdkZTk5YjVmY2I2MmE5OWYyZDc=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-12-09T04:10:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-16T06:38:19Z"}, "message": "Improvements to array_list, hash_map, and indexed_list:\n* Disabled copying.\n* Added const where appropiate.", "tree": {"sha": "63ce2f13270844ce033d4a32bec4d9a79225430b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ce2f13270844ce033d4a32bec4d9a79225430b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc740a729721d5063be367de99b5fcb62a99f2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc740a729721d5063be367de99b5fcb62a99f2d7", "html_url": "https://github.com/rust-lang/rust/commit/fc740a729721d5063be367de99b5fcb62a99f2d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc740a729721d5063be367de99b5fcb62a99f2d7/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4daa78aa374c3f129e2fbff3ad57484e9d4b8e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4daa78aa374c3f129e2fbff3ad57484e9d4b8e1", "html_url": "https://github.com/rust-lang/rust/commit/d4daa78aa374c3f129e2fbff3ad57484e9d4b8e1"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "a62a8c5c8db719171da90d73b7fe5005252a0a96", "filename": "src/rt/util/array_list.h", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=fc740a729721d5063be367de99b5fcb62a99f2d7", "patch": "@@ -16,25 +16,32 @@\n #include <stddef.h>\n \n /**\n- * A simple, resizable array list.\n+ * A simple, resizable array list. Note that this only works with POD types\n+ * (because data is grown via realloc).\n  */\n template<typename T> class array_list {\n     static const size_t INITIAL_CAPACITY = 8;\n     size_t _size;\n     T * _data;\n     size_t _capacity;\n+private:\n+    // private and left undefined to disable copying\n+    array_list(const array_list& rhs);\n+    array_list& operator=(const array_list& rhs);\n public:\n     array_list();\n     ~array_list();\n-    size_t size();\n+    size_t size() const;\n     int32_t append(T value);\n     int32_t push(T value);\n     bool pop(T *value);\n     bool replace(T old_value, T new_value);\n-    int32_t index_of(T value);\n-    bool is_empty();\n+    int32_t index_of(T value) const;\n+    bool is_empty() const;\n     T* data();\n+    const T* data() const;\n     T & operator[](size_t index);\n+    const T & operator[](size_t index) const;\n };\n \n template<typename T>\n@@ -50,7 +57,7 @@ array_list<T>::~array_list() {\n }\n \n template<typename T> size_t\n-array_list<T>::size() {\n+array_list<T>::size() const {\n     return _size;\n }\n \n@@ -97,7 +104,7 @@ array_list<T>::replace(T old_value, T new_value) {\n }\n \n template<typename T> int32_t\n-array_list<T>::index_of(T value) {\n+array_list<T>::index_of(T value) const {\n     for (size_t i = 0; i < _size; i++) {\n         if (_data[i] == value) {\n             return i;\n@@ -111,8 +118,13 @@ array_list<T>::operator[](size_t index) {\n     return _data[index];\n }\n \n+template<typename T> const T &\n+array_list<T>::operator[](size_t index) const {\n+    return _data[index];\n+}\n+\n template<typename T> bool\n-array_list<T>::is_empty() {\n+array_list<T>::is_empty() const {\n     return _size == 0;\n }\n \n@@ -121,4 +133,9 @@ array_list<T>::data() {\n     return _data;\n }\n \n+template<typename T> const T*\n+array_list<T>::data() const {\n+    return _data;\n+}\n+\n #endif /* ARRAY_LIST_H */"}, {"sha": "253a7a06fb7b7bdc87b0515bc724be880a5dd84d", "filename": "src/rt/util/hash_map.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Fhash_map.h", "raw_url": "https://github.com/rust-lang/rust/raw/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Fhash_map.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Fhash_map.h?ref=fc740a729721d5063be367de99b5fcb62a99f2d7", "patch": "@@ -26,6 +26,10 @@ template<typename K, typename V> class hash_map {\n         UT_hash_handle hh;\n     };\n     map_entry * _head;\n+private:\n+    // private and left undefined to disable copying\n+    hash_map(const hash_map& rhs);\n+    hash_map& operator=(const hash_map& rhs);\n public:\n     hash_map();\n     ~hash_map();\n@@ -54,7 +58,7 @@ template<typename K, typename V> class hash_map {\n      * true if the value was found and updates the specified *value parameter\n      * with the associated value, or false otherwise.\n      */\n-    bool get(K key, V *value);\n+    bool get(K key, V *value) const;\n \n     /**\n      * Removes a key-value pair from this hash map.\n@@ -71,7 +75,7 @@ template<typename K, typename V> class hash_map {\n      * returns:\n      * true if the specified key exists in this hash map, or false otherwise.\n      */\n-    bool contains(K key);\n+    bool contains(K key) const;\n \n     /**\n      * Removes the value associated with the specified key from this hash map.\n@@ -86,9 +90,9 @@ template<typename K, typename V> class hash_map {\n     /**\n      * Returns the number of key-value pairs in this hash map.\n      */\n-    size_t count();\n+    size_t count() const;\n \n-    bool is_empty() {\n+    bool is_empty() const {\n         return count() == 0;\n     }\n \n@@ -124,7 +128,7 @@ hash_map<K,V>::put(K key, V value) {\n }\n \n template<typename K, typename V> bool\n-hash_map<K,V>::get(K key, V *value) {\n+hash_map<K,V>::get(K key, V *value) const {\n     map_entry *entry = NULL;\n     HASH_FIND(hh, _head, &key, sizeof(K), entry);\n     if (entry == NULL) {\n@@ -146,7 +150,7 @@ hash_map<K,V>::set(K key, V value) {\n }\n \n template<typename K, typename V> bool\n-hash_map<K,V>::contains(K key) {\n+hash_map<K,V>::contains(K key) const {\n     V value;\n     return get(key, &value);\n }\n@@ -184,7 +188,7 @@ hash_map<K,V>::remove(K key) {\n }\n \n template<typename K, typename V> size_t\n-hash_map<K,V>::count() {\n+hash_map<K,V>::count() const {\n     return HASH_CNT(hh, _head);\n }\n "}, {"sha": "51e94b8ba26569904e01c0ef207376f2a0279c3c", "filename": "src/rt/util/indexed_list.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Findexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/fc740a729721d5063be367de99b5fcb62a99f2d7/src%2Frt%2Futil%2Findexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Findexed_list.h?ref=fc740a729721d5063be367de99b5fcb62a99f2d7", "patch": "@@ -45,14 +45,15 @@ template<typename T> class indexed_list {\n      * Same as pop(), except that it returns NULL if the list is empty.\n      */\n     virtual T* pop_value();\n-    virtual size_t length() {\n+    virtual size_t length() const {\n         return list.size();\n     }\n-    virtual bool is_empty() {\n+    virtual bool is_empty() const {\n         return list.is_empty();\n     }\n     virtual int32_t remove(T* value);\n     virtual T * operator[](int32_t index);\n+    virtual const T * operator[](int32_t index) const;\n     virtual ~indexed_list() {}\n };\n \n@@ -104,4 +105,11 @@ indexed_list<T>::operator[](int32_t index) {\n     return value;\n }\n \n+template <typename T> const T *\n+indexed_list<T>::operator[](int32_t index) const {\n+    T *value = list[index];\n+    assert(value->list_index == index);\n+    return value;\n+}\n+\n #endif /* INDEXED_LIST_H */"}]}