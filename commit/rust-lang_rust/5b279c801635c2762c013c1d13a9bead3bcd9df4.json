{"sha": "5b279c801635c2762c013c1d13a9bead3bcd9df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjc5YzgwMTYzNWMyNzYyYzAxM2MxZDEzYTliZWFkM2JjZDlkZjQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-28T15:46:02Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:30Z"}, "message": "Check opaque types satisfy their bounds", "tree": {"sha": "156749754f712a49b30eace463a579d3afc62ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156749754f712a49b30eace463a579d3afc62ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b279c801635c2762c013c1d13a9bead3bcd9df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b279c801635c2762c013c1d13a9bead3bcd9df4", "html_url": "https://github.com/rust-lang/rust/commit/5b279c801635c2762c013c1d13a9bead3bcd9df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b279c801635c2762c013c1d13a9bead3bcd9df4/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3057f4d5fe7156aa85e1844d3638fa14ba48b79", "html_url": "https://github.com/rust-lang/rust/commit/b3057f4d5fe7156aa85e1844d3638fa14ba48b79"}], "stats": {"total": 194, "additions": 158, "deletions": 36}, "files": [{"sha": "0621d9bf09e138f9351cf77e47e23b7793cb239e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -1170,7 +1170,8 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             // This also instantiates nested instances of `impl Trait`.\n             let predicate = self.instantiate_opaque_types_in_map(&predicate);\n \n-            let cause = traits::ObligationCause::new(span, self.body_id, traits::SizedReturnType);\n+            let cause =\n+                traits::ObligationCause::new(span, self.body_id, traits::MiscObligation);\n \n             // Require that the predicate holds for the concrete type.\n             debug!(\"instantiate_opaque_types: predicate={:?}\", predicate);"}, {"sha": "f5e6ff07b88b7bdf2aa64040beb59f8f91aa1441", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -387,7 +387,10 @@ pub(super) fn check_opaque<'tcx>(\n ) {\n     check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n     tcx.ensure().type_of(def_id);\n-    check_opaque_for_cycles(tcx, def_id, substs, span, origin);\n+    if check_opaque_for_cycles(tcx, def_id, substs, span, origin).is_err() {\n+        return;\n+    }\n+    check_opaque_meets_bounds(tcx, def_id, substs, span, origin);\n }\n \n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n@@ -504,7 +507,7 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     substs: SubstsRef<'tcx>,\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n-) {\n+) -> Result<(), ErrorReported> {\n     if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs)\n     {\n         match origin {\n@@ -514,7 +517,68 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n             }\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n         }\n+        Err(ErrorReported)\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+/// Check that the concrete type behind `impl Trait` actually implements `Trait`.\n+fn check_opaque_meets_bounds<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+    substs: SubstsRef<'tcx>,\n+    span: Span,\n+    origin: &hir::OpaqueTyOrigin,\n+) {\n+    match origin {\n+        // Checked when type checking the function containing them.\n+        hir::OpaqueTyOrigin::FnReturn | hir::OpaqueTyOrigin::AsyncFn => return,\n+        // Can have different predicates to their defining use\n+        hir::OpaqueTyOrigin::Binding | hir::OpaqueTyOrigin::Misc => {}\n     }\n+\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+    let param_env = tcx.param_env(def_id);\n+\n+    tcx.infer_ctxt().enter(move |infcx| {\n+        let inh = Inherited::new(infcx, def_id);\n+        let infcx = &inh.infcx;\n+        let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n+\n+        let misc_cause = traits::ObligationCause::misc(span, hir_id);\n+\n+        let (_, opaque_type_map) = inh.register_infer_ok_obligations(\n+            infcx.instantiate_opaque_types(def_id.to_def_id(), hir_id, param_env, &opaque_ty, span),\n+        );\n+\n+        for (def_id, opaque_defn) in opaque_type_map {\n+            match infcx\n+                .at(&misc_cause, param_env)\n+                .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, opaque_defn.substs))\n+            {\n+                Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n+                Err(ty_err) => tcx.sess.delay_span_bug(\n+                    opaque_defn.definition_span,\n+                    &format!(\n+                        \"could not unify `{}` with revealed type:\\n{}\",\n+                        opaque_defn.concrete_ty, ty_err,\n+                    ),\n+                ),\n+            }\n+        }\n+\n+        // Check that all obligations are satisfied by the implementation's\n+        // version.\n+        if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n+            infcx.report_fulfillment_errors(errors, None, false);\n+        }\n+\n+        // Finally, resolve all regions. This catches wily misuses of\n+        // lifetime parameters.\n+        let fcx = FnCtxt::new(&inh, param_env, hir_id);\n+        fcx.regionck_item(hir_id, span, &[]);\n+    });\n }\n \n pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {"}, {"sha": "b0e9e33a6c38ecffeda0cbef786f32659c24878f", "filename": "src/test/ui/associated-types/impl-trait-return-missing-constraint.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-trait-return-missing-constraint.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -9,7 +9,6 @@ LL | fn baz() -> impl Bar<Item = i32> {\n    |\n    = note: expected associated type `<impl Bar as Foo>::Item`\n                          found type `i32`\n-   = note: the return type of a function must have a statically known size\n help: consider constraining the associated type `<impl Bar as Foo>::Item` to `i32`\n    |\n LL | fn bar() -> impl Bar<Item = i32> {"}, {"sha": "8cd0e40c8cf841131514590cbfaa6ad5b079418b", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -3,9 +3,6 @@ error[E0277]: `()` is not a future\n    |\n LL | fn get_future() -> impl Future<Output = ()> {\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not a future\n-LL |\n-LL |     panic!()\n-   |     -------- this returned value is of type `!`\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: the return type of a function must have a statically known size"}, {"sha": "f5d023ab781ff761cb7bce4212ad767652928cb2", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -30,7 +30,6 @@ help: consider moving this into a `let` binding to create a shorter lived borrow\n    |\n LL |         match client.status() {\n    |               ^^^^^^^^^^^^^^^\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "20ee22e448c91970672efbb2780dd4423b796a76", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -12,7 +12,6 @@ note: captured value is not `Send`\n    |\n LL |     async { (ty, ty1) }\n    |                  ^^^ has type `U` which is not `Send`\n-   = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `U`\n    |\n LL | fn foo<T: Send, U: Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {"}, {"sha": "8f6f87f78de707e5d1d998b06d20f1f8085262c0", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -15,7 +15,6 @@ LL | fn foo() -> impl Generator<Return = i32> {\n    |\n    = note: expected enum `std::result::Result<{integer}, _>`\n               found type `i32`\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a7d06c71663de259f4d492da884c8df32a98f423", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -15,7 +15,6 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as impl_trait::Trait>::Assoc`\n-   = note: the return type of a function must have a statically known size\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n@@ -35,7 +34,6 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note:         expected type `()`\n            found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n-   = note: the return type of a function must have a statically known size\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {"}, {"sha": "64c536cf1fe30b5513c20a22027d00a22453744c", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -14,7 +14,6 @@ LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n    |\n    = note: required because it appears within the type `(S, T)`\n-   = note: the return type of a function must have a statically known size\n help: consider further restricting this bound\n    |\n LL | impl<S: Default + Copy> Bar for S {\n@@ -27,7 +26,6 @@ LL |     type E = impl Copy;\n    |              ^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n    |\n    = note: required because it appears within the type `(S, T)`\n-   = note: the return type of a function must have a statically known size\n help: consider further restricting this bound\n    |\n LL |     fn foo<T: Default + Copy>() -> Self::E {"}, {"sha": "835d479f28f198737d9a3502b0f86ead8e53b966", "filename": "src/test/ui/issues-71798.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fissues-71798.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fissues-71798.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues-71798.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -9,8 +9,6 @@ error[E0277]: `u32` is not a future\n    |\n LL | fn test_ref(x: &u32) -> impl std::future::Future<Output = u32> + '_ {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `u32` is not a future\n-LL |     *x\n-   |     -- this returned value is of type `u32`\n    |\n    = help: the trait `Future` is not implemented for `u32`\n    = note: the return type of a function must have a statically known size"}, {"sha": "c3d597bec2e406e7a86e2099631664f756430972", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -3,11 +3,6 @@ error[E0277]: the trait bound `std::result::Result<(), _>: Future` is not satisf\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n-LL |\n-LL |     Ok(())\n-   |     ------ this returned value is of type `std::result::Result<(), _>`\n-   |\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "670f76867ce45122b29e6ebba4a3c628318c9507", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -3,11 +3,6 @@ error[E0277]: the trait bound `(): T` is not satisfied\n    |\n LL | fn should_ret_unit() -> impl T {\n    |                         ^^^^^^ the trait `T` is not implemented for `()`\n-LL |\n-LL |     panic!()\n-   |     -------- this returned value is of type `!`\n-   |\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "d826222a06ae5d95fbd5838bc2b3fac95821e218", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -5,8 +5,6 @@ LL | fn foo() -> impl Bar {\n    |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n LL |     5;\n    |      - consider removing this semicolon\n-   |\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "5566f40f96095fe634b8d7734022f9ecdc08f6e2", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -0,0 +1,19 @@\n+// Make sure that we check that impl trait types implement the traits that they\n+// claim to.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type X<T> = impl Clone;\n+//~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+\n+fn f<T: Clone>(t: T) -> X<T> {\n+    t\n+}\n+\n+fn g<T>(o : Option<X<T>>) -> Option<X<T>> {\n+    o.clone()\n+}\n+\n+fn main() {\n+    g(None::<X<&mut ()>>);\n+}"}, {"sha": "e20130007ee8b526a9d3bc37245c071b83044a41", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/bounds-are-checked-2.rs:6:13\n+   |\n+LL | type X<T> = impl Clone;\n+   |             ^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | type X<T: std::clone::Clone> = impl Clone;\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "759bf4f4f0deec895cbf66c81e696a85154d4ebd", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -0,0 +1,25 @@\n+// Make sure that we check that impl trait types implement the traits that they\n+// claim to.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type X<'a> = impl Into<&'static str> + From<&'a str>;\n+//~^ ERROR mismatched types\n+\n+fn f<'a: 'static>(t: &'a str) -> X<'a> {\n+    //~^ WARNING unnecessary lifetime parameter\n+    t\n+}\n+\n+fn extend_lt<'a>(o: &'a str) -> &'static str {\n+    X::<'_>::from(o).into()\n+}\n+\n+fn main() {\n+    let r =\n+    {\n+        let s = \"abcdef\".to_string();\n+        extend_lt(&s)\n+    };\n+    println!(\"{}\", r);\n+}"}, {"sha": "42468b91a6267f46cb832a40c5b30db630b8bddc", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -0,0 +1,26 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/bounds-are-checked.rs:9:6\n+   |\n+LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bounds-are-checked.rs:6:14\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected type `std::convert::From<&'a str>`\n+              found type `std::convert::From<&'static str>`\n+note: the lifetime `'a` as defined on the item at 6:8...\n+  --> $DIR/bounds-are-checked.rs:6:8\n+   |\n+LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n+   |        ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c17d595dbb3ad23e07b33f73bad8e6b4dee960d8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use10.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -1,11 +1,11 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-type Two<T, U> = impl Debug;\n+type Two<T: Debug, U> = impl Debug;\n \n fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n     (t, 4u32)"}, {"sha": "feebf81eef2a7f87274fe42a3b7952fa261737f4", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use7.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -1,11 +1,11 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-type Two<A, B> = impl Debug;\n+type Two<A: Debug, B> = impl Debug;\n \n fn two<T: Debug + Copy, U>(t: T, u: U) -> Two<T, U> {\n     (t, t)"}, {"sha": "905248fb33755992d0ec2637edc0f48a0949304c", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -15,7 +15,6 @@ LL |     type Item = impl Bug;\n    |\n    = help: the following implementations were found:\n              <&() as Bug>\n-   = note: the return type of a function must have a statically known size\n \n error: could not find defining uses\n   --> $DIR/issue-60371.rs:8:17"}, {"sha": "8615b3f741bf53ea43ddb27cebcfe38b5b8f4b0d", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -6,7 +6,6 @@ LL | type Closure = impl FnOnce();\n    |\n    = note: expected opaque type `impl FnOnce<()>`\n                 found unit type `()`\n-   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n "}, {"sha": "80192d19af98b5cd9d63f5f89b664570a558dc1d", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b279c801635c2762c013c1d13a9bead3bcd9df4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs?ref=5b279c801635c2762c013c1d13a9bead3bcd9df4", "patch": "@@ -70,14 +70,14 @@ fn my_other_iter<U>(u: U) -> MyOtherIter<U> {\n }\n \n trait Trait {}\n-type GenericBound<'a, T: Trait> = impl Sized + 'a;\n+type GenericBound<'a, T: Trait + 'a> = impl Sized + 'a;\n \n fn generic_bound<'a, T: Trait + 'a>(t: T) -> GenericBound<'a, T> {\n     t\n }\n \n mod pass_through {\n-    pub type Passthrough<T> = impl Sized + 'static;\n+    pub type Passthrough<T: 'static> = impl Sized + 'static;\n \n     fn define_passthrough<T: 'static>(t: T) -> Passthrough<T> {\n         t"}]}