{"sha": "674a5db1a50e25dd60a8ee6669edee9a366c9fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NGE1ZGIxYTUwZTI1ZGQ2MGE4ZWU2NjY5ZWRlZTlhMzY2YzlmYWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-17T10:17:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-17T10:17:39Z"}, "message": "Fix undesirable fallout\n\ncompile-fail-fulldeps/proc-macro/proc-macro-attributes.rs - resolution change for derive helper attributes with the same name as derive itself\nrun-pass/macro-comma-support.rs - indeterminate resolutions for macros in expression positions\nui/issues/issue-49074.rs - diagnostics regression, not enough recovery to report the second error\nui/object-lifetime/object-lifetime-default.stderr - unstable diagnostics?", "tree": {"sha": "c65e3dad6a1867ac38fb805d3d0919d0a8a9636e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c65e3dad6a1867ac38fb805d3d0919d0a8a9636e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/674a5db1a50e25dd60a8ee6669edee9a366c9fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/674a5db1a50e25dd60a8ee6669edee9a366c9fab", "html_url": "https://github.com/rust-lang/rust/commit/674a5db1a50e25dd60a8ee6669edee9a366c9fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/674a5db1a50e25dd60a8ee6669edee9a366c9fab/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0958048b6b31c3a2ac9242aac699791431955de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0958048b6b31c3a2ac9242aac699791431955de", "html_url": "https://github.com/rust-lang/rust/commit/a0958048b6b31c3a2ac9242aac699791431955de"}], "stats": {"total": 167, "additions": 79, "deletions": 88}, "files": [{"sha": "215d51c227084ed19931519fd31b458b8553919f", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-attributes.rs?ref=674a5db1a50e25dd60a8ee6669edee9a366c9fab", "patch": "@@ -17,11 +17,11 @@\n extern crate derive_b;\n \n #[derive(B)]\n-#[B]\n-#[C] //~ ERROR: The attribute `C` is currently unknown to the compiler\n+#[B] //~ ERROR `B` is a derive mode\n+#[C]\n #[B(D)]\n #[B(E = \"foo\")]\n-#[B(arbitrary tokens)] //~ ERROR expected one of `(`, `)`, `,`, `::`, or `=`, found `tokens`\n+#[B(arbitrary tokens)]\n struct B;\n \n fn main() {}"}, {"sha": "f645849cd5114f491758bd1b39381f670185d030", "filename": "src/test/run-pass/macro-comma-support.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs?ref=674a5db1a50e25dd60a8ee6669edee9a366c9fab", "patch": "@@ -61,30 +61,30 @@ fn assert_ne() {\n \n #[test]\n fn cfg() {\n-    let _ = cfg!(pants);\n-    let _ = cfg!(pants,);\n-    let _ = cfg!(pants = \"pants\");\n-    let _ = cfg!(pants = \"pants\",);\n-    let _ = cfg!(all(pants));\n-    let _ = cfg!(all(pants),);\n-    let _ = cfg!(all(pants,));\n-    let _ = cfg!(all(pants,),);\n+    cfg!(pants);\n+    cfg!(pants,);\n+    cfg!(pants = \"pants\");\n+    cfg!(pants = \"pants\",);\n+    cfg!(all(pants));\n+    cfg!(all(pants),);\n+    cfg!(all(pants,));\n+    cfg!(all(pants,),);\n }\n \n #[test]\n fn column() {\n-    let _ = column!();\n+    column!();\n }\n \n // compile_error! is in a companion to this test in compile-fail\n \n #[test]\n fn concat() {\n-    let _ = concat!();\n-    let _ = concat!(\"hello\");\n-    let _ = concat!(\"hello\",);\n-    let _ = concat!(\"hello\", \" world\");\n-    let _ = concat!(\"hello\", \" world\",);\n+    concat!();\n+    concat!(\"hello\");\n+    concat!(\"hello\",);\n+    concat!(\"hello\", \" world\");\n+    concat!(\"hello\", \" world\",);\n }\n \n #[test]\n@@ -130,10 +130,10 @@ fn debug_assert_ne() {\n \n #[test]\n fn env() {\n-    let _ = env!(\"PATH\");\n-    let _ = env!(\"PATH\",);\n-    let _ = env!(\"PATH\", \"not found\");\n-    let _ = env!(\"PATH\", \"not found\",);\n+    env!(\"PATH\");\n+    env!(\"PATH\",);\n+    env!(\"PATH\", \"not found\");\n+    env!(\"PATH\", \"not found\",);\n }\n \n #[cfg(std)]\n@@ -157,58 +157,58 @@ fn eprintln() {\n \n #[test]\n fn file() {\n-    let _ = file!();\n+    file!();\n }\n \n #[cfg(std)]\n #[test]\n fn format() {\n-    let _ = format!(\"hello\");\n-    let _ = format!(\"hello\",);\n-    let _ = format!(\"hello {}\", \"world\");\n-    let _ = format!(\"hello {}\", \"world\",);\n+    format!(\"hello\");\n+    format!(\"hello\",);\n+    format!(\"hello {}\", \"world\");\n+    format!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn format_args() {\n-    let _ = format_args!(\"hello\");\n-    let _ = format_args!(\"hello\",);\n-    let _ = format_args!(\"hello {}\", \"world\");\n-    let _ = format_args!(\"hello {}\", \"world\",);\n+    format_args!(\"hello\");\n+    format_args!(\"hello\",);\n+    format_args!(\"hello {}\", \"world\");\n+    format_args!(\"hello {}\", \"world\",);\n }\n \n #[test]\n fn include() {\n-    let _ = include!(\"auxiliary/macro-comma-support.rs\");\n-    let _ = include!(\"auxiliary/macro-comma-support.rs\",);\n+    include!(\"auxiliary/macro-comma-support.rs\");\n+    include!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_bytes() {\n-    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\");\n-    let _ = include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n+    include_bytes!(\"auxiliary/macro-comma-support.rs\");\n+    include_bytes!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn include_str() {\n-    let _ = include_str!(\"auxiliary/macro-comma-support.rs\");\n-    let _ = include_str!(\"auxiliary/macro-comma-support.rs\",);\n+    include_str!(\"auxiliary/macro-comma-support.rs\");\n+    include_str!(\"auxiliary/macro-comma-support.rs\",);\n }\n \n #[test]\n fn line() {\n-    let _ = line!();\n+    line!();\n }\n \n #[test]\n fn module_path() {\n-    let _ = module_path!();\n+    module_path!();\n }\n \n #[test]\n fn option_env() {\n-    let _ = option_env!(\"PATH\");\n-    let _ = option_env!(\"PATH\",);\n+    option_env!(\"PATH\");\n+    option_env!(\"PATH\",);\n }\n \n #[test]\n@@ -308,10 +308,10 @@ fn unreachable() {\n #[test]\n fn vec() {\n     let _: Vec<()> = vec![];\n-    let _ = vec![0];\n-    let _ = vec![0,];\n-    let _ = vec![0, 1];\n-    let _ = vec![0, 1,];\n+    vec![0];\n+    vec![0,];\n+    vec![0, 1];\n+    vec![0, 1,];\n }\n \n // give a test body access to a fmt::Formatter, which seems\n@@ -339,21 +339,21 @@ macro_rules! test_with_formatter {\n test_with_formatter! {\n     #[test]\n     fn write(f: &mut fmt::Formatter) {\n-        let _ = write!(f, \"hello\");\n-        let _ = write!(f, \"hello\",);\n-        let _ = write!(f, \"hello {}\", \"world\");\n-        let _ = write!(f, \"hello {}\", \"world\",);\n+        write!(f, \"hello\");\n+        write!(f, \"hello\",);\n+        write!(f, \"hello {}\", \"world\");\n+        write!(f, \"hello {}\", \"world\",);\n     }\n }\n \n test_with_formatter! {\n     #[test]\n     fn writeln(f: &mut fmt::Formatter) {\n-        let _ = writeln!(f);\n-        let _ = writeln!(f,);\n-        let _ = writeln!(f, \"hello\");\n-        let _ = writeln!(f, \"hello\",);\n-        let _ = writeln!(f, \"hello {}\", \"world\");\n-        let _ = writeln!(f, \"hello {}\", \"world\",);\n+        writeln!(f);\n+        writeln!(f,);\n+        writeln!(f, \"hello\");\n+        writeln!(f, \"hello\",);\n+        writeln!(f, \"hello {}\", \"world\");\n+        writeln!(f, \"hello {}\", \"world\",);\n     }\n }"}, {"sha": "d255fac5427b6871e97947f5d120dc4d0dd94aac", "filename": "src/test/ui/issues/issue-49074.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.rs?ref=674a5db1a50e25dd60a8ee6669edee9a366c9fab", "patch": "@@ -20,5 +20,4 @@ mod foo {\n \n fn main() {\n    bar!();\n-   //~^ ERROR cannot find macro `bar!`\n }"}, {"sha": "888222b69cc4e6dc63a9ca2988fd526d2d3072a2", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=674a5db1a50e25dd60a8ee6669edee9a366c9fab", "patch": "@@ -1,11 +1,3 @@\n-error: cannot find macro `bar!` in this scope\n-  --> $DIR/issue-49074.rs:22:4\n-   |\n-LL |    bar!();\n-   |    ^^^\n-   |\n-   = help: have you added the `#[macro_use]` on the module/import?\n-\n error[E0658]: The attribute `marco_use` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/issue-49074.rs:13:1\n    |\n@@ -14,6 +6,6 @@ LL | #[marco_use] // typo\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7e334a0e8e6bd83b289e83c47cf505a3ccc09872", "filename": "src/test/ui/object-lifetime/object-lifetime-default.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/674a5db1a50e25dd60a8ee6669edee9a366c9fab/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr?ref=674a5db1a50e25dd60a8ee6669edee9a366c9fab", "patch": "@@ -1,44 +1,44 @@\n-error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:16:1\n+error: 'a,Ambiguous\n+  --> $DIR/object-lifetime-default.rs:34:1\n    |\n-LL | struct A<T>(T); //~ ERROR BaseDefault\n-   | ^^^^^^^^^^^^^^^\n+LL | struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U); //~ ERROR 'a,Ambiguous\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:19:1\n+error: 'a,'b\n+  --> $DIR/object-lifetime-default.rs:31:1\n    |\n-LL | struct B<'a,T>(&'a (), T); //~ ERROR BaseDefault\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U); //~ ERROR 'a,'b\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'a\n-  --> $DIR/object-lifetime-default.rs:22:1\n+error: 'b\n+  --> $DIR/object-lifetime-default.rs:28:1\n    |\n-LL | struct C<'a,T:'a>(&'a T); //~ ERROR 'a\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct E<'a,'b:'a,T:'b>(&'a T, &'b T); //~ ERROR 'b\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Ambiguous\n   --> $DIR/object-lifetime-default.rs:25:1\n    |\n LL | struct D<'a,'b,T:'a+'b>(&'a T, &'b T); //~ ERROR Ambiguous\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'b\n-  --> $DIR/object-lifetime-default.rs:28:1\n+error: 'a\n+  --> $DIR/object-lifetime-default.rs:22:1\n    |\n-LL | struct E<'a,'b:'a,T:'b>(&'a T, &'b T); //~ ERROR 'b\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct C<'a,T:'a>(&'a T); //~ ERROR 'a\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'a,'b\n-  --> $DIR/object-lifetime-default.rs:31:1\n+error: BaseDefault\n+  --> $DIR/object-lifetime-default.rs:19:1\n    |\n-LL | struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U); //~ ERROR 'a,'b\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct B<'a,T>(&'a (), T); //~ ERROR BaseDefault\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'a,Ambiguous\n-  --> $DIR/object-lifetime-default.rs:34:1\n+error: BaseDefault\n+  --> $DIR/object-lifetime-default.rs:16:1\n    |\n-LL | struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U); //~ ERROR 'a,Ambiguous\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct A<T>(T); //~ ERROR BaseDefault\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}