{"sha": "6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGQyN2Q5MzY4ZTI5ODJiZWY4ZTFjNGFjMTRkNjIyYzVhZDAxOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T20:11:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T20:11:25Z"}, "message": "Auto merge of #63059 - Centril:sound-bind-by-move, r=matthewjasper\n\nMake `#![feature(bind_by_move_pattern_guards)]` sound without `#[feature(nll)]`\n\nImplements https://github.com/rust-lang/rust/issues/15287#issuecomment-507054617 making `#![feature(bind_by_move_pattern_guards)]]` sound without also having `#![feature(nll)]`. The logic here is that if we see a `match` guard, we will refuse to downgrade NLL errors to warnings. This is in preparation for hopefully stabilizing the former feature in https://github.com/rust-lang/rust/pull/63118.\n\nAs fall out from the implementation we also:\nFixes https://github.com/rust-lang/rust/issues/31287\nFixes https://github.com/rust-lang/rust/issues/27282\n\nr? @matthewjasper", "tree": {"sha": "c18d17348428ddb0ed94c34003297c090008ba36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18d17348428ddb0ed94c34003297c090008ba36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "html_url": "https://github.com/rust-lang/rust/commit/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452087b4bf18cece2d52d7cd8c9147195e5404bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/452087b4bf18cece2d52d7cd8c9147195e5404bf", "html_url": "https://github.com/rust-lang/rust/commit/452087b4bf18cece2d52d7cd8c9147195e5404bf"}, {"sha": "b289f6f2a402e33e70804522f6b949d0e847fb55", "url": "https://api.github.com/repos/rust-lang/rust/commits/b289f6f2a402e33e70804522f6b949d0e847fb55", "html_url": "https://github.com/rust-lang/rust/commit/b289f6f2a402e33e70804522f6b949d0e847fb55"}], "stats": {"total": 391, "additions": 205, "deletions": 186}, "files": [{"sha": "5ab1b90642a6aeca10cca42616910a2b47fc2252", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -461,7 +461,7 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        query check_match(key: DefId) -> () {\n+        query check_match(key: DefId) -> SignalledError {\n             cache_on_disk_if { key.is_local() }\n         }\n "}, {"sha": "fb2ad2aa54d7affedadaa6c5fb0819361a7c45d8", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -4,7 +4,7 @@ use crate::hir::def::{DefKind, Export};\n use crate::hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n-use crate::middle::borrowck::BorrowCheckResult;\n+use crate::middle::borrowck::{BorrowCheckResult, SignalledError};\n use crate::middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary, ForeignModule};\n use crate::middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n use crate::middle::privacy::AccessLevels;"}, {"sha": "3bbd7ae5c352f80deea01b64aff840de6a0b9ce2", "filename": "src/librustc_ast_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_ast_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_ast_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_borrowck%2Fborrowck%2Fmod.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -66,6 +66,13 @@ fn borrowck(tcx: TyCtxt<'_>, owner_def_id: DefId) -> &BorrowCheckResult {\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n \n+    let signalled_error = tcx.check_match(owner_def_id);\n+    if let SignalledError::SawSomeError = signalled_error {\n+        return tcx.arena.alloc(BorrowCheckResult {\n+            signalled_any_error: SignalledError::SawSomeError,\n+        })\n+    }\n+\n     let owner_id = tcx.hir().as_local_hir_id(owner_def_id).unwrap();\n \n     match tcx.hir().get(owner_id) {"}, {"sha": "2afffd71fe2066dec22430cb59b07f3c12772fe6", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1989,7 +1989,7 @@ When matching on a variable it cannot be mutated in the match guards, as this\n could cause the match to be non-exhaustive:\n \n ```compile_fail,E0510\n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n let mut x = Some(0);\n match x {\n     None => (),"}, {"sha": "17fd9377a1629884b9465c1d182f3408edd6b041", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -4,6 +4,7 @@ use super::_match::WitnessPreference::*;\n \n use super::{Pattern, PatternContext, PatternError, PatternKind};\n \n+use rustc::middle::borrowck::SignalledError;\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n@@ -26,21 +27,24 @@ use std::slice;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n+crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) -> SignalledError {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n-        return;\n+        return SignalledError::NoErrorsSeen;\n     };\n \n-    MatchVisitor {\n+    let mut visitor = MatchVisitor {\n         tcx,\n         body_owner: def_id,\n         tables: tcx.body_tables(body_id),\n         region_scope_tree: &tcx.region_scope_tree(def_id),\n         param_env: tcx.param_env(def_id),\n         identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n-    }.visit_body(tcx.hir().body(body_id));\n+        signalled_error: SignalledError::NoErrorsSeen,\n+    };\n+    visitor.visit_body(tcx.hir().body(body_id));\n+    visitor.signalled_error\n }\n \n fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBuilder<'_> {\n@@ -54,6 +58,7 @@ struct MatchVisitor<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: SubstsRef<'tcx>,\n     region_scope_tree: &'a region::ScopeTree,\n+    signalled_error: SignalledError,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n@@ -64,11 +69,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         intravisit::walk_expr(self, ex);\n \n-        match ex.node {\n-            hir::ExprKind::Match(ref scrut, ref arms, source) => {\n-                self.check_match(scrut, arms, source);\n-            }\n-            _ => {}\n+        if let hir::ExprKind::Match(ref scrut, ref arms, source) = ex.node {\n+            self.check_match(scrut, arms, source);\n         }\n     }\n \n@@ -130,26 +132,27 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n-    fn check_patterns(&self, has_guard: bool, pats: &[P<Pat>]) {\n+    fn check_patterns(&mut self, has_guard: bool, pats: &[P<Pat>]) {\n         check_legality_of_move_bindings(self, has_guard, pats);\n         for pat in pats {\n             check_legality_of_bindings_in_at_patterns(self, pat);\n         }\n     }\n \n     fn check_match(\n-        &self,\n+        &mut self,\n         scrut: &hir::Expr,\n         arms: &'tcx [hir::Arm],\n-        source: hir::MatchSource)\n-    {\n+        source: hir::MatchSource\n+    ) {\n         for arm in arms {\n             // First, check legality of move bindings.\n             self.check_patterns(arm.guard.is_some(), &arm.pats);\n \n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n             if let Some(ref guard) = arm.guard {\n+                self.signalled_error = SignalledError::SawSomeError;\n                 if !self.tcx.features().bind_by_move_pattern_guards {\n                     check_for_mutation_in_guard(self, &guard);\n                 }\n@@ -548,7 +551,7 @@ fn maybe_point_at_variant(\n \n // Legality of move bindings checking\n fn check_legality_of_move_bindings(\n-    cx: &MatchVisitor<'_, '_>,\n+    cx: &mut MatchVisitor<'_, '_>,\n     has_guard: bool,\n     pats: &[P<Pat>],\n ) {\n@@ -565,7 +568,12 @@ fn check_legality_of_move_bindings(\n         })\n     }\n     let span_vec = &mut Vec::new();\n-    let check_move = |p: &Pat, sub: Option<&Pat>, span_vec: &mut Vec<Span>| {\n+    let check_move = |\n+        cx: &mut MatchVisitor<'_, '_>,\n+        p: &Pat,\n+        sub: Option<&Pat>,\n+        span_vec: &mut Vec<Span>,\n+    | {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n@@ -574,15 +582,17 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard && !cx.tcx.features().bind_by_move_pattern_guards {\n-            let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                                           \"cannot bind by-move into a pattern guard\");\n-            err.span_label(p.span, \"moves value into pattern guard\");\n-            if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n-                          crate attributes to enable\");\n+        } else if has_guard {\n+            if !cx.tcx.features().bind_by_move_pattern_guards {\n+                let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n+                                            \"cannot bind by-move into a pattern guard\");\n+                err.span_label(p.span, \"moves value into pattern guard\");\n+                if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n+                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n+                            crate attributes to enable\");\n+                }\n+                err.emit();\n             }\n-            err.emit();\n         } else if let Some(_by_ref_span) = by_ref_span {\n             span_vec.push(p.span);\n         }\n@@ -596,7 +606,7 @@ fn check_legality_of_move_bindings(\n                         ty::BindByValue(..) => {\n                             let pat_ty = cx.tables.node_type(p.hir_id);\n                             if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n-                                check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n+                                check_move(cx, p, sub.as_ref().map(|p| &**p), span_vec);\n                             }\n                         }\n                         _ => {}"}, {"sha": "a33a1d00a57869bcb33fe0b15757001925adacd3", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,14 +1,14 @@\n-warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n+warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-migrate-to-nll.rs:28:21\n    |\n-LL |                 (|| { let bar = foo; bar.take() })();\n-   |                  ^^             ---\n-   |                  |              |\n-   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n-   |                  |              move occurs due to use in closure\n-   |                  move out of `foo` occurs here\n+LL |     let x = &mut block;\n+   |             ---------- mutable borrow occurs here\n+LL |     let p: &'a u8 = &*block.current;\n+   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n+LL |     // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n+LL |     drop(x);\n+   |          - mutable borrow later used here\n    |\n-   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n    = note: for more information, try `rustc --explain E0729`"}, {"sha": "6dda317e57efefce460ced9d5fe242870ac490f0", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,4 +1,4 @@\n-// This is a test of the borrowck migrate mode. It leverages #27282, a\n+// This is a test of the borrowck migrate mode. It leverages #38899, a\n // bug that is fixed by NLL: this code is (unsoundly) accepted by\n // AST-borrowck, but is correctly rejected by the NLL borrowck.\n //\n@@ -18,15 +18,17 @@\n //[zflag] run-pass\n //[edition] run-pass\n \n-fn main() {\n-    match Some(&4) {\n-        None => {},\n-        ref mut foo\n-            if {\n-                (|| { let bar = foo; bar.take() })();\n-                false\n-            } => {},\n-        Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n-        _ => println!(\"Here is some supposedly unreachable code.\"),\n-    }\n+pub struct Block<'a> {\n+    current: &'a u8,\n+    unrelated: &'a u8,\n }\n+\n+fn bump<'a>(mut block: &mut Block<'a>) {\n+    let x = &mut block;\n+    let p: &'a u8 = &*block.current;\n+    // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n+    drop(x);\n+    drop(p);\n+}\n+\n+fn main() {}"}, {"sha": "a33a1d00a57869bcb33fe0b15757001925adacd3", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,14 +1,14 @@\n-warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n+warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-migrate-to-nll.rs:28:21\n    |\n-LL |                 (|| { let bar = foo; bar.take() })();\n-   |                  ^^             ---\n-   |                  |              |\n-   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n-   |                  |              move occurs due to use in closure\n-   |                  move out of `foo` occurs here\n+LL |     let x = &mut block;\n+   |             ---------- mutable borrow occurs here\n+LL |     let p: &'a u8 = &*block.current;\n+   |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n+LL |     // (use `x` and `p` so enabling NLL doesn't assign overly short lifetimes)\n+LL |     drop(x);\n+   |          - mutable borrow later used here\n    |\n-   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n    = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n    = note: for more information, try `rustc --explain E0729`"}, {"sha": "43b578e9f1eafff439d47ca4ab816522f34e271c", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/452087b4bf18cece2d52d7cd8c9147195e5404bf/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452087b4bf18cece2d52d7cd8c9147195e5404bf/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=452087b4bf18cece2d52d7cd8c9147195e5404bf", "patch": "@@ -1,41 +0,0 @@\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n-   |\n-LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n-error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:38\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                      ^ borrowed mutably in pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:41\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n-error[E0510]: cannot assign `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n-   |\n-LL |     match x {\n-   |           - value is immutable in match guard\n-LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-   |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n-\n-error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:33\n-   |\n-LL |     match x {\n-   |           - value is immutable in match guard\n-...\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                 ^^^^^^ cannot mutably borrow\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0301, E0302, E0510.\n-For more information about an error, try `rustc --explain E0301`."}, {"sha": "5b6aa7a979be5678d2c83c65fd0bf7e604ff88cd", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -9,15 +9,11 @@ fn foo() -> isize {\n     match x {\n         Enum::A(_) if { x = Enum::B(false); false } => 1,\n         //~^ ERROR cannot assign in a pattern guard\n-        //~| WARN cannot assign `x` in match guard\n-        //~| WARN this error has been downgraded to a warning for backwards compatibility\n-        //~| WARN this represents potential undefined behavior in your code and this warning will\n+        //~| ERROR cannot assign `x` in match guard\n         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n         //~^ ERROR cannot mutably borrow in a pattern guard\n         //~| ERROR cannot assign in a pattern guard\n-        //~| WARN cannot mutably borrow `x` in match guard\n-        //~| WARN this error has been downgraded to a warning for backwards compatibility\n-        //~| WARN this represents potential undefined behavior in your code and this warning will\n+        //~| ERROR cannot mutably borrow `x` in match guard\n         Enum::A(p) => *p,\n         Enum::B(_) => 2,\n     }"}, {"sha": "674f137dbb043cb8033ec1c2c9ed64370f0f06c8", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -5,45 +5,37 @@ LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n \n error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:38\n+  --> $DIR/borrowck-mutate-in-guard.rs:13:38\n    |\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                      ^ borrowed mutably in pattern guard\n    |\n    = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:41\n+  --> $DIR/borrowck-mutate-in-guard.rs:13:41\n    |\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n \n-warning[E0510]: cannot assign `x` in match guard\n+error[E0510]: cannot assign `x` in match guard\n   --> $DIR/borrowck-mutate-in-guard.rs:10:25\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-warning[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:15:33\n+error[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:13:33\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                 ^^^^^^ cannot mutably borrow\n-   |\n-   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n-   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n-   = note: for more information, try `rustc --explain E0729`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0301, E0302, E0510.\n For more information about an error, try `rustc --explain E0301`."}, {"sha": "395c7d214d0ce03b356b6b36b59472ab71e49df6", "filename": "src/test/ui/borrowck/issue-27282-mutation-in-guard.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if {\n+                (|| { let bar = foo; bar.take() })();\n+                //~^ ERROR cannot move out of `foo` in pattern guard\n+                false\n+            } => {},\n+        Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n+        _ => println!(\"Here is some supposedly unreachable code.\"),\n+    }\n+}"}, {"sha": "ea7df7d5a7b617eb1c6d5ffbed12f7ba266a2c14", "filename": "src/test/ui/borrowck/issue-27282-mutation-in-guard.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-mutation-in-guard.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-mutation-in-guard.rs:6:18\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                  ^^             ---\n+   |                  |              |\n+   |                  |              move occurs because `foo` has type `&mut std::option::Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |              move occurs due to use in closure\n+   |                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "07125b98a1f7d10ad744d63da681b0cdd2738a9a", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a = Some(\"...\".to_owned());\n+    let b = match a {\n+        Some(_) if { drop(a); false } => None,\n+        x => x, //~ ERROR use of moved value: `a`\n+    };\n+    println!(\"{:?}\", b);\n+}"}, {"sha": "85c83ec4d70edaee34d33f8a1adac69ea62a7dbe", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/issue-31287-drop-in-guard.rs:5:9\n+   |\n+LL |     let a = Some(\"...\".to_owned());\n+   |         - move occurs because `a` has type `std::option::Option<std::string::String>`, which does not implement the `Copy` trait\n+LL |     let b = match a {\n+LL |         Some(_) if { drop(a); false } => None,\n+   |                           - value moved here\n+LL |         x => x,\n+   |         ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "1ffb7f6fd4acd0f2f692ae9aaf863a9ffae9d8bc", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -5,9 +5,7 @@\n // reject it. But I want to make sure that we continue to reject it\n // (under NLL) even when that conservaive check goes away.\n \n-\n #![feature(bind_by_move_pattern_guards)]\n-#![feature(nll)]\n \n fn main() {\n     let mut b = &mut true;"}, {"sha": "a8eb78b7cc007c01bf2e8ff2b5b28b8747bc13b4", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:16:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                   - mutable borrow occurs due to use of `r` in closure"}, {"sha": "49e0dfaa3eb84b6194eb6b995fa6bca7e23403d5", "filename": "src/test/ui/match/match-ref-mut-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -3,7 +3,7 @@\n \n // run-pass\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n \n // Test that z always point to the same temporary.\n fn referent_stability() {"}, {"sha": "94e4a763866f6dbad776ee5e7f77fa4434a86e2e", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,7 +1,7 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n \n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n@@ -41,18 +41,4 @@ fn guard_may_be_taken(y: bool) {\n     };\n }\n \n-fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n-    let r = &mut y.1;\n-    // We don't actually test y.1 to select the second arm, but we don't want\n-    // borrowck results to be based on the order we match patterns.\n-    match y {\n-        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n-        (true, _) => {\n-            r;\n-            2\n-        }\n-        (false, _) => 3,\n-    };\n-}\n-\n fn main() {}"}, {"sha": "b1e0fa739769a3b5545124aefddacd66f76462e8", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -16,19 +16,7 @@ LL |         true => {\n LL |             x;\n    |             ^ value used here after move\n \n-error[E0503]: cannot use `y.1` because it was mutably borrowed\n-  --> $DIR/match-cfg-fake-edges.rs:49:17\n-   |\n-LL |     let r = &mut y.1;\n-   |             -------- borrow of `y.1` occurs here\n-...\n-LL |         (false, true) => 1,\n-   |                 ^^^^ use of borrowed `y.1`\n-LL |         (true, _) => {\n-LL |             r;\n-   |             - borrow later used here\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0381, E0382, E0503.\n+Some errors have detailed explanations: E0381, E0382.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "84c0dec2fe5cd374e51efdd84423b5d4d5ce55f8", "filename": "src/test/ui/nll/match-cfg-fake-edges2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,20 @@\n+// Test that we have enough false edges to avoid exposing the exact matching\n+// algorithm in borrow checking.\n+\n+#![feature(nll)]\n+\n+fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n+    let r = &mut y.1;\n+    // We don't actually test y.1 to select the second arm, but we don't want\n+    // borrowck results to be based on the order we match patterns.\n+    match y {\n+        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n+        (true, _) => {\n+            r;\n+            2\n+        }\n+        (false, _) => 3,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "eab89658e79be3fb6dc28c1f0c901de52b058826", "filename": "src/test/ui/nll/match-cfg-fake-edges2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `y.1` because it was mutably borrowed\n+  --> $DIR/match-cfg-fake-edges2.rs:11:17\n+   |\n+LL |     let r = &mut y.1;\n+   |             -------- borrow of `y.1` occurs here\n+...\n+LL |         (false, true) => 1,\n+   |                 ^^^^ use of borrowed `y.1`\n+LL |         (true, _) => {\n+LL |             r;\n+   |             - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "601c46ff86cc7766554e44fcbb0e3499e11a1364", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -5,9 +5,7 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-\n #![feature(bind_by_move_pattern_guards)]\n-#![feature(nll)]\n \n fn ok_mutation_in_guard(mut q: i32) {\n     match q {"}, {"sha": "b2951fd339da4506c04648447fab5f35fe8b9068", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:59:13\n+  --> $DIR/match-guards-partially-borrow.rs:57:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n@@ -8,7 +8,7 @@ LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:71:13\n+  --> $DIR/match-guards-partially-borrow.rs:69:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +17,7 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:95:13\n+  --> $DIR/match-guards-partially-borrow.rs:93:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +26,7 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:109:22\n+  --> $DIR/match-guards-partially-borrow.rs:107:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +35,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:121:13\n+  --> $DIR/match-guards-partially-borrow.rs:119:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -46,7 +46,7 @@ LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:132:13\n+  --> $DIR/match-guards-partially-borrow.rs:130:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +55,7 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:143:13\n+  --> $DIR/match-guards-partially-borrow.rs:141:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +64,7 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:155:13\n+  --> $DIR/match-guards-partially-borrow.rs:153:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,7 +73,7 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:166:13\n+  --> $DIR/match-guards-partially-borrow.rs:164:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard"}, {"sha": "e43c8541e6d6d323d7504250f4e7d75ac06a64c7", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -2,7 +2,7 @@\n // rust-lang/rust#2329), that starts passing with this feature in\n // place.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n #![feature(bind_by_move_pattern_guards)]\n \n@@ -12,6 +12,7 @@ fn main() {\n     let (tx, rx) = channel();\n     let x = Some(rx);\n     tx.send(false);\n+    tx.send(false);\n     match x {\n         Some(z) if z.recv().unwrap() => { panic!() },\n         Some(z) => { assert!(!z.recv().unwrap()); },"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n+  --> $DIR/feature-gate.rs:36:1\n    |\n LL | / fn main() {\n LL | |     foo(107)"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n+  --> $DIR/feature-gate.rs:36:1\n    |\n LL | / fn main() {\n LL | |     foo(107)"}, {"sha": "7a7b1c253528f68754ed66d9a8c35fe929a1661c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/feature-gate.rs:33:16\n+  --> $DIR/feature-gate.rs:28:16\n    |\n LL |         A { a: v } if *v == 42 => v,\n    |                ^ moves value into pattern guard"}, {"sha": "69fce0bc775f7e6e6b40c8b151ab950d35e928fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -6,7 +6,7 @@\n \n // gate-test-bind_by_move_pattern_guards\n \n-// revisions: no_gate gate_and_2015 gate_and_2018 gate_and_znll gate_and_feature_nll\n+// revisions: no_gate gate_and_2015 gate_and_2018\n \n // (We're already testing NLL behavior quite explicitly, no need for compare-mode=nll.)\n // ignore-compare-mode-nll\n@@ -15,14 +15,9 @@\n \n #![cfg_attr(gate_and_2015, feature(bind_by_move_pattern_guards))]\n #![cfg_attr(gate_and_2018, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_znll, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_feature_nll, feature(bind_by_move_pattern_guards))]\n-\n-#![cfg_attr(gate_and_feature_nll, feature(nll))]\n \n //[gate_and_2015] edition:2015\n //[gate_and_2018] edition:2018\n-//[gate_and_znll] compile-flags: -Z borrowck=mir\n \n struct A { a: Box<i32> }\n \n@@ -43,5 +38,3 @@ fn main() {\n }\n //[gate_and_2015]~^^^ ERROR compilation successful\n //[gate_and_2018]~^^^^ ERROR compilation successful\n-//[gate_and_znll]~^^^^^ ERROR compilation successful\n-//[gate_and_feature_nll]~^^^^^^ ERROR compilation successful"}, {"sha": "eccb4e417b6949f4d4b995ccbbaa61a1517a4619", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,39 +1,45 @@\n #![feature(bind_by_move_pattern_guards)]\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n struct A { a: Box<i32> }\n \n impl A {\n     fn get(&self) -> i32 { *self.a }\n }\n \n-fn foo(n: i32) {\n+fn foo(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if *v == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n-fn bar(n: i32) {\n+fn bar(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if x.get() == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n-fn baz(n: i32) {\n+fn baz(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if *v.clone() == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n fn main() {\n-    foo(107);\n-    bar(107);\n-    baz(107);\n+    assert_eq!(foo(107), 0);\n+    assert_eq!(foo(42), 42);\n+    assert_eq!(bar(107), 0);\n+    assert_eq!(bar(42), 42);\n+    assert_eq!(baz(107), 0);\n+    assert_eq!(baz(42), 42);\n }"}, {"sha": "602a8e15cb1808494bf65789b71f234013ee6260", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n enum VecWrapper { A(Vec<i32>) }"}, {"sha": "c9e8fc8ee532b67ca9728bf9fe08001aeadd017e", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:8:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "77252a1ce15698f460ade5d9b43162597b1c41e8", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n struct A { a: Box<i32> }"}, {"sha": "a345022cee7c5a28c38ebd956188052df8b32073", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:9:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "f6aaaa5c6eadb4e45d712df3a36f511a0371f159", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0d27d9368e2982bef8e1c4ac14d622c5ad018e/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=6e0d27d9368e2982bef8e1c4ac14d622c5ad018e", "patch": "@@ -50,7 +50,7 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"servo\",\n         repo: \"https://github.com/servo/servo\",\n-        sha: \"987e376ca7a4245dbc3e0c06e963278ee1ac92d1\",\n+        sha: \"caac107ae8145ef2fd20365e2b8fadaf09c2eb3b\",\n         lock: None,\n         // Only test Stylo a.k.a. Quantum CSS, the parts of Servo going into Firefox.\n         // This takes much less time to build than all of Servo and supports stable Rust."}]}