{"sha": "1846f111c987e160f880c6893b834c24ff5b816c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDZmMTExYzk4N2UxNjBmODgwYzY4OTNiODM0YzI0ZmY1YjgxNmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T13:28:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T13:28:21Z"}, "message": "fix return place for __rust_maybe_catch_panic", "tree": {"sha": "c4805dda9eedce6f2d27843cf4fec193a560903d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4805dda9eedce6f2d27843cf4fec193a560903d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1846f111c987e160f880c6893b834c24ff5b816c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1846f111c987e160f880c6893b834c24ff5b816c", "html_url": "https://github.com/rust-lang/rust/commit/1846f111c987e160f880c6893b834c24ff5b816c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1846f111c987e160f880c6893b834c24ff5b816c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc08735acf029e5faf90e65718ed47b185415939", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc08735acf029e5faf90e65718ed47b185415939", "html_url": "https://github.com/rust-lang/rust/commit/dc08735acf029e5faf90e65718ed47b185415939"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "812df49b0b8fa73a9869a635db94b3a2f79a63ed", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1846f111c987e160f880c6893b834c24ff5b816c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1846f111c987e160f880c6893b834c24ff5b816c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=1846f111c987e160f880c6893b834c24ff5b816c", "patch": "@@ -252,11 +252,12 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n                 // Now we make a function call.  TODO: Consider making this re-usable?  EvalContext::step does sth. similar for the TLS dtors,\n                 // and of course eval_main.\n                 let mir = self.load_mir(f_instance.def)?;\n+                let ret_place = MPlaceTy::dangling(self.layout_of(self.tcx.mk_unit())?, &self).into();\n                 self.push_stack_frame(\n                     f_instance,\n                     mir.span,\n                     mir,\n-                    None,\n+                    Some(ret_place),\n                     StackPopCleanup::Goto(Some(ret)), // directly return to caller\n                 )?;\n                 let mut args = self.frame().mir.args_iter();"}]}