{"sha": "81613ad7cf9889a59d0a7233af9e462715945a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjEzYWQ3Y2Y5ODg5YTU5ZDBhNzIzM2FmOWU0NjI3MTU5NDVhNzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-07T17:23:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-07T17:24:10Z"}, "message": "disable tests in Miri", "tree": {"sha": "590990e1cdf5152efaf2522e9c6cf332cfd7e01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/590990e1cdf5152efaf2522e9c6cf332cfd7e01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81613ad7cf9889a59d0a7233af9e462715945a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81613ad7cf9889a59d0a7233af9e462715945a72", "html_url": "https://github.com/rust-lang/rust/commit/81613ad7cf9889a59d0a7233af9e462715945a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81613ad7cf9889a59d0a7233af9e462715945a72/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "html_url": "https://github.com/rust-lang/rust/commit/d30b99f9c23f8e1d6ef993cc94da96510ad709b3"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "7c5a8926126e36dd3f63904aa6f9fabdc06a6170", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::any::Any;\n use std::sync::{Arc, Weak};\n use std::cell::RefCell;"}, {"sha": "c1a1c5d88781ffaa0ba7702c4307d66ab97be574", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -282,6 +282,7 @@ fn assert_covariance() {\n //\n // Destructors must be called exactly once per element.\n #[test]\n+#[cfg(not(miri))]\n fn panic_safe() {\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "653b3f5bcb49d7b62d7b57135f9c346a6da80aa6", "filename": "src/liballoc/tests/btree/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod map;\n mod set;\n "}, {"sha": "809d2bc094aee7637581454f00cd79f9c35fa6c2", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::alloc::{Global, Alloc, Layout, System};\n \n /// https://github.com/rust-lang/rust/issues/45955"}, {"sha": "1be01d1a7ce1a1bbd279007e260df0651f85b7bf", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::any::Any;\n use std::rc::{Rc, Weak};\n use std::cell::RefCell;"}, {"sha": "6d4a30fc36c7a2461766abf9bbdc3939c862940c", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::cell::Cell;\n use std::cmp::Ordering::{Equal, Greater, Less};\n use std::cmp::Ordering;"}, {"sha": "b63945ffe972f83eaa4673e11b1b17a01b7b2c9f", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -31,6 +31,7 @@ fn test_rfind() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_collect() {\n     let empty = \"\";\n     let s: String = empty.chars().collect();\n@@ -118,6 +119,7 @@ fn test_concat_for_different_types() {\n #[test]\n fn test_concat_for_different_lengths() {\n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_concat!(\"\", empty);\n     test_concat!(\"a\", [\"a\"]);\n     test_concat!(\"ab\", [\"a\", \"b\"]);\n@@ -146,6 +148,7 @@ fn test_join_for_different_types() {\n #[test]\n fn test_join_for_different_lengths() {\n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"-\");\n     test_join!(\"a\", [\"a\"], \"-\");\n     test_join!(\"a-b\", [\"a\", \"b\"], \"-\");\n@@ -159,13 +162,15 @@ fn test_join_for_different_lengths_with_long_separator() {\n     assert_eq!(\"\uff5e\uff5e\uff5e\uff5e\uff5e\".len(), 15);\n \n     let empty: &[&str] = &[];\n+    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\", [\"a\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\uff5e\uff5e\uff5e\uff5e\uff5eb\", [\"a\", \"b\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"\uff5e\uff5e\uff5e\uff5e\uff5ea\uff5e\uff5e\uff5e\uff5e\uff5ebc\", [\"\", \"a\", \"bc\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n     assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n@@ -238,6 +243,7 @@ fn test_replacen() {\n #[test]\n fn test_replace() {\n     let a = \"a\";\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".replace(a, \"b\"), \"\");\n     assert_eq!(\"a\".replace(a, \"b\"), \"b\");\n     assert_eq!(\"ab\".replace(a, \"b\"), \"bb\");\n@@ -297,6 +303,7 @@ fn test_replace_pattern() {\n // The current implementation of SliceIndex fails to handle methods\n // orthogonally from range types; therefore, it is worth testing\n // all of the indexing operations on each input.\n+#[cfg(not(miri))]\n mod slice_index {\n     // Test a slicing operation **that should succeed,**\n     // testing it on all of the indexing methods.\n@@ -679,6 +686,7 @@ fn test_str_slice_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_str_slice_rangetoinclusive_notok() {\n     let s = \"abc\u03b1\u03b2\u03b3\";\n     &s[..=3];\n@@ -694,6 +702,7 @@ fn test_str_slicemut_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n@@ -883,6 +892,7 @@ fn test_as_bytes() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_as_bytes_fail() {\n     // Don't double free. (I'm not sure if this exercises the\n     // original problem code path anymore.)\n@@ -972,6 +982,7 @@ fn test_split_at_mut() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n     s.split_at(1);\n@@ -1066,6 +1077,7 @@ fn test_rev_iterator() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(::std::char::from_u32) {\n@@ -1077,6 +1089,7 @@ fn test_chars_decoding() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(::std::char::from_u32) {\n@@ -1306,6 +1319,7 @@ fn test_splitator() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_str_default() {\n     use std::default::Default;\n \n@@ -1365,6 +1379,7 @@ fn test_bool_from_str() {\n     assert_eq!(\"not even a boolean\".parse::<bool>().ok(), None);\n }\n \n+#[cfg(not(miri))]\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n@@ -1375,6 +1390,7 @@ fn check_contains_all_substrings(s: &str) {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n \n@@ -1384,13 +1400,15 @@ fn strslice_issue_16589() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn strslice_issue_16878() {\n     assert!(!\"1234567ah012345678901ah\".contains(\"hah\"));\n     assert!(!\"00abc01234567890123456789abc\".contains(\"bcabc\"));\n }\n \n \n #[test]\n+#[cfg(not(miri))]\n fn test_strslice_contains() {\n     let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n     check_contains_all_substrings(x);\n@@ -1528,6 +1546,7 @@ fn trim_ws() {\n \n #[test]\n fn to_lowercase() {\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".to_lowercase(), \"\");\n     assert_eq!(\"A\u00c9\u01c5a\u00e9 \".to_lowercase(), \"a\u00e9\u01c6a\u00e9 \");\n \n@@ -1561,6 +1580,7 @@ fn to_lowercase() {\n \n #[test]\n fn to_uppercase() {\n+    #[cfg(not(miri))]\n     assert_eq!(\"\".to_uppercase(), \"\");\n     assert_eq!(\"a\u00e9\u01c5\u00df\ufb01\u1f80\".to_uppercase(), \"A\u00c9\u01c4SSFI\u1f08\u0399\");\n }\n@@ -1592,6 +1612,7 @@ fn test_cow_from() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_repeat() {\n     assert_eq!(\"\".repeat(3), \"\");\n     assert_eq!(\"abc\".repeat(0), \"\");"}, {"sha": "7a03848a776e62c31f4239371f5b2957546d7924", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::borrow::Cow;\n use std::collections::CollectionAllocErr::*;\n use std::mem::size_of;"}, {"sha": "b214051e4883fd004b3dfaa13e674097c0e71f27", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use std::borrow::Cow;\n use std::mem::size_of;\n use std::{usize, isize};"}, {"sha": "43b7351ef32994e4f577cc39f4ea85909d5aca4e", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -107,6 +107,7 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_index_out_of_bounds() {\n     let mut deq = VecDeque::new();\n     for i in 1..4 {\n@@ -905,20 +906,24 @@ fn test_append() {\n     // normal append\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append nothing to something\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append something to nothing\n     b.append(&mut a);\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n+    #[cfg(not(miri))]\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), []);\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_append_permutations() {\n     fn construct_vec_deque(\n         push_back: usize,\n@@ -1119,6 +1124,7 @@ fn test_reserve_exact_2() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -1220,6 +1226,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "73bdaab5861e6bb3f62a7309f0f9360c0bf696b8", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::cell::*;\n use core::default::Default;\n use std::mem::drop;"}, {"sha": "b10b63fc484cb820985485f35cb9201c64503d0b", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod builders;\n mod float;\n mod num;"}, {"sha": "bf3039a7e51e8c33c9c503ae48ebfc495fd3d2a0", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n mod sip;\n \n use std::hash::{Hash, Hasher};"}, {"sha": "9b4c78f8d3b024c5c2d78fff3e7e818e909f029a", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -190,6 +190,7 @@ fn test_iterator_step_by() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_nth() {\n     let mut it = (0..16).step_by(5);\n     assert_eq!(it.nth(0), Some(0));\n@@ -208,6 +209,7 @@ fn test_iterator_step_by_nth() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_nth_overflow() {\n     #[cfg(target_pointer_width = \"8\")]\n     type Bigger = u16;\n@@ -253,12 +255,14 @@ fn test_iterator_step_by_nth_overflow() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_zero() {\n     let mut it = (0..).step_by(0);\n     it.next();\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_iterator_step_by_size_hint() {\n     struct StubSizeHint(usize, Option<usize>);\n     impl Iterator for StubSizeHint {\n@@ -1413,6 +1417,7 @@ fn test_rposition() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_rposition_panic() {\n     let v: [(Box<_>, Box<_>); 4] =\n         [(box 0, box 0), (box 0, box 0),\n@@ -1652,6 +1657,7 @@ fn test_range_inclusive_nth() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_range_step() {\n     #![allow(deprecated)]\n \n@@ -1675,13 +1681,15 @@ fn test_range_step() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_step_by_skip() {\n     assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n     assert_eq!((0..=50).step_by(10).nth(3), Some(30));\n     assert_eq!((200..=255u8).step_by(10).nth(3), Some(230));\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n     assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);"}, {"sha": "ab638e06cc10dbcfc31d65d5c3ed9b4426234763", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::convert::{TryFrom, TryInto};\n use core::cmp::PartialEq;\n use core::fmt::Debug;"}, {"sha": "1ba886ce037ee0eaf426c42e6b2b2241abade460", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -69,6 +69,7 @@ fn test_option_dance() {\n }\n \n #[test] #[should_panic]\n+#[cfg(not(miri))]\n fn test_option_too_much_dance() {\n     struct A;\n     let mut y = Some(A);\n@@ -129,13 +130,15 @@ fn test_unwrap() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_unwrap_panic1() {\n     let x: Option<isize> = None;\n     x.unwrap();\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n fn test_unwrap_panic2() {\n     let x: Option<String> = None;\n     x.unwrap();"}, {"sha": "5784559082266336e030a0050ac452cd0881ffe0", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::ptr::*;\n use core::cell::RefCell;\n "}, {"sha": "7bfd396f68d1700212979c8f6d2c9a217527d99b", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -117,6 +117,7 @@ fn test_unwrap_or_else() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))]\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n@@ -138,6 +139,7 @@ pub fn test_expect_ok() {\n }\n #[test]\n #[should_panic(expected=\"Got expected error: \\\"All good\\\"\")]\n+#[cfg(not(miri))]\n pub fn test_expect_err() {\n     let err: Result<isize, &'static str> = Err(\"All good\");\n     err.expect(\"Got expected error\");\n@@ -151,6 +153,7 @@ pub fn test_expect_err_err() {\n }\n #[test]\n #[should_panic(expected=\"Got expected ok: \\\"All good\\\"\")]\n+#[cfg(not(miri))]\n pub fn test_expect_err_ok() {\n     let err: Result<&'static str, isize> = Ok(\"All good\");\n     err.expect_err(\"Got expected ok\");"}, {"sha": "04d646ea01d038842c2709ce328d633a17fd1f9f", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -782,6 +782,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of range\")]\n+    #[cfg(not(miri))]\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!([0, 1, 2], 0..5, [0, 1, 2]);\n     }\n@@ -791,6 +792,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n+    #[cfg(not(miri))]\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!([0, 1, 2], 0..2, [0, 1, 2]);\n     }\n@@ -840,6 +842,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))]\n                 fn index_fail() {\n                     let v = $data;\n                     let v: &[_] = &v;\n@@ -848,6 +851,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))]\n                 fn index_mut_fail() {\n                     let mut v = $data;\n                     let v: &mut [_] = &mut v;\n@@ -1011,6 +1015,7 @@ fn test_rotate_right() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n+#[cfg(not(miri))]\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n@@ -1166,6 +1171,7 @@ pub mod memchr {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1181,6 +1187,7 @@ fn test_align_to_simple() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_zst() {\n     let bytes = [1, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<()>() };\n@@ -1189,6 +1196,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);\n@@ -1200,6 +1208,7 @@ fn test_align_to_non_trivial() {\n }\n \n #[test]\n+#[cfg(not(miri))]\n fn test_align_to_empty_mid() {\n     use core::mem;\n \n@@ -1297,6 +1306,7 @@ fn test_copy_within() {\n \n #[test]\n #[should_panic(expected = \"src is out of bounds\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_src_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so 14 is out of bounds.\n@@ -1305,13 +1315,15 @@ fn test_copy_within_panics_src_too_long() {\n \n #[test]\n #[should_panic(expected = \"dest is out of bounds\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_dest_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n     bytes.copy_within(0..4, 10);\n }\n #[test]\n #[should_panic(expected = \"src end is before src start\")]\n+#[cfg(not(miri))]\n fn test_copy_within_panics_src_inverted() {\n     let mut bytes = *b\"Hello, World!\";\n     // 2 is greater than 1, so this range is invalid."}, {"sha": "d39bd06930a36a83eb715a47733384ee5a993d82", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81613ad7cf9889a59d0a7233af9e462715945a72/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=81613ad7cf9889a59d0a7233af9e462715945a72", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))]\n+\n use core::time::Duration;\n \n #[test]"}]}