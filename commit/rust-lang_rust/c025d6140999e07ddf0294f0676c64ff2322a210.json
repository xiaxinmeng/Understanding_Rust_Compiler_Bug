{"sha": "c025d6140999e07ddf0294f0676c64ff2322a210", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjVkNjE0MDk5OWUwN2RkZjAyOTRmMDY3NmM2NGZmMjMyMmEyMTA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-12-04T19:17:58Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-12-04T20:05:19Z"}, "message": "Replace usages of `..i + 1` ranges with `..=i`.", "tree": {"sha": "51430da0c1c62d653d24db743ffd5e6f0d39bf8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51430da0c1c62d653d24db743ffd5e6f0d39bf8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c025d6140999e07ddf0294f0676c64ff2322a210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c025d6140999e07ddf0294f0676c64ff2322a210", "html_url": "https://github.com/rust-lang/rust/commit/c025d6140999e07ddf0294f0676c64ff2322a210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c025d6140999e07ddf0294f0676c64ff2322a210/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431e0ab62f7730f11db693c23f48403e4c719f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/431e0ab62f7730f11db693c23f48403e4c719f82", "html_url": "https://github.com/rust-lang/rust/commit/431e0ab62f7730f11db693c23f48403e4c719f82"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "c0adeca4eb5dfd4514dacd70bfec91ff1a630610", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -2795,7 +2795,7 @@ mod tests {\n             // 0, 1, 2, .., len - 1\n             let expected = (0..).take(len).collect::<VecDeque<_>>();\n             for tail_pos in 0..cap {\n-                for to_remove in 0..len + 1 {\n+                for to_remove in 0..=len {\n                     tester.tail = tail_pos;\n                     tester.head = tail_pos;\n                     for i in 0..len {\n@@ -2821,10 +2821,10 @@ mod tests {\n         let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);\n \n         let cap = tester.capacity();\n-        for len in 0..cap + 1 {\n-            for tail in 0..cap + 1 {\n-                for drain_start in 0..len + 1 {\n-                    for drain_end in drain_start..len + 1 {\n+        for len in 0..=cap {\n+            for tail in 0..=cap {\n+                for drain_start in 0..=len {\n+                    for drain_end in drain_start..=len {\n                         tester.tail = tail;\n                         tester.head = tail;\n                         for i in 0..len {\n@@ -2866,10 +2866,10 @@ mod tests {\n         tester.reserve(63);\n         let max_cap = tester.capacity();\n \n-        for len in 0..cap + 1 {\n+        for len in 0..=cap {\n             // 0, 1, 2, .., len - 1\n             let expected = (0..).take(len).collect::<VecDeque<_>>();\n-            for tail_pos in 0..max_cap + 1 {\n+            for tail_pos in 0..=max_cap {\n                 tester.tail = tail_pos;\n                 tester.head = tail_pos;\n                 tester.reserve(63);\n@@ -2899,7 +2899,7 @@ mod tests {\n         // len is the length *before* splitting\n         for len in 0..cap {\n             // index to split at\n-            for at in 0..len + 1 {\n+            for at in 0..=len {\n                 // 0, 1, 2, .., at - 1 (may be empty)\n                 let expected_self = (0..).take(at).collect::<VecDeque<_>>();\n                 // at, at + 1, .., len - 1 (may be empty)\n@@ -2927,7 +2927,7 @@ mod tests {\n     fn test_from_vec() {\n         use vec::Vec;\n         for cap in 0..35 {\n-            for len in 0..cap + 1 {\n+            for len in 0..=cap {\n                 let mut vec = Vec::with_capacity(cap);\n                 vec.extend(0..len);\n "}, {"sha": "b0d8fa6bd69367af27c85c76c55d1b3851bb3ccf", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -318,11 +318,11 @@ fn panic_safe() {\n     const NTEST: usize = 10;\n \n     // don't use 0 in the data -- we want to catch the zeroed-out case.\n-    let data = (1..DATASZ + 1).collect::<Vec<_>>();\n+    let data = (1..=DATASZ).collect::<Vec<_>>();\n \n     // since it's a fuzzy test, run several tries.\n     for _ in 0..NTEST {\n-        for i in 1..DATASZ + 1 {\n+        for i in 1..=DATASZ {\n             DROP_COUNTER.store(0, Ordering::SeqCst);\n \n             let mut panic_ords: Vec<_> = data.iter()"}, {"sha": "33ef13ab811ce80ee6c951375faa3c34b9007a5b", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -302,7 +302,7 @@ fn test_range() {\n     for i in 0..size {\n         for j in i..size {\n             let mut kvs = map.range((Included(&i), Included(&j))).map(|(&k, &v)| (k, v));\n-            let mut pairs = (i..j + 1).map(|i| (i, i));\n+            let mut pairs = (i..=j).map(|i| (i, i));\n \n             for (kv, pair) in kvs.by_ref().zip(pairs.by_ref()) {\n                 assert_eq!(kv, pair);\n@@ -321,7 +321,7 @@ fn test_range_mut() {\n     for i in 0..size {\n         for j in i..size {\n             let mut kvs = map.range_mut((Included(&i), Included(&j))).map(|(&k, &mut v)| (k, v));\n-            let mut pairs = (i..j + 1).map(|i| (i, i));\n+            let mut pairs = (i..=j).map(|i| (i, i));\n \n             for (kv, pair) in kvs.by_ref().zip(pairs.by_ref()) {\n                 assert_eq!(kv, pair);"}, {"sha": "494b36f85417d9fdac22b6c0da9051813376bf46", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -1378,7 +1378,7 @@ fn test_bool_from_str() {\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n-        for j in i+1..s.len() + 1 {\n+        for j in i+1..=s.len() {\n             assert!(s.contains(&s[i..j]));\n         }\n     }"}, {"sha": "1f2a7211c657bec100a3631295a823fe01a6d351", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -861,15 +861,15 @@ fn test_as_slices() {\n         ring.push_back(i);\n \n         let (left, right) = ring.as_slices();\n-        let expected: Vec<_> = (0..i + 1).collect();\n+        let expected: Vec<_> = (0..=i).collect();\n         assert_eq!(left, &expected[..]);\n         assert_eq!(right, []);\n     }\n \n     for j in -last..0 {\n         ring.push_front(j);\n         let (left, right) = ring.as_slices();\n-        let expected_left: Vec<_> = (-last..j + 1).rev().collect();\n+        let expected_left: Vec<_> = (-last..=j).rev().collect();\n         let expected_right: Vec<_> = (0..first).collect();\n         assert_eq!(left, &expected_left[..]);\n         assert_eq!(right, &expected_right[..]);\n@@ -889,15 +889,15 @@ fn test_as_mut_slices() {\n         ring.push_back(i);\n \n         let (left, right) = ring.as_mut_slices();\n-        let expected: Vec<_> = (0..i + 1).collect();\n+        let expected: Vec<_> = (0..=i).collect();\n         assert_eq!(left, &expected[..]);\n         assert_eq!(right, []);\n     }\n \n     for j in -last..0 {\n         ring.push_front(j);\n         let (left, right) = ring.as_mut_slices();\n-        let expected_left: Vec<_> = (-last..j + 1).rev().collect();\n+        let expected_left: Vec<_> = (-last..=j).rev().collect();\n         let expected_right: Vec<_> = (0..first).collect();\n         assert_eq!(left, &expected_left[..]);\n         assert_eq!(right, &expected_right[..]);"}, {"sha": "58d1a780f129c9f841823d5be6774fa36106ab23", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n \n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n-            let missing: Vec<_> = (0 .. max as u32 + 1)\n+            let missing: Vec<_> = (0 ..= max as u32)\n               .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId::from_u32(i)))\n               .collect();\n "}, {"sha": "9028d3f4480115997c7835bfadc8a3a6fc774a74", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -339,7 +339,7 @@ impl<'tcx> Mir<'tcx> {\n     #[inline]\n     pub fn args_iter(&self) -> impl Iterator<Item = Local> {\n         let arg_count = self.arg_count;\n-        (1..arg_count + 1).map(Local::new)\n+        (1..=arg_count).map(Local::new)\n     }\n \n     /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all"}, {"sha": "2ad83fc93ef75c1c089e077ee3cfde9da9c75392", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -571,7 +571,7 @@ impl<S: Semantics> fmt::Display for IeeeFloat<S> {\n             }\n             // Fill with zeros up to precision.\n             if !truncate_zero && precision > digits - 1 {\n-                for _ in 0..precision - digits + 1 {\n+                for _ in 0..=precision - digits {\n                     f.write_char('0')?;\n                 }\n             }\n@@ -1969,7 +1969,7 @@ impl<S: Semantics> IeeeFloat<S> {\n         // in a Limb. When this would overflow do we do a single\n         // bignum multiplication, and then revert again to multiplication\n         // in a Limb.\n-        let mut chars = s[first_sig_digit..last_sig_digit + 1].chars();\n+        let mut chars = s[first_sig_digit..=last_sig_digit].chars();\n         loop {\n             let mut val = 0;\n             let mut multiplier = 1;"}, {"sha": "aa8b53ff3754c586931fae5838da4345aa90b1fd", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -549,7 +549,7 @@ impl EmitterWriter {\n         // 3 |\n         // 4 |   }\n         //   |\n-        for pos in 0..line_len + 1 {\n+        for pos in 0..=line_len {\n             draw_col_separator(buffer, line_offset + pos + 1, width_offset - 2);\n             buffer.putc(line_offset + pos + 1,\n                         width_offset - 2,\n@@ -617,7 +617,7 @@ impl EmitterWriter {\n             let pos = pos + 1;\n \n             if pos > 1 && (annotation.has_label() || annotation.takes_space()) {\n-                for p in line_offset + 1..line_offset + pos + 1 {\n+                for p in line_offset + 1..=line_offset + pos {\n                     buffer.putc(p,\n                                 code_offset + annotation.start_col,\n                                 '|',\n@@ -634,7 +634,7 @@ impl EmitterWriter {\n                     }\n                 }\n                 AnnotationType::MultilineEnd(depth) => {\n-                    for p in line_offset..line_offset + pos + 1 {\n+                    for p in line_offset..=line_offset + pos {\n                         buffer.putc(p,\n                                     width_offset + depth - 1,\n                                     '|',"}, {"sha": "ed1176d04ea7fa778f0aa85be1516b66d32ea072", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -354,7 +354,7 @@ pub fn finalize_session_directory(sess: &Session, svh: Svh) {\n     }\n \n     // State: \"s-{timestamp}-{random-number}-\"\n-    let mut new_sub_dir_name = String::from(&old_sub_dir_name[.. dash_indices[2] + 1]);\n+    let mut new_sub_dir_name = String::from(&old_sub_dir_name[..= dash_indices[2]]);\n \n     // Append the svh\n     base_n::push_str(svh.as_u64() as u128, INT_ENCODE_BASE, &mut new_sub_dir_name);"}, {"sha": "c7512f4b67f25a9de67464eded5038486b8d9d0f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -48,7 +48,7 @@ impl RegionValueElements {\n \n         let mut basic_blocks = IndexVec::with_capacity(num_points);\n         for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n-            basic_blocks.extend((0..bb_data.statements.len() + 1).map(|_| bb));\n+            basic_blocks.extend((0..=bb_data.statements.len()).map(|_| bb));\n         }\n \n         Self {"}, {"sha": "172ff95ed10663318c4221c05d99af5c2b79560e", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // create binding start block for link them by false edges\n         let candidate_count = arms.iter().fold(0, |ac, c| ac + c.patterns.len());\n-        let pre_binding_blocks: Vec<_> = (0..candidate_count + 1)\n+        let pre_binding_blocks: Vec<_> = (0..=candidate_count)\n             .map(|_| self.cfg.start_new_block())\n             .collect();\n "}, {"sha": "5597c679a59e94cafff373d61a11c55198b48c3c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -3614,7 +3614,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let res = self.smart_resolve_path_fragment(\n                 id,\n                 None,\n-                &path[..qself.position + 1],\n+                &path[..=qself.position],\n                 span,\n                 PathSource::TraitItem(ns),\n                 CrateLint::QPathTrait {"}, {"sha": "c2c67c0bbc0e0c692185a2bf63fea3fcc370e55f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -4796,7 +4796,7 @@ impl<'a> fmt::Display for Source<'a> {\n             tmp /= 10;\n         }\n         write!(fmt, \"<pre class=\\\"line-numbers\\\">\")?;\n-        for i in 1..lines + 1 {\n+        for i in 1..=lines {\n             write!(fmt, \"<span id=\\\"{0}\\\">{0:1$}</span>\\n\", i, cols)?;\n         }\n         write!(fmt, \"</pre>\")?;"}, {"sha": "1eea920c62368d8df6a9526efcae508803c7b3c0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -3610,7 +3610,7 @@ mod test_map {\n             for i in 1..1001 {\n                 assert!(m.insert(i, i).is_none());\n \n-                for j in 1..i + 1 {\n+                for j in 1..=i {\n                     let r = m.get(&j);\n                     assert_eq!(r, Some(&j));\n                 }\n@@ -3629,7 +3629,7 @@ mod test_map {\n             for i in 1..1001 {\n                 assert!(m.remove(&i).is_some());\n \n-                for j in 1..i + 1 {\n+                for j in 1..=i {\n                     assert!(!m.contains_key(&j));\n                 }\n "}, {"sha": "7ede050da6c45fc57ec0ca0e478b8d489b61f011", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -918,7 +918,7 @@ impl<W: Write> Write for LineWriter<W> {\n         // some data then we *must* report that we wrote that data, so future\n         // errors are ignored. We set our internal `need_flush` flag, though, in\n         // case flushing fails and we need to try it first next time.\n-        let n = self.inner.write(&buf[..i + 1])?;\n+        let n = self.inner.write(&buf[..=i])?;\n         self.need_flush = true;\n         if self.flush().is_err() || n != i + 1 {\n             return Ok(n)"}, {"sha": "dc97701d889c4325ba9f7ea54df617f246f93f84", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -1261,7 +1261,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n             };\n             match memchr::memchr(delim, available) {\n                 Some(i) => {\n-                    buf.extend_from_slice(&available[..i + 1]);\n+                    buf.extend_from_slice(&available[..=i]);\n                     (true, i + 1)\n                 }\n                 None => {"}, {"sha": "03c1bb54af8a7095e67965ded5d8997415746148", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -487,7 +487,7 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n             } else {\n                 if x == '\"' as u16 {\n                     // Add n+1 backslashes to total 2n+1 before internal '\"'.\n-                    cmd.extend((0..(backslashes + 1)).map(|_| '\\\\' as u16));\n+                    cmd.extend((0..=backslashes).map(|_| '\\\\' as u16));\n                 }\n                 backslashes = 0;\n             }"}, {"sha": "283d28ca6c68b44b637feffa535b3fdf5c15a595", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c025d6140999e07ddf0294f0676c64ff2322a210/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=c025d6140999e07ddf0294f0676c64ff2322a210", "patch": "@@ -20,7 +20,7 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n         return a.chars().count();\n     }\n \n-    let mut dcol: Vec<_> = (0..b.len() + 1).collect();\n+    let mut dcol: Vec<_> = (0..=b.len()).collect();\n     let mut t_last = 0;\n \n     for (i, sc) in a.chars().enumerate() {"}]}