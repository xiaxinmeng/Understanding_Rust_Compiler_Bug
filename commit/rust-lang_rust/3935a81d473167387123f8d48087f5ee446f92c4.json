{"sha": "3935a81d473167387123f8d48087f5ee446f92c4", "node_id": "C_kwDOAAsO6NoAKDM5MzVhODFkNDczMTY3Mzg3MTIzZjhkNDgwODdmNWVlNDQ2ZjkyYzQ", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-13T17:11:42Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:47Z"}, "message": "Migrate trait_impl_difference.rs", "tree": {"sha": "2c11370fc616aa133003337ba5c4c5574d112966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c11370fc616aa133003337ba5c4c5574d112966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3935a81d473167387123f8d48087f5ee446f92c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLksACgkQspeR1Nh4\n40WaTg//SGG6wlggeUGzC0+NpOZK7JbByNJJIrtZBm93V2Tl8K6dQioLQR5sTzc7\nzg6hSaiYcfjD9HK5keyUHbDPBLfcVQNLqZYPeFJFNIOPc+nuW3mVqRid6NP/7bDJ\nNakgQWCD5NCzKQ9/WE0/lZSGMmGJ8GE1mPNIHa3md70EVU74oVdSZN4P/LZuwSdt\na7+SHgqr5a8x28rdWA6P/wkdo39dQzHrg8/E4s+FUY3vo6kj0cOd0L76I5eD2nTd\n0BnXmJ93ctJWKk/1+CjRaRF4fol56hB6Po8Q2TNa3z/1AH18nd1lbPT42CRs+Ca5\n5OVE5ICcZdbymKdhihEvvrI2yyysbT3PZDoXGIG3Uo/o4+loHNdkagFWF9Z2wuMf\nDG9BsV8gAvwcIiyZSlcz4wIJ6DFTHU5Ha8hH9KGaiA3vh5ACWITPUlawD6wfMyfl\nEBc1J01XlvwowBtIFl1owx35Q9UwZmZr1ORCGJy/IDL4iY4o+tjtlnRoBWYGXQ5x\nZV2km6IOxb15pzkYNd4aMaSGVr/3AT/K+NuDzrwdFkHIDSPdDaDDkZlSY3r8pooV\nKQ067iGPYQle/gibqB32zaGCnmSBaClLEXojy/ZDS03XQChZadZg4BbLfptxaAts\nyk1feCZ6mqzraMxGKaxmN2yY0JAaEfU5JHD/wyrUWPoWVdQLJPU=\n=cPUd\n-----END PGP SIGNATURE-----", "payload": "tree 2c11370fc616aa133003337ba5c4c5574d112966\nparent 2118ff401f64789b6a9e64134d6d2797efee4be9\nauthor Nikita Tomashevich <quant3234@gmail.com> 1663089102 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228427 +0300\n\nMigrate trait_impl_difference.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3935a81d473167387123f8d48087f5ee446f92c4", "html_url": "https://github.com/rust-lang/rust/commit/3935a81d473167387123f8d48087f5ee446f92c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3935a81d473167387123f8d48087f5ee446f92c4/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2118ff401f64789b6a9e64134d6d2797efee4be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2118ff401f64789b6a9e64134d6d2797efee4be9", "html_url": "https://github.com/rust-lang/rust/commit/2118ff401f64789b6a9e64134d6d2797efee4be9"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "d28608cf47de27974703e5a731a9b290246f8fde", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=3935a81d473167387123f8d48087f5ee446f92c4", "patch": "@@ -211,3 +211,13 @@ infer_trait_placeholder_mismatch = implementation of `{$trait_def_id}` is not ge\n     .label_satisfy = doesn't satisfy where-clause\n     .label_where = due to a where-clause on `{$def_id}`...\n     .label_dup = implementation of `{$trait_def_id}` is not general enough\n+\n+infer_trait_impl_diff = `impl` item signature doesn't match `trait` item signature\n+    .found = found `{$found}`\n+    .expected = expected `{$expected}`\n+    .expected_found = expected `{$expected}`\n+               {\"   \"}found `{$found}`\n+\n+infer_tid_rel_help = verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+infer_tid_consider_borriwing = consider borrowing this type parameter in the trait\n+infer_tid_param_help = the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`"}, {"sha": "e2579ab7b7ce0c898a29dde91f2aec59d5f183ea", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=3935a81d473167387123f8d48087f5ee446f92c4", "patch": "@@ -581,3 +581,41 @@ pub struct TraitPlaceholderMismatch {\n     #[subdiagnostic]\n     pub actual_impl_expl_notes: Vec<ActualImplExplNotes>,\n }\n+\n+pub struct ConsiderBorrowingParamHelp {\n+    pub spans: Vec<Span>,\n+}\n+\n+impl AddSubdiagnostic for ConsiderBorrowingParamHelp {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        let mut type_param_span: MultiSpan = self.spans.clone().into();\n+        for &span in &self.spans {\n+            type_param_span.push_span_label(span, fluent::infer::tid_consider_borriwing);\n+        }\n+        diag.span_help(type_param_span, fluent::infer::tid_param_help);\n+    }\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[help(infer::tid_rel_help)]\n+pub struct RelationshipHelp;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(infer::trait_impl_diff)]\n+pub struct TraitImplDiff {\n+    #[primary_span]\n+    #[label(infer::found)]\n+    pub sp: Span,\n+    #[label(infer::expected)]\n+    pub trait_sp: Span,\n+    #[note(infer::expected_found)]\n+    pub note: (),\n+    #[subdiagnostic]\n+    pub param_help: ConsiderBorrowingParamHelp,\n+    #[subdiagnostic]\n+    // Seems like subdiagnostics are always pushed to the end, so this one\n+    // also has to be a subdiagnostic to maintain order.\n+    pub rel_help: Option<RelationshipHelp>,\n+    pub expected: String,\n+    pub found: String,\n+}"}, {"sha": "bacd8894a0fa3dc908a671069e450c5f03544245", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3935a81d473167387123f8d48087f5ee446f92c4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=3935a81d473167387123f8d48087f5ee446f92c4", "patch": "@@ -1,10 +1,11 @@\n //! Error Reporting for `impl` items that do not match the obligations from their `trait`.\n \n+use crate::errors::{ConsiderBorrowingParamHelp, RelationshipHelp, TraitImplDiff};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::Subtype;\n use crate::traits::ObligationCauseCode::CompareImplItemObligation;\n-use rustc_errors::{ErrorGuaranteed, MultiSpan};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n@@ -51,10 +52,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         trait_def_id: DefId,\n     ) -> ErrorGuaranteed {\n         let trait_sp = self.tcx().def_span(trait_def_id);\n-        let mut err = self\n-            .tcx()\n-            .sess\n-            .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n \n         // Mark all unnamed regions in the type with a number.\n         // This diagnostic is called in response to lifetime errors, so be informative.\n@@ -91,9 +88,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let found =\n             self.cx.extract_inference_diagnostics_data(found.into(), Some(found_highlight)).name;\n \n-        err.span_label(sp, &format!(\"found `{}`\", found));\n-        err.span_label(trait_sp, &format!(\"expected `{}`\", expected));\n-\n         // Get the span of all the used type parameters in the method.\n         let assoc_item = self.tcx().associated_item(trait_def_id);\n         let mut visitor = TypeParamSpanVisitor { tcx: self.tcx(), types: vec![] };\n@@ -110,26 +104,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n             _ => {}\n         }\n-        let mut type_param_span: MultiSpan = visitor.types.to_vec().into();\n-        for &span in &visitor.types {\n-            type_param_span\n-                .push_span_label(span, \"consider borrowing this type parameter in the trait\");\n-        }\n \n-        err.note(&format!(\"expected `{}`\\n   found `{}`\", expected, found));\n-\n-        err.span_help(\n-            type_param_span,\n-            \"the lifetime requirements from the `impl` do not correspond to the requirements in \\\n-             the `trait`\",\n-        );\n-        if visitor.types.is_empty() {\n-            err.help(\n-                \"verify the lifetime relationships in the `trait` and `impl` between the `self` \\\n-                 argument, the other inputs and its output\",\n-            );\n-        }\n-        err.emit()\n+        let diag = TraitImplDiff {\n+            sp,\n+            trait_sp,\n+            note: (),\n+            param_help: ConsiderBorrowingParamHelp { spans: visitor.types.to_vec() },\n+            rel_help: visitor.types.is_empty().then_some(RelationshipHelp),\n+            expected,\n+            found,\n+        };\n+\n+        self.tcx().sess.emit_err(diag)\n     }\n }\n "}]}