{"sha": "012ff15c94ff44f45c07641bdd0957da6a625591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMmZmMTVjOTRmZjQ0ZjQ1YzA3NjQxYmRkMDk1N2RhNmE2MjU1OTE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-12T20:10:01Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Fix up some tidy-unfriendly spacing", "tree": {"sha": "a58569e556f4d5842782b869667d3fc06ff90cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58569e556f4d5842782b869667d3fc06ff90cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012ff15c94ff44f45c07641bdd0957da6a625591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012ff15c94ff44f45c07641bdd0957da6a625591", "html_url": "https://github.com/rust-lang/rust/commit/012ff15c94ff44f45c07641bdd0957da6a625591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012ff15c94ff44f45c07641bdd0957da6a625591/comments", "author": null, "committer": null, "parents": [{"sha": "2f2c3e178325dc1837badcd7573c2c0905fab979", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2c3e178325dc1837badcd7573c2c0905fab979", "html_url": "https://github.com/rust-lang/rust/commit/2f2c3e178325dc1837badcd7573c2c0905fab979"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "8a5aea853f1c4b3212972c5ce0c8186171177b83", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=012ff15c94ff44f45c07641bdd0957da6a625591", "patch": "@@ -534,7 +534,7 @@ impl EmitterWriter {\n \n             // Put in the spacer between the location and annotated source\n             let buffer_msg_line_offset = buffer.num_lines();\n-            draw_col_separator(&mut buffer, buffer_msg_line_offset, max_line_num_len + 1);\n+            draw_col_separator_no_space(&mut buffer, buffer_msg_line_offset, max_line_num_len + 1);\n \n             // Next, output the annotate source for this file\n             for line_idx in 0..annotated_file.lines.len() {\n@@ -636,7 +636,7 @@ impl EmitterWriter {\n             Ok(()) => {\n                 if !db.children.is_empty() {\n                     let mut buffer = StyledBuffer::new();\n-                    draw_col_separator(&mut buffer, 0, max_line_num_len + 1);\n+                    draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n                     match emit_to_destination(&buffer.render(), &db.level, &mut self.dst) {\n                         Ok(()) => (),\n                         Err(e) => panic!(\"failed to emit error: {}\", e)\n@@ -948,6 +948,10 @@ fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {\n     buffer.puts(line, col, \"| \", Style::LineNumber);\n }\n \n+fn draw_col_separator_no_space(buffer: &mut StyledBuffer, line: usize, col: usize) {\n+    buffer.puts(line, col, \"|\", Style::LineNumber);\n+}\n+\n fn draw_note_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {\n     buffer.puts(line, col, \"= \", Style::LineNumber);\n }\n@@ -1087,4 +1091,4 @@ impl Write for Destination {\n             Raw(ref mut w) => w.flush(),\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "9f8e08e06121738b70826eddeb931456955d3ea3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=012ff15c94ff44f45c07641bdd0957da6a625591", "patch": "@@ -1265,7 +1265,7 @@ r\"blork2.rs:2:1: 2:12\n         println!(\"r#\\\"\\n{}\\\"#\", str);\n         assert_eq!(str, &r#\"\n   --> dummy.txt:11:1\n-   | \n+   |\n 11 |          e-l\u00e4-v\u00e4n\n    |  ^\n \"#[1..]);\n@@ -1333,7 +1333,7 @@ r\"blork2.rs:2:1: 2:12\n \n         let expect_start = &r#\"\n  --> dummy.txt:1:6\n-  | \n+  |\n 1 |  _____aaaaaa____bbbbbb__cccccdd_\n   |       ^^^^^^    ^^^^^^  ^^^^^^^\n \"#[1..];\n@@ -1409,7 +1409,7 @@ r\"blork2.rs:2:1: 2:12\n \n         let expect0 = &r#\"\n    --> dummy.txt:5:1\n-    | \n+    |\n 5   |  ccccc\n     |  ^\n ...\n@@ -1422,7 +1422,7 @@ r\"blork2.rs:2:1: 2:12\n \n         let expect = &r#\"\n    --> dummy.txt:1:1\n-    | \n+    |\n 1   |  aaaaa\n     |  ^\n ...\n@@ -1477,7 +1477,7 @@ fn foo() {\n         let text = make_string(&lines);\n         assert_eq!(&text[..], &\"\n  --> foo.rs:3:2\n-  | \n+  |\n 3 |  \\tbar;\n   |  \\t^^^\n \"[1..]);\n@@ -1510,7 +1510,7 @@ fn foo() {\n         println!(\"text=\\n{}\", text);\n         assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |      vec.push(vec.pop().unwrap());\n   |      ---      ---                - previous borrow ends here\n   |      |        |\n@@ -1580,14 +1580,14 @@ fn bar() {\n         // Note that the `|` remain aligned across both files:\n         assert_eq!(&text[..], &r#\"\n    --> foo.rs:3:14\n-    | \n+    |\n 3   |      vec.push(vec.pop().unwrap());\n     |      ---      ^^^                - c\n     |      |        |\n     |      |        b\n     |      a\n    ::: bar.rs\n-    | \n+    |\n 17  |      vec.push();\n     |      ---       - f\n     |      |\n@@ -1632,7 +1632,7 @@ fn foo() {\n         println!(\"text=\\n{}\", text);\n         assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n-    | \n+    |\n 3   |      let name = find_id(&data, 22).unwrap();\n     |                          ---- immutable borrow begins here\n ...\n@@ -1672,7 +1672,7 @@ fn foo() {\n         println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n         assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |      vec.push(vec.pop().unwrap());\n   |      --------           ------ D\n   |      ||\n@@ -1709,7 +1709,7 @@ fn foo() {\n         println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n         assert_eq!(&text[..], &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |      vec.push(vec.pop().unwrap());\n   |      ---      ---                - previous borrow ends here\n   |      |        |\n@@ -1748,7 +1748,7 @@ fn foo() {\n         println!(\"text=r#\\\"\\n{}\\\".trim_left()\", text);\n         assert_eq!(&text[..], &r#\"\n    ::: foo.rs\n-    | \n+    |\n 4   |      let mut vec2 = vec;\n     |                     --- `vec` moved here because it has type `collections::vec::Vec<i32>`\n ...\n@@ -1785,7 +1785,7 @@ fn foo() {\n         println!(\"text=&r#\\\"\\n{}\\n\\\"#[1..]\", text);\n         assert_eq!(text, &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |      let mut vec = vec![0, 1, 2];\n   |              ---   ---\n 4 |      let mut vec2 = vec;\n@@ -1817,7 +1817,7 @@ impl SomeTrait for () {\n         println!(\"r#\\\"\\n{}\\\"\", text);\n         assert_eq!(text, &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |      fn foo(x: u32) {\n   |      -\n \"#[1..]);\n@@ -1847,7 +1847,7 @@ impl SomeTrait for () {\n         println!(\"r#\\\"\\n{}\\\"\", text);\n         assert_eq!(text, &r#\"\n  ::: foo.rs\n-  | \n+  |\n 2 |      fn foo(x: u32) {\n   |      --------------\n   |      |      |\n@@ -1882,7 +1882,7 @@ impl SomeTrait for () {\n         println!(\"r#\\\"\\n{}\\\"\", text);\n         assert_eq!(text, &r#\"\n  ::: foo.rs\n-  | \n+  |\n 2 |      fn foo(x: u32) {\n   |      --------------\n   |      |      |\n@@ -1928,7 +1928,7 @@ impl SomeTrait for () {\n         println!(\"r#\\\"\\n{}\\\"\", text);\n         assert_eq!(text, &r#\"\n  ::: foo.rs\n-  | \n+  |\n 3 |         let closure = || {\n   |                       - foo\n 4 |             inner\n@@ -1971,7 +1971,7 @@ fn main() {\n         println!(\"r#\\\"\\n{}\\\"\", text);\n         assert_eq!(text, &r#\"\n   --> foo.rs:11:2\n-   | \n+   |\n 11 |  }\n    |   -\n \"#[1..]);"}, {"sha": "ff6920d28ccf90a3647df517a6d4dae074feecdd", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=012ff15c94ff44f45c07641bdd0957da6a625591", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-26480.rs:27:19\n-   | \n+   |\n 27 |                   $arr.len() * size_of($arr[0]));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n $DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n error: non-scalar cast: `_` as `()`\n   --> $DIR/issue-26480.rs:33:19\n-   | \n+   |\n 33 |     ($x:expr) => ($x as ())\n    |                   ^^^^^^^^\n $DIR/issue-26480.rs:39:5: 39:14 note: in this expansion of cast! (defined in $DIR/issue-26480.rs)"}, {"sha": "2903aa08c0a91e744d5ff55bb56028104121df10", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/012ff15c94ff44f45c07641bdd0957da6a625591/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=012ff15c94ff44f45c07641bdd0957da6a625591", "patch": "@@ -1,9 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/main.rs:14:18\n-   | \n+   |\n 14 |     let x: u32 = (\n    |                  ^ expected u32, found ()\n-   | \n+   |\n    = note: expected type `u32`\n    = note:    found type `()`\n "}]}