{"sha": "e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NjliODFiOTNjNDNlOWVmNzJmOWFlMjIwNjI5ZjI4ZjhlNmY3Y2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T15:07:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T15:07:24Z"}, "message": "address remaining remarks and add example for dropping unaligned data", "tree": {"sha": "eae1ecdc887d045e1eb472d948e50c75f5474ac5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae1ecdc887d045e1eb472d948e50c75f5474ac5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "html_url": "https://github.com/rust-lang/rust/commit/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec66fb4b24a95e43908034363b9095ed0ea1afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec66fb4b24a95e43908034363b9095ed0ea1afb", "html_url": "https://github.com/rust-lang/rust/commit/1ec66fb4b24a95e43908034363b9095ed0ea1afb"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "bb599a6707823aa1f99f0a82415c584d4a91ecc8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "patch": "@@ -1117,10 +1117,10 @@ extern \"rust-intrinsic\" {\n     ///\n     /// * `dst` must be properly aligned.\n     ///\n-    /// Additionally, the caller must ensure that writing `count *\n+    /// Additionally, the caller should ensure that writing `count *\n     /// size_of::<T>()` bytes to the given region of memory results in a valid\n-    /// value of `T`. Creating an invalid value of `T` can result in undefined\n-    /// behavior.\n+    /// value of `T`. Using a region of memory typed as a `T` that contains an\n+    /// invalid value of `T` is undefined behavior.\n     ///\n     /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n     /// `0`, the pointer must be non-NULL and properly aligned."}, {"sha": "cc42355643e3d1774f9e210199c4accfd13d6d7e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e869b81b93c43e9ef72f9ae220629f28f8e6f7cf/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e869b81b93c43e9ef72f9ae220629f28f8e6f7cf", "patch": "@@ -106,7 +106,9 @@ pub use intrinsics::write_bytes;\n ///\n /// * `to_drop` must be [valid] for reads.\n ///\n-/// * `to_drop` must be properly aligned.\n+/// * `to_drop` must be properly aligned.  See the example below for how to drop\n+///   an unaligned pointer.\n+\n ///\n /// Additionally, if `T` is not [`Copy`], using the pointed-to value after\n /// calling `drop_in_place` can cause undefined behavior. Note that `*to_drop =\n@@ -137,6 +139,7 @@ pub use intrinsics::write_bytes;\n ///     // Without a call `drop_in_place`, the last item would never be dropped,\n ///     // and the memory it manages would be leaked.\n ///     ptr::drop_in_place(&mut v[1]);\n+///     // Shorten `v` to prevent the last item from being dropped.\n ///     v.set_len(1);\n /// }\n ///\n@@ -145,6 +148,31 @@ pub use intrinsics::write_bytes;\n /// // Ensure that the last item was dropped.\n /// assert!(weak.upgrade().is_none());\n /// ```\n+///\n+/// Drops a potentially unaligned value by copying it to aligned memory first:\n+/// ```\n+/// use std::ptr;\n+/// use std::mem;\n+///\n+/// unsafe fn drop_after_copy<T>(to_drop: *mut T) {\n+///     let mut copy: T = mem::uninitialized();\n+///     let copy = &mut copy as *mut T;\n+///     ptr::copy(to_drop, copy, 1);\n+///     ptr::drop_in_place(copy);\n+/// }\n+///\n+/// #[repr(packed, C)]\n+/// struct Packed {\n+///     _padding: u8,\n+///     unaligned: Vec<i32>,\n+/// }\n+///\n+/// let mut p = Packed { _padding: 0, unaligned: vec![42] };\n+/// unsafe {\n+///     drop_after_copy(&mut p.unaligned as *mut _);\n+///     mem::forget(p);\n+/// }\n+/// ```\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]\n@@ -601,7 +629,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n /// dropping the old value.\n ///\n /// `write` does not drop the contents of `dst`. This is safe, but it could leak\n-/// allocations or resources, so care must be taken not to overwrite an object\n+/// allocations or resources, so care should be taken not to overwrite an object\n /// that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n@@ -676,7 +704,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Unlike [`write`], the pointer may be unaligned.\n ///\n /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it\n-/// could leak allocations or resources, so care must be taken not to overwrite\n+/// could leak allocations or resources, so care should be taken not to overwrite\n /// an object that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n@@ -820,7 +848,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// [`read_volatile`].\n ///\n /// `write_volatile` does not drop the contents of `dst`. This is safe, but it\n-/// could leak allocations or resources, so care must be taken not to overwrite\n+/// could leak allocations or resources, so care should be taken not to overwrite\n /// an object that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the"}]}