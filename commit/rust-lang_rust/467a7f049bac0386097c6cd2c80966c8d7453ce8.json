{"sha": "467a7f049bac0386097c6cd2c80966c8d7453ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2E3ZjA0OWJhYzAzODYwOTdjNmNkMmM4MDk2NmM4ZDc0NTNjZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-23T18:43:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-23T18:43:12Z"}, "message": "Auto merge of #38533 - jseyfried:legacy_custom_derive_deprecation, r=nrc\n\nAllow legacy custom derive authors to disable warnings in downstream crates\n\nThis PR allows legacy custom derive authors to use a pre-deprecated method `registry.register_custom_derive()` instead of `registry.register_syntax_extension()` to avoid downstream deprecation warnings.\n\nr? @nrc", "tree": {"sha": "1ed4cf6d82ab53213ec8f967e808e715af038655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed4cf6d82ab53213ec8f967e808e715af038655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467a7f049bac0386097c6cd2c80966c8d7453ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467a7f049bac0386097c6cd2c80966c8d7453ce8", "html_url": "https://github.com/rust-lang/rust/commit/467a7f049bac0386097c6cd2c80966c8d7453ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467a7f049bac0386097c6cd2c80966c8d7453ce8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b4019f28f3e7f9ae3990ed871cb4917fd9e659", "html_url": "https://github.com/rust-lang/rust/commit/00b4019f28f3e7f9ae3990ed871cb4917fd9e659"}, {"sha": "c12fc66a9d643a6942d0bf4175d1a046e8d808de", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12fc66a9d643a6942d0bf4175d1a046e8d808de", "html_url": "https://github.com/rust-lang/rust/commit/c12fc66a9d643a6942d0bf4175d1a046e8d808de"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "8da9a23f4faad2d5b949592641fafe752a91b279", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -592,6 +592,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         }\n     });\n \n+    let whitelisted_legacy_custom_derives = registry.take_whitelisted_custom_derives();\n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n                    llvm_passes, attributes, mir_passes, .. } = registry;\n \n@@ -631,6 +632,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver =\n         Resolver::new(sess, &krate, make_glob_map, &mut crate_loader, &resolver_arenas);\n+    resolver.whitelisted_legacy_custom_derives = whitelisted_legacy_custom_derives;\n     syntax_ext::register_builtins(&mut resolver, syntax_exts, sess.features.borrow().quote);\n \n     krate = time(time_passes, \"expansion\", || {"}, {"sha": "3700d0295e9639dd50a7a08a85a3263a0d3c92f8", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -64,6 +64,8 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub attributes: Vec<(String, AttributeType)>,\n+\n+    whitelisted_custom_derives: Vec<ast::Name>,\n }\n \n impl<'a> Registry<'a> {\n@@ -80,6 +82,7 @@ impl<'a> Registry<'a> {\n             llvm_passes: vec![],\n             attributes: vec![],\n             mir_passes: Vec::new(),\n+            whitelisted_custom_derives: Vec::new(),\n         }\n     }\n \n@@ -115,6 +118,21 @@ impl<'a> Registry<'a> {\n         }));\n     }\n \n+    /// This can be used in place of `register_syntax_extension` to register legacy custom derives\n+    /// (i.e. attribute syntax extensions whose name begins with `derive_`). Legacy custom\n+    /// derives defined by this function do not trigger deprecation warnings when used.\n+    #[unstable(feature = \"rustc_private\", issue = \"27812\")]\n+    #[rustc_deprecated(since = \"1.15.0\", reason = \"replaced by macros 1.1 (RFC 1861)\")]\n+    pub fn register_custom_derive(&mut self, name: ast::Name, extension: SyntaxExtension) {\n+        assert!(name.as_str().starts_with(\"derive_\"));\n+        self.whitelisted_custom_derives.push(name);\n+        self.register_syntax_extension(name, extension);\n+    }\n+\n+    pub fn take_whitelisted_custom_derives(&mut self) -> Vec<ast::Name> {\n+        ::std::mem::replace(&mut self.whitelisted_custom_derives, Vec::new())\n+    }\n+\n     /// Register a macro of the usual kind.\n     ///\n     /// This is a convenience wrapper for `register_syntax_extension`."}, {"sha": "dbeb8fe63b62f00f6633a313f1f16e8aef3508a1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -1104,6 +1104,7 @@ pub struct Resolver<'a> {\n     lexical_macro_resolutions: Vec<(Name, &'a Cell<LegacyScope<'a>>)>,\n     macro_map: FxHashMap<DefId, Rc<SyntaxExtension>>,\n     macro_exports: Vec<Export>,\n+    pub whitelisted_legacy_custom_derives: Vec<Name>,\n \n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n@@ -1284,6 +1285,7 @@ impl<'a> Resolver<'a> {\n             macro_exports: Vec::new(),\n             invocations: invocations,\n             name_already_seen: FxHashMap(),\n+            whitelisted_legacy_custom_derives: Vec::new(),\n         }\n     }\n "}, {"sha": "b0f72d9f6e871bbf1ff2b2bd6c9bb1ec288ed72e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -122,6 +122,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n         EliminateCrateVar(self).fold_item(item).expect_one(\"\")\n     }\n \n+    fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool {\n+        self.whitelisted_legacy_custom_derives.contains(&name)\n+    }\n+\n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion) {\n         let invocation = self.invocations[&mark];\n         self.collect_def_ids(invocation, expansion);"}, {"sha": "68d261c64f83cfd9180eb036a7fcb8f92bb2b1f1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -516,6 +516,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item>;\n+    fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool;\n \n     fn visit_expansion(&mut self, mark: Mark, expansion: &Expansion);\n     fn add_ext(&mut self, ident: ast::Ident, ext: Rc<SyntaxExtension>);\n@@ -539,6 +540,7 @@ impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> { item }\n+    fn is_whitelisted_legacy_custom_derive(&self, _name: Name) -> bool { false }\n \n     fn visit_expansion(&mut self, _invoc: Mark, _expansion: &Expansion) {}\n     fn add_ext(&mut self, _ident: ast::Ident, _ext: Rc<SyntaxExtension>) {}"}, {"sha": "0511b0d252b60b9fa2c0b4b6873ac0343a76a77c", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -175,8 +175,10 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n                                            feature_gate::GateIssue::Language,\n                                            feature_gate::EXPLAIN_CUSTOM_DERIVE);\n         } else {\n-            cx.span_warn(titem.span, feature_gate::EXPLAIN_DEPR_CUSTOM_DERIVE);\n             let name = Symbol::intern(&format!(\"derive_{}\", tname));\n+            if !cx.resolver.is_whitelisted_legacy_custom_derive(name) {\n+                cx.span_warn(titem.span, feature_gate::EXPLAIN_DEPR_CUSTOM_DERIVE);\n+            }\n             let mitem = cx.meta_word(titem.span, name);\n             new_attributes.push(cx.attribute(mitem.span, mitem));\n         }"}, {"sha": "e46e4fb3766d31420f7ae1bf10bf4390b3b9f796", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7f049bac0386097c6cd2c80966c8d7453ce8/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=467a7f049bac0386097c6cd2c80966c8d7453ce8", "patch": "@@ -31,7 +31,7 @@ use rustc_plugin::Registry;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_syntax_extension(\n+    reg.register_custom_derive(\n         Symbol::intern(\"derive_TotalSum\"),\n         MultiDecorator(box expand));\n }"}]}