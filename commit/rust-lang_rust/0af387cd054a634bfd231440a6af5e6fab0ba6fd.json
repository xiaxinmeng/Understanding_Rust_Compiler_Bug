{"sha": "0af387cd054a634bfd231440a6af5e6fab0ba6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjM4N2NkMDU0YTYzNGJmZDIzMTQ0MGE2YWY1ZTZmYWIwYmE2ZmQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-18T15:20:41Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2017-11-24T06:36:41Z"}, "message": "Querify", "tree": {"sha": "c937960eba11d23b07358ff75eb1842b1061a70e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c937960eba11d23b07358ff75eb1842b1061a70e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af387cd054a634bfd231440a6af5e6fab0ba6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af387cd054a634bfd231440a6af5e6fab0ba6fd", "html_url": "https://github.com/rust-lang/rust/commit/0af387cd054a634bfd231440a6af5e6fab0ba6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af387cd054a634bfd231440a6af5e6fab0ba6fd/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa7b12a782d9354888c51a300528cf85e4f2ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa7b12a782d9354888c51a300528cf85e4f2ce8", "html_url": "https://github.com/rust-lang/rust/commit/efa7b12a782d9354888c51a300528cf85e4f2ce8"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "d44fdd5d9b978d66730b85bfbd32ff33d644c599", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -516,6 +516,7 @@ define_dep_nodes!( <'tcx>\n     [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)> },\n+    [] CheckMatch(DefId),\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },\n     [] SpecializationGraph(DefId),"}, {"sha": "18c60394a8ed5fdc13788eeec7f21fbdb428ee3a", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -37,7 +37,7 @@ use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n-use util::common::{profq_msg, ProfileQueriesMsg};\n+use util::common::{profq_msg, ErrorReported, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_back::PanicStrategy;\n@@ -205,6 +205,9 @@ define_maps! { <'tcx>\n     [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n         -> const_val::EvalResult<'tcx>,\n \n+    [] fn check_match: CheckMatch(DefId)\n+        -> Result<(), ErrorReported>,\n+\n     /// Performs the privacy check and computes \"access levels\".\n     [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n "}, {"sha": "e63365aa4a8b251f20bad5980a7378c323d59426", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -800,6 +800,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::SpecializationGraph => { force!(specialization_graph_of, def_id!()); }\n         DepKind::ObjectSafety => { force!(is_object_safe, def_id!()); }\n         DepKind::TraitImpls => { force!(trait_impls_of, def_id!()); }\n+        DepKind::CheckMatch => { force!(check_match, def_id!()); }\n \n         DepKind::ParamEnv => { force!(param_env, def_id!()); }\n         DepKind::DescribeDef => { force!(describe_def, def_id!()); }"}, {"sha": "c76da589a1b79bd91a2eee8c359aff82613eafd4", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -24,6 +24,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::lint;\n use rustc_errors::DiagnosticBuilder;\n+use rustc::util::common::ErrorReported;\n \n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n@@ -47,17 +48,14 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n                 b: hir::BodyId, s: Span, id: ast::NodeId) {\n         intravisit::walk_fn(self, fk, fd, b, s, id);\n \n-        let def_id = self.tcx.hir.local_def_id(id);\n-\n-        check_body(self.tcx, def_id, b);\n+        check_body(self.tcx, b);\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         intravisit::walk_item(self, item);\n         match item.node {\n             hir::ItemStatic(.., body_id) | hir::ItemConst(.., body_id) => {\n-                let def_id = self.tcx.hir.local_def_id(item.id);\n-                check_body(self.tcx, def_id, body_id);\n+                check_body(self.tcx, body_id);\n             }\n             _ => (),\n         }\n@@ -66,40 +64,53 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         intravisit::walk_impl_item(self, ii);\n         if let hir::ImplItemKind::Const(_, body_id) = ii.node {\n-            let def_id = self.tcx.hir.local_def_id(ii.id);\n-            check_body(self.tcx, def_id, body_id);\n+            check_body(self.tcx, body_id);\n         }\n     }\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n         intravisit::walk_trait_item(self, ti);\n         if let hir::TraitItemKind::Const(_, Some(body_id)) = ti.node {\n-            let def_id = self.tcx.hir.local_def_id(ti.id);\n-            check_body(self.tcx, def_id, body_id);\n+            check_body(self.tcx, body_id);\n         }\n     }\n \n     // Enum variants and types (e.g. `[T; { .. }]`) may have bodies too,\n     // but they are const-evaluated during typeck.\n }\n \n+fn check_body<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    body_id: hir::BodyId,\n+) {\n+    let def_id = tcx.hir.body_owner_def_id(body_id);\n+    let _ = tcx.check_match(def_id);\n+}\n+\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n \n-pub(crate) fn check_body<'a, 'tcx>(\n+pub(crate) fn check_match<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-    body_id: hir::BodyId,\n-) {\n-    MatchVisitor {\n-        tcx,\n-        tables: tcx.body_tables(body_id),\n-        region_scope_tree: &tcx.region_scope_tree(def_id),\n-        param_env: tcx.param_env(def_id),\n-        identity_substs: Substs::identity_for_item(tcx, def_id),\n-    }.visit_body(tcx.hir.body(body_id));\n+) -> Result<(), ErrorReported> {\n+    let body_id = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+        tcx.hir.body_owned_by(id)\n+    } else {\n+        return Ok(());\n+    };\n+\n+    tcx.sess.track_errors(|| {\n+        MatchVisitor {\n+            tcx,\n+            tables: tcx.body_tables(body_id),\n+            region_scope_tree: &tcx.region_scope_tree(def_id),\n+            param_env: tcx.param_env(def_id),\n+            identity_substs: Substs::identity_for_item(tcx, def_id),\n+        }.visit_body(tcx.hir.body(body_id));\n+    })\n }\n \n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {"}, {"sha": "b4b12e994c8f9822387da0035dc6e8c47541799c", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -18,7 +18,6 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::LayoutOf;\n-use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::{Substs, Subst};\n use rustc::util::common::ErrorReported;\n@@ -684,14 +683,7 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n-    *providers = Providers {\n-        const_eval,\n-        ..*providers\n-    };\n-}\n-\n-fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub(crate) fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                         -> EvalResult<'tcx> {\n     let (def_id, substs) = if let Some(resolved) = lookup_const_by_id(tcx, key) {\n@@ -708,14 +700,12 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let body_id = tcx.hir.body_owned_by(id);\n \n         // Do match-check before building MIR\n-        tcx.sess\n-            .track_errors(|| super::check_match::check_body(tcx, def_id, body_id))\n-            .map_err(|_| {\n-                ConstEvalErr {\n-                    span: tcx.def_span(key.value.0),\n-                    kind: MatchCheckError,\n-                }\n-            })?;\n+        if tcx.check_match(def_id).is_err() {\n+            return Err(ConstEvalErr {\n+                span: tcx.def_span(key.value.0),\n+                kind: MatchCheckError,\n+            });\n+        }\n \n         tcx.mir_const_qualif(def_id);\n         tcx.hir.body(body_id)"}, {"sha": "714cead4befda35bd8d4af015e3c89c8e89275ce", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af387cd054a634bfd231440a6af5e6fab0ba6fd/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=0af387cd054a634bfd231440a6af5e6fab0ba6fd", "patch": "@@ -48,5 +48,15 @@ pub mod pattern;\n \n pub use eval::*;\n \n+use rustc::ty::maps::Providers;\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        const_eval: eval::const_eval,\n+        check_match: check_match::check_match,\n+        ..*providers\n+    };\n+}\n+\n // Build the diagnostics array at the end so that the metadata includes error use sites.\n __build_diagnostic_array! { librustc_const_eval, DIAGNOSTICS }"}]}