{"sha": "5376b1c79870c80d0081540c72ae060d3ed5d1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzZiMWM3OTg3MGM4MGQwMDgxNTQwYzcyYWUwNjBkM2VkNWQxZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-05T19:21:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-23T04:14:58Z"}, "message": "librustc: Parse and resolve higher-rank lifetimes in traits.\n\nThey will ICE during typechecking if used, because they depend on trait\nreform.\n\nThis is part of unboxed closures.", "tree": {"sha": "d8191fe6c6eaa83ff613f9024996ee5a5f8355d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8191fe6c6eaa83ff613f9024996ee5a5f8355d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5376b1c79870c80d0081540c72ae060d3ed5d1f5", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5376b1c79870c80d0081540c72ae060d3ed5d1f5", "html_url": "https://github.com/rust-lang/rust/commit/5376b1c79870c80d0081540c72ae060d3ed5d1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5376b1c79870c80d0081540c72ae060d3ed5d1f5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f299ff19ddb3ee4752e6db120689189ab4c4231", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f299ff19ddb3ee4752e6db120689189ab4c4231", "html_url": "https://github.com/rust-lang/rust/commit/3f299ff19ddb3ee4752e6db120689189ab4c4231"}], "stats": {"total": 138, "additions": 128, "deletions": 10}, "files": [{"sha": "42ae877122490072fc2597a86e6ff7b6d573a2e0", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -21,6 +21,7 @@ use driver::session::Session;\n use middle::subst;\n use syntax::ast;\n use syntax::codemap::Span;\n+use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::print::pprust::{lifetime_to_string};\n@@ -98,8 +99,22 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n             ast::ItemTy(_, ref generics) |\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemImpl(ref generics, _, _, _) |\n-            ast::ItemTrait(ref generics, _, _, _) => &generics.lifetimes\n+            ast::ItemTrait(ref generics, _, _, _) => {\n+                self.with(|scope, f| {\n+                    f(EarlyScope(subst::TypeSpace,\n+                                 &generics.lifetimes,\n+                                 scope))\n+                }, |v| v.check_lifetime_defs(&generics.lifetimes));\n+                &generics.lifetimes\n+            }\n+            ast::ItemImpl(ref generics, _, _, _) => {\n+                self.with(|scope, f| {\n+                    f(EarlyScope(subst::TypeSpace,\n+                                 &generics.lifetimes,\n+                                 scope))\n+                }, |v| v.check_lifetime_defs(&generics.lifetimes));\n+                &generics.lifetimes\n+            }\n         };\n \n         self.with(|_, f| f(EarlyScope(subst::TypeSpace, lifetimes, &ROOT_SCOPE)), |v| {\n@@ -155,6 +170,20 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         }\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n+\n+    fn visit_generics(&mut self, generics: &ast::Generics) {\n+        for ty_param in generics.ty_params.iter() {\n+            self.visit_ty_param_bounds(&ty_param.bounds);\n+            match ty_param.default {\n+                Some(ref ty) => self.visit_ty(&**ty),\n+                None => {}\n+            }\n+        }\n+        for predicate in generics.where_clause.predicates.iter() {\n+            self.visit_ident(predicate.span, predicate.ident);\n+            self.visit_ty_param_bounds(&predicate.bounds);\n+        }\n+    }\n }\n \n impl<'a> LifetimeContext<'a> {\n@@ -167,6 +196,47 @@ impl<'a> LifetimeContext<'a> {\n         }))\n     }\n \n+    fn visit_ty_param_bounds(&mut self,\n+                             bounds: &OwnedSlice<ast::TyParamBound>) {\n+        for bound in bounds.iter() {\n+            match *bound {\n+                ast::TraitTyParamBound(ref trait_ref) => {\n+                    self.visit_trait_ref(trait_ref);\n+                }\n+                ast::UnboxedFnTyParamBound(ref fn_decl) => {\n+                    self.visit_unboxed_fn_ty_param_bound(&**fn_decl);\n+                }\n+                ast::RegionTyParamBound(ref lifetime) => {\n+                    self.visit_lifetime_ref(lifetime);\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_trait_ref(&mut self, trait_ref: &ast::TraitRef) {\n+        self.with(|scope, f| {\n+            f(LateScope(trait_ref.ref_id, &trait_ref.lifetimes, scope))\n+        }, |v| {\n+            v.check_lifetime_defs(&trait_ref.lifetimes);\n+            for lifetime in trait_ref.lifetimes.iter() {\n+                v.visit_lifetime_decl(lifetime);\n+            }\n+            v.visit_path(&trait_ref.path, trait_ref.ref_id);\n+        })\n+    }\n+\n+    fn visit_unboxed_fn_ty_param_bound(&mut self,\n+                                       bound: &ast::UnboxedFnBound) {\n+        self.with(|scope, f| {\n+            f(LateScope(bound.ref_id, &bound.lifetimes, scope))\n+        }, |v| {\n+            for argument in bound.decl.inputs.iter() {\n+                v.visit_ty(&*argument.ty);\n+            }\n+            v.visit_ty(&*bound.decl.output);\n+        })\n+    }\n+\n     /// Visits self by adding a scope and handling recursive walk over the contents with `walk`.\n     fn visit_fn_decl(&mut self,\n                      n: ast::NodeId,"}, {"sha": "d35885cbf17ff058ac6c76c915bbdda384ce1bdd", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -1110,6 +1110,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     ast::TraitTyParamBound(ast::TraitRef {\n                         path: new_path,\n                         ref_id: tr.ref_id,\n+                        lifetimes: tr.lifetimes.clone(),\n                     })\n                 }\n             }"}, {"sha": "74c69762be163a02abc69f3ded8dad75788a8ced", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -223,6 +223,7 @@ pub type TyParamBounds = OwnedSlice<TyParamBound>;\n pub struct UnboxedFnBound {\n     pub path: Path,\n     pub decl: P<FnDecl>,\n+    pub lifetimes: Vec<LifetimeDef>,\n     pub ref_id: NodeId,\n }\n \n@@ -1219,6 +1220,7 @@ pub struct Attribute_ {\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n+    pub lifetimes: Vec<LifetimeDef>,\n }\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]"}, {"sha": "0586868eb4584f162ea598b1b90dc04c7952a070", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -435,7 +435,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef {\n         ast::TraitRef {\n             path: path,\n-            ref_id: ast::DUMMY_NODE_ID\n+            ref_id: ast::DUMMY_NODE_ID,\n+            lifetimes: Vec::new(),\n         }\n     }\n "}, {"sha": "91a339a73f7afd7b85fbd0b22b9f1f63d5c34a4e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -668,11 +668,13 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n                 UnboxedFnBound {\n                     ref path,\n                     ref decl,\n+                    ref lifetimes,\n                     ref_id\n                 } => {\n                     UnboxedFnTyParamBound(P(UnboxedFnBound {\n                         path: fld.fold_path(path.clone()),\n                         decl: fld.fold_fn_decl(decl.clone()),\n+                        lifetimes: fld.fold_lifetime_defs(lifetimes.clone()),\n                         ref_id: fld.new_id(ref_id),\n                     }))\n                 }\n@@ -808,10 +810,17 @@ pub fn noop_fold_struct_def<T: Folder>(struct_def: P<StructDef>, fld: &mut T) ->\n     })\n }\n \n-pub fn noop_fold_trait_ref<T: Folder>(TraitRef {ref_id, path}: TraitRef, fld: &mut T) -> TraitRef {\n-    TraitRef {\n-        ref_id: fld.new_id(ref_id),\n+pub fn noop_fold_trait_ref<T: Folder>(p: TraitRef, fld: &mut T) -> TraitRef {\n+    let id = fld.new_id(p.ref_id);\n+    let TraitRef {\n+        path,\n+        lifetimes,\n+        ..\n+    } = p;\n+    ast::TraitRef {\n         path: fld.fold_path(path),\n+        ref_id: id,\n+        lifetimes: fld.fold_lifetime_defs(lifetimes),\n     }\n }\n "}, {"sha": "cbc710821f937d52552c5489213e933e31868574", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -34,7 +34,8 @@ use ast::{FnOnceUnboxedClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod};\n use ast::{Ident, NormalFn, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl};\n-use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, Lit, Lit_};\n+use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy};\n+use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n use ast::{LitNil, LitStr, LitInt, Local, LocalLet};\n use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal};\n@@ -3791,8 +3792,21 @@ impl<'a> Parser<'a> {\n     {\n         let mut result = vec!();\n         loop {\n+            let lifetime_defs = if self.eat(&token::LT) {\n+                let lifetime_defs = self.parse_lifetime_defs();\n+                self.expect_gt();\n+                lifetime_defs\n+            } else {\n+                Vec::new()\n+            };\n             match self.token {\n                 token::LIFETIME(lifetime) => {\n+                    if lifetime_defs.len() > 0 {\n+                        let span = self.last_span;\n+                        self.span_err(span, \"lifetime declarations are not \\\n+                                             allowed here\")\n+                    }\n+\n                     result.push(RegionTyParamBound(ast::Lifetime {\n                         id: ast::DUMMY_NODE_ID,\n                         span: self.span,\n@@ -3818,12 +3832,14 @@ impl<'a> Parser<'a> {\n                                 cf: return_style,\n                                 variadic: false,\n                             }),\n+                            lifetimes: lifetime_defs,\n                             ref_id: ast::DUMMY_NODE_ID,\n                         })));\n                     } else {\n                         result.push(TraitTyParamBound(ast::TraitRef {\n                             path: path,\n                             ref_id: ast::DUMMY_NODE_ID,\n+                            lifetimes: lifetime_defs,\n                         }))\n                     }\n                 }\n@@ -3852,6 +3868,7 @@ impl<'a> Parser<'a> {\n         ast::TraitRef {\n             path: path,\n             ref_id: ast::DUMMY_NODE_ID,\n+            lifetimes: Vec::new(),\n         }\n     }\n \n@@ -4482,8 +4499,11 @@ impl<'a> Parser<'a> {\n             // New-style trait. Reinterpret the type as a trait.\n             let opt_trait_ref = match ty.node {\n                 TyPath(ref path, None, node_id) => {\n-                    Some(TraitRef { path: (*path).clone(),\n-                                    ref_id: node_id })\n+                    Some(TraitRef {\n+                        path: (*path).clone(),\n+                        ref_id: node_id,\n+                        lifetimes: Vec::new(),\n+                    })\n                 }\n                 TyPath(_, Some(_), _) => {\n                     self.span_err(ty.span,"}, {"sha": "1fbd4af8627a9ee8b8802e48932c82733b5a2fbb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -900,6 +900,16 @@ impl<'a> State<'a> {\n     }\n \n     fn print_trait_ref(&mut self, t: &ast::TraitRef) -> IoResult<()> {\n+        if t.lifetimes.len() > 0 {\n+            try!(self.print_generics(&ast::Generics {\n+                lifetimes: t.lifetimes.clone(),\n+                ty_params: OwnedSlice::empty(),\n+                where_clause: ast::WhereClause {\n+                    id: ast::DUMMY_NODE_ID,\n+                    predicates: Vec::new(),\n+                },\n+            }));\n+        }\n         self.print_path(&t.path, false)\n     }\n "}, {"sha": "3b2ed30b76d89866855fc03086ce30ae0a7552c7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -202,7 +202,9 @@ pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,\n \n /// Like with walk_method_helper this doesn't correspond to a method\n /// in Visitor, and so it gets a _helper suffix.\n-pub fn walk_trait_ref_helper<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef) {\n+pub fn walk_trait_ref_helper<'v,V>(visitor: &mut V, trait_ref: &'v TraitRef)\n+                                   where V: Visitor<'v> {\n+    walk_lifetime_decls(visitor, &trait_ref.lifetimes);\n     visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n }\n \n@@ -495,6 +497,7 @@ pub fn walk_ty_param_bounds<'v, V: Visitor<'v>>(visitor: &mut V,\n                     visitor.visit_ty(&*argument.ty)\n                 }\n                 visitor.visit_ty(&*function_declaration.decl.output);\n+                walk_lifetime_decls(visitor, &function_declaration.lifetimes);\n             }\n             RegionTyParamBound(ref lifetime) => {\n                 visitor.visit_lifetime_ref(lifetime);"}, {"sha": "58eaa4c57fe156b56f5f2c8022bded136a75cc25", "filename": "src/test/compile-fail/regions-name-duplicated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Ftest%2Fcompile-fail%2Fregions-name-duplicated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Ftest%2Fcompile-fail%2Fregions-name-duplicated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-duplicated.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct Foo<'a, 'a> { //~ ERROR lifetime name `'a` declared twice\n+//~^ ERROR lifetime name `'a` declared twice\n     x: &'a int\n }\n "}, {"sha": "bc8ca87d7e29defe5e9fcbdb19993f7b20582073", "filename": "src/test/compile-fail/regions-name-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5376b1c79870c80d0081540c72ae060d3ed5d1f5/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs?ref=5376b1c79870c80d0081540c72ae060d3ed5d1f5", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `'static`\n+//~^ ERROR illegal lifetime parameter name: `'static`\n     x: &'static int\n }\n "}]}