{"sha": "0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOGE5ZDc0ZTNiYmVlZDFhZDc4N2UxYjU2M2U2ODg0NDk2NzI4YjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T16:11:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:00:00Z"}, "message": "Unify associated item visitor.", "tree": {"sha": "866064c587ecf5cd185f6aacbf4ad70336f689d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/866064c587ecf5cd185f6aacbf4ad70336f689d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "html_url": "https://github.com/rust-lang/rust/commit/0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c17e3e00273395869f7025f02c4be99c9f99b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c17e3e00273395869f7025f02c4be99c9f99b4", "html_url": "https://github.com/rust-lang/rust/commit/c6c17e3e00273395869f7025f02c4be99c9f99b4"}], "stats": {"total": 114, "additions": 43, "deletions": 71}, "files": [{"sha": "1ee02dcf0c1890fdca040d648d6966c49a6dfa69", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -484,19 +484,19 @@ impl<'a> LoweringContext<'a> {\n                     TraitItemKind::Method(_, None) => {\n                         // Ignore patterns in trait methods without bodies\n                         self.with_hir_id_owner(None, |this| {\n-                            visit::walk_trait_item(this, item)\n+                            visit::walk_assoc_item(this, item)\n                         });\n                     }\n                     _ => self.with_hir_id_owner(Some(item.id), |this| {\n-                        visit::walk_trait_item(this, item);\n+                        visit::walk_assoc_item(this, item);\n                     })\n                 }\n             }\n \n             fn visit_impl_item(&mut self, item: &'tcx ImplItem) {\n                 self.lctx.allocate_hir_id_counter(item.id);\n                 self.with_hir_id_owner(Some(item.id), |this| {\n-                    visit::walk_impl_item(this, item);\n+                    visit::walk_assoc_item(this, item);\n                 });\n             }\n "}, {"sha": "c3d2ed6b39cd21cf3cc86be650b7b77b91a4b2a7", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -94,7 +94,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n             lctx.modules.get_mut(&lctx.current_module).unwrap().trait_items.insert(id);\n         });\n \n-        visit::walk_trait_item(self, item);\n+        visit::walk_assoc_item(self, item);\n     }\n \n     fn visit_impl_item(&mut self, item: &'tcx ImplItem) {\n@@ -104,7 +104,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n             lctx.impl_items.insert(id, hir_item);\n             lctx.modules.get_mut(&lctx.current_module).unwrap().impl_items.insert(id);\n         });\n-        visit::walk_impl_item(self, item);\n+        visit::walk_assoc_item(self, item);\n     }\n }\n "}, {"sha": "e0ec9e62645d4590b7ca290cb15ac9a8082416fe", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -1252,15 +1252,15 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             run_early_pass!(cx, check_trait_item, trait_item);\n-            ast_visit::walk_trait_item(cx, trait_item);\n+            ast_visit::walk_assoc_item(cx, trait_item);\n             run_early_pass!(cx, check_trait_item_post, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'a ast::ImplItem) {\n         self.with_lint_attrs(impl_item.id, &impl_item.attrs, |cx| {\n             run_early_pass!(cx, check_impl_item, impl_item);\n-            ast_visit::walk_impl_item(cx, impl_item);\n+            ast_visit::walk_assoc_item(cx, impl_item);\n             run_early_pass!(cx, check_impl_item_post, impl_item);\n         });\n     }"}, {"sha": "34534d6cca510b1192fd8a4bf20344f8d0edd59d", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -772,28 +772,28 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             |this| visit::walk_enum_def(this, enum_definition, generics, item_id))\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &'a AssocItem) {\n         match &ii.kind {\n-            ImplItemKind::Const(_, body) => {\n+            AssocItemKind::Const(_, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"constant\", \" = <expr>;\");\n             }\n-            ImplItemKind::Method(sig, body) => {\n+            AssocItemKind::Method(sig, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"function\", \" { <body> }\");\n                 self.check_fn_decl(&sig.decl);\n             }\n-            ImplItemKind::TyAlias(bounds, body) => {\n+            AssocItemKind::TyAlias(bounds, body) => {\n                 self.check_impl_item_provided(ii.span, body, \"type\", \" = <type>;\");\n                 self.check_impl_assoc_type_no_bounds(bounds);\n             }\n             _ => {}\n         }\n-        visit::walk_impl_item(self, ii);\n+        visit::walk_assoc_item(self, ii);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'a AssocItem) {\n         self.invalid_visibility(&ti.vis, None);\n         self.check_defaultness(ti.span, ti.defaultness);\n-        visit::walk_trait_item(self, ti);\n+        visit::walk_assoc_item(self, ti);\n     }\n }\n "}, {"sha": "071ed0db87020b098b45a8b4b3f6eb29f648598b", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -316,12 +316,12 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n         self.record(\"TraitItem\", Id::None, ti);\n-        ast_visit::walk_trait_item(self, ti)\n+        ast_visit::walk_assoc_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n         self.record(\"ImplItem\", Id::None, ii);\n-        ast_visit::walk_impl_item(self, ii)\n+        ast_visit::walk_assoc_item(self, ii)\n     }\n \n     fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound) {"}, {"sha": "abed4b326a5f72dd76186a13747cc00371ddc154", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -1190,15 +1190,15 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = self.parent_scope.expansion;\n         self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));\n \n-        visit::walk_trait_item(self, item);\n+        visit::walk_assoc_item(self, item);\n     }\n \n     fn visit_impl_item(&mut self, item: &'b ast::ImplItem) {\n         if let ast::ImplItemKind::Macro(..) = item.kind {\n             self.visit_invoc(item.id);\n         } else {\n             self.resolve_visibility(&item.vis);\n-            visit::walk_impl_item(self, item);\n+            visit::walk_assoc_item(self, item);\n         }\n     }\n "}, {"sha": "248027a91ab3d61e4cfdc4fe80a8219ec22b125c", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -223,7 +223,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         };\n \n         let def = self.create_def(ti.id, def_data, ti.span);\n-        self.with_parent(def, |this| visit::walk_trait_item(this, ti));\n+        self.with_parent(def, |this| visit::walk_assoc_item(this, ti));\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n@@ -249,7 +249,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         };\n \n         let def = self.create_def(ii.id, def_data, ii.span);\n-        self.with_parent(def, |this| visit::walk_impl_item(this, ii));\n+        self.with_parent(def, |this| visit::walk_assoc_item(this, ii));\n     }\n \n     fn visit_pat(&mut self, pat: &'a Pat) {"}, {"sha": "682ddc421c2878fd27e44e923f7b739516f7a9d3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -819,10 +819,10 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                 }\n                                             }\n                                             TraitItemKind::Method(_, _) => {\n-                                                visit::walk_trait_item(this, trait_item)\n+                                                visit::walk_assoc_item(this, trait_item)\n                                             }\n                                             TraitItemKind::TyAlias(..) => {\n-                                                visit::walk_trait_item(this, trait_item)\n+                                                visit::walk_assoc_item(this, trait_item)\n                                             }\n                                             TraitItemKind::Macro(_) => {\n                                                 panic!(\"unexpanded macro in resolve!\")\n@@ -1106,7 +1106,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                 );\n \n                                                 this.with_constant_rib(|this| {\n-                                                    visit::walk_impl_item(this, impl_item)\n+                                                    visit::walk_assoc_item(this, impl_item)\n                                                 });\n                                             }\n                                             ImplItemKind::Method(..) => {\n@@ -1117,7 +1117,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                                                                       impl_item.span,\n                                                     |n, s| MethodNotMemberOfTrait(n, s));\n \n-                                                visit::walk_impl_item(this, impl_item);\n+                                                visit::walk_assoc_item(this, impl_item);\n                                             }\n                                             ImplItemKind::TyAlias(_, Some(ref ty)) => {\n                                                 // If this is a trait impl, ensure the type"}, {"sha": "226719c746061eba2326f1b6aa876a14e94f78c6", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -595,7 +595,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_trait_item(self, ti)\n+        visit::walk_assoc_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'a ast::ImplItem) {\n@@ -620,7 +620,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n             _ => {}\n         }\n-        visit::walk_impl_item(self, ii)\n+        visit::walk_assoc_item(self, ii)\n     }\n \n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {"}, {"sha": "14ca7a7eff30d96a1032876a31e9c6c9e3b107b5", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -75,11 +75,11 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n     }\n     fn visit_trait_item(&mut self, ti: &TraitItem) {\n         self.count += 1;\n-        walk_trait_item(self, ti)\n+        walk_assoc_item(self, ti)\n     }\n     fn visit_impl_item(&mut self, ii: &ImplItem) {\n         self.count += 1;\n-        walk_impl_item(self, ii)\n+        walk_assoc_item(self, ii)\n     }\n     fn visit_trait_ref(&mut self, t: &TraitRef) {\n         self.count += 1;"}, {"sha": "8fe8e136c10b149ed08a5e29c5814cad2153e114", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 15, "deletions": 43, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8a9d74e3bbeed1ad787e1b563e6884496728b2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0d8a9d74e3bbeed1ad787e1b563e6884496728b2", "patch": "@@ -83,8 +83,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl, s: Span, _: NodeId) {\n         walk_fn(self, fk, fd, s)\n     }\n-    fn visit_trait_item(&mut self, ti: &'ast TraitItem) { walk_trait_item(self, ti) }\n-    fn visit_impl_item(&mut self, ii: &'ast ImplItem) { walk_impl_item(self, ii) }\n+    fn visit_trait_item(&mut self, i: &'ast AssocItem) { walk_assoc_item(self, i) }\n+    fn visit_impl_item(&mut self, i: &'ast AssocItem) { walk_assoc_item(self, i) }\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) { walk_trait_ref(self, t) }\n     fn visit_param_bound(&mut self, bounds: &'ast GenericBound) {\n         walk_param_bound(self, bounds)\n@@ -581,57 +581,29 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     }\n }\n \n-pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a TraitItem) {\n-    visitor.visit_vis(&trait_item.vis);\n-    visitor.visit_ident(trait_item.ident);\n-    walk_list!(visitor, visit_attribute, &trait_item.attrs);\n-    visitor.visit_generics(&trait_item.generics);\n-    match trait_item.kind {\n-        TraitItemKind::Const(ref ty, ref default) => {\n-            visitor.visit_ty(ty);\n-            walk_list!(visitor, visit_expr, default);\n-        }\n-        TraitItemKind::Method(ref sig, None) => {\n-            visitor.visit_fn_header(&sig.header);\n-            walk_fn_decl(visitor, &sig.decl);\n-        }\n-        TraitItemKind::Method(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, &trait_item.vis, body),\n-                             &sig.decl, trait_item.span, trait_item.id);\n-        }\n-        TraitItemKind::TyAlias(ref bounds, ref default) => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n-            walk_list!(visitor, visit_ty, default);\n-        }\n-        TraitItemKind::Macro(ref mac) => {\n-            visitor.visit_mac(mac);\n-        }\n-    }\n-}\n-\n-pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplItem) {\n-    visitor.visit_vis(&impl_item.vis);\n-    visitor.visit_ident(impl_item.ident);\n-    walk_list!(visitor, visit_attribute, &impl_item.attrs);\n-    visitor.visit_generics(&impl_item.generics);\n-    match impl_item.kind {\n-        ImplItemKind::Const(ref ty, ref expr) => {\n+pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem) {\n+    visitor.visit_vis(&item.vis);\n+    visitor.visit_ident(item.ident);\n+    walk_list!(visitor, visit_attribute, &item.attrs);\n+    visitor.visit_generics(&item.generics);\n+    match item.kind {\n+        AssocItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ImplItemKind::Method(ref sig, None) => {\n+        AssocItemKind::Method(ref sig, None) => {\n             visitor.visit_fn_header(&sig.header);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n-        ImplItemKind::Method(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, &impl_item.vis, body),\n-                             &sig.decl, impl_item.span, impl_item.id);\n+        AssocItemKind::Method(ref sig, Some(ref body)) => {\n+            visitor.visit_fn(FnKind::Method(item.ident, sig, &item.vis, body),\n+                             &sig.decl, item.span, item.id);\n         }\n-        ImplItemKind::TyAlias(ref bounds, ref ty) => {\n+        AssocItemKind::TyAlias(ref bounds, ref ty) => {\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n         }\n-        ImplItemKind::Macro(ref mac) => {\n+        AssocItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);\n         }\n     }"}]}