{"sha": "e06ce71d0bba5a5482b40f413e54a281a345ad0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNmNlNzFkMGJiYTVhNTQ4MmI0MGY0MTNlNTRhMjgxYTM0NWFkMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-04T06:29:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-04T06:29:14Z"}, "message": "Auto merge of #38552 - eddyb:bad-blocks, r=arielb1\n\nDon't leak the compiler's internal representation of scopes in error messages.\n\nFixes #37884 (actually fixes #27942, which was made worse by #37412) by handling more node types.\nIdeally we'd turn the unknown node type situations into ICEs and fix them as they show up in errors.\nBut we might want to backport this patch so I was less aggressive.", "tree": {"sha": "9aebe4afd4c27e75c657ca3e297975e4ca4326a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aebe4afd4c27e75c657ca3e297975e4ca4326a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e06ce71d0bba5a5482b40f413e54a281a345ad0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e06ce71d0bba5a5482b40f413e54a281a345ad0a", "html_url": "https://github.com/rust-lang/rust/commit/e06ce71d0bba5a5482b40f413e54a281a345ad0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e06ce71d0bba5a5482b40f413e54a281a345ad0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01677eeef2d3536b07dced43d062f4e486fe695c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01677eeef2d3536b07dced43d062f4e486fe695c", "html_url": "https://github.com/rust-lang/rust/commit/01677eeef2d3536b07dced43d062f4e486fe695c"}, {"sha": "987f52f4f5b66aba70abf63d5ba8dd87c212c10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/987f52f4f5b66aba70abf63d5ba8dd87c212c10b", "html_url": "https://github.com/rust-lang/rust/commit/987f52f4f5b66aba70abf63d5ba8dd87c212c10b"}], "stats": {"total": 114, "additions": 99, "deletions": 15}, "files": [{"sha": "095d2a78a94cd993e0b5a0597f07f50006404afc", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=e06ce71d0bba5a5482b40f413e54a281a345ad0a", "patch": "@@ -113,6 +113,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n+        fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str {\n+            match item.node {\n+                hir::TraitItemKind::Method(..) => \"method body\",\n+                hir::TraitItemKind::Const(..) |\n+                hir::TraitItemKind::Type(..) => \"associated item\"\n+            }\n+        }\n+\n+        fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n+            match item.node {\n+                hir::ImplItemKind::Method(..) => \"method body\",\n+                hir::ImplItemKind::Const(..) |\n+                hir::ImplItemKind::Type(_) => \"associated item\"\n+            }\n+        }\n+\n         fn explain_span<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                         heading: &str, span: Span)\n                                         -> (String, Option<Span>) {\n@@ -148,6 +164,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     },\n                     Some(ast_map::NodeStmt(_)) => \"statement\",\n                     Some(ast_map::NodeItem(it)) => item_scope_tag(&it),\n+                    Some(ast_map::NodeTraitItem(it)) => trait_item_scope_tag(&it),\n+                    Some(ast_map::NodeImplItem(it)) => impl_item_scope_tag(&it),\n                     Some(_) | None => {\n                         err.span_note(span, &unknown_scope());\n                         return;\n@@ -186,23 +204,31 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n \n-                match self.map.find(fr.scope.node_id(&self.region_maps)) {\n-                    Some(ast_map::NodeBlock(ref blk)) => {\n-                        let (msg, opt_span) = explain_span(self, \"block\", blk.span);\n-                        (format!(\"{} {}\", prefix, msg), opt_span)\n-                    }\n-                    Some(ast_map::NodeItem(it)) => {\n-                        let tag = item_scope_tag(&it);\n-                        let (msg, opt_span) = explain_span(self, tag, it.span);\n-                        (format!(\"{} {}\", prefix, msg), opt_span)\n+                let node = fr.scope.node_id(&self.region_maps);\n+                let unknown;\n+                let tag = match self.map.find(node) {\n+                    Some(ast_map::NodeBlock(_)) |\n+                    Some(ast_map::NodeExpr(_)) => \"body\",\n+                    Some(ast_map::NodeItem(it)) => item_scope_tag(&it),\n+                    Some(ast_map::NodeTraitItem(it)) => trait_item_scope_tag(&it),\n+                    Some(ast_map::NodeImplItem(it)) => impl_item_scope_tag(&it),\n+\n+                    // this really should not happen, but it does:\n+                    // FIXME(#27942)\n+                    Some(_) => {\n+                        unknown = format!(\"unexpected node ({}) for scope {:?}.  \\\n+                                           Please report a bug.\",\n+                                          self.map.node_to_string(node), fr.scope);\n+                        &unknown\n                     }\n-                    Some(_) | None => {\n-                        // this really should not happen, but it does:\n-                        // FIXME(#27942)\n-                        (format!(\"{} unknown free region bounded by scope {:?}\",\n-                                 prefix, fr.scope), None)\n+                    None => {\n+                        unknown = format!(\"unknown node for scope {:?}.  \\\n+                                           Please report a bug.\", fr.scope);\n+                        &unknown\n                     }\n-                }\n+                };\n+                let (msg, opt_span) = explain_span(self, tag, self.map.span(node));\n+                (format!(\"{} {}\", prefix, msg), opt_span)\n             }\n \n             ty::ReStatic => (\"the static lifetime\".to_owned(), None),"}, {"sha": "b8552794eb5ae5c730e06dcd29a59dc8be20f1da", "filename": "src/test/compile-fail/issue-27942.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27942.rs?ref=e06ce71d0bba5a5482b40f413e54a281a345ad0a", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Resources<'a> {}\n+\n+pub trait Buffer<'a, R: Resources<'a>> {\n+    fn select(&self) -> BufferViewHandle<R>;\n+    //~^ ERROR mismatched types\n+    //~| lifetime mismatch\n+    //~| NOTE expected type `Resources<'_>`\n+    //~| NOTE    found type `Resources<'a>`\n+    //~| NOTE the lifetime 'a as defined on the method body at 14:4...\n+    //~| NOTE ...does not necessarily outlive the anonymous lifetime #1 defined on the method body\n+    //~| ERROR mismatched types\n+    //~| lifetime mismatch\n+    //~| NOTE expected type `Resources<'_>`\n+    //~| NOTE    found type `Resources<'a>`\n+    //~| NOTE the anonymous lifetime #1 defined on the method body at 14:4...\n+    //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the method body\n+}\n+\n+pub struct BufferViewHandle<'a, R: 'a+Resources<'a>>(&'a R);\n+\n+fn main() {}"}, {"sha": "a73b1dbe34cff4430df5cd3d90c811c380805942", "filename": "src/test/compile-fail/issue-37884.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06ce71d0bba5a5482b40f413e54a281a345ad0a/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37884.rs?ref=e06ce71d0bba5a5482b40f413e54a281a345ad0a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct RepeatMut<'a, T>(T, &'a ());\n+\n+impl<'a, T: 'a> Iterator for RepeatMut<'a, T> {\n+    type Item = &'a mut T;\n+    fn next(&'a mut self) -> Option<Self::Item>\n+    //~^ ERROR method not compatible with trait\n+    //~| lifetime mismatch\n+    //~| NOTE expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+    //~| NOTE    found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+    {\n+    //~^ NOTE the anonymous lifetime #1 defined on the body\n+    //~| NOTE ...does not necessarily outlive the lifetime 'a as defined on the body\n+        Some(&mut self.0)\n+    }\n+}\n+\n+fn main() {}"}]}