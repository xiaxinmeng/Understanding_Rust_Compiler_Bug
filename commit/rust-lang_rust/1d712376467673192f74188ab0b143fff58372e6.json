{"sha": "1d712376467673192f74188ab0b143fff58372e6", "node_id": "C_kwDOAAsO6NoAKDFkNzEyMzc2NDY3NjczMTkyZjc0MTg4YWIwYjE0M2ZmZjU4MzcyZTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-02T13:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-02T13:27:01Z"}, "message": "Rollup merge of #97636 - nnethercote:revert-96682, r=dtolnay\n\nRevert #96682.\n\nThe change was \"Show invisible delimiters (within comments) when pretty\nprinting\". It's useful to show these delimiters, but is a breaking\nchange for some proc macros.\n\nFixes #97608.\n\nr? ``@petrochenkov``", "tree": {"sha": "df1f366d10c2b41bcc3cc0a6fc6ad709672f6e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1f366d10c2b41bcc3cc0a6fc6ad709672f6e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d712376467673192f74188ab0b143fff58372e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimLqlCRBK7hj4Ov3rIwAAfNAIAHh8ic2ptJwrcNPnn0ca3r6N\nOzJ+oGWlOhTv1gtQTv22QmobiQbWrSHjMSK4CAliJil8SvYt2hpAXiSKXuPdaxJw\nrAaOYlpDkwpQzywQdGOMOcs1mRia70Eo3Cm9lKYdZuZ/wOMpNMFRW57b5NLfPe8O\nJy0wdwisJalYMkcD4Fn1TvDNzQGP+9xXU9EIQsKgk//ZFWN3pZMOz/5ZZspULMKo\nCgIXa/aevkhrKEyJSqaWIoscZyOVZFwobeVwT4tDiJYduR0ckeiitDnWxP7yXw3S\nqMfpKOyDvl3dRKlZ4+QSWnWTC7oljcAvvgGkNe0EEW92Hm+WIaI5apovHBGECuc=\n=v2TL\n-----END PGP SIGNATURE-----\n", "payload": "tree df1f366d10c2b41bcc3cc0a6fc6ad709672f6e6b\nparent f95e2d34c3926c13ab9cfaee451cc12504808b86\nparent 77e1069a5dfcc662ca2b0e731fa2fca2b6ee073b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654176421 +0200\ncommitter GitHub <noreply@github.com> 1654176421 +0200\n\nRollup merge of #97636 - nnethercote:revert-96682, r=dtolnay\n\nRevert #96682.\n\nThe change was \"Show invisible delimiters (within comments) when pretty\nprinting\". It's useful to show these delimiters, but is a breaking\nchange for some proc macros.\n\nFixes #97608.\n\nr? ``@petrochenkov``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d712376467673192f74188ab0b143fff58372e6", "html_url": "https://github.com/rust-lang/rust/commit/1d712376467673192f74188ab0b143fff58372e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d712376467673192f74188ab0b143fff58372e6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f95e2d34c3926c13ab9cfaee451cc12504808b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95e2d34c3926c13ab9cfaee451cc12504808b86", "html_url": "https://github.com/rust-lang/rust/commit/f95e2d34c3926c13ab9cfaee451cc12504808b86"}, {"sha": "77e1069a5dfcc662ca2b0e731fa2fca2b6ee073b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e1069a5dfcc662ca2b0e731fa2fca2b6ee073b", "html_url": "https://github.com/rust-lang/rust/commit/77e1069a5dfcc662ca2b0e731fa2fca2b6ee073b"}], "stats": {"total": 178, "additions": 68, "deletions": 110}, "files": [{"sha": "85d9687c600dc72b526f5ac5f44ca8e823c1dbdc", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -50,12 +50,11 @@ pub enum Delimiter {\n     Brace,\n     /// `[ ... ]`\n     Bracket,\n-    /// `/*\u00ab*/ ... /*\u00bb*/`\n+    /// `\u00d8 ... \u00d8`\n     /// An invisible delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n-    /// Invisible delimiters are not directly writable in normal Rust code except as comments.\n-    /// Therefore, they might not survive a roundtrip of a token stream through a string.\n+    /// Invisible delimiters might not survive roundtrip of a token stream through a string.\n     Invisible,\n }\n "}, {"sha": "b80a553b4185ce7f3b551b66c299470c15e83146", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -590,28 +590,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.nbsp();\n                 }\n                 self.word(\"{\");\n-                let empty = tts.is_empty();\n-                if !empty {\n+                if !tts.is_empty() {\n                     self.space();\n                 }\n                 self.ibox(0);\n                 self.print_tts(tts, convert_dollar_crate);\n                 self.end();\n-                self.bclose(span, empty);\n-            }\n-            Some(Delimiter::Invisible) => {\n-                self.word(\"/*\u00ab*/\");\n                 let empty = tts.is_empty();\n-                if !empty {\n-                    self.space();\n-                }\n-                self.ibox(0);\n-                self.print_tts(tts, convert_dollar_crate);\n-                self.end();\n-                if !empty {\n-                    self.space();\n-                }\n-                self.word(\"/*\u00bb*/\");\n+                self.bclose(span, empty);\n             }\n             Some(delim) => {\n                 let token_str = self.token_kind_to_string(&token::OpenDelim(delim));\n@@ -786,8 +772,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n             token::CloseDelim(Delimiter::Bracket) => \"]\".into(),\n             token::OpenDelim(Delimiter::Brace) => \"{\".into(),\n             token::CloseDelim(Delimiter::Brace) => \"}\".into(),\n-            token::OpenDelim(Delimiter::Invisible) => \"/*\u00ab*/\".into(),\n-            token::CloseDelim(Delimiter::Invisible) => \"/*\u00bb*/\".into(),\n+            token::OpenDelim(Delimiter::Invisible) | token::CloseDelim(Delimiter::Invisible) => {\n+                \"\".into()\n+            }\n             token::Pound => \"#\".into(),\n             token::Dollar => \"$\".into(),\n             token::Question => \"?\".into(),"}, {"sha": "f1c5eaad868e99d495224fd2cee4111f4e9c17b6", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -703,12 +703,11 @@ pub enum Delimiter {\n     /// `[ ... ]`\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     Bracket,\n-    /// `/*\u00ab*/ ... /*\u00bb*/`\n+    /// `\u00d8 ... \u00d8`\n     /// An invisible delimiter, that may, for example, appear around tokens coming from a\n     /// \"macro variable\" `$var`. It is important to preserve operator priorities in cases like\n     /// `$var * 3` where `$var` is `1 + 2`.\n-    /// Invisible delimiters are not directly writable in normal Rust code except as comments.\n-    /// Therefore, they might not survive a roundtrip of a token stream through a string.\n+    /// Invisible delimiters might not survive roundtrip of a token stream through a string.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     None,\n }"}, {"sha": "2bc34f3c6bfc072a427d6041e3249ce4faa41117", "filename": "src/test/ui/proc-macro/auxiliary/expand-expr.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-expr.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -12,15 +12,6 @@ use std::str::FromStr;\n \n #[proc_macro]\n pub fn expand_expr_is(input: TokenStream) -> TokenStream {\n-    expand_expr_is_inner(input, false)\n-}\n-\n-#[proc_macro]\n-pub fn expand_expr_is_trim(input: TokenStream) -> TokenStream {\n-    expand_expr_is_inner(input, true)\n-}\n-\n-fn expand_expr_is_inner(input: TokenStream, trim_invisible: bool) -> TokenStream {\n     let mut iter = input.into_iter();\n     let mut expected_tts = Vec::new();\n     loop {\n@@ -31,18 +22,14 @@ fn expand_expr_is_inner(input: TokenStream, trim_invisible: bool) -> TokenStream\n         }\n     }\n \n-    // If requested, trim the \"invisible\" delimiters at the start and end.\n-    let expected = expected_tts.into_iter().collect::<TokenStream>().to_string();\n-    let expected = if trim_invisible {\n-        let len1 = \"/*\u00ab*/ \".len();\n-        let len2 = \" /*\u00bb*/\".len();\n-        &expected[len1..expected.len() - len2]\n-    } else {\n-        &expected[..]\n-    };\n-    let expanded = iter.collect::<TokenStream>().expand_expr().unwrap().to_string();\n-\n-    assert_eq!(expected, expanded);\n+    let expected = expected_tts.into_iter().collect::<TokenStream>();\n+    let expanded = iter.collect::<TokenStream>().expand_expr().expect(\"expand_expr failed\");\n+    assert!(\n+        expected.to_string() == expanded.to_string(),\n+        \"assert failed\\nexpected: `{}`\\nexpanded: `{}`\",\n+        expected.to_string(),\n+        expanded.to_string()\n+    );\n \n     TokenStream::new()\n }"}, {"sha": "4de8746a1b4602b64cbcbb9c101563dae7f64b31", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): self\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ self /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n@@ -14,10 +13,8 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n ]\n PRINT-BANG INPUT (DISPLAY): 1 + 1, { \"a\" }, let a = 1;, String, my_name, 'a, my_val = 30,\n std::option::Option, pub(in some::path) , [a b c], -30\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 1 + 1 /*\u00bb*/, /*\u00ab*/ { \"a\" } /*\u00bb*/, /*\u00ab*/ let a = 1 /*\u00bb*/, /*\u00ab*/\n-String /*\u00bb*/, my_name, /*\u00ab*/ 'a /*\u00bb*/, /*\u00ab*/ my_val = 30 /*\u00bb*/, /*\u00ab*/\n-std :: option :: Option /*\u00bb*/, /*\u00ab*/ pub(in some :: path) /*\u00bb*/, [a b c],\n-/*\u00ab*/ - 30 /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): 1 + 1, { \"a\" }, let a = 1, String, my_name, 'a, my_val = 30,\n+std :: option :: Option, pub(in some :: path), [a b c], - 30\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,\n@@ -298,7 +295,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): (a, b)\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ (a, b) /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "7e6b540332c7963c95654412c6378c84e7d01400", "filename": "src/test/ui/proc-macro/capture-unglued-token.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-unglued-token.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,5 @@\n PRINT-BANG INPUT (DISPLAY): Vec<u8>\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ Vec < u8 > /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): Vec < u8 >\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "d1146d970306264b1485cfc6f243bd51134a62f4", "filename": "src/test/ui/proc-macro/expand-expr.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-expr.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -2,9 +2,9 @@\n \n extern crate expand_expr;\n \n-use expand_expr::{check_expand_expr_file, echo_pm, expand_expr_fail, expand_expr_is};\n-use expand_expr::{expand_expr_is_trim, recursive_expand};\n-\n+use expand_expr::{\n+    check_expand_expr_file, echo_pm, expand_expr_fail, expand_expr_is, recursive_expand,\n+};\n \n // Check builtin macros can be expanded.\n \n@@ -47,21 +47,21 @@ macro_rules! echo_expr {\n \n macro_rules! simple_lit {\n     ($l:literal) => {\n-        expand_expr_is_trim!($l, $l);\n-        expand_expr_is_trim!($l, echo_lit!($l));\n-        expand_expr_is_trim!($l, echo_expr!($l));\n-        expand_expr_is_trim!($l, echo_tts!($l));\n-        expand_expr_is_trim!($l, echo_pm!($l));\n+        expand_expr_is!($l, $l);\n+        expand_expr_is!($l, echo_lit!($l));\n+        expand_expr_is!($l, echo_expr!($l));\n+        expand_expr_is!($l, echo_tts!($l));\n+        expand_expr_is!($l, echo_pm!($l));\n         const _: () = {\n             macro_rules! mac {\n                 () => {\n                     $l\n                 };\n             }\n-            expand_expr_is_trim!($l, mac!());\n-            expand_expr_is_trim!($l, echo_expr!(mac!()));\n-            expand_expr_is_trim!($l, echo_tts!(mac!()));\n-            expand_expr_is_trim!($l, echo_pm!(mac!()));\n+            expand_expr_is!($l, mac!());\n+            expand_expr_is!($l, echo_expr!(mac!()));\n+            expand_expr_is!($l, echo_tts!(mac!()));\n+            expand_expr_is!($l, echo_pm!(mac!()));\n         };\n     };\n }"}, {"sha": "686d53e8876608a322b87badfbd6f4cd5b0b580f", "filename": "src/test/ui/proc-macro/expr-stmt-nonterminal-tokens.stdout", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpr-stmt-nonterminal-tokens.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,6 +1,5 @@\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = #[allow(warnings)] 0 ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E\n-{ V = { let _ = /*\u00ab*/ #[allow(warnings)] #[allow(warnings)] 0 /*\u00bb*/ ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = #[allow(warnings)] #[allow(warnings)] 0 ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -124,7 +123,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { 0; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ 0 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { 0 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -204,7 +203,6 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { {} } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ {} /*\u00bb*/ } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -283,7 +281,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { PATH; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ PATH /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { PATH } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -361,7 +359,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { 0 + 1; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ 0 + 1 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { 0 + 1 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n@@ -452,7 +450,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum E { V = { let _ = { PATH + 1; } ; 0 }, }\n-PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { /*\u00ab*/ PATH + 1 /*\u00bb*/ } ; 0 }, }\n+PRINT-DERIVE DEEP-RE-COLLECTED (DISPLAY): enum E { V = { let _ = { PATH + 1 } ; 0 }, }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\","}, {"sha": "0fda6654ff37051f9a4c3c18d72256ee430fb547", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -96,7 +96,6 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): 1 + 1 * 2\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 1 + 1 /*\u00bb*/ * 2\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "60a400a5deabfd0d57f6b3d4a1dc338aad28f172", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,7 +1,7 @@\n PRINT-BANG INPUT (DISPLAY): foo! { #[fake_attr] mod bar {\n     #![doc = r\" Foo\"]\n } }\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo! { #[fake_attr] /*\u00ab*/ mod bar { #! [doc = r\" Foo\"] } /*\u00bb*/ }\n+PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): foo! { #[fake_attr] mod bar { #! [doc = r\" Foo\"] } }\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"foo\","}, {"sha": "4b7ed874307d8f6c65dc8ad6cfb139945c6e0876", "filename": "src/test/ui/proc-macro/issue-80760-empty-stmt.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-80760-empty-stmt.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): ;\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ ; /*\u00bb*/\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "a3d24dd26fe978f19f3dac03d4f96773b613c215", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.stdout", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,6 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): 0 + 1 + 2 + 3\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ 0 + 1 + 2 /*\u00bb*/ + 3\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): /*\u00ab*/ /*\u00ab*/ /*\u00ab*/ 0 /*\u00bb*/ + 1 /*\u00bb*/ + 2 /*\u00bb*/ + 3\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "6b410f0bfb7e3b856c06f1db4deb0e5248aac630", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,4 @@\n PRINT-BANG INPUT (DISPLAY): \"hi\" 1 + (25) + 1 (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ 1 + (25) + 1 /*\u00bb*/ (1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,\n@@ -72,9 +71,6 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n-PRINT-BANG RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ \"hello\".len() + \"world\".len() /*\u00bb*/ (1 + 1)\n-PRINT-BANG DEEP-RE-COLLECTED (DISPLAY): \"hi\" /*\u00ab*/ /*\u00ab*/ \"hello\".len() /*\u00bb*/ + /*\u00ab*/ \"world\".len() /*\u00bb*/ /*\u00bb*/\n-(1 + 1)\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Literal {\n         kind: Str,"}, {"sha": "4d884348f2ca423df47d1f8aa3b77f28670566a2", "filename": "src/test/ui/proc-macro/nonterminal-expansion.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-expansion.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR_ARGS INPUT (DISPLAY): a, line!(), b\n-PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, /*\u00ab*/ line! () /*\u00bb*/, b\n+PRINT-ATTR_ARGS RE-COLLECTED (DISPLAY): a, line! (), b\n PRINT-ATTR_ARGS INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"a\","}, {"sha": "c08e5308138c966deb834cceb151ad98e058099f", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,5 +1,5 @@\n PRINT-BANG INPUT (DISPLAY): struct S;\n-PRINT-BANG RE-COLLECTED (DISPLAY): /*\u00ab*/ struct S ; /*\u00bb*/\n+PRINT-BANG RE-COLLECTED (DISPLAY): struct S ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Group {\n         delimiter: None,"}, {"sha": "354657db4db380f5b068a3f04c1e94793b86a5ef", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -8,16 +8,16 @@ use parent_source_spans::parent_source_spans;\n \n macro one($a:expr, $b:expr) {\n     two!($a, $b);\n-    //~^ ERROR first parent: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second parent: /*\u00ab*/ \"world\" /*\u00bb*/\n+    //~^ ERROR first parent: \"hello\"\n+    //~| ERROR second parent: \"world\"\n }\n \n macro two($a:expr, $b:expr) {\n     three!($a, $b);\n-    //~^ ERROR first final: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second final: /*\u00ab*/ \"world\" /*\u00bb*/\n-    //~| ERROR first final: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second final: /*\u00ab*/ \"rust\" /*\u00bb*/\n+    //~^ ERROR first final: \"hello\"\n+    //~| ERROR second final: \"world\"\n+    //~| ERROR first final: \"yay\"\n+    //~| ERROR second final: \"rust\"\n }\n \n // forwarding tokens directly doesn't create a new source chain\n@@ -34,16 +34,16 @@ macro four($($tokens:tt)*) {\n \n fn main() {\n     one!(\"hello\", \"world\");\n-    //~^ ERROR first grandparent: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second grandparent: /*\u00ab*/ \"world\" /*\u00bb*/\n-    //~| ERROR first source: /*\u00ab*/ \"hello\" /*\u00bb*/\n-    //~| ERROR second source: /*\u00ab*/ \"world\" /*\u00bb*/\n+    //~^ ERROR first grandparent: \"hello\"\n+    //~| ERROR second grandparent: \"world\"\n+    //~| ERROR first source: \"hello\"\n+    //~| ERROR second source: \"world\"\n \n     two!(\"yay\", \"rust\");\n-    //~^ ERROR first parent: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second parent: /*\u00ab*/ \"rust\" /*\u00bb*/\n-    //~| ERROR first source: /*\u00ab*/ \"yay\" /*\u00bb*/\n-    //~| ERROR second source: /*\u00ab*/ \"rust\" /*\u00bb*/\n+    //~^ ERROR first parent: \"yay\"\n+    //~| ERROR second parent: \"rust\"\n+    //~| ERROR first source: \"yay\"\n+    //~| ERROR second source: \"rust\"\n \n     three!(\"hip\", \"hop\");\n     //~^ ERROR first final: \"hip\""}, {"sha": "4548269b507930fb1bd407fbca12afc4f5e9f9a8", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d712376467673192f74188ab0b143fff58372e6/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=1d712376467673192f74188ab0b143fff58372e6", "patch": "@@ -1,4 +1,4 @@\n-error: first final: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first final: \"hello\"\n   --> $DIR/parent-source-spans.rs:16:12\n    |\n LL |     three!($a, $b);\n@@ -9,7 +9,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second final: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:16:16\n    |\n LL |     three!($a, $b);\n@@ -20,7 +20,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first parent: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:10:5\n    |\n LL |     two!($a, $b);\n@@ -31,7 +31,7 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second parent: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second parent: \"world\"\n   --> $DIR/parent-source-spans.rs:10:5\n    |\n LL |     two!($a, $b);\n@@ -42,31 +42,31 @@ LL |     one!(\"hello\", \"world\");\n    |\n    = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first grandparent: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first grandparent: \"hello\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: second grandparent: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second grandparent: \"world\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: first source: /*\u00ab*/ \"hello\" /*\u00bb*/\n+error: first source: \"hello\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: second source: /*\u00ab*/ \"world\" /*\u00bb*/\n+error: second source: \"world\"\n   --> $DIR/parent-source-spans.rs:36:5\n    |\n LL |     one!(\"hello\", \"world\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: first final: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first final: \"yay\"\n   --> $DIR/parent-source-spans.rs:16:12\n    |\n LL |     three!($a, $b);\n@@ -77,7 +77,7 @@ LL |     two!(\"yay\", \"rust\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: second final: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second final: \"rust\"\n   --> $DIR/parent-source-spans.rs:16:16\n    |\n LL |     three!($a, $b);\n@@ -88,25 +88,25 @@ LL |     two!(\"yay\", \"rust\");\n    |\n    = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: first parent: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first parent: \"yay\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: second parent: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second parent: \"rust\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: first source: /*\u00ab*/ \"yay\" /*\u00bb*/\n+error: first source: \"yay\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: second source: /*\u00ab*/ \"rust\" /*\u00bb*/\n+error: second source: \"rust\"\n   --> $DIR/parent-source-spans.rs:42:5\n    |\n LL |     two!(\"yay\", \"rust\");"}]}