{"sha": "5ee4fdcd15cc404f6d195027b11c24bdb0905204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZTRmZGNkMTVjYzQwNGY2ZDE5NTAyN2IxMWMyNGJkYjA5MDUyMDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-23T11:31:00Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-23T11:31:00Z"}, "message": "fetch_tls_dtor \"read\" an `Undef` as nonzero", "tree": {"sha": "1776c3e36ef1f70625139edbdc3257ca3bc57095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1776c3e36ef1f70625139edbdc3257ca3bc57095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ee4fdcd15cc404f6d195027b11c24bdb0905204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee4fdcd15cc404f6d195027b11c24bdb0905204", "html_url": "https://github.com/rust-lang/rust/commit/5ee4fdcd15cc404f6d195027b11c24bdb0905204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ee4fdcd15cc404f6d195027b11c24bdb0905204/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fc6c677d4de82e67e1df7e5cf4314dde514510", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fc6c677d4de82e67e1df7e5cf4314dde514510", "html_url": "https://github.com/rust-lang/rust/commit/c4fc6c677d4de82e67e1df7e5cf4314dde514510"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "7052a411f7e2c3a89fb8826cad2303fe24fe8b80", "filename": "src/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4fdcd15cc404f6d195027b11c24bdb0905204/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4fdcd15cc404f6d195027b11c24bdb0905204/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=5ee4fdcd15cc404f6d195027b11c24bdb0905204", "patch": "@@ -362,7 +362,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             StackPopCleanup::None => {},\n             StackPopCleanup::Tls(key) => {\n                 // either fetch the next dtor or start new from the beginning, if any are left with a non-null data\n-                if let Some((instance, ptr, key)) = self.memory.fetch_tls_dtor(key).or_else(|| self.memory.fetch_tls_dtor(None)) {\n+                let dtor = match self.memory.fetch_tls_dtor(key)? {\n+                    dtor @ Some(_) => dtor,\n+                    None => self.memory.fetch_tls_dtor(None)?,\n+                };\n+                if let Some((instance, ptr, key)) = dtor {\n                     trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n                     // TODO: Potentially, this has to support all the other possible instances? See eval_fn_call in terminator/mod.rs\n                     let mir = self.load_mir(instance.def)?;"}, {"sha": "5794dc783cfed9e8a87c31909c8eed6335b54b92", "filename": "src/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4fdcd15cc404f6d195027b11c24bdb0905204/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4fdcd15cc404f6d195027b11c24bdb0905204/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=5ee4fdcd15cc404f6d195027b11c24bdb0905204", "patch": "@@ -404,22 +404,22 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     /// with associated destructors, implementations may stop calling destructors,\n     /// or they may continue calling destructors until no non-NULL values with\n     /// associated destructors exist, even though this might result in an infinite loop.\n-    pub(crate) fn fetch_tls_dtor(&mut self, key: Option<TlsKey>) -> Option<(ty::Instance<'tcx>, PrimVal, TlsKey)> {\n+    pub(crate) fn fetch_tls_dtor(&mut self, key: Option<TlsKey>) -> EvalResult<'tcx, Option<(ty::Instance<'tcx>, PrimVal, TlsKey)>> {\n         use std::collections::Bound::*;\n         let start = match key {\n             Some(key) => Excluded(key),\n             None => Unbounded,\n         };\n         for (&key, &mut TlsEntry { ref mut data, dtor }) in self.thread_local.range_mut((start, Unbounded)) {\n-            if *data != PrimVal::Bytes(0) {\n+            if !data.is_null()? {\n                 if let Some(dtor) = dtor {\n                     let ret = Some((dtor, *data, key));\n                     *data = PrimVal::Bytes(0);\n-                    return ret;\n+                    return Ok(ret);\n                 }\n             }\n         }\n-        return None;\n+        return Ok(None);\n     }\n }\n "}]}