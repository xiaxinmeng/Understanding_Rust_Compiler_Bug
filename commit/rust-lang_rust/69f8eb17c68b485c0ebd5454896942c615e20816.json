{"sha": "69f8eb17c68b485c0ebd5454896942c615e20816", "node_id": "C_kwDOAAsO6NoAKDY5ZjhlYjE3YzY4YjQ4NWMwZWJkNTQ1NDg5Njk0MmM2MTVlMjA4MTY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-10T10:14:28Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-10T11:16:51Z"}, "message": "Use `byte_sub` in [a]rc impl", "tree": {"sha": "888ba1c8813a20fe8209d0de1cd4424ed9c3597c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888ba1c8813a20fe8209d0de1cd4424ed9c3597c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f8eb17c68b485c0ebd5454896942c615e20816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f8eb17c68b485c0ebd5454896942c615e20816", "html_url": "https://github.com/rust-lang/rust/commit/69f8eb17c68b485c0ebd5454896942c615e20816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f8eb17c68b485c0ebd5454896942c615e20816/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e77648e466c780a9adce2fa3d3eb5e423dc04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e77648e466c780a9adce2fa3d3eb5e423dc04e", "html_url": "https://github.com/rust-lang/rust/commit/95e77648e466c780a9adce2fa3d3eb5e423dc04e"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "e8ae12af9e415b155d725ec08c0f3f9e9fd879e5", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=69f8eb17c68b485c0ebd5454896942c615e20816", "patch": "@@ -125,6 +125,7 @@\n #![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(pattern)]\n+#![feature(pointer_byte_offsets)]\n #![feature(ptr_internals)]\n #![feature(ptr_metadata)]\n #![feature(ptr_sub_ptr)]"}, {"sha": "b89b03683baefc7528fce1d12f158a35fa029850", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=69f8eb17c68b485c0ebd5454896942c615e20816", "patch": "@@ -907,8 +907,7 @@ impl<T: ?Sized> Rc<T> {\n         let offset = unsafe { data_offset(ptr) };\n \n         // Reverse the offset to find the original RcBox.\n-        let rc_ptr =\n-            unsafe { (ptr as *mut u8).offset(-offset).with_metadata_of(ptr as *mut RcBox<T>) };\n+        let rc_ptr = unsafe { ptr.byte_sub(offset) as *mut RcBox<T> };\n \n         unsafe { Self::from_ptr(rc_ptr) }\n     }\n@@ -2331,7 +2330,7 @@ impl<T: ?Sized> Weak<T> {\n             let offset = unsafe { data_offset(ptr) };\n             // Thus, we reverse the offset to get the whole RcBox.\n             // SAFETY: the pointer originated from a Weak, so this offset is safe.\n-            unsafe { (ptr as *mut u8).offset(-offset).with_metadata_of(ptr as *mut RcBox<T>) }\n+            unsafe { ptr.byte_sub(offset) as *mut RcBox<T> }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n@@ -2684,7 +2683,7 @@ impl<T: ?Sized> Unpin for Rc<T> {}\n ///\n /// The pointer must point to (and have valid metadata for) a previously\n /// valid instance of T, but the T is allowed to be dropped.\n-unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n+unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> usize {\n     // Align the unsized value to the end of the RcBox.\n     // Because RcBox is repr(C), it will always be the last field in memory.\n     // SAFETY: since the only unsized types possible are slices, trait objects,\n@@ -2695,7 +2694,7 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n }\n \n #[inline]\n-fn data_offset_align(align: usize) -> isize {\n+fn data_offset_align(align: usize) -> usize {\n     let layout = Layout::new::<RcBox<()>>();\n-    (layout.size() + layout.padding_needed_for(align)) as isize\n+    layout.size() + layout.padding_needed_for(align)\n }"}, {"sha": "4c03cc3ed158addec050422af229d521d566f37e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f8eb17c68b485c0ebd5454896942c615e20816/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=69f8eb17c68b485c0ebd5454896942c615e20816", "patch": "@@ -908,8 +908,7 @@ impl<T: ?Sized> Arc<T> {\n             let offset = data_offset(ptr);\n \n             // Reverse the offset to find the original ArcInner.\n-            let arc_ptr =\n-                (ptr as *mut u8).offset(-offset).with_metadata_of(ptr as *mut ArcInner<T>);\n+            let arc_ptr = ptr.byte_sub(offset) as *mut ArcInner<T>;\n \n             Self::from_ptr(arc_ptr)\n         }\n@@ -1942,7 +1941,7 @@ impl<T: ?Sized> Weak<T> {\n             let offset = unsafe { data_offset(ptr) };\n             // Thus, we reverse the offset to get the whole RcBox.\n             // SAFETY: the pointer originated from a Weak, so this offset is safe.\n-            unsafe { (ptr as *mut u8).offset(-offset).with_metadata_of(ptr as *mut ArcInner<T>) }\n+            unsafe { ptr.byte_sub(offset) as *mut ArcInner<T> }\n         };\n \n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n@@ -2749,7 +2748,7 @@ impl<T: ?Sized> Unpin for Arc<T> {}\n ///\n /// The pointer must point to (and have valid metadata for) a previously\n /// valid instance of T, but the T is allowed to be dropped.\n-unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n+unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> usize {\n     // Align the unsized value to the end of the ArcInner.\n     // Because RcBox is repr(C), it will always be the last field in memory.\n     // SAFETY: since the only unsized types possible are slices, trait objects,\n@@ -2760,7 +2759,7 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n }\n \n #[inline]\n-fn data_offset_align(align: usize) -> isize {\n+fn data_offset_align(align: usize) -> usize {\n     let layout = Layout::new::<ArcInner<()>>();\n-    (layout.size() + layout.padding_needed_for(align)) as isize\n+    layout.size() + layout.padding_needed_for(align)\n }"}]}