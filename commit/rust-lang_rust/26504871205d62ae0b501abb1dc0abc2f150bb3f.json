{"sha": "26504871205d62ae0b501abb1dc0abc2f150bb3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTA0ODcxMjA1ZDYyYWUwYjUwMWFiYjFkYzBhYmMyZjE1MGJiM2Y=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-03-26T22:14:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-27T00:51:54Z"}, "message": "Got the nbody demo working, and hopefully faster, too!", "tree": {"sha": "106d74f07ad73d6f1eb8f7c92aec649581d423e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/106d74f07ad73d6f1eb8f7c92aec649581d423e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26504871205d62ae0b501abb1dc0abc2f150bb3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26504871205d62ae0b501abb1dc0abc2f150bb3f", "html_url": "https://github.com/rust-lang/rust/commit/26504871205d62ae0b501abb1dc0abc2f150bb3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26504871205d62ae0b501abb1dc0abc2f150bb3f/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c1c67229ad844a9f1cf963b7284d4cc3c60e17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1c67229ad844a9f1cf963b7284d4cc3c60e17a", "html_url": "https://github.com/rust-lang/rust/commit/1c1c67229ad844a9f1cf963b7284d4cc3c60e17a"}], "stats": {"total": 218, "additions": 112, "deletions": 106}, "files": [{"sha": "9df439f2fc65e6ba3b80392591789dafa86fa35c", "filename": "src/test/bench/shootout/nbody.rs", "status": "modified", "additions": 112, "deletions": 106, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/26504871205d62ae0b501abb1dc0abc2f150bb3f/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26504871205d62ae0b501abb1dc0abc2f150bb3f/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fnbody.rs?ref=26504871205d62ae0b501abb1dc0abc2f150bb3f", "patch": "@@ -4,8 +4,6 @@\n \n fn main() {\n \n-    log \"foo\";\n-\n     let vec[int] inputs = vec(\n         50000\n         //these segfault :(\n@@ -17,13 +15,12 @@ fn main() {\n     let vec[Body.props] bodies = NBodySystem.MakeNBodySystem();\n \n     for (int n in inputs) {\n-        // TODO: make #fmt handle floats?\n         log NBodySystem.energy(bodies);\n \n         let int i = 0;\n         while (i < n) {\n-            bodies = NBodySystem.advance(bodies, 0.01);\n-            i = i+1;\n+            NBodySystem.advance(bodies, 0.01);\n+            i += 1;\n         }\n         log NBodySystem.energy(bodies);\n     }\n@@ -40,7 +37,6 @@ native \"rust\" mod rustrt {\n mod NBodySystem {\n \n     fn MakeNBodySystem() -> vec[Body.props] {\n-        // can't iterate over a record?  how about a vector, then?\n         let vec[Body.props] bodies = vec(\n             // these each return a Body.props\n             Body.sun(), \n@@ -53,10 +49,13 @@ mod NBodySystem {\n         let float py = 0.0;\n         let float pz = 0.0;\n \n-        for (Body.props body in bodies) {\n-            px += body.vx * body.mass;\n-            py += body.vy * body.mass;\n-            pz += body.vz * body.mass;\n+        let int i = 0;\n+        while (i < 5) {\n+            px += bodies.(i).vx * bodies.(i).mass;\n+            py += bodies.(i).vy * bodies.(i).mass;\n+            pz += bodies.(i).vz * bodies.(i).mass;\n+\n+            i += 1;\n         }\n \n         // side-effecting\n@@ -65,39 +64,46 @@ mod NBodySystem {\n         ret bodies;\n     }\n \n-    fn advance(vec[Body.props] bodies, float dt) -> vec[Body.props] {\n-        for (Body.props ibody in bodies) {\n+    fn advance(vec[Body.props] bodies, float dt) -> () {\n \n-            let Body.props iBody = ibody;\n-\n-            for (Body.props jbody in bodies) {\n-                let float dx = iBody.x - jbody.x;\n-                let float dy = iBody.y - jbody.y;\n-                let float dz = iBody.z - jbody.z;\n+        let int i = 0;\n+        while (i < 5) {\n+            let int j = i+1;\n+            while (j < 5) {\n+                let float dx = bodies.(i).x - bodies.(j).x;\n+                let float dy = bodies.(i).y - bodies.(j).y;\n+                let float dz = bodies.(i).z - bodies.(j).z;\n \n                 let float dSquared = dx * dx + dy * dy + dz * dz;\n \n                 let float distance;\n                 rustrt.squareroot(dSquared, distance);\n                 let float mag = dt / (dSquared * distance);\n \n-                iBody.vx -= dx * jbody.mass * mag;\n-                iBody.vy -= dy * jbody.mass * mag;\n-                iBody.vz -= dz * jbody.mass * mag;\n+                bodies.(i).vx -= dx * bodies.(j).mass * mag;\n+                bodies.(i).vy -= dy * bodies.(j).mass * mag;\n+                bodies.(i).vz -= dz * bodies.(j).mass * mag;\n+\n+                bodies.(j).vx += dx * bodies.(i).mass * mag;\n+                bodies.(j).vy += dy * bodies.(i).mass * mag;\n+                bodies.(j).vz += dz * bodies.(i).mass * mag;\n+\n+                j += 1;\n \n-                jbody.vx += dx * iBody.mass * mag;\n-                jbody.vy += dy * iBody.mass * mag;\n-                jbody.vz += dz * iBody.mass * mag;\n             }\n-        }        \n \n-        for (Body.props body in bodies) {\n-            body.x += dt * body.vx;\n-            body.y += dt * body.vy;\n-            body.z += dt * body.vz;\n+            i += 1;\n         }\n \n-        ret bodies;\n+        i = 0;\n+        while (i < 5) {\n+\n+            bodies.(i).x += dt * bodies.(i).vx;\n+            bodies.(i).y += dt * bodies.(i).vy;\n+            bodies.(i).z += dt * bodies.(i).vz;\n+\n+            i += 1;\n+        }\n     }\n \n     fn energy(vec[Body.props] bodies) -> float {\n@@ -107,110 +113,110 @@ mod NBodySystem {\n         let float distance;\n         let float e = 0.0;\n \n-        for (Body.props ibody in bodies) {\n-\n-            // do we need this?\n-            let Body.props iBody = ibody;\n-\n-            e += 0.5 * iBody.mass *\n-                ( iBody.vx * iBody.vx\n-                  + iBody.vy * iBody.vy\n-                  + iBody.vz * iBody.vz );\n-\n-            for (Body.props jbody in bodies) {\n-\n-                // do we need this?\n-                let Body.props jBody = jbody;\n-\n-                dx = iBody.x - jBody.x;\n-                dy = iBody.y - jBody.y;\n-                dz = iBody.z - jBody.z;\n+        let int i = 0;\n+        while (i < 5) {\n+            e += 0.5 * bodies.(i).mass *\n+                (  bodies.(i).vx * bodies.(i).vx\n+                 + bodies.(i).vy * bodies.(i).vy\n+                 + bodies.(i).vz * bodies.(i).vz );\n+\n+            let int j = i+1;\n+            while (j < 5) {\n+                dx = bodies.(i).x - bodies.(j).x;\n+                dy = bodies.(i).y - bodies.(j).y;\n+                dz = bodies.(i).z - bodies.(j).z;\n \n                 rustrt.squareroot(dx*dx + dy*dy + dz*dz, distance);\n-                e -= (iBody.mass * jBody.mass) / distance;\n+                e -= (bodies.(i).mass * bodies.(j).mass) / distance;\n+                \n+                j += 1;\n             }\n+\n+            i += 1;\n         }\n         ret e;\n-    }\n \n+    }\n }\n \n mod Body {\n-    \n-    const float PI = 3.14;\n-    const float SOLAR_MASS = 39.47; // was 4 * PI * PI originally\n+\n+    const float PI = 3.141592653589793;\n+    const float SOLAR_MASS = 39.478417604357432; // was 4 * PI * PI originally\n     const float DAYS_PER_YEAR = 365.24;\n \n-    type props = rec(float x, \n-                     float y, \n-                     float z, \n-                     float vx, \n-                     float vy,\n-                     float vz, \n+    type props = rec(mutable float x, \n+                     mutable float y, \n+                     mutable float z, \n+                     mutable float vx, \n+                     mutable float vy,\n+                     mutable float vz, \n                      float mass);\n \n     fn jupiter() -> Body.props {\n-        // current limitation of the float lexer: decimal part has to\n-        // fit into a 32-bit int.\n-        \n-        let Body.props p;\n-        p.x    =  4.84e+00;\n-        p.y    = -1.16e+00;\n-        p.z    = -1.03e-01;\n-        p.vx   =  1.66e-03 * DAYS_PER_YEAR;\n-        p.vy   =  7.69e-03 * DAYS_PER_YEAR;\n-        p.vz   = -6.90e-05 * DAYS_PER_YEAR;\n-        p.mass =  9.54e-04 * SOLAR_MASS;\n-        ret p;\n+        ret rec(\n+            mutable x  =  4.84143144246472090e+00,\n+            mutable y  = -1.16032004402742839e+00,\n+            mutable z  = -1.03622044471123109e-01,\n+            mutable vx =  1.66007664274403694e-03 * DAYS_PER_YEAR,\n+            mutable vy =  7.69901118419740425e-03 * DAYS_PER_YEAR,\n+            mutable vz = -6.90460016972063023e-05 * DAYS_PER_YEAR,\n+            mass       =  9.54791938424326609e-04 * SOLAR_MASS\n+            );\n     }\n \n     fn saturn() -> Body.props {\n-        let Body.props p;\n-        p.x    =  8.34e+00;\n-        p.y    =  4.12e+00;\n-        p.z    = -4.03e-01;\n-        p.vx   = -2.76e-03 * DAYS_PER_YEAR;\n-        p.vy   =  4.99e-03 * DAYS_PER_YEAR;\n-        p.vz   =  2.30e-05 * DAYS_PER_YEAR;\n-        p.mass =  2.85e-04 * SOLAR_MASS;\n-        ret p;\n+        ret rec(\n+            mutable x  =  8.34336671824457987e+00,\n+            mutable y  =  4.12479856412430479e+00,\n+            mutable z  = -4.03523417114321381e-01,\n+            mutable vx = -2.76742510726862411e-03 * DAYS_PER_YEAR,\n+            mutable vy =  4.99852801234917238e-03 * DAYS_PER_YEAR,\n+            mutable vz =  2.30417297573763929e-05 * DAYS_PER_YEAR,\n+            mass       =  2.85885980666130812e-04 * SOLAR_MASS\n+            );\n    }\n \n     fn uranus() -> Body.props {\n-        let Body.props p;\n-        p.x    =  1.28e+01;\n-        p.y    = -1.51e+01;\n-        p.z    = -2.23e-01;\n-        p.vx   =  2.96e-03 * DAYS_PER_YEAR;\n-        p.vy   =  2.37e-03 * DAYS_PER_YEAR;\n-        p.vz   = -2.96e-05 * DAYS_PER_YEAR;\n-        p.mass =  4.36e-05 * SOLAR_MASS;\n-        ret p;\n+        ret rec(\n+            mutable x  =  1.28943695621391310e+01,\n+            mutable y  = -1.51111514016986312e+01,\n+            mutable z  = -2.23307578892655734e-01,\n+            mutable vx =  2.96460137564761618e-03 * DAYS_PER_YEAR,\n+            mutable vy =  2.37847173959480950e-03 * DAYS_PER_YEAR,\n+            mutable vz = -2.96589568540237556e-05 * DAYS_PER_YEAR,\n+            mass       =  4.36624404335156298e-05 * SOLAR_MASS\n+            );\n     }\n \n     fn neptune() -> Body.props {\n-        let Body.props p;\n-        p.x    =  1.53e+01;\n-        p.y    = -2.59e+01;\n-        p.z    =  1.79e-01;\n-        p.vx   =  2.68e-03 * DAYS_PER_YEAR;\n-        p.vy   =  1.62e-03 * DAYS_PER_YEAR;\n-        p.vz   = -9.51e-05 * DAYS_PER_YEAR;\n-        p.mass =  5.15e-05 * SOLAR_MASS;\n-        ret p;\n+        ret rec(\n+            mutable x  =  1.53796971148509165e+01,\n+            mutable y  = -2.59193146099879641e+01,\n+            mutable z  =  1.79258772950371181e-01,\n+            mutable vx =  2.68067772490389322e-03 * DAYS_PER_YEAR,\n+            mutable vy =  1.62824170038242295e-03 * DAYS_PER_YEAR,\n+            mutable vz = -9.51592254519715870e-05 * DAYS_PER_YEAR,\n+            mass       =  5.15138902046611451e-05 * SOLAR_MASS\n+            );\n    }\n \n    fn sun() -> Body.props {\n-        let Body.props p;\n-        p.mass = SOLAR_MASS;\n-        ret p;\n+       ret rec(\n+           mutable x  =  0.0,\n+           mutable y  =  0.0,\n+           mutable z  =  0.0,\n+           mutable vx =  0.0,\n+           mutable vy =  0.0,\n+           mutable vz =  0.0,\n+           mass       =  SOLAR_MASS\n+           );\n    }\n \n-   impure fn offsetMomentum(mutable Body.props props,\n-                     float px, \n-                     float py, \n-                     float pz) -> Body.props {\n-\n+   impure fn offsetMomentum(&Body.props props,\n+                            float px, \n+                            float py, \n+                            float pz) -> () {\n        props.vx = -px / SOLAR_MASS;\n        props.vy = -py / SOLAR_MASS;\n        props.vz = -pz / SOLAR_MASS;"}]}