{"sha": "b7af25060a1b0451cb06085ba5893980bc4e5333", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YWYyNTA2MGExYjA0NTFjYjA2MDg1YmE1ODkzOTgwYmM0ZTUzMzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-13T04:34:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-13T20:53:55Z"}, "message": "Rolling up PRs in the queue\n\nCloses #14797 (librustc: Fix the issue with labels shadowing variable names by making)\nCloses #14823 (Improve error messages for io::fs)\nCloses #14827 (libsyntax: Allow `+` to separate trait bounds from objects.)\nCloses #14834 (configure: Don't sync unused submodules)\nCloses #14838 (Remove typo on collections::treemap::UnionItems)\nCloses #14839 (Fix the unused struct field lint for struct variants)\nCloses #14840 (Clarify `Any` docs)\nCloses #14846 (rustc: [T, ..N] and [T, ..N+1] are not the same)\nCloses #14847 (Audit usage of NativeMutex)\nCloses #14850 (remove unnecessary PaX detection)\nCloses #14856 (librustc: Take in account mutability when casting array to raw ptr.)\nCloses #14859 (librustc: Forbid `transmute` from being called on types whose size is)\nCloses #14860 (Fix `quote_pat!` & parse outer attributes in `quote_item!`)", "tree": {"sha": "2a5a941e0da26795babf286edf77f9f225bc906d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5a941e0da26795babf286edf77f9f225bc906d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7af25060a1b0451cb06085ba5893980bc4e5333", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7af25060a1b0451cb06085ba5893980bc4e5333", "html_url": "https://github.com/rust-lang/rust/commit/b7af25060a1b0451cb06085ba5893980bc4e5333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7af25060a1b0451cb06085ba5893980bc4e5333/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f907d9772c55d942fb178622b0b2b5a8ca103c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/f907d9772c55d942fb178622b0b2b5a8ca103c11", "html_url": "https://github.com/rust-lang/rust/commit/f907d9772c55d942fb178622b0b2b5a8ca103c11"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "1b6525c6e3877568818a38288a30c8e4480dc9fb", "filename": "src/libnative/io/c_win32.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibnative%2Fio%2Fc_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibnative%2Fio%2Fc_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_win32.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -77,15 +77,20 @@ pub mod compat {\n         fn GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR) -> LPVOID;\n     }\n \n-    // store_func() is idempotent, so using relaxed ordering for the atomics should be enough.\n-    // This way, calling a function in this compatibility layer (after it's loaded) shouldn't\n-    // be any slower than a regular DLL call.\n-    unsafe fn store_func<T: Copy>(ptr: *mut T, module: &str, symbol: &str, fallback: T) {\n+    // store_func() is idempotent, so using relaxed ordering for the atomics\n+    // should be enough.  This way, calling a function in this compatibility\n+    // layer (after it's loaded) shouldn't be any slower than a regular DLL\n+    // call.\n+    unsafe fn store_func(ptr: *mut uint, module: &str, symbol: &str, fallback: uint) {\n         let module = module.to_utf16().append_one(0);\n         symbol.with_c_str(|symbol| {\n             let handle = GetModuleHandleW(module.as_ptr());\n-            let func: Option<T> = transmute(GetProcAddress(handle, symbol));\n-            atomic_store_relaxed(ptr, func.unwrap_or(fallback))\n+            let func: uint = transmute(GetProcAddress(handle, symbol));\n+            atomic_store_relaxed(ptr, if func == 0 {\n+                fallback\n+            } else {\n+                func\n+            })\n         })\n     }\n \n@@ -109,10 +114,10 @@ pub mod compat {\n \n                 extern \"system\" fn thunk($($argname: $argtype),*) -> $rettype {\n                     unsafe {\n-                        ::io::c::compat::store_func(&mut ptr,\n-                                                             stringify!($module),\n-                                                             stringify!($symbol),\n-                                                             fallback);\n+                        ::io::c::compat::store_func(&mut ptr as *mut _ as *mut uint,\n+                                                    stringify!($module),\n+                                                    stringify!($symbol),\n+                                                    fallback as uint);\n                         ::std::intrinsics::atomic_load_relaxed(&ptr)($($argname),*)\n                     }\n                 }"}, {"sha": "76dbfa8c29ec35bfd88588bab7c55bb1166fca28", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -158,6 +158,7 @@ mod test {\n     use super::*;\n     use prelude::*;\n     use libc;\n+    use mem;\n \n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8818\n@@ -174,7 +175,7 @@ mod test {\n         let cosine: extern fn(libc::c_double) -> libc::c_double = unsafe {\n             match libm.symbol(\"cos\") {\n                 Err(error) => fail!(\"Could not load function cos: {}\", error),\n-                Ok(cosine) => cosine\n+                Ok(cosine) => mem::transmute::<*u8, _>(cosine)\n             }\n         };\n "}, {"sha": "10dfec0f566091cab9072b7853e206c6a36f7e76", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -977,7 +977,9 @@ mod test {\n         let result = File::open_mode(filename, Open, Read);\n \n         error!(result, \"couldn't open file\");\n-        error!(result, \"no such file or directory\");\n+        if cfg!(unix) {\n+            error!(result, \"no such file or directory\");\n+        }\n         error!(result, format!(\"path={}; mode=open; access=read\", filename.display()));\n     })\n \n@@ -988,7 +990,9 @@ mod test {\n         let result = unlink(filename);\n \n         error!(result, \"couldn't unlink path\");\n-        error!(result, \"no such file or directory\");\n+        if cfg!(unix) {\n+            error!(result, \"no such file or directory\");\n+        }\n         error!(result, format!(\"path={}\", filename.display()));\n     })\n "}, {"sha": "e2a963c5a878d4fc54d8c7114305dc59292e84b1", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -873,12 +873,12 @@ mod imp {\n             Err(..) => return Ok(()),\n         };\n \n-        macro_rules! sym( ($e:expr, $t:ident) => (\n-            match unsafe { lib.symbol::<$t>($e) } {\n-                Ok(f) => f,\n+        macro_rules! sym( ($e:expr, $t:ident) => (unsafe {\n+            match lib.symbol($e) {\n+                Ok(f) => mem::transmute::<*u8, $t>(f),\n                 Err(..) => return Ok(())\n             }\n-        ) )\n+        }) )\n \n         // Fetch the symbols necessary from dbghelp.dll\n         let SymFromAddr = sym!(\"SymFromAddr\", SymFromAddrFn);"}, {"sha": "90366d09e2deab2abbb2a8249876a0821b8f45f2", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     let x = X { a: [0] };\n     let _f = &x.a as *mut u8;\n     //~^ ERROR mismatched types: expected `*mut u8` but found `&[u8, .. 1]`\n-    \n+\n     let local = [0u8];\n     let _v = &local as *mut u8;\n     //~^ ERROR mismatched types: expected `*mut u8` but found `&[u8, .. 1]`"}, {"sha": "abdfe983e3a8f02477952e0ef807d98e774b439e", "filename": "src/test/compile-fail/transmute-different-sizes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftransmute-different-sizes.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -10,6 +10,8 @@\n \n // Tests that `transmute` cannot be called on types of different size.\n \n+#![allow(warnings)]\n+\n use std::mem::transmute;\n \n unsafe fn f() {"}, {"sha": "f90937c34a6d68422fcce26e9d6a585f57b2facd", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -14,11 +14,11 @@\n trait Tr { }\n impl Tr for int { }\n \n-fn foo(x: Box<Tr: Share>) -> Box<Tr: Share> { x }\n+fn foo(x: Box<Tr+ Share>) -> Box<Tr+ Share> { x }\n \n fn main() {\n-    let x: Box<Tr: Share>;\n+    let x: Box<Tr+ Share>;\n \n-    box() 1 as Box<Tr: Share>;\n+    box() 1 as Box<Tr+ Share>;\n }\n "}, {"sha": "4b2e29135ad2e5a0314d80542af3937e27ee274b", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-android\n+// ignore-pretty: does not work well with `--test`\n+\n #![feature(quote)]\n #![feature(managed_boxes)]\n "}, {"sha": "7876fe86d47245e3a08f34ae350cf53f86544d2e", "filename": "src/test/run-pass/issue-14837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7af25060a1b0451cb06085ba5893980bc4e5333/src%2Ftest%2Frun-pass%2Fissue-14837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14837.rs?ref=b7af25060a1b0451cb06085ba5893980bc4e5333", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![feature(struct_variant)]\n-#![deny(warnings)]\n \n+#[deny(dead_code)]\n pub enum Foo {\n     Bar {\n         pub baz: int"}]}