{"sha": "460ceb4cf2b8217abd002f8a30ef52f2aa25fee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGNlYjRjZjJiODIxN2FiZDAwMmY4YTMwZWY1MmYyYWEyNWZlZTk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-23T13:16:41Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-23T13:16:41Z"}, "message": "Merge #883\n\n883: Fix fill_match_arms not working with references r=matklad a=vipentti\n\nThis fixes #881 \n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "879a4f77d61094a4c039a8377cef79bad480277a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879a4f77d61094a4c039a8377cef79bad480277a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9", "html_url": "https://github.com/rust-lang/rust/commit/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "98caeac106a478325bbee5da6938be449b70830b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98caeac106a478325bbee5da6938be449b70830b", "html_url": "https://github.com/rust-lang/rust/commit/98caeac106a478325bbee5da6938be449b70830b"}, {"sha": "14cff98cb00bd63a6035d68f5e439dd67cb5f7e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14cff98cb00bd63a6035d68f5e439dd67cb5f7e5", "html_url": "https://github.com/rust-lang/rust/commit/14cff98cb00bd63a6035d68f5e439dd67cb5f7e5"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "6bf6e7332f6e28335c160f26e209e3d2909397eb", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ceb4cf2b8217abd002f8a30ef52f2aa25fee9/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=460ceb4cf2b8217abd002f8a30ef52f2aa25fee9", "patch": "@@ -28,6 +28,10 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let match_expr_ty = infer_result[node_expr].clone();\n     let enum_def = match match_expr_ty {\n         Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,\n+        Ty::Ref(adt, _) => match *adt {\n+            Ty::Adt { def_id: AdtDef::Enum(e), .. } => e,\n+            _ => return None,\n+        },\n         _ => return None,\n     };\n     let enum_name = enum_def.name(ctx.db)?;\n@@ -119,6 +123,81 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_fill_match_arm_refs() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A {\n+                As,\n+            }\n+\n+            fn foo(a: &A) {\n+                match a<|> {\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A {\n+                As,\n+            }\n+\n+            fn foo(a: &A) {\n+                match <|>a {\n+                    A::As => (),\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum A {\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &mut A) {\n+                match a<|> {\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            enum A {\n+                Es{x: usize, y: usize}\n+            }\n+\n+            fn foo(a: &mut A) {\n+                match <|>a {\n+                    A::Es{x, y} => (),\n+                }\n+            }\n+            \"#,\n+        );\n+\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            enum E { X, Y}\n+\n+            fn main() {\n+                match &E::X<|>\n+            }\n+            \"#,\n+            r#\"\n+            enum E { X, Y}\n+\n+            fn main() {\n+                match <|>&E::X {\n+                    E::X => (),\n+                    E::Y => (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn fill_match_arms_no_body() {\n         check_assist("}]}