{"sha": "282702c2877e3f9002308b1b63fc472b5e799c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MjcwMmMyODc3ZTNmOTAwMjMwOGIxYjYzZmM0NzJiNWU3OTljNTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T14:24:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T14:24:20Z"}, "message": "Merge #5595\n\n5595: Rename RecordLit -> RecordExpr r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e8ddcc0575b012ab6e8fd099746f571cc4bf304c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ddcc0575b012ab6e8fd099746f571cc4bf304c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282702c2877e3f9002308b1b63fc472b5e799c56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfItgUCRBK7hj4Ov3rIwAAdHIIAF08BBNFJyS2t0OjlCfVi2BA\n7v9tTS45XDcDfd4P0Yyj7sn9pbM1uatTeRM5e7HD+1rJX5Xv9sw8d3Dt9CAd0grs\nEPtLnb5NizCdcNNtDrbdSChg0MLGDtgvYHy/skNBBw5KgEaXIeiiLvUtBgEZqhqF\nfL4C5lPpmgIUF+p5Didq2qgDvFjtGK8p2xhlFJyy88nTFpwKFngmFJDfz8THdFZF\nYXYV1jhJGRkZCJNs+zuM2SDfUNqDe9czmAVT6+homzLlU1e8kLaUJNc7EVmVivyC\nsncrz7aLM+SsWnTHQ2XHR6i4sGRrzBYTip8Ecq8hUAcld6QLHfNCcaqNP0i1f3M=\n=OsxB\n-----END PGP SIGNATURE-----\n", "payload": "tree e8ddcc0575b012ab6e8fd099746f571cc4bf304c\nparent 323fd64abde2aced9427e4470b626a898b80a783\nparent 6f8aa75329d0a4e588e58b8f22f7932bf3d3a706\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596119060 +0000\ncommitter GitHub <noreply@github.com> 1596119060 +0000\n\nMerge #5595\n\n5595: Rename RecordLit -> RecordExpr r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282702c2877e3f9002308b1b63fc472b5e799c56", "html_url": "https://github.com/rust-lang/rust/commit/282702c2877e3f9002308b1b63fc472b5e799c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282702c2877e3f9002308b1b63fc472b5e799c56/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "323fd64abde2aced9427e4470b626a898b80a783", "url": "https://api.github.com/repos/rust-lang/rust/commits/323fd64abde2aced9427e4470b626a898b80a783", "html_url": "https://github.com/rust-lang/rust/commit/323fd64abde2aced9427e4470b626a898b80a783"}, {"sha": "6f8aa75329d0a4e588e58b8f22f7932bf3d3a706", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8aa75329d0a4e588e58b8f22f7932bf3d3a706", "html_url": "https://github.com/rust-lang/rust/commit/6f8aa75329d0a4e588e58b8f22f7932bf3d3a706"}], "stats": {"total": 284, "additions": 145, "deletions": 139}, "files": [{"sha": "12018fc6ada4144da45818092b58f1f9968091b2", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -240,7 +240,7 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n         Expr::ParenExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::PathExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::Label(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n-        Expr::RecordLit(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n+        Expr::RecordExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::IndexExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::MethodCallExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::AwaitExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),"}, {"sha": "b925a2884cc7c3ab6a6db8c8cc0fd6a64df825ac", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         target,\n         move |edit| {\n             let field_shorthand =\n-                match to_extract.syntax().parent().and_then(ast::RecordField::cast) {\n+                match to_extract.syntax().parent().and_then(ast::RecordExprField::cast) {\n                     Some(field) => field.name_ref(),\n                     None => None,\n                 };"}, {"sha": "1aefa79cc3052b9f4a617b1717ff125769b5bdf9", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -82,7 +82,7 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n }\n \n fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let record_field: ast::RecordField = ctx.find_node_at_offset()?;\n+    let record_field: ast::RecordExprField = ctx.find_node_at_offset()?;\n     let (record_field_def, _) = ctx.sema.resolve_record_field(&record_field)?;\n \n     let current_module = ctx.sema.scope(record_field.syntax()).module()?;"}, {"sha": "120250e7900b2e6565c83f084007607810f01026", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -23,7 +23,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n //\n pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    reorder::<ast::RecordLit>(acc, ctx).or_else(|| reorder::<ast::RecordPat>(acc, ctx))\n+    reorder::<ast::RecordExpr>(acc, ctx).or_else(|| reorder::<ast::RecordPat>(acc, ctx))\n }\n \n fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -56,7 +56,7 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n     match node.kind() {\n-        RECORD_LIT => vec![RECORD_FIELD],\n+        RECORD_EXPR => vec![RECORD_EXPR_FIELD],\n         RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n         _ => vec![],\n     }\n@@ -65,7 +65,7 @@ fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n fn get_field_name(node: &SyntaxNode) -> String {\n     let res = match_ast! {\n         match node {\n-            ast::RecordField(field) => field.field_name().map(|it| it.to_string()),\n+            ast::RecordExprField(field) => field.field_name().map(|it| it.to_string()),\n             ast::RecordFieldPat(field) => field.field_name().map(|it| it.to_string()),\n             _ => None,\n         }"}, {"sha": "a654c618f5ce6f4b25abbfff7d640bc7794f2b89", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -209,7 +209,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_field(field)\n     }\n \n-    pub fn resolve_record_field(&self, field: &ast::RecordField) -> Option<(Field, Option<Local>)> {\n+    pub fn resolve_record_field(\n+        &self,\n+        field: &ast::RecordExprField,\n+    ) -> Option<(Field, Option<Local>)> {\n         self.imp.resolve_record_field(field)\n     }\n \n@@ -225,7 +228,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n-    pub fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantDef> {\n+    pub fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantDef> {\n         self.imp.resolve_variant(record_lit).map(VariantDef::from)\n     }\n \n@@ -240,7 +243,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     // FIXME: use this instead?\n     // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n \n-    pub fn record_literal_missing_fields(&self, literal: &ast::RecordLit) -> Vec<(Field, Type)> {\n+    pub fn record_literal_missing_fields(&self, literal: &ast::RecordExpr) -> Vec<(Field, Type)> {\n         self.imp.record_literal_missing_fields(literal)\n     }\n \n@@ -422,7 +425,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_field(self.db, field)\n     }\n \n-    fn resolve_record_field(&self, field: &ast::RecordField) -> Option<(Field, Option<Local>)> {\n+    fn resolve_record_field(&self, field: &ast::RecordExprField) -> Option<(Field, Option<Local>)> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n@@ -440,7 +443,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n-    fn resolve_variant(&self, record_lit: ast::RecordLit) -> Option<VariantId> {\n+    fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {\n         self.analyze(record_lit.syntax()).resolve_variant(self.db, record_lit)\n     }\n \n@@ -453,7 +456,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(pat.syntax()).resolve_bind_pat_to_const(self.db, pat)\n     }\n \n-    fn record_literal_missing_fields(&self, literal: &ast::RecordLit) -> Vec<(Field, Type)> {\n+    fn record_literal_missing_fields(&self, literal: &ast::RecordExpr) -> Vec<(Field, Type)> {\n         self.analyze(literal.syntax())\n             .record_literal_missing_fields(self.db, literal)\n             .unwrap_or_default()"}, {"sha": "8f438bba0e4c89d369253281afc26d52ca22ad58", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -159,7 +159,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_record_field(\n         &self,\n         db: &dyn HirDatabase,\n-        field: &ast::RecordField,\n+        field: &ast::RecordExprField,\n     ) -> Option<(Field, Option<Local>)> {\n         let expr = field.expr()?;\n         let expr_id = self.expr_id(db, &expr)?;\n@@ -246,7 +246,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordLit::cast) {\n+        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordExpr::cast) {\n             let expr_id = self.expr_id(db, &rec_lit.into())?;\n             if let Some(VariantId::EnumVariantId(variant)) =\n                 self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n@@ -284,7 +284,7 @@ impl SourceAnalyzer {\n     pub(crate) fn record_literal_missing_fields(\n         &self,\n         db: &dyn HirDatabase,\n-        literal: &ast::RecordLit,\n+        literal: &ast::RecordExpr,\n     ) -> Option<Vec<(Field, Type)>> {\n         let krate = self.resolver.krate()?;\n         let body = self.body.as_ref()?;\n@@ -358,7 +358,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_variant(\n         &self,\n         db: &dyn HirDatabase,\n-        record_lit: ast::RecordLit,\n+        record_lit: ast::RecordExpr,\n     ) -> Option<VariantId> {\n         let infer = self.infer.as_ref()?;\n         let expr_id = self.expr_id(db, &record_lit.into())?;"}, {"sha": "d5f18b9201c401a07773e6960a380a2bedf34071", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -216,7 +216,7 @@ pub struct BodySourceMap {\n     expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n-    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordField>>>,\n+    field_map: FxHashMap<(ExprId, usize), InFile<AstPtr<ast::RecordExprField>>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n@@ -314,7 +314,7 @@ impl BodySourceMap {\n         self.pat_map.get(&src).cloned()\n     }\n \n-    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordField>> {\n+    pub fn field_syntax(&self, expr: ExprId, field: usize) -> InFile<AstPtr<ast::RecordExprField>> {\n         self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "576342af9ae1fb1cebd4d1c8568e02b421504709", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -379,10 +379,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n-            ast::Expr::RecordLit(e) => {\n+            ast::Expr::RecordExpr(e) => {\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n-                let record_lit = if let Some(nfl) = e.record_field_list() {\n+                let record_lit = if let Some(nfl) = e.record_expr_field_list() {\n                     let fields = nfl\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))"}, {"sha": "41df666965c34996b6efe3c23a426cd37e3e83da", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -386,7 +386,7 @@ fn to_fragment_kind(db: &dyn AstDatabase, id: MacroCallId) -> FragmentKind {\n         MATCH_EXPR => FragmentKind::Expr,\n         MATCH_ARM => FragmentKind::Expr,\n         MATCH_GUARD => FragmentKind::Expr,\n-        RECORD_FIELD => FragmentKind::Expr,\n+        RECORD_EXPR_FIELD => FragmentKind::Expr,\n         CALL_EXPR => FragmentKind::Expr,\n         INDEX_EXPR => FragmentKind::Expr,\n         METHOD_CALL_EXPR => FragmentKind::Expr,"}, {"sha": "f210c305a3fb8539b4fe87c31d7127a1edb1a55f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -29,7 +29,7 @@ pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut Diag\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub file: HirFileId,\n-    pub field: AstPtr<ast::RecordField>,\n+    pub field: AstPtr<ast::RecordExprField>,\n }\n \n impl Diagnostic for NoSuchField {\n@@ -47,19 +47,19 @@ impl Diagnostic for NoSuchField {\n }\n \n impl AstDiagnostic for NoSuchField {\n-    type AST = ast::RecordField;\n+    type AST = ast::RecordExprField;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::RecordField::cast(node).unwrap()\n+        ast::RecordExprField::cast(node).unwrap()\n     }\n }\n \n #[derive(Debug)]\n pub struct MissingFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordFieldList>,\n+    pub field_list: AstPtr<ast::RecordExprFieldList>,\n     pub missed_fields: Vec<Name>,\n }\n \n@@ -80,12 +80,12 @@ impl Diagnostic for MissingFields {\n }\n \n impl AstDiagnostic for MissingFields {\n-    type AST = ast::RecordFieldList;\n+    type AST = ast::RecordExprFieldList;\n \n     fn ast(&self, db: &dyn AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::RecordFieldList::cast(node).unwrap()\n+        ast::RecordExprFieldList::cast(node).unwrap()\n     }\n }\n "}, {"sha": "f0e0f2988d5bd4e4758a53cbd047b6c56b8edde4", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -100,8 +100,8 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n             let root = source_ptr.file_syntax(db.upcast());\n-            if let ast::Expr::RecordLit(record_lit) = &source_ptr.value.to_node(&root) {\n-                if let Some(field_list) = record_lit.record_field_list() {\n+            if let ast::Expr::RecordExpr(record_lit) = &source_ptr.value.to_node(&root) {\n+                if let Some(field_list) = record_lit.record_expr_field_list() {\n                     let variant_data = variant_data(db.upcast(), variant_def);\n                     let missed_fields = missed_fields\n                         .into_iter()"}, {"sha": "c8704eb3e817087b5363924ab574678ec8da4706", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -37,9 +37,9 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n     pub(super) function_syntax: Option<ast::Fn>,\n     pub(super) use_item_syntax: Option<ast::Use>,\n-    pub(super) record_lit_syntax: Option<ast::RecordLit>,\n+    pub(super) record_lit_syntax: Option<ast::RecordExpr>,\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n-    pub(super) record_field_syntax: Option<ast::RecordField>,\n+    pub(super) record_field_syntax: Option<ast::RecordExprField>,\n     pub(super) impl_def: Option<ast::ImplDef>,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n@@ -316,7 +316,7 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n         let name_range = name_ref.syntax().text_range();\n-        if ast::RecordField::for_field_name(&name_ref).is_some() {\n+        if ast::RecordExprField::for_field_name(&name_ref).is_some() {\n             self.record_lit_syntax =\n                 self.sema.find_node_at_offset_with_macros(&original_file, offset);\n         }\n@@ -357,7 +357,7 @@ impl<'a> CompletionContext<'a> {\n             .take_while(|it| {\n                 it.kind() != SOURCE_FILE && it.kind() != MODULE && it.kind() != CALL_EXPR\n             })\n-            .find_map(ast::RecordField::cast);\n+            .find_map(ast::RecordExprField::cast);\n \n         let parent = match name_ref.syntax().parent() {\n             Some(it) => it,"}, {"sha": "efbb00d6d583cb29541dbda602ae34d7ead17509", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -146,7 +146,7 @@ fn missing_struct_field_fix(\n ) -> Option<Fix> {\n     let record_expr = sema.ast(d);\n \n-    let record_lit = ast::RecordLit::cast(record_expr.syntax().parent()?.parent()?)?;\n+    let record_lit = ast::RecordExpr::cast(record_expr.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n     let def_file_id;\n@@ -263,8 +263,8 @@ fn check_struct_shorthand_initialization(\n     file_id: FileId,\n     node: &SyntaxNode,\n ) -> Option<()> {\n-    let record_lit = ast::RecordLit::cast(node.clone())?;\n-    let record_field_list = record_lit.record_field_list()?;\n+    let record_lit = ast::RecordExpr::cast(node.clone())?;\n+    let record_field_list = record_lit.record_expr_field_list()?;\n     for record_field in record_field_list.fields() {\n         if let (Some(name_ref), Some(expr)) = (record_field.name_ref(), record_field.expr()) {\n             let field_name = name_ref.syntax().text().to_string();"}, {"sha": "597a7d82f8fe36b14cc3e22c36828f0732430dbb", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -41,7 +41,7 @@ fn try_extend_selection(\n         MATCH_ARM_LIST,\n         RECORD_FIELD_DEF_LIST,\n         TUPLE_FIELD_DEF_LIST,\n-        RECORD_FIELD_LIST,\n+        RECORD_EXPR_FIELD_LIST,\n         ENUM_VARIANT_LIST,\n         USE_TREE_LIST,\n         GENERIC_PARAM_LIST,"}, {"sha": "9725054500614627545d498d737c7369046e8dab", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -87,7 +87,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n         RECORD_FIELD_DEF_LIST\n         | RECORD_FIELD_PAT_LIST\n-        | RECORD_FIELD_LIST\n+        | RECORD_EXPR_FIELD_LIST\n         | ITEM_LIST\n         | EXTERN_ITEM_LIST\n         | USE_TREE_LIST"}, {"sha": "714ba6bd99f41f9a5c6b7f854b8f8fed6099aa01", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -96,7 +96,7 @@ fn get_chaining_hints(\n         return None;\n     }\n \n-    if matches!(expr, ast::Expr::RecordLit(_)) {\n+    if matches!(expr, ast::Expr::RecordExpr(_)) {\n         return None;\n     }\n "}, {"sha": "6ea7f173bd55fdcaf0ed4d2f61ec7ee2fdba9b63", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -236,7 +236,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n+    if let Some(record_field) = ast::RecordExprField::for_field_name(name_ref) {\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n             let field = Definition::Field(field);\n             let res = match local {"}, {"sha": "0b862b449f7548cdedad228b938ee0a2f4eb52d5", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -315,7 +315,7 @@ fn is_record_lit_name_ref(name_ref: &ast::NameRef) -> bool {\n     name_ref\n         .syntax()\n         .ancestors()\n-        .find_map(ast::RecordLit::cast)\n+        .find_map(ast::RecordExpr::cast)\n         .and_then(|l| l.path())\n         .and_then(|p| p.segment())\n         .map(|p| p.name_ref().as_ref() == Some(name_ref))"}, {"sha": "3610e739244c3148787629a7a3603901a79af6d5", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -143,7 +143,7 @@ pub(crate) fn reparser(\n     let res = match node {\n         BLOCK_EXPR => expressions::block_expr,\n         RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n-        RECORD_FIELD_LIST => items::record_field_list,\n+        RECORD_EXPR_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,\n         USE_TREE_LIST => items::use_tree_list,"}, {"sha": "e1c25a838fb70eb32782137d6b23564d32b35713", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -587,7 +587,7 @@ fn path_expr(p: &mut Parser, r: Restrictions) -> (CompletedMarker, BlockLike) {\n     match p.current() {\n         T!['{'] if !r.forbid_structs => {\n             record_field_list(p);\n-            (m.complete(p, RECORD_LIT), BlockLike::NotBlock)\n+            (m.complete(p, RECORD_EXPR), BlockLike::NotBlock)\n         }\n         T![!] if !p.at(T![!=]) => {\n             let block_like = items::macro_call_after_excl(p);\n@@ -627,7 +627,7 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n                     p.expect(T![:]);\n                 }\n                 expr(p);\n-                m.complete(p, RECORD_FIELD);\n+                m.complete(p, RECORD_EXPR_FIELD);\n             }\n             T![.] if p.at(T![..]) => {\n                 m.abandon(p);\n@@ -648,5 +648,5 @@ pub(crate) fn record_field_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_LIST);\n+    m.complete(p, RECORD_EXPR_FIELD_LIST);\n }"}, {"sha": "ac79786ff1359c5dc4b2de6614c8b9cdfbbcd9bb", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -188,9 +188,9 @@ pub enum SyntaxKind {\n     MATCH_ARM_LIST,\n     MATCH_ARM,\n     MATCH_GUARD,\n-    RECORD_LIT,\n-    RECORD_FIELD_LIST,\n-    RECORD_FIELD,\n+    RECORD_EXPR,\n+    RECORD_EXPR_FIELD_LIST,\n+    RECORD_EXPR_FIELD,\n     EFFECT_EXPR,\n     BOX_EXPR,\n     CALL_EXPR,"}, {"sha": "74e15c631785d210a26a2c59c5872d75c5bd6c7c", "filename": "crates/ra_ssr/src/matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fmatching.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -209,7 +209,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // Some kinds of nodes have special handling. For everything else, we fall back to default\n         // matching.\n         match code.kind() {\n-            SyntaxKind::RECORD_FIELD_LIST => {\n+            SyntaxKind::RECORD_EXPR_FIELD_LIST => {\n                 self.attempt_match_record_field_list(phase, pattern, code)\n             }\n             SyntaxKind::TOKEN_TREE => self.attempt_match_token_tree(phase, pattern, code),\n@@ -399,7 +399,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // Build a map keyed by field name.\n         let mut fields_by_name = FxHashMap::default();\n         for child in code.children() {\n-            if let Some(record) = ast::RecordField::cast(child.clone()) {\n+            if let Some(record) = ast::RecordExprField::cast(child.clone()) {\n                 if let Some(name) = record.field_name() {\n                     fields_by_name.insert(name.text().clone(), child.clone());\n                 }"}, {"sha": "8d3e42f256879ca09a3dde5e348bade560b41ae3", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -116,18 +116,18 @@ impl ast::AssocItemList {\n     }\n }\n \n-impl ast::RecordFieldList {\n+impl ast::RecordExprFieldList {\n     #[must_use]\n-    pub fn append_field(&self, field: &ast::RecordField) -> ast::RecordFieldList {\n+    pub fn append_field(&self, field: &ast::RecordExprField) -> ast::RecordExprFieldList {\n         self.insert_field(InsertPosition::Last, field)\n     }\n \n     #[must_use]\n     pub fn insert_field(\n         &self,\n-        position: InsertPosition<&'_ ast::RecordField>,\n-        field: &ast::RecordField,\n-    ) -> ast::RecordFieldList {\n+        position: InsertPosition<&'_ ast::RecordExprField>,\n+        field: &ast::RecordExprField,\n+    ) -> ast::RecordExprFieldList {\n         let is_multiline = self.syntax().text().contains_char('\\n');\n         let ws;\n         let space = if is_multiline {"}, {"sha": "365f942871338a4e8f66ac125d8829936bf9dd4e", "filename": "crates/ra_syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -412,8 +412,8 @@ fn test_literal_with_attr() {\n     assert_eq!(lit.token().text(), r#\"\"Hello\"\"#);\n }\n \n-impl ast::RecordField {\n-    pub fn parent_record_lit(&self) -> ast::RecordLit {\n-        self.syntax().ancestors().find_map(ast::RecordLit::cast).unwrap()\n+impl ast::RecordExprField {\n+    pub fn parent_record_lit(&self) -> ast::RecordExpr {\n+        self.syntax().ancestors().find_map(ast::RecordExpr::cast).unwrap()\n     }\n }"}, {"sha": "9f9c06e5064d428c8b3e9d8d1c80d9ac8d970f94", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -909,30 +909,32 @@ impl MatchGuard {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordLit {\n+pub struct RecordExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl RecordLit {\n+impl RecordExpr {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n+    pub fn record_expr_field_list(&self) -> Option<RecordExprFieldList> {\n+        support::child(&self.syntax)\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordFieldList {\n+pub struct RecordExprFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl RecordFieldList {\n+impl RecordExprFieldList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn fields(&self) -> AstChildren<RecordField> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<RecordExprField> { support::children(&self.syntax) }\n     pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n     pub fn spread(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordField {\n+pub struct RecordExprField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordField {}\n-impl RecordField {\n+impl ast::AttrsOwner for RecordExprField {}\n+impl RecordExprField {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n@@ -1345,7 +1347,7 @@ pub enum Expr {\n     BlockExpr(BlockExpr),\n     ReturnExpr(ReturnExpr),\n     MatchExpr(MatchExpr),\n-    RecordLit(RecordLit),\n+    RecordExpr(RecordExpr),\n     CallExpr(CallExpr),\n     IndexExpr(IndexExpr),\n     MethodCallExpr(MethodCallExpr),\n@@ -2357,8 +2359,8 @@ impl AstNode for MatchGuard {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordLit {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_LIT }\n+impl AstNode for RecordExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2368,8 +2370,8 @@ impl AstNode for RecordLit {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordFieldList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_LIST }\n+impl AstNode for RecordExprFieldList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_EXPR_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2379,8 +2381,8 @@ impl AstNode for RecordFieldList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordField {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD }\n+impl AstNode for RecordExprField {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_EXPR_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3119,8 +3121,8 @@ impl From<ReturnExpr> for Expr {\n impl From<MatchExpr> for Expr {\n     fn from(node: MatchExpr) -> Expr { Expr::MatchExpr(node) }\n }\n-impl From<RecordLit> for Expr {\n-    fn from(node: RecordLit) -> Expr { Expr::RecordLit(node) }\n+impl From<RecordExpr> for Expr {\n+    fn from(node: RecordExpr) -> Expr { Expr::RecordExpr(node) }\n }\n impl From<CallExpr> for Expr {\n     fn from(node: CallExpr) -> Expr { Expr::CallExpr(node) }\n@@ -3172,7 +3174,7 @@ impl AstNode for Expr {\n         match kind {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n-            | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n+            | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_EXPR | CALL_EXPR | INDEX_EXPR\n             | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | EFFECT_EXPR | CAST_EXPR\n             | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL | BOX_EXPR => {\n                 true\n@@ -3197,7 +3199,7 @@ impl AstNode for Expr {\n             BLOCK_EXPR => Expr::BlockExpr(BlockExpr { syntax }),\n             RETURN_EXPR => Expr::ReturnExpr(ReturnExpr { syntax }),\n             MATCH_EXPR => Expr::MatchExpr(MatchExpr { syntax }),\n-            RECORD_LIT => Expr::RecordLit(RecordLit { syntax }),\n+            RECORD_EXPR => Expr::RecordExpr(RecordExpr { syntax }),\n             CALL_EXPR => Expr::CallExpr(CallExpr { syntax }),\n             INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n             METHOD_CALL_EXPR => Expr::MethodCallExpr(MethodCallExpr { syntax }),\n@@ -3234,7 +3236,7 @@ impl AstNode for Expr {\n             Expr::BlockExpr(it) => &it.syntax,\n             Expr::ReturnExpr(it) => &it.syntax,\n             Expr::MatchExpr(it) => &it.syntax,\n-            Expr::RecordLit(it) => &it.syntax,\n+            Expr::RecordExpr(it) => &it.syntax,\n             Expr::CallExpr(it) => &it.syntax,\n             Expr::IndexExpr(it) => &it.syntax,\n             Expr::MethodCallExpr(it) => &it.syntax,\n@@ -3893,17 +3895,17 @@ impl std::fmt::Display for MatchGuard {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordLit {\n+impl std::fmt::Display for RecordExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordFieldList {\n+impl std::fmt::Display for RecordExprFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordField {\n+impl std::fmt::Display for RecordExprField {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "183ec4481ead3e318e534eb483dba9fe0ca88a01", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -64,13 +64,13 @@ pub fn use_item(use_tree: ast::UseTree) -> ast::Use {\n     ast_from_text(&format!(\"use {};\", use_tree))\n }\n \n-pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n+pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordExprField {\n     return match expr {\n         Some(expr) => from_text(&format!(\"{}: {}\", name, expr)),\n         None => from_text(&name.to_string()),\n     };\n \n-    fn from_text(text: &str) -> ast::RecordField {\n+    fn from_text(text: &str) -> ast::RecordExprField {\n         ast_from_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n     }\n }"}, {"sha": "8c7457e3205849f6df089ba13d421de5e18f9a7e", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -189,11 +189,11 @@ impl ast::StructDef {\n     }\n }\n \n-impl ast::RecordField {\n-    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordField> {\n+impl ast::RecordExprField {\n+    pub fn for_field_name(field_name: &ast::NameRef) -> Option<ast::RecordExprField> {\n         let candidate =\n-            field_name.syntax().parent().and_then(ast::RecordField::cast).or_else(|| {\n-                field_name.syntax().ancestors().nth(4).and_then(ast::RecordField::cast)\n+            field_name.syntax().parent().and_then(ast::RecordExprField::cast).or_else(|| {\n+                field_name.syntax().ancestors().nth(4).and_then(ast::RecordExprField::cast)\n             })?;\n         if candidate.field_name().as_ref() == Some(field_name) {\n             Some(candidate)"}, {"sha": "5b4e14676e345f1267b0b65577aff3d469455c77", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::Literal(it) => validate_literal(it, &mut errors),\n                 ast::BlockExpr(it) => block::validate_block_expr(it, &mut errors),\n                 ast::FieldExpr(it) => validate_numeric_name(it.name_ref(), &mut errors),\n-                ast::RecordField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n+                ast::RecordExprField(it) => validate_numeric_name(it.name_ref(), &mut errors),\n                 ast::Visibility(it) => validate_visibility(it, &mut errors),\n                 ast::RangeExpr(it) => validate_range_expr(it, &mut errors),\n                 ast::PathSegment(it) => validate_path_keywords(it, &mut errors),"}, {"sha": "1ce5f188ff10c5ab1a360e6380ccf50fd362ba56", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -75,16 +75,16 @@ SOURCE_FILE@0..183\n               IDENT@106..110 \"push\"\n             ARG_LIST@110..155\n               L_PAREN@110..111 \"(\"\n-              RECORD_LIT@111..154\n+              RECORD_EXPR@111..154\n                 PATH@111..120\n                   PATH_SEGMENT@111..120\n                     NAME_REF@111..120\n                       IDENT@111..120 \"ScopeData\"\n                 WHITESPACE@120..121 \" \"\n-                RECORD_FIELD_LIST@121..154\n+                RECORD_EXPR_FIELD_LIST@121..154\n                   L_CURLY@121..122 \"{\"\n                   WHITESPACE@122..123 \" \"\n-                  RECORD_FIELD@123..135\n+                  RECORD_EXPR_FIELD@123..135\n                     NAME_REF@123..129\n                       IDENT@123..129 \"parent\"\n                     COLON@129..130 \":\"\n@@ -96,7 +96,7 @@ SOURCE_FILE@0..183\n                             IDENT@131..135 \"None\"\n                   COMMA@135..136 \",\"\n                   WHITESPACE@136..137 \" \"\n-                  RECORD_FIELD@137..152\n+                  RECORD_EXPR_FIELD@137..152\n                     NAME_REF@137..144\n                       IDENT@137..144 \"entries\"\n                     COLON@144..145 \":\""}, {"sha": "a81c442c0d8542030850fdc25e139b8a0fd13e34", "filename": "crates/ra_syntax/test_data/parser/inline/err/0014_record_literal_before_ellipsis_recovery.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0014_record_literal_before_ellipsis_recovery.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -11,16 +11,16 @@ SOURCE_FILE@0..45\n     BLOCK_EXPR@10..44\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      RECORD_LIT@16..42\n+      RECORD_EXPR@16..42\n         PATH@16..17\n           PATH_SEGMENT@16..17\n             NAME_REF@16..17\n               IDENT@16..17 \"S\"\n         WHITESPACE@17..18 \" \"\n-        RECORD_FIELD_LIST@18..42\n+        RECORD_EXPR_FIELD_LIST@18..42\n           L_CURLY@18..19 \"{\"\n           WHITESPACE@19..20 \" \"\n-          RECORD_FIELD@20..40\n+          RECORD_EXPR_FIELD@20..40\n             NAME_REF@20..25\n               IDENT@20..25 \"field\"\n             WHITESPACE@25..26 \" \""}, {"sha": "a9ae1aa5953e93fb57173dad88e9e731ac094c61", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0061_record_lit.rast", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0061_record_lit.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -12,36 +12,36 @@ SOURCE_FILE@0..112\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n       EXPR_STMT@15..20\n-        RECORD_LIT@15..19\n+        RECORD_EXPR@15..19\n           PATH@15..16\n             PATH_SEGMENT@15..16\n               NAME_REF@15..16\n                 IDENT@15..16 \"S\"\n           WHITESPACE@16..17 \" \"\n-          RECORD_FIELD_LIST@17..19\n+          RECORD_EXPR_FIELD_LIST@17..19\n             L_CURLY@17..18 \"{\"\n             R_CURLY@18..19 \"}\"\n         SEMICOLON@19..20 \";\"\n       WHITESPACE@20..25 \"\\n    \"\n       EXPR_STMT@25..41\n-        RECORD_LIT@25..40\n+        RECORD_EXPR@25..40\n           PATH@25..26\n             PATH_SEGMENT@25..26\n               NAME_REF@25..26\n                 IDENT@25..26 \"S\"\n           WHITESPACE@26..27 \" \"\n-          RECORD_FIELD_LIST@27..40\n+          RECORD_EXPR_FIELD_LIST@27..40\n             L_CURLY@27..28 \"{\"\n             WHITESPACE@28..29 \" \"\n-            RECORD_FIELD@29..30\n+            RECORD_EXPR_FIELD@29..30\n               PATH_EXPR@29..30\n                 PATH@29..30\n                   PATH_SEGMENT@29..30\n                     NAME_REF@29..30\n                       IDENT@29..30 \"x\"\n             COMMA@30..31 \",\"\n             WHITESPACE@31..32 \" \"\n-            RECORD_FIELD@32..37\n+            RECORD_EXPR_FIELD@32..37\n               NAME_REF@32..33\n                 IDENT@32..33 \"y\"\n               COLON@33..34 \":\"\n@@ -54,24 +54,24 @@ SOURCE_FILE@0..112\n         SEMICOLON@40..41 \";\"\n       WHITESPACE@41..46 \"\\n    \"\n       EXPR_STMT@46..83\n-        RECORD_LIT@46..82\n+        RECORD_EXPR@46..82\n           PATH@46..47\n             PATH_SEGMENT@46..47\n               NAME_REF@46..47\n                 IDENT@46..47 \"S\"\n           WHITESPACE@47..48 \" \"\n-          RECORD_FIELD_LIST@48..82\n+          RECORD_EXPR_FIELD_LIST@48..82\n             L_CURLY@48..49 \"{\"\n             WHITESPACE@49..50 \" \"\n-            RECORD_FIELD@50..51\n+            RECORD_EXPR_FIELD@50..51\n               PATH_EXPR@50..51\n                 PATH@50..51\n                   PATH_SEGMENT@50..51\n                     NAME_REF@50..51\n                       IDENT@50..51 \"x\"\n             COMMA@51..52 \",\"\n             WHITESPACE@52..53 \" \"\n-            RECORD_FIELD@53..58\n+            RECORD_EXPR_FIELD@53..58\n               NAME_REF@53..54\n                 IDENT@53..54 \"y\"\n               COLON@54..55 \":\"\n@@ -100,16 +100,16 @@ SOURCE_FILE@0..112\n         SEMICOLON@82..83 \";\"\n       WHITESPACE@83..88 \"\\n    \"\n       EXPR_STMT@88..109\n-        RECORD_LIT@88..108\n+        RECORD_EXPR@88..108\n           PATH@88..99\n             PATH_SEGMENT@88..99\n               NAME_REF@88..99\n                 IDENT@88..99 \"TupleStruct\"\n           WHITESPACE@99..100 \" \"\n-          RECORD_FIELD_LIST@100..108\n+          RECORD_EXPR_FIELD_LIST@100..108\n             L_CURLY@100..101 \"{\"\n             WHITESPACE@101..102 \" \"\n-            RECORD_FIELD@102..106\n+            RECORD_EXPR_FIELD@102..106\n               NAME_REF@102..103\n                 INT_NUMBER@102..103 \"0\"\n               COLON@103..104 \":\""}, {"sha": "37ca478e69bd307ddaf0dcba35aedd4e2f1d3467", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0066_match_arm.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0066_match_arm.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -49,14 +49,14 @@ SOURCE_FILE@0..167\n                   WHITESPACE@60..61 \" \"\n                   R_ANGLE@61..62 \">\"\n                   WHITESPACE@62..63 \" \"\n-                  RECORD_LIT@63..77\n+                  RECORD_EXPR@63..77\n                     PATH@63..67\n                       PATH_SEGMENT@63..67\n                         NAME_REF@63..67\n                           IDENT@63..67 \"Test\"\n-                    RECORD_FIELD_LIST@67..77\n+                    RECORD_EXPR_FIELD_LIST@67..77\n                       L_CURLY@67..68 \"{\"\n-                      RECORD_FIELD@68..76\n+                      RECORD_EXPR_FIELD@68..76\n                         NAME_REF@68..73\n                           IDENT@68..73 \"field\"\n                         COLON@73..74 \":\""}, {"sha": "673d396eea1c3075e425d7b012bdcdefdede2620", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0071_match_expr.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0071_match_expr.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -72,13 +72,13 @@ SOURCE_FILE@0..97\n           BLOCK_EXPR@82..90\n             L_CURLY@82..83 \"{\"\n             WHITESPACE@83..84 \" \"\n-            RECORD_LIT@84..88\n+            RECORD_EXPR@84..88\n               PATH@84..85\n                 PATH_SEGMENT@84..85\n                   NAME_REF@84..85\n                     IDENT@84..85 \"S\"\n               WHITESPACE@85..86 \" \"\n-              RECORD_FIELD_LIST@86..88\n+              RECORD_EXPR_FIELD_LIST@86..88\n                 L_CURLY@86..87 \"{\"\n                 R_CURLY@87..88 \"}\"\n             WHITESPACE@88..89 \" \""}, {"sha": "54ea2c7c669672a363c047e1f57c58e3e9c46e88", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0125_record_literal_field_with_attr.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0125_record_literal_field_with_attr.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -11,16 +11,16 @@ SOURCE_FILE@0..46\n     BLOCK_EXPR@10..45\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      RECORD_LIT@16..43\n+      RECORD_EXPR@16..43\n         PATH@16..17\n           PATH_SEGMENT@16..17\n             NAME_REF@16..17\n               IDENT@16..17 \"S\"\n         WHITESPACE@17..18 \" \"\n-        RECORD_FIELD_LIST@18..43\n+        RECORD_EXPR_FIELD_LIST@18..43\n           L_CURLY@18..19 \"{\"\n           WHITESPACE@19..20 \" \"\n-          RECORD_FIELD@20..41\n+          RECORD_EXPR_FIELD@20..41\n             ATTR@20..32\n               POUND@20..21 \"#\"\n               L_BRACK@21..22 \"[\""}, {"sha": "a7f87c020df783cf131c9e701201d466c84f3271", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0138_expression_after_block.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_expression_after_block.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -22,14 +22,14 @@ SOURCE_FILE@0..52\n         WHITESPACE@23..24 \" \"\n         EQ@24..25 \"=\"\n         WHITESPACE@25..26 \" \"\n-        RECORD_LIT@26..33\n+        RECORD_EXPR@26..33\n           PATH@26..27\n             PATH_SEGMENT@26..27\n               NAME_REF@26..27\n                 IDENT@26..27 \"F\"\n-          RECORD_FIELD_LIST@27..33\n+          RECORD_EXPR_FIELD_LIST@27..33\n             L_CURLY@27..28 \"{\"\n-            RECORD_FIELD@28..32\n+            RECORD_EXPR_FIELD@28..32\n               NAME_REF@28..29\n                 IDENT@28..29 \"x\"\n               COLON@29..30 \":\""}, {"sha": "1c5545b6d37be6237f9989c5439e48b1ac138b6f", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -46,16 +46,16 @@ SOURCE_FILE@0..160\n         BIN_EXPR@107..135\n           INDEX_EXPR@107..131\n             FIELD_EXPR@107..128\n-              RECORD_LIT@107..124\n+              RECORD_EXPR@107..124\n                 PATH@107..111\n                   PATH_SEGMENT@107..111\n                     NAME_REF@107..111\n                       IDENT@107..111 \"Repr\"\n                 WHITESPACE@111..112 \" \"\n-                RECORD_FIELD_LIST@112..124\n+                RECORD_EXPR_FIELD_LIST@112..124\n                   L_CURLY@112..113 \"{\"\n                   WHITESPACE@113..114 \" \"\n-                  RECORD_FIELD@114..122\n+                  RECORD_EXPR_FIELD@114..122\n                     NAME_REF@114..117\n                       IDENT@114..117 \"raw\"\n                     COLON@117..118 \":\"\n@@ -83,14 +83,14 @@ SOURCE_FILE@0..160\n       WHITESPACE@136..141 \"\\n    \"\n       EXPR_STMT@141..157\n         CALL_EXPR@141..156\n-          RECORD_LIT@141..154\n+          RECORD_EXPR@141..154\n             PATH@141..145\n               PATH_SEGMENT@141..145\n                 NAME_REF@141..145\n                   IDENT@141..145 \"Repr\"\n-            RECORD_FIELD_LIST@145..154\n+            RECORD_EXPR_FIELD_LIST@145..154\n               L_CURLY@145..146 \"{\"\n-              RECORD_FIELD@146..153\n+              RECORD_EXPR_FIELD@146..153\n                 NAME_REF@146..149\n                   IDENT@146..149 \"raw\"\n                 COLON@149..150 \":\""}, {"sha": "38709c63e0871977f410dba5fda3f249784f254a", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -159,9 +159,9 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"MATCH_ARM_LIST\",\n         \"MATCH_ARM\",\n         \"MATCH_GUARD\",\n-        \"RECORD_LIT\",\n-        \"RECORD_FIELD_LIST\",\n-        \"RECORD_FIELD\",\n+        \"RECORD_EXPR\",\n+        \"RECORD_EXPR_FIELD_LIST\",\n+        \"RECORD_EXPR_FIELD\",\n         \"EFFECT_EXPR\",\n         \"BOX_EXPR\",\n         // postfix"}, {"sha": "49b2c9ff8893b7192d0864b620e2939bf7c7a9b9", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/282702c2877e3f9002308b1b63fc472b5e799c56/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/282702c2877e3f9002308b1b63fc472b5e799c56/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=282702c2877e3f9002308b1b63fc472b5e799c56", "patch": "@@ -82,10 +82,6 @@ StructDef =\n   | TupleFieldDefList WhereClause? ';'\n   )\n \n-UnionDef =\n-  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n-  RecordFieldDefList\n-\n RecordFieldDefList =\n  '{' fields:RecordFieldDef* '}'\n \n@@ -102,6 +98,11 @@ FieldDefList =\n   RecordFieldDefList\n | TupleFieldDefList\n \n+\n+UnionDef =\n+  Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n+  RecordFieldDefList\n+\n EnumDef =\n   Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n   variant_list:EnumVariantList\n@@ -284,16 +285,16 @@ MatchArm =\n MatchGuard =\n   'if' Expr\n \n-RecordLit =\n- Path RecordFieldList\n+RecordExpr =\n+ Path RecordExprFieldList\n \n-RecordFieldList =\n+RecordExprFieldList =\n   '{'\n-    fields:RecordField*\n+    fields:RecordExprField*\n     ('..' spread:Expr)?\n   '}'\n \n-RecordField =\n+RecordExprField =\n   Attr* NameRef (':' Expr)?\n \n OrPat =\n@@ -522,7 +523,7 @@ Expr =\n | BlockExpr\n | ReturnExpr\n | MatchExpr\n-| RecordLit\n+| RecordExpr\n | CallExpr\n | IndexExpr\n | MethodCallExpr"}]}