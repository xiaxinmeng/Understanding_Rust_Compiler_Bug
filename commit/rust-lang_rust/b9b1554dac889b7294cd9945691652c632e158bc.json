{"sha": "b9b1554dac889b7294cd9945691652c632e158bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YjE1NTRkYWM4ODliNzI5NGNkOTk0NTY5MTY1MmM2MzJlMTU4YmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T13:10:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T13:10:15Z"}, "message": "Fix unsizing casts", "tree": {"sha": "6e4200eec5d9ccbb8a7c69ea25441cb0c1a68c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4200eec5d9ccbb8a7c69ea25441cb0c1a68c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b1554dac889b7294cd9945691652c632e158bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b1554dac889b7294cd9945691652c632e158bc", "html_url": "https://github.com/rust-lang/rust/commit/b9b1554dac889b7294cd9945691652c632e158bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b1554dac889b7294cd9945691652c632e158bc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97ed1a46c8b7531435f8728ad66ca1d3fa4bef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97ed1a46c8b7531435f8728ad66ca1d3fa4bef4", "html_url": "https://github.com/rust-lang/rust/commit/b97ed1a46c8b7531435f8728ad66ca1d3fa4bef4"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "96b2e92292489eecf36283c79e00906946cc01e4", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b9b1554dac889b7294cd9945691652c632e158bc/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b1554dac889b7294cd9945691652c632e158bc/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=b9b1554dac889b7294cd9945691652c632e158bc", "patch": "@@ -25,12 +25,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // FIXME: In which cases should we trigger UB when the source is uninit?\n         match cast_kind {\n             Pointer(PointerCast::Unsize) => {\n-                assert_eq!(\n-                    cast_ty, dest.layout.ty,\n-                    \"mismatch of cast type {} and place type {}\",\n-                    cast_ty, dest.layout.ty\n-                );\n-                self.unsize_into(src, dest)?;\n+                let cast_ty = self.layout_of(cast_ty)?;\n+                self.unsize_into(src, cast_ty, dest)?;\n             }\n \n             Misc => {\n@@ -266,11 +262,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         dest: PlaceTy<'tcx, M::PointerTag>,\n         // The pointee types\n         source_ty: Ty<'tcx>,\n-        dest_ty: Ty<'tcx>,\n+        cast_ty: Ty<'tcx>,\n     ) -> InterpResult<'tcx> {\n         // A<Struct> -> A<Trait> conversion\n         let (src_pointee_ty, dest_pointee_ty) =\n-            self.tcx.struct_lockstep_tails_erasing_lifetimes(source_ty, dest_ty, self.param_env);\n+            self.tcx.struct_lockstep_tails_erasing_lifetimes(source_ty, cast_ty, self.param_env);\n \n         match (&src_pointee_ty.kind, &dest_pointee_ty.kind) {\n             (&ty::Array(_, length), &ty::Slice(_)) => {\n@@ -298,48 +294,50 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_immediate(val, dest)\n             }\n \n-            _ => bug!(\"invalid unsizing {:?} -> {:?}\", src.layout.ty, dest.layout.ty),\n+            _ => bug!(\"invalid unsizing {:?} -> {:?}\", src.layout.ty, cast_ty),\n         }\n     }\n \n     fn unsize_into(\n         &mut self,\n         src: OpTy<'tcx, M::PointerTag>,\n+        cast_ty: TyAndLayout<'tcx>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        trace!(\"Unsizing {:?} of type {} into {:?}\", *src, src.layout.ty, dest.layout.ty);\n-        match (&src.layout.ty.kind, &dest.layout.ty.kind) {\n-            (&ty::Ref(_, s, _), &ty::Ref(_, d, _) | &ty::RawPtr(TypeAndMut { ty: d, .. }))\n-            | (&ty::RawPtr(TypeAndMut { ty: s, .. }), &ty::RawPtr(TypeAndMut { ty: d, .. })) => {\n-                self.unsize_into_ptr(src, dest, s, d)\n+        trace!(\"Unsizing {:?} of type {} into {:?}\", *src, src.layout.ty, cast_ty.ty);\n+        match (&src.layout.ty.kind, &cast_ty.ty.kind) {\n+            (&ty::Ref(_, s, _), &ty::Ref(_, c, _) | &ty::RawPtr(TypeAndMut { ty: c, .. }))\n+            | (&ty::RawPtr(TypeAndMut { ty: s, .. }), &ty::RawPtr(TypeAndMut { ty: c, .. })) => {\n+                self.unsize_into_ptr(src, dest, s, c)\n             }\n             (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n                 assert_eq!(def_a, def_b);\n                 if def_a.is_box() || def_b.is_box() {\n                     if !def_a.is_box() || !def_b.is_box() {\n-                        bug!(\"invalid unsizing between {:?} -> {:?}\", src.layout, dest.layout);\n+                        bug!(\"invalid unsizing between {:?} -> {:?}\", src.layout.ty, cast_ty.ty);\n                     }\n                     return self.unsize_into_ptr(\n                         src,\n                         dest,\n                         src.layout.ty.boxed_ty(),\n-                        dest.layout.ty.boxed_ty(),\n+                        cast_ty.ty.boxed_ty(),\n                     );\n                 }\n \n                 // unsizing of generic struct with pointer fields\n                 // Example: `Arc<T>` -> `Arc<Trait>`\n                 // here we need to increase the size of every &T thin ptr field to a fat ptr\n                 for i in 0..src.layout.fields.count() {\n-                    let dst_field = self.place_field(dest, i)?;\n-                    if dst_field.layout.is_zst() {\n+                    let cast_ty_field = cast_ty.field(self, i)?;\n+                    if cast_ty_field.is_zst() {\n                         continue;\n                     }\n                     let src_field = self.operand_field(src, i)?;\n-                    if src_field.layout.ty == dst_field.layout.ty {\n+                    let dst_field = self.place_field(dest, i)?;\n+                    if src_field.layout.ty == cast_ty_field.ty {\n                         self.copy_op(src_field, dst_field)?;\n                     } else {\n-                        self.unsize_into(src_field, dst_field)?;\n+                        self.unsize_into(src_field, cast_ty_field, dst_field)?;\n                     }\n                 }\n                 Ok(())"}]}