{"sha": "9042e1e8de522ffa48ce6a543130bc72ea04d517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNDJlMWU4ZGU1MjJmZmE0OGNlNmE1NDMxMzBiYzcyZWEwNGQ1MTc=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-09T06:13:53Z"}, "committer": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-10T06:00:03Z"}, "message": "Include static methods on traits in reexports.", "tree": {"sha": "b591d257f9a3ea58d7e93cda76ec9db13dd08f94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b591d257f9a3ea58d7e93cda76ec9db13dd08f94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9042e1e8de522ffa48ce6a543130bc72ea04d517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9042e1e8de522ffa48ce6a543130bc72ea04d517", "html_url": "https://github.com/rust-lang/rust/commit/9042e1e8de522ffa48ce6a543130bc72ea04d517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9042e1e8de522ffa48ce6a543130bc72ea04d517/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "html_url": "https://github.com/rust-lang/rust/commit/ad8e236f32fccf6ec99025e2ba77f79b4c98d399"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "d2b56863d1a15da0422b1c6cac6cdfb293fed53d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9042e1e8de522ffa48ce6a543130bc72ea04d517/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9042e1e8de522ffa48ce6a543130bc72ea04d517/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9042e1e8de522ffa48ce6a543130bc72ea04d517", "patch": "@@ -363,6 +363,47 @@ fn encode_path(ecx: @EncodeContext,\n     ebml_w.end_tag();\n }\n \n+fn encode_reexported_static_method(ecx: @EncodeContext,\n+                                   ebml_w: &mut writer::Encoder,\n+                                   exp: &middle::resolve::Export2,\n+                                   m: @ty::method) {\n+    debug!(\"(encode static trait method) reexport '%s::%s'\",\n+            *exp.name, *ecx.tcx.sess.str_of(m.ident));\n+    ebml_w.start_tag(tag_items_data_item_reexport);\n+    ebml_w.start_tag(tag_items_data_item_reexport_def_id);\n+    ebml_w.wr_str(def_to_str(m.def_id));\n+    ebml_w.end_tag();\n+    ebml_w.start_tag(tag_items_data_item_reexport_name);\n+    ebml_w.wr_str(*exp.name + \"::\" + *ecx.tcx.sess.str_of(m.ident));\n+    ebml_w.end_tag();\n+    ebml_w.end_tag();\n+}\n+\n+fn encode_reexported_static_methods(ecx: @EncodeContext,\n+                                    ebml_w: &mut writer::Encoder,\n+                                    mod_path: &[ast_map::path_elt],\n+                                    exp: &middle::resolve::Export2) {\n+    match ecx.tcx.trait_methods_cache.find(&exp.def_id) {\n+        Some(methods) => {\n+            match ecx.tcx.items.find(&exp.def_id.node) {\n+                Some(&ast_map::node_item(_, path)) => {\n+                    if mod_path != *path {\n+                        for methods.each |&m| {\n+                            if m.self_ty  == ast::sty_static {\n+                                encode_reexported_static_method(ecx,\n+                                                                ebml_w,\n+                                                                exp, m);\n+                            }\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn encode_info_for_mod(ecx: @EncodeContext,\n                        ebml_w: &mut writer::Encoder,\n                        md: &_mod,\n@@ -413,6 +454,7 @@ fn encode_info_for_mod(ecx: @EncodeContext,\n                 ebml_w.wr_str(*exp.name);\n                 ebml_w.end_tag();\n                 ebml_w.end_tag();\n+                encode_reexported_static_methods(ecx, ebml_w, path, exp);\n             }\n         }\n         None => {"}]}