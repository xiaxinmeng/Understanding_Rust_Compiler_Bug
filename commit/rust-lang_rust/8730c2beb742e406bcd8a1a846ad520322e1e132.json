{"sha": "8730c2beb742e406bcd8a1a846ad520322e1e132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzBjMmJlYjc0MmU0MDZiY2Q4YTFhODQ2YWQ1MjAzMjJlMWUxMzI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-08-28T08:23:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-28T08:23:53Z"}, "message": "Rollup merge of #75330 - Nemo157:improve-doc-cfg-features, r=GuillaumeGomez\n\nImprove rendering of crate features via doc(cfg)\n\nThe current rendering of crate features with `doc(cfg(feature = \"..\"))` is verbose and unwieldy for users, `doc(cfg(target_feature = \"..\"))` is special-cased to make it render nicely, and a similar rendering can be applied to `doc(cfg(feature))` to make it easier for users to read.\n\nI also added special casing of `all`/`any` cfgs consisting of just `feature`/`target-feature` to remove the repetitive \"target/crate feature\" prefix.\n\nThe downside of this current rendering is that there is no distinction between `feature` and `target_feature` in the shorthand display. IMO this is ok, or if anything `target_feature` should have a more verbose shorthand, because `doc(cfg(feature = \"..\"))` usage is going to vastly outstrip `doc(cfg(target_feature = \"..\"))` usage in non-stdlib crates when it eventually stabilizes (or even before that given the number of crates using `cfg_attr(docsrs)` like constructs).\n\n## Previously\n\n<img width=\"259\" alt=\"Screenshot 2020-08-09 at 13 32 42\" src=\"https://user-images.githubusercontent.com/81079/89731110-d090c000-da44-11ea-96fa-56adc6339123.png\">\n<img width=\"438\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731116-d7b7ce00-da44-11ea-87c6-022d192d6eca.png\">\n<img width=\"765\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731152-24030e00-da45-11ea-9552-1c270bff2729.png\">\n<img width=\"671\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731158-28c7c200-da45-11ea-8acb-97d8a4ce00eb.png\">\n\n## Now\n\n<img width=\"216\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731123-e1d9cc80-da44-11ea-82a8-5900bd9448a5.png\">\n<img width=\"433\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731127-e8684400-da44-11ea-9d18-572fd810f19f.png\">\n<img width=\"606\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731162-2feed000-da45-11ea-98d2-8a88c364d903.png\">\n<img width=\"669\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731991-ccb46c00-da4b-11ea-9416-cd20a3193826.png\">\n\ncc #43781", "tree": {"sha": "132942ed094208b7b45206c2c1362e5fc6a1b94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132942ed094208b7b45206c2c1362e5fc6a1b94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8730c2beb742e406bcd8a1a846ad520322e1e132", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfSL8aCRBK7hj4Ov3rIwAAdHIIAKvRS+8KO80zRGCApRoT5W4l\nwIi76hsnzXsDY+/bUlySnAggzu/WtGksXDMHMN3eeU+ll84c3om3hafVccLxvB9t\nizR/JM14IDEc6fQNNd9qB2pM+BrpD654nTm4n+0NxMyrrrbZWGmJu+pSuDxWqo0t\nIIiA5Klm+QYbgfTHM8IAMdnJNvp11vLtGs6C5MxPrLqRifBKZsGDlzhhaXX0vXnZ\nylOAn3hyKg6K0ikB9Nrp+IDKPmPsowSbt2ShsgsP+q8Ecr7blmzQ8e+DFc2WmkE0\ngq1cXC6s6rO7ogAJhoCBLJ2FT2Wrb9jF/hhnEuJu9TzoKTjJOmzcR4UDSyA5MC4=\n=yAE1\n-----END PGP SIGNATURE-----\n", "payload": "tree 132942ed094208b7b45206c2c1362e5fc6a1b94d\nparent 41aaa90c67cdb04cac7427756891ad04c3e0bebf\nparent 3328bd9a0f19b4c7bb8932b262583b8edf885338\nauthor Pietro Albini <pietro@pietroalbini.org> 1598603033 +0200\ncommitter GitHub <noreply@github.com> 1598603033 +0200\n\nRollup merge of #75330 - Nemo157:improve-doc-cfg-features, r=GuillaumeGomez\n\nImprove rendering of crate features via doc(cfg)\n\nThe current rendering of crate features with `doc(cfg(feature = \"..\"))` is verbose and unwieldy for users, `doc(cfg(target_feature = \"..\"))` is special-cased to make it render nicely, and a similar rendering can be applied to `doc(cfg(feature))` to make it easier for users to read.\n\nI also added special casing of `all`/`any` cfgs consisting of just `feature`/`target-feature` to remove the repetitive \"target/crate feature\" prefix.\n\nThe downside of this current rendering is that there is no distinction between `feature` and `target_feature` in the shorthand display. IMO this is ok, or if anything `target_feature` should have a more verbose shorthand, because `doc(cfg(feature = \"..\"))` usage is going to vastly outstrip `doc(cfg(target_feature = \"..\"))` usage in non-stdlib crates when it eventually stabilizes (or even before that given the number of crates using `cfg_attr(docsrs)` like constructs).\n\n## Previously\n\n<img width=\"259\" alt=\"Screenshot 2020-08-09 at 13 32 42\" src=\"https://user-images.githubusercontent.com/81079/89731110-d090c000-da44-11ea-96fa-56adc6339123.png\">\n<img width=\"438\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731116-d7b7ce00-da44-11ea-87c6-022d192d6eca.png\">\n<img width=\"765\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731152-24030e00-da45-11ea-9552-1c270bff2729.png\">\n<img width=\"671\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731158-28c7c200-da45-11ea-8acb-97d8a4ce00eb.png\">\n\n## Now\n\n<img width=\"216\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731123-e1d9cc80-da44-11ea-82a8-5900bd9448a5.png\">\n<img width=\"433\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731127-e8684400-da44-11ea-9d18-572fd810f19f.png\">\n<img width=\"606\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731162-2feed000-da45-11ea-98d2-8a88c364d903.png\">\n<img width=\"669\" alt=\"image\" src=\"https://user-images.githubusercontent.com/81079/89731991-ccb46c00-da4b-11ea-9416-cd20a3193826.png\">\n\ncc #43781\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8730c2beb742e406bcd8a1a846ad520322e1e132", "html_url": "https://github.com/rust-lang/rust/commit/8730c2beb742e406bcd8a1a846ad520322e1e132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8730c2beb742e406bcd8a1a846ad520322e1e132/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41aaa90c67cdb04cac7427756891ad04c3e0bebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/41aaa90c67cdb04cac7427756891ad04c3e0bebf", "html_url": "https://github.com/rust-lang/rust/commit/41aaa90c67cdb04cac7427756891ad04c3e0bebf"}, {"sha": "3328bd9a0f19b4c7bb8932b262583b8edf885338", "url": "https://api.github.com/repos/rust-lang/rust/commits/3328bd9a0f19b4c7bb8932b262583b8edf885338", "html_url": "https://github.com/rust-lang/rust/commit/3328bd9a0f19b4c7bb8932b262583b8edf885338"}], "stats": {"total": 187, "additions": 154, "deletions": 33}, "files": [{"sha": "c039b181178a40f198eb48512e2cc11c82458cb8", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 128, "deletions": 23, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=8730c2beb742e406bcd8a1a846ad520322e1e132", "patch": "@@ -135,7 +135,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = Html(self, true).to_string();\n+        let mut msg = Display(self, Format::ShortHtml).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i..i + 1].make_ascii_uppercase();\n@@ -148,14 +148,29 @@ impl Cfg {\n     pub(crate) fn render_long_html(&self) -> String {\n         let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n \n-        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self, false));\n+        let mut msg = format!(\n+            \"This is supported {} <strong>{}</strong>\",\n+            on,\n+            Display(self, Format::LongHtml)\n+        );\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n         msg.push('.');\n         msg\n     }\n \n+    /// Renders the configuration for long display, as a long plain text description.\n+    pub(crate) fn render_long_plain(&self) -> String {\n+        let on = if self.should_use_with_in_description() { \"with\" } else { \"on\" };\n+\n+        let mut msg = format!(\"This is supported {} {}\", on, Display(self, Format::LongPlain));\n+        if self.should_append_only_to_description() {\n+            msg.push_str(\" only\");\n+        }\n+        msg\n+    }\n+\n     fn should_capitalize_first_letter(&self) -> bool {\n         match *self {\n             Cfg::False | Cfg::True | Cfg::Not(..) => true,\n@@ -286,9 +301,31 @@ impl ops::BitOr for Cfg {\n     }\n }\n \n-/// Pretty-print wrapper for a `Cfg`. Also indicates whether the \"short-form\" rendering should be\n-/// used.\n-struct Html<'a>(&'a Cfg, bool);\n+#[derive(Clone, Copy)]\n+enum Format {\n+    LongHtml,\n+    LongPlain,\n+    ShortHtml,\n+}\n+\n+impl Format {\n+    fn is_long(self) -> bool {\n+        match self {\n+            Format::LongHtml | Format::LongPlain => true,\n+            Format::ShortHtml => false,\n+        }\n+    }\n+\n+    fn is_html(self) -> bool {\n+        match self {\n+            Format::LongHtml | Format::ShortHtml => true,\n+            Format::LongPlain => false,\n+        }\n+    }\n+}\n+\n+/// Pretty-print wrapper for a `Cfg`. Also indicates what form of rendering should be used.\n+struct Display<'a>(&'a Cfg, Format);\n \n fn write_with_opt_paren<T: fmt::Display>(\n     fmt: &mut fmt::Formatter<'_>,\n@@ -305,7 +342,7 @@ fn write_with_opt_paren<T: fmt::Display>(\n     Ok(())\n }\n \n-impl<'a> fmt::Display for Html<'a> {\n+impl<'a> fmt::Display for Display<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self.0 {\n             Cfg::Not(ref child) => match **child {\n@@ -314,31 +351,86 @@ impl<'a> fmt::Display for Html<'a> {\n                         if sub_cfgs.iter().all(Cfg::is_simple) { \" nor \" } else { \", nor \" };\n                     for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                         fmt.write_str(if i == 0 { \"neither \" } else { separator })?;\n-                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Display(sub_cfg, self.1))?;\n                     }\n                     Ok(())\n                 }\n-                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple, self.1)),\n-                ref c => write!(fmt, \"not ({})\", Html(c, self.1)),\n+                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Display(simple, self.1)),\n+                ref c => write!(fmt, \"not ({})\", Display(c, self.1)),\n             },\n \n             Cfg::Any(ref sub_cfgs) => {\n                 let separator = if sub_cfgs.iter().all(Cfg::is_simple) { \" or \" } else { \", or \" };\n+\n+                let short_longhand = self.1.is_long() && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(separator)?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        if self.1.is_html() {\n+                            write!(fmt, \"<code>{}</code>\", feat)?;\n+                        } else {\n+                            write!(fmt, \"`{}`\", feat)?;\n+                        }\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Display(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }\n \n             Cfg::All(ref sub_cfgs) => {\n+                let short_longhand = self.1.is_long() && {\n+                    let all_crate_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::feature, Some(_))));\n+                    let all_target_features = sub_cfgs\n+                        .iter()\n+                        .all(|sub_cfg| matches!(sub_cfg, Cfg::Cfg(sym::target_feature, Some(_))));\n+\n+                    if all_crate_features {\n+                        fmt.write_str(\"crate features \")?;\n+                        true\n+                    } else if all_target_features {\n+                        fmt.write_str(\"target features \")?;\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                };\n+\n                 for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                     if i != 0 {\n                         fmt.write_str(\" and \")?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n+                    if let (true, Cfg::Cfg(_, Some(feat))) = (short_longhand, sub_cfg) {\n+                        if self.1.is_html() {\n+                            write!(fmt, \"<code>{}</code>\", feat)?;\n+                        } else {\n+                            write!(fmt, \"`{}`\", feat)?;\n+                        }\n+                    } else {\n+                        write_with_opt_paren(fmt, !sub_cfg.is_simple(), Display(sub_cfg, self.1))?;\n+                    }\n                 }\n                 Ok(())\n             }\n@@ -406,26 +498,39 @@ impl<'a> fmt::Display for Html<'a> {\n                     },\n                     (sym::target_endian, Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (sym::target_pointer_width, Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n-                    (sym::target_feature, Some(feat)) => {\n-                        if self.1 {\n-                            return write!(fmt, \"<code>{}</code>\", feat);\n-                        } else {\n+                    (sym::target_feature, Some(feat)) => match self.1 {\n+                        Format::LongHtml => {\n                             return write!(fmt, \"target feature <code>{}</code>\", feat);\n                         }\n-                    }\n+                        Format::LongPlain => return write!(fmt, \"target feature `{}`\", feat),\n+                        Format::ShortHtml => return write!(fmt, \"<code>{}</code>\", feat),\n+                    },\n+                    (sym::feature, Some(feat)) => match self.1 {\n+                        Format::LongHtml => {\n+                            return write!(fmt, \"crate feature <code>{}</code>\", feat);\n+                        }\n+                        Format::LongPlain => return write!(fmt, \"crate feature `{}`\", feat),\n+                        Format::ShortHtml => return write!(fmt, \"<code>{}</code>\", feat),\n+                    },\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n                     fmt.write_str(human_readable)\n                 } else if let Some(v) = value {\n-                    write!(\n-                        fmt,\n-                        \"<code>{}=\\\"{}\\\"</code>\",\n-                        Escape(&name.as_str()),\n-                        Escape(&v.as_str())\n-                    )\n-                } else {\n+                    if self.1.is_html() {\n+                        write!(\n+                            fmt,\n+                            r#\"<code>{}=\"{}\"</code>\"#,\n+                            Escape(&name.as_str()),\n+                            Escape(&v.as_str())\n+                        )\n+                    } else {\n+                        write!(fmt, r#\"`{}=\"{}\"`\"#, name, v)\n+                    }\n+                } else if self.1.is_html() {\n                     write!(fmt, \"<code>{}</code>\", Escape(&name.as_str()))\n+                } else {\n+                    write!(fmt, \"`{}`\", name)\n                 }\n             }\n         }"}, {"sha": "15afe9257d187cc5b203800bc4074fe663eb2305", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8730c2beb742e406bcd8a1a846ad520322e1e132", "patch": "@@ -2130,8 +2130,8 @@ fn item_module(w: &mut Buffer, cx: &Context, item: &clean::Item, items: &[clean:\n fn stability_tags(item: &clean::Item) -> String {\n     let mut tags = String::new();\n \n-    fn tag_html(class: &str, contents: &str) -> String {\n-        format!(r#\"<span class=\"stab {}\">{}</span>\"#, class, contents)\n+    fn tag_html(class: &str, title: &str, contents: &str) -> String {\n+        format!(r#\"<span class=\"stab {}\" title=\"{}\">{}</span>\"#, class, Escape(title), contents)\n     }\n \n     // The trailing space after each tag is to space it properly against the rest of the docs.\n@@ -2140,7 +2140,7 @@ fn stability_tags(item: &clean::Item) -> String {\n         if !stability::deprecation_in_effect(depr.is_since_rustc_version, depr.since.as_deref()) {\n             message = \"Deprecation planned\";\n         }\n-        tags += &tag_html(\"deprecated\", message);\n+        tags += &tag_html(\"deprecated\", \"\", message);\n     }\n \n     // The \"rustc_private\" crates are permanently unstable so it makes no sense\n@@ -2151,11 +2151,11 @@ fn stability_tags(item: &clean::Item) -> String {\n         .map(|s| s.level == stability::Unstable && s.feature != \"rustc_private\")\n         == Some(true)\n     {\n-        tags += &tag_html(\"unstable\", \"Experimental\");\n+        tags += &tag_html(\"unstable\", \"\", \"Experimental\");\n     }\n \n     if let Some(ref cfg) = item.attrs.cfg {\n-        tags += &tag_html(\"portability\", &cfg.render_short_html());\n+        tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n     }\n \n     tags"}, {"sha": "47ba362c97789fe481b3d061442624a81cf49454", "filename": "src/test/rustdoc/duplicate-cfg.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8730c2beb742e406bcd8a1a846ad520322e1e132/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fduplicate-cfg.rs?ref=8730c2beb742e406bcd8a1a846ad520322e1e132", "patch": "@@ -3,38 +3,54 @@\n #![crate_name = \"foo\"]\n #![feature(doc_cfg)]\n \n+// @has 'foo/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+\n // @has 'foo/struct.Foo.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'sync'\n #[doc(cfg(feature = \"sync\"))]\n #[doc(cfg(feature = \"sync\"))]\n pub struct Foo;\n \n+// @has 'foo/bar/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` only'\n+\n // @has 'foo/bar/struct.Bar.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod bar {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Bar;\n }\n \n+// @has 'foo/baz/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate features `sync` and `send` only'\n+\n // @has 'foo/baz/struct.Baz.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n pub mod baz {\n     #[doc(cfg(feature = \"sync\"))]\n     pub struct Baz;\n }\n \n // @has 'foo/qux/struct.Qux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate features sync and send only.'\n #[doc(cfg(feature = \"sync\"))]\n pub mod qux {\n     #[doc(cfg(all(feature = \"sync\", feature = \"send\")))]\n     pub struct Qux;\n }\n \n+// @has 'foo/quux/index.html'\n+// @matches '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]' '^sync and send and foo and bar$'\n+// @has '-' '//*[@class=\"module-item\"]//*[@class=\"stab portability\"]/@title' 'This is supported on crate feature `sync` and crate feature `send` and `foo` and `bar` only'\n+\n // @has 'foo/quux/struct.Quux.html'\n-// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on feature=\"sync\" and feature=\"send\" and foo and bar only.'\n+// @has '-' '//*[@class=\"stab portability\"]' 'This is supported on crate feature sync and crate feature send and foo and bar only.'\n #[doc(cfg(all(feature = \"sync\", feature = \"send\", foo)))]\n pub mod quux {\n     #[doc(cfg(all(feature = \"send\", feature = \"sync\", bar)))]"}]}