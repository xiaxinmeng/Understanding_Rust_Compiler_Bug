{"sha": "7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNjAyNTEzYjFmN2I5MDlkNGIyMmQ1OTY4ZTllOTRiY2IyOGI3N2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-09T16:54:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-09T16:54:28Z"}, "message": "Rustup to rustc 1.32.0-nightly (653da4fd0 2018-11-08)", "tree": {"sha": "af47a211a550d7cdfc330970f9462cf4659a7b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af47a211a550d7cdfc330970f9462cf4659a7b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "html_url": "https://github.com/rust-lang/rust/commit/7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d0c1f4878fc6e4c6ddb71332ac0a0677eda686", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d0c1f4878fc6e4c6ddb71332ac0a0677eda686", "html_url": "https://github.com/rust-lang/rust/commit/85d0c1f4878fc6e4c6ddb71332ac0a0677eda686"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "0fc1b52b2f2d6aa296e02ae1027136d74788b420", "filename": "src/constant.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::interpret::{\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n-    EvalContext, Machine, MemPlace, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n+    EvalContext, MPlaceTy, Machine, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n };\n \n use cranelift_module::*;\n@@ -160,13 +160,12 @@ fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n     def_id: DefId,\n ) -> DataId {\n     let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n-    let is_mutable =\n-        if let crate::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n-            true\n-        } else {\n-            !tcx.type_of(def_id)\n-                .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n-        };\n+    let is_mutable = if let ::rustc::hir::Mutability::MutMutable = tcx.is_static(def_id).unwrap() {\n+        true\n+    } else {\n+        !tcx.type_of(def_id)\n+            .is_freeze(tcx, ParamEnv::reveal_all(), DUMMY_SP)\n+    };\n     module\n         .declare_data(&*symbol_name, Linkage::Export, is_mutable)\n         .unwrap()\n@@ -314,7 +313,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn find_foreign_static(\n-        _: crate::rustc::ty::query::TyCtxtAt<'a, 'tcx, 'tcx>,\n+        _: ::rustc::ty::query::TyCtxtAt<'a, 'tcx, 'tcx>,\n         _: DefId,\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation>> {\n         panic!();\n@@ -337,21 +336,17 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn tag_reference(\n         _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        _: MemPlace,\n-        _: Ty<'tcx>,\n-        _: Size,\n-        _: Option<crate::rustc::hir::Mutability>,\n-    ) -> EvalResult<'tcx, MemPlace> {\n+        _: MPlaceTy<'tcx>,\n+        _: Option<::rustc::hir::Mutability>,\n+    ) -> EvalResult<'tcx, Scalar> {\n         panic!()\n     }\n \n     fn tag_dereference(\n         _: &EvalContext<'a, 'mir, 'tcx, Self>,\n-        _: MemPlace,\n-        _: Ty<'tcx>,\n-        _: Size,\n-        _: Option<crate::rustc::hir::Mutability>,\n-    ) -> EvalResult<'tcx, MemPlace> {\n+        _: MPlaceTy<'tcx>,\n+        _: Option<::rustc::hir::Mutability>,\n+    ) -> EvalResult<'tcx, Scalar> {\n         panic!();\n     }\n "}, {"sha": "f7af549c8a49967203ea736ca8637de3afc1428c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "patch": "@@ -258,8 +258,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n \n         for &crate_type in sess.opts.crate_types.iter() {\n-            let output_name =\n-                out_filename(sess, crate_type, &outputs, &res.crate_name.as_str());\n+            let output_name = out_filename(sess, crate_type, &outputs, &res.crate_name.as_str());\n             match crate_type {\n                 CrateType::Rlib => link::link_rlib(sess, &res, output_name),\n                 CrateType::Executable => link::link_bin(sess, &res, output_name),"}, {"sha": "82afe6fd677f57fd4d9d6808c6de15f2929a37f1", "filename": "src/link.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d602513b1f7b909d4b22d5968e9e94bcb28b77d/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=7d602513b1f7b909d4b22d5968e9e94bcb28b77d", "patch": "@@ -3,11 +3,7 @@ use std::path::PathBuf;\n \n use rustc::session::Session;\n \n-pub(crate) fn link_rlib(\n-    sess: &Session,\n-    res: &crate::CodegenResult,\n-    output_name: PathBuf,\n-) {\n+pub(crate) fn link_rlib(sess: &Session, res: &crate::CodegenResult, output_name: PathBuf) {\n     let file = File::create(&output_name).unwrap();\n     let mut builder = ar::Builder::new(file);\n \n@@ -52,7 +48,6 @@ pub(crate) fn link_bin(sess: &Session, res: &crate::CodegenResult, output_name:\n     std::fs::write(output_name, obj).unwrap();\n }\n \n-\n /*\n res.artifact\n     .declare_with("}]}