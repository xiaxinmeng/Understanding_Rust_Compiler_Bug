{"sha": "33923f47e3f90442ae3c604d8ea80992b71611f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTIzZjQ3ZTNmOTA0NDJhZTNjNjA0ZDhlYTgwOTkyYjcxNjExZjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-13T17:46:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-20T00:35:31Z"}, "message": "librustc: Remove unique vector patterns from the language.\n\nPreparatory work for removing unique vectors from the language, which is\nitself preparatory work for dynamically sized types.", "tree": {"sha": "4130c674d6114c3b6a7399b599e98cf62fca3aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4130c674d6114c3b6a7399b599e98cf62fca3aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33923f47e3f90442ae3c604d8ea80992b71611f7", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33923f47e3f90442ae3c604d8ea80992b71611f7", "html_url": "https://github.com/rust-lang/rust/commit/33923f47e3f90442ae3c604d8ea80992b71611f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33923f47e3f90442ae3c604d8ea80992b71611f7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0058281cfea06a61e5eb23b31c15e9d1dcfda3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0058281cfea06a61e5eb23b31c15e9d1dcfda3", "html_url": "https://github.com/rust-lang/rust/commit/ea0058281cfea06a61e5eb23b31c15e9d1dcfda3"}], "stats": {"total": 427, "additions": 229, "deletions": 198}, "files": [{"sha": "4b883d1498683f36b1649bf0bd857acbc1de9317", "filename": "src/libextra/test.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -315,12 +315,15 @@ pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n     match maybestr {\n         None => None,\n         Some(s) => {\n-            match s.split('.').to_owned_vec() {\n-                [a, b] => match (from_str::<uint>(a), from_str::<uint>(b)) {\n-                    (Some(a), Some(b)) => Some((a,b)),\n+            let vector = s.split('.').to_owned_vec();\n+            if vector.len() == 2 {\n+                match (from_str::<uint>(vector[0]),\n+                       from_str::<uint>(vector[1])) {\n+                    (Some(a), Some(b)) => Some((a, b)),\n                     _ => None\n-                },\n-                _ => None\n+                }\n+            } else {\n+                None\n             }\n         }\n     }"}, {"sha": "e20c017c4b51ba1b8e867539e7d77603a220268c", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -130,27 +130,25 @@ fn helper(input: libc::c_int, messages: Port<Req>) {\n     }\n \n     'outer: loop {\n-        let timeout = match active {\n+        let timeout = if active.len() == 0 {\n             // Empty array? no timeout (wait forever for the next request)\n-            [] => ptr::null(),\n-\n-            [~Inner { target, .. }, ..] => {\n-                let now = now();\n-                // If this request has already expired, then signal it and go\n-                // through another iteration\n-                if target <= now {\n-                    signal(&mut active, &mut dead);\n-                    continue;\n-                }\n-\n-                // The actual timeout listed in the requests array is an\n-                // absolute date, so here we translate the absolute time to a\n-                // relative time.\n-                let tm = target - now;\n-                timeout.tv_sec = (tm / 1000) as libc::time_t;\n-                timeout.tv_usec = ((tm % 1000) * 1000) as libc::suseconds_t;\n-                &timeout as *libc::timeval\n+            ptr::null()\n+        } else {\n+            let now = now();\n+            // If this request has already expired, then signal it and go\n+            // through another iteration\n+            if active[0].target <= now {\n+                signal(&mut active, &mut dead);\n+                continue;\n             }\n+\n+            // The actual timeout listed in the requests array is an\n+            // absolute date, so here we translate the absolute time to a\n+            // relative time.\n+            let tm = active[0].target - now;\n+            timeout.tv_sec = (tm / 1000) as libc::time_t;\n+            timeout.tv_usec = ((tm % 1000) * 1000) as libc::suseconds_t;\n+            &timeout as *libc::timeval\n         };\n \n         imp::fd_set(&mut set, input);"}, {"sha": "7197b0dba1d0118445b6a35ade4c20533b2d1a86", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -495,24 +495,23 @@ impl ToPrimitive for BigUint {\n     #[cfg(target_word_size = \"32\")]\n     #[inline]\n     fn to_u64(&self) -> Option<u64> {\n-        match self.data {\n-            [] => {\n-                Some(0)\n+        match self.data.len() {\n+            0 => Some(0),\n+            1 => Some(self.data[0] as u64),\n+            2 => {\n+                Some(BigDigit::to_uint(self.data[1], self.data[0]) as u64)\n             }\n-            [n0] => {\n-                Some(n0 as u64)\n-            }\n-            [n0, n1] => {\n-                Some(BigDigit::to_uint(n1, n0) as u64)\n-            }\n-            [n0, n1, n2] => {\n-                let n_lo = BigDigit::to_uint(n1, n0) as u64;\n-                let n_hi = n2 as u64;\n+            3 => {\n+                let n_lo = BigDigit::to_uint(self.data[1], self.data[0]) as\n+                    u64;\n+                let n_hi = self.data[2] as u64;\n                 Some((n_hi << 32) + n_lo)\n             }\n-            [n0, n1, n2, n3] => {\n-                let n_lo = BigDigit::to_uint(n1, n0) as u64;\n-                let n_hi = BigDigit::to_uint(n3, n2) as u64;\n+            4 => {\n+                let n_lo = BigDigit::to_uint(self.data[1], self.data[0])\n+                    as u64;\n+                let n_hi = BigDigit::to_uint(self.data[3], self.data[2])\n+                    as u64;\n                 Some((n_hi << 32) + n_lo)\n             }\n             _ => None\n@@ -522,16 +521,10 @@ impl ToPrimitive for BigUint {\n     #[cfg(target_word_size = \"64\")]\n     #[inline]\n     fn to_u64(&self) -> Option<u64> {\n-        match self.data {\n-            [] => {\n-                Some(0)\n-            }\n-            [n0] => {\n-                Some(n0 as u64)\n-            }\n-            [n0, n1] => {\n-                Some(BigDigit::to_uint(n1, n0) as u64)\n-            }\n+        match self.data.len() {\n+            0 => Some(0),\n+            1 => Some(self.data[0] as u64),\n+            2 => Some(BigDigit::to_uint(self.data[1], self.data[0]) as u64),\n             _ => None\n         }\n     }"}, {"sha": "cadc49035567a5e23a43e86c7d45436f6447d0f7", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -1213,15 +1213,13 @@ fn check_unused_mut_pat(cx: &Context, p: &ast::Pat) {\n         ast::PatIdent(ast::BindByValue(ast::MutMutable),\n                       ref path, _) if pat_util::pat_is_binding(cx.tcx.def_map, p)=> {\n             // `let mut _a = 1;` doesn't need a warning.\n-            let initial_underscore = match path.segments {\n-                [ast::PathSegment { identifier: id, .. }] => {\n-                    token::get_ident(id).get().starts_with(\"_\")\n-                }\n-                _ => {\n-                    cx.tcx.sess.span_bug(p.span,\n-                                         \"mutable binding that doesn't \\\n-                                         consist of exactly one segment\");\n-                }\n+            let initial_underscore = if path.segments.len() == 1 {\n+                token::get_ident(path.segments[0].identifier).get()\n+                                                             .starts_with(\"_\")\n+            } else {\n+                cx.tcx.sess.span_bug(p.span,\n+                                     \"mutable binding that doesn't consist \\\n+                                      of exactly one segment\")\n             };\n \n             let used_mut_nodes = cx.tcx.used_mut_nodes.borrow();"}, {"sha": "4d783be689d628a87a7dfaf020e159514c106bcb", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -603,7 +603,17 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n           ty::ty_vec(mt, vstore) => {\n             let region_var = match vstore {\n                 ty::vstore_slice(r) => r,\n-                ty::vstore_uniq | ty::vstore_fixed(_) => {\n+                ty::vstore_uniq => {\n+                    fcx.type_error_message(pat.span,\n+                                           |_| {\n+                                            ~\"unique vector patterns are no \\\n+                                              longer supported\"\n+                                           },\n+                                           expected,\n+                                           None);\n+                    default_region_var\n+                }\n+                ty::vstore_fixed(_) => {\n                     default_region_var\n                 }\n             };"}, {"sha": "4ac8ff00f5e193a2792c28c90011a7f05606a1b3", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -3894,8 +3894,11 @@ pub fn ast_expr_vstore_to_vstore(fcx: @FnCtxt,\n         ast::ExprVstoreUniq => ty::vstore_uniq,\n         ast::ExprVstoreSlice | ast::ExprVstoreMutSlice => {\n             match e.node {\n-                ast::ExprLit(..) |\n-                ast::ExprVec([], _) => {\n+                ast::ExprLit(..) => {\n+                    // string literals and *empty slices* live in static memory\n+                    ty::vstore_slice(ty::ReStatic)\n+                }\n+                ast::ExprVec(ref elements, _) if elements.len() == 0 => {\n                     // string literals and *empty slices* live in static memory\n                     ty::vstore_slice(ty::ReStatic)\n                 }"}, {"sha": "4fc47d64e57e8f3a423bce23f25856585fac3781", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -311,20 +311,19 @@ pub fn unindent(s: &str) -> ~str {\n         }\n     });\n \n-    match lines {\n-        [head, .. tail] => {\n-            let mut unindented = ~[ head.trim() ];\n-            unindented.push_all(tail.map(|&line| {\n-                if line.is_whitespace() {\n-                    line\n-                } else {\n-                    assert!(line.len() >= min_indent);\n-                    line.slice_from(min_indent)\n-                }\n-            }));\n-            unindented.connect(\"\\n\")\n-        }\n-        [] => s.to_owned()\n+    if lines.len() >= 1 {\n+        let mut unindented = ~[ lines[0].trim() ];\n+        unindented.push_all(lines.tail().map(|&line| {\n+            if line.is_whitespace() {\n+                line\n+            } else {\n+                assert!(line.len() >= min_indent);\n+                line.slice_from(min_indent)\n+            }\n+        }));\n+        unindented.connect(\"\\n\")\n+    } else {\n+        s.to_owned()\n     }\n }\n "}, {"sha": "5595bdee68823b7a08840c2d7c40816a8aac5ea6", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -97,30 +97,27 @@ fn cs_clone(\n                                                                  name))\n     }\n \n-    match *all_fields {\n-        [FieldInfo { name: None, .. }, ..] => {\n-            // enum-like\n-            let subcalls = all_fields.map(subcall);\n-            cx.expr_call_ident(trait_span, ctor_ident, subcalls)\n-        },\n-        _ => {\n-            // struct-like\n-            let fields = all_fields.map(|field| {\n-                let ident = match field.name {\n-                    Some(i) => i,\n-                    None => cx.span_bug(trait_span,\n-                                        format!(\"unnamed field in normal struct in `deriving({})`\",\n-                                                name))\n-                };\n-                cx.field_imm(field.span, ident, subcall(field))\n-            });\n+    if all_fields.len() >= 1 && all_fields[0].name.is_none() {\n+        // enum-like\n+        let subcalls = all_fields.map(subcall);\n+        cx.expr_call_ident(trait_span, ctor_ident, subcalls)\n+    } else {\n+        // struct-like\n+        let fields = all_fields.map(|field| {\n+            let ident = match field.name {\n+                Some(i) => i,\n+                None => cx.span_bug(trait_span,\n+                                    format!(\"unnamed field in normal struct in `deriving({})`\",\n+                                            name))\n+            };\n+            cx.field_imm(field.span, ident, subcall(field))\n+        });\n \n-            if fields.is_empty() {\n-                // no fields, so construct like `None`\n-                cx.expr_ident(trait_span, ctor_ident)\n-            } else {\n-                cx.expr_struct_ident(trait_span, ctor_ident, fields)\n-            }\n+        if fields.is_empty() {\n+            // no fields, so construct like `None`\n+            cx.expr_ident(trait_span, ctor_ident)\n+        } else {\n+            cx.expr_struct_ident(trait_span, ctor_ident, fields)\n         }\n     }\n }"}, {"sha": "fb7f9b74364b6432f6b52a8cc12eaafc104f1fd9", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -663,25 +663,26 @@ impl<'a> MethodDef<'a> {\n         }\n \n         // transpose raw_fields\n-        let fields = match raw_fields {\n-            [ref self_arg, .. rest] => {\n-                self_arg.iter().enumerate().map(|(i, &(span, opt_id, field))| {\n-                    let other_fields = rest.map(|l| {\n-                        match &l[i] {\n-                            &(_, _, ex) => ex\n-                        }\n-                    });\n-                    FieldInfo {\n-                        span: span,\n-                        name: opt_id,\n-                        self_: field,\n-                        other: other_fields\n+        let fields = if raw_fields.len() > 0 {\n+            raw_fields[0].iter()\n+                         .enumerate()\n+                         .map(|(i, &(span, opt_id, field))| {\n+                let other_fields = raw_fields.tail().map(|l| {\n+                    match &l[i] {\n+                        &(_, _, ex) => ex\n                     }\n-                }).collect()\n-            }\n-            [] => { cx.span_bug(trait_.span,\n-                                \"no self arguments to non-static method \\\n-                                in generic `deriving`\") }\n+                });\n+                FieldInfo {\n+                    span: span,\n+                    name: opt_id,\n+                    self_: field,\n+                    other: other_fields\n+                }\n+            }).collect()\n+        } else {\n+            cx.span_bug(trait_.span,\n+                        \"no self arguments to non-static method in generic \\\n+                         `deriving`\")\n         };\n \n         // body of the inner most destructuring match"}, {"sha": "7c686e5cd6708548c586cf98f516f5571a38a7f7", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -54,7 +54,10 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n         MetaNameValue(_, ref l) => {\n             cx.span_err(l.span, \"unexpected value in `deriving`\");\n         }\n-        MetaWord(_) | MetaList(_, []) => {\n+        MetaWord(_) => {\n+            cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n+        }\n+        MetaList(_, ref titems) if titems.len() == 0 => {\n             cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n         }\n         MetaList(_, ref titems) => {"}, {"sha": "d5b08503fd03ef623e00331b569cabfaa2521929", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -74,7 +74,8 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n     // Getting harder... making the format string:\n     match *substr.fields {\n         // unit struct/nullary variant: no work necessary!\n-        Struct([]) | EnumMatching(_, _, []) => {}\n+        Struct(ref fields) if fields.len() == 0 => {}\n+        EnumMatching(_, _, ref fields) if fields.len() == 0 => {}\n \n         Struct(ref fields) | EnumMatching(_, _, ref fields) => {\n             if fields[0].name.is_none() {"}, {"sha": "aacb2a7408738fd3d7c0eb4261324cd52dbee5b1", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -40,7 +40,7 @@ pub fn expand_option_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n pub fn expand_env(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     -> base::MacResult {\n     let exprs = match get_exprs_from_tts(cx, sp, tts) {\n-        Some([]) => {\n+        Some(ref exprs) if exprs.len() == 0 => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");\n             return MacResult::dummy_expr(sp);\n         }"}, {"sha": "1e0bfb0d3e9f0bc216957aa1975c335867ea605c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -647,14 +647,10 @@ impl Visitor<()> for NewNameFinderContext {\n                     &ast::Path {\n                         global: false,\n                         span: _,\n-                        segments: [\n-                            ast::PathSegment {\n-                                identifier: id,\n-                                lifetimes: _,\n-                                types: _\n-                            }\n-                        ]\n-                    } => self.ident_accumulator.push(id),\n+                        segments: ref segments\n+                    } if segments.len() == 1 => {\n+                        self.ident_accumulator.push(segments[0].identifier)\n+                    }\n                     // I believe these must be enums...\n                     _ => ()\n                 }\n@@ -1187,7 +1183,12 @@ foo_module!()\n         let bindings = name_finder.ident_accumulator;\n \n         let cxbinds: ~[&ast::Ident] =\n-            bindings.iter().filter(|b| \"xx\" == token::get_ident(**b).get()).collect();\n+            bindings.iter().filter(|b| {\n+                let ident = token::get_ident(**b);\n+                let string = ident.get();\n+                \"xx\" == string\n+            }).collect();\n+        let cxbinds: &[&ast::Ident] = cxbinds;\n         let cxbind = match cxbinds {\n             [b] => b,\n             _ => fail!(\"expected just one binding for ext_cx\")"}, {"sha": "b4139714a2edf90c1b5a770ecaf25b04e182055b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -363,40 +363,48 @@ mod test {\n     // check the token-tree-ization of macros\n     #[test] fn string_to_tts_macro () {\n         let tts = string_to_tts(~\"macro_rules! zip (($a)=>($a))\");\n+        let tts: &[ast::TokenTree] = tts;\n         match tts {\n             [ast::TTTok(_,_),\n              ast::TTTok(_,token::NOT),\n              ast::TTTok(_,_),\n-             ast::TTDelim(delim_elts)] =>\n-                match *delim_elts {\n-                [ast::TTTok(_,token::LPAREN),\n-                 ast::TTDelim(first_set),\n-                 ast::TTTok(_,token::FAT_ARROW),\n-                 ast::TTDelim(second_set),\n-                 ast::TTTok(_,token::RPAREN)] =>\n-                    match *first_set {\n+             ast::TTDelim(delim_elts)] => {\n+                let delim_elts: &[ast::TokenTree] = *delim_elts;\n+                match delim_elts {\n                     [ast::TTTok(_,token::LPAREN),\n-                     ast::TTTok(_,token::DOLLAR),\n-                     ast::TTTok(_,_),\n-                     ast::TTTok(_,token::RPAREN)] =>\n-                        match *second_set {\n-                        [ast::TTTok(_,token::LPAREN),\n-                         ast::TTTok(_,token::DOLLAR),\n-                         ast::TTTok(_,_),\n-                         ast::TTTok(_,token::RPAREN)] =>\n-                            assert_eq!(\"correct\",\"correct\"),\n-                        _ => assert_eq!(\"wrong 4\",\"correct\")\n+                     ast::TTDelim(first_set),\n+                     ast::TTTok(_,token::FAT_ARROW),\n+                     ast::TTDelim(second_set),\n+                     ast::TTTok(_,token::RPAREN)] => {\n+                        let first_set: &[ast::TokenTree] = *first_set;\n+                        match first_set {\n+                            [ast::TTTok(_,token::LPAREN),\n+                             ast::TTTok(_,token::DOLLAR),\n+                             ast::TTTok(_,_),\n+                             ast::TTTok(_,token::RPAREN)] => {\n+                                let second_set: &[ast::TokenTree] =\n+                                    *second_set;\n+                                match second_set {\n+                                    [ast::TTTok(_,token::LPAREN),\n+                                     ast::TTTok(_,token::DOLLAR),\n+                                     ast::TTTok(_,_),\n+                                     ast::TTTok(_,token::RPAREN)] => {\n+                                        assert_eq!(\"correct\",\"correct\")\n+                                    }\n+                                    _ => assert_eq!(\"wrong 4\",\"correct\")\n+                                }\n+                            },\n+                            _ => {\n+                                error!(\"failing value 3: {:?}\",first_set);\n+                                assert_eq!(\"wrong 3\",\"correct\")\n+                            }\n+                        }\n                     },\n                     _ => {\n-                        error!(\"failing value 3: {:?}\",first_set);\n-                        assert_eq!(\"wrong 3\",\"correct\")\n+                        error!(\"failing value 2: {:?}\",delim_elts);\n+                        assert_eq!(\"wrong\",\"correct\");\n                     }\n-                },\n-                _ => {\n-                    error!(\"failing value 2: {:?}\",delim_elts);\n-                    assert_eq!(\"wrong\",\"correct\");\n                 }\n-\n             },\n             _ => {\n                 error!(\"failing value: {:?}\",tts);"}, {"sha": "d6cc35a6f9d3eef540ad7527013d3b7ed1344b1e", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -81,7 +81,13 @@ impl<T> SmallVector<T> {\n     pub fn expect_one(self, err: &'static str) -> T {\n         match self {\n             One(v) => v,\n-            Many([v]) => v,\n+            Many(v) => {\n+                if v.len() == 1 {\n+                    v.move_iter().next().unwrap()\n+                } else {\n+                    fail!(err)\n+                }\n+            }\n             _ => fail!(err)\n         }\n     }"}, {"sha": "9a99c66b9d6c3e6712429e9fb65c1911368cb899", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -21,6 +21,7 @@ pub fn main() {\n         Foo { string: ~\"bar\" },\n         Foo { string: ~\"baz\" }\n     ];\n+    let x: &[Foo] = x;\n     match x {\n         [_, ..tail] => {\n             match tail {"}, {"sha": "00252069f2dd8033b4184ca4e27673737c1fbec2", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -10,26 +10,29 @@\n \n fn a() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n+    let vec: &[int] = vec; //~ ERROR does not live long enough\n     let tail = match vec {\n-        [_, ..tail] => tail, //~ ERROR does not live long enough\n+        [_, ..tail] => tail,\n         _ => fail!(\"a\")\n     };\n     tail\n }\n \n fn b() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n+    let vec: &[int] = vec; //~ ERROR does not live long enough\n     let init = match vec {\n-        [..init, _] => init, //~ ERROR does not live long enough\n+        [..init, _] => init,\n         _ => fail!(\"b\")\n     };\n     init\n }\n \n fn c() -> &[int] {\n     let vec = ~[1, 2, 3, 4];\n+    let vec: &[int] = vec; //~ ERROR does not live long enough\n     let slice = match vec {\n-        [_, ..slice, _] => slice, //~ ERROR does not live long enough\n+        [_, ..slice, _] => slice,\n         _ => fail!(\"c\")\n     };\n     slice"}, {"sha": "d3f23a34978198e171a96f71b1f388b05a0ce807", "filename": "src/test/compile-fail/borrowck-vec-pattern-loan-from-mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-loan-from-mut.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -10,7 +10,8 @@\n \n fn a() {\n     let mut v = ~[1, 2, 3];\n-    match v {\n+    let vb: &mut [int] = v;\n+    match vb {\n         [_a, ..tail] => {\n             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n         }"}, {"sha": "b85c2a82aeaff7daf306b2ca91830c97485c83c6", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n fn a() {\n-    let mut vec = ~[~1, ~2, ~3];\n+    let mut vec = [~1, ~2, ~3];\n     match vec {\n-        [~ref _a] => {\n+        [~ref _a, _, _] => {\n             vec[0] = ~4; //~ ERROR cannot assign\n         }\n-        _ => fail!(\"foo\")\n     }\n }\n \n fn b() {\n     let mut vec = ~[~1, ~2, ~3];\n+    let vec: &mut [~int] = vec;\n     match vec {\n         [.._b] => {\n             vec[0] = ~4; //~ ERROR cannot assign\n@@ -29,6 +29,7 @@ fn b() {\n \n fn c() {\n     let mut vec = ~[~1, ~2, ~3];\n+    let vec: &mut [~int] = vec;\n     match vec {\n         [_a, .._b] => {\n             //~^ ERROR cannot move out\n@@ -41,27 +42,31 @@ fn c() {\n         }\n         _ => {}\n     }\n-    let a = vec[0]; //~ ERROR use of partially moved value: `vec`\n+    let a = vec[0]; //~ ERROR cannot move out\n }\n \n fn d() {\n     let mut vec = ~[~1, ~2, ~3];\n+    let vec: &mut [~int] = vec;\n     match vec {\n         [.._a, _b] => {\n             //~^ ERROR cannot move out\n         }\n         _ => {}\n     }\n-    let a = vec[0]; //~ ERROR use of partially moved value: `vec`\n+    let a = vec[0]; //~ ERROR cannot move out\n }\n \n fn e() {\n     let mut vec = ~[~1, ~2, ~3];\n+    let vec: &mut [~int] = vec;\n     match vec {\n-        [_a, _b, _c] => {}\n+        [_a, _b, _c] => {}  //~ ERROR cannot move out\n+        //~^ ERROR cannot move out\n+        //~^^ ERROR cannot move out\n         _ => {}\n     }\n-    let a = vec[0]; //~ ERROR use of partially moved value: `vec`\n+    let a = vec[0]; //~ ERROR cannot move out\n }\n \n fn main() {}"}, {"sha": "ea972e8238aac9ae1d75d0bacae08ce5fad28674", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -10,8 +10,9 @@\n \n fn a() -> &int {\n     let vec = ~[1, 2, 3, 4];\n+    let vec: &[int] = vec; //~ ERROR `vec[..]` does not live long enough\n     let tail = match vec {\n-        [_a, ..tail] => &tail[0], //~ ERROR `vec[..]` does not live long enough\n+        [_a, ..tail] => &tail[0],\n         _ => fail!(\"foo\")\n     };\n     tail"}, {"sha": "e2a052bd2638e8959dd02a9b8df07290dcca03f3", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -10,19 +10,24 @@\n \n fn main() {\n     let x: ~[(int, int)] = ~[];\n+    let x: &[(int, int)] = x;\n     match x {\n         [a, (2, 3), _] => (),\n         [(1, 2), (2, 3), b] => (), //~ ERROR unreachable pattern\n         _ => ()\n     }\n \n-    match ~[~\"foo\", ~\"bar\", ~\"baz\"] {\n+    let x: ~[~str] = ~[~\"foo\", ~\"bar\", ~\"baz\"];\n+    let x: &[~str] = x;\n+    match x {\n         [a, _, _, ..] => { println!(\"{}\", a); }\n         [~\"foo\", ~\"bar\", ~\"baz\", ~\"foo\", ~\"bar\"] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }\n \n-    match ~['a', 'b', 'c'] {\n+    let x: ~[char] = ~['a', 'b', 'c'];\n+    let x: &[char] = x;\n+    match x {\n         ['a', 'b', 'c', .._tail] => {}\n         ['a', 'b', 'c'] => {} //~ ERROR unreachable pattern\n         _ => {}"}, {"sha": "0d65bc90eb54681e25693fec33243c23778dda39", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -35,23 +35,31 @@ fn main() {\n       (_, a) => {}\n       (b, b) => {}\n     }\n-    match ~[Some(42), None, Some(21)] {\n+    let vec = ~[Some(42), None, Some(21)];\n+    let vec: &[Option<int>] = vec;\n+    match vec {\n         //~^ ERROR non-exhaustive patterns: vectors of length 0 not covered\n         [Some(..), None, ..tail] => {}\n         [Some(..), Some(..), ..tail] => {}\n         [None] => {}\n     }\n-    match ~[1] {\n+    let vec = ~[1];\n+    let vec: &[int] = vec;\n+    match vec {\n         [_, ..tail] => (),\n         [] => ()\n     }\n-    match ~[0.5] { //~ ERROR non-exhaustive patterns: vectors of length 4 not covered\n+    let vec = ~[0.5];\n+    let vec: &[f32] = vec;\n+    match vec { //~ ERROR non-exhaustive patterns: vectors of length 4 not covered\n         [0.1, 0.2, 0.3] => (),\n         [0.1, 0.2] => (),\n         [0.1] => (),\n         [] => ()\n     }\n-    match ~[Some(42), None, Some(21)] {\n+    let vec = ~[Some(42), None, Some(21)];\n+    let vec: &[Option<int>] = vec;\n+    match vec {\n         [Some(..), None, ..tail] => {}\n         [Some(..), Some(..), ..tail] => {}\n         [None, None, ..tail] => {}"}, {"sha": "a2fc2c021bf0308152f3295e2dd83886a4b9b4d4", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -9,24 +9,22 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = ~[1, 2, 3];\n+    let x = [1, 2, 3];\n     match x {\n-        [2, ..] => fail!(),\n-        [1, ..tail] => {\n-            assert_eq!(tail, [2, 3]);\n+        [2, _, _] => fail!(),\n+        [1, a, b] => {\n+            assert_eq!([a, b], [2, 3]);\n         }\n-        [_] => fail!(),\n-        [] => fail!()\n+        [_, _, _] => fail!(),\n     }\n \n-    let y = (~[(1, true), (2, false)], 0.5);\n+    let y = ([(1, true), (2, false)], 0.5);\n     match y {\n-        ([_, _, _], 0.5) => fail!(),\n-        ([(1, a), (b, false), ..tail], _) => {\n+        ([(1, a), (b, false)], _) => {\n             assert_eq!(a, true);\n             assert_eq!(b, 2);\n-            assert!(tail.is_empty());\n         }\n-        ([.._tail], _) => fail!()\n+        ([_, _], 0.5) => fail!(),\n+        ([_, _], _) => fail!(),\n     }\n }"}, {"sha": "175f774bdfde01720577c9a17c2881ffe56a04ff", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -9,52 +9,43 @@\n // except according to those terms.\n \n fn a() {\n-    let x = ~[1];\n+    let x = [1];\n     match x {\n-        [_, _, _, _, _, ..] => fail!(),\n-        [.., _, _, _, _] => fail!(),\n-        [_, .., _, _] => fail!(),\n-        [_, _] => fail!(),\n         [a] => {\n             assert_eq!(a, 1);\n         }\n-        [] => fail!()\n     }\n }\n \n fn b() {\n-    let x = ~[1, 2, 3];\n+    let x = [1, 2, 3];\n     match x {\n         [a, b, ..c] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             assert_eq!(c, &[3]);\n         }\n-        _ => fail!()\n     }\n     match x {\n         [..a, b, c] => {\n             assert_eq!(a, &[1]);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n     }\n     match x {\n         [a, ..b, c] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, &[2]);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n     }\n     match x {\n         [a, b, c] => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n             assert_eq!(c, 3);\n         }\n-        _ => fail!()\n     }\n }\n "}, {"sha": "658d4e084266865fe4e5eda18efeaa4b9df36b21", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33923f47e3f90442ae3c604d8ea80992b71611f7/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=33923f47e3f90442ae3c604d8ea80992b71611f7", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n }\n \n pub fn main() {\n-    let x = ~[\n+    let x = [\n         Foo { string: ~\"foo\" },\n         Foo { string: ~\"bar\" },\n         Foo { string: ~\"baz\" }\n@@ -39,8 +39,5 @@ pub fn main() {\n                 }\n             }\n         }\n-        _ => {\n-            unreachable!();\n-        }\n     }\n }"}]}