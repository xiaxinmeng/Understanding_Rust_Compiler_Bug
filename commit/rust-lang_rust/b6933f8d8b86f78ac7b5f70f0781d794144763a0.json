{"sha": "b6933f8d8b86f78ac7b5f70f0781d794144763a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OTMzZjhkOGI4NmY3OGFjN2I1ZjcwZjA3ODFkNzk0MTQ0NzYzYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T23:16:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T23:16:39Z"}, "message": "auto merge of #11032 : cmr/rust/rustdoc_test, r=alexcrichton\n\nThis is just a smoke test which verifies that the expected files are\ngenerated.", "tree": {"sha": "0b728b4841aefa0191dfabb7e69e2e94649d8f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b728b4841aefa0191dfabb7e69e2e94649d8f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6933f8d8b86f78ac7b5f70f0781d794144763a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6933f8d8b86f78ac7b5f70f0781d794144763a0", "html_url": "https://github.com/rust-lang/rust/commit/b6933f8d8b86f78ac7b5f70f0781d794144763a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6933f8d8b86f78ac7b5f70f0781d794144763a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87b9d37f7a72e8632af676c2bb579f8967d9cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87b9d37f7a72e8632af676c2bb579f8967d9cd8", "html_url": "https://github.com/rust-lang/rust/commit/c87b9d37f7a72e8632af676c2bb579f8967d9cd8"}, {"sha": "21bec4f11bd66f9ff7e74eb878efe3d487057329", "url": "https://api.github.com/repos/rust-lang/rust/commits/21bec4f11bd66f9ff7e74eb878efe3d487057329", "html_url": "https://github.com/rust-lang/rust/commit/21bec4f11bd66f9ff7e74eb878efe3d487057329"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "b026055ab25b45eebb59b48df3403096de16bf6f", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -920,14 +920,15 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),rmake): \\\n \n $(3)/test/run-make/%-$(1)-T-$(2)-H-$(3).ok: \\\n \t\t$(S)src/test/run-make/%/Makefile \\\n-\t\t$$(HSREQ$(1)_H_$(3))\n+\t\t$$(CSREQ$(1)_T_$(2)_H_$(3))\n \t@rm -rf $(3)/test/run-make/$$*\n \t@mkdir -p $(3)/test/run-make/$$*\n \t@echo maketest: $$*\n \t$$(Q)$$(CFG_PYTHON) $(S)src/etc/maketest.py $$(dir $$<) \\\n \t    $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n \t    $(3)/test/run-make/$$* \\\n-\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\"\n+\t    \"$$(CC_$(3)) $$(CFG_GCCISH_CFLAGS_$(3))\" \\\n+\t    $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n \t@touch $$@\n \n endef"}, {"sha": "00d80e1bf4d1d7f0180de54d9d25164fba1d00e1", "filename": "src/etc/maketest.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Fetc%2Fmaketest.py", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Fetc%2Fmaketest.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmaketest.py?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -7,6 +7,7 @@\n os.putenv('RUSTC', os.path.abspath(sys.argv[2]))\n os.putenv('TMPDIR', os.path.abspath(sys.argv[3]))\n os.putenv('CC', sys.argv[4])\n+os.putenv('RUSTDOC', os.path.abspath(sys.argv[5]))\n \n proc = subprocess.Popen(['make', '-C', sys.argv[1]],\n                         stdout = subprocess.PIPE,"}, {"sha": "c84caf8acdd3a861bd02602ad2605c1350e32ad1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -678,15 +678,21 @@ impl Context {\n         // using a rwarc makes this parallelizable in the future\n         local_data::set(cache_key, Arc::new(cache));\n \n-        self.item(item);\n+        let mut work = ~[(self, item)];\n+        while work.len() > 0 {\n+            let (mut cx, item) = work.pop();\n+            cx.item(item, |cx, item| {\n+                work.push((cx.clone(), item));\n+            })\n+        }\n     }\n \n     /// Non-parellelized version of rendering an item. This will take the input\n     /// item, render its contents, and then invoke the specified closure with\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item(&mut self, item: clean::Item) {\n+    fn item(&mut self, item: clean::Item, f: |&mut Context, clean::Item|) {\n         fn render(w: io::File, cx: &mut Context, it: &clean::Item,\n                   pushname: bool) {\n             info!(\"Rendering an item to {}\", w.path().display());\n@@ -733,7 +739,7 @@ impl Context {\n                     };\n                     this.sidebar = build_sidebar(&m);\n                     for item in m.items.move_iter() {\n-                        this.item(item);\n+                        f(this,item);\n                     }\n                 })\n             }"}, {"sha": "0de678e72488b85e29ad2752f2fedc098ea9550c", "filename": "src/test/run-make/rustdoc-smoke/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2FMakefile?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+all:\n+\t$(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\tcp verify.sh $(TMPDIR)\n+\t$(call RUN,verify.sh) $(TMPDIR)"}, {"sha": "7a86bf4d1e86f479db62dc83b5acc2916724b06c", "filename": "src/test/run-make/rustdoc-smoke/foo.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Ffoo.rs?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -0,0 +1,15 @@\n+#[pkgid = \"foo#0.1\"];\n+\n+//! Very docs\n+\n+pub mod bar {\n+\n+    /// So correct\n+    pub mod baz {\n+        /// Much detail\n+        pub fn baz() { }\n+    }\n+\n+    /// *wow*\n+    pub trait Doge { }\n+}"}, {"sha": "18f3939794e47d5ed1b2a6f00d5248510e4fb71e", "filename": "src/test/run-make/rustdoc-smoke/verify.sh", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Fverify.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b6933f8d8b86f78ac7b5f70f0781d794144763a0/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Fverify.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-smoke%2Fverify.sh?ref=b6933f8d8b86f78ac7b5f70f0781d794144763a0", "patch": "@@ -0,0 +1,17 @@\n+#!/bin/sh\n+\n+# $1 is the TMPDIR\n+\n+dirs=\"doc doc/foo doc/foo/bar doc/foo/bar/baz doc/src doc/src/foo\"\n+\n+for dir in $dirs; do if [ ! -d $1/$dir ]; then\n+\techo \"$1/$dir is not a directory!\"\n+\texit 1\n+fi done\n+\n+files=\"doc/foo/index.html doc/foo/bar/index.html doc/foo/bar/baz/fn.baz.html doc/foo/bar/trait.Doge.html doc/src/foo/foo.rs.html\"\n+\n+for file in $files; do if [ ! -f $1/$file ]; then\n+\techo \"$1/$file is not a file!\"\n+\texit 1\n+fi done"}]}