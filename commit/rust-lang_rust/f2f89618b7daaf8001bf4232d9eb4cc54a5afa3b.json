{"sha": "f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "node_id": "C_kwDOAAsO6NoAKGYyZjg5NjE4YjdkYWFmODAwMWJmNDIzMmQ5ZWI0Y2M1NGE1YWZhM2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-16T12:25:23Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-16T18:28:32Z"}, "message": "minor: Simplify", "tree": {"sha": "3ee04bb2ac366e3b17ad7aa6b7906e3f65b0611b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ee04bb2ac366e3b17ad7aa6b7906e3f65b0611b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "html_url": "https://github.com/rust-lang/rust/commit/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73668334f05c3446b04116ccc3156240d2d8ab19", "url": "https://api.github.com/repos/rust-lang/rust/commits/73668334f05c3446b04116ccc3156240d2d8ab19", "html_url": "https://github.com/rust-lang/rust/commit/73668334f05c3446b04116ccc3156240d2d8ab19"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "d59c26438b46653041adda39bc92a0e39d15b71e", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "patch": "@@ -3035,6 +3035,18 @@ impl HasCrate for Function {\n     }\n }\n \n+impl HasCrate for Const {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n+impl HasCrate for TypeAlias {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Type {\n     fn krate(&self, _db: &dyn HirDatabase) -> Crate {\n         self.krate.into()"}, {"sha": "3b88085d2decfc23872a173f06a0384c6e0bcaf2", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "patch": "@@ -86,6 +86,10 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: &hir::ScopeDef,\n     ) {\n+        if ctx.is_scope_def_hidden(resolution) {\n+            cov_mark::hit!(qualified_path_doc_hidden);\n+            return;\n+        }\n         self.add_opt(render_resolution(RenderContext::new(ctx), local_name, resolution));\n     }\n \n@@ -108,6 +112,9 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.is_visible(&func) {\n+            return;\n+        }\n         self.add_opt(render_fn(RenderContext::new(ctx), None, local_name, func));\n     }\n \n@@ -118,14 +125,23 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n+        if !ctx.is_visible(&func) {\n+            return;\n+        }\n         self.add_opt(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n     }\n \n-    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        self.add_opt(render_const(RenderContext::new(ctx), constant));\n+    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, konst: hir::Const) {\n+        if !ctx.is_visible(&konst) {\n+            return;\n+        }\n+        self.add_opt(render_const(RenderContext::new(ctx), konst));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n+        if !ctx.is_visible(&type_alias) {\n+            return;\n+        }\n         self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n     }\n \n@@ -164,6 +180,9 @@ impl Completions {\n         field: hir::Field,\n         ty: &hir::Type,\n     ) {\n+        if !ctx.is_visible(&field) {\n+            return;\n+        }\n         let item = render_field(RenderContext::new(ctx), receiver, field, ty);\n         self.add(item);\n     }"}, {"sha": "e01e9c9fa7e6c1c47e6eb27d4a36669f94da6b86", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "patch": "@@ -63,9 +63,6 @@ fn complete_fields(\n ) {\n     for receiver in receiver.autoderef(ctx.db) {\n         for (field, ty) in receiver.fields(ctx.db) {\n-            if !ctx.is_visible(&field) {\n-                continue;\n-            }\n             f(Either::Left(field), ty);\n         }\n         for (i, ty) in receiver.tuple_fields(ctx.db).into_iter().enumerate() {\n@@ -84,10 +81,7 @@ fn complete_methods(\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope.traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.self_param(ctx.db).is_some()\n-                && ctx.is_visible(&func)\n-                && seen_methods.insert(func.name(ctx.db))\n-            {\n+            if func.self_param(ctx.db).is_some() && seen_methods.insert(func.name(ctx.db)) {\n                 f(func);\n             }\n             None::<()>"}, {"sha": "b5bf6b551462b3fa246f6d5234bc4441c6c0d318", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=f2f89618b7daaf8001bf4232d9eb4cc54a5afa3b", "patch": "@@ -102,11 +102,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                 }\n \n-                if ctx.is_scope_def_hidden(&def) {\n-                    cov_mark::hit!(qualified_path_doc_hidden);\n-                    continue;\n-                }\n-\n                 let add_resolution = match def {\n                     // Don't suggest attribute macros and derives.\n                     hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n@@ -167,18 +162,12 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             if let Some(krate) = krate {\n                 let traits_in_scope = ctx.scope.traits_in_scope();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n                     add_assoc_item(acc, ctx, item);\n                     None::<()>\n                 });\n \n                 // Iterate assoc types separately\n                 ty.iterate_assoc_items(ctx.db, krate, |item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n                     if let hir::AssocItem::TypeAlias(ty) = item {\n                         acc.add_type_alias(ctx, ty)\n                     }\n@@ -189,9 +178,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         hir::PathResolution::Def(hir::ModuleDef::Trait(t)) => {\n             // Handles `Trait::assoc` as well as `<Ty as Trait>::assoc`.\n             for item in t.items(ctx.db) {\n-                if !ctx.is_visible(&item) {\n-                    continue;\n-                }\n                 add_assoc_item(acc, ctx, item);\n             }\n         }\n@@ -210,10 +196,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 let traits_in_scope = ctx.scope.traits_in_scope();\n                 let mut seen = FxHashSet::default();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n-                    if !ctx.is_visible(&item) {\n-                        return None;\n-                    }\n-\n                     // We might iterate candidates of a trait multiple times here, so deduplicate\n                     // them.\n                     if seen.insert(item) {"}]}