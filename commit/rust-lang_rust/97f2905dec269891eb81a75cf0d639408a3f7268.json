{"sha": "97f2905dec269891eb81a75cf0d639408a3f7268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZjI5MDVkZWMyNjk4OTFlYjgxYTc1Y2YwZDYzOTQwOGEzZjcyNjg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T11:51:20Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T11:51:20Z"}, "message": "Use expect_test to make format_str_parser test more data-driven", "tree": {"sha": "4902d4e9735bea5dba8fc3c222ab240d33e6db0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4902d4e9735bea5dba8fc3c222ab240d33e6db0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f2905dec269891eb81a75cf0d639408a3f7268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f2905dec269891eb81a75cf0d639408a3f7268", "html_url": "https://github.com/rust-lang/rust/commit/97f2905dec269891eb81a75cf0d639408a3f7268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f2905dec269891eb81a75cf0d639408a3f7268/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d0546ac7789ce94d15d305b07269d8b5e10038", "url": "https://api.github.com/repos/rust-lang/rust/commits/76d0546ac7789ce94d15d305b07269d8b5e10038", "html_url": "https://github.com/rust-lang/rust/commit/76d0546ac7789ce94d15d305b07269d8b5e10038"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "0287fc803013297d01fbe2e7c7c001986ca3f30b", "filename": "crates/ide/src/completion/complete_postfix/format_like.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/97f2905dec269891eb81a75cf0d639408a3f7268/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f2905dec269891eb81a75cf0d639408a3f7268/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs?ref=97f2905dec269891eb81a75cf0d639408a3f7268", "patch": "@@ -204,54 +204,54 @@ impl FormatStrParser {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use expect_test::{expect, Expect};\n+\n+    fn check(input: &str, expect: &Expect) {\n+        let mut parser = FormatStrParser::new((*input).to_owned());\n+        let outcome_repr = if parser.parse().is_ok() {\n+            // Parsing should be OK, expected repr is \"string; expr_1, expr_2\".\n+            if parser.extracted_expressions.is_empty() {\n+                parser.output\n+            } else {\n+                format!(\"{}; {}\", parser.output, parser.extracted_expressions.join(\", \"))\n+            }\n+        } else {\n+            // Parsing should fail, expected repr is \"-\".\n+            \"-\".to_owned()\n+        };\n+\n+        expect.assert_eq(&outcome_repr);\n+    }\n \n     #[test]\n     fn format_str_parser() {\n         let test_vector = &[\n-            (\"no expressions\", Some((\"no expressions\", vec![]))),\n-            (\"{expr} is {2 + 2}\", Some((\"{} is {}\", vec![\"expr\", \"2 + 2\"]))),\n-            (\"{expr:?}\", Some((\"{:?}\", vec![\"expr\"]))),\n-            (\"{malformed\", None),\n-            (\"malformed}\", None),\n-            (\"{{correct\", Some((\"{{correct\", vec![]))),\n-            (\"correct}}\", Some((\"correct}}\", vec![]))),\n-            (\"{correct}}}\", Some((\"{}}}\", vec![\"correct\"]))),\n-            (\"{correct}}}}}\", Some((\"{}}}}}\", vec![\"correct\"]))),\n-            (\"{incorrect}}\", None),\n-            (\"placeholders {} {}\", Some((\"placeholders {} {}\", vec![\"$1\", \"$2\"]))),\n-            (\"mixed {} {2 + 2} {}\", Some((\"mixed {} {} {}\", vec![\"$1\", \"2 + 2\", \"$2\"]))),\n+            (\"no expressions\", expect![[\"no expressions\"]]),\n+            (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n+            (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n+            (\"{malformed\", expect![[\"-\"]]),\n+            (\"malformed}\", expect![[\"-\"]]),\n+            (\"{{correct\", expect![[\"{{correct\"]]),\n+            (\"correct}}\", expect![[\"correct}}\"]]),\n+            (\"{correct}}}\", expect![[\"{}}}; correct\"]]),\n+            (\"{correct}}}}}\", expect![[\"{}}}}}; correct\"]]),\n+            (\"{incorrect}}\", expect![[\"-\"]]),\n+            (\"placeholders {} {}\", expect![[\"placeholders {} {}; $1, $2\"]]),\n+            (\"mixed {} {2 + 2} {}\", expect![[\"mixed {} {} {}; $1, 2 + 2, $2\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }}\",\n-                Some((\"{}\", vec![\"SomeStruct { val_a: 0, val_b: 1 }\"])),\n+                expect![[\"{}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n             ),\n-            (\"{expr:?} is {2.32f64:.5}\", Some((\"{:?} is {:.5}\", vec![\"expr\", \"2.32f64\"]))),\n+            (\"{expr:?} is {2.32f64:.5}\", expect![[\"{:?} is {:.5}; expr, 2.32f64\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }:?}\",\n-                Some((\"{:?}\", vec![\"SomeStruct { val_a: 0, val_b: 1 }\"])),\n+                expect![[\"{:?}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n             ),\n-            (\"{     2 + 2        }\", Some((\"{}\", vec![\"2 + 2\"]))),\n+            (\"{     2 + 2        }\", expect![[\"{}; 2 + 2\"]]),\n         ];\n \n         for (input, output) in test_vector {\n-            let mut parser = FormatStrParser::new((*input).to_owned());\n-            let outcome = parser.parse();\n-\n-            if let Some((result_str, result_args)) = output {\n-                assert!(\n-                    outcome.is_ok(),\n-                    \"Outcome is error for input: {}, but the expected outcome is {:?}\",\n-                    input,\n-                    output\n-                );\n-                assert_eq!(parser.output, *result_str);\n-                assert_eq!(&parser.extracted_expressions, result_args);\n-            } else {\n-                assert!(\n-                    outcome.is_err(),\n-                    \"Outcome is OK for input: {}, but the expected outcome is error\",\n-                    input\n-                );\n-            }\n+            check(input, output)\n         }\n     }\n "}]}