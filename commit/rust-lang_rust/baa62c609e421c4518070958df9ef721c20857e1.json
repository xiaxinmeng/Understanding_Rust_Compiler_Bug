{"sha": "baa62c609e421c4518070958df9ef721c20857e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYTYyYzYwOWU0MjFjNDUxODA3MDk1OGRmOWVmNzIxYzIwODU3ZTE=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-01-10T13:25:07Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-01-10T20:04:16Z"}, "message": "recognize strings inside comments in order to avoid indenting them\n\nClose #3270", "tree": {"sha": "de1d023ad3c9264dbac2ddd09346026f6f15de34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de1d023ad3c9264dbac2ddd09346026f6f15de34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa62c609e421c4518070958df9ef721c20857e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlw3pUAACgkQbVYg2Qgh\nATP/1gf/Qs1qg95ykBvu29CLwU+uU/s7B8g0BBBUqqhE7jUJC9eUK5tKT5r6Z6/3\nfOrhZO+SQ3P1D2WGRe4ZFdTk5LUK16az9ucsiEI6rioU296DN3qcaj7TiyMc4/vQ\nhTp2hGT0fhAUgo7i+cRSVC4WZ7ArqV48s/Ajw6FMBiU/4/pX6+Mn0pp8glp6HlLO\n+4WYoeyKoXAY5KWeYd3iZY8y1jjzwN2dL8F/u3uhTzh98DA48M+DW59kZz0r9zG9\nI9llitKrGK4hAgdd29acKLTEcOm2Ooq4O0fMob6hNCDa9FPePoIqfM5Mw/6L1V4w\nkYlecJyAyVNgJOGeXsmxsafiQg10cw==\n=K4rp\n-----END PGP SIGNATURE-----", "payload": "tree de1d023ad3c9264dbac2ddd09346026f6f15de34\nparent 2c204c11d160cb2bee0802e4e9235fca0ffae421\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1547126707 +0100\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1547150656 +0100\n\nrecognize strings inside comments in order to avoid indenting them\n\nClose #3270\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa62c609e421c4518070958df9ef721c20857e1", "html_url": "https://github.com/rust-lang/rust/commit/baa62c609e421c4518070958df9ef721c20857e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa62c609e421c4518070958df9ef721c20857e1/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c204c11d160cb2bee0802e4e9235fca0ffae421", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c204c11d160cb2bee0802e4e9235fca0ffae421", "html_url": "https://github.com/rust-lang/rust/commit/2c204c11d160cb2bee0802e4e9235fca0ffae421"}], "stats": {"total": 152, "additions": 114, "deletions": 38}, "files": [{"sha": "ef63bf464bc716a15c50079ab731c3f261d8160a", "filename": "src/comment.rs", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -1029,21 +1029,28 @@ impl RichChar for (usize, char) {\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum CharClassesStatus {\n     Normal,\n+    /// Character is within a string\n     LitString,\n     LitStringEscape,\n+    /// Character is within a raw string\n     LitRawString(u32),\n     RawStringPrefix(u32),\n     RawStringSuffix(u32),\n     LitChar,\n     LitCharEscape,\n-    // The u32 is the nesting deepness of the comment\n+    /// Character inside a block comment, with the integer indicating the nesting deepness of the\n+    /// comment\n     BlockComment(u32),\n-    // Status when the '/' has been consumed, but not yet the '*', deepness is\n-    // the new deepness (after the comment opening).\n+    /// Character inside a block-commented string, with the integer indicating the nesting deepness\n+    /// of the comment\n+    StringInBlockComment(u32),\n+    /// Status when the '/' has been consumed, but not yet the '*', deepness is\n+    /// the new deepness (after the comment opening).\n     BlockCommentOpening(u32),\n-    // Status when the '*' has been consumed, but not yet the '/', deepness is\n-    // the new deepness (after the comment closing).\n+    /// Status when the '*' has been consumed, but not yet the '/', deepness is\n+    /// the new deepness (after the comment closing).\n     BlockCommentClosing(u32),\n+    /// Character is within a line comment\n     LineComment,\n }\n \n@@ -1067,6 +1074,12 @@ pub enum FullCodeCharKind {\n     InComment,\n     /// Last character of a comment, '\\n' for a line comment, '/' for a block comment.\n     EndComment,\n+    /// Start of a mutlitine string inside a comment\n+    StartStringCommented,\n+    /// End of a mutlitine string inside a comment\n+    EndStringCommented,\n+    /// Inside a commented string\n+    InStringCommented,\n     /// Start of a mutlitine string\n     StartString,\n     /// End of a mutlitine string\n@@ -1080,7 +1093,21 @@ impl FullCodeCharKind {\n         match self {\n             FullCodeCharKind::StartComment\n             | FullCodeCharKind::InComment\n-            | FullCodeCharKind::EndComment => true,\n+            | FullCodeCharKind::EndComment\n+            | FullCodeCharKind::StartStringCommented\n+            | FullCodeCharKind::InStringCommented\n+            | FullCodeCharKind::EndStringCommented => true,\n+            _ => false,\n+        }\n+    }\n+\n+    /// Returns true if the character is inside a comment\n+    pub fn inside_comment(self) -> bool {\n+        match self {\n+            FullCodeCharKind::InComment\n+            | FullCodeCharKind::StartStringCommented\n+            | FullCodeCharKind::InStringCommented\n+            | FullCodeCharKind::EndStringCommented => true,\n             _ => false,\n         }\n     }\n@@ -1089,6 +1116,12 @@ impl FullCodeCharKind {\n         self == FullCodeCharKind::InString || self == FullCodeCharKind::StartString\n     }\n \n+    /// Returns true if the character is within a commented string\n+    pub fn is_commented_string(self) -> bool {\n+        self == FullCodeCharKind::InStringCommented\n+            || self == FullCodeCharKind::StartStringCommented\n+    }\n+\n     fn to_codecharkind(self) -> CodeCharKind {\n         if self.is_comment() {\n             CodeCharKind::Comment\n@@ -1232,18 +1265,27 @@ where\n                 },\n                 _ => CharClassesStatus::Normal,\n             },\n+            CharClassesStatus::StringInBlockComment(deepness) => {\n+                char_kind = FullCodeCharKind::InStringCommented;\n+                if chr == '\"' {\n+                    CharClassesStatus::BlockComment(deepness)\n+                } else {\n+                    CharClassesStatus::StringInBlockComment(deepness)\n+                }\n+            }\n             CharClassesStatus::BlockComment(deepness) => {\n                 assert_ne!(deepness, 0);\n-                self.status = match self.base.peek() {\n+                char_kind = FullCodeCharKind::InComment;\n+                match self.base.peek() {\n                     Some(next) if next.get_char() == '/' && chr == '*' => {\n                         CharClassesStatus::BlockCommentClosing(deepness - 1)\n                     }\n                     Some(next) if next.get_char() == '*' && chr == '/' => {\n                         CharClassesStatus::BlockCommentOpening(deepness + 1)\n                     }\n-                    _ => CharClassesStatus::BlockComment(deepness),\n-                };\n-                return Some((FullCodeCharKind::InComment, item));\n+                    _ if chr == '\"' => CharClassesStatus::StringInBlockComment(deepness),\n+                    _ => self.status,\n+                }\n             }\n             CharClassesStatus::BlockCommentOpening(deepness) => {\n                 assert_eq!(chr, '*');\n@@ -1299,26 +1341,33 @@ impl<'a> Iterator for LineClasses<'a> {\n \n         let mut line = String::new();\n \n-        let start_class = match self.base.peek() {\n+        let start_kind = match self.base.peek() {\n             Some((kind, _)) => *kind,\n             None => unreachable!(),\n         };\n \n         while let Some((kind, c)) = self.base.next() {\n+            // needed to set the kind of the ending character on the last line\n+            self.kind = kind;\n             if c == '\\n' {\n-                self.kind = match (start_class, kind) {\n+                self.kind = match (start_kind, kind) {\n                     (FullCodeCharKind::Normal, FullCodeCharKind::InString) => {\n                         FullCodeCharKind::StartString\n                     }\n                     (FullCodeCharKind::InString, FullCodeCharKind::Normal) => {\n                         FullCodeCharKind::EndString\n                     }\n+                    (FullCodeCharKind::InComment, FullCodeCharKind::InStringCommented) => {\n+                        FullCodeCharKind::StartStringCommented\n+                    }\n+                    (FullCodeCharKind::InStringCommented, FullCodeCharKind::InComment) => {\n+                        FullCodeCharKind::EndStringCommented\n+                    }\n                     _ => kind,\n                 };\n                 break;\n-            } else {\n-                line.push(c);\n             }\n+            line.push(c);\n         }\n \n         // Workaround for CRLF newline.\n@@ -1364,7 +1413,12 @@ impl<'a> Iterator for UngroupedCommentCodeSlices<'a> {\n             }\n             FullCodeCharKind::StartComment => {\n                 // Consume the whole comment\n-                while let Some((FullCodeCharKind::InComment, (_, _))) = self.iter.next() {}\n+                loop {\n+                    match self.iter.next() {\n+                        Some((kind, ..)) if kind.inside_comment() => continue,\n+                        _ => break,\n+                    }\n+                }\n             }\n             _ => panic!(),\n         }"}, {"sha": "dd480f9788fbaf65314040e1ad5520142928c125", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -527,19 +527,24 @@ pub fn trim_left_preserve_layout(orig: &str, indent: Indent, config: &Config) ->\n                 Some(get_prefix_space_width(config, &line))\n             };\n \n-            let line = if veto_trim || (kind.is_string() && !line.ends_with('\\\\')) {\n-                veto_trim = kind.is_string() && !line.ends_with('\\\\');\n+            let new_veto_trim_value =\n+                (kind.is_string() || kind.is_commented_string()) && !line.ends_with('\\\\');\n+            let line = if veto_trim || new_veto_trim_value {\n+                veto_trim = new_veto_trim_value;\n                 trimmed = false;\n                 line\n             } else {\n                 line.trim().to_owned()\n             };\n             trimmed_lines.push((trimmed, line, prefix_space_width));\n \n-            // When computing the minimum, do not consider lines within a string.\n-            // The reason is there is a veto against trimming and indenting such lines\n+            // Because there is a veto against trimming and indenting lines within a string,\n+            // such lines should not be taken into account when computing the minimum.\n             match kind {\n-                FullCodeCharKind::InString | FullCodeCharKind::EndString => None,\n+                FullCodeCharKind::InString\n+                | FullCodeCharKind::EndString\n+                | FullCodeCharKind::InStringCommented\n+                | FullCodeCharKind::EndStringCommented => None,\n                 _ => prefix_space_width,\n             }\n         })"}, {"sha": "a43b83223e23547ffc0b329a50e11bed04e18d4d", "filename": "tests/source/issue-3132.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c204c11d160cb2bee0802e4e9235fca0ffae421/tests%2Fsource%2Fissue-3132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c204c11d160cb2bee0802e4e9235fca0ffae421/tests%2Fsource%2Fissue-3132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3132.rs?ref=2c204c11d160cb2bee0802e4e9235fca0ffae421", "patch": "@@ -1,13 +0,0 @@\n-fn test() {\n-    /*\n-    a\n-\t*/\n-    let x = 42;\n-    /*\n-    aaa\n-    \"line 1\n-  line 2\n-        line 3\"\n-    */\n-    let x = 42;\n-}"}, {"sha": "9b1a66a63b7c4a3cca01e6774a73f3871b4960a7", "filename": "tests/source/issue-3270.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/tests%2Fsource%2Fissue-3270.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/tests%2Fsource%2Fissue-3270.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3270.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -0,0 +1,10 @@\n+pub fn main() {\n+ /*   let s = String::from(\n+        \"\n+hello\n+world\n+\",\n+    ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}, {"sha": "c3d24fc10f6c4fc732d9252752780ae3d128b6ab", "filename": "tests/target/issue-3132.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3132.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -4,10 +4,10 @@ fn test() {\n     */\n     let x = 42;\n     /*\n-      aaa\n-      \"line 1\n-    line 2\n-          line 3\"\n-      */\n+    aaa\n+    \"line 1\n+  line 2\n+        line 3\"\n+    */\n     let x = 42;\n }"}, {"sha": "e27f71aa32f569deee657ca374d64b98c5f65383", "filename": "tests/target/issue-3270-wrap.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3270-wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3270-wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3270-wrap.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -0,0 +1,10 @@\n+// rustfmt-wrap_comments: true\n+\n+fn func() {\n+    let x = 42;\n+    /*\n+    let something = \"one line line  line  line  line  line  line  line  line  line  line  line\n+  two lines\n+         three lines\";\n+     */\n+}"}, {"sha": "4f624f1193b4fbd3a58700ef5ef352527c9ec49a", "filename": "tests/target/issue-3270.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3270.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa62c609e421c4518070958df9ef721c20857e1/tests%2Ftarget%2Fissue-3270.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3270.rs?ref=baa62c609e421c4518070958df9ef721c20857e1", "patch": "@@ -0,0 +1,10 @@\n+pub fn main() {\n+    /*   let s = String::from(\n+        \"\n+hello\n+world\n+\",\n+    ); */\n+\n+    assert_eq!(s, \"\\nhello\\nworld\\n\");\n+}"}]}