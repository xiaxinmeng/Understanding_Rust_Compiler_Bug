{"sha": "604b936ca0a8967292489e9cb6bcb3822818b7fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNGI5MzZjYTBhODk2NzI5MjQ4OWU5Y2I2YmNiMzgyMjgxOGI3ZmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-23T09:24:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T09:24:15Z"}, "message": "Merge #4092\n\n4092: feat: run ignored tests r=matklad a=hdevalke\n\nI started making some exercices on https://exercism.io/ and a lot of test have the `#[ignore]` attribute.\r\nThe `Run Test|Debug` code lens show up, but running the test results in:\r\n\r\n```\r\nrunning 1 test\r\ntest test_one_piece ... ignored\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 0 measured; 5 filtered out\r\n```\r\n\r\nThis pull request adds the `--ignored` flag if needed.\n\nCo-authored-by: Hannes De Valkeneer <hannes@de-valkeneer.be>", "tree": {"sha": "946d4b645d6fa921e28f92f60423384d8b64478b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/946d4b645d6fa921e28f92f60423384d8b64478b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604b936ca0a8967292489e9cb6bcb3822818b7fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoV6/CRBK7hj4Ov3rIwAAdHIIABuRhVfjEoB6R2Q38Ra00PG9\nureQeqq/yDOIa7yMik66h2n9CLlJLBBQ7O/HB5aYLsMVDGjMSQw/kBN1YESeIi4P\nprqCimymwafg1Moow9lvTXvTxuo+uiHMZ5NQe++Wu4TjZgp/3JEIk/bhNBzt1dB8\nnMkSHuna0bnm47Q4VWO7aP4QrP4tlyyjRPq+TgwmDjhHpLMYlINkyv3MSLD1k6Bh\nETdV0i8zsUUnGS7wBA1vnKDcSr6ZchRQJyhpPW86GSpBrIrRSdo2DmQAZDC+Tcd3\nYgrosvqqC5OVZEbeVQ392g/5sMsXU5RxUR7vOO7d767uloZ1kDYPAAjJKWP64gk=\n=wkp4\n-----END PGP SIGNATURE-----\n", "payload": "tree 946d4b645d6fa921e28f92f60423384d8b64478b\nparent 1101e74b100619802b9538be1e9fea958add1d61\nparent 380a2870c73be5c03512b5711988d760cd21cca6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587633855 +0000\ncommitter GitHub <noreply@github.com> 1587633855 +0000\n\nMerge #4092\n\n4092: feat: run ignored tests r=matklad a=hdevalke\n\nI started making some exercices on https://exercism.io/ and a lot of test have the `#[ignore]` attribute.\r\nThe `Run Test|Debug` code lens show up, but running the test results in:\r\n\r\n```\r\nrunning 1 test\r\ntest test_one_piece ... ignored\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 0 measured; 5 filtered out\r\n```\r\n\r\nThis pull request adds the `--ignored` flag if needed.\n\nCo-authored-by: Hannes De Valkeneer <hannes@de-valkeneer.be>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604b936ca0a8967292489e9cb6bcb3822818b7fc", "html_url": "https://github.com/rust-lang/rust/commit/604b936ca0a8967292489e9cb6bcb3822818b7fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604b936ca0a8967292489e9cb6bcb3822818b7fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1101e74b100619802b9538be1e9fea958add1d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1101e74b100619802b9538be1e9fea958add1d61", "html_url": "https://github.com/rust-lang/rust/commit/1101e74b100619802b9538be1e9fea958add1d61"}, {"sha": "380a2870c73be5c03512b5711988d760cd21cca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/380a2870c73be5c03512b5711988d760cd21cca6", "html_url": "https://github.com/rust-lang/rust/commit/380a2870c73be5c03512b5711988d760cd21cca6"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "05a66e03ce74a76296636b8ab2f523d35ff2d3c3", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=604b936ca0a8967292489e9cb6bcb3822818b7fc", "patch": "@@ -34,7 +34,7 @@ impl Display for TestId {\n \n #[derive(Debug)]\n pub enum RunnableKind {\n-    Test { test_id: TestId },\n+    Test { test_id: TestId, attr: TestAttr },\n     TestMod { path: String },\n     Bench { test_id: TestId },\n     Bin,\n@@ -77,7 +77,8 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n         };\n \n         if has_test_related_attribute(&fn_def) {\n-            RunnableKind::Test { test_id }\n+            let attr = TestAttr::from_fn(&fn_def);\n+            RunnableKind::Test { test_id, attr }\n         } else if fn_def.has_atom_attr(\"bench\") {\n             RunnableKind::Bench { test_id }\n         } else {\n@@ -87,6 +88,21 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n     Some(Runnable { range: fn_def.syntax().text_range(), kind })\n }\n \n+#[derive(Debug)]\n+pub struct TestAttr {\n+    pub ignore: bool,\n+}\n+\n+impl TestAttr {\n+    fn from_fn(fn_def: &ast::FnDef) -> TestAttr {\n+        let ignore = fn_def\n+            .attrs()\n+            .filter_map(|attr| attr.simple_name())\n+            .any(|attribute_text| attribute_text == \"ignore\");\n+        TestAttr { ignore }\n+    }\n+}\n+\n /// This is a method with a heuristics to support test methods annotated with custom test annotations, such as\n /// `#[test_case(...)]`, `#[tokio::test]` and similar.\n /// Also a regular `#[test]` annotation is supported.\n@@ -157,6 +173,9 @@ mod tests {\n                     test_id: Path(\n                         \"test_foo\",\n                     ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n                 },\n             },\n             Runnable {\n@@ -165,6 +184,9 @@ mod tests {\n                     test_id: Path(\n                         \"test_foo\",\n                     ),\n+                    attr: TestAttr {\n+                        ignore: true,\n+                    },\n                 },\n             },\n         ]\n@@ -200,6 +222,9 @@ mod tests {\n                     test_id: Path(\n                         \"test_mod::test_foo1\",\n                     ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n                 },\n             },\n         ]\n@@ -237,6 +262,9 @@ mod tests {\n                     test_id: Path(\n                         \"foo::test_mod::test_foo1\",\n                     ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n                 },\n             },\n         ]\n@@ -276,6 +304,9 @@ mod tests {\n                     test_id: Path(\n                         \"foo::bar::test_mod::test_foo1\",\n                     ),\n+                    attr: TestAttr {\n+                        ignore: false,\n+                    },\n                 },\n             },\n         ]"}, {"sha": "c2ece49f428b48d28145d42711dd9a9a1cf33f56", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=604b936ca0a8967292489e9cb6bcb3822818b7fc", "patch": "@@ -23,7 +23,7 @@ impl CargoTargetSpec {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n         match kind {\n-            RunnableKind::Test { test_id } => {\n+            RunnableKind::Test { test_id, attr } => {\n                 args.push(\"test\".to_string());\n                 if let Some(spec) = spec {\n                     spec.push_to(&mut args);\n@@ -33,6 +33,9 @@ impl CargoTargetSpec {\n                     extra_args.push(\"--exact\".to_string());\n                 }\n                 extra_args.push(\"--nocapture\".to_string());\n+                if attr.ignore {\n+                    extra_args.push(\"--ignored\".to_string())\n+                }\n             }\n             RunnableKind::TestMod { path } => {\n                 args.push(\"test\".to_string());"}, {"sha": "41d9fe344d4d97f0ad155968ff2f0d30e909e0e9", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604b936ca0a8967292489e9cb6bcb3822818b7fc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=604b936ca0a8967292489e9cb6bcb3822818b7fc", "patch": "@@ -968,7 +968,7 @@ fn to_lsp_runnable(\n     let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n-        RunnableKind::Test { test_id } => format!(\"test {}\", test_id),\n+        RunnableKind::Test { test_id, .. } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n         RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n         RunnableKind::Bin => \"run binary\".to_string(),"}]}