{"sha": "c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YjhlYjFmZGE5MDk5ODgzMmJhMWNkZjk2YTM0ZGM2NzZmNzEyNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-01T19:52:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-01T19:52:08Z"}, "message": "Auto merge of #32544 - alexcrichton:rustbuild-dist-libtest, r=brson\n\nrustbuild: Fix dist for non-host targets\n\nThe `rust-std` package that we produce is expected to have not only the standard\nlibrary but also libtest for compiling unit tests. Unfortunately this does not\ncurrently happen due to the way rustbuild is structured.\n\nThere are currently two main stages of compilation in rustbuild, one for the\nstandard library and one for the compiler. This is primarily done to allow us to\nfill in the sysroot right after the standard library has finished compiling to\ncontinue compiling the rest of the crates. Consequently the entire compiler does\nnot have to explicitly depend on the standard library, and this also should\nallow us to pull in crates.io dependencies into the build in the future because\nthey'll just naturally build against the std we just produced.\n\nThese phases, however, do not represent a cross-compiled build. Target-only\nbuilds also require libtest, and libtest is currently part of the\nall-encompassing \"compiler build\". There's unfortunately no way to learn about\njust libtest and its dependencies (in a great and robust fashion) so to ensure\nthat we can copy the right artifacts over this commit introduces a new build\nstep, libtest.\n\nThe new libtest build step has documentation, dist, and link steps as std/rustc\nalready do. The compiler now depends on libtest instead of libstd, and all\ncompiler crates can now assume that test and its dependencies are implicitly\npart of the sysroot (hence explicit dependencies being removed). This makes the\nbuild a tad less parallel as in theory many rustc crates can be compiled in\nparallel with libtest, but this likely isn't where we really need parallelism\neither (all the time is still spent in the compiler).\n\nAll in all this allows the `dist-std` step to depend on both libstd and libtest,\nso `rust-std` packages produced by rustbuild should start having both the\nstandard library and libtest.\n\nCloses #32523", "tree": {"sha": "63fa235b5061bcdcf4fae0d9177b97bddd43dd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fa235b5061bcdcf4fae0d9177b97bddd43dd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "html_url": "https://github.com/rust-lang/rust/commit/c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d31707cc849bd385ae8677823d1f2bcc8aba41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d31707cc849bd385ae8677823d1f2bcc8aba41", "html_url": "https://github.com/rust-lang/rust/commit/b0d31707cc849bd385ae8677823d1f2bcc8aba41"}, {"sha": "3d6340ffe2a57614f88ea04c85dfc60707c95135", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6340ffe2a57614f88ea04c85dfc60707c95135", "html_url": "https://github.com/rust-lang/rust/commit/3d6340ffe2a57614f88ea04c85dfc60707c95135"}], "stats": {"total": 211, "additions": 169, "deletions": 42}, "files": [{"sha": "dee586c76993668e09797cb0a90fc79f1dcfe066", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -123,6 +123,38 @@ fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n     }\n }\n \n+/// Build libtest.\n+///\n+/// This will build libtest and supporting libraries for a particular stage of\n+/// the build using the `compiler` targeting the `target` architecture. The\n+/// artifacts created will also be linked into the sysroot directory.\n+pub fn test<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n+    println!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n+             compiler.host, target);\n+    let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n+    build.clear_if_dirty(&out_dir, &libstd_shim(build, compiler, target));\n+    let mut cargo = build.cargo(compiler, Mode::Libtest, target, \"build\");\n+    cargo.arg(\"--manifest-path\")\n+         .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n+    build.run(&mut cargo);\n+    test_link(build, target, compiler, compiler.host);\n+}\n+\n+/// Link all libtest rlibs/dylibs into the sysroot location.\n+///\n+/// Links those artifacts generated in the given `stage` for `target` produced\n+/// by `compiler` into `host`'s sysroot.\n+pub fn test_link(build: &Build,\n+                 target: &str,\n+                 compiler: &Compiler,\n+                 host: &str) {\n+    let target_compiler = Compiler::new(compiler.stage, host);\n+    let libdir = build.sysroot_libdir(&target_compiler, target);\n+    let out_dir = build.cargo_out(compiler, Mode::Libtest, target);\n+    add_to_sysroot(&out_dir, &libdir);\n+}\n+\n+\n /// Build the compiler.\n ///\n /// This will build the compiler for a particular stage of the build using\n@@ -133,7 +165,7 @@ pub fn rustc<'a>(build: &'a Build, target: &str, compiler: &Compiler<'a>) {\n              compiler.stage, compiler.host, target);\n \n     let out_dir = build.cargo_out(compiler, Mode::Librustc, target);\n-    build.clear_if_dirty(&out_dir, &libstd_shim(build, compiler, target));\n+    build.clear_if_dirty(&out_dir, &libtest_shim(build, compiler, target));\n \n     let mut cargo = build.cargo(compiler, Mode::Librustc, target, \"build\");\n     cargo.arg(\"--features\").arg(build.rustc_features())\n@@ -202,6 +234,12 @@ fn libstd_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n     build.cargo_out(compiler, Mode::Libstd, target).join(\"libstd_shim.rlib\")\n }\n \n+/// Cargo's output path for libtest in a given stage, compiled by a particular\n+/// compiler for the specified target.\n+fn libtest_shim(build: &Build, compiler: &Compiler, target: &str) -> PathBuf {\n+    build.cargo_out(compiler, Mode::Libtest, target).join(\"libtest_shim.rlib\")\n+}\n+\n fn compiler_file(compiler: &Path, file: &str) -> String {\n     output(Command::new(compiler)\n                    .arg(format!(\"-print-file-name={}\", file))).trim().to_string()"}, {"sha": "50c0c56807bc205361a5f3724179b341e4ae998d", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -122,6 +122,22 @@ pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n     cp_r(&out_dir, out)\n }\n \n+pub fn test(build: &Build, stage: u32, host: &str, out: &Path) {\n+    println!(\"Documenting stage{} test ({})\", stage, host);\n+    let compiler = Compiler::new(stage, host);\n+    let out_dir = build.stage_out(&compiler, Mode::Libtest)\n+                       .join(host).join(\"doc\");\n+    let rustdoc = build.rustdoc(&compiler);\n+\n+    build.clear_if_dirty(&out_dir, &rustdoc);\n+\n+    let mut cargo = build.cargo(&compiler, Mode::Libtest, host, \"doc\");\n+    cargo.arg(\"--manifest-path\")\n+         .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n+    build.run(&mut cargo);\n+    cp_r(&out_dir, out)\n+}\n+\n pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n     println!(\"Documenting stage{} compiler ({})\", stage, host);\n     let compiler = Compiler::new(stage, host);"}, {"sha": "bd217940bfbb2151608e22f2dd3cbc1a684f9b86", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -88,6 +88,7 @@ pub struct Build {\n \n pub enum Mode {\n     Libstd,\n+    Libtest,\n     Librustc,\n     Tool,\n }\n@@ -141,9 +142,13 @@ impl Build {\n             return clean::clean(self);\n         }\n \n+        self.verbose(\"finding compilers\");\n         cc::find(self);\n+        self.verbose(\"running sanity check\");\n         sanity::check(self);\n+        self.verbose(\"collecting channel variables\");\n         channel::collect(self);\n+        self.verbose(\"updating submodules\");\n         self.update_submodules();\n \n         for target in step::all(self) {\n@@ -158,12 +163,18 @@ impl Build {\n                 Libstd { compiler } => {\n                     compile::std(self, target.target, &compiler);\n                 }\n+                Libtest { compiler } => {\n+                    compile::test(self, target.target, &compiler);\n+                }\n                 Librustc { compiler } => {\n                     compile::rustc(self, target.target, &compiler);\n                 }\n                 LibstdLink { compiler, host } => {\n                     compile::std_link(self, target.target, &compiler, host);\n                 }\n+                LibtestLink { compiler, host } => {\n+                    compile::test_link(self, target.target, &compiler, host);\n+                }\n                 LibrustcLink { compiler, host } => {\n                     compile::rustc_link(self, target.target, &compiler, host);\n                 }\n@@ -203,6 +214,9 @@ impl Build {\n                 DocStd { stage } => {\n                     doc::std(self, stage, target.target, &doc_out);\n                 }\n+                DocTest { stage } => {\n+                    doc::test(self, stage, target.target, &doc_out);\n+                }\n                 DocRustc { stage } => {\n                     doc::rustc(self, stage, target.target, &doc_out);\n                 }\n@@ -360,6 +374,7 @@ impl Build {\n         let host = compiler.host;\n         let paths = vec![\n             self.cargo_out(compiler, Mode::Libstd, host).join(\"deps\"),\n+            self.cargo_out(compiler, Mode::Libtest, host).join(\"deps\"),\n             self.cargo_out(compiler, Mode::Librustc, host).join(\"deps\"),\n         ];\n         add_lib_path(paths, &mut cmd);\n@@ -414,7 +429,8 @@ impl Build {\n     fn stage_out(&self, compiler: &Compiler, mode: Mode) -> PathBuf {\n         let suffix = match mode {\n             Mode::Libstd => \"-std\",\n-            _ => \"-rustc\",\n+            Mode::Libtest => \"-test\",\n+            Mode::Tool | Mode::Librustc => \"-rustc\",\n         };\n         self.out.join(compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "4e3aacd3720ff7d3c607784e91dba324665068e7", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -25,19 +25,22 @@ macro_rules! targets {\n             // compiler executable itself, not any of the support libraries\n             (rustc, Rustc { stage: u32 }),\n \n-            // Steps for the two main cargo builds, one for the standard library\n-            // and one for the compiler itself. These are parameterized over the\n-            // stage output they're going to be placed in along with the\n-            // compiler which is producing the copy of libstd or librustc\n+            // Steps for the two main cargo builds. These are parameterized over\n+            // the compiler which is producing the artifact.\n             (libstd, Libstd { compiler: Compiler<'a> }),\n+            (libtest, Libtest { compiler: Compiler<'a> }),\n             (librustc, Librustc { compiler: Compiler<'a> }),\n \n-            // Links the standard library/librustc produced by the compiler\n-            // provided into the host's directory also provided.\n+            // Links the target produced by the compiler provided into the\n+            // host's directory also provided.\n             (libstd_link, LibstdLink {\n                 compiler: Compiler<'a>,\n                 host: &'a str\n             }),\n+            (libtest_link, LibtestLink {\n+                compiler: Compiler<'a>,\n+                host: &'a str\n+            }),\n             (librustc_link, LibrustcLink {\n                 compiler: Compiler<'a>,\n                 host: &'a str\n@@ -67,6 +70,7 @@ macro_rules! targets {\n             (doc_style, DocStyle { stage: u32 }),\n             (doc_standalone, DocStandalone { stage: u32 }),\n             (doc_std, DocStd { stage: u32 }),\n+            (doc_test, DocTest { stage: u32 }),\n             (doc_rustc, DocRustc { stage: u32 }),\n             (doc_error_index, DocErrorIndex { stage: u32 }),\n \n@@ -162,10 +166,10 @@ fn top_level(build: &Build) -> Vec<Step> {\n \n                 if host.target == build.config.build {\n                     targets.push(host.target(target)\n-                                     .libstd(host.compiler(stage)));\n+                                     .libtest(host.compiler(stage)));\n                 } else {\n                     targets.push(host.target(target)\n-                                     .libstd_link(t.compiler(stage), host.target));\n+                                     .libtest_link(t.compiler(stage), host.target));\n                 }\n             }\n         }\n@@ -246,15 +250,21 @@ impl<'a> Step<'a> {\n                 vec![self.librustc(compiler)]\n             }\n             Source::Librustc { compiler } => {\n-                vec![self.libstd(compiler), self.llvm(())]\n+                vec![self.libtest(compiler), self.llvm(())]\n+            }\n+            Source::Libtest { compiler } => {\n+                vec![self.libstd(compiler)]\n             }\n             Source::Libstd { compiler } => {\n                 vec![self.compiler_rt(()),\n                      self.rustc(compiler.stage).target(compiler.host)]\n             }\n             Source::LibrustcLink { compiler, host } => {\n                 vec![self.librustc(compiler),\n-                     self.libstd_link(compiler, host)]\n+                     self.libtest_link(compiler, host)]\n+            }\n+            Source::LibtestLink { compiler, host } => {\n+                vec![self.libtest(compiler), self.libstd_link(compiler, host)]\n             }\n             Source::LibstdLink { compiler, host } => {\n                 vec![self.libstd(compiler),\n@@ -267,6 +277,9 @@ impl<'a> Step<'a> {\n             Source::DocStd { stage } => {\n                 vec![self.libstd(self.compiler(stage))]\n             }\n+            Source::DocTest { stage } => {\n+                vec![self.libtest(self.compiler(stage))]\n+            }\n             Source::DocBook { stage } |\n             Source::DocNomicon { stage } |\n             Source::DocStyle { stage } => {\n@@ -279,7 +292,7 @@ impl<'a> Step<'a> {\n                 vec![self.rustc(stage)]\n             }\n             Source::DocRustc { stage } => {\n-                vec![self.doc_std(stage)]\n+                vec![self.doc_test(stage)]\n             }\n             Source::Doc { stage } => {\n                 vec![self.doc_book(stage), self.doc_nomicon(stage),\n@@ -315,7 +328,7 @@ impl<'a> Step<'a> {\n                 vec![self.rustc(stage)]\n             }\n             Source::DistStd { compiler } => {\n-                vec![self.libstd(compiler)]\n+                vec![self.libtest(compiler)]\n             }\n \n             Source::Dist { stage } => {"}, {"sha": "9264646673b5b4b4bc74b7c7a4abaa7e24349477", "filename": "src/etc/tidy.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -31,6 +31,7 @@\n     'src/libcore',\n     'src/libstd',\n     'src/rustc/std_shim',\n+    'src/rustc/test_shim',\n     'src/test'\n }\n "}, {"sha": "e7aaaef45a1c0a7e13a3894cebc472c333e8df2f", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n flate = { path = \"../libflate\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n-getopts = { path = \"../libgetopts\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n rbml = { path = \"../librbml\" }"}, {"sha": "0d2ae14d7d174125839487d5825e9181418edc19", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n flate = { path = \"../libflate\" }\n-getopts = { path = \"../libgetopts\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "fb5a8e4a90eb553873f14aff0cf6f999dd96d5db", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n arena = { path = \"../libarena\" }\n flate = { path = \"../libflate\" }\n-getopts = { path = \"../libgetopts\" }\n graphviz = { path = \"../libgraphviz\" }\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "228eb099a047cd6da0a44a312062fb7da07a61b4", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -11,7 +11,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-getopts = { path = \"../libgetopts\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n@@ -23,7 +22,6 @@ rustc_resolve = { path = \"../librustc_resolve\" }\n rustc_trans = { path = \"../librustc_trans\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n-test = { path = \"../libtest\" }\n log = { path = \"../liblog\" }\n \n [build-dependencies]"}, {"sha": "964f2dcb6b6b79119615c42b14b42e9c2e16603e", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -10,6 +10,5 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n serialize = { path = \"../libserialize\" }\n-term = { path = \"../libterm\" }\n log = { path = \"../liblog\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }"}, {"sha": "3548e0c8f497e913f8447a4570a8654a60d0db3f", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -45,10 +45,6 @@ dependencies = [\n  \"winapi 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"getopts\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"graphviz\"\n version = \"0.0.0\"\n@@ -72,7 +68,6 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"flate 0.0.0\",\n  \"fmt_macros 0.0.0\",\n- \"getopts 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rbml 0.0.0\",\n@@ -136,7 +131,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"flate 0.0.0\",\n- \"getopts 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n@@ -151,6 +145,7 @@ dependencies = [\n  \"rustc_plugin 0.0.0\",\n  \"rustc_privacy 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n+ \"rustc_save_analysis 0.0.0\",\n  \"rustc_trans 0.0.0\",\n  \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -273,13 +268,22 @@ dependencies = [\n  \"syntax 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_save_analysis\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log 0.0.0\",\n+ \"rustc 0.0.0\",\n+ \"rustc_front 0.0.0\",\n+ \"syntax 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_trans\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"flate 0.0.0\",\n- \"getopts 0.0.0\",\n  \"graphviz 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n@@ -316,7 +320,6 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"gcc 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -328,7 +331,6 @@ dependencies = [\n  \"rustc_trans 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n- \"test 0.0.0\",\n ]\n \n [[package]]\n@@ -345,29 +347,17 @@ dependencies = [\n  \"log 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"serialize 0.0.0\",\n- \"term 0.0.0\",\n ]\n \n [[package]]\n name = \"syntax_ext\"\n version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n+ \"log 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n \n-[[package]]\n-name = \"term\"\n-version = \"0.0.0\"\n-\n-[[package]]\n-name = \"test\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"getopts 0.0.0\",\n- \"term 0.0.0\",\n-]\n-\n [[package]]\n name = \"winapi\"\n version = \"0.2.2\""}, {"sha": "73df56d3594f1a7d1cf39aa5c8b2c01e7bc00b32", "filename": "src/rustc/test_shim/Cargo.lock", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.lock?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -0,0 +1,23 @@\n+[root]\n+name = \"test_shim\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"test 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"getopts\"\n+version = \"0.0.0\"\n+\n+[[package]]\n+name = \"term\"\n+version = \"0.0.0\"\n+\n+[[package]]\n+name = \"test\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"getopts 0.0.0\",\n+ \"term 0.0.0\",\n+]\n+"}, {"sha": "bf5766504867cf19f7d18d213aacd90519ac080b", "filename": "src/rustc/test_shim/Cargo.toml", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.toml?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -0,0 +1,25 @@\n+# This is a shim Cargo.toml which serves as a proxy for building libtest.\n+#\n+# The reason this shim exists is basically the same reason that `std_shim`\n+# exists, and more documentation can be found in that `Cargo.toml` as to why.\n+\n+[package]\n+name = \"test_shim\"\n+version = \"0.1.0\"\n+authors = [\"The Rust Project Developers\"]\n+\n+[lib]\n+name = \"test_shim\"\n+path = \"lib.rs\"\n+\n+[profile.release]\n+opt-level = 2\n+\n+# These options are controlled from our rustc wrapper script, so turn them off\n+# here and have them controlled elsewhere.\n+[profile.dev]\n+debug = false\n+debug-assertions = false\n+\n+[dependencies]\n+test = { path = \"../../libtest\" }"}, {"sha": "a626c9440d8a1e7e1e57d0ef74efa57ce946d8a8", "filename": "src/rustc/test_shim/lib.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b8eb1fda90998832ba1cdf96a34dc676f7124b/src%2Frustc%2Ftest_shim%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2Flib.rs?ref=c8b8eb1fda90998832ba1cdf96a34dc676f7124b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// See comments in Cargo.toml for why this exists"}]}