{"sha": "5c3c738c4b82a00471cffe67e44a22173404bd4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjM2M3MzhjNGI4MmEwMDQ3MWNmZmU2N2U0NGEyMjE3MzQwNGJkNGY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-18T01:29:30Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T12:53:56Z"}, "message": "Make transformation to OS error explicit", "tree": {"sha": "ec3c66e2a2a2f1bacd3495d3f641b669761fcac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec3c66e2a2a2f1bacd3495d3f641b669761fcac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c3c738c4b82a00471cffe67e44a22173404bd4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c738c4b82a00471cffe67e44a22173404bd4f", "html_url": "https://github.com/rust-lang/rust/commit/5c3c738c4b82a00471cffe67e44a22173404bd4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c3c738c4b82a00471cffe67e44a22173404bd4f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338e51aa48fbf9d5f3407c3872e46facfab53ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/338e51aa48fbf9d5f3407c3872e46facfab53ca3", "html_url": "https://github.com/rust-lang/rust/commit/338e51aa48fbf9d5f3407c3872e46facfab53ca3"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "7d68d05cdb785659f586db3eee9830311ba916b1", "filename": "src/helpers.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c3c738c4b82a00471cffe67e44a22173404bd4f/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c3c738c4b82a00471cffe67e44a22173404bd4f/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5c3c738c4b82a00471cffe67e44a22173404bd4f", "patch": "@@ -361,14 +361,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Sets the last error variable using a `std::io::Error`. It fails if the error cannot be\n-    /// transformed to a raw os error succesfully\n+    /// transformed to a raw os error succesfully.\n     fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n-        self.eval_context_mut().set_last_error(Scalar::from_int(\n-            e.raw_os_error().ok_or_else(|| {\n-                err_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n-            })?,\n-            Size::from_bits(32),\n-        ))\n+        use std::io::ErrorKind::*;\n+        let this = self.eval_context_mut();\n+        let target = &this.tcx.tcx.sess.target.target;\n+        let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n+            this.eval_libc(match e.kind() {\n+                ConnectionRefused => \"ECONNREFUSED\",\n+                ConnectionReset => \"ECONNRESET\",\n+                PermissionDenied => \"EPERM\",\n+                BrokenPipe => \"EPIPE\",\n+                NotConnected => \"ENOTCONN\",\n+                ConnectionAborted => \"ECONNABORTED\",\n+                AddrNotAvailable => \"EADDRNOTAVAIL\",\n+                AddrInUse => \"EADDRINUSE\",\n+                NotFound => \"ENOENT\",\n+                Interrupted => \"EINTR\",\n+                InvalidInput => \"EINVAL\",\n+                TimedOut => \"ETIMEDOUT\",\n+                AlreadyExists => \"EEXIST\",\n+                WouldBlock => \"EWOULDBLOCK\",\n+                _ => throw_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n+            })?\n+        } else {\n+            // FIXME: we have to implement the windows' equivalent of this.\n+            throw_unsup_format!(\"Setting the last OS error from an io::Error is unsupported for {}.\", target.target_os)\n+        };\n+        this.set_last_error(last_error)\n     }\n \n     /// Helper function that consumes an `std::io::Result<T>` and returns an"}]}