{"sha": "80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTZlM2U1ODJhOWViOTExNTkwMGQ1MWFlNmVkZWNmNDZkODFmNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-28T11:48:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-28T11:48:48Z"}, "message": "Auto merge of #54356 - Xanewok:save-analysis-invocation, r=nrc\n\nEmit used rustc invocation in the save-analysis file\n\nBlocked on https://github.com/nrc/rls-data/pull/19. (I'm guessing it won't pass CI due to an out-of-tree git dependency)\n\nThis should allow RLS to recreate a Rust compilation build plan from the save-analysis files alone, which should be useful when fetching those from external build systems, most notably Buck now.\n\nAlso this includes some more potentially useful compilation-specific options (e.g. sysroot or the actual path to extern crates) but that's not required for the build plan bits.\n\ncc @jsgf @alexcrichton\n\nr? @nrc", "tree": {"sha": "b552f18fe12a7d7b8dd41fd921a9abfec63001dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b552f18fe12a7d7b8dd41fd921a9abfec63001dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "html_url": "https://github.com/rust-lang/rust/commit/80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "html_url": "https://github.com/rust-lang/rust/commit/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53"}, {"sha": "58a86213abe70ffda0b2edba475d96b3aed95844", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a86213abe70ffda0b2edba475d96b3aed95844", "html_url": "https://github.com/rust-lang/rust/commit/58a86213abe70ffda0b2edba475d96b3aed95844"}], "stats": {"total": 148, "additions": 123, "deletions": 25}, "files": [{"sha": "5a44b696a03e16e22fd4dd7757d802ecf98d3603", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -2373,6 +2373,7 @@ dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_codegen_utils 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "ce52fe00b0eb2ec30d19b27e6d3460d6418b1f1e", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -47,7 +47,8 @@ use std::str;\n use syntax::attr;\n \n pub use rustc_codegen_utils::link::{find_crate_name, filename_for_input, default_output_for_target,\n-                                  invalid_output_for_target, out_filename, check_file_is_writeable};\n+                                  invalid_output_for_target, out_filename, check_file_is_writeable,\n+                                  filename_for_metadata};\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n@@ -218,15 +219,6 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     false\n }\n \n-fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf {\n-    let out_filename = outputs.single_output_file.clone()\n-        .unwrap_or(outputs\n-            .out_directory\n-            .join(&format!(\"lib{}{}.rmeta\", crate_name, sess.opts.cg.extra_filename)));\n-    check_file_is_writeable(&out_filename, sess);\n-    out_filename\n-}\n-\n pub(crate) fn each_linked_rlib(sess: &Session,\n                                info: &CrateInfo,\n                                f: &mut dyn FnMut(CrateNum, &Path)) -> Result<(), String> {"}, {"sha": "3d47f91a6239a96a5d412de3de6287a4be332caf", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -97,6 +97,19 @@ pub fn find_crate_name(sess: Option<&Session>,\n     \"rust_out\".to_string()\n }\n \n+pub fn filename_for_metadata(sess: &Session,\n+                             crate_name: &str,\n+                             outputs: &OutputFilenames) -> PathBuf {\n+    let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n+\n+    let out_filename = outputs.single_output_file.clone()\n+        .unwrap_or(outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname)));\n+\n+    check_file_is_writeable(&out_filename, sess);\n+\n+    out_filename\n+}\n+\n pub fn filename_for_input(sess: &Session,\n                           crate_type: config::CrateType,\n                           crate_name: &str,"}, {"sha": "27176a821b4affa6e50d8b0587cac045a1e14c1d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -980,6 +980,7 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n                                 state.expanded_crate.unwrap(),\n                                 state.analysis.unwrap(),\n                                 state.crate_name.unwrap(),\n+                                state.input,\n                                 None,\n                                 DumpHandler::new(state.out_dir,\n                                                  state.crate_name.unwrap()))"}, {"sha": "e47f89c64ff075154e85bcf8a9a7c1dc8ac4c620", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -12,6 +12,7 @@ crate-type = [\"dylib\"]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "ab8f468672944eb070864a0b9df3257badcb85be", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -25,10 +25,12 @@\n \n use rustc::hir::def::Def as HirDef;\n use rustc::hir::def_id::DefId;\n+use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n use std::path::Path;\n+use std::env;\n \n use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n use syntax::parse::token;\n@@ -49,8 +51,8 @@ use json_dumper::{Access, DumpOutput, JsonDumper};\n use span_utils::SpanUtils;\n use sig;\n \n-use rls_data::{CratePreludeData, Def, DefKind, GlobalCrateId, Import, ImportKind, Ref, RefKind,\n-               Relation, RelationKind, SpanData};\n+use rls_data::{CompilationOptions, CratePreludeData, Def, DefKind, GlobalCrateId, Import,\n+               ImportKind, Ref, RefKind, Relation, RelationKind, SpanData};\n \n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n@@ -169,6 +171,54 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.dumper.crate_prelude(data);\n     }\n \n+    pub fn dump_compilation_options(&mut self, input: &Input, crate_name: &str) {\n+        // Apply possible `remap-path-prefix` remapping to the input source file\n+        // (and don't include remapping args anymore)\n+        let (program, arguments) = {\n+            let remap_arg_indices = {\n+                let mut indices = FxHashSet();\n+                // Args are guaranteed to be valid UTF-8 (checked early)\n+                for (i, e) in env::args().enumerate() {\n+                    if e.starts_with(\"--remap-path-prefix=\") {\n+                        indices.insert(i);\n+                    } else if e == \"--remap-path-prefix\" {\n+                        indices.insert(i);\n+                        indices.insert(i + 1);\n+                    }\n+                }\n+                indices\n+            };\n+\n+            let mut args = env::args()\n+                .enumerate()\n+                .filter(|(i, _)| !remap_arg_indices.contains(i))\n+                .map(|(_, arg)| {\n+                    match input {\n+                        Input::File(ref path) if path == Path::new(&arg) => {\n+                            let mapped = &self.tcx.sess.local_crate_source_file;\n+                            mapped\n+                                .as_ref()\n+                                .unwrap()\n+                                .to_string_lossy()\n+                                .into()\n+                        },\n+                        _ => arg,\n+                    }\n+                });\n+\n+            (args.next().unwrap(), args.collect())\n+        };\n+\n+        let data = CompilationOptions {\n+            directory: self.tcx.sess.working_dir.0.clone(),\n+            program,\n+            arguments,\n+            output: self.save_ctxt.compilation_output(crate_name),\n+        };\n+\n+        self.dumper.compilation_opts(data);\n+    }\n+\n     // Return all non-empty prefixes of a path.\n     // For each prefix, we return the span for the last segment in the prefix and\n     // a str representation of the entire prefix."}, {"sha": "e14ac73ee10202b1eb450fdf5de59d5511f810c9", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -12,9 +12,9 @@ use std::io::Write;\n \n use rustc_serialize::json::as_json;\n \n-use rls_data::{self, Analysis, CratePreludeData, Def, DefKind, Import, MacroRef, Ref, RefKind,\n-               Relation, Impl};\n use rls_data::config::Config;\n+use rls_data::{self, Analysis, CompilationOptions, CratePreludeData, Def, DefKind, Impl, Import,\n+               MacroRef, Ref, RefKind, Relation};\n use rls_span::{Column, Row};\n \n #[derive(Debug)]\n@@ -89,6 +89,10 @@ impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n         self.result.prelude = Some(data)\n     }\n \n+    pub fn compilation_opts(&mut self, data: CompilationOptions) {\n+        self.result.compilation = Some(data);\n+    }\n+\n     pub fn macro_use(&mut self, data: MacroRef) {\n         if self.config.pub_only || self.config.reachable_only {\n             return;"}, {"sha": "f6045c7b2d2df2b1123406a40153d5e544cdd0c3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -23,6 +23,7 @@ extern crate rustc;\n #[macro_use]\n extern crate log;\n extern crate rustc_data_structures;\n+extern crate rustc_codegen_utils;\n extern crate rustc_serialize;\n extern crate rustc_target;\n extern crate rustc_typeck;\n@@ -45,9 +46,10 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::CrateType;\n+use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n+use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -110,6 +112,24 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    // Returns path to the compilation output (e.g. libfoo-12345678.rmeta)\n+    pub fn compilation_output(&self, crate_name: &str) -> PathBuf {\n+        let sess = &self.tcx.sess;\n+        // Save-analysis is emitted per whole session, not per each crate type\n+        let crate_type = sess.crate_types.borrow()[0];\n+        let outputs = &*self.tcx.output_filenames(LOCAL_CRATE);\n+\n+        if outputs.outputs.contains_key(&OutputType::Metadata) {\n+            filename_for_metadata(sess, crate_name, outputs)\n+        } else if outputs.outputs.should_codegen() {\n+            out_filename(sess, crate_type, outputs, crate_name)\n+        } else {\n+            // Otherwise it's only a DepInfo, in which case we return early and\n+            // not even reach the analysis stage.\n+            unreachable!()\n+        }\n+    }\n+\n     // List external crates used by the current crate.\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n         let mut result = Vec::with_capacity(self.tcx.crates().len());\n@@ -126,7 +146,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             result.push(ExternalCrateData {\n                 // FIXME: change file_name field to PathBuf in rls-data\n                 // https://github.com/nrc/rls-data/issues/7\n-                file_name: self.span_utils.make_path_string(&lo_loc.file.name),\n+                file_name: self.span_utils.make_filename_string(&lo_loc.file),\n                 num: n.as_u32(),\n                 id: GlobalCrateId {\n                     name: self.tcx.crate_name(n).to_string(),\n@@ -1015,6 +1035,7 @@ pub trait SaveHandler {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     );\n }\n \n@@ -1080,12 +1101,14 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     ) {\n         let output = &mut self.output_file(&save_ctxt);\n         let mut dumper = JsonDumper::new(output, save_ctxt.config.clone());\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1101,6 +1124,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     ) {\n         // We're using the JsonDumper here because it has the format of the\n         // save-analysis results that we will pass to the callback. IOW, we are\n@@ -1111,6 +1135,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1120,6 +1145,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     krate: &ast::Crate,\n     analysis: &'l ty::CrateAnalysis,\n     cratename: &str,\n+    input: &'l Input,\n     config: Option<Config>,\n     mut handler: H,\n ) {\n@@ -1137,7 +1163,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             impl_counter: Cell::new(0),\n         };\n \n-        handler.save(save_ctxt, krate, cratename)\n+        handler.save(save_ctxt, krate, cratename, input)\n     })\n }\n "}, {"sha": "47677a751712e9ccf837b92df268e7f3ca4d6380", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e6e3e582a9eb9115900d51ae6edecf46d81f6e/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "patch": "@@ -35,14 +35,24 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n-    pub fn make_path_string(&self, path: &FileName) -> String {\n-        match *path {\n-            FileName::Real(ref path) if !path.is_absolute() =>\n-                self.sess.working_dir.0\n-                    .join(&path)\n-                    .display()\n-                    .to_string(),\n-            _ => path.to_string(),\n+    pub fn make_filename_string(&self, file: &SourceFile) -> String {\n+        match &file.name {\n+            FileName::Real(path) if !file.name_was_remapped => {\n+                if path.is_absolute() {\n+                    self.sess.source_map().path_mapping()\n+                        .map_prefix(path.clone()).0\n+                        .display()\n+                        .to_string()\n+                } else {\n+                    self.sess.working_dir.0\n+                        .join(&path)\n+                        .display()\n+                        .to_string()\n+                }\n+            },\n+            // If the file name is already remapped, we assume the user\n+            // configured it the way they wanted to, so use that directly\n+            filename => filename.to_string()\n         }\n     }\n "}]}