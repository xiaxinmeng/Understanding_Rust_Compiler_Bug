{"sha": "4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODVjZjdhNDBiNGE2M2U3NjI5ZDM5ZDJhMmFkMGYzNDhjMTQ1OWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T00:30:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` `CodeMap::files`", "tree": {"sha": "d4de2940bbf4565d3c30a795e2ba010d846ad13b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4de2940bbf4565d3c30a795e2ba010d846ad13b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "html_url": "https://github.com/rust-lang/rust/commit/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f39ed40bc7c8a2c01a61584fb88a723b3e62ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f39ed40bc7c8a2c01a61584fb88a723b3e62ca", "html_url": "https://github.com/rust-lang/rust/commit/39f39ed40bc7c8a2c01a61584fb88a723b3e62ca"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "c1261a57782df2e3b35eb25377c5f265a86c1e9d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "patch": "@@ -464,9 +464,19 @@ fn write_out_deps(sess: Session, input: &input, outputs: &OutputFilenames, crate\n \n     // Build a list of files used to compile the output and\n     // write Makefile-compatible dependency rules\n-    let files: ~[@str] = sess.codemap.files.iter()\n-        .filter_map(|fmap| if fmap.is_real_file() { Some(fmap.name) } else { None })\n-        .collect();\n+    let files: ~[@str] = {\n+        let files = sess.codemap.files.borrow();\n+        files.get()\n+             .iter()\n+             .filter_map(|fmap| {\n+                 if fmap.is_real_file() {\n+                     Some(fmap.name)\n+                 } else {\n+                     None\n+                 }\n+             })\n+             .collect()\n+    };\n     let mut file = io::File::create(&deps_filename);\n     for path in out_filenames.iter() {\n         write!(&mut file as &mut Writer,"}, {"sha": "c0aee7fc634b38e541ef899636456b67ac7b2437", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "patch": "@@ -268,13 +268,13 @@ impl FileMap {\n }\n \n pub struct CodeMap {\n-    files: @mut ~[@FileMap]\n+    files: RefCell<~[@FileMap]>\n }\n \n impl CodeMap {\n     pub fn new() -> CodeMap {\n         CodeMap {\n-            files: @mut ~[],\n+            files: RefCell::new(~[]),\n         }\n     }\n \n@@ -288,12 +288,12 @@ impl CodeMap {\n                                 substr: FileSubstr,\n                                 src: @str)\n                                 -> @FileMap {\n-        let files = &mut *self.files;\n-        let start_pos = if files.len() == 0 {\n+        let mut files = self.files.borrow_mut();\n+        let start_pos = if files.get().len() == 0 {\n             0\n         } else {\n-            let last_start = files.last().start_pos.to_uint();\n-            let last_len = files.last().src.len();\n+            let last_start = files.get().last().start_pos.to_uint();\n+            let last_len = files.get().last().src.len();\n             last_start + last_len\n         };\n \n@@ -304,7 +304,7 @@ impl CodeMap {\n             multibyte_chars: RefCell::new(~[]),\n         };\n \n-        files.push(filemap);\n+        files.get().push(filemap);\n \n         return filemap;\n     }\n@@ -350,9 +350,11 @@ impl CodeMap {\n     }\n \n     pub fn span_to_str(&self, sp: Span) -> ~str {\n-        let files = &*self.files;\n-        if files.len() == 0 && sp == DUMMY_SP {\n-            return ~\"no-location\";\n+        {\n+            let files = self.files.borrow();\n+            if files.get().len() == 0 && sp == DUMMY_SP {\n+                return ~\"no-location\";\n+            }\n         }\n \n         let lo = self.lookup_char_pos_adj(sp.lo);\n@@ -392,7 +394,12 @@ impl CodeMap {\n     }\n \n     pub fn get_filemap(&self, filename: &str) -> @FileMap {\n-        for fm in self.files.iter() { if filename == fm.name { return *fm; } }\n+        let files = self.files.borrow();\n+        for fm in files.get().iter() {\n+            if filename == fm.name {\n+                return *fm\n+            }\n+        }\n         //XXjdm the following triggers a mismatched type bug\n         //      (or expected function, found _|_)\n         fail!(); // (\"asking for \" + filename + \" which we don't know about\");\n@@ -401,13 +408,14 @@ impl CodeMap {\n \n impl CodeMap {\n     fn lookup_filemap_idx(&self, pos: BytePos) -> uint {\n-        let files = &*self.files;\n+        let files = self.files.borrow();\n+        let files = files.get();\n         let len = files.len();\n         let mut a = 0u;\n         let mut b = len;\n         while b - a > 1u {\n             let m = (a + b) / 2u;\n-            if self.files[m].start_pos > pos {\n+            if files[m].start_pos > pos {\n                 b = m;\n             } else {\n                 a = m;\n@@ -423,7 +431,9 @@ impl CodeMap {\n     fn lookup_line(&self, pos: BytePos) -> FileMapAndLine\n     {\n         let idx = self.lookup_filemap_idx(pos);\n-        let f = self.files[idx];\n+\n+        let files = self.files.borrow();\n+        let f = files.get()[idx];\n         let mut a = 0u;\n         let mut lines = f.lines.borrow_mut();\n         let mut b = lines.get().len();\n@@ -457,7 +467,8 @@ impl CodeMap {\n     fn lookup_byte_offset(&self, bpos: BytePos)\n         -> FileMapAndBytePos {\n         let idx = self.lookup_filemap_idx(bpos);\n-        let fm = self.files[idx];\n+        let files = self.files.borrow();\n+        let fm = files.get()[idx];\n         let offset = bpos - fm.start_pos;\n         return FileMapAndBytePos {fm: fm, pos: offset};\n     }\n@@ -467,7 +478,8 @@ impl CodeMap {\n     fn bytepos_to_local_charpos(&self, bpos: BytePos) -> CharPos {\n         debug!(\"codemap: converting {:?} to char pos\", bpos);\n         let idx = self.lookup_filemap_idx(bpos);\n-        let map = self.files[idx];\n+        let files = self.files.borrow();\n+        let map = files.get()[idx];\n \n         // The number of extra bytes due to multibyte chars in the FileMap\n         let mut total_extra_bytes = 0;"}, {"sha": "5f634f7f054e27b3f69530baad85601ab721075d", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "patch": "@@ -109,7 +109,8 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::token_tree])\n             let s = s.to_managed();\n             // Add this input file to the code map to make it available as\n             // dependency information\n-            cx.parse_sess.cm.files.push(@codemap::FileMap {\n+            let mut files = cx.parse_sess.cm.files.borrow_mut();\n+            files.get().push(@codemap::FileMap {\n                 name: file.display().to_str().to_managed(),\n                 substr: codemap::FssNone,\n                 src: s,"}, {"sha": "3b81b09112b8d8d4e41b9bdd3cf44e5a708195cc", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "patch": "@@ -361,7 +361,10 @@ fn consume_any_line_comment(rdr: @StringReader)\n             // I guess this is the only way to figure out if\n             // we're at the beginning of the file...\n             let cmap = @CodeMap::new();\n-            (*cmap).files.push(rdr.filemap);\n+            {\n+                let mut files = cmap.files.borrow_mut();\n+                files.get().push(rdr.filemap);\n+            }\n             let loc = cmap.lookup_char_pos_adj(rdr.last_pos.get());\n             if loc.line == 1u && loc.col == CharPos(0u) {\n                 while rdr.curr.get() != '\\n' && !is_eof(rdr) { bump(rdr); }"}]}