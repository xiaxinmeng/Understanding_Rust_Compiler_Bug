{"sha": "7afdaf2c06c624e08c7533bf4c1e291df823aaba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmRhZjJjMDZjNjI0ZTA4Yzc1MzNiZjRjMWUyOTFkZjgyM2FhYmE=", "commit": {"author": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-12T08:58:37Z"}, "committer": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-12T08:58:37Z"}, "message": "Stop relying on #[feature(try_trait)] in doctests.", "tree": {"sha": "b0039bb24b5a5a35ffa3ec2271dd4de60fa9aa6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0039bb24b5a5a35ffa3ec2271dd4de60fa9aa6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afdaf2c06c624e08c7533bf4c1e291df823aaba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afdaf2c06c624e08c7533bf4c1e291df823aaba", "html_url": "https://github.com/rust-lang/rust/commit/7afdaf2c06c624e08c7533bf4c1e291df823aaba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afdaf2c06c624e08c7533bf4c1e291df823aaba/comments", "author": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d442c104eadfaf01d8a12ff6e646ccaec4c7948b", "html_url": "https://github.com/rust-lang/rust/commit/d442c104eadfaf01d8a12ff6e646ccaec4c7948b"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "dd9b9330aee2b5ed466c0e5e9f42323190eeedc2", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7afdaf2c06c624e08c7533bf4c1e291df823aaba/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afdaf2c06c624e08c7533bf4c1e291df823aaba/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=7afdaf2c06c624e08c7533bf4c1e291df823aaba", "patch": "@@ -300,18 +300,18 @@ macro_rules! nonzero_unsigned_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX)?;\")]\n                 ///\n                 /// assert_eq!(Some(two), one.checked_add(1));\n                 /// assert_eq!(None, max.checked_add(1));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -333,18 +333,18 @@ macro_rules! nonzero_unsigned_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX)?;\")]\n                 ///\n                 /// assert_eq!(two, one.saturating_add(1));\n                 /// assert_eq!(max, max.saturating_add(1));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -366,15 +366,15 @@ macro_rules! nonzero_unsigned_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let one = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 ///\n                 /// assert_eq!(two, unsafe { one.unchecked_add(1) });\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -393,10 +393,10 @@ macro_rules! nonzero_unsigned_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let three = \", stringify!($Ty), \"::new(3)?;\")]\n                 #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n@@ -406,7 +406,7 @@ macro_rules! nonzero_unsigned_operations {\n                 /// assert_eq!(Some(two), two.checked_next_power_of_two() );\n                 /// assert_eq!(Some(four), three.checked_next_power_of_two() );\n                 /// assert_eq!(None, max.checked_next_power_of_two() );\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -447,16 +447,16 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let neg = \", stringify!($Ty), \"::new(-1)?;\")]\n                 ///\n                 /// assert_eq!(pos, pos.abs());\n                 /// assert_eq!(pos, neg.abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -475,18 +475,18 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let neg = \", stringify!($Ty), \"::new(-1)?;\")]\n                 #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MIN)?;\")]\n                 ///\n                 /// assert_eq!(Some(pos), neg.checked_abs());\n                 /// assert_eq!(None, min.checked_abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -508,10 +508,10 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let neg = \", stringify!($Ty), \"::new(-1)?;\")]\n                 #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n@@ -520,7 +520,7 @@ macro_rules! nonzero_signed_operations {\n                 /// assert_eq!((pos, false), pos.overflowing_abs());\n                 /// assert_eq!((pos, false), neg.overflowing_abs());\n                 /// assert_eq!((min, true), min.overflowing_abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -541,10 +541,10 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let neg = \", stringify!($Ty), \"::new(-1)?;\")]\n                 #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n@@ -558,7 +558,7 @@ macro_rules! nonzero_signed_operations {\n                 /// assert_eq!(pos, neg.saturating_abs());\n                 /// assert_eq!(max, min.saturating_abs());\n                 /// assert_eq!(max, min_plus.saturating_abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -575,10 +575,10 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let neg = \", stringify!($Ty), \"::new(-1)?;\")]\n                 #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n@@ -591,7 +591,7 @@ macro_rules! nonzero_signed_operations {\n                 /// assert_eq!(min, min.wrapping_abs());\n                 /// # // FIXME: add once Neg is implemented?\n                 /// # // assert_eq!(max, (-max).wrapping_abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -608,11 +608,11 @@ macro_rules! nonzero_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Uty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let u_pos = \", stringify!($Uty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let i_pos = \", stringify!($Ty), \"::new(1)?;\")]\n                 #[doc = concat!(\"let i_neg = \", stringify!($Ty), \"::new(-1)?;\")]\n@@ -624,7 +624,7 @@ macro_rules! nonzero_signed_operations {\n                 /// assert_eq!(u_pos, i_pos.unsigned_abs());\n                 /// assert_eq!(u_pos, i_neg.unsigned_abs());\n                 /// assert_eq!(u_max, i_min.unsigned_abs());\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -660,18 +660,18 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n                 #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX)?;\")]\n                 ///\n                 /// assert_eq!(Some(four), two.checked_mul(two));\n                 /// assert_eq!(None, max.checked_mul(two));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -694,18 +694,18 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n                 #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX)?;\")]\n                 ///\n                 /// assert_eq!(four, two.saturating_mul(two));\n                 /// assert_eq!(max, four.saturating_mul(max));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -737,15 +737,15 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n                 #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n                 ///\n                 /// assert_eq!(four, unsafe { two.unchecked_mul(two) });\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -763,18 +763,18 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let three = \", stringify!($Ty), \"::new(3)?;\")]\n                 #[doc = concat!(\"let twenty_seven = \", stringify!($Ty), \"::new(27)?;\")]\n                 #[doc = concat!(\"let half_max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX / 2)?;\")]\n                 ///\n                 /// assert_eq!(Some(twenty_seven), three.checked_pow(3));\n                 /// assert_eq!(None, half_max.checked_pow(3));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n@@ -805,18 +805,18 @@ macro_rules! nonzero_unsigned_signed_operations {\n                 ///\n                 /// ```\n                 /// #![feature(nonzero_ops)]\n-                /// # #![feature(try_trait)]\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 ///\n-                /// # fn main() -> Result<(), std::option::NoneError> {\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n                 #[doc = concat!(\"let three = \", stringify!($Ty), \"::new(3)?;\")]\n                 #[doc = concat!(\"let twenty_seven = \", stringify!($Ty), \"::new(27)?;\")]\n                 #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n                                 stringify!($Int), \"::MAX)?;\")]\n                 ///\n                 /// assert_eq!(twenty_seven, three.saturating_pow(3));\n                 /// assert_eq!(max, max.saturating_pow(3));\n-                /// # Ok(())\n+                /// # Some(())\n                 /// # }\n                 /// ```\n                 #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]"}]}