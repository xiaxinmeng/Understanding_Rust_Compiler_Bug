{"sha": "b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "node_id": "C_kwDOAAsO6NoAKGI2ZDU3ZWNjMGJkYmIzYjZjMzg0ODc4MjEyOTcwM2RkNGNiMjUxZWI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T16:11:28Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:12Z"}, "message": "Hide further opaque type errors if items that could constrain the opaque type have errors", "tree": {"sha": "9631570c4ec8e67d033c852b63b896d93834a39d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9631570c4ec8e67d033c852b63b896d93834a39d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "html_url": "https://github.com/rust-lang/rust/commit/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4794d9d1b8d2ad206ce0aca2afe91d38c6d3420", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4794d9d1b8d2ad206ce0aca2afe91d38c6d3420", "html_url": "https://github.com/rust-lang/rust/commit/e4794d9d1b8d2ad206ce0aca2afe91d38c6d3420"}], "stats": {"total": 164, "additions": 40, "deletions": 124}, "files": [{"sha": "67a8ae4c1f77892ecbe176f4844a69cd2eb53098", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -607,7 +607,12 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n             // // because we again need to reveal `Foo` so we can check whether the\n             // // constant does not contain interior mutability.\n             // ```\n-            if self.tcx.typeck(def_id).concrete_opaque_types.get(&self.def_id).is_none() {\n+            let tables = self.tcx.typeck(def_id);\n+            if let Some(_) = tables.tainted_by_errors {\n+                self.found = Some((DUMMY_SP, self.tcx.ty_error()));\n+                return;\n+            }\n+            if tables.concrete_opaque_types.get(&self.def_id).is_none() {\n                 debug!(\"no constraints in typeck results\");\n                 return;\n             }"}, {"sha": "67b97c21805e684cf757c1f0ef7d6d3af2e5ec37", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -28,7 +28,6 @@ impl Bar for AssocNoCopy {\n \n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n-    //~^ ERROR could not find defining uses\n \n     fn func() -> Self::Out {\n         Box::new(AssocNoCopy)"}, {"sha": "be4bfa6272b8d77812b0672405ab603197f397a2", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,17 +1,11 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:34:9\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:33:9\n    |\n LL |         Box::new(AssocNoCopy)\n    |         ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n    = note: required for the cast to the object type `dyn Bar<Assoc = impl Copy>`\n \n-error: could not find defining uses\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n-   |\n-LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n-   |                            ^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a75b9b43b3e8bae8b0544bd387dab33c1348d104", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -8,7 +8,6 @@ pub trait Bar {\n \n impl<S: Default> Bar for S {\n     type E = impl Copy;\n-    //~^ ERROR could not find defining uses\n \n     fn foo<T: Default>() -> Self::E {\n         //~^ ERROR impl has stricter requirements than trait"}, {"sha": "efc57da746132600900295431238ac4498bf995d", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/issue-55872-1.rs:13:15\n+  --> $DIR/issue-55872-1.rs:12:15\n    |\n LL |     fn foo<T>() -> Self::E;\n    |     ----------------------- definition of `foo` from trait\n@@ -8,7 +8,7 @@ LL |     fn foo<T: Default>() -> Self::E {\n    |               ^^^^^^^ impl has extra requirement `T: Default`\n \n error[E0277]: the trait bound `S: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:15:9\n+  --> $DIR/issue-55872-1.rs:14:9\n    |\n LL |         (S::default(), T::default())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `S`\n@@ -20,7 +20,7 @@ LL | impl<S: Default + std::marker::Copy> Bar for S {\n    |                 +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n-  --> $DIR/issue-55872-1.rs:15:9\n+  --> $DIR/issue-55872-1.rs:14:9\n    |\n LL |         (S::default(), T::default())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `Copy` is not implemented for `T`\n@@ -31,13 +31,7 @@ help: consider further restricting this bound\n LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n    |                       +++++++++++++++++++\n \n-error: could not find defining uses\n-  --> $DIR/issue-55872-1.rs:10:14\n-   |\n-LL |     type E = impl Copy;\n-   |              ^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0276, E0277.\n For more information about an error, try `rustc --explain E0276`."}, {"sha": "f50b31ff496ae25be1bb756a0685e56d29840e02", "filename": "src/test/ui/impl-trait/issue-55872-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -11,7 +11,6 @@ pub trait Bar {\n \n impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n-    //~^ ERROR could not find defining uses\n     fn foo<T>() -> Self::E {\n         async {}\n         //~^ ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied [E0277]"}, {"sha": "bafd31f0083e8edec2106e267002116a7e338adb", "filename": "src/test/ui/impl-trait/issue-55872-3.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-3.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,15 +1,9 @@\n error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n-  --> $DIR/issue-55872-3.rs:16:9\n+  --> $DIR/issue-55872-3.rs:15:9\n    |\n LL |         async {}\n    |         ^^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n \n-error: could not find defining uses\n-  --> $DIR/issue-55872-3.rs:13:14\n-   |\n-LL |     type E = impl std::marker::Copy;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ef9756acee058bfa8a4648d580bfc9cbd7c89034", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -17,7 +17,7 @@ LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:15:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n    |\n LL |     t\n    |     ^"}, {"sha": "cb90776472b5dc543fd395548d0cbe41082ca61f", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -9,7 +9,6 @@ fn main() {\n \n type WrongGeneric<T> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n-//~| ERROR could not find defining uses\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n     t"}, {"sha": "15ec2eed3da4b0d521b2ea5e834841dc50969134", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -17,19 +17,13 @@ LL | type WrongGeneric<T> = impl 'static;\n    |                   ^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:15:5\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:5\n    |\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n-error: could not find defining uses\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:10:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "608572978a3511028bd6aee0d4b00ae4eeb0471a", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -16,7 +16,7 @@ mod m {\n         is_send(foo()); // Today: error\n     }\n \n-    fn baz() { //~ ERROR concrete type differs from previous defining opaque type use\n+    fn baz() {\n         let f: Foo = 22_u32;\n     }\n "}, {"sha": "3ed86fae8a18de54ec6d4c4ba3ba522a49360ae5", "filename": "src/test/ui/type-alias-impl-trait/inference-cycle.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Finference-cycle.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -34,18 +34,6 @@ note: cycle used when checking item types in module `m`\n LL | mod m {\n    | ^^^^^\n \n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/inference-cycle.rs:19:5\n-   |\n-LL |     fn baz() {\n-   |     ^^^^^^^^ expected `()`, got `u32`\n-   |\n-note: previous use here\n-  --> $DIR/inference-cycle.rs:11:5\n-   |\n-LL |     pub fn foo() -> Foo {\n-   |     ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0391`."}, {"sha": "5fef79d0917d6df8a3612bef9882fdffab95e925", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,11 +1,11 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:20:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:20:9\n    |\n LL |         |x| x\n    |         ^^^^^\n@@ -19,7 +19,7 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: expected type `for<'r> Fn<(&'r X,)>`\n               found type `Fn<(&'static X,)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:20:9\n    |\n LL |         |x| x\n    |         ^^^^^"}, {"sha": "7c6e764248479544c20025f46403e2bb04741252", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -15,7 +15,6 @@ struct X;\n \n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n-    //~^ ERROR could not find defining uses\n \n     fn bar(&self) -> Self::Bar {\n         |x| x"}, {"sha": "45329ea292dcf6791c327d5c0c742135f9dccb8a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,17 +1,11 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:20:9\n    |\n LL |         |x| x\n    |         ^^^^^ implementation of `FnOnce` is not general enough\n    |\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error: could not find defining uses\n-  --> $DIR/issue-57611-trait-alias.rs:17:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "37a2f28ce074fed466fbb7dcb3f4b95ef7a0a7cd", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -8,7 +8,6 @@ trait Bug {\n \n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n-    //~^ ERROR could not find defining uses\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR the trait bound `(): Bug` is not satisfied"}, {"sha": "3666b6e97ecfddbfe748d9c1c3d198186327ba78", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -8,21 +8,15 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:13:40\n+  --> $DIR/issue-60371.rs:12:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error: could not find defining uses\n-  --> $DIR/issue-60371.rs:10:17\n-   |\n-LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "057a908bbee7477ebc76e1a4fee02e37ca103e98", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -3,7 +3,6 @@\n #![feature(type_alias_impl_trait)]\n \n type Closure = impl FnOnce();\n-//~^ ERROR could not find defining uses\n \n fn c() -> Closure {\n     || -> Closure { || () }"}, {"sha": "950d9bbf245ca4c0f5864ee1398e9aefe8c601a7", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: expected a `FnOnce<()>` closure, found `()`\n-  --> $DIR/issue-63279.rs:9:11\n+  --> $DIR/issue-63279.rs:8:11\n    |\n LL |     || -> Closure { || () }\n    |           ^^^^^^^ expected an `FnOnce<()>` closure, found `()`\n@@ -8,16 +8,16 @@ LL |     || -> Closure { || () }\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-63279.rs:9:21\n+  --> $DIR/issue-63279.rs:8:21\n    |\n LL |     || -> Closure { || () }\n    |                     ^^^^^ expected `()`, found closure\n    |\n    = note: expected unit type `()`\n-                found closure `[closure@$DIR/issue-63279.rs:9:21: 9:26]`\n+                found closure `[closure@$DIR/issue-63279.rs:8:21: 8:26]`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-63279.rs:9:5\n+  --> $DIR/issue-63279.rs:8:5\n    |\n LL | type Closure = impl FnOnce();\n    |                ------------- the expected opaque type\n@@ -26,15 +26,9 @@ LL |     || -> Closure { || () }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n    = note: expected opaque type `impl FnOnce()`\n-                  found closure `[closure@$DIR/issue-63279.rs:9:5: 9:28]`\n+                  found closure `[closure@$DIR/issue-63279.rs:8:5: 8:28]`\n \n-error: could not find defining uses\n-  --> $DIR/issue-63279.rs:5:16\n-   |\n-LL | type Closure = impl FnOnce();\n-   |                ^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "ad641eaa00d38afa4721054eba06d8b81a1e86a2", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -3,7 +3,6 @@\n #![feature(type_alias_impl_trait)]\n \n type Test = impl Copy;\n-//~^ ERROR could not find defining uses\n \n fn test() -> Test {\n     let y = || -> Test { () };"}, {"sha": "c11585db077e2d1393f7f561a32c9a790f4db335", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-74280.rs:10:5\n+  --> $DIR/issue-74280.rs:9:5\n    |\n LL | type Test = impl Copy;\n    |             --------- the expected opaque type\n@@ -10,12 +10,6 @@ LL |     7\n    = note: expected opaque type `impl Copy`\n                      found type `{integer}`\n \n-error: could not find defining uses\n-  --> $DIR/issue-74280.rs:5:13\n-   |\n-LL | type Test = impl Copy;\n-   |             ^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "46bac5a34f5c08408bf76071e77e40a1ed9cce7e", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -5,7 +5,6 @@\n #![feature(type_alias_impl_trait)]\n \n type X<A, B> = impl Into<&'static A>;\n-//~^ ERROR could not find defining uses\n \n fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n     (a, a)"}, {"sha": "f4d8b4509d43d1942614519e10049e129f5dcf2a", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&'static B: From<&A>` is not satisfied\n-  --> $DIR/multiple-def-uses-in-one-fn.rs:11:9\n+  --> $DIR/multiple-def-uses-in-one-fn.rs:10:9\n    |\n LL |     (a, a)\n    |         ^ the trait `From<&A>` is not implemented for `&'static B`\n@@ -10,12 +10,6 @@ help: consider introducing a `where` bound, but there might be an alternative be\n LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) where &'static B: From<&A> {\n    |                                                                ++++++++++++++++++++++++++\n \n-error: could not find defining uses\n-  --> $DIR/multiple-def-uses-in-one-fn.rs:7:16\n-   |\n-LL | type X<A, B> = impl Into<&'static A>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d51c4185fbc4aaa802055358a02b2e034e75d86a", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -4,7 +4,6 @@\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n-//~^ ERROR could not find defining uses\n \n trait Foo<A> { }\n "}, {"sha": "630328afc52c48b3d21d023e2bfefb676d154cc9", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,18 +1,12 @@\n error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n-  --> $DIR/nested-tait-inference.rs:15:5\n+  --> $DIR/nested-tait-inference.rs:14:5\n    |\n LL |     ()\n    |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Foo<()>>\n \n-error: could not find defining uses\n-  --> $DIR/nested-tait-inference.rs:6:13\n-   |\n-LL | type FooX = impl Debug;\n-   |             ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "00d835d3ca7741400ebe9095804d44c0dcdb9d96", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -4,7 +4,6 @@\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n-//~^ ERROR could not find defining uses\n \n trait Foo<A> {}\n "}, {"sha": "1b04ea2bf167cdbc2e6d64a9ff5b069bae48a402", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6d57ecc0bdbb3b6c3848782129703dd4cb251eb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=b6d57ecc0bdbb3b6c3848782129703dd4cb251eb", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n-  --> $DIR/nested-tait-inference2.rs:15:5\n+  --> $DIR/nested-tait-inference2.rs:14:5\n    |\n LL |     ()\n    |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n@@ -8,12 +8,6 @@ LL |     ()\n              <() as Foo<()>>\n              <() as Foo<u32>>\n \n-error: could not find defining uses\n-  --> $DIR/nested-tait-inference2.rs:6:13\n-   |\n-LL | type FooX = impl Debug;\n-   |             ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}]}