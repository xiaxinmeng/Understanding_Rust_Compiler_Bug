{"sha": "74563b41666228e46f892e795108e06306b2b514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NTYzYjQxNjY2MjI4ZTQ2Zjg5MmU3OTUxMDhlMDYzMDZiMmI1MTQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-04T01:25:06Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-05T16:34:44Z"}, "message": "Restrict error code length to 80 columns\n\nThe global restriction is 100, but since error codes are printed out via\n--explain we want to restrict them to just 80 columns.", "tree": {"sha": "b0345b028de2540b5a14b146d6d9381ad75afb85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0345b028de2540b5a14b146d6d9381ad75afb85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74563b41666228e46f892e795108e06306b2b514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74563b41666228e46f892e795108e06306b2b514", "html_url": "https://github.com/rust-lang/rust/commit/74563b41666228e46f892e795108e06306b2b514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74563b41666228e46f892e795108e06306b2b514/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618768492f0c731fcb770dc2d178abe840846419", "url": "https://api.github.com/repos/rust-lang/rust/commits/618768492f0c731fcb770dc2d178abe840846419", "html_url": "https://github.com/rust-lang/rust/commit/618768492f0c731fcb770dc2d178abe840846419"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "bde0fdf3b8ee6bbd4e308a55ee69cb8f9ca51e4e", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -1,7 +1,8 @@\n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+syntax::register_diagnostics! {\n E0038: r##\"\n Trait objects like `Box<Trait>` can only be constructed when certain\n requirements are satisfied by the trait in question.\n@@ -2206,7 +2207,8 @@ register_diagnostics! {\n //  E0305, // expected constant\n     E0311, // thing may not live long enough\n     E0312, // lifetime of reference outlives lifetime of borrowed content\n-    E0313, // lifetime of borrowed pointer outlives lifetime of captured variable\n+    E0313, // lifetime of borrowed pointer outlives lifetime of captured\n+           // variable\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n@@ -2223,12 +2225,13 @@ register_diagnostics! {\n     E0483, // lifetime of operand does not outlive the operation\n     E0484, // reference is not valid at the time of borrow\n     E0485, // automatically reference is not valid at the time of borrow\n-    E0486, // type of expression contains references that are not valid during...\n+    E0486, // type of expression contains references that are not valid during..\n     E0487, // unsafe use of destructor: destructor might be called while...\n     E0488, // lifetime of variable does not enclose its declaration\n     E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n-    E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n+    E0495, // cannot infer an appropriate lifetime due to conflicting\n+           // requirements\n     E0566, // conflicting representation hints\n     E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit parameters\n@@ -2239,7 +2242,8 @@ register_diagnostics! {\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n     E0697, // closures cannot be static\n     E0707, // multiple elided lifetimes used in arguments of `async fn`\n-    E0708, // `async` non-`move` closures with parameters are not currently supported\n+    E0708, // `async` non-`move` closures with parameters are not currently\n+           // supported\n     E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes"}, {"sha": "4d2c0291ad39bdf1cbc319649bc50388e6c39c1c", "filename": "src/librustc_metadata/error_codes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc_metadata%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc_metadata%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ferror_codes.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -97,5 +97,6 @@ register_diagnostics! {\n     E0464, // multiple matching crates for `..`\n     E0465, // multiple .. candidates for `..` found\n     E0519, // local crate and dependency have same (crate-name, disambiguator)\n-    E0523, // two dependencies have same (crate-name, disambiguator) but different SVH\n+    // two dependencies have same (crate-name, disambiguator) but different SVH\n+    E0523,\n }"}, {"sha": "4d960b416fff0cb2eb81430d085d3d3ded8e59c9", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -4930,15 +4930,16 @@ register_diagnostics! {\n //  E0245, // not a trait\n //  E0246, // invalid recursive type\n //  E0247,\n-//  E0248, // value used as a type, now reported earlier during resolution as E0412\n+//  E0248, // value used as a type, now reported earlier during resolution\n+           // as E0412\n //  E0249,\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n //  E0558, // replaced with a generic attribute input check\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n-//  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n+//  E0563, // cannot determine a type for this `impl Trait` removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0587, // type has conflicting packed and align representation hints\n@@ -4947,8 +4948,8 @@ register_diagnostics! {\n //  E0612, // merged into E0609\n //  E0613, // Removed (merged with E0609)\n     E0627, // yield statement outside of generator literal\n-    E0632, // cannot provide explicit type parameters when `impl Trait` is used in\n-           // argument position.\n+    E0632, // cannot provide explicit type parameters when `impl Trait` is used\n+           // in argument position.\n     E0634, // type has conflicting packed representaton hints\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind"}, {"sha": "76b2575bfd68837c3bb9aeb401d638f35369446e", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -1,7 +1,8 @@\n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+register_diagnostics! {\n \n E0178: r##\"\n In types, the `+` type operator has low precedence, so it is often necessary\n@@ -432,15 +433,19 @@ register_diagnostics! {\n     E0546, // missing 'feature'\n     E0547, // missing 'issue'\n //  E0548, // replaced with a generic attribute input check\n-    E0549, // rustc_deprecated attribute must be paired with either stable or unstable attribute\n+    // rustc_deprecated attribute must be paired with either stable or unstable\n+    // attribute\n+    E0549,\n     E0550, // multiple deprecated attributes\n     E0551, // incorrect meta item\n     E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check\n     E0556, // malformed feature, expected just one word\n     E0584, // file for module `..` found at both .. and ..\n     E0629, // missing 'feature' (rustc_const_unstable)\n-    E0630, // rustc_const_unstable attribute must be paired with stable/unstable attribute\n+    // rustc_const_unstable attribute must be paired with stable/unstable\n+    // attribute\n+    E0630,\n     E0693, // incorrect `repr(align)` attribute format\n     E0694, // an unknown tool name found in scoped attributes\n     E0703, // invalid ABI"}, {"sha": "2c29e1ebf1493c4089fab7adaea5a7df4fcfa542", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -94,6 +94,11 @@ declare_features! (\n     /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n      Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n+    /// Allows using the macros:\n+    /// + `__diagnostic_used`\n+    /// + `__register_diagnostic`\n+    /// +`__build_diagnostic_array`\n+    (removed, rustc_diagnostic_macros, \"1.38.0\", None, None, None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "49808fc0b60e287d07eabd26f2212f67e7082788", "filename": "src/libsyntax_ext/error_codes.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax_ext%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Flibsyntax_ext%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ferror_codes.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -1,9 +1,10 @@\n use syntax::register_long_diagnostics;\n \n // Error messages for EXXXX errors.\n-// Each message should start and end with a new line, and be wrapped to 80 characters.\n-// In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n-register_long_diagnostics! {\n+// Each message should start and end with a new line, and be wrapped to 80\n+// characters.  In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use\n+// `:set tw=0` to disable.\n+syntax::register_diagnostics! {\n E0660: r##\"\n The argument to the `asm` macro is not well-formed.\n "}, {"sha": "930290996861515c7317184a87b1a5bd39ba94ba", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74563b41666228e46f892e795108e06306b2b514/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74563b41666228e46f892e795108e06306b2b514/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=74563b41666228e46f892e795108e06306b2b514", "patch": "@@ -15,6 +15,7 @@\n \n use std::path::Path;\n \n+const ERROR_CODE_COLS: usize = 80;\n const COLS: usize = 100;\n \n const LINES: usize = 3000;\n@@ -51,7 +52,13 @@ enum LIUState {\n /// Lines of this form are allowed to be overlength, because Markdown\n /// offers no way to split a line in the middle of a URL, and the lengths\n /// of URLs to external references are beyond our control.\n-fn line_is_url(line: &str) -> bool {\n+fn line_is_url(columns: usize, line: &str) -> bool {\n+    // more basic check for error_codes.rs, to avoid complexity in implementing two state machines\n+    if columns == ERROR_CODE_COLS {\n+        return line.starts_with(\"[\") &&\n+            line.contains(\"]:\") && line.contains(\"http\");\n+    }\n+\n     use self::LIUState::*;\n     let mut state: LIUState = EXP_COMMENT_START;\n     let is_url = |w: &str| w.starts_with(\"http://\") || w.starts_with(\"https://\");\n@@ -75,7 +82,7 @@ fn line_is_url(line: &str) -> bool {\n                 => state = EXP_END,\n \n             (_, w)\n-                if w.len() > COLS && is_url(w)\n+                if w.len() > columns && is_url(w)\n                 => state = EXP_END,\n \n             (_, _) => {}\n@@ -88,8 +95,8 @@ fn line_is_url(line: &str) -> bool {\n /// Returns `true` if `line` is allowed to be longer than the normal limit.\n /// Currently there is only one exception, for long URLs, but more\n /// may be added in the future.\n-fn long_line_is_ok(line: &str) -> bool {\n-    if line_is_url(line) {\n+fn long_line_is_ok(max_columns: usize, line: &str) -> bool {\n+    if line_is_url(max_columns, line) {\n         return true;\n     }\n \n@@ -144,6 +151,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n+        let max_columns = if filename == \"error_codes.rs\" {\n+            ERROR_CODE_COLS\n+        } else {\n+            COLS\n+        };\n+\n         let can_contain = contents.contains(\"// ignore-tidy-\") ||\n             contents.contains(\"# ignore-tidy-\");\n         let mut skip_cr = contains_ignore_directive(can_contain, &contents, \"cr\");\n@@ -162,11 +175,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n-            if line.chars().count() > COLS && !long_line_is_ok(line) {\n+            if line.chars().count() > max_columns &&\n+                !long_line_is_ok(max_columns, line) {\n                 suppressible_tidy_err!(\n                     err,\n                     skip_line_length,\n-                    &format!(\"line longer than {} chars\", COLS)\n+                    &format!(\"line longer than {} chars\", max_columns)\n                 );\n             }\n             if line.contains('\\t') {"}]}