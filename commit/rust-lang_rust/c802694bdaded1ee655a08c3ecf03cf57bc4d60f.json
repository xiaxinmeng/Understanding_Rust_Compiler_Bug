{"sha": "c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "node_id": "C_kwDOAAsO6NoAKGM4MDI2OTRiZGFkZWQxZWU2NTVhMDhjM2VjZjAzY2Y1N2JjNGQ2MGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-12T05:36:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-13T02:10:16Z"}, "message": "Make `Region::as_var` infallible.\n\nIt's what all the call sites require.", "tree": {"sha": "287a13566fe836f9fc039edc436ae0a8666b699a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287a13566fe836f9fc039edc436ae0a8666b699a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "html_url": "https://github.com/rust-lang/rust/commit/c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9693b178fcebe3cc27129b7bc1237ee5eb706af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9693b178fcebe3cc27129b7bc1237ee5eb706af8", "html_url": "https://github.com/rust-lang/rust/commit/9693b178fcebe3cc27129b7bc1237ee5eb706af8"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "043ccaa027156accf61a49594167a3eddb9493ef", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "patch": "@@ -507,9 +507,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         F: Fn() -> RegionCtxt,\n     {\n         let next_region = self.infcx.next_region_var(origin);\n-        let vid = next_region\n-            .as_var()\n-            .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n+        let vid = next_region.as_var();\n \n         if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n@@ -531,9 +529,7 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         F: Fn() -> RegionCtxt,\n     {\n         let next_region = self.infcx.next_nll_region_var(origin.clone());\n-        let vid = next_region\n-            .as_var()\n-            .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n+        let vid = next_region.as_var();\n \n         if cfg!(debug_assertions) && !self.inside_canonicalization_ctxt() {\n             debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);"}, {"sha": "7e6d17ec3437e7062680df9557b1843f80d27506", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "patch": "@@ -131,13 +131,9 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(sym::env),\n         };\n \n-        let reg_var =\n-            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-\n         if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            debug!(?reg_var);\n-            var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n+            var_to_origin.insert(reg.as_var(), RegionCtxt::Placeholder(reg_info));\n         }\n \n         reg\n@@ -150,12 +146,9 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             universe,\n         );\n \n-        let reg_var =\n-            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-\n         if cfg!(debug_assertions) && !self.type_checker.infcx.inside_canonicalization_ctxt() {\n             let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n+            var_to_origin.insert(reg.as_var(), RegionCtxt::Existential(None));\n         }\n \n         reg"}, {"sha": "bbf6430a5ae70c6198052617f5afda6f6767012a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c802694bdaded1ee655a08c3ecf03cf57bc4d60f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c802694bdaded1ee655a08c3ecf03cf57bc4d60f", "patch": "@@ -1772,10 +1772,10 @@ impl<'tcx> Region<'tcx> {\n         matches!(self.kind(), ty::ReVar(_))\n     }\n \n-    pub fn as_var(self) -> Option<RegionVid> {\n+    pub fn as_var(self) -> RegionVid {\n         match self.kind() {\n-            ty::ReVar(vid) => Some(vid),\n-            _ => None,\n+            ty::ReVar(vid) => vid,\n+            _ => bug!(\"expected region {:?} to be of kind ReVar\", self),\n         }\n     }\n }"}]}