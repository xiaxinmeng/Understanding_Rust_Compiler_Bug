{"sha": "d1132fb805537bc43539e1fca7729dde1bc16048", "node_id": "C_kwDOAAsO6NoAKGQxMTMyZmI4MDU1MzdiYzQzNTM5ZTFmY2E3NzI5ZGRlMWJjMTYwNDg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-26T20:11:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-26T20:11:12Z"}, "message": "thread::set_name: debug-assert that things went well", "tree": {"sha": "8ac18f8bb0c1b09392064656208a1c7fb4ab3836", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac18f8bb0c1b09392064656208a1c7fb4ab3836"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1132fb805537bc43539e1fca7729dde1bc16048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1132fb805537bc43539e1fca7729dde1bc16048", "html_url": "https://github.com/rust-lang/rust/commit/d1132fb805537bc43539e1fca7729dde1bc16048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1132fb805537bc43539e1fca7729dde1bc16048/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d49e7e7fa13479c11a3733824c78e280e391288b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d49e7e7fa13479c11a3733824c78e280e391288b", "html_url": "https://github.com/rust-lang/rust/commit/d49e7e7fa13479c11a3733824c78e280e391288b"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "c1d30dd9d521b318ed83cdf225df4ee918da1fcc", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1132fb805537bc43539e1fca7729dde1bc16048/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1132fb805537bc43539e1fca7729dde1bc16048/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=d1132fb805537bc43539e1fca7729dde1bc16048", "patch": "@@ -137,7 +137,9 @@ impl Thread {\n         unsafe {\n             // Available since glibc 2.12, musl 1.1.16, and uClibc 1.0.20.\n             let name = truncate_cstr(name, TASK_COMM_LEN);\n-            libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n+            let res = libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());\n+            // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n+            debug_assert_eq!(res, 0);\n         }\n     }\n \n@@ -152,19 +154,22 @@ impl Thread {\n     pub fn set_name(name: &CStr) {\n         unsafe {\n             let name = truncate_cstr(name, libc::MAXTHREADNAMESIZE);\n-            libc::pthread_setname_np(name.as_ptr());\n+            let res = libc::pthread_setname_np(name.as_ptr());\n+            // We have no good way of propagating errors here, but in debug-builds let's check that this actually worked.\n+            debug_assert_eq!(res, 0);\n         }\n     }\n \n     #[cfg(target_os = \"netbsd\")]\n     pub fn set_name(name: &CStr) {\n         unsafe {\n             let cname = CStr::from_bytes_with_nul_unchecked(b\"%s\\0\".as_slice());\n-            libc::pthread_setname_np(\n+            let res = libc::pthread_setname_np(\n                 libc::pthread_self(),\n                 cname.as_ptr(),\n                 name.as_ptr() as *mut libc::c_void,\n             );\n+            debug_assert_eq!(res, 0);\n         }\n     }\n \n@@ -177,9 +182,8 @@ impl Thread {\n         }\n \n         if let Some(f) = pthread_setname_np.get() {\n-            unsafe {\n-                f(libc::pthread_self(), name.as_ptr());\n-            }\n+            let res = unsafe { f(libc::pthread_self(), name.as_ptr()) };\n+            debug_assert_eq!(res, 0);\n         }\n     }\n "}]}