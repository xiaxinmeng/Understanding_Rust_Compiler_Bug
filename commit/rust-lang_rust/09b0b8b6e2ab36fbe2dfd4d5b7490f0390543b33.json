{"sha": "09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "node_id": "C_kwDOAAsO6NoAKDA5YjBiOGI2ZTJhYjM2ZmJlMmRmZDRkNWI3NDkwZjAzOTA1NDNiMzM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-28T20:42:20Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-04-28T20:42:20Z"}, "message": "Add more diagnostic items", "tree": {"sha": "432ccc63d006274128ebfc0bfed6212dfc8ca47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432ccc63d006274128ebfc0bfed6212dfc8ca47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "html_url": "https://github.com/rust-lang/rust/commit/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1388b38c52d1ca9fbc80bf42fa007504fb0b1b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/1388b38c52d1ca9fbc80bf42fa007504fb0b1b41", "html_url": "https://github.com/rust-lang/rust/commit/1388b38c52d1ca9fbc80bf42fa007504fb0b1b41"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "7f56fa810b245e3c75bcf097b4d28546df4366af", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "patch": "@@ -19,6 +19,7 @@ mod nofloat;\n mod num;\n \n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Alignment\")]\n /// Possible alignments returned by `Formatter::align`\n #[derive(Debug)]\n pub enum Alignment {\n@@ -462,6 +463,7 @@ impl<'a> Arguments<'a> {\n ///\n /// [`format()`]: ../../std/fmt/fn.format.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Arguments\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {\n     // Format string pieces to print."}, {"sha": "406c363dd245553a1c396b43c714400513d245ae", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "patch": "@@ -162,6 +162,7 @@ unsafe impl Sync for AtomicBool {}\n /// loads and stores of pointers. Its size depends on the target pointer's size.\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"AtomicPtr\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n #[cfg_attr(target_pointer_width = \"32\", repr(C, align(4)))]\n #[cfg_attr(target_pointer_width = \"64\", repr(C, align(8)))]\n@@ -1458,6 +1459,7 @@ macro_rules! atomic_int {\n      $stable_nand:meta,\n      $const_stable:meta,\n      $stable_init_const:meta,\n+     $diagnostic_item:meta,\n      $s_int_type:literal,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n@@ -1480,6 +1482,7 @@ macro_rules! atomic_int {\n         ///\n         /// [module-level documentation]: crate::sync::atomic\n         #[$stable]\n+        #[$diagnostic_item]\n         #[repr(C, align($align))]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n@@ -2306,6 +2309,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI8\"),\n     \"i8\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2325,6 +2329,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU8\"),\n     \"u8\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2344,6 +2349,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI16\"),\n     \"i16\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2363,6 +2369,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU16\"),\n     \"u16\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2382,6 +2389,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI32\"),\n     \"i32\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2401,6 +2409,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU32\"),\n     \"u32\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2420,6 +2429,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI64\"),\n     \"i64\",\n     \"\",\n     atomic_min, atomic_max,\n@@ -2439,6 +2449,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU64\"),\n     \"u64\",\n     \"\",\n     atomic_umin, atomic_umax,\n@@ -2458,6 +2469,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI128\"),\n     \"i128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n@@ -2477,6 +2489,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU128\"),\n     \"u128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n@@ -2500,6 +2513,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_ptr_sized_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n+            cfg_attr(not(test), rustc_diagnostic_item = \"AtomicIsize\"),\n             \"isize\",\n             \"\",\n             atomic_min, atomic_max,\n@@ -2520,6 +2534,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_ptr_sized_atomics\", since = \"1.24.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n+            cfg_attr(not(test), rustc_diagnostic_item = \"AtomicUsize\"),\n             \"usize\",\n             \"\",\n             atomic_umin, atomic_umax,"}, {"sha": "fdeb280d24078e9b61c968a8faad90af72f8fb2c", "filename": "library/std/src/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=09b0b8b6e2ab36fbe2dfd4d5b7490f0390543b33", "patch": "@@ -53,6 +53,7 @@ use crate::time;\n /// high-level module to provide its own errors while also revealing some of the\n /// implementation for debugging via `source` chains.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///"}]}