{"sha": "f934043c179eb2d9c1dda4e7a70284e0d9354c82", "node_id": "C_kwDOAAsO6NoAKGY5MzQwNDNjMTc5ZWIyZDljMWRkYTRlN2E3MDI4NGUwZDkzNTRjODI", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-03-28T17:56:00Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2022-04-18T23:53:50Z"}, "message": "Split `NotHandle` into `NullHandleError` and `InvalidHandleError`.\n\nAlso, make the display messages more specific, and remove the `Copy`\nimplementation.", "tree": {"sha": "6c5810574afc94715c5f8a0b1d9a0211425810c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c5810574afc94715c5f8a0b1d9a0211425810c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f934043c179eb2d9c1dda4e7a70284e0d9354c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f934043c179eb2d9c1dda4e7a70284e0d9354c82", "html_url": "https://github.com/rust-lang/rust/commit/f934043c179eb2d9c1dda4e7a70284e0d9354c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f934043c179eb2d9c1dda4e7a70284e0d9354c82/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67994b77fda81223c9e71f0d476aa849c9be9699", "url": "https://api.github.com/repos/rust-lang/rust/commits/67994b77fda81223c9e71f0d476aa849c9be9699", "html_url": "https://github.com/rust-lang/rust/commit/67994b77fda81223c9e71f0d476aa849c9be9699"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "e48f630f76e7fdfdf4bdaaa20672d30f76c5edf5", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f934043c179eb2d9c1dda4e7a70284e0d9354c82/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f934043c179eb2d9c1dda4e7a70284e0d9354c82/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=f934043c179eb2d9c1dda4e7a70284e0d9354c82", "patch": "@@ -143,17 +143,17 @@ impl BorrowedHandle<'_> {\n }\n \n impl TryFrom<HandleOrNull> for OwnedHandle {\n-    type Error = NotHandle;\n+    type Error = NullHandleError;\n \n     #[inline]\n-    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, NotHandle> {\n+    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, NullHandleError> {\n         let owned_handle = handle_or_null.0;\n         if owned_handle.handle.is_null() {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(NotHandle(()))\n+            Err(NullHandleError(()))\n         } else {\n             Ok(owned_handle)\n         }\n@@ -201,39 +201,56 @@ impl OwnedHandle {\n }\n \n impl TryFrom<HandleOrInvalid> for OwnedHandle {\n-    type Error = NotHandle;\n+    type Error = InvalidHandleError;\n \n     #[inline]\n-    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, NotHandle> {\n+    fn try_from(handle_or_invalid: HandleOrInvalid) -> Result<Self, InvalidHandleError> {\n         let owned_handle = handle_or_invalid.0;\n         if owned_handle.handle == c::INVALID_HANDLE_VALUE {\n             // Don't call `CloseHandle`; it'd be harmless, except that it could\n             // overwrite the `GetLastError` error.\n             forget(owned_handle);\n \n-            Err(NotHandle(()))\n+            Err(InvalidHandleError(()))\n         } else {\n             Ok(owned_handle)\n         }\n     }\n }\n \n-/// This is the error type used by [`HandleOrInvalid`] and\n-/// [`HandleOrNull`] when attempting to convert into a handle,\n-/// to indicate that the value is not a handle.\n+/// This is the error type used by [`HandleOrNull`] when attempting to convert\n+/// into a handle, to indicate that the value is null.\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n-pub struct NotHandle(());\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct NullHandleError(());\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl fmt::Display for NotHandle {\n+impl fmt::Display for NullHandleError {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        \"the return value of a Windows API call indicated an error\".fmt(fmt)\n+        \"A HandleOrNull could not be converted to a handle because it was null\".fmt(fmt)\n     }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n-impl crate::error::Error for NotHandle {}\n+impl crate::error::Error for NullHandleError {}\n+\n+/// This is the error type used by [`HandleOrInvalid`] when attempting to\n+/// convert into a handle, to indicate that the value is\n+/// `INVALID_HANDLE_VALUE`.\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct InvalidHandleError(());\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl fmt::Display for InvalidHandleError {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        \"A HandleOrInvalid could not be converted to a handle because it was INVALID_HANDLE_VALUE\"\n+            .fmt(fmt)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl crate::error::Error for InvalidHandleError {}\n \n impl AsRawHandle for BorrowedHandle<'_> {\n     #[inline]"}]}