{"sha": "30fbfd5f05108d12f08711024db699e1b0632508", "node_id": "C_kwDOAAsO6NoAKDMwZmJmZDVmMDUxMDhkMTJmMDg3MTEwMjRkYjY5OWUxYjA2MzI1MDg", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-21T16:27:45Z"}, "committer": {"name": "Ulrich Weigand", "email": "ulrich.weigand@de.ibm.com", "date": "2022-12-21T18:16:41Z"}, "message": "Sort lint_groups in no_lint_suggestion\n\nThe no_lint_suggestion routine passes a vector of lint group names\nto find_best_match_for_name.  That routine depends on the sort\norder of its input vector, which matters in case multiple inputs\nare at the same Levenshtein distance to the target name.\n\nHowever, no_lint_suggestion currently just passes lint_groups.keys()\nas input vector - this is sorted in hash value order, which is not\nguaranteed to be stable, and in fact differs between big- and\nlittle-endian host platforms, causing test failures on s390x.\n\nTo fix this, always sort the lint groups before using their names\nas input to find_best_match_for_name.  In addition, deprecated\nlint groups should never be suggested, so filter those out.\n\nFixes https://github.com/rust-lang/rust/issues/105379", "tree": {"sha": "8ed5e1d5726f4f756155d4f34e15f465c17e43a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ed5e1d5726f4f756155d4f34e15f465c17e43a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30fbfd5f05108d12f08711024db699e1b0632508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30fbfd5f05108d12f08711024db699e1b0632508", "html_url": "https://github.com/rust-lang/rust/commit/30fbfd5f05108d12f08711024db699e1b0632508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30fbfd5f05108d12f08711024db699e1b0632508/comments", "author": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "uweigand", "id": 4154057, "node_id": "MDQ6VXNlcjQxNTQwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4154057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uweigand", "html_url": "https://github.com/uweigand", "followers_url": "https://api.github.com/users/uweigand/followers", "following_url": "https://api.github.com/users/uweigand/following{/other_user}", "gists_url": "https://api.github.com/users/uweigand/gists{/gist_id}", "starred_url": "https://api.github.com/users/uweigand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uweigand/subscriptions", "organizations_url": "https://api.github.com/users/uweigand/orgs", "repos_url": "https://api.github.com/users/uweigand/repos", "events_url": "https://api.github.com/users/uweigand/events{/privacy}", "received_events_url": "https://api.github.com/users/uweigand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4653c93e4442d88bf3278067183c8fdc0be74a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "html_url": "https://github.com/rust-lang/rust/commit/4653c93e4442d88bf3278067183c8fdc0be74a1f"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "3c9ad410663f97f37346ea59c176fccbb36fb7f0", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30fbfd5f05108d12f08711024db699e1b0632508/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30fbfd5f05108d12f08711024db699e1b0632508/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=30fbfd5f05108d12f08711024db699e1b0632508", "patch": "@@ -483,7 +483,16 @@ impl LintStore {\n             return CheckLintNameResult::NoLint(Some(Symbol::intern(&name_lower)));\n         }\n         // ...if not, search for lints with a similar name\n-        let groups = self.lint_groups.keys().copied().map(Symbol::intern);\n+        // Note: find_best_match_for_name depends on the sort order of its input vector.\n+        // To ensure deterministic output, sort elements of the lint_groups hash map.\n+        // Also, never suggest deprecated lint groups.\n+        let mut groups: Vec<_> = self\n+            .lint_groups\n+            .iter()\n+            .filter_map(|(k, LintGroup { depr, .. })| if depr.is_none() { Some(k) } else { None })\n+            .collect();\n+        groups.sort();\n+        let groups = groups.iter().map(|k| Symbol::intern(k));\n         let lints = self.lints.iter().map(|l| Symbol::intern(&l.name_lower()));\n         let names: Vec<Symbol> = groups.chain(lints).collect();\n         let suggestion = find_best_match_for_name(&names, Symbol::intern(&name_lower), None);"}]}