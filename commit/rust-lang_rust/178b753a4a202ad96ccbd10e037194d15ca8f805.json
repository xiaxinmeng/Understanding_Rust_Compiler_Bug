{"sha": "178b753a4a202ad96ccbd10e037194d15ca8f805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGI3NTNhNGEyMDJhZDk2Y2NiZDEwZTAzNzE5NGQxNWNhOGY4MDU=", "commit": {"author": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-19T23:47:18Z"}, "committer": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-20T14:14:06Z"}, "message": "Remove trailing whitespaces to satisfy tidy", "tree": {"sha": "c16309d6063dbee05f73d793dd991ac5064579d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16309d6063dbee05f73d793dd991ac5064579d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178b753a4a202ad96ccbd10e037194d15ca8f805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178b753a4a202ad96ccbd10e037194d15ca8f805", "html_url": "https://github.com/rust-lang/rust/commit/178b753a4a202ad96ccbd10e037194d15ca8f805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178b753a4a202ad96ccbd10e037194d15ca8f805/comments", "author": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e1431941406eeb341c4e3b7e929c2e65514ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e1431941406eeb341c4e3b7e929c2e65514ac3", "html_url": "https://github.com/rust-lang/rust/commit/a7e1431941406eeb341c4e3b7e929c2e65514ac3"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4e712a946b85d07d8cad86478de51ec975e9c198", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/178b753a4a202ad96ccbd10e037194d15ca8f805/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178b753a4a202ad96ccbd10e037194d15ca8f805/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=178b753a4a202ad96ccbd10e037194d15ca8f805", "patch": "@@ -130,9 +130,9 @@ impl<T: ?Sized> Box<T> {\n     /// the destructor of `T` and free the allocated memory. For this\n     /// to be safe, the memory must have been allocated in the precise\n     /// way that `Box` expects, namely, using the global allocator\n-    /// with the correct [`Layout`] for holding a value of type `T`. In \n+    /// with the correct [`Layout`] for holding a value of type `T`. In\n     /// particular, this will be satisfied for a pointer obtained\n-    /// from a previously existing `Box` using [`Box::into_raw`]. \n+    /// from a previously existing `Box` using [`Box::into_raw`].\n     ///\n     /// # Safety\n     ///\n@@ -172,15 +172,15 @@ impl<T: ?Sized> Box<T> {\n     /// After calling this function, the caller is responsible for the\n     /// memory previously managed by the `Box`. In particular, the\n     /// caller should properly destroy `T` and release the memory. The\n-    /// easiest way to do so is to convert the raw pointer back into a `Box` \n+    /// easiest way to do so is to convert the raw pointer back into a `Box`\n     /// with the [`Box::from_raw`] function.\n     ///\n     /// Note: this is an associated function, which means that you have\n     /// to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n     /// # Examples\n-    /// Converting the raw pointer back into a `Box` with [`Box::from_raw`] \n+    /// Converting the raw pointer back into a `Box` with [`Box::from_raw`]\n     /// for automatic cleanup:\n     /// ```\n     /// let x = Box::new(String::from(\"Hello\"));\n@@ -191,7 +191,7 @@ impl<T: ?Sized> Box<T> {\n     /// ```\n     /// use std::alloc::{Layout, dealloc};\n     /// use std::ptr;\n-    /// \n+    ///\n     /// let x = Box::new(String::from(\"Hello\"));\n     /// let p = Box::into_raw(x);\n     /// unsafe{ ptr::drop_in_place(p); }"}]}