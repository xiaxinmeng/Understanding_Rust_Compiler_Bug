{"sha": "d49b67e255db86a5df952b33f4140150fc12bf4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OWI2N2UyNTVkYjg2YTVkZjk1MmIzM2Y0MTQwMTUwZmMxMmJmNGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:38:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:38:19Z"}, "message": "rollup merge of #23176: huonw/rm-bounds", "tree": {"sha": "f1f6284c449bd17747d0ccbf74f15994bce52dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f6284c449bd17747d0ccbf74f15994bce52dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49b67e255db86a5df952b33f4140150fc12bf4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49b67e255db86a5df952b33f4140150fc12bf4d", "html_url": "https://github.com/rust-lang/rust/commit/d49b67e255db86a5df952b33f4140150fc12bf4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49b67e255db86a5df952b33f4140150fc12bf4d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "html_url": "https://github.com/rust-lang/rust/commit/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861"}, {"sha": "0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5", "html_url": "https://github.com/rust-lang/rust/commit/0f6b43aa8f288d3d12adc8747fb5060956d7f0e5"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "8b884c56505b25ccec7d8ab4083d11adb8192eff", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -321,7 +321,7 @@ impl<T> Deref for Arc<T> {\n     }\n }\n \n-impl<T: Send + Sync + Clone> Arc<T> {\n+impl<T: Clone> Arc<T> {\n     /// Make a mutable reference from the given `Arc<T>`.\n     ///\n     /// This is also referred to as a copy-on-write operation because the inner\n@@ -465,7 +465,7 @@ impl<T> Weak<T> {\n \n #[unstable(feature = \"alloc\",\n            reason = \"Weak pointers may not belong in this module.\")]\n-impl<T: Sync + Send> Clone for Weak<T> {\n+impl<T> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///\n     /// This increases the weak reference count."}, {"sha": "b436e49feabb28adeca035983ba56c83529078db", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -488,7 +488,7 @@ impl<T:Send> UnsafeFlavor<T> for Receiver<T> {\n /// println!(\"{:?}\", rx.recv().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n+pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n@@ -528,7 +528,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(rx.recv().unwrap(), 2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sync_channel<T: Send>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n+pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n@@ -537,7 +537,7 @@ pub fn sync_channel<T: Send>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n // Sender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Sender<T> {\n+impl<T> Sender<T> {\n     fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n@@ -619,7 +619,7 @@ impl<T: Send> Sender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for Sender<T> {\n+impl<T> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n@@ -665,7 +665,7 @@ impl<T: Send> Clone for Sender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Sender<T> {\n+impl<T> Drop for Sender<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n@@ -680,7 +680,7 @@ impl<T: Send> Drop for Sender<T> {\n // SyncSender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> SyncSender<T> {\n+impl<T> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n@@ -720,7 +720,7 @@ impl<T: Send> SyncSender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for SyncSender<T> {\n+impl<T> Clone for SyncSender<T> {\n     fn clone(&self) -> SyncSender<T> {\n         unsafe { (*self.inner.get()).clone_chan(); }\n         return SyncSender::new(self.inner.clone());\n@@ -729,7 +729,7 @@ impl<T: Send> Clone for SyncSender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for SyncSender<T> {\n+impl<T> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n         unsafe { (*self.inner.get()).drop_chan(); }\n     }\n@@ -739,7 +739,7 @@ impl<T: Send> Drop for SyncSender<T> {\n // Receiver\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Receiver<T> {\n+impl<T> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n         Receiver { inner: UnsafeCell::new(inner) }\n     }\n@@ -858,7 +858,7 @@ impl<T: Send> Receiver<T> {\n     }\n }\n \n-impl<T: Send> select::Packet for Receiver<T> {\n+impl<T> select::Packet for Receiver<T> {\n     fn can_recv(&self) -> bool {\n         loop {\n             let new_port = match *unsafe { self.inner() } {\n@@ -945,15 +945,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: Send> Iterator for Iter<'a, T> {\n+impl<'a, T> Iterator for Iter<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Receiver<T> {\n+impl<T> Drop for Receiver<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_port(); },"}, {"sha": "7866a85dc8fac7ee03603e03689911ce02f5b253", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -89,7 +89,7 @@ impl<T> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T> Queue<T> {\n     /// Creates a new queue that is safe to share among multiple producers and\n     /// one consumer.\n     pub fn new() -> Queue<T> {\n@@ -140,7 +140,7 @@ impl<T: Send> Queue<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.tail.get();"}, {"sha": "21f690f0ee4d6229a635fd24ba2f51f4695cf33d", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -88,7 +88,7 @@ enum MyUpgrade<T:Send> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             data: None,\n@@ -368,7 +368,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.state.load(Ordering::SeqCst), DISCONNECTED);\n     }"}, {"sha": "be97302857777ca62889c6e19b81c86242937e7c", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -64,7 +64,7 @@ pub enum Failure {\n     Disconnected,\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     // Creation of a packet *must* be followed by a call to postinit_lock\n     // and later by inherit_blocker\n     pub fn new() -> Packet<T> {\n@@ -474,7 +474,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "278ac03cf03fcbb7118a42a9bf71eee25f4ccb41", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -78,7 +78,7 @@ unsafe impl<T: Send> Send for Queue<T> { }\n \n unsafe impl<T: Send> Sync for Queue<T> { }\n \n-impl<T: Send> Node<T> {\n+impl<T> Node<T> {\n     fn new() -> *mut Node<T> {\n         unsafe {\n             boxed::into_raw(box Node {\n@@ -89,7 +89,7 @@ impl<T: Send> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T> Queue<T> {\n     /// Creates a new queue.\n     ///\n     /// This is unsafe as the type system doesn't enforce a single\n@@ -227,7 +227,7 @@ impl<T: Send> Queue<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.first.get();"}, {"sha": "25b5f6f27ba875156f37553891f6d2d30fce8634", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -74,7 +74,7 @@ enum Message<T:Send> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             queue: unsafe { spsc::Queue::new(128) },\n@@ -472,7 +472,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "8e49edc44b6a226d5c1fd2054413072cf22f1d28", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -113,10 +113,10 @@ pub enum Failure {\n \n /// Atomically blocks the current thread, placing it into `slot`, unlocking `lock`\n /// in the meantime. This re-locks the mutex upon returning.\n-fn wait<'a, 'b, T: Send>(lock: &'a Mutex<State<T>>,\n-                         mut guard: MutexGuard<'b, State<T>>,\n-                         f: fn(SignalToken) -> Blocker)\n-                         -> MutexGuard<'a, State<T>>\n+fn wait<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n+                   mut guard: MutexGuard<'b, State<T>>,\n+                   f: fn(SignalToken) -> Blocker)\n+                   -> MutexGuard<'a, State<T>>\n {\n     let (wait_token, signal_token) = blocking::tokens();\n     match mem::replace(&mut guard.blocker, f(signal_token)) {\n@@ -136,7 +136,7 @@ fn wakeup<T>(token: SignalToken, guard: MutexGuard<State<T>>) {\n     token.signal();\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T> Packet<T> {\n     pub fn new(cap: usize) -> Packet<T> {\n         Packet {\n             channels: AtomicUsize::new(1),\n@@ -412,7 +412,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.channels.load(Ordering::SeqCst), 0);\n         let mut guard = self.lock.lock().unwrap();"}, {"sha": "6a721aff89e09f4fe5d3c38d00fa489c419dca4a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -122,6 +122,8 @@ pub struct Mutex<T: Send> {\n     data: UnsafeCell<T>,\n }\n \n+// these are the only places where `T: Send` matters; all other\n+// functionality works fine on a single thread.\n unsafe impl<T: Send> Send for Mutex<T> { }\n \n unsafe impl<T: Send> Sync for Mutex<T> { }\n@@ -181,7 +183,7 @@ pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     poison: poison::FLAG_INIT,\n };\n \n-impl<T: Send> Mutex<T> {\n+impl<T> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> Mutex<T> {\n@@ -244,7 +246,7 @@ impl<T: Send> Mutex<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Mutex<T> {\n+impl<T> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get\n@@ -254,7 +256,7 @@ impl<T: Send> Drop for Mutex<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug + Send + 'static> fmt::Debug for Mutex<T> {\n+impl<T: fmt::Debug + 'static> fmt::Debug for Mutex<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_lock() {\n             Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", *guard),"}, {"sha": "d70350bc7d6512d40a975dd8dd1da2637c6afa4c", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49b67e255db86a5df952b33f4140150fc12bf4d/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=d49b67e255db86a5df952b33f4140150fc12bf4d", "patch": "@@ -130,7 +130,7 @@ pub struct RwLockWriteGuard<'a, T: 'a> {\n \n impl<'a, T> !marker::Send for RwLockWriteGuard<'a, T> {}\n \n-impl<T: Send + Sync> RwLock<T> {\n+impl<T> RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     ///\n     /// # Examples\n@@ -258,7 +258,7 @@ impl<T> Drop for RwLock<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug + Send + Sync> fmt::Debug for RwLock<T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.try_read() {\n             Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", *guard),"}]}