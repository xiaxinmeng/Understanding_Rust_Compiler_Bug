{"sha": "4cb396c68088f38e517ac8890030d17a969e57ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjM5NmM2ODA4OGYzOGU1MTdhYzg4OTAwMzBkMTdhOTY5ZTU3YmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-01T17:23:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-01T17:23:09Z"}, "message": "Auto merge of #41560 - alevy:rwpi-ropi, r=eddyb\n\nAdd RWPI/ROPI relocation model support\n\nThis PR adds support for using LLVM 4's ROPI and RWPI relocation models for ARM.\n\nROPI (Read-Only Position Independence) and RWPI (Read-Write Position Independence) are two new relocation models in LLVM for the ARM backend ([LLVM changset](https://reviews.llvm.org/rL278015)). The motivation is that these are the specific strategies we use in userspace [Tock](https://www.tockos.org) apps, so supporting this is an important step (perhaps the final step, but can't confirm yet) in enabling userspace Rust processes.\n\n## Explanation\n\nROPI makes all code and immutable accesses PC relative, but not assumed to be overriden at runtime (so for example, jumps are always relative).\n\nRWPI uses a base register (`r9`) that stores the addresses of the GOT in memory so the runtime (e.g. a kernel) only adjusts r9 tell running code where the GOT is.\n\n## Complications adding support in Rust\n\nWhile this landed in LLVM master back in August, the header files in `llvm-c` have not been updated yet to reflect it. Rust replicates that header file's version of the `LLVMRelocMode` enum as the Rust enum `llvm::RelocMode` and uses an implicit cast in the ffi to translate from Rust's notion of the relocation model to the LLVM library's notion.\n\nMy workaround for this currently is to replace the `LLVMRelocMode` argument to `LLVMTargetMachineRef` with an int and using the hardcoded int representation of the `RelocMode` enum. This is A Bad Idea(tm), but I think very nearly the right thing.\n\nWould a better alternative be to patch rust-llvm to support these enum variants (also a fairly trivial change)?", "tree": {"sha": "dea3eba114d236e5390140b1e6fd3bbbfa71a3bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea3eba114d236e5390140b1e6fd3bbbfa71a3bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb396c68088f38e517ac8890030d17a969e57ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb396c68088f38e517ac8890030d17a969e57ba", "html_url": "https://github.com/rust-lang/rust/commit/4cb396c68088f38e517ac8890030d17a969e57ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb396c68088f38e517ac8890030d17a969e57ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "526d39948af4004bb60c04dc82d60b7b395966bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/526d39948af4004bb60c04dc82d60b7b395966bb", "html_url": "https://github.com/rust-lang/rust/commit/526d39948af4004bb60c04dc82d60b7b395966bb"}, {"sha": "0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f00f27e0d4743b14f7c0d0fca9731a45eae487a", "html_url": "https://github.com/rust-lang/rust/commit/0f00f27e0d4743b14f7c0d0fca9731a45eae487a"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "5cb5a62c93b35ad6075c289283931ccf8d19b7ec", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=4cb396c68088f38e517ac8890030d17a969e57ba", "patch": "@@ -284,10 +284,13 @@ pub enum CodeGenOptLevel {\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n-    Default = 0,\n-    Static = 1,\n-    PIC = 2,\n-    DynamicNoPic = 3,\n+    Default,\n+    Static,\n+    PIC,\n+    DynamicNoPic,\n+    ROPI,\n+    RWPI,\n+    ROPI_RWPI,\n }\n \n /// LLVMRustCodeModel"}, {"sha": "3492403a1bf8e545e192c70ab7e526e1108f762d", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4cb396c68088f38e517ac8890030d17a969e57ba", "patch": "@@ -37,11 +37,14 @@ use std::sync::mpsc::channel;\n use std::thread;\n use libc::{c_uint, c_void};\n \n-pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 4] = [\n+pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 7] = [\n     (\"pic\", llvm::RelocMode::PIC),\n     (\"static\", llvm::RelocMode::Static),\n     (\"default\", llvm::RelocMode::Default),\n     (\"dynamic-no-pic\", llvm::RelocMode::DynamicNoPic),\n+    (\"ropi\", llvm::RelocMode::ROPI),\n+    (\"rwpi\", llvm::RelocMode::RWPI),\n+    (\"ropi-rwpi\", llvm::RelocMode::ROPI_RWPI),\n ];\n \n pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = ["}, {"sha": "fdbe4e5f7ad25209f2fa91148181dc30c9f267ee", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4cb396c68088f38e517ac8890030d17a969e57ba/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=4cb396c68088f38e517ac8890030d17a969e57ba", "patch": "@@ -246,6 +246,47 @@ static CodeGenOpt::Level fromRust(LLVMRustCodeGenOptLevel Level) {\n   }\n }\n \n+enum class LLVMRustRelocMode {\n+  Default,\n+  Static,\n+  PIC,\n+  DynamicNoPic,\n+  ROPI,\n+  RWPI,\n+  ROPIRWPI,\n+};\n+\n+#if LLVM_VERSION_LE(3, 8)\n+static Reloc::Model fromRust(LLVMRustRelocMode RustReloc) {\n+#else\n+static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n+#endif\n+  switch (RustReloc) {\n+  case LLVMRustRelocMode::Default:\n+#if LLVM_VERSION_LE(3, 8)\n+    return Reloc::Default;\n+#else\n+    return None;\n+#endif\n+  case LLVMRustRelocMode::Static:\n+    return Reloc::Static;\n+  case LLVMRustRelocMode::PIC:\n+    return Reloc::PIC_;\n+  case LLVMRustRelocMode::DynamicNoPic:\n+    return Reloc::DynamicNoPIC;\n+#if LLVM_VERSION_GE(4, 0)\n+  case LLVMRustRelocMode::ROPI:\n+    return Reloc::ROPI;\n+  case LLVMRustRelocMode::RWPI:\n+    return Reloc::RWPI;\n+  case LLVMRustRelocMode::ROPIRWPI:\n+    return Reloc::ROPI_RWPI;\n+#endif\n+  default:\n+    llvm_unreachable(\"Bad RelocModel.\");\n+  }\n+}\n+\n #if LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n ///\n@@ -297,35 +338,14 @@ extern \"C\" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n \n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n-    LLVMRustCodeModel RustCM, LLVMRelocMode Reloc,\n+    LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n     bool DataSections) {\n \n-#if LLVM_VERSION_LE(3, 8)\n-  Reloc::Model RM;\n-#else\n-  Optional<Reloc::Model> RM;\n-#endif\n   auto CM = fromRust(RustCM);\n   auto OptLevel = fromRust(RustOptLevel);\n-\n-  switch (Reloc) {\n-  case LLVMRelocStatic:\n-    RM = Reloc::Static;\n-    break;\n-  case LLVMRelocPIC:\n-    RM = Reloc::PIC_;\n-    break;\n-  case LLVMRelocDynamicNoPic:\n-    RM = Reloc::DynamicNoPIC;\n-    break;\n-  default:\n-#if LLVM_VERSION_LE(3, 8)\n-    RM = Reloc::Default;\n-#endif\n-    break;\n-  }\n+  auto RM = fromRust(RustReloc);\n \n   std::string Error;\n   Triple Trip(Triple::normalize(TripleStr));"}]}