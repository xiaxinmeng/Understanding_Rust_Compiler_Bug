{"sha": "dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTUwNTFmNWFmNGNlMGEzN2Y1NzdhNTA2MmFjOTUwNWYyZGM2YzU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T08:47:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-23T08:47:16Z"}, "message": "Rustup to rustc 1.37.0-nightly (de02101e6 2019-06-22)", "tree": {"sha": "d7d79ba2a08aff84497eb748c2188806052687c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7d79ba2a08aff84497eb748c2188806052687c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "html_url": "https://github.com/rust-lang/rust/commit/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b61f90c715b264abd5f2c22506a3906360916d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b61f90c715b264abd5f2c22506a3906360916d7", "html_url": "https://github.com/rust-lang/rust/commit/2b61f90c715b264abd5f2c22506a3906360916d7"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "ca28fe2fd7043ebcd843c5dd68d92fb7bfff4492", "filename": "patches/0014-Don-t-use-OS-TLS.patch", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/patches%2F0014-Don-t-use-OS-TLS.patch", "raw_url": "https://github.com/rust-lang/rust/raw/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/patches%2F0014-Don-t-use-OS-TLS.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0014-Don-t-use-OS-TLS.patch?ref=dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "patch": "@@ -1,6 +1,6 @@\n-From 0c7406a33e3a40427760e6955188be193fd568a8 Mon Sep 17 00:00:00 2001\n+From 9e8b8114de61ecdbf39f7582d7a3280ef2bfd339 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Fri, 1 Mar 2019 18:36:22 +0100\n+Date: Sun, 23 Jun 2019 10:37:53 +0200\n Subject: [PATCH] Don't use OS TLS\n \n ---\n@@ -9,13 +9,13 @@ Subject: [PATCH] Don't use OS TLS\n  2 files changed, 2 insertions(+), 3 deletions(-)\n \n diff --git a/src/libstd/thread/local.rs b/src/libstd/thread/local.rs\n-index d1f5373..ce83b3b 100644\n+index 9b355aa..a074aa5 100644\n --- a/src/libstd/thread/local.rs\n +++ b/src/libstd/thread/local.rs\n-@@ -164,10 +164,10 @@ macro_rules! __thread_local_inner {\n-                 &'static $crate::cell::UnsafeCell<\n-                     $crate::option::Option<$t>>>\n-             {\n+@@ -154,10 +154,10 @@ macro_rules! __thread_local_inner {\n+             fn __init() -> $t { $init }\n+ \n+             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n -                #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n                  static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =\n                      $crate::thread::__StaticLocalKeyInner::new();\n@@ -24,24 +24,24 @@ index d1f5373..ce83b3b 100644\n                  #[thread_local]\n                  #[cfg(all(\n                      target_thread_local,\n-@@ -182,6 +182,7 @@ macro_rules! __thread_local_inner {\n+@@ -172,6 +172,7 @@ macro_rules! __thread_local_inner {\n                  ))]\n                  static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                      $crate::thread::__OsLocalKeyInner::new();\n +                */\n  \n-                 __KEY.get()\n+                 __KEY.get(__init)\n              }\n-@@ -308,7 +309,6 @@ impl<T: 'static> LocalKey<T> {\n+@@ -320,7 +321,6 @@ mod lazy {\n  /// On some platforms like wasm32 there's no threads, so no need to generate\n  /// thread locals and we can instead just use plain statics!\n  #[doc(hidden)]\n -#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n  pub mod statik {\n-     use crate::cell::UnsafeCell;\n+     use super::lazy::LazyKeyInner;\n      use crate::fmt;\n diff --git a/src/libstd/thread/mod.rs b/src/libstd/thread/mod.rs\n-index 08f0aa2..eff3126 100644\n+index 35de4f4..f142646 100644\n --- a/src/libstd/thread/mod.rs\n +++ b/src/libstd/thread/mod.rs\n @@ -195,7 +195,6 @@ pub use self::local::{LocalKey, AccessError};\n@@ -53,4 +53,5 @@ index 08f0aa2..eff3126 100644\n  #[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n  #[cfg(target_thread_local)]\n -- \n-2.17.2 (Apple Git-113)\n+2.20.1 (Apple Git-117)\n+"}, {"sha": "72dd65ab3da0c1be01bbbc32228edf0bfed8c7bd", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "patch": "@@ -267,7 +267,7 @@ fn define_all_allocs(\n                 let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n \n                 let alloc = match const_.val {\n-                    ConstValue::ByRef(ptr, alloc) if ptr.offset.bytes() == 0 => alloc,\n+                    ConstValue::ByRef { align: _, offset, alloc } if offset.bytes() == 0 => alloc,\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n@@ -396,12 +396,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         _: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _: Option<MemoryKind<!>>,\n-        _: &(),\n+        _: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<(), ()>>, ()) {\n         (alloc, ())\n     }\n \n-    fn tag_static_base_pointer(_: AllocId, _: &()) -> Self::PointerTag {\n+    fn tag_static_base_pointer(_: AllocId, _: &Memory<'mir, 'tcx, Self>) -> Self::PointerTag {\n         ()\n     }\n "}, {"sha": "24494d0f8d38567a6668965da715c1c898feff84", "filename": "src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd15051f5af4ce0a37f577a5062ac9505f2dc6c5/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=dd15051f5af4ce0a37f577a5062ac9505f2dc6c5", "patch": "@@ -194,6 +194,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         _ if intrinsic.starts_with(\"unchecked_\") || intrinsic == \"exact_div\", (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n+                \"unchecked_sub\" => BinOp::Sub,\n                 \"unchecked_div\" | \"exact_div\" => BinOp::Div,\n                 \"unchecked_rem\" => BinOp::Rem,\n                 \"unchecked_shl\" => BinOp::Shl,"}]}