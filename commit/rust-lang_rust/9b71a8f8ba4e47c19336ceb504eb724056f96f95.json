{"sha": "9b71a8f8ba4e47c19336ceb504eb724056f96f95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNzFhOGY4YmE0ZTQ3YzE5MzM2Y2ViNTA0ZWI3MjQwNTZmOTZmOTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T12:01:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T12:01:43Z"}, "message": "remove outdated comment", "tree": {"sha": "21a2490e58f7f63f4251ee4994c4001413a3cf34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21a2490e58f7f63f4251ee4994c4001413a3cf34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b71a8f8ba4e47c19336ceb504eb724056f96f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b71a8f8ba4e47c19336ceb504eb724056f96f95", "html_url": "https://github.com/rust-lang/rust/commit/9b71a8f8ba4e47c19336ceb504eb724056f96f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b71a8f8ba4e47c19336ceb504eb724056f96f95/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e7a84354d1c829684dc11c7c4e7a0b5cf6f5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e7a84354d1c829684dc11c7c4e7a0b5cf6f5b6", "html_url": "https://github.com/rust-lang/rust/commit/08e7a84354d1c829684dc11c7c4e7a0b5cf6f5b6"}], "stats": {"total": 2, "additions": 0, "deletions": 2}, "files": [{"sha": "6b8eb3fa77353e6fa17fcfc895dcb1ac1bb3b9b5", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b71a8f8ba4e47c19336ceb504eb724056f96f95/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b71a8f8ba4e47c19336ceb504eb724056f96f95/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=9b71a8f8ba4e47c19336ceb504eb724056f96f95", "patch": "@@ -277,8 +277,6 @@ where\n {\n     /// Take a value, which represents a (thin or fat) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.\n-    /// This does NOT call the \"deref\" machine hook, so it does NOT count as a\n-    /// deref as far as Stacked Borrows is concerned.  Use `deref_operand` for that!\n     pub fn ref_to_mplace(\n         &self,\n         val: ImmTy<'tcx, M::PointerTag>,"}]}