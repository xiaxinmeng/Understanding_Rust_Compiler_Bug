{"sha": "00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "node_id": "C_kwDOAAsO6NoAKDAwZmZmZGRkZDIyY2RkNzk2Y2Y0MjYxY2RiYmY4MzBiZWU3ZTRmN2I", "commit": {"author": {"name": "cuishuang", "email": "imcusg@gmail.com", "date": "2022-03-03T11:47:23Z"}, "committer": {"name": "cuishuang", "email": "imcusg@gmail.com", "date": "2022-03-03T11:47:23Z"}, "message": "all: fix some typos\n\nSigned-off-by: cuishuang <imcusg@gmail.com>", "tree": {"sha": "62760ec1b4d7fdf576a82186ad159c7378a7dd1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62760ec1b4d7fdf576a82186ad159c7378a7dd1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "html_url": "https://github.com/rust-lang/rust/commit/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/comments", "author": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "html_url": "https://github.com/rust-lang/rust/commit/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "08040f481583643dfdc6edd03229d7f690af9d84", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -1060,7 +1060,7 @@ Version 1.52.1 (2021-05-10)\n This release disables incremental compilation, unless the user has explicitly\n opted in via the newly added RUSTC_FORCE_INCREMENTAL=1 environment variable.\n \n-This is due to the widespread, and frequently occuring, breakage encountered by\n+This is due to the widespread, and frequently occurring, breakage encountered by\n Rust users due to newly enabled incremental verification in 1.52.0. Notably,\n Rust users **should** upgrade to 1.52.0 or 1.52.1: the bugs that are detected by\n newly added incremental verification are still present in past stable versions,"}, {"sha": "be3f6a12706f84c16ddafbb580c74a6ac87e0e6a", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -1064,7 +1064,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let val_type = value.get_type();\n         match (type_is_pointer(val_type), type_is_pointer(dest_ty)) {\n             (false, true) => {\n-                // NOTE: Projecting a field of a pointer type will attemp a cast from a signed char to\n+                // NOTE: Projecting a field of a pointer type will attempt a cast from a signed char to\n                 // a pointer, which is not supported by gccjit.\n                 return self.cx.context.new_cast(None, self.inttoptr(value, val_type.make_pointer()), dest_ty);\n             },"}, {"sha": "e9d13a4ebaf8cb775162de4b198f660d5c8214f3", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -369,12 +369,12 @@ pub fn target_cpu(sess: &Session) -> &str {\n /// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n /// `--target` and similar).\n pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<String> {\n-    // Features that come earlier are overriden by conflicting features later in the string.\n+    // Features that come earlier are overridden by conflicting features later in the string.\n     // Typically we'll want more explicit settings to override the implicit ones, so:\n     //\n-    // * Features from -Ctarget-cpu=*; are overriden by [^1]\n-    // * Features implied by --target; are overriden by\n-    // * Features from -Ctarget-feature; are overriden by\n+    // * Features from -Ctarget-cpu=*; are overridden by [^1]\n+    // * Features implied by --target; are overridden by\n+    // * Features from -Ctarget-feature; are overridden by\n     // * function specific features.\n     //\n     // [^1]: target-cpu=native is handled here, other target-cpu values are handled implicitly\n@@ -383,7 +383,7 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n     // FIXME(nagisa): it isn't clear what's the best interaction between features implied by\n     // `-Ctarget-cpu` and `--target` are. On one hand, you'd expect CLI arguments to always\n     // override anything that's implicit, so e.g. when there's no `--target` flag, features implied\n-    // the host target are overriden by `-Ctarget-cpu=*`. On the other hand, what about when both\n+    // the host target are overridden by `-Ctarget-cpu=*`. On the other hand, what about when both\n     // `--target` and `-Ctarget-cpu=*` are specified? Both then imply some target features and both\n     // flags are specified by the user on the CLI. It isn't as clear-cut which order of precedence\n     // should be taken in cases like these."}, {"sha": "37e84046901f695ee1533b906ea63ed225bc736d", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -1,6 +1,6 @@\n // Type Names for Debug Info.\n \n-// Notes on targetting MSVC:\n+// Notes on targeting MSVC:\n // In general, MSVC's debugger attempts to parse all arguments as C++ expressions,\n // even if the argument is explicitly a symbol name.\n // As such, there are many things that cause parsing issues:"}, {"sha": "16870489176d77cb3da5c6081f43ab9cfbdfb7c7", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -535,7 +535,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val =\n                     self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;\n                 // This can still fail:\n-                // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all\n+                // * During ConstProp, with `TooGeneric` or since the `required_consts` were not all\n                 //   checked yet.\n                 // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.\n "}, {"sha": "43c9e9296b90aab2928f7ba275e1d5ef2d6eff12", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -1228,7 +1228,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n ///\n /// A custom rustc driver can skip calling this to set up a custom ICE hook.\n pub fn install_ice_hook() {\n-    // If the user has not explicitly overriden \"RUST_BACKTRACE\", then produce\n+    // If the user has not explicitly overridden \"RUST_BACKTRACE\", then produce\n     // full backtraces. When a compiler ICE happens, we want to gather\n     // as much information as possible to present in the issue opened\n     // by the user. Compiler developers and other rustc users can"}, {"sha": "3b73abaf776c25bbda797300c44dada05266b1cc", "filename": "compiler/rustc_error_codes/src/error_codes/E0772.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -45,7 +45,7 @@ trait object's internal data to be accessed safely from any trait methods. This\n rule also goes for any lifetime any struct made into a trait object may have.\n \n In the implementation for `dyn Person`, the `'2` lifetime representing the\n-internal data was ommitted, meaning that the compiler inferred the lifetime\n+internal data was omitted, meaning that the compiler inferred the lifetime\n `'static`. As a result, the implementation's `is_cool` is inferred by the\n compiler to look like this:\n "}, {"sha": "6844162ca43bb32e98d00b61ac1837727ca96c15", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -233,7 +233,7 @@ pub(super) fn transcribe<'a>(\n                         } else {\n                             // Other variables are emitted into the output stream as groups with\n                             // `Delimiter::None` to maintain parsing priorities.\n-                            // `Interpolated` is currenty used for such groups in rustc parser.\n+                            // `Interpolated` is currently used for such groups in rustc parser.\n                             marker.visit_span(&mut sp);\n                             TokenTree::token(token::Interpolated(nt.clone()), sp)\n                         };"}, {"sha": "0aef5982cff509ccd066b6584fb6b9b071d7a191", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -847,7 +847,7 @@ impl server::Span for Rustc<'_, '_> {\n     /// the `quote` proc-macro. This will save the span of\n     /// \"hello\" into the metadata of `my_proc_macro`. As a result,\n     /// the body of `my_proc_macro` (after expansion) will end\n-    /// up containg a call that looks like this:\n+    /// up containing a call that looks like this:\n     /// `proc_macro::Ident::new(\"hello\", proc_macro::Span::recover_proc_macro_span(0))`\n     ///\n     /// where `0` is the id returned by this function."}, {"sha": "908a936142475bce5cd080b53393c68516b3c292", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -27,7 +27,7 @@ pub enum LoadResult<T> {\n     },\n     /// The file either didn't exist or was produced by an incompatible compiler version.\n     DataOutOfDate,\n-    /// An error occured.\n+    /// An error occurred.\n     Error {\n         #[allow(missing_docs)]\n         message: String,"}, {"sha": "70ea3de5dd49b102ece03ab2c7822482a9c478fa", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -935,7 +935,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n /// performing that replacement, we'll turn all remaining infer type params to use their name from\n /// their definition, and replace all the `[type error]`s back to being infer so they display in\n /// the output as `_`. If we didn't go through `[type error]`, we would either show all type params\n-/// by their name *or* `_`, neither of which is desireable: we want to show all types that we could\n+/// by their name *or* `_`, neither of which is desirable: we want to show all types that we could\n /// infer as `_` to reduce verbosity and avoid telling the user about unnecessary type annotations.\n struct ResolvedTypeParamEraser<'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "4710eae6189a5fc087819f915fef1f9b26636d1a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00fffdddd22cdd796cf4261cdbbf830bee7e4f7b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=00fffdddd22cdd796cf4261cdbbf830bee7e4f7b", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 bug!(\"Node not an impl.\");\n             };\n \n-            // Next, let's figure out the set of trait objects with implict static bounds\n+            // Next, let's figure out the set of trait objects with implicit static bounds\n             let ty = self.tcx().type_of(*impl_def_id);\n             let mut v = super::static_impl_trait::TraitObjectVisitor(FxHashSet::default());\n             v.visit_ty(ty);"}]}