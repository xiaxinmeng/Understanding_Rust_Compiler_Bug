{"sha": "11bdeea76734e1c756246373db23d5db29632ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYmRlZWE3NjczNGUxYzc1NjI0NjM3M2RiMjNkNWRiMjk2MzJjZTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-19T13:11:18Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-19T13:11:18Z"}, "message": "rustdoc: add the ability to run tests with --test.\n\nThis adds the `test_harness` directive that runs a code block using the\ntest runner, to allow for `#[test]` items to be demonstrated and still\ntested (currently they are just stripped and not even compiled, let\nalone run).", "tree": {"sha": "e368926ba64ac1d64a7b56900820283ea007bef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e368926ba64ac1d64a7b56900820283ea007bef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11bdeea76734e1c756246373db23d5db29632ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11bdeea76734e1c756246373db23d5db29632ce8", "html_url": "https://github.com/rust-lang/rust/commit/11bdeea76734e1c756246373db23d5db29632ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11bdeea76734e1c756246373db23d5db29632ce8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17b0421d35af1609184ce83e05b211d779958f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17b0421d35af1609184ce83e05b211d779958f0", "html_url": "https://github.com/rust-lang/rust/commit/a17b0421d35af1609184ce83e05b211d779958f0"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "2287bcabff7625ef60863837170fddec3fa5d745", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11bdeea76734e1c756246373db23d5db29632ce8/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/11bdeea76734e1c756246373db23d5db29632ce8/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=11bdeea76734e1c756246373db23d5db29632ce8", "patch": "@@ -171,6 +171,18 @@ You can specify that the code block should be compiled but not run with the\n ```\n ~~~\n \n+Lastly, you can specify that a code block be compiled as if `--test`\n+were passed to the compiler using the `test_harness` directive.\n+\n+~~~md\n+```test_harness\n+#[test]\n+fn foo() {\n+    fail!(\"oops! (will run & register as failure)\")\n+}\n+```\n+~~~\n+\n Rustdoc also supplies some extra sugar for helping with some tedious\n documentation examples. If a line is prefixed with `# `, then the line\n will not show up in the HTML documentation, but it will be used when"}, {"sha": "ccd11c6761107318318701ee01f0894958ae894a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11bdeea76734e1c756246373db23d5db29632ce8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bdeea76734e1c756246373db23d5db29632ce8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=11bdeea76734e1c756246373db23d5db29632ce8", "patch": "@@ -195,7 +195,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                             stripped_filtered_line(l).unwrap_or(l)\n                         }).collect::<Vec<&str>>().connect(\"\\n\");\n                         let krate = krate.as_ref().map(|s| s.as_slice());\n-                        let test = test::maketest(test.as_slice(), krate, false);\n+                        let test = test::maketest(test.as_slice(), krate, false, false);\n                         s.push_str(format!(\"<span id='rust-example-raw-{}' \\\n                                              class='rusttest'>{}</span>\",\n                                            i, Escape(test.as_slice())).as_slice());\n@@ -328,7 +328,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n                 tests.add_test(text.to_string(),\n                                block_info.should_fail, block_info.no_run,\n-                               block_info.ignore);\n+                               block_info.ignore, block_info.test_harness);\n             })\n         }\n     }\n@@ -372,6 +372,7 @@ struct LangString {\n     no_run: bool,\n     ignore: bool,\n     notrust: bool,\n+    test_harness: bool,\n }\n \n impl LangString {\n@@ -381,6 +382,7 @@ impl LangString {\n             no_run: false,\n             ignore: false,\n             notrust: false,\n+            test_harness: false,\n         }\n     }\n \n@@ -401,6 +403,7 @@ impl LangString {\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = true; },\n                 \"notrust\" => { data.notrust = true; seen_rust_tags = true; },\n                 \"rust\" => { data.notrust = false; seen_rust_tags = true; },\n+                \"test_harness\" => { data.test_harness = true; seen_rust_tags = true; }\n                 _ => { seen_other_tags = true }\n             }\n         }\n@@ -446,24 +449,28 @@ mod tests {\n \n     #[test]\n     fn test_lang_string_parse() {\n-        fn t(s: &str, should_fail: bool, no_run: bool, ignore: bool, notrust: bool) {\n+        fn t(s: &str,\n+             should_fail: bool, no_run: bool, ignore: bool, notrust: bool, test_harness: bool) {\n             assert_eq!(LangString::parse(s), LangString {\n                 should_fail: should_fail,\n                 no_run: no_run,\n                 ignore: ignore,\n                 notrust: notrust,\n+                test_harness: test_harness,\n             })\n         }\n \n-        t(\"\", false,false,false,false);\n-        t(\"rust\", false,false,false,false);\n-        t(\"sh\", false,false,false,true);\n-        t(\"notrust\", false,false,false,true);\n-        t(\"ignore\", false,false,true,false);\n-        t(\"should_fail\", true,false,false,false);\n-        t(\"no_run\", false,true,false,false);\n-        t(\"{.no_run .example}\", false,true,false,false);\n-        t(\"{.sh .should_fail}\", true,false,false,false);\n-        t(\"{.example .rust}\", false,false,false,false);\n+        t(\"\", false,false,false,false,false);\n+        t(\"rust\", false,false,false,false,false);\n+        t(\"sh\", false,false,false,true,false);\n+        t(\"notrust\", false,false,false,true,false);\n+        t(\"ignore\", false,false,true,false,false);\n+        t(\"should_fail\", true,false,false,false,false);\n+        t(\"no_run\", false,true,false,false,false);\n+        t(\"test_harness\", false,false,false,false,true);\n+        t(\"{.no_run .example}\", false,true,false,false,false);\n+        t(\"{.sh .should_fail}\", true,false,false,false,false);\n+        t(\"{.example .rust}\", false,false,false,false,false);\n+        t(\"{.test_harness .rust}\", false,false,false,false,true);\n     }\n }"}, {"sha": "b43af03011c20ec5e700d789a70620f16a7b5a0f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11bdeea76734e1c756246373db23d5db29632ce8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11bdeea76734e1c756246373db23d5db29632ce8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=11bdeea76734e1c756246373db23d5db29632ce8", "patch": "@@ -102,8 +102,10 @@ pub fn run(input: &str,\n }\n \n fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n-           no_run: bool) {\n-    let test = maketest(test, Some(cratename), true);\n+           no_run: bool, as_test_harness: bool) {\n+    // the test harness wants its own `main` & top level functions, so\n+    // never wrap the test in `fn main() { ... }`\n+    let test = maketest(test, Some(cratename), true, as_test_harness);\n     let input = driver::StrInput(test.to_string());\n \n     let sessopts = config::Options {\n@@ -116,6 +118,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n             prefer_dynamic: true,\n             .. config::basic_codegen_options()\n         },\n+        test: as_test_harness,\n         ..config::basic_options().clone()\n     };\n \n@@ -200,7 +203,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, lints: bool) -> String {\n+pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main: bool) -> String {\n     let mut prog = String::new();\n     if lints {\n         prog.push_str(r\"\n@@ -220,7 +223,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool) -> String {\n             None => {}\n         }\n     }\n-    if s.contains(\"fn main\") {\n+    if dont_insert_main || s.contains(\"fn main\") {\n         prog.push_str(s);\n     } else {\n         prog.push_str(\"fn main() {\\n    \");\n@@ -255,7 +258,8 @@ impl Collector {\n         }\n     }\n \n-    pub fn add_test(&mut self, test: String, should_fail: bool, no_run: bool, should_ignore: bool) {\n+    pub fn add_test(&mut self, test: String,\n+                    should_fail: bool, no_run: bool, should_ignore: bool, as_test_harness: bool) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| s.as_slice()).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -277,7 +281,8 @@ impl Collector {\n                         cratename.as_slice(),\n                         libs,\n                         should_fail,\n-                        no_run);\n+                        no_run,\n+                        as_test_harness);\n             }),\n         });\n     }"}]}