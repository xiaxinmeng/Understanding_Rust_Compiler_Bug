{"sha": "c6ad186298f6e556607df32c7e02e91435fb84e7", "node_id": "C_kwDOAAsO6NoAKGM2YWQxODYyOThmNmU1NTY2MDdkZjMyYzdlMDJlOTE0MzVmYjg0ZTc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-20T17:27:39Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-20T17:27:39Z"}, "message": "Use panic_nounwind and panic_cannot_unwind where necessary\n\nThese were either regular unwinding panics or aborts in the past but got\nchanged somewhat recently.", "tree": {"sha": "aa5eb898896ef2e5280f0fd3a3ece663dd28fdae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa5eb898896ef2e5280f0fd3a3ece663dd28fdae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ad186298f6e556607df32c7e02e91435fb84e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ad186298f6e556607df32c7e02e91435fb84e7", "html_url": "https://github.com/rust-lang/rust/commit/c6ad186298f6e556607df32c7e02e91435fb84e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ad186298f6e556607df32c7e02e91435fb84e7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c58be8e518e311d9769c595adad4bd30e65aff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c58be8e518e311d9769c595adad4bd30e65aff6", "html_url": "https://github.com/rust-lang/rust/commit/6c58be8e518e311d9769c595adad4bd30e65aff6"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "53fbab9fe29317048bd29d9b0efed94e3b9232a5", "filename": "src/base.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6ad186298f6e556607df32c7e02e91435fb84e7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ad186298f6e556607df32c7e02e91435fb84e7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c6ad186298f6e556607df32c7e02e91435fb84e7", "patch": "@@ -466,7 +466,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                     *destination,\n                 );\n             }\n-            TerminatorKind::Resume | TerminatorKind::Abort => {\n+            TerminatorKind::Abort => {\n+                codegen_panic_cannot_unwind(fx, source_info);\n+            }\n+            TerminatorKind::Resume => {\n                 // FIXME implement unwinding\n                 fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n             }\n@@ -931,7 +934,28 @@ pub(crate) fn codegen_panic<'tcx>(\n     codegen_panic_inner(fx, rustc_hir::LangItem::Panic, &args, source_info.span);\n }\n \n-pub(crate) fn codegen_panic_inner<'tcx>(\n+pub(crate) fn codegen_panic_nounwind<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    msg_str: &str,\n+    source_info: mir::SourceInfo,\n+) {\n+    let msg_ptr = fx.anonymous_str(msg_str);\n+    let msg_len = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(msg_str.len()).unwrap());\n+    let args = [msg_ptr, msg_len];\n+\n+    codegen_panic_inner(fx, rustc_hir::LangItem::PanicNounwind, &args, source_info.span);\n+}\n+\n+pub(crate) fn codegen_panic_cannot_unwind<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    source_info: mir::SourceInfo,\n+) {\n+    let args = [];\n+\n+    codegen_panic_inner(fx, rustc_hir::LangItem::PanicCannotUnwind, &args, source_info.span);\n+}\n+\n+fn codegen_panic_inner<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     lang_item: rustc_hir::LangItem,\n     args: &[Value],\n@@ -948,11 +972,7 @@ pub(crate) fn codegen_panic_inner<'tcx>(\n \n     fx.lib_call(\n         &*symbol_name,\n-        vec![\n-            AbiParam::new(fx.pointer_type),\n-            AbiParam::new(fx.pointer_type),\n-            AbiParam::new(fx.pointer_type),\n-        ],\n+        args.iter().map(|&arg| AbiParam::new(fx.bcx.func.dfg.value_type(arg))).collect(),\n         vec![],\n         args,\n     );"}, {"sha": "52720daac6ffc673293c18b089290bebbb415798", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6ad186298f6e556607df32c7e02e91435fb84e7/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ad186298f6e556607df32c7e02e91435fb84e7/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c6ad186298f6e556607df32c7e02e91435fb84e7", "patch": "@@ -649,7 +649,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let layout = fx.layout_of(substs.type_at(0));\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n-                    crate::base::codegen_panic(\n+                    crate::base::codegen_panic_nounwind(\n                         fx,\n                         &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n                         source_info,\n@@ -660,7 +660,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             if intrinsic == sym::assert_zero_valid && !fx.tcx.permits_zero_init(layout) {\n                 with_no_trimmed_paths!({\n-                    crate::base::codegen_panic(\n+                    crate::base::codegen_panic_nounwind(\n                         fx,\n                         &format!(\n                             \"attempted to zero-initialize type `{}`, which is invalid\",\n@@ -676,7 +676,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 && !fx.tcx.permits_uninit_init(layout)\n             {\n                 with_no_trimmed_paths!({\n-                    crate::base::codegen_panic(\n+                    crate::base::codegen_panic_nounwind(\n                         fx,\n                         &format!(\n                             \"attempted to leave type `{}` uninitialized, which is invalid\","}]}