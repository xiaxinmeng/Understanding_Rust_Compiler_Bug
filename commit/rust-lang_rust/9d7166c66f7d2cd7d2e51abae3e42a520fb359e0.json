{"sha": "9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "node_id": "C_kwDOAAsO6NoAKDlkNzE2NmM2NmY3ZDJjZDdkMmU1MWFiYWUzZTQyYTUyMGZiMzU5ZTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-07T17:39:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T17:39:02Z"}, "message": "Rollup merge of #93827 - eholk:stabilize-const_fn-features, r=wesleywiser\n\nStabilize const_fn_fn_ptr_basics, const_fn_trait_bound, and const_impl_trait\n\n# Stabilization Report\n\nThis PR serves as a request for stabilization for three const evaluation features:\n\n1. `const_fn_fn_ptr_basics`\n2. `const_fn_trait_bound`\n3. `const_impl_trait`\n\nThese are being stabilized together because they are relatively minor and related updates to existing functionality.\n\n## `const_fn_fn_ptr_basics`\n\nAllows creating, passing, and casting function pointers in a `const fn`.\n\nThe following is an example of what is now allowed:\n\n```rust\nconst fn get_function() -> fn() {\n    fn foo() {\n        println!(\"Hello, World!\");\n    }\n\n    foo\n}\n```\n\nCasts between function pointer types are allowed, as well as transmuting from integers:\n\n```rust\nconst fn get_function() -> fn() {\n    unsafe {\n        std::mem::transmute(0x1234usize)\n    }\n}\n```\n\nHowever, casting from a function pointer to an integer is not allowed:\n\n```rust\nconst fn fn_to_usize(f: fn()) -> usize {\n    f as usize  //~ pointers cannot be cast to integers during const eval\n}\n```\n\nCalling function pointers is also not allowed.\n\n```rust\nconst fn call_fn_ptr(f: fn()) {\n    f() //~ function pointers are not allowed in const fn\n}\n```\n\n### Test Coverage\n\nThe following tests include code that exercises this feature:\n\n- `src/test/ui/consts/issue-37550.rs`\n- `src/test/ui/consts/issue-46553.rs`\n- `src/test/ui/consts/issue-56164.rs`\n- `src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs`\n- `src/test/ui/consts/min_const_fn/cast_fn.rs`\n- `src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs`\n\n## `const_fn_trait_bound`\n\nAllows trait bounds in `const fn`. Additionally, this feature allows creating and passing `dyn Trait` objects.\n\nExamples such as the following are allowed by this feature:\n\n```rust\nconst fn do_thing<T: Foo>(_x: &T) {\n    // ...\n}\n```\n\nPreviously only `Sized` was allowed as a trait bound.\n\nThere is no way to call methods from the trait because trait methods cannot currently be marked as const. Allowing trait bounds in const functions does allow the const function to use the trait's associated types and constants.\n\nThis feature also allowes `dyn Trait` types. These work equivalently to non-const code. Similar to other pointers in const code, the value of a `dyn Trait` pointer cannot be observed.\n\nNote that due to https://github.com/rust-lang/rust/issues/90912, it was already possible to do the example above as follows:\n\n```rust\nconst fn do_thing<T>(_x: &T) where (T,): Foo {\n    // ...\n}\n```\n\n### Test Coverage\n\nThe following tests include code that exercises `const_fn_trait_bound`:\n\n- `src/test/ui/consts/const-fn.rs`\n- `src/test/ui/consts/issue-88071.rs`\n- `src/test/ui/consts/min_const_fn/min_const_fn.rs`\n- `src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs`\n- `src/test/ui/nll/issue-55825-const-fn.rs`\n- Many of the tests in `src/test/ui/rfc-2632-const-trait-impl/` also exercise this feature.\n\n## `const_impl_trait`\n\nAllows argument and return position `impl Trait` in a `const fn`, such as in the following example:\n\n```rust\nconst fn do_thing(x: impl Foo) -> impl Foo {\n    x\n}\n```\n\nSimilar to generic parameters and function pointers, this allows the creation of such opaque types, but not doing anything with them beyond accessing associated types and constants.\n\n### Test Coverage\n\nThe following tests exercise this feature:\n\n- `src/test/ui/type-alias-impl-trait/issue-53096.rs`\n- `src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs`\n\n## Documentation\n\nThese features are documented along with the other const evaluation features in the Rust Reference at https://doc.rust-lang.org/stable/reference/const_eval.html.\n\nThere is a PR that updates this documentation to reflect the capabilities enabled by these features at https://github.com/rust-lang/reference/pull/1166.\n\nTracking issues: #57563, #63997, #93706", "tree": {"sha": "290d1ac67c0d96521841f49ac98ce7d15366dd47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290d1ac67c0d96521841f49ac98ce7d15366dd47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJkM3CRBK7hj4Ov3rIwAA8UcIAEyrYIit74wXh0Zy9bhSDCnK\n57q32wtcQmbPoSFV/3AdZ/D9FMDrai2MklI2t6JysfBTdshh9bEVXWj7C9+xPRf7\nBBykbxVhAir/rUNovMoZwTfcjij+MNsy+3Pf2BynYurpltuDPCe9ev6lwiueslat\nZeYL0qCOwMmNyTmztVPQLcLXze1QuLs766X1/6pjaizCYNUShPvWgnpig0oVH9+6\nNsVK3aBiyhN8ibgLJkSOlxf1LaWuIh8ptCrTMsFgEG5Iuxt8oH/8AzLwo2290njI\nPexfZcF9UTiXTSrFem4JRire8sRrgmtG8mzmoP7Yt2CNGlyBZTMwV9WDSUDrVUU=\n=Viop\n-----END PGP SIGNATURE-----\n", "payload": "tree 290d1ac67c0d96521841f49ac98ce7d15366dd47\nparent 1ca8d0bf8c154b0f602fadac8c38f14df5dea77a\nparent bb6bcaa1deaa0102ffb9fd23e27f427939de43a1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646674742 +0100\ncommitter GitHub <noreply@github.com> 1646674742 +0100\n\nRollup merge of #93827 - eholk:stabilize-const_fn-features, r=wesleywiser\n\nStabilize const_fn_fn_ptr_basics, const_fn_trait_bound, and const_impl_trait\n\n# Stabilization Report\n\nThis PR serves as a request for stabilization for three const evaluation features:\n\n1. `const_fn_fn_ptr_basics`\n2. `const_fn_trait_bound`\n3. `const_impl_trait`\n\nThese are being stabilized together because they are relatively minor and related updates to existing functionality.\n\n## `const_fn_fn_ptr_basics`\n\nAllows creating, passing, and casting function pointers in a `const fn`.\n\nThe following is an example of what is now allowed:\n\n```rust\nconst fn get_function() -> fn() {\n    fn foo() {\n        println!(\"Hello, World!\");\n    }\n\n    foo\n}\n```\n\nCasts between function pointer types are allowed, as well as transmuting from integers:\n\n```rust\nconst fn get_function() -> fn() {\n    unsafe {\n        std::mem::transmute(0x1234usize)\n    }\n}\n```\n\nHowever, casting from a function pointer to an integer is not allowed:\n\n```rust\nconst fn fn_to_usize(f: fn()) -> usize {\n    f as usize  //~ pointers cannot be cast to integers during const eval\n}\n```\n\nCalling function pointers is also not allowed.\n\n```rust\nconst fn call_fn_ptr(f: fn()) {\n    f() //~ function pointers are not allowed in const fn\n}\n```\n\n### Test Coverage\n\nThe following tests include code that exercises this feature:\n\n- `src/test/ui/consts/issue-37550.rs`\n- `src/test/ui/consts/issue-46553.rs`\n- `src/test/ui/consts/issue-56164.rs`\n- `src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs`\n- `src/test/ui/consts/min_const_fn/cast_fn.rs`\n- `src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs`\n\n## `const_fn_trait_bound`\n\nAllows trait bounds in `const fn`. Additionally, this feature allows creating and passing `dyn Trait` objects.\n\nExamples such as the following are allowed by this feature:\n\n```rust\nconst fn do_thing<T: Foo>(_x: &T) {\n    // ...\n}\n```\n\nPreviously only `Sized` was allowed as a trait bound.\n\nThere is no way to call methods from the trait because trait methods cannot currently be marked as const. Allowing trait bounds in const functions does allow the const function to use the trait's associated types and constants.\n\nThis feature also allowes `dyn Trait` types. These work equivalently to non-const code. Similar to other pointers in const code, the value of a `dyn Trait` pointer cannot be observed.\n\nNote that due to https://github.com/rust-lang/rust/issues/90912, it was already possible to do the example above as follows:\n\n```rust\nconst fn do_thing<T>(_x: &T) where (T,): Foo {\n    // ...\n}\n```\n\n### Test Coverage\n\nThe following tests include code that exercises `const_fn_trait_bound`:\n\n- `src/test/ui/consts/const-fn.rs`\n- `src/test/ui/consts/issue-88071.rs`\n- `src/test/ui/consts/min_const_fn/min_const_fn.rs`\n- `src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs`\n- `src/test/ui/nll/issue-55825-const-fn.rs`\n- Many of the tests in `src/test/ui/rfc-2632-const-trait-impl/` also exercise this feature.\n\n## `const_impl_trait`\n\nAllows argument and return position `impl Trait` in a `const fn`, such as in the following example:\n\n```rust\nconst fn do_thing(x: impl Foo) -> impl Foo {\n    x\n}\n```\n\nSimilar to generic parameters and function pointers, this allows the creation of such opaque types, but not doing anything with them beyond accessing associated types and constants.\n\n### Test Coverage\n\nThe following tests exercise this feature:\n\n- `src/test/ui/type-alias-impl-trait/issue-53096.rs`\n- `src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs`\n\n## Documentation\n\nThese features are documented along with the other const evaluation features in the Rust Reference at https://doc.rust-lang.org/stable/reference/const_eval.html.\n\nThere is a PR that updates this documentation to reflect the capabilities enabled by these features at https://github.com/rust-lang/reference/pull/1166.\n\nTracking issues: #57563, #63997, #93706\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "html_url": "https://github.com/rust-lang/rust/commit/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "html_url": "https://github.com/rust-lang/rust/commit/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a"}, {"sha": "bb6bcaa1deaa0102ffb9fd23e27f427939de43a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6bcaa1deaa0102ffb9fd23e27f427939de43a1", "html_url": "https://github.com/rust-lang/rust/commit/bb6bcaa1deaa0102ffb9fd23e27f427939de43a1"}], "stats": {"total": 1156, "additions": 155, "deletions": 1001}, "files": [{"sha": "7dc279cc840fba930b174c3e11b720e82c91d9d8", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -230,8 +230,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                 }\n             }\n \n-            self.check_item_predicates();\n-\n             for (idx, local) in body.local_decls.iter_enumerated() {\n                 // Handle the return place below.\n                 if idx == RETURN_PLACE || local.internal {\n@@ -358,83 +356,11 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n             match *ty.kind() {\n                 ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef(kind)),\n-                ty::Opaque(..) => self.check_op(ops::ty::ImplTrait),\n-                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr(kind)),\n-\n-                ty::Dynamic(preds, _) => {\n-                    for pred in preds.iter() {\n-                        match pred.skip_binder() {\n-                            ty::ExistentialPredicate::AutoTrait(_)\n-                            | ty::ExistentialPredicate::Projection(_) => {\n-                                self.check_op(ops::ty::DynTrait(kind))\n-                            }\n-                            ty::ExistentialPredicate::Trait(trait_ref) => {\n-                                if Some(trait_ref.def_id) != self.tcx.lang_items().sized_trait() {\n-                                    self.check_op(ops::ty::DynTrait(kind))\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n                 _ => {}\n             }\n         }\n     }\n \n-    fn check_item_predicates(&mut self) {\n-        let ConstCx { tcx, .. } = *self.ccx;\n-\n-        let mut current = self.def_id().to_def_id();\n-        loop {\n-            let predicates = tcx.predicates_of(current);\n-            for (predicate, _) in predicates.predicates {\n-                match predicate.kind().skip_binder() {\n-                    ty::PredicateKind::RegionOutlives(_)\n-                    | ty::PredicateKind::TypeOutlives(_)\n-                    | ty::PredicateKind::WellFormed(_)\n-                    | ty::PredicateKind::Projection(_)\n-                    | ty::PredicateKind::ConstEvaluatable(..)\n-                    | ty::PredicateKind::ConstEquate(..)\n-                    | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                    ty::PredicateKind::ObjectSafe(_) => {\n-                        bug!(\"object safe predicate on function: {:#?}\", predicate)\n-                    }\n-                    ty::PredicateKind::ClosureKind(..) => {\n-                        bug!(\"closure kind predicate on function: {:#?}\", predicate)\n-                    }\n-                    ty::PredicateKind::Subtype(_) | ty::PredicateKind::Coerce(_) => {\n-                        bug!(\"subtype/coerce predicate on function: {:#?}\", predicate)\n-                    }\n-                    ty::PredicateKind::Trait(pred) => {\n-                        if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                            continue;\n-                        }\n-                        match pred.self_ty().kind() {\n-                            ty::Param(p) => {\n-                                let generics = tcx.generics_of(current);\n-                                let def = generics.type_param(p, tcx);\n-                                let span = tcx.def_span(def.def_id);\n-\n-                                // These are part of the function signature, so treat them like\n-                                // arguments when determining importance.\n-                                let kind = LocalKind::Arg;\n-\n-                                self.check_op_spanned(ops::ty::TraitBound(kind), span);\n-                            }\n-                            // other kinds of bounds are either tautologies\n-                            // or cause errors in other passes\n-                            _ => continue,\n-                        }\n-                    }\n-                }\n-            }\n-            match predicates.parent {\n-                Some(parent) => current = parent,\n-                None => break,\n-            }\n-        }\n-    }\n-\n     fn check_mut_borrow(&mut self, local: Local, kind: hir::BorrowKind) {\n         match self.const_kind() {\n             // In a const fn all borrows are transient or point to the places given via\n@@ -613,7 +539,9 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 ),\n                 _,\n                 _,\n-            ) => self.check_op(ops::FnPtrCast),\n+            ) => {\n+                // Nothing to do here. Function pointer casts are allowed now.\n+            }\n \n             Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n                 // Nothing to check here (`check_local_or_return_ty` ensures no trait objects occur"}, {"sha": "ba248a3b6cbe59e286d9b84a1e21770f6c962c41", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 188, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -355,31 +355,6 @@ impl<'tcx> NonConstOp<'tcx> for FnCallUnstable {\n     }\n }\n \n-#[derive(Debug)]\n-pub struct FnPtrCast;\n-impl<'tcx> NonConstOp<'tcx> for FnPtrCast {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_fn_ptr_basics)\n-        }\n-    }\n-\n-    fn build_error(\n-        &self,\n-        ccx: &ConstCx<'_, 'tcx>,\n-        span: Span,\n-    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_fn_ptr_basics,\n-            span,\n-            &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct Generator(pub hir::GeneratorKind);\n impl<'tcx> NonConstOp<'tcx> for Generator {\n@@ -820,167 +795,4 @@ pub mod ty {\n             )\n         }\n     }\n-\n-    #[derive(Debug)]\n-    pub struct FnPtr(pub mir::LocalKind);\n-    impl<'tcx> NonConstOp<'tcx> for FnPtr {\n-        fn importance(&self) -> DiagnosticImportance {\n-            match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n-                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n-                    DiagnosticImportance::Primary\n-                }\n-            }\n-        }\n-\n-        fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-            if ccx.const_kind() != hir::ConstContext::ConstFn {\n-                Status::Allowed\n-            } else {\n-                Status::Unstable(sym::const_fn_fn_ptr_basics)\n-            }\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_fn_fn_ptr_basics,\n-                span,\n-                &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n-            )\n-        }\n-    }\n-\n-    #[derive(Debug)]\n-    pub struct ImplTrait;\n-    impl<'tcx> NonConstOp<'tcx> for ImplTrait {\n-        fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n-            Status::Unstable(sym::const_impl_trait)\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_impl_trait,\n-                span,\n-                &format!(\"`impl Trait` is not allowed in {}s\", ccx.const_kind()),\n-            )\n-        }\n-    }\n-\n-    #[derive(Debug)]\n-    pub struct TraitBound(pub mir::LocalKind);\n-    impl<'tcx> NonConstOp<'tcx> for TraitBound {\n-        fn importance(&self) -> DiagnosticImportance {\n-            match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n-                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n-                    DiagnosticImportance::Primary\n-                }\n-            }\n-        }\n-\n-        fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-            if ccx.const_kind() != hir::ConstContext::ConstFn {\n-                Status::Allowed\n-            } else {\n-                Status::Unstable(sym::const_fn_trait_bound)\n-            }\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            let mut err = feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_fn_trait_bound,\n-                span,\n-                \"trait bounds other than `Sized` on const fn parameters are unstable\",\n-            );\n-\n-            match ccx.fn_sig() {\n-                Some(fn_sig) if !fn_sig.span.contains(span) => {\n-                    err.span_label(fn_sig.span, \"function declared as const here\");\n-                }\n-                _ => {}\n-            }\n-\n-            err\n-        }\n-    }\n-\n-    #[derive(Debug)]\n-    pub struct DynTrait(pub mir::LocalKind);\n-    impl<'tcx> NonConstOp<'tcx> for DynTrait {\n-        fn importance(&self) -> DiagnosticImportance {\n-            match self.0 {\n-                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n-                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n-                    DiagnosticImportance::Primary\n-                }\n-            }\n-        }\n-\n-        fn status_in_item(&self, ccx: &ConstCx<'_, 'tcx>) -> Status {\n-            if ccx.const_kind() != hir::ConstContext::ConstFn {\n-                Status::Allowed\n-            } else {\n-                Status::Unstable(sym::const_fn_trait_bound)\n-            }\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            let mut err = feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_fn_trait_bound,\n-                span,\n-                \"trait objects in const fn are unstable\",\n-            );\n-\n-            match ccx.fn_sig() {\n-                Some(fn_sig) if !fn_sig.span.contains(span) => {\n-                    err.span_label(fn_sig.span, \"function declared as const here\");\n-                }\n-                _ => {}\n-            }\n-\n-            err\n-        }\n-    }\n-\n-    /// A trait bound with the `?const Trait` opt-out\n-    #[derive(Debug)]\n-    pub struct TraitBoundNotConst;\n-    impl<'tcx> NonConstOp<'tcx> for TraitBoundNotConst {\n-        fn status_in_item(&self, _: &ConstCx<'_, 'tcx>) -> Status {\n-            Status::Unstable(sym::const_trait_bound_opt_out)\n-        }\n-\n-        fn build_error(\n-            &self,\n-            ccx: &ConstCx<'_, 'tcx>,\n-            span: Span,\n-        ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-            feature_err(\n-                &ccx.tcx.sess.parse_sess,\n-                sym::const_trait_bound_opt_out,\n-                span,\n-                \"`?const Trait` syntax is unstable\",\n-            )\n-        }\n-    }\n }"}, {"sha": "fc2ac75d609678d9587289261bf6b3fa329b9e9b", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -86,6 +86,10 @@ declare_features! (\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n     /// Allows calling constructor functions in `const fn`.\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n+    /// Allows using and casting function pointers in a `const fn`.\n+    (accepted, const_fn_fn_ptr_basics, \"1.61.0\", Some(57563), None),\n+    /// Allows trait bounds in `const fn`.\n+    (accepted, const_fn_trait_bound, \"1.61.0\", Some(93706), None),\n     /// Allows calling `transmute` in const fn\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n     /// Allows accessing fields of unions inside `const` functions.\n@@ -96,6 +100,8 @@ declare_features! (\n     (accepted, const_generics_defaults, \"1.59.0\", Some(44580), None),\n     /// Allows the use of `if` and `match` in constants.\n     (accepted, const_if_match, \"1.46.0\", Some(49146), None),\n+    /// Allows argument and return position `impl Trait` in a `const fn`.\n+    (accepted, const_impl_trait, \"1.61.0\", Some(77463), None),\n     /// Allows indexing into constant arrays.\n     (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n     /// Allows let bindings, assignments and destructuring in `const` functions and constants."}, {"sha": "a69d28b184aed8b1ee5102286fc8ebd78ae2bff5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -338,14 +338,8 @@ declare_features! (\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n-    /// Allows using and casting function pointers in a `const fn`.\n-    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n-    /// Allows trait bounds in `const fn`.\n-    (active, const_fn_trait_bound, \"1.53.0\", Some(93706), None),\n     /// Allows `for _ in _` loops in const contexts.\n     (active, const_for, \"1.56.0\", Some(87575), None),\n-    /// Allows argument and return position `impl Trait` in a `const fn`.\n-    (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n     /// Allows using `&mut` in constant functions.\n     (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n     /// Be more precise when looking for live drops in a const context."}, {"sha": "0a180b83355e0d7c8f8a843c4504dd04c6b527f2", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -140,7 +140,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n-#![feature(const_fn_trait_bound)]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_mut_refs)]\n #![feature(const_ptr_write)]\n #![feature(const_precise_live_drops)]"}, {"sha": "f436afbee448e4cb375ec379621c130fb9b8e7c0", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -158,9 +158,9 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_fn_floating_point_arithmetic)]\n-#![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_fn_trait_bound)]\n-#![feature(const_impl_trait)]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n+#![cfg_attr(bootstrap, feature(const_impl_trait))]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_refs_to_cell)]"}, {"sha": "31900912df4683a1dec2a7e61b5d63d43d8bd85f", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -20,8 +20,8 @@\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(nll)]\n #![feature(staged_api)]\n-#![feature(const_fn_trait_bound)]\n-#![feature(const_fn_fn_ptr_basics)]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "5b02e711aab2d8243ca5f70c532794808152b528", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -242,8 +242,8 @@\n #![feature(char_internals)]\n #![feature(concat_bytes)]\n #![feature(concat_idents)]\n-#![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_fn_trait_bound)]\n+#![cfg_attr(bootstrap, feature(const_fn_fn_ptr_basics))]\n+#![cfg_attr(bootstrap, feature(const_fn_trait_bound))]\n #![feature(const_format_args)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]"}, {"sha": "632f8dc3ad6f5dfe7c6dfe9a5a84b8e503a3c593", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n // Regression test related to issue 88434\n \n const _CONST: &() = &f(&|_| {});"}, {"sha": "d9635e1ee464ce514a16bd858292bcae3311dcc9", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,14 +1,14 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-minimal-example.rs:10:5\n+  --> $DIR/issue-88434-minimal-example.rs:9:5\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:4:22\n+   |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:4:25: 4:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:9:5\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:31]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f0a6dcd4eb3b885a0b4eee555690ae1514590204", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n // Regression test for issue 88434\n \n const _CONST: &[u8] = &f(&[], |_| {});"}, {"sha": "44e244ae9cc3f9463736309c86628794d8eecbfb", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,14 +1,14 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n+  --> $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:4:24\n+   |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n-   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:4:31: 4:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:9:5\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:37]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e86ffbf10757e6154f9326c5cfba2aee8cf706e1", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-85848.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn_trait_bound, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait _Contains<T> {"}, {"sha": "ff141d328e6272b78a41cc26b65c900cf8cf931f", "filename": "src/test/ui/const-generics/issues/issue-79674.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn_trait_bound, generic_const_exprs)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait MiniTypeId {"}, {"sha": "88cea60e1b89e133344e14745939745f437166a0", "filename": "src/test/ui/consts/auxiliary/const_fn_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fconst_fn_lib.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,6 +1,5 @@\n // Crate that exports a const fn. Used for testing cross-crate.\n \n-#![feature(const_fn_fn_ptr_basics)]\n #![crate_type=\"rlib\"]\n \n pub const fn foo() -> usize { 22 }"}, {"sha": "1ccd0ee937067755115a138694e96246ff4ba31d", "filename": "src/test/ui/consts/const-block-const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-const-bound.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-#![feature(const_fn_trait_bound, const_trait_impl, inline_const, negative_impls)]\n+#![feature(const_trait_impl, inline_const, negative_impls)]\n \n const fn f<T: ~const Drop>(x: T) {}\n "}, {"sha": "ca1585f883759914e1eaed0887a109364d94c9b3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -10,23 +10,11 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr.rs:18:14\n-   |\n-LL | const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n-   |              ^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr.rs:19:5\n-   |\n-LL |     x(y)\n-   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:19:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n-error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n-\n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n "}, {"sha": "c17166263ba09ddaa34f9de7f07f7e8dc8940bba", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -12,16 +12,6 @@ LL |     assert_eq!(Z, 4);\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr_fail2.rs:11:14\n-   |\n-LL | const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n-   |              ^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr_fail2.rs:12:5\n-   |\n-LL |     x(y)\n-   |     ^\n help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr_fail2.rs:12:5\n    |"}, {"sha": "917777a32fff3118a842763679d5abe2f2b49581", "filename": "src/test/ui/consts/const-eval/issue-49296.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,5 @@\n // issue-49296: Unsafe shenigans in constants can result in missing errors\n \n-#![feature(const_fn_trait_bound)]\n-\n use std::mem::transmute;\n \n const fn wat(x: u64) -> &'static u64 {"}, {"sha": "1864a284579109c3b4a6960414e7ae97f550fad4", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-49296.rs:11:16\n+  --> $DIR/issue-49296.rs:9:16\n    |\n LL | const X: u64 = *wat(42);\n    |                ^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed"}, {"sha": "abd1d32abe28904fa78350c91b133d828e9828c5", "filename": "src/test/ui/consts/const-eval/issue-70804-fn-subtyping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-70804-fn-subtyping.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(const_fn_fn_ptr_basics)]\n \n const fn nested(x: (for<'a> fn(&'a ()), String)) -> (fn(&'static ()), String) {\n     x"}, {"sha": "c7078e46fa64fc21d694d602ad988df91cc790c0", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -2,8 +2,6 @@\n \n const extern \"C\" fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n-//~^ ERROR function pointer\n-//~| ERROR function pointer cast\n const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "4bab466fb95a7e7b5892a4884a4cede9345c5256", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,23 +1,5 @@\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/const-extern-fn-min-const-fn.rs:4:41\n-   |\n-LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n-   |                                         ^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/const-extern-fn-min-const-fn.rs:4:48\n-   |\n-LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n-   |                                                ^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n error[E0658]: floating point arithmetic is not allowed in constant functions\n-  --> $DIR/const-extern-fn-min-const-fn.rs:7:42\n+  --> $DIR/const-extern-fn-min-const-fn.rs:5:42\n    |\n LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n    |                                          ^^^^^^^^^\n@@ -26,14 +8,14 @@ LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n error: pointers cannot be cast to integers during const eval\n-  --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n+  --> $DIR/const-extern-fn-min-const-fn.rs:7:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n    = note: at compile-time, pointers do not have an integer value\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "59680e6e4a8e370ff23fa866a6306d85ce9fb81c", "filename": "src/test/ui/consts/const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -4,7 +4,6 @@\n // A very basic test of const fn functionality.\n \n #![feature(const_indexing)]\n-#![feature(const_fn_trait_bound)]\n \n const fn add(x: u32, y: u32) -> u32 {\n     x + y"}, {"sha": "ded05cb17c51349cd023c3542c4fb2ecd4a2ae54", "filename": "src/test/ui/consts/const_fn_trait_bound.gated.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.gated.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/const_fn_trait_bound.rs:17:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "19c08b621442522b7d5ef316655d5476432312f5", "filename": "src/test/ui/consts/const_fn_trait_bound.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,17 +0,0 @@\n-// gate-test-const_fn_trait_bound\n-\n-// revisions: stock gated\n-\n-#![feature(rustc_attrs)]\n-#![cfg_attr(gated, feature(const_fn_trait_bound))]\n-\n-const fn test1<T: std::ops::Add>() {}\n-//[stock]~^ trait bounds\n-const fn test2(_x: &dyn Send) {}\n-//[stock]~^ trait objects in const fn are unstable\n-const fn test3() -> &'static dyn Send { loop {} }\n-//[stock]~^ trait objects in const fn are unstable\n-\n-\n-#[rustc_error]\n-fn main() {} //[gated]~ fatal error triggered by #[rustc_error]"}, {"sha": "7d9e18cb341f38330e3e99e141386cf3fdeb935e", "filename": "src/test/ui/consts/const_fn_trait_bound.stock.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/const_fn_trait_bound.rs:8:16\n-   |\n-LL | const fn test1<T: std::ops::Add>() {}\n-   |                ^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/const_fn_trait_bound.rs:10:16\n-   |\n-LL | const fn test2(_x: &dyn Send) {}\n-   |                ^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/const_fn_trait_bound.rs:12:21\n-   |\n-LL | const fn test3() -> &'static dyn Send { loop {} }\n-   |                     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4d00ac7fd0d59d23c256bbfd98a3ba9881f38bb9", "filename": "src/test/ui/consts/issue-37550-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,6 +1,8 @@\n+// check-pass\n+\n const fn x() {\n     let t = true;\n-    let x = || t; //~ ERROR function pointer\n+    let x = || t;\n }\n \n fn main() {}"}, {"sha": "f66d706787039034fbbadb98f9f92c2b7c31095f", "filename": "src/test/ui/consts/issue-37550-1.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-37550-1.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/issue-37550-1.rs:3:9\n-   |\n-LL |     let x = || t;\n-   |         ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "724eb28291ebc82b9f5ae650379a52e65c953eda", "filename": "src/test/ui/consts/issue-37550.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-37550.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n #![allow(unused_variables)]\n \n-#![feature(const_fn_fn_ptr_basics)]\n-\n const fn x() {\n     let t = true;\n     let x = || t;"}, {"sha": "9438df1937bddecc20d7ac7edecb8a4867787205", "filename": "src/test/ui/consts/issue-46553.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-46553.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_fn_fn_ptr_basics)]\n #![deny(const_err)]\n \n pub struct Data<T> {"}, {"sha": "22ac75514f62466611582baec0b931ee6bd2c2b9", "filename": "src/test/ui/consts/issue-56164.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn_fn_ptr_basics)]\n-\n const fn foo() { (||{})() }\n //~^ ERROR cannot call non-const closure\n "}, {"sha": "803424eedf32a18ed77393baf85f2db02d08dce7", "filename": "src/test/ui/consts/issue-56164.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-56164.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: cannot call non-const closure in constant functions\n-  --> $DIR/issue-56164.rs:3:18\n+  --> $DIR/issue-56164.rs:1:18\n    |\n LL | const fn foo() { (||{})() }\n    |                  ^^^^^^^^\n@@ -8,7 +8,7 @@ LL | const fn foo() { (||{})() }\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error: function pointers are not allowed in const fn\n-  --> $DIR/issue-56164.rs:7:5\n+  --> $DIR/issue-56164.rs:5:5\n    |\n LL |     input()\n    |     ^^^^^^^"}, {"sha": "1c38c43e6c0c51292592f592818580a3af00c81c", "filename": "src/test/ui/consts/issue-88071.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-88071.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -3,7 +3,6 @@\n // regression test for #88071\n \n #![feature(const_btree_new)]\n-#![feature(const_fn_trait_bound)]\n \n use std::collections::BTreeMap;\n "}, {"sha": "a0870ea6de30bf17d6a590dd4b4ec890f8c99be6", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,15 +0,0 @@\n-#![feature(rustc_attrs, staged_api, rustc_allow_const_fn_unstable)]\n-#![feature(const_fn_fn_ptr_basics)]\n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-const fn error(_: fn()) {}\n-//~^ ERROR const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n-const fn compiles(_: fn()) {}\n-\n-fn main() {}"}, {"sha": "3523cab49fd172ff68fb968b680ec047763c3db1", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,17 +0,0 @@\n-error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n-  --> $DIR/allow_const_fn_ptr.rs:7:16\n-   |\n-LL | const fn error(_: fn()) {}\n-   |                ^\n-   |\n-help: if it is not part of the public API, make this function unstably const\n-   |\n-LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n-   |\n-help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n-   |\n-LL | #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n-   |\n-\n-error: aborting due to previous error\n-"}, {"sha": "2dbc424d3ba2d76dc59ca5096239457e54aaa7c2", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,13 +1,11 @@\n // run-pass\n #![feature(rustc_allow_const_fn_unstable)]\n-#![feature(const_fn_fn_ptr_basics)]\n \n #![feature(rustc_attrs, staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "b68f47f5cbcf12dd9082ee2faaa1c8e48eb9d26a", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,17 +0,0 @@\n-fn main() {}\n-\n-const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n-const fn closure() -> fn() { || {} }\n-//~^ ERROR function pointer\n-//~| ERROR function pointer cast\n-const fn closure2() {\n-    (|| {}) as fn();\n-//~^ ERROR function pointer\n-}\n-const fn reify(f: fn()) -> unsafe fn() { f }\n-//~^ ERROR function pointer\n-//~| ERROR function pointer\n-//~| ERROR function pointer cast\n-const fn reify2() { main as unsafe fn(); }\n-//~^ ERROR function pointer\n-//~| ERROR function pointer cast"}, {"sha": "fb962bdf906c38774efe46658a761f5ba59a787b", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,75 +0,0 @@\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:4:23\n-   |\n-LL | const fn closure() -> fn() { || {} }\n-   |                       ^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/cast_errors.rs:4:30\n-   |\n-LL | const fn closure() -> fn() { || {} }\n-   |                              ^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/cast_errors.rs:8:5\n-   |\n-LL |     (|| {}) as fn();\n-   |     ^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:11:16\n-   |\n-LL | const fn reify(f: fn()) -> unsafe fn() { f }\n-   |                ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:11:28\n-   |\n-LL | const fn reify(f: fn()) -> unsafe fn() { f }\n-   |                            ^^^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/cast_errors.rs:11:42\n-   |\n-LL | const fn reify(f: fn()) -> unsafe fn() { f }\n-   |                                          ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/cast_errors.rs:15:21\n-   |\n-LL | const fn reify2() { main as unsafe fn(); }\n-   |                     ^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/cast_errors.rs:15:21\n-   |\n-LL | const fn reify2() { main as unsafe fn(); }\n-   |                     ^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error: aborting due to 8 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "85802a51490f2b8b127dda357efea5d3deb7fd7e", "filename": "src/test/ui/consts/min_const_fn/cast_fn.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+fn main() {}\n+\n+const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+const fn closure() -> fn() { || {} }\n+const fn closure2() {\n+    (|| {}) as fn();\n+}\n+const fn reify(f: fn()) -> unsafe fn() { f }\n+const fn reify2() { main as unsafe fn(); }"}, {"sha": "e07b269c386eabee6dfc0c5e59c673e973e82bd2", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,6 +1,4 @@\n const fn cmp(x: fn(), y: fn()) -> bool {\n-    //~^ ERROR function pointer\n-    //~| ERROR function pointer\n     unsafe { x == y }\n     //~^ ERROR pointers cannot be reliably compared\n }"}, {"sha": "3845068d8411c652cfca567167c846d75d0d4a4d", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,29 +1,10 @@\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cmp_fn_pointers.rs:1:14\n-   |\n-LL | const fn cmp(x: fn(), y: fn()) -> bool {\n-   |              ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cmp_fn_pointers.rs:1:23\n-   |\n-LL | const fn cmp(x: fn(), y: fn()) -> bool {\n-   |                       ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n error: pointers cannot be reliably compared during const eval\n-  --> $DIR/cmp_fn_pointers.rs:4:14\n+  --> $DIR/cmp_fn_pointers.rs:2:14\n    |\n LL |     unsafe { x == y }\n    |              ^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0bafaf2e81f7329fc5370326fa2878d4044a5795", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -80,11 +80,10 @@ const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { core::ptr::null() }\n const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { core::ptr::null_mut() }\n \n-// not ok\n const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n-//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n const fn foo11_2<T: Send>(t: T) -> T { t }\n-//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n+\n+// not ok\n \n static BAR: u32 = 42;\n const fn foo25() -> u32 { BAR } //~ ERROR cannot refer to statics\n@@ -108,41 +107,28 @@ const fn foo37(a: bool, b: bool) -> bool { a || b }\n fn main() {}\n \n impl<T: std::fmt::Debug> Foo<T> {\n-//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n     const fn foo(&self) {}\n }\n \n impl<T: std::fmt::Debug + Sized> Foo<T> {\n-//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n     const fn foo2(&self) {}\n }\n \n impl<T: Sync + Sized> Foo<T> {\n-//~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n     const fn foo3(&self) {}\n }\n \n struct AlanTuring<T>(T);\n const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n-//~^ ERROR trait bounds other than `Sized`\n-//~| ERROR destructor\n+//~^ ERROR destructor\n const fn no_apit(_x: impl std::fmt::Debug) {}\n-//~^ ERROR trait bounds other than `Sized`\n-//~| ERROR destructor\n+//~^ ERROR destructor\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-//~^ ERROR trait objects in const fn are unstable\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-//~^ ERROR trait objects in const fn are unstable\n \n const fn no_unsafe() { unsafe {} }\n \n-const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-//~^ ERROR trait objects in const fn are unstable\n-//~| ERROR trait objects in const fn are unstable\n-//~| ERROR trait objects in const fn are unstable\n+const fn traits_are_ok_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n \n-const fn no_fn_ptrs(_x: fn()) {}\n-//~^ ERROR function pointer\n-const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-//~^ ERROR function pointer\n-//~| ERROR function pointer cast\n+const fn fn_ptrs(_x: fn()) {}\n+const fn fn_ptrs2() -> fn() { fn foo() {} foo }"}, {"sha": "4ad17602c8452031f1ceee3bed7db076d43b063b", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 10, "deletions": 160, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -130,42 +130,24 @@ LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:84:16\n-   |\n-LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n-   |                ^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:86:18\n-   |\n-LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n-   |                  ^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:90:27\n+  --> $DIR/min_const_fn.rs:89:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:91:37\n+  --> $DIR/min_const_fn.rs:90:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error: pointers cannot be cast to integers during const eval\n-  --> $DIR/min_const_fn.rs:92:42\n+  --> $DIR/min_const_fn.rs:91:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -174,7 +156,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: pointers cannot be cast to integers during const eval\n-  --> $DIR/min_const_fn.rs:94:63\n+  --> $DIR/min_const_fn.rs:93:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -183,7 +165,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: pointers cannot be cast to integers during const eval\n-  --> $DIR/min_const_fn.rs:96:42\n+  --> $DIR/min_const_fn.rs:95:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -192,7 +174,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error: pointers cannot be cast to integers during const eval\n-  --> $DIR/min_const_fn.rs:98:63\n+  --> $DIR/min_const_fn.rs:97:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -201,163 +183,31 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = note: avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:101:14\n+  --> $DIR/min_const_fn.rs:100:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:110:6\n-   |\n-LL | impl<T: std::fmt::Debug> Foo<T> {\n-   |      ^\n-LL |\n-LL |     const fn foo(&self) {}\n-   |     ------------------- function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:115:6\n-   |\n-LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n-   |      ^\n-LL |\n-LL |     const fn foo2(&self) {}\n-   |     -------------------- function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:120:6\n-   |\n-LL | impl<T: Sync + Sized> Foo<T> {\n-   |      ^\n-LL |\n-LL |     const fn foo3(&self) {}\n-   |     -------------------- function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:126:34\n-   |\n-LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n-   |                                  ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:126:19\n+  --> $DIR/min_const_fn.rs:122:19\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                   ^^                                     - value is dropped here\n    |                   |\n    |                   constant functions cannot evaluate destructors\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:129:22\n-   |\n-LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n-   |                      ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:129:18\n+  --> $DIR/min_const_fn.rs:124:18\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                  ^^                         - value is dropped here\n    |                  |\n    |                  constant functions cannot evaluate destructors\n \n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn.rs:132:23\n-   |\n-LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-   |                       ^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn.rs:134:32\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn.rs:139:41\n-   |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   | -------------------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn.rs:139:42\n-   |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   | -------------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn.rs:139:42\n-   |\n-LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   | -------------------------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:144:21\n-   |\n-LL | const fn no_fn_ptrs(_x: fn()) {}\n-   |                     ^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:146:27\n-   |\n-LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   |                           ^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:146:46\n-   |\n-LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n-   |                                              ^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error: aborting due to 39 previous errors\n+error: aborting due to 24 previous errors\n \n Some errors have detailed explanations: E0013, E0493, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "36c8880093ec32c2033db11269ecf792293428f7", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n struct HasDyn {\n     field: &'static dyn std::fmt::Debug,\n }\n@@ -7,9 +9,7 @@ struct Hide(HasDyn);\n const fn no_inner_dyn_trait(_x: Hide) {}\n const fn no_inner_dyn_trait2(x: Hide) {\n     x.0.field;\n-//~^ ERROR trait objects in const fn are unstable\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-//~^ ERROR trait objects in const fn are unstable\n \n fn main() {}"}, {"sha": "4c2199101d302318385feb16278201b7722667a8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,25 +0,0 @@\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn_dyn.rs:9:5\n-   |\n-LL | const fn no_inner_dyn_trait2(x: Hide) {\n-   | ------------------------------------- function declared as const here\n-LL |     x.0.field;\n-   |     ^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/min_const_fn_dyn.rs:12:66\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   | -----------------------------------------                        ^^\n-   | |\n-   | function declared as const here\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bc6fe89222bbf4d061464415f185b0393cd8576a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.rs?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,19 +0,0 @@\n-// gate-test-const_fn_fn_ptr_basics\n-\n-struct HasPtr {\n-    field: fn(),\n-}\n-\n-struct Hide(HasPtr);\n-\n-fn field() {}\n-\n-const fn no_inner_dyn_trait(_x: Hide) {}\n-const fn no_inner_dyn_trait2(x: Hide) {\n-    x.0.field;\n-//~^ ERROR function pointer\n-}\n-const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n-//~^ ERROR function pointer\n-\n-fn main() {}"}, {"sha": "8d82674bbf2d9b0adfdb5dab72c99c8bf9350631", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn_fn_ptr.rs:13:5\n-   |\n-LL |     x.0.field;\n-   |     ^^^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error[E0658]: function pointer casts are not allowed in constant functions\n-  --> $DIR/min_const_fn_fn_ptr.rs:16:59\n-   |\n-LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n-   |                                                           ^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e062c9f0aa38c4cc80c0187b22e510edf041027a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.rs?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,10 +0,0 @@\n-// gate-test-const_impl_trait\n-\n-struct AlanTuring<T>(T);\n-const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { //~ `impl Trait`\n-    AlanTuring(0)\n-}\n-\n-const fn no_rpit() -> impl std::fmt::Debug {} //~ `impl Trait`\n-\n-fn main() {}"}, {"sha": "01c797cd96b4db422420dad736e7ec007fadcbd6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_impl_trait.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_impl_trait.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `impl Trait` is not allowed in constant functions\n-  --> $DIR/min_const_fn_impl_trait.rs:4:24\n-   |\n-LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> {\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #77463 <https://github.com/rust-lang/rust/issues/77463> for more information\n-   = help: add `#![feature(const_impl_trait)]` to the crate attributes to enable\n-\n-error[E0658]: `impl Trait` is not allowed in constant functions\n-  --> $DIR/min_const_fn_impl_trait.rs:8:23\n-   |\n-LL | const fn no_rpit() -> impl std::fmt::Debug {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #77463 <https://github.com/rust-lang/rust/issues/77463> for more information\n-   = help: add `#![feature(const_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "aaba19c2c8b0e6b8b014f44c1a10620be26ef4ec", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -12,16 +12,6 @@ LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"\n \n warning: skipping const checks\n    |\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/abi-mismatch.rs:9:23\n-   |\n-LL | const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n-   |                       ^^^^^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/abi-mismatch.rs:10:5\n-   |\n-LL |     my_fn();\n-   |     ^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/abi-mismatch.rs:10:5\n    |"}, {"sha": "16b36c8d56d8d3e1e740e3fe2302d1185ccf9b7b", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -5,7 +5,6 @@\n \n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![feature(staged_api)]\n-#![feature(const_fn_trait_bound)]\n \n enum Opt<T> {\n     Some(T),"}, {"sha": "180f9f10cc6bc656b9f30ae581b57c21634dd882", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: cannot call non-const closure in constant functions\n-  --> $DIR/unstable-const-fn-in-libcore.rs:23:26\n+  --> $DIR/unstable-const-fn-in-libcore.rs:22:26\n    |\n LL |             Opt::None => f(),\n    |                          ^^^\n@@ -11,7 +11,7 @@ LL |     const fn unwrap_or_else<F: FnOnce() -> T + ~const std::ops::FnOnce<()>>\n    |                                              +++++++++++++++++++++++++++++\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:18:53\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:53\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                                     ^ constant functions cannot evaluate destructors\n@@ -20,7 +20,7 @@ LL |     }\n    |     - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/unstable-const-fn-in-libcore.rs:18:47\n+  --> $DIR/unstable-const-fn-in-libcore.rs:17:47\n    |\n LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n    |                                               ^^^^ constant functions cannot evaluate destructors"}, {"sha": "17c4a0496b6d882af86867574e33f5a8b43befbf", "filename": "src/test/ui/nll/issue-55825-const-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,8 +1,10 @@\n // Regression test for issue #55825\n // Tests that we don't emit a spurious warning in NLL mode\n \n+// check-pass\n+\n #![feature(nll)]\n \n-const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() } //~ ERROR const\n+const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n \n fn main() { }"}, {"sha": "c834f8bd9c4f5b545c7e335b38f73c6670c21062", "filename": "src/test/ui/nll/issue-55825-const-fn.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca8d0bf8c154b0f602fadac8c38f14df5dea77a/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr?ref=1ca8d0bf8c154b0f602fadac8c38f14df5dea77a", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: trait objects in const fn are unstable\n-  --> $DIR/issue-55825-const-fn.rs:6:32\n-   |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n-   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "cf8ca57714c29e5b7ee68115a578ae3e32ed8a11", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,27 +1,10 @@\n warning: skipping const checks\n    |\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:9\n-   |\n-LL |     let ptr: fn() -> L = attributed;\n-   |         ^^^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n-   |\n-LL |     ptr()\n-   |     ^^^\n-help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:20:26\n-   |\n-LL |     let ptr: fn() -> L = attributed;\n-   |                          ^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n   --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n    |\n LL |     ptr()\n    |     ^^^^^\n \n-error: `-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature gates, except when testing error paths in the CTFE engine\n-\n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n "}, {"sha": "34934d1e01dbd430c097ad50bce6a212e4fdea86", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fcross-crate.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait MyTrait {"}, {"sha": "89dc47aad3dd7a47f38cf5b32aa9221abaf38b6b", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n trait MyPartialEq {"}, {"sha": "b00ff1f2fac2a0b8872e3a64b901d43a786b6b9b", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -3,7 +3,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n struct S;\n "}, {"sha": "c8ded0fa7ea32a4a6d5715663494d4df111a8683", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n struct S;\n "}, {"sha": "8df68225d44cd34c1b448fbfb39e0ea2c2ec5ff1", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub const fn equals_self<T: PartialEq>(t: &T) -> bool {"}, {"sha": "cf114334cc39187dbbbe1cbc5461cb8fa40bbd55", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: can't compare `T` with `T` in const contexts\n-  --> $DIR/call-generic-method-fail.rs:5:5\n+  --> $DIR/call-generic-method-fail.rs:4:5\n    |\n LL |     *t == *t\n    |     ^^^^^^^^ no implementation for `T == T`\n    |\n note: the trait `PartialEq` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-fail.rs:5:5\n+  --> $DIR/call-generic-method-fail.rs:4:5\n    |\n LL |     *t == *t\n    |     ^^^^^^^^\n \n error[E0015]: cannot call non-const operator in constant functions\n-  --> $DIR/call-generic-method-fail.rs:5:5\n+  --> $DIR/call-generic-method-fail.rs:4:5\n    |\n LL |     *t == *t\n    |     ^^^^^^^^"}, {"sha": "e197c8b73c535e43484fa5da23579abbf7ff225a", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst-bound.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(const_fn_trait_bound)]\n-\n struct S;\n \n impl PartialEq for S {"}, {"sha": "d3e14a53a2fc316e61632ed5cc9365f6995d2e09", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n struct S;\n "}, {"sha": "b0af45acda1edc9a15fbf02bbfd1452ea7ef93c5", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't compare `S` with `S` in const contexts\n-  --> $DIR/call-generic-method-nonconst.rs:19:34\n+  --> $DIR/call-generic-method-nonconst.rs:18:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n    |                      ----------- ^^ no implementation for `S == S`\n@@ -8,12 +8,12 @@ LL | pub const EQ: bool = equals_self(&S);\n    |\n    = help: the trait `~const PartialEq` is not implemented for `S`\n note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-nonconst.rs:19:34\n+  --> $DIR/call-generic-method-nonconst.rs:18:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n    |                                  ^^\n note: required by a bound in `equals_self`\n-  --> $DIR/call-generic-method-nonconst.rs:12:25\n+  --> $DIR/call-generic-method-nonconst.rs:11:25\n    |\n LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`"}, {"sha": "40565d1b76a9c1cfd21fef07e53f18c7eef52073", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -3,7 +3,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n struct S;\n "}, {"sha": "755d853983949fa8bc69b254198338edd7366f5a", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n const fn answer_p1<F>(f: &F) -> u8\n     where"}, {"sha": "3c82fe1ad6c77f589fa5304c53a6f93d592a065d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)] // FIXME is this needed?\n \n trait ConstDefaultFn: Sized {\n     fn b(self);"}, {"sha": "fe788b43a5416b4330279af3a43c805930b8dfa9", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satisfied\n-  --> $DIR/const-default-method-bodies.rs:25:18\n+  --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n    |                  ^^^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n-  --> $DIR/const-default-method-bodies.rs:25:18\n+  --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n    |                  ^^^\n \n error[E0015]: cannot call non-const fn `<NonConstImpl as ConstDefaultFn>::a` in constant functions\n-  --> $DIR/const-default-method-bodies.rs:25:18\n+  --> $DIR/const-default-method-bodies.rs:24:18\n    |\n LL |     NonConstImpl.a();\n    |                  ^^^"}, {"sha": "a1cfee6b6e7827a0af36f3ec6d9f08502835caa8", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-bound.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n #![feature(const_precise_live_drops)]\n \n const fn foo<T, E>(res: Result<T, E>) -> Option<T> where E: ~const Drop {"}, {"sha": "d88bcdc89ad2b617f760178abff15364983a7b90", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied\n-  --> $DIR/const-drop-fail.rs:44:5\n+  --> $DIR/const-drop-fail.rs:43:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -8,7 +8,7 @@ LL |     NonTrivialDrop,\n    |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n    |\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`\n@@ -20,7 +20,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied in `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -29,23 +29,23 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:17:8\n+  --> $DIR/const-drop-fail.rs:16:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Drop` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:5\n+  --> $DIR/const-drop-fail.rs:47:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -54,12 +54,12 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n    |\n note: required because of the requirements on the impl of `~const Drop` for `ConstDropImplWithBounds<NonTrivialDrop>`\n-  --> $DIR/const-drop-fail.rs:29:25\n+  --> $DIR/const-drop-fail.rs:28:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "49968b47dbeb0df4307e0fb94668077c1069bae5", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // revisions: stock precise\n #![feature(const_trait_impl)]\n #![feature(const_mut_refs)]\n-#![feature(const_fn_trait_bound)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n \n use std::marker::PhantomData;"}, {"sha": "d88bcdc89ad2b617f760178abff15364983a7b90", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied\n-  --> $DIR/const-drop-fail.rs:44:5\n+  --> $DIR/const-drop-fail.rs:43:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -8,7 +8,7 @@ LL |     NonTrivialDrop,\n    |     ^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n    |\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`\n@@ -20,7 +20,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: the trait bound `NonTrivialDrop: ~const Drop` is not satisfied in `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -29,23 +29,23 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Drop` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Drop` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:46:5\n+  --> $DIR/const-drop-fail.rs:45:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required because it appears within the type `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:17:8\n+  --> $DIR/const-drop-fail.rs:16:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Drop` is not satisfied\n-  --> $DIR/const-drop-fail.rs:48:5\n+  --> $DIR/const-drop-fail.rs:47:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -54,12 +54,12 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Drop`\n    |\n note: required because of the requirements on the impl of `~const Drop` for `ConstDropImplWithBounds<NonTrivialDrop>`\n-  --> $DIR/const-drop-fail.rs:29:25\n+  --> $DIR/const-drop-fail.rs:28:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+  --> $DIR/const-drop-fail.rs:34:19\n    |\n LL | const fn check<T: ~const Drop>(_: T) {}\n    |                   ^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "20b9d7721472cb4cb29054785fb795f434c9fc24", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // revisions: stock precise\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]\n #![feature(never_type)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]"}, {"sha": "17c88e442961eca6f310c61461181ee428dc5fbe", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n trait Tr {}"}, {"sha": "668e166c29897c2dd47e82b4b49ed6f7de638755", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n    |\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n    |\n LL |         foo::<()>();\n    |               ^^\n note: required by a bound in `foo`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n+  --> $DIR/default-method-body-is-const-body-checking.rs:6:28\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`"}, {"sha": "be2f3f6d6231e74c26c727104185f0bf7243c982", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait Tr {"}, {"sha": "cf357971951df5aeef4d4276a4f19ec31927f513", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n    |\n LL |         ().a()\n    |            ^^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n    |\n LL |         ().a()\n    |            ^^^\n \n error[E0015]: cannot call non-const fn `<() as Tr>::a` in constant functions\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:9:12\n    |\n LL |         ().a()\n    |            ^^^"}, {"sha": "7f6d86d337582fc6c860435eac518717c48336dc", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-with-staged-api.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-with-staged-api.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -7,7 +7,6 @@\n \n #![feature(staged_api)]\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n #![stable(since = \"1\", feature = \"foo\")]\n \n trait Tr {"}, {"sha": "5495b531cff56c85978b8870ee0a4960f1a0afdc", "filename": "src/test/ui/rfc-2632-const-trait-impl/generic-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n use std::marker::PhantomData;\n "}, {"sha": "eba8b665ceb0ec10299f7a9791dcfb84af1173d1", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n trait Tr {\n     fn req(&self);"}, {"sha": "4ec6f929ffcd9a1bd99e6f6d479789bc395afc3e", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-fail.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn-fail.rs:18:1\n+  --> $DIR/impl-with-default-fn-fail.rs:17:1\n    |\n LL | / impl const Tr for S {\n LL | |     fn req(&self) {}\n@@ -9,7 +9,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error: const trait implementations may not use non-const default functions\n-  --> $DIR/impl-with-default-fn-fail.rs:28:1\n+  --> $DIR/impl-with-default-fn-fail.rs:27:1\n    |\n LL | / impl const Tr for u32 {\n LL | |     fn req(&self) {}\n@@ -20,7 +20,7 @@ LL | | }\n    = note: `prov` not implemented\n \n error[E0046]: not all trait items implemented, missing: `req`\n-  --> $DIR/impl-with-default-fn-fail.rs:22:1\n+  --> $DIR/impl-with-default-fn-fail.rs:21:1\n    |\n LL |     fn req(&self);\n    |     -------------- `req` from trait"}, {"sha": "2e4664714a70ab8e74f9c6595488cba1ec276c37", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn-pass.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n trait Tr {\n     fn req(&self);"}, {"sha": "2cef803a90e0764ed7e96596643c7b230e7df38c", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl-const-bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl-const-bounds.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n struct S;\n "}, {"sha": "b132c395ac7b4f208bc6cdfc3a6b468d81f6e1d1", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait A {"}, {"sha": "955923505200a136397ba3a03bcfbde7da7dc3e6", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,17 +1,17 @@\n error[E0277]: the trait bound `T: ~const A` is not satisfied\n-  --> $DIR/issue-88155.rs:9:5\n+  --> $DIR/issue-88155.rs:8:5\n    |\n LL |     T::assoc()\n    |     ^^^^^^^^^^ the trait `~const A` is not implemented for `T`\n    |\n note: the trait `A` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/issue-88155.rs:9:5\n+  --> $DIR/issue-88155.rs:8:5\n    |\n LL |     T::assoc()\n    |     ^^^^^^^^^^\n \n error[E0015]: cannot call non-const fn `<T as A>::assoc` in constant functions\n-  --> $DIR/issue-88155.rs:9:5\n+  --> $DIR/issue-88155.rs:8:5\n    |\n LL |     T::assoc()\n    |     ^^^^^^^^^^"}, {"sha": "da7147acdd7e9afe9b9fe45ac62357f18e56892b", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92111.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92111.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -10,7 +10,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n pub trait Tr {}\n "}, {"sha": "97c27ce1a1cfa05cc1b783d150aa4583aa3238f0", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92230-wf-super-trait-env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -2,7 +2,6 @@\n //\n // check-pass\n \n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n pub trait Super {}"}, {"sha": "defef9e04098e55b43153e1389d4a2418ddd40a7", "filename": "src/test/ui/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n trait Convert<T> {\n     fn to(self) -> T;"}, {"sha": "f4a5d0133ce89666af369f11b9ec9fe4f9d781db", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-default-body-stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(staged_api)]\n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n #![feature(const_t_try)]\n #![feature(const_try)]\n #![feature(try_trait_v2)]"}, {"sha": "e47c5c7bd6665b1168d5a9aab997d3791f7926f5", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-run.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n trait Bar {\n     fn bar() -> u8;"}, {"sha": "acea58eaecb9ae9dc6725144e1b6086c9d5ce83d", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-self-referential.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n \n #![feature(const_trait_impl)]\n-#![feature(const_fn_trait_bound)]\n \n trait Foo {\n     fn bar() where Self: ~const Foo;"}, {"sha": "d37ed3bb8dd9a640ac9907f49e082772f653a9de", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_trait_bound)]\n #![feature(const_trait_impl)]\n \n trait Bar {}"}, {"sha": "d5b2d269730967bdbcef68fce42a968058c8508e", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:14:5\n+  --> $DIR/trait-where-clause.rs:13:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:14:5\n+  --> $DIR/trait-where-clause.rs:13:5\n    |\n LL |     T::b();\n    |     ^^^^\n note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:24\n+  --> $DIR/trait-where-clause.rs:7:24\n    |\n LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n@@ -20,18 +20,18 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:16:5\n+  --> $DIR/trait-where-clause.rs:15:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:16:5\n+  --> $DIR/trait-where-clause.rs:15:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^\n note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:13\n+  --> $DIR/trait-where-clause.rs:8:13\n    |\n LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`\n@@ -41,13 +41,13 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:28:5\n+  --> $DIR/trait-where-clause.rs:27:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:8:24\n+  --> $DIR/trait-where-clause.rs:7:24\n    |\n LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n@@ -57,13 +57,13 @@ LL | fn test3<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:30:5\n+  --> $DIR/trait-where-clause.rs:29:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:13\n+  --> $DIR/trait-where-clause.rs:8:13\n    |\n LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`"}, {"sha": "007dcf3bcb6800d466d3f466909c0a1a7437e7bc", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n+#![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Fn() -> usize;"}, {"sha": "a3f126d56cf204c6cc704a636b389d85d73ef99f", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n+#![feature(generators, generator_trait, rustc_attrs)]\n #![feature(type_alias_impl_trait)]\n \n use std::ops::Generator;"}, {"sha": "219837aa04baba2ff3ac12c8a835792215660ce9", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_impl_trait)]\n #![feature(type_alias_impl_trait)]\n \n type Bar = impl Send;"}, {"sha": "889c4fd4b040556184b8dca4d8019f5486144b22", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:15:9\n+  --> $DIR/structural-match-no-leak.rs:14:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^"}, {"sha": "c9e669cad603a963639d3b22ae96924fffa4c0b5", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_impl_trait)]\n #![feature(type_alias_impl_trait)]\n \n type Foo = impl Send;"}, {"sha": "262fd0726137e63c9547b43ea4977c99070bd147", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -1,5 +1,5 @@\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:16:9\n+  --> $DIR/structural-match.rs:15:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^"}, {"sha": "ecc9acf4445d03681bfc1a0e28ce1257abf99974", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n use clippy_utils::ty::has_drop;\n use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, msrvs, trait_ref_of_method};\n use rustc_hir as hir;\n+use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -131,6 +132,18 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n             FnKind::Closure => return,\n         }\n \n+        // Const fns are not allowed as methods in a trait.\n+        {\n+            let parent = cx.tcx.hir().get_parent_item(hir_id);\n+            if parent != CRATE_DEF_ID {\n+                if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent) {\n+                    if let hir::ItemKind::Trait(..) = &item.kind {\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {"}, {"sha": "891531951c1a03c0f6f5a3947544a04297151fcf", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -32,32 +32,12 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Trait(pred) => {\n-                    if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n-                        continue;\n-                    }\n-                    match pred.self_ty().kind() {\n-                        ty::Param(ref p) => {\n-                            let generics = tcx.generics_of(current);\n-                            let def = generics.type_param(p, tcx);\n-                            let span = tcx.def_span(def.def_id);\n-                            return Err((\n-                                span,\n-                                \"trait bounds other than `Sized` \\\n-                                 on const fn parameters are unstable\"\n-                                    .into(),\n-                            ));\n-                        },\n-                        // other kinds of bounds are either tautologies\n-                        // or cause errors in other passes\n-                        _ => continue,\n-                    }\n-                },\n             }\n         }\n         match predicates.parent {"}, {"sha": "88f6935d224aec502122cc5ebf5e06d8b70a0a7f", "filename": "src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -49,8 +49,6 @@ fn sub(x: u32) -> usize {\n     unsafe { transmute(&x) }\n }\n \n-// NOTE: This is currently not yet allowed to be const\n-// Once implemented, Clippy should be able to suggest this as const, too.\n fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n     t[0]\n }"}, {"sha": "3eb52b6827475d1b52f189cb0f876c68e6dc8191", "filename": "src/tools/clippy/tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d7166c66f7d2cd7d2e51abae3e42a520fb359e0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=9d7166c66f7d2cd7d2e51abae3e42a520fb359e0", "patch": "@@ -58,20 +58,28 @@ LL | | }\n    | |_^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:67:9\n+  --> $DIR/could_be_const.rs:52:1\n+   |\n+LL | / fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n+LL | |     t[0]\n+LL | | }\n+   | |_^\n+\n+error: this could be a `const fn`\n+  --> $DIR/could_be_const.rs:65:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {\n LL | |             B\n LL | |         }\n    | |_________^\n \n error: this could be a `const fn`\n-  --> $DIR/could_be_const.rs:77:5\n+  --> $DIR/could_be_const.rs:75:5\n    |\n LL | /     fn const_fn_stabilized_before_msrv(byte: u8) {\n LL | |         byte.is_ascii_digit();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}