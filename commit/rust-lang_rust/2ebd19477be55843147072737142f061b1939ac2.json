{"sha": "2ebd19477be55843147072737142f061b1939ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYmQxOTQ3N2JlNTU4NDMxNDcwNzI3MzcxNDJmMDYxYjE5MzlhYzI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T18:54:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-24T19:22:52Z"}, "message": "Sanitize use of ids for obj constructors.\n\nTypeck and trans used to, by historical coincidence, use the item_obj\nnode id, which was used to identify the obj type by the rest of the\nsystem, for the constructor function. This is now identified by the\nctor id stored in the tag throughout.", "tree": {"sha": "3e038bff4433cf209a0d7a4b197c6c4ff5d2f06d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e038bff4433cf209a0d7a4b197c6c4ff5d2f06d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ebd19477be55843147072737142f061b1939ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ebd19477be55843147072737142f061b1939ac2", "html_url": "https://github.com/rust-lang/rust/commit/2ebd19477be55843147072737142f061b1939ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ebd19477be55843147072737142f061b1939ac2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9643aedb049a84965ea4ac2be906ff2707d5de10", "url": "https://api.github.com/repos/rust-lang/rust/commits/9643aedb049a84965ea4ac2be906ff2707d5de10", "html_url": "https://github.com/rust-lang/rust/commit/9643aedb049a84965ea4ac2be906ff2707d5de10"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "b9f4ed5c2fbe59b84a14165272d9e659d5382e99", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=2ebd19477be55843147072737142f061b1939ac2", "patch": "@@ -558,7 +558,7 @@ fn encode_info_for_item(@trans::crate_ctxt cx, &ebml::writer ebml_w,\n             encode_def_id(ebml_w, local_def(ctor_id));\n             encode_kind(ebml_w, 'f' as u8);\n             encode_type_param_count(ebml_w, tps);\n-            auto fn_ty = trans::node_id_type(cx, item.id);\n+            auto fn_ty = trans::node_id_type(cx, ctor_id);\n             encode_type(cx, ebml_w, fn_ty);\n             encode_symbol(cx, ebml_w, ctor_id);\n             ebml::end_tag(ebml_w);"}, {"sha": "fe4200826ed00c6772401ca439e5ee01e4588473", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2ebd19477be55843147072737142f061b1939ac2", "patch": "@@ -7426,7 +7426,7 @@ fn trans_dtor(@local_ctxt cx, TypeRef llself_ty, ty::t self_ty,\n // trans_obj: creates an LLVM function that is the object constructor for the\n // object being translated.\n fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::node_id ctor_id,\n-             &vec[ast::ty_param] ty_params, ast::node_id type_id) {\n+             &vec[ast::ty_param] ty_params) {\n     // To make a function, we have to create a function context and, inside\n     // that, a number of block contexts for which code is generated.\n \n@@ -7448,9 +7448,9 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::node_id ctor_id,\n     // Both regular arguments and type parameters are handled here.\n \n     create_llargs_for_fn_args(fcx, ast::proto_fn, none[ty_self_pair],\n-                              ty::ret_ty_of_fn(ccx.tcx, type_id),\n+                              ty::ret_ty_of_fn(ccx.tcx, ctor_id),\n                               fn_args, ty_params);\n-    let vec[ty::arg] arg_tys = arg_tys_of_fn(ccx, type_id);\n+    let vec[ty::arg] arg_tys = arg_tys_of_fn(ccx, ctor_id);\n     copy_args_to_allocas(fcx, fn_args, arg_tys);\n     //  Create the first block context in the function and keep a handle on it\n     //  to pass to finish_fn later.\n@@ -7460,7 +7460,7 @@ fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::node_id ctor_id,\n     // Pick up the type of this object by looking at our own output type, that\n     // is, the output type of the object constructor we're building.\n \n-    auto self_ty = ty::ret_ty_of_fn(ccx.tcx, type_id);\n+    auto self_ty = ty::ret_ty_of_fn(ccx.tcx, ctor_id);\n     auto llself_ty = type_of(ccx, sp, self_ty);\n     // Set up the two-word pair that we're going to return from the object\n     // constructor we're building.  The two elements of this pair will be a\n@@ -7719,7 +7719,7 @@ fn trans_item(@local_ctxt cx, &ast::item item) {\n             auto sub_cx =\n                 @rec(obj_typarams=tps, obj_fields=ob.fields\n                      with *extend_path(cx, item.ident));\n-            trans_obj(sub_cx, item.span, ob, ctor_id, tps, item.id);\n+            trans_obj(sub_cx, item.span, ob, ctor_id, tps);\n         }\n         case (ast::item_mod(?m)) {\n             auto sub_cx =\n@@ -7759,8 +7759,7 @@ fn get_pair_fn_ty(TypeRef llpairty) -> TypeRef {\n }\n \n fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp, vec[str] path, str flav,\n-                    vec[ast::ty_param] ty_params, ast::node_id node_id,\n-                    ast::node_id def_id) {\n+                    vec[ast::ty_param] ty_params, ast::node_id node_id) {\n     auto llfty;\n     alt (ty::struct(ccx.tcx, node_id_type(ccx, node_id))) {\n         case (ty::ty_fn(?proto, ?inputs, ?output, _, _)) {\n@@ -7784,7 +7783,7 @@ fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp, vec[str] path, str flav,\n     // Declare the global constant pair that points to it.\n \n     let str ps = mangle_exported_name(ccx, path, node_id_type(ccx, node_id));\n-    register_fn_pair(ccx, ps, llfty, llfn, def_id);\n+    register_fn_pair(ccx, ps, llfty, llfn, node_id);\n     if (is_main) {\n         if (ccx.main_fn != none[ValueRef]) {\n             ccx.sess.span_fatal(sp, \"multiple 'main' functions\");\n@@ -8046,12 +8045,11 @@ fn collect_item_2(&@crate_ctxt ccx, &@ast::item i, &vec[str] pt,\n     alt (i.node) {\n         case (ast::item_fn(?f, ?tps)) {\n             if (!ccx.obj_methods.contains_key(i.id)) {\n-                decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, i.id, i.id);\n+                decl_fn_and_pair(ccx, i.span, new_pt, \"fn\", tps, i.id);\n             }\n         }\n         case (ast::item_obj(?ob, ?tps, ?ctor_id)) {\n-            decl_fn_and_pair(ccx, i.span, new_pt, \"obj_ctor\", tps, i.id,\n-                             ctor_id);\n+            decl_fn_and_pair(ccx, i.span, new_pt, \"obj_ctor\", tps, ctor_id);\n             for (@ast::method m in ob.methods) {\n                 ccx.obj_methods.insert(m.node.id, ());\n             }\n@@ -8081,7 +8079,7 @@ fn collect_tag_ctor(@crate_ctxt ccx, &@ast::item i, &vec[str] pt,\n                 if (vec::len[ast::variant_arg](variant.node.args) != 0u) {\n                     decl_fn_and_pair(ccx, i.span,\n                                      new_pt + [variant.node.name], \"tag\", tps,\n-                                     variant.node.id, variant.node.id);\n+                                     variant.node.id);\n                 }\n             }\n         }"}, {"sha": "1d3cd16557877b182f2d0a190bd9b6e13d051ff6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ebd19477be55843147072737142f061b1939ac2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=2ebd19477be55843147072737142f061b1939ac2", "patch": "@@ -691,7 +691,7 @@ mod collect {\n \n                 auto tpt =\n                     ty_of_obj_ctor(cx, it.ident, object, ctor_id, ty_params);\n-                write::ty_only(cx.tcx, it.id, tpt._1);\n+                write::ty_only(cx.tcx, ctor_id, tpt._1);\n                 // Write the methods into the type table.\n                 //\n                 // FIXME: Inefficient; this ends up calling"}]}