{"sha": "8aad16112b1597b3276d04d674c50c36772e2697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYWQxNjExMmIxNTk3YjMyNzZkMDRkNjc0YzUwYzM2NzcyZTI2OTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T11:40:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T11:40:28Z"}, "message": "Implement basic checking of by-reference bindings\n\nIssue #918", "tree": {"sha": "6d8ffbc72307b8c54baba34d830e02f8fa5de808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8ffbc72307b8c54baba34d830e02f8fa5de808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aad16112b1597b3276d04d674c50c36772e2697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aad16112b1597b3276d04d674c50c36772e2697", "html_url": "https://github.com/rust-lang/rust/commit/8aad16112b1597b3276d04d674c50c36772e2697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aad16112b1597b3276d04d674c50c36772e2697/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44c6370e6a8c159c49062d61e51d75b2b52c6954", "url": "https://api.github.com/repos/rust-lang/rust/commits/44c6370e6a8c159c49062d61e51d75b2b52c6954", "html_url": "https://github.com/rust-lang/rust/commit/44c6370e6a8c159c49062d61e51d75b2b52c6954"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "d5cecec7e6f65163e3ced93816f167043204ab1e", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8aad16112b1597b3276d04d674c50c36772e2697/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aad16112b1597b3276d04d674c50c36772e2697/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=8aad16112b1597b3276d04d674c50c36772e2697", "patch": "@@ -22,6 +22,7 @@ type binding = @{node_id: node_id,\n                  unsafe_tys: [ty::t],\n                  mutable ok: valid,\n                  mutable copied: copied};\n+// FIXME it may be worthwhile to use a linked list of bindings instead\n type scope = {bs: [binding], ret_style: ast::ret_style};\n \n fn mk_binding(cx: ctx, id: node_id, span: span, root_var: option::t<node_id>,\n@@ -46,7 +47,8 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n                copy_map: std::map::new_int_hash()};\n     let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n-              visit_decl: bind visit_decl(cx, _, _, _)\n+              visit_decl: bind visit_decl(cx, _, _, _),\n+              visit_block: bind visit_block(cx, _, _, _)\n               with *visit::default_visitor::<scope>()};\n     visit::visit_crate(*crate, {bs: [], ret_style: ast::return_val},\n                        visit::mk_vt(v));\n@@ -134,8 +136,7 @@ fn visit_decl(cx: @ctx, d: @ast::decl, sc: scope, v: vt<scope>) {\n     visit::visit_decl(d, sc, v);\n     alt d.node {\n       ast::decl_local(locs) {\n-        // FIXME check that init is lvalue\n-        for (style, loc) in locs {\n+        for (_, loc) in locs {\n             alt loc.node.init {\n               some(init) {\n                 if init.op == ast::init_move {\n@@ -150,6 +151,59 @@ fn visit_decl(cx: @ctx, d: @ast::decl, sc: scope, v: vt<scope>) {\n     }\n }\n \n+fn visit_block(cx: @ctx, b: ast::blk, sc: scope, v: vt<scope>) {\n+    let ref_locs = [];\n+    for stmt in b.node.stmts {\n+        alt stmt.node {\n+          ast::stmt_decl(@{node: ast::decl_local(ls), _}, _) {\n+            for (st, loc) in ls {\n+                if st == ast::let_ref {\n+                    ref_locs += [loc];\n+                }\n+            }\n+          }\n+          _ {}\n+        }\n+    }\n+    if vec::len(ref_locs) > 0u {\n+        let bindings = sc.bs;\n+        for loc in ref_locs { add_bindings_for_let(*cx, bindings, loc); }\n+        visit::visit_block(b, {bs: bindings with sc}, v);\n+    } else {\n+        visit::visit_block(b, sc, v);\n+    }\n+}\n+\n+fn add_bindings_for_let(cx: ctx, &bs: [binding], loc: @ast::local) {\n+    alt loc.node.init {\n+      some(init) {\n+        if init.op == ast::init_move {\n+            cx.tcx.sess.span_err\n+                (loc.span, \"can not move into a by-reference binding\");\n+        }\n+        let root = expr_root(cx.tcx, init.expr, false);\n+        let root_var = path_def_id(cx, root.ex);\n+        // FIXME also allow by-ref function calls\n+        if is_none(root_var) {\n+            cx.tcx.sess.span_err(loc.span, \"a reference binding can't be \\\n+                                            rooted in a temporary\");\n+        }\n+        for proot in *pattern_roots(cx.tcx, *root.ds, loc.node.pat) {\n+            let bnd = mk_binding(cx, proot.id, proot.span, root_var,\n+                                 inner_mut(proot.ds));\n+            // Don't implicitly copy explicit references\n+            bnd.copied = not_allowed;\n+            bs += [bnd];\n+        }\n+      }\n+      _ {\n+        cx.tcx.sess.span_err\n+            (loc.span, \"by-reference bindings must be initialized\");\n+      }\n+    }\n+}\n+\n+\n fn cant_copy(cx: ctx, b: binding) -> bool {\n     alt b.copied {\n       not_allowed. { ret true; }"}]}