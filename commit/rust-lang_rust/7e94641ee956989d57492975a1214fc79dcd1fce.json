{"sha": "7e94641ee956989d57492975a1214fc79dcd1fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOTQ2NDFlZTk1Njk4OWQ1NzQ5Mjk3NWExMjE0ZmM3OWRjZDFmY2U=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-07T20:13:36Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-02-07T20:23:09Z"}, "message": "Fix SourceMap::start_point\n\n`start_point` needs to return the *first* character's span, but it would\npreviously call `find_width_of_character_at_span` which returns the span\nof the *last* character. The implementation is now fixed.\n\nOther changes:\n\n- Docs for start_point, end_point, find_width_of_character_at_span\n  updated\n\n- Minor simplification in find_width_of_character_at_span code\n\nFixes #81800", "tree": {"sha": "826b415e3ed32477dd0e3e9629ea3272144c3a82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826b415e3ed32477dd0e3e9629ea3272144c3a82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e94641ee956989d57492975a1214fc79dcd1fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e94641ee956989d57492975a1214fc79dcd1fce", "html_url": "https://github.com/rust-lang/rust/commit/7e94641ee956989d57492975a1214fc79dcd1fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e94641ee956989d57492975a1214fc79dcd1fce/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923", "html_url": "https://github.com/rust-lang/rust/commit/36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "8bcd468d4127614228534b23638701c5bdcafff4", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7e94641ee956989d57492975a1214fc79dcd1fce/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e94641ee956989d57492975a1214fc79dcd1fce/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=7e94641ee956989d57492975a1214fc79dcd1fce", "patch": "@@ -777,16 +777,35 @@ impl SourceMap {\n         self.span_until_char(sp, '{')\n     }\n \n-    /// Returns a new span representing just the start point of this span.\n+    /// Returns a new span representing just the first character of the given span.\n     pub fn start_point(&self, sp: Span) -> Span {\n-        let pos = sp.lo().0;\n-        let width = self.find_width_of_character_at_span(sp, false);\n-        let corrected_start_position = pos.checked_add(width).unwrap_or(pos);\n-        let end_point = BytePos(cmp::max(corrected_start_position, sp.lo().0));\n-        sp.with_hi(end_point)\n+        let width = {\n+            let sp = sp.data();\n+            let local_begin = self.lookup_byte_offset(sp.lo);\n+            let start_index = local_begin.pos.to_usize();\n+            let src = local_begin.sf.external_src.borrow();\n+\n+            let snippet = if let Some(ref src) = local_begin.sf.src {\n+                Some(&src[start_index..])\n+            } else if let Some(src) = src.get_source() {\n+                Some(&src[start_index..])\n+            } else {\n+                None\n+            };\n+\n+            match snippet {\n+                None => 1,\n+                Some(snippet) => match snippet.chars().next() {\n+                    None => 1,\n+                    Some(c) => c.len_utf8(),\n+                },\n+            }\n+        };\n+\n+        sp.with_hi(BytePos(sp.lo().0 + width as u32))\n     }\n \n-    /// Returns a new span representing just the end point of this span.\n+    /// Returns a new span representing just the last character of this span.\n     pub fn end_point(&self, sp: Span) -> Span {\n         let pos = sp.hi().0;\n \n@@ -815,7 +834,8 @@ impl SourceMap {\n         Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt())\n     }\n \n-    /// Finds the width of a character, either before or after the provided span.\n+    /// Finds the width of the character, either before or after the end of provided span,\n+    /// depending on the `forwards` parameter.\n     fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n         let sp = sp.data();\n         if sp.lo == sp.hi {\n@@ -862,11 +882,9 @@ impl SourceMap {\n         // We need to extend the snippet to the end of the src rather than to end_index so when\n         // searching forwards for boundaries we've got somewhere to search.\n         let snippet = if let Some(ref src) = local_begin.sf.src {\n-            let len = src.len();\n-            &src[start_index..len]\n+            &src[start_index..]\n         } else if let Some(src) = src.get_source() {\n-            let len = src.len();\n-            &src[start_index..len]\n+            &src[start_index..]\n         } else {\n             return 1;\n         };"}, {"sha": "6ac66fdcb65ad5e6b28ca7855ec694bbed3950b1", "filename": "src/test/ui/span/issue-81800.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e94641ee956989d57492975a1214fc79dcd1fce/src%2Ftest%2Fui%2Fspan%2Fissue-81800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e94641ee956989d57492975a1214fc79dcd1fce/src%2Ftest%2Fui%2Fspan%2Fissue-81800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-81800.rs?ref=7e94641ee956989d57492975a1214fc79dcd1fce", "patch": "@@ -0,0 +1,2 @@\n+fn x\u02c2- //~ ERROR: unknown start of token\n+       //~^ ERROR: expected one of `#`, `>`, `const`, identifier, or lifetime, found `-`"}, {"sha": "d37f13a6683b05d8c3afd812ff8e38c9eca10a4a", "filename": "src/test/ui/span/issue-81800.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e94641ee956989d57492975a1214fc79dcd1fce/src%2Ftest%2Fui%2Fspan%2Fissue-81800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e94641ee956989d57492975a1214fc79dcd1fce/src%2Ftest%2Fui%2Fspan%2Fissue-81800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-81800.stderr?ref=7e94641ee956989d57492975a1214fc79dcd1fce", "patch": "@@ -0,0 +1,19 @@\n+error: unknown start of token: \\u{2c2}\n+  --> $DIR/issue-81800.rs:1:5\n+   |\n+LL | fn x\u02c2-\n+   |     ^\n+   |\n+help: Unicode character '\u02c2' (Modifier Letter Left Arrowhead) looks like '<' (Less-Than Sign), but it is not\n+   |\n+LL | fn x<-\n+   |     ^\n+\n+error: expected one of `#`, `>`, `const`, identifier, or lifetime, found `-`\n+  --> $DIR/issue-81800.rs:1:6\n+   |\n+LL | fn x\u02c2-\n+   |      ^ expected one of `#`, `>`, `const`, identifier, or lifetime\n+\n+error: aborting due to 2 previous errors\n+"}]}