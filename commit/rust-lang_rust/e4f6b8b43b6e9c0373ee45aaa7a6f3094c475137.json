{"sha": "e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "node_id": "C_kwDOAAsO6NoAKGU0ZjZiOGI0M2I2ZTljMDM3M2VlNDVhYWE3YTZmMzA5NGM0NzUxMzc", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-04-14T16:11:01Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-07T04:32:39Z"}, "message": "make subst_mir take EarlyBinder", "tree": {"sha": "190f4afd8a4a6c2a6ffb67276909a3454298b5f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/190f4afd8a4a6c2a6ffb67276909a3454298b5f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "html_url": "https://github.com/rust-lang/rust/commit/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82f57c16b7f362c8f6509b9c334403d81a11beed", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f57c16b7f362c8f6509b9c334403d81a11beed", "html_url": "https://github.com/rust-lang/rust/commit/82f57c16b7f362c8f6509b9c334403d81a11beed"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "4bbd7aaf10f7080047873ac698f09aff8479347a", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "patch": "@@ -578,14 +578,15 @@ impl<'tcx> Instance<'tcx> {\n         self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n-    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T\n+    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: EarlyBinder<&T>) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n+        let v = v.map_bound(|v| *v);\n         if let Some(substs) = self.substs_for_mir_body() {\n-            EarlyBinder(*v).subst(tcx, substs)\n+            v.subst(tcx, substs)\n         } else {\n-            *v\n+            v.subst_identity()\n         }\n     }\n "}, {"sha": "ece20d8d3e6ed9b6d48d2848caa0909c5c2613db", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=e4f6b8b43b6e9c0373ee45aaa7a6f3094c475137", "patch": "@@ -444,7 +444,9 @@ impl<'tcx> Inliner<'tcx> {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n+                let ty = callsite\n+                    .callee\n+                    .subst_mir(self.tcx, ty::EarlyBinder(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n@@ -788,7 +790,9 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n         match terminator.kind {\n             TerminatorKind::Drop { ref place, unwind, .. } => {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n+                let ty = self\n+                    .instance\n+                    .subst_mir(tcx, ty::EarlyBinder(&place.ty(self.callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n                     if let UnwindAction::Cleanup(_) = unwind {\n@@ -799,7 +803,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n-                let fn_ty = self.instance.subst_mir(tcx, &f.literal.ty());\n+                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder(&f.literal.ty()));\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST"}]}