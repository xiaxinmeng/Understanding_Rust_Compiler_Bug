{"sha": "cab607edcfe556343aa4fcb3de6229a790fc5e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjYwN2VkY2ZlNTU2MzQzYWE0ZmNiM2RlNjIyOWE3OTBmYzVlNzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-01T01:34:50Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-01T01:34:50Z"}, "message": "Emit a single error on if expr with expectation and no else clause", "tree": {"sha": "f93cb27ef9806c28b0bc4c1097fe7cb7d9f6ff81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93cb27ef9806c28b0bc4c1097fe7cb7d9f6ff81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab607edcfe556343aa4fcb3de6229a790fc5e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab607edcfe556343aa4fcb3de6229a790fc5e72", "html_url": "https://github.com/rust-lang/rust/commit/cab607edcfe556343aa4fcb3de6229a790fc5e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab607edcfe556343aa4fcb3de6229a790fc5e72/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fba38ac27e2ade309f4c2504a6d6cd3556972a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/fba38ac27e2ade309f4c2504a6d6cd3556972a28", "html_url": "https://github.com/rust-lang/rust/commit/fba38ac27e2ade309f4c2504a6d6cd3556972a28"}], "stats": {"total": 146, "additions": 38, "deletions": 108}, "files": [{"sha": "3983a3b820391ed5f83daf79e91b1d3f5505a1ff", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=cab607edcfe556343aa4fcb3de6229a790fc5e72", "patch": "@@ -112,23 +112,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             self.diverges.set(pats_diverge);\n-            let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n-            all_arms_diverge &= self.diverges.get();\n-\n-            let span = expr.span;\n-\n-            if source_if {\n+            let arm_ty = if source_if {\n                 let then_expr = &arms[0].body;\n                 match (i, if_no_else) {\n-                    (0, _) => coercion.coerce(self, &self.misc(span), &arm.body, arm_ty),\n-                    (_, true) => self.if_fallback_coercion(span, then_expr, &mut coercion),\n+                    (0, _) => {\n+                        let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n+                        all_arms_diverge &= self.diverges.get();\n+                        coercion.coerce(self, &self.misc(expr.span), &arm.body, arm_ty);\n+                        arm_ty\n+                    }\n+                    (_, true) => {\n+                        if self.if_fallback_coercion(expr.span, then_expr, &mut coercion) {\n+                            tcx.types.err\n+                        } else {\n+                            let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n+                            all_arms_diverge &= self.diverges.get();\n+                            arm_ty\n+                        }\n+                    }\n                     (_, _) => {\n+                        let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n+                        all_arms_diverge &= self.diverges.get();\n                         let then_ty = prior_arm_ty.unwrap();\n-                        let cause = self.if_cause(span, then_expr, &arm.body, then_ty, arm_ty);\n+                        let cause = self.if_cause(expr.span, then_expr, &arm.body, then_ty, arm_ty);\n                         coercion.coerce(self, &cause, &arm.body, arm_ty);\n+                        arm_ty\n                     }\n                 }\n             } else {\n+                let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n+                all_arms_diverge &= self.diverges.get();\n                 let arm_span = if let hir::ExprKind::Block(blk, _) = &arm.body.node {\n                     // Point at the block expr instead of the entire block\n                     blk.expr.as_ref().map(|e| e.span).unwrap_or(arm.body.span)\n@@ -139,7 +152,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // The reason for the first arm to fail is not that the match arms diverge,\n                     // but rather that there's a prior obligation that doesn't hold.\n                     0 => (arm_span, ObligationCauseCode::BlockTailExpression(arm.body.hir_id)),\n-                    _ => (span, ObligationCauseCode::MatchExpressionArm {\n+                    _ => (expr.span, ObligationCauseCode::MatchExpressionArm {\n                         arm_span,\n                         source: match_src,\n                         prior_arms: other_arms.clone(),\n@@ -153,7 +166,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if other_arms.len() > 5 {\n                     other_arms.remove(0);\n                 }\n-            }\n+                arm_ty\n+            };\n             prior_arm_ty = Some(arm_ty);\n         }\n \n@@ -185,11 +199,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n         then_expr: &'tcx hir::Expr,\n         coercion: &mut CoerceMany<'tcx, '_, rustc::hir::Arm>,\n-    ) {\n+    ) -> bool {\n         // If this `if` expr is the parent's function return expr,\n         // the cause of the type coercion is the return type, point at it. (#25228)\n         let ret_reason = self.maybe_get_coercion_reason(then_expr.hir_id, span);\n         let cause = self.cause(span, ObligationCauseCode::IfExpressionWithNoElse);\n+        let mut error = false;\n         coercion.coerce_forced_unit(self, &cause, &mut |err| {\n             if let Some((span, msg)) = &ret_reason {\n                 err.span_label(*span, msg.as_str());\n@@ -200,7 +215,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             err.note(\"`if` expressions without `else` evaluate to `()`\");\n             err.help(\"consider adding an `else` block that evaluates to the expected type\");\n+            error = true;\n         }, ret_reason.is_none());\n+        error\n     }\n \n     fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, span: Span) -> Option<(Span, String)> {"}, {"sha": "826371be35f45a1af6cbef189268f8614f35ca39", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=cab607edcfe556343aa4fcb3de6229a790fc5e72", "patch": "@@ -3,15 +3,13 @@ fn foo(bar: usize) -> usize {\n         return 3;\n     }\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n }\n \n fn foo2(bar: usize) -> usize {\n     let x: usize = if bar % 5 == 0 {\n         return 3;\n     };\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n     x\n }\n \n@@ -20,23 +18,20 @@ fn foo3(bar: usize) -> usize {\n         3\n     }\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n }\n \n fn foo_let(bar: usize) -> usize {\n     if let 0 = 1 {\n         return 3;\n     }\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n }\n \n fn foo2_let(bar: usize) -> usize {\n     let x: usize = if let 0 = 1 {\n         return 3;\n     };\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n     x\n }\n \n@@ -45,7 +40,6 @@ fn foo3_let(bar: usize) -> usize {\n         3\n     }\n     //~^^^ ERROR if may be missing an else clause\n-    //~| ERROR mismatched types [E0308]\n }\n \n // FIXME(60254): deduplicate first error in favor of second."}, {"sha": "b49c2aa6319df94b873e7f45411e206137095c30", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 7, "deletions": 76, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=cab607edcfe556343aa4fcb3de6229a790fc5e72", "patch": "@@ -1,14 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n-   |\n-LL | /     if bar % 5 == 0 {\n-LL | |         return 3;\n-LL | |     }\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n   --> $DIR/if-without-else-as-fn-expr.rs:2:5\n    |\n@@ -24,20 +13,8 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:10:20\n-   |\n-LL |       let x: usize = if bar % 5 == 0 {\n-   |  ____________________^\n-LL | |         return 3;\n-LL | |     };\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:10:20\n+  --> $DIR/if-without-else-as-fn-expr.rs:9:20\n    |\n LL |       let x: usize = if bar % 5 == 0 {\n    |  _________-__________^\n@@ -52,19 +29,8 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:19:5\n-   |\n-LL | /     if bar % 5 == 0 {\n-LL | |         3\n-LL | |     }\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:19:5\n+  --> $DIR/if-without-else-as-fn-expr.rs:17:5\n    |\n LL |   fn foo3(bar: usize) -> usize {\n    |                          ----- expected `usize` because of this return type\n@@ -78,19 +44,8 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:27:5\n-   |\n-LL | /     if let 0 = 1 {\n-LL | |         return 3;\n-LL | |     }\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:27:5\n+  --> $DIR/if-without-else-as-fn-expr.rs:24:5\n    |\n LL |   fn foo_let(bar: usize) -> usize {\n    |                             ----- expected `usize` because of this return type\n@@ -104,20 +59,8 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:35:20\n-   |\n-LL |       let x: usize = if let 0 = 1 {\n-   |  ____________________^\n-LL | |         return 3;\n-LL | |     };\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:35:20\n+  --> $DIR/if-without-else-as-fn-expr.rs:31:20\n    |\n LL |       let x: usize = if let 0 = 1 {\n    |  _________-__________^\n@@ -132,19 +75,8 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-without-else-as-fn-expr.rs:44:5\n-   |\n-LL | /     if let 0 = 1 {\n-LL | |         3\n-LL | |     }\n-   | |_____^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n-\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:44:5\n+  --> $DIR/if-without-else-as-fn-expr.rs:39:5\n    |\n LL |   fn foo3_let(bar: usize) -> usize {\n    |                              ----- expected `usize` because of this return type\n@@ -158,7 +90,6 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0308, E0317.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "f0f1dc6c28667758f4655f1fb856dc32aac97348", "filename": "src/test/ui/issues/issue-50577.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs?ref=cab607edcfe556343aa4fcb3de6229a790fc5e72", "patch": "@@ -2,6 +2,5 @@ fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n         //~^ ERROR if may be missing an else clause\n-        //~| ERROR mismatched types [E0308]\n     }\n }"}, {"sha": "0c3ba2ea4f94dabe1d95ab15c10e7ad590f6cefb", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab607edcfe556343aa4fcb3de6229a790fc5e72/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=cab607edcfe556343aa4fcb3de6229a790fc5e72", "patch": "@@ -1,13 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-50577.rs:3:16\n-   |\n-LL |         Drop = assert_eq!(1, 1)\n-   |                ^^^^^^^^^^^^^^^^ expected isize, found ()\n-   |\n-   = note: expected type `isize`\n-              found type `()`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n error[E0317]: if may be missing an else clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n@@ -23,7 +13,6 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0317.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0317`."}]}