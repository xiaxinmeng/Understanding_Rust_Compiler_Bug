{"sha": "471407205b0f0daccc57fe20e5260c0b199aa464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTQwNzIwNWIwZjBkYWNjYzU3ZmUyMGU1MjYwYzBiMTk5YWE0NjQ=", "commit": {"author": {"name": "Sebastian Ullrich", "email": "sebasti@nullri.ch", "date": "2016-08-11T00:11:03Z"}, "committer": {"name": "Sebastian Ullrich", "email": "sebasti@nullri.ch", "date": "2016-08-11T02:35:58Z"}, "message": "gdb: Fix pretty-printing special-cased Rust types\n\ngdb trunk now reports fully qualified type names, just like lldb. Move\nlldb code for extracting unqualified names to shared file.", "tree": {"sha": "dc638d9b108b690c3c70af48576fbf7c1e72cdd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc638d9b108b690c3c70af48576fbf7c1e72cdd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/471407205b0f0daccc57fe20e5260c0b199aa464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/471407205b0f0daccc57fe20e5260c0b199aa464", "html_url": "https://github.com/rust-lang/rust/commit/471407205b0f0daccc57fe20e5260c0b199aa464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/471407205b0f0daccc57fe20e5260c0b199aa464/comments", "author": {"login": "Kha", "id": 109126, "node_id": "MDQ6VXNlcjEwOTEyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/109126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kha", "html_url": "https://github.com/Kha", "followers_url": "https://api.github.com/users/Kha/followers", "following_url": "https://api.github.com/users/Kha/following{/other_user}", "gists_url": "https://api.github.com/users/Kha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kha/subscriptions", "organizations_url": "https://api.github.com/users/Kha/orgs", "repos_url": "https://api.github.com/users/Kha/repos", "events_url": "https://api.github.com/users/Kha/events{/privacy}", "received_events_url": "https://api.github.com/users/Kha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kha", "id": 109126, "node_id": "MDQ6VXNlcjEwOTEyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/109126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kha", "html_url": "https://github.com/Kha", "followers_url": "https://api.github.com/users/Kha/followers", "following_url": "https://api.github.com/users/Kha/following{/other_user}", "gists_url": "https://api.github.com/users/Kha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kha/subscriptions", "organizations_url": "https://api.github.com/users/Kha/orgs", "repos_url": "https://api.github.com/users/Kha/repos", "events_url": "https://api.github.com/users/Kha/events{/privacy}", "received_events_url": "https://api.github.com/users/Kha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080e0e072f9c654893839cf1f7ea71dc153b08a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/080e0e072f9c654893839cf1f7ea71dc153b08a9", "html_url": "https://github.com/rust-lang/rust/commit/080e0e072f9c654893839cf1f7ea71dc153b08a9"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "e713c7c8387fc51fcaf23b2d8538ea73f0fb166e", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=471407205b0f0daccc57fe20e5260c0b199aa464", "patch": "@@ -324,3 +324,20 @@ def extract_length_and_ptr_from_slice(slice_val):\n \n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (length, data_ptr)\n+\n+UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n+\n+def extract_type_name(qualified_type_name):\n+    '''Extracts the type name from a fully qualified path'''\n+    if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n+        return qualified_type_name\n+\n+    end_of_search = qualified_type_name.find(\"<\")\n+    if end_of_search < 0:\n+        end_of_search = len(qualified_type_name)\n+\n+    index = qualified_type_name.rfind(\"::\", 0, end_of_search)\n+    if index < 0:\n+        return qualified_type_name\n+    else:\n+        return qualified_type_name[index + 2:]"}, {"sha": "d083558d23cd8d97ab309df9dc6f823c380ade07", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=471407205b0f0daccc57fe20e5260c0b199aa464", "patch": "@@ -36,7 +36,7 @@ def get_unqualified_type_name(self):\n         if tag is None:\n             return tag\n \n-        return tag.replace(\"&'static \", \"&\")\n+        return rustpp.extract_type_name(tag).replace(\"&'static \", \"&\")\n \n     def get_dwarf_type_kind(self):\n         if self.ty.code == gdb.TYPE_CODE_STRUCT:"}, {"sha": "c0a4c3e9ece932e312999fb3e3cf58fb95069deb", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/471407205b0f0daccc57fe20e5260c0b199aa464/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=471407205b0f0daccc57fe20e5260c0b199aa464", "patch": "@@ -29,7 +29,7 @@ def get_unqualified_type_name(self):\n         if qualified_name is None:\n             return qualified_name\n \n-        return extract_type_name(qualified_name).replace(\"&'static \", \"&\")\n+        return rustpp.extract_type_name(qualified_name).replace(\"&'static \", \"&\")\n \n     def get_dwarf_type_kind(self):\n         type_class = self.ty.GetTypeClass()\n@@ -204,7 +204,7 @@ def render_child(child_index):\n             # LLDB is not good at handling zero-sized values, so we have to help\n             # it a little\n             if field.GetType().GetByteSize() == 0:\n-                return this + extract_type_name(field.GetType().GetName())\n+                return this + rustpp.extract_type_name(field.GetType().GetName())\n             else:\n                 return this + \"<invalid value>\"\n \n@@ -274,23 +274,6 @@ def print_std_string_val(val, internal_dict):\n # Helper Functions\n #=--------------------------------------------------------------------------------------------------\n \n-UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n-\n-def extract_type_name(qualified_type_name):\n-    '''Extracts the type name from a fully qualified path'''\n-    if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n-        return qualified_type_name\n-\n-    end_of_search = qualified_type_name.find(\"<\")\n-    if end_of_search < 0:\n-        end_of_search = len(qualified_type_name)\n-\n-    index = qualified_type_name.rfind(\"::\", 0, end_of_search)\n-    if index < 0:\n-        return qualified_type_name\n-    else:\n-        return qualified_type_name[index + 2:]\n-\n def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n     '''Prints a contigous memory range, interpreting it as values of the\n        pointee-type of data_ptr_val.'''"}]}