{"sha": "fad73392dc8659f34385f418c8f936bafa562dfb", "node_id": "C_kwDOAAsO6NoAKGZhZDczMzkyZGM4NjU5ZjM0Mzg1ZjQxOGM4ZjkzNmJhZmE1NjJkZmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-31T05:26:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-31T05:26:33Z"}, "message": "Rollup merge of #106232 - maurer:transparent-subst, r=rcvalle\n\nCFI: Monomorphize transparent ADTs before typeid\n\nMonomorphise `#[repr(transparent)]` parameterized ADTs before turning them into an Itanium mangled String.\n\n`#[repr(transparent)]` ADTs currently use the single field to represent them in their CFI type ID to ensure that they are compatible. However, if that type involves a type parameter instantiated at the ADT level, as in `ManuallyDrop`, this will currently ICE as the `Parameter` type cannot be mangled. Since this happens at lowering time, it should always be concrete after substitution.\n\nFixes #106230", "tree": {"sha": "6c437febb01a3223ec6d32e33c8a8acd9ac3c407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c437febb01a3223ec6d32e33c8a8acd9ac3c407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fad73392dc8659f34385f418c8f936bafa562dfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjr8gJCRBK7hj4Ov3rIwAAlrEIAB9FUV6gv/ReeVOlqWXa/M+0\na53WqVcn9teAg3CfxFYQEPkKndauvFtaIQv4VxnKx9PxRGbdAovh6iESQCzYQ1yC\nmhxr2hrRb2r1Z1Tjj2R79igLWKpN7Q0l6w1CxFlKmPCtDALqyIgiQIW6/JgxDSYb\n9wmHpl4YrpmwAswJpi+IcZpTFGfk+4CwyA6dmar0cM2fU0a3bdQxwp8AWSi372kx\nklp4zGZLgDE+WsdbnrROVS8QuszwXpeu4BeiIL/dWCo09tEpk1qLMi1mYVPixvrU\nKkWGlc8VKStG38E9pMeD3FozrX3E55etqzQRLAxh7FvNvnGPcXuD8qB7cFwjd10=\n=te0B\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c437febb01a3223ec6d32e33c8a8acd9ac3c407\nparent ff3326d9253b1043b327aa5d04f8ef85973e02b1\nparent fb2c27d73f3528da5585bc7e49254164e0a2a5a2\nauthor Michael Goulet <michael@errs.io> 1672464393 -0800\ncommitter GitHub <noreply@github.com> 1672464393 -0800\n\nRollup merge of #106232 - maurer:transparent-subst, r=rcvalle\n\nCFI: Monomorphize transparent ADTs before typeid\n\nMonomorphise `#[repr(transparent)]` parameterized ADTs before turning them into an Itanium mangled String.\n\n`#[repr(transparent)]` ADTs currently use the single field to represent them in their CFI type ID to ensure that they are compatible. However, if that type involves a type parameter instantiated at the ADT level, as in `ManuallyDrop`, this will currently ICE as the `Parameter` type cannot be mangled. Since this happens at lowering time, it should always be concrete after substitution.\n\nFixes #106230\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fad73392dc8659f34385f418c8f936bafa562dfb", "html_url": "https://github.com/rust-lang/rust/commit/fad73392dc8659f34385f418c8f936bafa562dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fad73392dc8659f34385f418c8f936bafa562dfb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff3326d9253b1043b327aa5d04f8ef85973e02b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3326d9253b1043b327aa5d04f8ef85973e02b1", "html_url": "https://github.com/rust-lang/rust/commit/ff3326d9253b1043b327aa5d04f8ef85973e02b1"}, {"sha": "fb2c27d73f3528da5585bc7e49254164e0a2a5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2c27d73f3528da5585bc7e49254164e0a2a5a2", "html_url": "https://github.com/rust-lang/rust/commit/fb2c27d73f3528da5585bc7e49254164e0a2a5a2"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "e9b85705086b55fc81aea67c4faf66436da0ce56", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fad73392dc8659f34385f418c8f936bafa562dfb/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad73392dc8659f34385f418c8f936bafa562dfb/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=fad73392dc8659f34385f418c8f936bafa562dfb", "patch": "@@ -164,6 +164,7 @@ fn encode_const<'tcx>(\n \n /// Encodes a FnSig using the Itanium C++ ABI with vendor extended type qualifiers and types for\n /// Rust types that are not used at the FFI boundary.\n+#[instrument(level = \"trace\", skip(tcx, dict))]\n fn encode_fnsig<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     fn_sig: &FnSig<'tcx>,\n@@ -653,6 +654,7 @@ fn encode_ty<'tcx>(\n // Transforms a ty:Ty for being encoded and used in the substitution dictionary. It transforms all\n // c_void types into unit types unconditionally, and generalizes all pointers if\n // TransformTyOptions::GENERALIZE_POINTERS option is set.\n+#[instrument(level = \"trace\", skip(tcx))]\n fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptions) -> Ty<'tcx> {\n     let mut ty = ty;\n \n@@ -698,7 +700,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                     !is_zst\n                 });\n                 if let Some(field) = field {\n-                    let ty0 = tcx.type_of(field.did);\n+                    let ty0 = tcx.bound_type_of(field.did).subst(tcx, substs);\n                     // Generalize any repr(transparent) user-defined type that is either a pointer\n                     // or reference, and either references itself or any other type that contains or\n                     // references itself, to avoid a reference cycle.\n@@ -827,6 +829,7 @@ fn transform_substs<'tcx>(\n \n /// Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor\n /// extended type qualifiers and types for Rust types that are not used at the FFI boundary.\n+#[instrument(level = \"trace\", skip(tcx))]\n pub fn typeid_for_fnabi<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     fn_abi: &FnAbi<'tcx, Ty<'tcx>>,"}, {"sha": "b9c33914360ba08c6b9144c556fdde42ccf70de5", "filename": "src/test/codegen/sanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fad73392dc8659f34385f418c8f936bafa562dfb/src%2Ftest%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fad73392dc8659f34385f418c8f936bafa562dfb/src%2Ftest%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-cfi-emit-type-metadata-id-itanium-cxx-abi.rs?ref=fad73392dc8659f34385f418c8f936bafa562dfb", "patch": "@@ -131,6 +131,13 @@ pub struct Type13<'a> {\n     member3: &'a Type13<'a>,\n }\n \n+// Helper type to allow `Type14<Bar>` to be a unique ID\n+pub struct Bar;\n+\n+// repr(transparent) parameterized type\n+#[repr(transparent)]\n+pub struct Type14<T>(T);\n+\n pub fn foo0(_: ()) { }\n // CHECK: define{{.*}}foo0{{.*}}!type ![[TYPE0:[0-9]+]]\n pub fn foo1(_: c_void, _: ()) { }\n@@ -425,6 +432,12 @@ pub fn foo145(_: Type13, _: Type13) { }\n // CHECK: define{{.*}}foo145{{.*}}!type ![[TYPE145:[0-9]+]]\n pub fn foo146(_: Type13, _: Type13, _: Type13) { }\n // CHECK: define{{.*}}foo146{{.*}}!type ![[TYPE146:[0-9]+]]\n+pub fn foo147(_: Type14<Bar>) { }\n+// CHECK: define{{.*}}foo147{{.*}}!type ![[TYPE147:[0-9]+]]\n+pub fn foo148(_: Type14<Bar>, _: Type14<Bar>) { }\n+// CHECK: define{{.*}}foo148{{.*}}!type ![[TYPE148:[0-9]+]]\n+pub fn foo149(_: Type14<Bar>, _: Type14<Bar>, _: Type14<Bar>) { }\n+// CHECK: define{{.*}}foo149{{.*}}!type ![[TYPE149:[0-9]+]]\n \n // CHECK: ![[TYPE0]] = !{i64 0, !\"_ZTSFvvE\"}\n // CHECK: ![[TYPE1]] = !{i64 0, !\"_ZTSFvvvE\"}\n@@ -570,6 +583,9 @@ pub fn foo146(_: Type13, _: Type13, _: Type13) { }\n // CHECK: ![[TYPE141]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3FooE\"}\n // CHECK: ![[TYPE142]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3FooS_E\"}\n // CHECK: ![[TYPE143]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3FooS_S_E\"}\n-// CHECK: ![[TYPE144]] = !{i64 0, !\"_ZTSFvu3refIu3refIvEEE\"}\n-// CHECK: ![[TYPE145]] = !{i64 0, !\"_ZTSFvu3refIu3refIvEES0_E\"}\n-// CHECK: ![[TYPE146]] = !{i64 0, !\"_ZTSFvu3refIu3refIvEES0_S0_E\"}\n+// CHECK: ![[TYPE144]] = !{i64 0, !\"_ZTSFvu3refIvEE\"}\n+// CHECK: ![[TYPE145]] = !{i64 0, !\"_ZTSFvu3refIvES_E\"}\n+// CHECK: ![[TYPE146]] = !{i64 0, !\"_ZTSFvu3refIvES_S_E\"}\n+// CHECK: ![[TYPE147]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3BarE\n+// CHECK: ![[TYPE148]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3BarS_E\n+// CHECK: ![[TYPE149]] = !{i64 0, !\"_ZTSFvu{{[0-9]+}}NtC{{[[:print:]]+}}_51sanitizer_cfi_emit_type_metadata_id_itanium_cxx_abi3BarS_S_E"}]}