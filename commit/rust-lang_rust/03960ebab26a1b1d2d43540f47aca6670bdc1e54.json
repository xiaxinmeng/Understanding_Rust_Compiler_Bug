{"sha": "03960ebab26a1b1d2d43540f47aca6670bdc1e54", "node_id": "C_kwDOAAsO6NoAKDAzOTYwZWJhYjI2YTFiMWQyZDQzNTQwZjQ3YWNhNjY3MGJkYzFlNTQ", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-05-07T14:49:19Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-05-07T15:39:21Z"}, "message": "Replace `#[allow]` with `#[expect]` in Clippy", "tree": {"sha": "329e2e7b0b06e83e37e9b3ff3623ae69af1a6133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/329e2e7b0b06e83e37e9b3ff3623ae69af1a6133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03960ebab26a1b1d2d43540f47aca6670bdc1e54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmJ2kqkACgkQ/Ny/Ka9k\n1gHDtw//eG5mWaQITpS7XB/Dxyu+Wq75YgjdfbUPIaOxOvJqCZghsesMLTBF4pOe\nOHyT0PGCS1q88c6iYIUa2Zx32WvKgiYEnqxcNAsnRwOmCxRnjnoE+8yeW4ab097j\nDfyKdP5LXcUiPn4Yspau/Pmw9bOrEE0Kvu0s4Y5kcJ5S+qCPzPv3L18TTcW1Xh6Q\nIB4XyBtbkDvhzZi3uQ86MBsT5rRmrHsFq2unUtuWKlXdc6lm1QGljJGGBXzRTThh\nXUc/jXrEot3pkuXQ2y/KVutUZuZDxrVKM/KsQgXRam8xO4/aYthzsP9edy6HRsdR\ncJkYh5xZnupWiA4GhBhLtIzXGGcNevoC6zfe+vE6NDnHpMzaL1Tdy0t8Vj5FAJ5G\nTBaCJ+CofDcVpV1lOiRR1B1nljyMSAQE0q8LCF/ivyYW9UmFnGQ0TlzyQD+PTVTC\nAFuviZp5dlziRxPsnj/KfbL80lQ/Q4aKLTgSylxxGMt1/3MXrkda0JGwfp2SVq9Q\nWZoIInKjm52x2lBEnF1D334DlArzd9AP+UqTl8n7AXMBcZW2SNQ6CMYt1c6uZkE1\nXukKCQo+qMIhK35z2XhJ5t3A60BDJAXB9xvoJv4GsNVbIMFK5uRdoJ0/c09SyjDs\nT3ZN0kK+ifNzyWFQjbGN6KFWWfrLXrdaoEms9K7AL7O/iylM5y0=\n=HNNk\n-----END PGP SIGNATURE-----", "payload": "tree 329e2e7b0b06e83e37e9b3ff3623ae69af1a6133\nparent 9c78883fdf5ccdeef833bc99095a18dcf6312d0b\nauthor xFrednet <xFrednet@gmail.com> 1651934959 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1651937961 +0200\n\nReplace `#[allow]` with `#[expect]` in Clippy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03960ebab26a1b1d2d43540f47aca6670bdc1e54", "html_url": "https://github.com/rust-lang/rust/commit/03960ebab26a1b1d2d43540f47aca6670bdc1e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03960ebab26a1b1d2d43540f47aca6670bdc1e54/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c78883fdf5ccdeef833bc99095a18dcf6312d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c78883fdf5ccdeef833bc99095a18dcf6312d0b", "html_url": "https://github.com/rust-lang/rust/commit/9c78883fdf5ccdeef833bc99095a18dcf6312d0b"}], "stats": {"total": 166, "additions": 73, "deletions": 93}, "files": [{"sha": "0adb6327164e77f642b391dcad553ea0066fa5d6", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         }\n         for (n, expr) in self.terminals.iter().enumerate() {\n             if eq_expr_value(self.cx, e, expr) {\n-                #[allow(clippy::cast_possible_truncation)]\n+                #[expect(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Term(n as u8));\n             }\n \n@@ -149,15 +149,15 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                 if eq_expr_value(self.cx, e_lhs, expr_lhs);\n                 if eq_expr_value(self.cx, e_rhs, expr_rhs);\n                 then {\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     return Ok(Bool::Not(Box::new(Bool::Term(n as u8))));\n                 }\n             }\n         }\n         let n = self.terminals.len();\n         self.terminals.push(e);\n         if n < 32 {\n-            #[allow(clippy::cast_possible_truncation)]\n+            #[expect(clippy::cast_possible_truncation)]\n             Ok(Bool::Term(n as u8))\n         } else {\n             Err(\"too many literals\".to_owned())"}, {"sha": "317c4bfb3226ef1f5209a23ff6ee1b56d2b540f9", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -48,7 +48,7 @@ impl CognitiveComplexity {\n impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n-    #[allow(clippy::cast_possible_truncation)]\n+    #[expect(clippy::cast_possible_truncation)]\n     fn check<'tcx>(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -70,7 +70,7 @@ impl CognitiveComplexity {\n         let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::Result) {\n             returns\n         } else {\n-            #[allow(clippy::integer_division)]\n+            #[expect(clippy::integer_division)]\n             (returns / 2)\n         };\n "}, {"sha": "243dfd3a46183f0fefdec6b8c83bddb4ea911873", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -110,7 +110,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n         }\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n         // start from the `let mut _ = _::default();` and look at all the following\n         // statements, see if they re-assign the fields of the binding"}, {"sha": "3d9f9ed41ce189eb5ac48c5f7903f453c374371f", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -116,7 +116,6 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n-    #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             ExprKind::Call(func, args) => {"}, {"sha": "ea4c0207bb01312b82197ce0ec5c2310716e6067", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -168,7 +168,7 @@ struct RefPat {\n }\n \n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // Skip path expressions from deref calls. e.g. `Deref::deref(e)`\n         if Some(expr.hir_id) == self.skip_expr.take() {\n@@ -580,7 +580,7 @@ fn find_adjustments<'tcx>(\n     }\n }\n \n-#[allow(clippy::needless_pass_by_value)]\n+#[expect(clippy::needless_pass_by_value)]\n fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {"}, {"sha": "aaec88f50c771f2992c2a6df332d72083c33e7ce", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -198,7 +198,7 @@ declare_clippy_lint! {\n     \"presence of `fn main() {` in code examples\"\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Clone)]\n pub struct DocMarkdown {\n     valid_idents: FxHashSet<String>,\n@@ -373,7 +373,7 @@ fn lint_for_missing_headers<'tcx>(\n /// `rustc_ast::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n-#[allow(clippy::cast_possible_truncation)]\n+#[expect(clippy::cast_possible_truncation)]\n #[must_use]\n pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n@@ -428,7 +428,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are\n     /// point to a fake address.\n-    #[allow(clippy::unnecessary_wraps)] // we're following a type signature\n+    #[expect(clippy::unnecessary_wraps)] // we're following a type signature\n     fn fake_broken_link_callback<'a>(_: BrokenLink<'_>) -> Option<(CowStr<'a>, CowStr<'a>)> {\n         Some((\"fake\".into(), \"fake\".into()))\n     }"}, {"sha": "be95375789d5b4663ac7ed7212e9e16bf195b9c0", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -40,7 +40,7 @@ declare_clippy_lint! {\n declare_lint_pass!(DoubleComparisons => [DOUBLE_COMPARISONS]);\n \n impl<'tcx> DoubleComparisons {\n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn check_binop(cx: &LateContext<'tcx>, op: BinOpKind, lhs: &'tcx Expr<'_>, rhs: &'tcx Expr<'_>, span: Span) {\n         let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (&lhs.kind, &rhs.kind) {\n             (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {"}, {"sha": "6c5ed5dca2d2f215bdf4e5dcaa0fd6bcd816b835", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let (cond_expr, then_expr, else_expr) = match higher::If::hir(expr) {\n             Some(higher::If { cond, then, r#else }) => (cond, then, r#else),\n@@ -319,7 +319,7 @@ struct Insertion<'tcx> {\n ///   `or_insert_with`.\n /// * Determine if there's any sub-expression that can't be placed in a closure.\n /// * Determine if there's only a single insert statement. `or_insert` can be used in this case.\n-#[allow(clippy::struct_excessive_bools)]\n+#[expect(clippy::struct_excessive_bools)]\n struct InsertSearcher<'cx, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n     /// The map expression used in the contains call."}, {"sha": "43b405c9a8eb4fc4347faea51fac42bb9705999c", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n declare_lint_pass!(UnportableVariant => [ENUM_CLIKE_UNPORTABLE_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n-    #[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap, clippy::cast_sign_loss)]\n+    #[expect(clippy::cast_possible_wrap)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;"}, {"sha": "e029b8e85379f1a6dda254a307fa2ec6cfd12d5b", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -240,7 +240,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n         assert!(last.is_some());\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n         let item_camel = to_camel_case(item_name);"}, {"sha": "afb5d32f95334b31792d440185798047f2425a86", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -72,7 +72,7 @@ declare_clippy_lint! {\n declare_lint_pass!(EqOp => [EQ_OP, OP_REF]);\n \n impl<'tcx> LateLintPass<'tcx> for EqOp {\n-    #[allow(clippy::similar_names, clippy::too_many_lines)]\n+    #[expect(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if_chain! {\n             if let Some((macro_call, macro_name)) = first_node_macro_backtrace(cx, e).find_map(|macro_call| {\n@@ -138,7 +138,6 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                 },\n             };\n             if let Some(trait_id) = trait_id {\n-                #[allow(clippy::match_same_arms)]\n                 match (&left.kind, &right.kind) {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},"}, {"sha": "42503c26de1d1dcb1112fd1cf3a888a0acbec037", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -215,7 +215,7 @@ fn check_ln1p(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n // converted to an integer without loss of precision. For now we only check\n // ranges [-16777215, 16777216) for type f32 as whole number floats outside\n // this range are lossy and ambiguous.\n-#[allow(clippy::cast_possible_truncation)]\n+#[expect(clippy::cast_possible_truncation)]\n fn get_integer_from_float_constant(value: &Constant) -> Option<i32> {\n     match value {\n         F32(num) if num.fract() == 0.0 => {"}, {"sha": "4f9680f60fe8b4422d51931e1cd96148c671640e", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -62,7 +62,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ImplicitHasher => [IMPLICIT_HASHER]);\n \n impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n-    #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n+    #[expect(clippy::cast_possible_truncation, clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         use rustc_span::BytePos;\n "}, {"sha": "647947d5d30d6b9517ce96b785e9ee87ab81e26b", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -164,7 +164,7 @@ fn lint_implicit_returns(\n             })\n             .visit_block(block);\n             if add_return {\n-                #[allow(clippy::option_if_let_else)]\n+                #[expect(clippy::option_if_let_else)]\n                 if let Some(span) = call_site_span {\n                     lint_return(cx, span);\n                     LintLocation::Parent\n@@ -196,7 +196,7 @@ fn lint_implicit_returns(\n \n         _ =>\n         {\n-            #[allow(clippy::option_if_let_else)]\n+            #[expect(clippy::option_if_let_else)]\n             if let Some(span) = call_site_span {\n                 lint_return(cx, span);\n                 LintLocation::Parent"}, {"sha": "8db7b307ddb75e5fa1138eeb9c8188dc7245c4d8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -52,7 +52,7 @@ enum Side {\n }\n \n impl IntPlusOne {\n-    #[allow(clippy::cast_sign_loss)]\n+    #[expect(clippy::cast_sign_loss)]\n     fn check_lit(lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.kind {\n             return value == (target_value as u128);"}, {"sha": "092c981140eff60f1b05aec42ef372f47293322a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -8,6 +8,7 @@\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n@@ -472,7 +473,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n /// Register all lints and lint groups with the rustc plugin registry\n ///\n /// Used in `./src/driver.rs`.\n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n "}, {"sha": "9998712b8527dadb3e139a6888a3869f71c37b3c", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -204,7 +204,6 @@ impl WarningType {\n     }\n }\n \n-#[allow(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct LiteralDigitGrouping {\n     lint_fraction_readability: bool,\n@@ -432,7 +431,7 @@ impl LiteralDigitGrouping {\n     }\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct DecimalLiteralRepresentation {\n     threshold: u64,"}, {"sha": "75d771f992a8c48261afb5deba2a3302237302b1", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -620,7 +620,6 @@ declare_lint_pass!(Loops => [\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n-    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let for_loop = higher::ForLoop::hir(expr);\n         if let Some(higher::ForLoop {"}, {"sha": "09f9c05b4fced3d7cc8f01f7c3580b3ea390908f", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -19,7 +19,7 @@ use std::mem;\n \n /// Checks for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,"}, {"sha": "82760607ba295e5e11ee219b28346fd54927e469", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -239,7 +239,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n     v.uses_iter\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &Expr<'_>) -> bool {\n     struct AfterLoopVisitor<'a, 'b, 'tcx> {\n         cx: &'a LateContext<'tcx>,"}, {"sha": "da806918be06113ef42f6b40640e1510b60ca3b4", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -49,7 +49,7 @@ impl MacroRefData {\n }\n \n #[derive(Default)]\n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct MacroUseImports {\n     /// the actual import path used and the span of the attribute above it.\n     imports: Vec<(String, Span)>,\n@@ -135,7 +135,6 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             self.push_unique_macro_pat_ty(cx, ty.span);\n         }\n     }\n-    #[allow(clippy::too_many_lines)]\n     fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];"}, {"sha": "230ae029ed9d28978eeb256c40604e24e0df1d81", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ManualMap => [MANUAL_MAP]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualMap {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let (scrutinee, then_pat, then_body, else_pat, else_body) = match IfLetOrMatch::parse(cx, expr) {\n             Some(IfLetOrMatch::IfLet(scrutinee, pat, body, Some(r#else))) => (scrutinee, pat, body, None, r#else),"}, {"sha": "004e36ae13c3cea0df9cb3320d8c1900d5947b34", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -62,7 +62,7 @@ declare_clippy_lint! {\n     \"manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]\"\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveStruct {\n     msrv: Option<RustcVersion>,\n }\n@@ -76,7 +76,7 @@ impl ManualNonExhaustiveStruct {\n \n impl_lint_pass!(ManualNonExhaustiveStruct => [MANUAL_NON_EXHAUSTIVE]);\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveEnum {\n     msrv: Option<RustcVersion>,\n     constructed_enum_variants: FxHashSet<(DefId, DefId)>,"}, {"sha": "a96a7fe55f3a3bb8304711b9a00923c64e41725d", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -16,7 +16,7 @@ use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n     let hash = |&(_, arm): &(usize, &Arm<'_>)| -> u64 {\n         let mut h = SpanlessHash::new(cx);\n@@ -225,9 +225,9 @@ fn iter_matching_struct_fields<'a>(\n     Iter(left.iter(), right.iter())\n }\n \n-#[allow(clippy::similar_names)]\n+#[expect(clippy::similar_names)]\n impl<'a> NormalizedPat<'a> {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn from_pat(cx: &LateContext<'_>, arena: &'a DroplessArena, pat: &'a Pat<'_>) -> Self {\n         match pat.kind {\n             PatKind::Wild | PatKind::Binding(.., None) => Self::Wild,"}, {"sha": "028e8c297fbd92e8eb2e2c5ecb9f058e42273bb8", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n \n use super::MATCH_SINGLE_BINDING;\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if expr.span.from_expansion() || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;"}, {"sha": "a3a26d9c3e1669a89d9c0576d86b0bb7066b0dc6", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -10,7 +10,7 @@ use rustc_span::sym;\n \n use super::{MATCH_WILDCARD_FOR_SINGLE_VARIANTS, WILDCARD_ENUM_MATCH_ARM};\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     let adt_def = match ty.kind() {\n@@ -56,7 +56,6 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n         recurse_or_patterns(arm.pat, |pat| {\n             let path = match &peel_hir_pat_refs(pat).0.kind {\n                 PatKind::Path(path) => {\n-                    #[allow(clippy::match_same_arms)]\n                     let id = match cx.qpath_res(path, pat.hir_id) {\n                         Res::Def(\n                             DefKind::Const | DefKind::ConstParam | DefKind::AnonConst | DefKind::InlineConst,"}, {"sha": "1a8b9d15f370f1e3df5843b5b6bf22b6d36ae1fc", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -340,7 +340,7 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n-#[allow(clippy::too_many_arguments)]\n+#[expect(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     cx: &LateContext<'_>,\n     arms: &[Arm<'_>],"}, {"sha": "2566a3c1f86aa4f984ece79babe4f5a724cb52eb", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -548,7 +548,7 @@ fn is_array(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool) {\n     #[derive(Default)]\n     struct EqImpl {"}, {"sha": "38960103d5e04c5f3aa1e0a23d57272182e6f362", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -70,7 +70,7 @@ macro_rules! need {\n }\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,"}, {"sha": "707f3b2181ac9967df8c29d5a7c4ca480e7456d3", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -34,7 +34,6 @@ declare_clippy_lint! {\n \n declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n \n-#[allow(clippy::match_same_arms)]\n impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref op, left, right) = e.kind {"}, {"sha": "6e7627639eb84cca8bfa5f6106616f5792622b04", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -58,7 +58,6 @@ pub struct NewWithoutDefault {\n impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n-    #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None,"}, {"sha": "7f6b535c7b16c07f5096269ea8903c32e86570d8", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -191,7 +191,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         }\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_ident(&mut self, ident: Ident) {\n         let interned_name = ident.name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {"}, {"sha": "c5b8b8103a138465c164b98e20a788f1b8016b95", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> PassByRefOrValue {\n             // Cap the calculated bit width at 32-bits to reduce\n             // portability problems between 32 and 64-bit targets\n             let bit_width = cmp::min(bit_width, 32);\n-            #[allow(clippy::integer_division)]\n+            #[expect(clippy::integer_division)]\n             let byte_width = bit_width / 8;\n             // Use a limit of 2 times the register byte width\n             byte_width * 2"}, {"sha": "a4d265111f9aee26d241d913d790c19bb0949740", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -163,7 +163,6 @@ enum Level {\n     Lower,\n }\n \n-#[allow(rustc::usage_of_ty_tykind)]\n fn find_first_mismatch<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n     let mut result = None;\n     pat.walk(|p| {"}, {"sha": "86460c1b27e390ccc0ad3c4209e6b32599c6a041", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -514,7 +514,7 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n     }\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args: &[PtrArg<'tcx>]) -> Vec<PtrArgResult> {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,"}, {"sha": "954e702a1f8875e49db76c5c80f5a795762c5703", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -71,7 +71,7 @@ declare_clippy_lint! {\n declare_lint_pass!(RedundantClone => [REDUNDANT_CLONE]);\n \n impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,"}, {"sha": "f789cec6d6acfc22333a2318e5352f1212ac9e0b", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -54,21 +54,20 @@ impl EarlyLintPass for DerefAddrOf {\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {\n-                    #[allow(clippy::option_if_let_else)]\n                     if let Some(macro_source) = snippet_opt(cx, e.span) {\n                         // Remove leading whitespace from the given span\n                         // e.g: ` $visitor` turns into `$visitor`\n                         let trim_leading_whitespaces = |span| {\n                             snippet_opt(cx, span).and_then(|snip| {\n-                                #[allow(clippy::cast_possible_truncation)]\n+                                #[expect(clippy::cast_possible_truncation)]\n                                 snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n                                     span.lo() + BytePos(pos as u32)\n                                 })\n                             }).map_or(span, |start_no_whitespace| e.span.with_lo(start_no_whitespace))\n                         };\n \n                         let mut generate_snippet = |pattern: &str| {\n-                            #[allow(clippy::cast_possible_truncation)]\n+                            #[expect(clippy::cast_possible_truncation)]\n                             macro_source.rfind(pattern).map(|pattern_pos| {\n                                 let rpos = pattern_pos + pattern.len();\n                                 let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));"}, {"sha": "78ca7622f4a16c2f64e8ad808e8a05d498f4f4b2", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -79,7 +79,6 @@ impl<'tcx> LateLintPass<'tcx> for Regex {\n     }\n }\n \n-#[allow(clippy::cast_possible_truncation)] // truncation very unlikely here\n #[must_use]\n fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u8) -> Span {\n     let offset = u32::from(offset);"}, {"sha": "9f4c5555f11b7c20489ef384432a6e2e0ebc958b", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -98,7 +98,7 @@ fn handle_uninit_vec_pair<'tcx>(\n                 // Check T of Vec<T>\n                 if !is_uninit_value_valid_for_ty(cx, substs.type_at(0)) {\n                     // FIXME: #7698, false positive of the internal lints\n-                    #[allow(clippy::collapsible_span_lint_calls)]\n+                    #[expect(clippy::collapsible_span_lint_calls)]\n                     span_lint_and_then(\n                         cx,\n                         UNINIT_VEC,"}, {"sha": "52585e59566c8128a6df546b3c00871f096f545f", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -130,7 +130,7 @@ fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n         snippet_opt(cx, span.with_hi(ty.span.hi())).map_or((ty.span, Applicability::MaybeIncorrect), |fn_source| {\n             position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n                 (\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "4a3b5383c892b967e91e35d34a6816d6068e91df", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -41,7 +41,7 @@ pub struct UselessConversion {\n \n impl_lint_pass!(UselessConversion => [USELESS_CONVERSION]);\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if e.span.from_expansion() {"}, {"sha": "ba1ff65479d60d69a9d9f9cca9ce4394805992ba", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct UselessVec {\n     pub too_large_for_stack: u64,\n@@ -83,7 +83,7 @@ impl UselessVec {\n         let snippet = match *vec_args {\n             higher::VecArgs::Repeat(elem, len) => {\n                 if let Some((Constant::Int(len_constant), _)) = constant(cx, cx.typeck_results(), len) {\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     if len_constant as u64 * size_of(cx, elem) > self.too_large_for_stack {\n                         return;\n                     }\n@@ -110,7 +110,6 @@ impl UselessVec {\n             },\n             higher::VecArgs::Vec(args) => {\n                 if let Some(last) = args.iter().last() {\n-                    #[allow(clippy::cast_possible_truncation)]\n                     if args.len() as u64 * size_of(cx, last) > self.too_large_for_stack {\n                         return;\n                     }"}, {"sha": "d2493c055a519bf33f7909a93ddcba796a56c69d", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -342,8 +342,6 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == kw::Empty {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    // FIXME: remove this `#[allow(...)]` once the issue #5822 gets fixed\n-                    #[allow(clippy::option_if_let_else)]\n                     let suggestion = if let Some(e) = expr {\n                         snippet_with_applicability(cx, e.span, \"v\", &mut applicability)\n                     } else {\n@@ -528,7 +526,6 @@ impl Write {\n     /// ```rust,ignore\n     /// (Some(\"string to write: {}\"), Some(buf))\n     /// ```\n-    #[allow(clippy::too_many_lines)]\n     fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n         let mut parser = parser::Parser::new(&cx.sess().parse_sess, tts, false, None);\n         let expr = if is_write {"}, {"sha": "b379f8c06c606cfaae8d1199a5122bd1ac03955d", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -242,7 +242,7 @@ pub fn eq_item<K>(l: &Item<K>, r: &Item<K>, mut eq_kind: impl FnMut(&K, &K) -> b\n     eq_id(l.ident, r.ident) && over(&l.attrs, &r.attrs, eq_attr) && eq_vis(&l.vis, &r.vis) && eq_kind(&l.kind, &r.kind)\n }\n \n-#[allow(clippy::too_many_lines)] // Just a big match statement\n+#[expect(clippy::too_many_lines)] // Just a big match statement\n pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     use ItemKind::*;\n     match (l, r) {"}, {"sha": "5bbc2b5b0ebf3a96113b1ba1eea41017d4f1f7fc", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -5,7 +5,6 @@ use rustc_span::sym;\n use std::str::FromStr;\n \n /// Deprecation status of attributes known by Clippy.\n-#[allow(dead_code)]\n pub enum DeprecationStatus {\n     /// Attribute is deprecated\n     Deprecated,"}, {"sha": "720dfe72237c59cbf5e640c37369959dbdf34d71", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -350,7 +350,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         }\n     }\n \n-    #[allow(clippy::cast_possible_wrap)]\n+    #[expect(clippy::cast_possible_wrap)]\n     fn constant_not(&self, o: &Constant, ty: Ty<'_>) -> Option<Constant> {\n         use self::Constant::{Bool, Int};\n         match *o {"}, {"sha": "1a784b6cdda4c5934441a7f3b85378b6c7183087", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -96,7 +96,7 @@ fn fn_eagerness<'tcx>(\n     }\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,"}, {"sha": "951e630080fc41741ecf39864740ae274a1162ae", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -64,7 +64,6 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    #[allow(dead_code)]\n     pub fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n         self.inter_expr().eq_block(left, right)\n     }\n@@ -194,7 +193,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         res\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n         if !self.inner.allow_side_effects && left.span.ctxt() != right.span.ctxt() {\n             return false;\n@@ -359,7 +358,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn eq_qpath(&mut self, left: &QPath<'_>, right: &QPath<'_>) -> bool {\n         match (left, right) {\n             (&QPath::Resolved(ref lty, lpath), &QPath::Resolved(ref rty, rpath)) => {\n@@ -405,7 +404,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.ident.name == right.ident.name && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n     }\n \n-    #[allow(clippy::similar_names)]\n     pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n@@ -560,7 +558,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.rules).hash(&mut self.s);\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr<'_>) {\n         let simple_const = self\n             .maybe_typeck_results"}, {"sha": "b25e9d1a6c551b2609cdbaaecafbca5e0245e526", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -2,6 +2,7 @@\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n #![feature(let_chains)]\n+#![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n@@ -35,7 +36,6 @@ extern crate rustc_typeck;\n #[macro_use]\n pub mod sym_helper;\n \n-#[allow(clippy::module_name_repetitions)]\n pub mod ast_utils;\n pub mod attrs;\n pub mod comparisons;\n@@ -1561,14 +1561,14 @@ pub fn int_bits(tcx: TyCtxt<'_>, ity: rustc_ty::IntTy) -> u64 {\n     Integer::from_int_ty(&tcx, ity).size().bits()\n }\n \n-#[allow(clippy::cast_possible_wrap)]\n+#[expect(clippy::cast_possible_wrap)]\n /// Turn a constant int byte representation into an i128\n pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::IntTy) -> i128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as i128) << amt) >> amt\n }\n \n-#[allow(clippy::cast_sign_loss)]\n+#[expect(clippy::cast_sign_loss)]\n /// clip unused bytes\n pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: rustc_ty::IntTy) -> u128 {\n     let amt = 128 - int_bits(tcx, ity);"}, {"sha": "9b9cbff2d146238a55b7a8d666d3cc3a0ceba645", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -43,9 +43,9 @@ pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\", \"from_iter\"];\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCREADEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncReadExt\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCWRITEEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncWriteExt\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n@@ -63,7 +63,7 @@ pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n #[cfg(feature = \"internal\")]\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n@@ -117,17 +117,17 @@ pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const REFCELL_REF: [&str; 3] = [\"core\", \"cell\", \"Ref\"];\n pub const REFCELL_REFMUT: [&str; 3] = [\"core\", \"cell\", \"RefMut\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n /// Preferably use the diagnostic item `sym::Result` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n@@ -169,9 +169,9 @@ pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const TOKIO_IO_ASYNCREADEXT: [&str; 5] = [\"tokio\", \"io\", \"util\", \"async_read_ext\", \"AsyncReadExt\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const TOKIO_IO_ASYNCWRITEEXT: [&str; 5] = [\"tokio\", \"io\", \"util\", \"async_write_ext\", \"AsyncWriteExt\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];"}, {"sha": "04ef2f57447c6da80ad7b726e43cfba015f10cf0", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -137,7 +137,7 @@ pub fn position_before_rarrow(s: &str) -> Option<usize> {\n }\n \n /// Reindent a multiline string with possibility of ignoring the first line.\n-#[allow(clippy::needless_pass_by_value)]\n+#[expect(clippy::needless_pass_by_value)]\n pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n     let s_space = reindent_multiline_inner(&s, ignore_first, indent, ' ');\n     let s_tab = reindent_multiline_inner(&s_space, ignore_first, indent, '\\t');"}, {"sha": "855d3657dd40cf8ee60711d7e961cc448a338d66", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -50,7 +50,7 @@ impl Display for Sugg<'_> {\n     }\n }\n \n-#[allow(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n+#[expect(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Self> {\n@@ -318,7 +318,6 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n-    #[allow(dead_code)]\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {\n             ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, end),\n@@ -886,7 +885,6 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    #[allow(clippy::too_many_lines)]\n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             let map = self.cx.tcx.hir();"}, {"sha": "5767a573a2758e7c32d8d960bd445124059490b2", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -603,7 +603,7 @@ impl core::ops::Add<u32> for EnumValue {\n }\n \n /// Attempts to read the given constant as though it were an an enum value.\n-#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n+#[expect(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n     if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n         match tcx.type_of(id).kind() {"}, {"sha": "abba9b005582874222daec969927bbb267816a22", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03960ebab26a1b1d2d43540f47aca6670bdc1e54/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=03960ebab26a1b1d2d43540f47aca6670bdc1e54", "patch": "@@ -44,7 +44,6 @@ struct MutVarsDelegate {\n }\n \n impl<'tcx> MutVarsDelegate {\n-    #[allow(clippy::similar_names)]\n     fn update(&mut self, cat: &PlaceWithHirId<'tcx>) {\n         match cat.place.base {\n             PlaceBase::Local(id) => {"}]}