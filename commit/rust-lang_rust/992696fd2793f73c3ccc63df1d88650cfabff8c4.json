{"sha": "992696fd2793f73c3ccc63df1d88650cfabff8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjY5NmZkMjc5M2Y3M2MzY2NjNjNkZjFkODg2NTBjZmFiZmY4YzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T23:15:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `Module::import_resolutions`", "tree": {"sha": "9fe21ba38905c0ac3ad4dc2fb1adcf789d9debc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe21ba38905c0ac3ad4dc2fb1adcf789d9debc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992696fd2793f73c3ccc63df1d88650cfabff8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992696fd2793f73c3ccc63df1d88650cfabff8c4", "html_url": "https://github.com/rust-lang/rust/commit/992696fd2793f73c3ccc63df1d88650cfabff8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992696fd2793f73c3ccc63df1d88650cfabff8c4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee8d2b4b9c1805aef1407d7b8ca476d1490ffa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee8d2b4b9c1805aef1407d7b8ca476d1490ffa1", "html_url": "https://github.com/rust-lang/rust/commit/8ee8d2b4b9c1805aef1407d7b8ca476d1490ffa1"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "e4541b8e1b86066bf33b7a961c5930486546809e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/992696fd2793f73c3ccc63df1d88650cfabff8c4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992696fd2793f73c3ccc63df1d88650cfabff8c4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=992696fd2793f73c3ccc63df1d88650cfabff8c4", "patch": "@@ -442,7 +442,7 @@ struct Module {\n     anonymous_children: RefCell<HashMap<NodeId,@Module>>,\n \n     // The status of resolving each import in this module.\n-    import_resolutions: @mut HashMap<Name, @mut ImportResolution>,\n+    import_resolutions: RefCell<HashMap<Name, @mut ImportResolution>>,\n \n     // The number of unresolved globs that this module exports.\n     glob_count: Cell<uint>,\n@@ -472,7 +472,7 @@ impl Module {\n             imports: @mut ~[],\n             external_module_children: RefCell::new(HashMap::new()),\n             anonymous_children: RefCell::new(HashMap::new()),\n-            import_resolutions: @mut HashMap::new(),\n+            import_resolutions: RefCell::new(HashMap::new()),\n             glob_count: Cell::new(0),\n             resolved_import_count: Cell::new(0),\n             populated: Cell::new(!external),\n@@ -1951,7 +1951,9 @@ impl Resolver {\n                        self.idents_to_str(directive.module_path),\n                        self.session.str_of(target));\n \n-                match module_.import_resolutions.find(&target.name) {\n+                let mut import_resolutions = module_.import_resolutions\n+                                                    .borrow_mut();\n+                match import_resolutions.get().find(&target.name) {\n                     Some(&resolution) => {\n                         debug!(\"(building import directive) bumping \\\n                                 reference\");\n@@ -1965,7 +1967,8 @@ impl Resolver {\n                         debug!(\"(building import directive) creating new\");\n                         let resolution = @mut ImportResolution::new(id, is_public);\n                         resolution.outstanding_references = 1;\n-                        module_.import_resolutions.insert(target.name, resolution);\n+                        import_resolutions.get().insert(target.name,\n+                                                        resolution);\n                     }\n                 }\n             }\n@@ -2290,7 +2293,9 @@ impl Resolver {\n                 // Now search the exported imports within the containing\n                 // module.\n \n-                match containing_module.import_resolutions.find(&source.name) {\n+                let import_resolutions = containing_module.import_resolutions\n+                                                          .borrow();\n+                match import_resolutions.get().find(&source.name) {\n                     None => {\n                         // The containing module definitely doesn't have an\n                         // exported import with the name in question. We can\n@@ -2385,8 +2390,11 @@ impl Resolver {\n         }\n \n         // We've successfully resolved the import. Write the results in.\n-        assert!(module_.import_resolutions.contains_key(&target.name));\n-        let import_resolution = module_.import_resolutions.get(&target.name);\n+        let import_resolution = {\n+            let import_resolutions = module_.import_resolutions.borrow();\n+            assert!(import_resolutions.get().contains_key(&target.name));\n+            import_resolutions.get().get_copy(&target.name)\n+        };\n \n         match value_result {\n             BoundResult(target_module, name_bindings) => {\n@@ -2484,8 +2492,10 @@ impl Resolver {\n         assert_eq!(containing_module.glob_count.get(), 0);\n \n         // Add all resolved imports from the containing module.\n-        for (ident, target_import_resolution) in containing_module.import_resolutions.iter() {\n-\n+        let import_resolutions = containing_module.import_resolutions\n+                                                  .borrow();\n+        for (ident, target_import_resolution) in import_resolutions.get()\n+                                                                   .iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {:?} into `{}`\",\n                    target_import_resolution.type_target.is_none(),\n@@ -2497,7 +2507,9 @@ impl Resolver {\n             }\n \n             // Here we merge two import resolutions.\n-            match module_.import_resolutions.find(ident) {\n+            let mut import_resolutions = module_.import_resolutions\n+                                                .borrow_mut();\n+            match import_resolutions.get().find(ident) {\n                 None => {\n                     // Simple: just copy the old import resolution.\n                     let new_import_resolution =\n@@ -2507,7 +2519,7 @@ impl Resolver {\n                     new_import_resolution.type_target =\n                         target_import_resolution.type_target;\n \n-                    module_.import_resolutions.insert\n+                    import_resolutions.get().insert\n                         (*ident, new_import_resolution);\n                 }\n                 Some(&dest_import_resolution) => {\n@@ -2539,13 +2551,15 @@ impl Resolver {\n \n         let merge_import_resolution = |name, name_bindings: @NameBindings| {\n             let dest_import_resolution;\n-            match module_.import_resolutions.find(&name) {\n+            let mut import_resolutions = module_.import_resolutions\n+                                                .borrow_mut();\n+            match import_resolutions.get().find(&name) {\n                 None => {\n                     // Create a new import resolution from this child.\n                     dest_import_resolution = @mut ImportResolution::new(id,\n                                                                         is_public);\n-                    module_.import_resolutions.insert\n-                        (name, dest_import_resolution);\n+                    import_resolutions.get().insert(name,\n+                                                    dest_import_resolution);\n                 }\n                 Some(&existing_import_resolution) => {\n                     dest_import_resolution = existing_import_resolution;\n@@ -2857,7 +2871,8 @@ impl Resolver {\n         // all its imports in the usual way; this is because chains of\n         // adjacent import statements are processed as though they mutated the\n         // current scope.\n-        match module_.import_resolutions.find(&name.name) {\n+        let import_resolutions = module_.import_resolutions.borrow();\n+        match import_resolutions.get().find(&name.name) {\n             None => {\n                 // Not found; continue.\n             }\n@@ -3130,7 +3145,8 @@ impl Resolver {\n         }\n \n         // Check the list of resolved imports.\n-        match module_.import_resolutions.find(&name.name) {\n+        let import_resolutions = module_.import_resolutions.borrow();\n+        match import_resolutions.get().find(&name.name) {\n             Some(import_resolution) => {\n                 if import_resolution.is_public &&\n                         import_resolution.outstanding_references != 0 {\n@@ -3315,8 +3331,11 @@ impl Resolver {\n     fn add_exports_for_module(&mut self,\n                               exports2: &mut ~[Export2],\n                               module_: @Module) {\n-        for (name, importresolution) in module_.import_resolutions.iter() {\n-            if !importresolution.is_public { continue }\n+        let import_resolutions = module_.import_resolutions.borrow();\n+        for (name, importresolution) in import_resolutions.get().iter() {\n+            if !importresolution.is_public {\n+                continue\n+            }\n             let xs = [TypeNS, ValueNS];\n             for &ns in xs.iter() {\n                 match importresolution.target_for_namespace(ns) {\n@@ -4673,7 +4692,9 @@ impl Resolver {\n         }\n \n         // Next, search import resolutions.\n-        match containing_module.import_resolutions.find(&name.name) {\n+        let import_resolutions = containing_module.import_resolutions\n+                                                  .borrow();\n+        match import_resolutions.get().find(&name.name) {\n             Some(import_resolution) if import_resolution.is_public => {\n                 match (*import_resolution).target_for_namespace(namespace) {\n                     Some(target) => {\n@@ -5300,7 +5321,10 @@ impl Resolver {\n                 }\n \n                 // Look for imports.\n-                for (_, &import_resolution) in search_module.import_resolutions.iter() {\n+                let import_resolutions = search_module.import_resolutions\n+                                                      .borrow();\n+                for (_, &import_resolution) in import_resolutions.get()\n+                                                                 .iter() {\n                     match import_resolution.target_for_namespace(TypeNS) {\n                         None => {\n                             // Continue.\n@@ -5493,7 +5517,8 @@ impl Resolver {\n         }\n \n         debug!(\"Import resolutions:\");\n-        for (name, import_resolution) in module_.import_resolutions.iter() {\n+        let import_resolutions = module_.import_resolutions.borrow();\n+        for (name, import_resolution) in import_resolutions.get().iter() {\n             let value_repr;\n             match import_resolution.target_for_namespace(ValueNS) {\n                 None => { value_repr = ~\"\"; }"}]}