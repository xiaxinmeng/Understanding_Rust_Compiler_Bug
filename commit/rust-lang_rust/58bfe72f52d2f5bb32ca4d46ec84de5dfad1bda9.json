{"sha": "58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "node_id": "C_kwDOAAsO6NoAKDU4YmZlNzJmNTJkMmY1YmIzMmNhNGQ0NmVjODRkZTVkZmFkMWJkYTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-06T03:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-06T03:13:29Z"}, "message": "Rollup merge of #91939 - GKFX:feature-91866, r=cjgillot\n\nClarify error on casting larger integers to char\n\nCloses #91836 with changes to E0604.md and a `span_help`.", "tree": {"sha": "ad956d6f15e1dd0d245aa5a0eee45d885d5d4925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad956d6f15e1dd0d245aa5a0eee45d885d5d4925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/zzZCRBK7hj4Ov3rIwAANW4IAKxX7+8pUWXTV0kkkIC9zPld\nS73mU0eh2xt0Slfj6etQOBW5wRStGhbkVAywlzeuqgaiEXXDoLavqLkQPp8BHMwk\nJPesB70/BgBE/DMD3FIuVvLEWxSFyWfm3rMqdZP3GdvjohVJ0wJ1Hzp0ar9N05/J\nQyNEmpD9GHH4O6W3BQ48b3BjZb0okmq68UnxY42Ao7JfTNHUiwujZuvfXSmDpMnP\nVXtMEZ2HHwQgEYAAHMTVZWS6ySXxl6r1SFnCxnkdt1DeBBKPTW+O6jNe5xZQekhI\nR5wPEoclRVTp2HsLlg7dIg/ItXHufxOKgkm39Jab1p+Zne6sZ5khArRTyyc0yoA=\n=PX6D\n-----END PGP SIGNATURE-----\n", "payload": "tree ad956d6f15e1dd0d245aa5a0eee45d885d5d4925\nparent 88fb06a1f331926bccb448acdb52966fd1ec8a92\nparent badb81a6129b84a9f01223ab73a56ffe52bf33ce\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644117209 +0100\ncommitter GitHub <noreply@github.com> 1644117209 +0100\n\nRollup merge of #91939 - GKFX:feature-91866, r=cjgillot\n\nClarify error on casting larger integers to char\n\nCloses #91836 with changes to E0604.md and a `span_help`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "html_url": "https://github.com/rust-lang/rust/commit/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fb06a1f331926bccb448acdb52966fd1ec8a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb06a1f331926bccb448acdb52966fd1ec8a92", "html_url": "https://github.com/rust-lang/rust/commit/88fb06a1f331926bccb448acdb52966fd1ec8a92"}, {"sha": "badb81a6129b84a9f01223ab73a56ffe52bf33ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/badb81a6129b84a9f01223ab73a56ffe52bf33ce", "html_url": "https://github.com/rust-lang/rust/commit/badb81a6129b84a9f01223ab73a56ffe52bf33ce"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "806f0001c60fda3ac92c55637efdcc4b6c79fdf2", "filename": "compiler/rustc_error_codes/src/error_codes/E0604.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -6,11 +6,16 @@ Erroneous code example:\n 0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n ```\n \n-As the error message indicates, only `u8` can be cast into `char`. Example:\n+`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n+0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\n+those ranges so only `u8` may be cast to `char`.\n+\n+To allow larger values, use `char::from_u32`, which checks the value is valid.\n \n ```\n-let c = 86u8 as char; // ok!\n-assert_eq!(c, 'V');\n+assert_eq!(86u8 as char, 'V'); // ok!\n+assert_eq!(char::from_u32(0x3B1), Some('\u03b1')); // ok!\n+assert_eq!(char::from_u32(0xD800), None); // not a USV.\n ```\n \n For more information about casts, take a look at the Type cast section in"}, {"sha": "be0b7733579b5cf321a33ab6b7f2c18ce598db52", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -328,16 +328,28 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.emit();\n             }\n             CastError::CastToChar => {\n-                type_error_struct!(\n+                let mut err = type_error_struct!(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     E0604,\n                     \"only `u8` can be cast as `char`, not `{}`\",\n                     self.expr_ty\n-                )\n-                .span_label(self.span, \"invalid cast\")\n-                .emit();\n+                );\n+                err.span_label(self.span, \"invalid cast\");\n+                if self.expr_ty.is_numeric() {\n+                    err.span_help(\n+                        self.span,\n+                        if self.expr_ty == fcx.tcx.types.i8 {\n+                            \"try casting from `u8` instead\"\n+                        } else if self.expr_ty == fcx.tcx.types.u32 {\n+                            \"try `char::from_u32` instead\"\n+                        } else {\n+                            \"try `char::from_u32` instead (via a `u32`)\"\n+                        },\n+                    );\n+                }\n+                err.emit();\n             }\n             CastError::NonScalar => {\n                 let mut err = type_error_struct!("}, {"sha": "f59ff329d18ace8ee4731ebdaf9724d0c53c3e82", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -17,6 +17,12 @@ error[E0604]: only `u8` can be cast as `char`, not `i8`\n    |\n LL |     : [u32; 5i8 as char as usize]\n    |             ^^^^^^^^^^^ invalid cast\n+   |\n+help: try casting from `u8` instead\n+  --> $DIR/const-eval-overflow-4b.rs:22:13\n+   |\n+LL |     : [u32; 5i8 as char as usize]\n+   |             ^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d715d28b73c01a36c432262527b6ad5ae9e7a05a", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -3,6 +3,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     1u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/E0604.rs:2:5\n+   |\n+LL |     1u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ddb6fc99b004d4459e24dfd28c715ed69937ca6", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -58,6 +58,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     0u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/error-festival.rs:25:5\n+   |\n+LL |     0u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `u8` as `Vec<u8>`\n   --> $DIR/error-festival.rs:29:5"}, {"sha": "6dbf24baf2315d8c05d7a3481fb96107b8062d0e", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=58bfe72f52d2f5bb32ca4d46ec84de5dfad1bda9", "patch": "@@ -99,6 +99,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     let _ = 0x61u32 as char;\n    |             ^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/cast-rfc0401.rs:41:13\n+   |\n+LL |     let _ = 0x61u32 as char;\n+   |             ^^^^^^^^^^^^^^^\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}]}