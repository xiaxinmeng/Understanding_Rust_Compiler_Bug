{"sha": "3f11c4b93a8c0cc654c24d60c86809f109101c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMTFjNGI5M2E4YzBjYzY1NGMyNGQ2MGM4NjgwOWYxMDkxMDFjNTU=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-15T17:28:00Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-17T19:37:07Z"}, "message": "Updated rustfmt to account for changes from rust-lang/rust#44766", "tree": {"sha": "a88bbdb3d4bda55b21d3a504521c9eec35a8b8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88bbdb3d4bda55b21d3a504521c9eec35a8b8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f11c4b93a8c0cc654c24d60c86809f109101c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f11c4b93a8c0cc654c24d60c86809f109101c55", "html_url": "https://github.com/rust-lang/rust/commit/3f11c4b93a8c0cc654c24d60c86809f109101c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f11c4b93a8c0cc654c24d60c86809f109101c55/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560b0541470345277a6b0d7c721ae91c0bfdd4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/560b0541470345277a6b0d7c721ae91c0bfdd4ff", "html_url": "https://github.com/rust-lang/rust/commit/560b0541470345277a6b0d7c721ae91c0bfdd4ff"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "f05855921721286d44a06828f66a9c847e817ee1", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f11c4b93a8c0cc654c24d60c86809f109101c55/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f11c4b93a8c0cc654c24d60c86809f109101c55/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3f11c4b93a8c0cc654c24d60c86809f109101c55", "patch": "@@ -184,25 +184,29 @@ impl<'a> FnSig<'a> {\n         }\n     }\n \n-    pub fn from_method_sig(method_sig: &'a ast::MethodSig) -> FnSig {\n+    pub fn from_method_sig(\n+        method_sig: &'a ast::MethodSig,\n+        generics: &'a ast::Generics,\n+    ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.unsafety,\n             constness: method_sig.constness.node,\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.abi,\n             decl: &*method_sig.decl,\n-            generics: &method_sig.generics,\n+            generics: generics,\n             visibility: ast::Visibility::Inherited,\n         }\n     }\n \n     pub fn from_fn_kind(\n         fn_kind: &'a visit::FnKind,\n+        generics: &'a ast::Generics,\n         decl: &'a ast::FnDecl,\n         defualtness: ast::Defaultness,\n     ) -> FnSig<'a> {\n         match *fn_kind {\n-            visit::FnKind::ItemFn(_, generics, unsafety, constness, abi, visibility, _) => FnSig {\n+            visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n                 decl: decl,\n                 generics: generics,\n                 abi: abi,\n@@ -212,7 +216,7 @@ impl<'a> FnSig<'a> {\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, ref method_sig, vis, _) => {\n-                let mut fn_sig = FnSig::from_method_sig(method_sig);\n+                let mut fn_sig = FnSig::from_method_sig(method_sig, generics);\n                 fn_sig.defaultness = defualtness;\n                 if let Some(vis) = vis {\n                     fn_sig.visibility = vis.clone();\n@@ -338,6 +342,7 @@ impl<'a> FmtVisitor<'a> {\n         indent: Indent,\n         ident: ast::Ident,\n         sig: &ast::MethodSig,\n+        generics: &ast::Generics,\n         span: Span,\n     ) -> Option<String> {\n         // Drop semicolon or it will be interpreted as comment.\n@@ -348,7 +353,7 @@ impl<'a> FmtVisitor<'a> {\n             &context,\n             indent,\n             ident,\n-            &FnSig::from_method_sig(sig),\n+            &FnSig::from_method_sig(sig, generics),\n             span,\n             false,\n             false,"}, {"sha": "d678e3c6c0d2d4b8473a1ba521a20cf4f5e8c57e", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f11c4b93a8c0cc654c24d60c86809f109101c55/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f11c4b93a8c0cc654c24d60c86809f109101c55/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3f11c4b93a8c0cc654c24d60c86809f109101c55", "patch": "@@ -229,6 +229,7 @@ impl<'a> FmtVisitor<'a> {\n     fn visit_fn(\n         &mut self,\n         fk: visit::FnKind,\n+        generics: &ast::Generics,\n         fd: &ast::FnDecl,\n         s: Span,\n         _: ast::NodeId,\n@@ -238,12 +239,12 @@ impl<'a> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, _, _, _, _, _, b) => {\n+            visit::FnKind::ItemFn(ident, _, _, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n+                    &FnSig::from_fn_kind(&fk, generics, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )\n@@ -253,7 +254,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.rewrite_fn(\n                     indent,\n                     ident,\n-                    &FnSig::from_fn_kind(&fk, fd, defaultness),\n+                    &FnSig::from_fn_kind(&fk, generics, fd, defaultness),\n                     mk_sp(s.lo(), b.span.lo()),\n                     b,\n                 )\n@@ -411,15 +412,8 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n                 self.visit_fn(\n-                    visit::FnKind::ItemFn(\n-                        item.ident,\n-                        generics,\n-                        unsafety,\n-                        constness,\n-                        abi,\n-                        &item.vis,\n-                        body,\n-                    ),\n+                    visit::FnKind::ItemFn(item.ident, unsafety, constness, abi, &item.vis, body),\n+                    generics,\n                     decl,\n                     item.span,\n                     item.id,\n@@ -490,12 +484,14 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::TraitItemKind::Method(ref sig, None) => {\n                 let indent = self.block_indent;\n-                let rewrite = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n+                let rewrite =\n+                    self.rewrite_required_fn(indent, ti.ident, sig, &ti.generics, ti.span);\n                 self.push_rewrite(ti.span, rewrite);\n             }\n             ast::TraitItemKind::Method(ref sig, Some(ref body)) => {\n                 self.visit_fn(\n                     visit::FnKind::Method(ti.ident, sig, None, body),\n+                    &ti.generics,\n                     &sig.decl,\n                     ti.span,\n                     ti.id,\n@@ -531,6 +527,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.visit_fn(\n                     visit::FnKind::Method(ii.ident, sig, Some(&ii.vis), body),\n+                    &ii.generics,\n                     &sig.decl,\n                     ii.span,\n                     ii.id,"}]}