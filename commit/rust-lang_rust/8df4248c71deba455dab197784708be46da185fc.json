{"sha": "8df4248c71deba455dab197784708be46da185fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZjQyNDhjNzFkZWJhNDU1ZGFiMTk3Nzg0NzA4YmU0NmRhMTg1ZmM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-28T23:09:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:33Z"}, "message": "Some cleanup", "tree": {"sha": "ec439dee17a2896188f63702ad9c3fb29e26e65c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec439dee17a2896188f63702ad9c3fb29e26e65c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8df4248c71deba455dab197784708be46da185fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwSkACgkQtAh+UQ6Y\nsWSquBAAg3+aspjp1y8YuuCqG83WvQnleMJkQJtb2j3ENP6gy7uzRbDVG85MjntL\nwk82I58/RpqdDIIs0x5pZFc0etspLgV4ULdf1UzG2BugoBkhUqU3u8ULYHgRQ/ev\nGhebzEOh6joJFyoajmFzLlT7NeRoaOWBEJWDVC6RadTMu5BOWUowyADiE/FWBHFc\ng2ufAsmWYSqA4SO1cXJ+DEjvutEhoUos4huJs8z/yl8rt8szDgooruU/8mn+eBuE\nNFHMdYhE4BSGD49+ajshvLGMDYiJw1PccpFt1feR5SudNiXfN4NDMBk4rXBti7o+\n9/Ok20TVuPJEsl+NGMLzDLJo8cCMbI3Uq/99Lx/shRM1IhLSD7SGpC3OzIGqAwfd\nF0+WvZD0cM0Nmdqo8974S2TXF9CWwXy1jszBy4gMEjVhmKUJ0v8NfUhURUrKRYNC\nl1DSCm1AmEbPNi4oraCsW8s0+0ABnbfKhXou7AwVc2zZsGBrFwzl22gEYPGMFUr2\nPV1BGp8Z3TWzqAIAvD4e38at5O5chJxucuRAMUmRDZxpnONN5v00sr/pWC/5O8a7\noCn5R+AFw1o2Cp4GJr4aRw3TzCKbvY4j01Cl8dMnKKG8lGIJHKtEiGsC8fWnpdFj\n7xiMUZO9LDL4AaSJxjmEjVnHdS66/dJujQQSn2oNXKTq4FqfT8s=\n=/f3h\n-----END PGP SIGNATURE-----", "payload": "tree ec439dee17a2896188f63702ad9c3fb29e26e65c\nparent fe3e1c1cc33d0627af0e0e78582f5c64db0db2ee\nauthor Aaron Hill <aa1ronham@gmail.com> 1572304194 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503273 -0500\n\nSome cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8df4248c71deba455dab197784708be46da185fc", "html_url": "https://github.com/rust-lang/rust/commit/8df4248c71deba455dab197784708be46da185fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8df4248c71deba455dab197784708be46da185fc/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3e1c1cc33d0627af0e0e78582f5c64db0db2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3e1c1cc33d0627af0e0e78582f5c64db0db2ee", "html_url": "https://github.com/rust-lang/rust/commit/fe3e1c1cc33d0627af0e0e78582f5c64db0db2ee"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "812774fab8de45c51d441944f1ba91c25d2095c9", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=8df4248c71deba455dab197784708be46da185fc", "patch": "@@ -24,7 +24,7 @@ use crate::interpret::{self,\n     PlaceTy, MPlaceTy, OpTy, ImmTy, Immediate, Scalar, Pointer,\n     RawConst, ConstValue, Machine,\n     InterpResult, InterpErrorInfo, GlobalId, InterpCx, StackPopCleanup,\n-    Allocation, AllocId, MemoryKind, Memory, StackPopInfo,\n+    Allocation, AllocId, MemoryKind, Memory,\n     snapshot, RefTracking, intern_const_alloc_recursive,\n };\n \n@@ -470,16 +470,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     fn stack_push(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n-\n-    /// Called immediately before a stack frame gets popped.\n-    #[inline(always)]\n-    fn stack_pop(\n-        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _extra: (),\n-    ) -> InterpResult<'tcx, StackPopInfo> {\n-        // Const-eval mode does not support unwinding from panics\n-        Ok(StackPopInfo::Normal)\n-    }\n }\n \n /// Extracts a field of a (variant of a) const."}, {"sha": "6598b0f99f2a99e4e73606ed637672c7fa39ad74", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8df4248c71deba455dab197784708be46da185fc", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::fx::FxHashMap;\n \n use super::{\n     Immediate, Operand, MemPlace, MPlaceTy, Place, PlaceTy, ScalarMaybeUndef,\n-    Memory, Machine, PointerArithmetic, FnVal, StackPopInfo\n+    Memory, Machine, StackPopInfo\n };\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n@@ -86,7 +86,7 @@ pub struct Frame<'mir, 'tcx, Tag=(), Extra=()> {\n     /// The block that is currently executed (or will be executed after the above call stacks\n     /// return).\n     /// If this is `None`, we are unwinding and this function doesn't need any clean-up.\n-    /// Just continue the same as with\n+    /// Just continue the same as with `Resume`.\n     pub block: Option<mir::BasicBlock>,\n \n     /// The index of the currently evaluated statement.\n@@ -563,7 +563,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// `cleanup` block for the function, which is responsible for running\n     /// `Drop` impls for any locals that have been initialized at this point.\n     /// The cleanup block ends with a special `Resume` terminator, which will\n-    /// cause us to continue unwinding where we left off.\n+    /// cause us to continue unwinding.\n     pub(super) fn pop_stack_frame(\n         &mut self,\n         unwinding: bool\n@@ -830,25 +830,4 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames\n     }\n-\n-    /// Resolve the function at the specified slot in the provided\n-    /// vtable. An index of '0' corresponds to the first method\n-    /// declared in the trait of the provided vtable\n-    pub fn get_vtable_slot(\n-        &self,\n-        vtable: Scalar<M::PointerTag>,\n-        idx: usize\n-    ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n-        let ptr_size = self.pointer_size();\n-        // Skip over the 'drop_ptr', 'size', and 'align' fields\n-        let vtable_slot = vtable.ptr_offset(ptr_size * (idx as u64 + 3), self)?;\n-        let vtable_slot = self.memory.check_ptr_access(\n-            vtable_slot,\n-            ptr_size,\n-            self.tcx.data_layout.pointer_align.abi,\n-        )?.expect(\"cannot be a ZST\");\n-        let fn_ptr = self.memory.get(vtable_slot.alloc_id)?\n-            .read_ptr_sized(self, vtable_slot)?.not_undef()?;\n-        Ok(self.memory.get_fn(fn_ptr)?)\n-    }\n }"}, {"sha": "18f831f8257bc64ed5c5397b0d06f24475050055", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=8df4248c71deba455dab197784708be46da185fc", "patch": "@@ -268,9 +268,12 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Called immediately after a stack frame gets popped\n     fn stack_pop(\n-        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        extra: Self::FrameExtra,\n-    ) -> InterpResult<'tcx, StackPopInfo>;\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _extra: Self::FrameExtra,\n+    ) -> InterpResult<'tcx, StackPopInfo> {\n+        // By default, we do not support unwinding from panics\n+        Ok(StackPopInfo::Normal)\n+    }\n \n     fn int_to_ptr(\n         _mem: &Memory<'mir, 'tcx, Self>,"}, {"sha": "55c127c56f6087f6e52161cbf9ea9fe0c0f92894", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8df4248c71deba455dab197784708be46da185fc/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=8df4248c71deba455dab197784708be46da185fc", "patch": "@@ -97,6 +97,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(vtable)\n     }\n \n+    /// Resolve the function at the specified slot in the provided\n+    /// vtable. An index of '0' corresponds to the first method\n+    /// declared in the trait of the provided vtable\n+    pub fn get_vtable_slot(\n+        &self,\n+        vtable: Scalar<M::PointerTag>,\n+        idx: usize\n+    ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {\n+        let ptr_size = self.pointer_size();\n+        // Skip over the 'drop_ptr', 'size', and 'align' fields\n+        let vtable_slot = vtable.ptr_offset(ptr_size * (idx as u64 + 3), self)?;\n+        let vtable_slot = self.memory.check_ptr_access(\n+            vtable_slot,\n+            ptr_size,\n+            self.tcx.data_layout.pointer_align.abi,\n+        )?.expect(\"cannot be a ZST\");\n+        let fn_ptr = self.memory.get(vtable_slot.alloc_id)?\n+            .read_ptr_sized(self, vtable_slot)?.not_undef()?;\n+        Ok(self.memory.get_fn(fn_ptr)?)\n+    }\n+\n     /// Returns the drop fn instance as well as the actual dynamic type\n     pub fn read_drop_type_from_vtable(\n         &self,"}]}