{"sha": "29d7fed994bb35c1cf7e686a3fe967ddff734d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDdmZWQ5OTRiYjM1YzFjZjdlNjg2YTNmZTk2N2RkZmY3MzRkMDE=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-03-31T10:21:12Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-05-06T15:17:48Z"}, "message": "Make overflow behaviour more obvious in the iterator module of `libcore`\n\nExplicitely spell out behaviour on overflow for `usize`-returning iterator\nfunctions.\n\nMention that panics are guaranteed if debug assertions are active, otherwise a\nwrong result might be returned.", "tree": {"sha": "75aa7ed02533be3382defa41dfdcd87d5a1f7c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75aa7ed02533be3382defa41dfdcd87d5a1f7c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d7fed994bb35c1cf7e686a3fe967ddff734d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d7fed994bb35c1cf7e686a3fe967ddff734d01", "html_url": "https://github.com/rust-lang/rust/commit/29d7fed994bb35c1cf7e686a3fe967ddff734d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d7fed994bb35c1cf7e686a3fe967ddff734d01/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afa669524f550744834b5cd031dc3918e65905f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afa669524f550744834b5cd031dc3918e65905f", "html_url": "https://github.com/rust-lang/rust/commit/6afa669524f550744834b5cd031dc3918e65905f"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "24d9c9a7e7ce756f85e3722057f75e28b32aafe0", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/29d7fed994bb35c1cf7e686a3fe967ddff734d01/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d7fed994bb35c1cf7e686a3fe967ddff734d01/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=29d7fed994bb35c1cf7e686a3fe967ddff734d01", "patch": "@@ -106,6 +106,18 @@ pub trait Iterator {\n \n     /// Counts the number of elements in this iterator.\n     ///\n+    /// # Overflow Behavior\n+    ///\n+    /// The method does no guarding against overflows, so counting elements of\n+    /// an iterator with more than `usize::MAX` elements either produces the\n+    /// wrong result or panics. If debug assertions are enabled, a panic is\n+    /// guaranteed.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This functions might panic if the iterator has more than `usize::MAX`\n+    /// elements.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -115,7 +127,8 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn count(self) -> usize where Self: Sized {\n-        self.fold(0, |cnt, _x| cnt + 1)\n+        // Might overflow.\n+        self.fold(0, |cnt, _| cnt + 1)\n     }\n \n     /// Loops through the entire iterator, returning the last element.\n@@ -281,6 +294,17 @@ pub trait Iterator {\n     /// different sized integer, the `zip` function provides similar\n     /// functionality.\n     ///\n+    /// # Overflow Behavior\n+    ///\n+    /// The method does no guarding against overflows, so enumerating more than\n+    /// `usize::MAX` elements either produces the wrong result or panics. If\n+    /// debug assertions are enabled, a panic is guaranteed.\n+    ///\n+    /// # Panics\n+    ///\n+    /// The returned iterator might panic if the to-be-returned index would\n+    /// overflow a `usize`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -293,7 +317,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn enumerate(self) -> Enumerate<Self> where Self: Sized {\n-        Enumerate{iter: self, count: 0}\n+        Enumerate { iter: self, count: 0 }\n     }\n \n     /// Creates an iterator that has a `.peek()` method\n@@ -672,6 +696,18 @@ pub trait Iterator {\n     ///\n     /// Does not consume the iterator past the first found element.\n     ///\n+    /// # Overflow Behavior\n+    ///\n+    /// The method does no guarding against overflows, so if there are more\n+    /// than `usize::MAX` non-matching elements, it either produces the wrong\n+    /// result or panics. If debug assertions are enabled, a panic is\n+    /// guaranteed.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This functions might panic if the iterator has more than `usize::MAX`\n+    /// non-matching elements.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -685,12 +721,11 @@ pub trait Iterator {\n         Self: Sized,\n         P: FnMut(Self::Item) -> bool,\n     {\n-        let mut i = 0;\n-        for x in self.by_ref() {\n+        // `enumerate` might overflow.\n+        for (i, x) in self.by_ref().enumerate() {\n             if predicate(x) {\n                 return Some(i);\n             }\n-            i += 1;\n         }\n         None\n     }\n@@ -720,6 +755,8 @@ pub trait Iterator {\n             if predicate(v) {\n                 return Some(i - 1);\n             }\n+            // No need for an overflow check here, because `ExactSizeIterator`\n+            // implies that the number of elements fits into a `usize`.\n             i -= 1;\n         }\n         None\n@@ -1783,17 +1820,27 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Enumerate<I> {\n     iter: I,\n-    count: usize\n+    count: usize,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Enumerate<I> where I: Iterator {\n     type Item = (usize, <I as Iterator>::Item);\n \n+    /// # Overflow Behavior\n+    ///\n+    /// The method does no guarding against overflows, so enumerating more than\n+    /// `usize::MAX` elements either produces the wrong result or panics. If\n+    /// debug assertions are enabled, a panic is guaranteed.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Might panic if the index of the element overflows a `usize`.\n     #[inline]\n     fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {\n         self.iter.next().map(|a| {\n             let ret = (self.count, a);\n+            // Possible undefined overflow.\n             self.count += 1;\n             ret\n         })\n@@ -1827,6 +1874,8 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n     fn next_back(&mut self) -> Option<(usize, <I as Iterator>::Item)> {\n         self.iter.next_back().map(|a| {\n             let len = self.iter.len();\n+            // Can safely add, `ExactSizeIterator` promises that the number of\n+            // elements fits into a `usize`.\n             (self.count + len, a)\n         })\n     }\n@@ -1841,6 +1890,9 @@ impl<I> RandomAccessIterator for Enumerate<I> where I: RandomAccessIterator {\n \n     #[inline]\n     fn idx(&mut self, index: usize) -> Option<(usize, <I as Iterator>::Item)> {\n+        // Can safely add, `ExactSizeIterator` (ancestor of\n+        // `RandomAccessIterator`) promises that the number of elements fits\n+        // into a `usize`.\n         self.iter.idx(index).map(|a| (self.count + index, a))\n     }\n }"}]}