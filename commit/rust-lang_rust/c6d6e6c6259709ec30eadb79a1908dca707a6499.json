{"sha": "c6d6e6c6259709ec30eadb79a1908dca707a6499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZDZlNmM2MjU5NzA5ZWMzMGVhZGI3OWExOTA4ZGNhNzA3YTY0OTk=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-21T08:43:47Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-21T08:43:47Z"}, "message": "Move actual include logic to ProjectRoot\n\nThis way the two IncludeRustFiles implementations can simply call the\nProjectRoots' methods, so that the include logic is in one place.", "tree": {"sha": "998713639b3c09e8650e34c7c86c40e0d11e3f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998713639b3c09e8650e34c7c86c40e0d11e3f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6d6e6c6259709ec30eadb79a1908dca707a6499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d6e6c6259709ec30eadb79a1908dca707a6499", "html_url": "https://github.com/rust-lang/rust/commit/c6d6e6c6259709ec30eadb79a1908dca707a6499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6d6e6c6259709ec30eadb79a1908dca707a6499/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32462c6d56592acd22f1aab64f627636a476d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32462c6d56592acd22f1aab64f627636a476d6c", "html_url": "https://github.com/rust-lang/rust/commit/e32462c6d56592acd22f1aab64f627636a476d6c"}], "stats": {"total": 122, "additions": 69, "deletions": 53}, "files": [{"sha": "55bef8cb9e75431321c904ecd048c2c84e0307a2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6d6e6c6259709ec30eadb79a1908dca707a6499/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c6d6e6c6259709ec30eadb79a1908dca707a6499/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c6d6e6c6259709ec30eadb79a1908dca707a6499", "patch": "@@ -1088,6 +1088,7 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n+ \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.89 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "dd20c12031ffb4a076db7db72b4376efc9b363ec", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=c6d6e6c6259709ec30eadb79a1908dca707a6499", "patch": "@@ -2,9 +2,10 @@ use std::path::PathBuf;\n use ra_project_model::ProjectRoot;\r\n use ra_vfs::{RootEntry, Filter, RelativePath};\r\n \r\n+/// `IncludeRustFiles` is used to convert\r\n+/// from `ProjectRoot` to `RootEntry` for VFS\r\n pub struct IncludeRustFiles {\r\n-    /// Is a member of the current workspace\r\n-    is_member: bool,\r\n+    root: ProjectRoot,\r\n }\r\n \r\n impl IncludeRustFiles {\r\n@@ -16,44 +17,38 @@ impl IncludeRustFiles {\n     }\r\n \r\n     pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n-        let is_member = root.is_member();\r\n-        IncludeRustFiles::into_entry(root.into_path(), is_member)\r\n+        IncludeRustFiles::from(root).into()\r\n     }\r\n \r\n     #[allow(unused)]\r\n     pub fn external(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::into_entry(path, false)\r\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\r\n     }\r\n \r\n     pub fn member(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::into_entry(path, true)\r\n-    }\r\n-\r\n-    fn into_entry(path: PathBuf, is_member: bool) -> RootEntry {\r\n-        RootEntry::new(path, Box::new(Self { is_member }))\r\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\r\n     }\r\n }\r\n \r\n impl Filter for IncludeRustFiles {\r\n     fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n-        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\r\n-        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\r\n-\r\n-        let is_ignored = if self.is_member {\r\n-            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\r\n-        } else {\r\n-            dir_path.components().any(|c| {\r\n-                let path = c.as_str();\r\n-                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\r\n-            })\r\n-        };\r\n+        self.root.include_dir(dir_path)\r\n+    }\r\n \r\n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\r\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n+        self.root.include_file(file_path)\r\n+    }\r\n+}\r\n \r\n-        !is_ignored && !hidden\r\n+impl std::convert::From<ProjectRoot> for IncludeRustFiles {\r\n+    fn from(v: ProjectRoot) -> IncludeRustFiles {\r\n+        IncludeRustFiles { root: v }\r\n     }\r\n+}\r\n \r\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n-        file_path.extension() == Some(\"rs\")\r\n+impl std::convert::From<IncludeRustFiles> for RootEntry {\r\n+    fn from(v: IncludeRustFiles) -> RootEntry {\r\n+        let path = v.root.path().clone();\r\n+        RootEntry::new(path, Box::new(v))\r\n     }\r\n }\r"}, {"sha": "dd20c12031ffb4a076db7db72b4376efc9b363ec", "filename": "crates/ra_lsp_server/src/vfs_filter.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs?ref=c6d6e6c6259709ec30eadb79a1908dca707a6499", "patch": "@@ -2,9 +2,10 @@ use std::path::PathBuf;\n use ra_project_model::ProjectRoot;\r\n use ra_vfs::{RootEntry, Filter, RelativePath};\r\n \r\n+/// `IncludeRustFiles` is used to convert\r\n+/// from `ProjectRoot` to `RootEntry` for VFS\r\n pub struct IncludeRustFiles {\r\n-    /// Is a member of the current workspace\r\n-    is_member: bool,\r\n+    root: ProjectRoot,\r\n }\r\n \r\n impl IncludeRustFiles {\r\n@@ -16,44 +17,38 @@ impl IncludeRustFiles {\n     }\r\n \r\n     pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n-        let is_member = root.is_member();\r\n-        IncludeRustFiles::into_entry(root.into_path(), is_member)\r\n+        IncludeRustFiles::from(root).into()\r\n     }\r\n \r\n     #[allow(unused)]\r\n     pub fn external(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::into_entry(path, false)\r\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\r\n     }\r\n \r\n     pub fn member(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::into_entry(path, true)\r\n-    }\r\n-\r\n-    fn into_entry(path: PathBuf, is_member: bool) -> RootEntry {\r\n-        RootEntry::new(path, Box::new(Self { is_member }))\r\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\r\n     }\r\n }\r\n \r\n impl Filter for IncludeRustFiles {\r\n     fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n-        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\r\n-        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\r\n-\r\n-        let is_ignored = if self.is_member {\r\n-            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\r\n-        } else {\r\n-            dir_path.components().any(|c| {\r\n-                let path = c.as_str();\r\n-                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\r\n-            })\r\n-        };\r\n+        self.root.include_dir(dir_path)\r\n+    }\r\n \r\n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\r\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n+        self.root.include_file(file_path)\r\n+    }\r\n+}\r\n \r\n-        !is_ignored && !hidden\r\n+impl std::convert::From<ProjectRoot> for IncludeRustFiles {\r\n+    fn from(v: ProjectRoot) -> IncludeRustFiles {\r\n+        IncludeRustFiles { root: v }\r\n     }\r\n+}\r\n \r\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n-        file_path.extension() == Some(\"rs\")\r\n+impl std::convert::From<IncludeRustFiles> for RootEntry {\r\n+    fn from(v: IncludeRustFiles) -> RootEntry {\r\n+        let path = v.root.path().clone();\r\n+        RootEntry::new(path, Box::new(v))\r\n     }\r\n }\r"}, {"sha": "cf4adf35cd5d3b631082f6d37dd62e55efea4c96", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=c6d6e6c6259709ec30eadb79a1908dca707a6499", "patch": "@@ -7,6 +7,7 @@ authors = [\"rust-analyzer developers\"]\n [dependencies]\n log = \"0.4.5\"\n rustc-hash = \"1.0\"\n+relative-path = \"0.4.0\"\n \n failure = \"0.1.4\"\n "}, {"sha": "6f46a2d4350298528c7cee8909b04042d537176c", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6d6e6c6259709ec30eadb79a1908dca707a6499/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=c6d6e6c6259709ec30eadb79a1908dca707a6499", "patch": "@@ -15,6 +15,8 @@ use ra_db::{CrateGraph, FileId, Edition};\n \n use serde_json::from_reader;\n \n+use relative_path::RelativePath;\n+\n pub use crate::{\n     cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n@@ -43,17 +45,39 @@ pub struct ProjectRoot {\n }\n \n impl ProjectRoot {\n-    fn new(path: PathBuf, is_member: bool) -> ProjectRoot {\n+    pub fn new(path: PathBuf, is_member: bool) -> ProjectRoot {\n         ProjectRoot { path, is_member }\n     }\n \n-    pub fn into_path(self) -> PathBuf {\n-        self.path\n+    pub fn path(&self) -> &PathBuf {\n+        &self.path\n     }\n \n     pub fn is_member(&self) -> bool {\n         self.is_member\n     }\n+\n+    pub fn include_dir(&self, dir_path: &RelativePath) -> bool {\n+        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\n+        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\n+\n+        let is_ignored = if self.is_member {\n+            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\n+        } else {\n+            dir_path.components().any(|c| {\n+                let path = c.as_str();\n+                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\n+            })\n+        };\n+\n+        let hidden = dir_path.components().any(|c| c.as_str().starts_with(\".\"));\n+\n+        !is_ignored && !hidden\n+    }\n+\n+    pub fn include_file(&self, file_path: &RelativePath) -> bool {\n+        file_path.extension() == Some(\"rs\")\n+    }\n }\n \n impl ProjectWorkspace {"}]}