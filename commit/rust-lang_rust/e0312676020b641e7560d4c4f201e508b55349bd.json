{"sha": "e0312676020b641e7560d4c4f201e508b55349bd", "node_id": "C_kwDOAAsO6NoAKGUwMzEyNjc2MDIwYjY0MWU3NTYwZDRjNGYyMDFlNTA4YjU1MzQ5YmQ", "commit": {"author": {"name": "Skyler Rain Ross", "email": "orangesnowfox@gmail.com", "date": "2021-12-02T17:25:17Z"}, "committer": {"name": "Skyler Rain Ross", "email": "orangesnowfox@gmail.com", "date": "2021-12-02T17:28:18Z"}, "message": "fix: add return type works when there's missing whitespace", "tree": {"sha": "cabe84336af82b00dfe50633daabdfa122ac688e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabe84336af82b00dfe50633daabdfa122ac688e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0312676020b641e7560d4c4f201e508b55349bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEELMhNkCRexckvqz6l8PpZrMYqz0MFAmGpAjQACgkQ8PpZrMYq\nz0MRBg//SFivRphSIt2qTocYMUvI04epCJGPpfM038gii4mDGpgCzvmTFOeGe5Jl\n0lIMypv4C03x0M4suUCNLfvet9yjAJZsOFfUDs+vnUq7fa/GVPSdxrUQj9BFiyx+\n8LPOv5rffPqMu03wxcDYEoroz7IbwpfYNcH/Qs8lpSWoEyZnhJMjX4qOZ8sL2U3u\nK3Zr8WyMufa2S2U26AtO3gb4Ek+kIAANVbrowUyhc1swUOVFKjDJB9F9rqGlKHL2\n1LEx3zVVG3wR5JMjhb7+bqOD94HoTX4ueKwU0L2cMRjrEbkgBJ/JGsRSj73lc7wl\nYasPiJfDKy0s5aHh6cdGK0FLChuMynl25EfoJPfF0c7tvpcZj12zEGkXpsT9zGqt\n1yVe3sTVGnAAO1oD2x7s3XZ4wJt1UqQwU8HT2kueZfo+FzJae6rFdubVV+H8NQ2w\nBT0pASVitF8gw77JGPe0CoWxDVQDzgwi7CO/MhSbOXHAPRCPbYblDhWVB5czesW2\n8bfwTDH0TNxPg329Cee0AGh2msb+FCkrr5qw/Nq4IdcOxGBkvp5ViaV290QyXiRH\n9LEBSlrCSzctfQMBN/4DIXkGwgH3l9kH9IylJ6GTPg6O8j0wq7qRjh6cTouOqvuS\nHqt+TB7HYbv7MwX/70EJQi01rFbIzF+KRgW+qCkkx2zF//uPeXg=\n=2ARf\n-----END PGP SIGNATURE-----", "payload": "tree cabe84336af82b00dfe50633daabdfa122ac688e\nparent c1ecc0b16ea187a071480409b7b4dd75a5f03a9f\nauthor Skyler Rain Ross <orangesnowfox@gmail.com> 1638465917 -0800\ncommitter Skyler Rain Ross <orangesnowfox@gmail.com> 1638466098 -0800\n\nfix: add return type works when there's missing whitespace\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0312676020b641e7560d4c4f201e508b55349bd", "html_url": "https://github.com/rust-lang/rust/commit/e0312676020b641e7560d4c4f201e508b55349bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0312676020b641e7560d4c4f201e508b55349bd/comments", "author": {"login": "izik1", "id": 21113608, "node_id": "MDQ6VXNlcjIxMTEzNjA4", "avatar_url": "https://avatars.githubusercontent.com/u/21113608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izik1", "html_url": "https://github.com/izik1", "followers_url": "https://api.github.com/users/izik1/followers", "following_url": "https://api.github.com/users/izik1/following{/other_user}", "gists_url": "https://api.github.com/users/izik1/gists{/gist_id}", "starred_url": "https://api.github.com/users/izik1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izik1/subscriptions", "organizations_url": "https://api.github.com/users/izik1/orgs", "repos_url": "https://api.github.com/users/izik1/repos", "events_url": "https://api.github.com/users/izik1/events{/privacy}", "received_events_url": "https://api.github.com/users/izik1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izik1", "id": 21113608, "node_id": "MDQ6VXNlcjIxMTEzNjA4", "avatar_url": "https://avatars.githubusercontent.com/u/21113608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izik1", "html_url": "https://github.com/izik1", "followers_url": "https://api.github.com/users/izik1/followers", "following_url": "https://api.github.com/users/izik1/following{/other_user}", "gists_url": "https://api.github.com/users/izik1/gists{/gist_id}", "starred_url": "https://api.github.com/users/izik1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izik1/subscriptions", "organizations_url": "https://api.github.com/users/izik1/orgs", "repos_url": "https://api.github.com/users/izik1/repos", "events_url": "https://api.github.com/users/izik1/events{/privacy}", "received_events_url": "https://api.github.com/users/izik1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ecc0b16ea187a071480409b7b4dd75a5f03a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ecc0b16ea187a071480409b7b4dd75a5f03a9f", "html_url": "https://github.com/rust-lang/rust/commit/c1ecc0b16ea187a071480409b7b4dd75a5f03a9f"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "d99443588ae05a5e29714ea0de1761cb8d0db79a", "filename": "crates/ide_assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 61, "deletions": 16, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e0312676020b641e7560d4c4f201e508b55349bd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0312676020b641e7560d4c4f201e508b55349bd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=e0312676020b641e7560d4c4f201e508b55349bd", "patch": "@@ -1,5 +1,5 @@\n use hir::HirDisplay;\n-use syntax::{ast, AstNode, TextRange, TextSize};\n+use syntax::{ast, AstNode, SyntaxKind, SyntaxToken, TextRange, TextSize};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -16,7 +16,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // fn foo() -> i32 { 42i32 }\n // ```\n pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let (fn_type, tail_expr, builder_edit_pos) = extract_tail(ctx)?;\n+    let (fn_type, tail_expr, builder_edit_pos, needs_whitespace) = extract_tail(ctx)?;\n     let module = ctx.sema.scope(tail_expr.syntax()).module()?;\n     let ty = ctx.sema.type_of_expr(&tail_expr)?.adjusted();\n     if ty.is_unit() {\n@@ -32,12 +32,14 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext) -> Option<\n         },\n         tail_expr.syntax().text_range(),\n         |builder| {\n+            let preceeding_whitespace = if needs_whitespace { \" \" } else { \"\" };\n+\n             match builder_edit_pos {\n                 InsertOrReplace::Insert(insert_pos) => {\n-                    builder.insert(insert_pos, &format!(\"-> {} \", ty))\n+                    builder.insert(insert_pos, &format!(\"{}-> {} \", preceeding_whitespace, ty))\n                 }\n                 InsertOrReplace::Replace(text_range) => {\n-                    builder.replace(text_range, &format!(\"-> {}\", ty))\n+                    builder.replace(text_range, &format!(\"{}-> {}\", preceeding_whitespace, ty))\n                 }\n             }\n             if let FnType::Closure { wrap_expr: true } = fn_type {\n@@ -56,21 +58,34 @@ enum InsertOrReplace {\n \n /// Check the potentially already specified return type and reject it or turn it into a builder command\n /// if allowed.\n-fn ret_ty_to_action(ret_ty: Option<ast::RetType>, insert_pos: TextSize) -> Option<InsertOrReplace> {\n+fn ret_ty_to_action(\n+    ret_ty: Option<ast::RetType>,\n+    insert_after: SyntaxToken,\n+) -> Option<(InsertOrReplace, bool)> {\n     match ret_ty {\n         Some(ret_ty) => match ret_ty.ty() {\n             Some(ast::Type::InferType(_)) | None => {\n                 cov_mark::hit!(existing_infer_ret_type);\n                 cov_mark::hit!(existing_infer_ret_type_closure);\n-                Some(InsertOrReplace::Replace(ret_ty.syntax().text_range()))\n+                Some((InsertOrReplace::Replace(ret_ty.syntax().text_range()), false))\n             }\n             _ => {\n                 cov_mark::hit!(existing_ret_type);\n                 cov_mark::hit!(existing_ret_type_closure);\n                 None\n             }\n         },\n-        None => Some(InsertOrReplace::Insert(insert_pos + TextSize::from(1))),\n+        None => {\n+            let insert_after_pos = insert_after.text_range().end();\n+            let (insert_pos, needs_whitespace) = match insert_after.next_token() {\n+                Some(it) if it.kind() == SyntaxKind::WHITESPACE => {\n+                    (insert_after_pos + TextSize::from(1), false)\n+                }\n+                _ => (insert_after_pos, true),\n+            };\n+\n+            Some((InsertOrReplace::Insert(insert_pos), needs_whitespace))\n+        }\n     }\n }\n \n@@ -79,11 +94,13 @@ enum FnType {\n     Closure { wrap_expr: bool },\n }\n \n-fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace)> {\n-    let (fn_type, tail_expr, return_type_range, action) =\n+fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrReplace, bool)> {\n+    let (fn_type, tail_expr, return_type_range, action, needs_whitespace) =\n         if let Some(closure) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n-            let rpipe_pos = closure.param_list()?.syntax().last_token()?.text_range().end();\n-            let action = ret_ty_to_action(closure.ret_type(), rpipe_pos)?;\n+            let rpipe = closure.param_list()?.syntax().last_token()?;\n+            let rpipe_pos = rpipe.text_range().end();\n+\n+            let (action, needs_whitespace) = ret_ty_to_action(closure.ret_type(), rpipe)?;\n \n             let body = closure.body()?;\n             let body_start = body.syntax().first_token()?.text_range().start();\n@@ -93,19 +110,21 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n             };\n \n             let ret_range = TextRange::new(rpipe_pos, body_start);\n-            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action)\n+            (FnType::Closure { wrap_expr }, tail_expr, ret_range, action, needs_whitespace)\n         } else {\n             let func = ctx.find_node_at_offset::<ast::Fn>()?;\n-            let rparen_pos = func.param_list()?.r_paren_token()?.text_range().end();\n-            let action = ret_ty_to_action(func.ret_type(), rparen_pos)?;\n+\n+            let rparen = func.param_list()?.r_paren_token()?;\n+            let rparen_pos = rparen.text_range().end();\n+            let (action, needs_whitespace) = ret_ty_to_action(func.ret_type(), rparen)?;\n \n             let body = func.body()?;\n             let stmt_list = body.stmt_list()?;\n             let tail_expr = stmt_list.tail_expr()?;\n \n             let ret_range_end = stmt_list.l_curly_token()?.text_range().start();\n             let ret_range = TextRange::new(rparen_pos, ret_range_end);\n-            (FnType::Function, tail_expr, ret_range, action)\n+            (FnType::Function, tail_expr, ret_range, action, needs_whitespace)\n         };\n     let range = ctx.selection_trimmed();\n     if return_type_range.contains_range(range) {\n@@ -117,7 +136,7 @@ fn extract_tail(ctx: &AssistContext) -> Option<(FnType, ast::Expr, InsertOrRepla\n     } else {\n         return None;\n     }\n-    Some((fn_type, tail_expr, action))\n+    Some((fn_type, tail_expr, action, needs_whitespace))\n }\n \n #[cfg(test)]\n@@ -196,6 +215,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn infer_return_type_no_whitespace() {\n+        check_assist(\n+            add_return_type,\n+            r#\"fn foo(){\n+    45$0\n+}\"#,\n+            r#\"fn foo() -> i32 {\n+    45\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn infer_return_type_nested() {\n         check_assist(\n@@ -280,6 +312,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn infer_return_type_closure_no_whitespace() {\n+        check_assist(\n+            add_return_type,\n+            r#\"fn foo() {\n+    |x: i32|{ x$0 };\n+}\"#,\n+            r#\"fn foo() {\n+    |x: i32| -> i32 { x };\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn infer_return_type_closure_wrap() {\n         cov_mark::check!(wrap_closure_non_block_expr);"}]}