{"sha": "445718084f481956382f65f2020418f6ebeabcde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTcxODA4NGY0ODE5NTYzODJmNjVmMjAyMDQxOGY2ZWJlYWJjZGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T03:07:45Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:51:52Z"}, "message": "Rollup merge of #53521 - alexcrichton:optimize-lit-token, r=michaelwoerister\n\nsyntax: Optimize some literal parsing\n\nCurrently in the `wasm-bindgen` project we have a very very large crate that's\nprocedurally generated, `web-sys`. To generate this crate we parse all of a\nbrowser's WebIDL and we then generate bindings for all of the APIs contained\nwithin.\n\nThe resulting Rust file is 18MB large (wow!) and currently takes a very long\ntime to compile in debug mode. On the nightly compiler a *debug* build takes 90s\nfor the crate to finish. I was curious what was taking so long and upon\ninvestigating a *massive* portion of the time was spent in the `lit_token`\nmethod of the compiler, primarily formatting strings via `format!`.\n\nUpon some more investigation it looks like the `byte_str_lit` was allocating an\nerror message once per byte, causing a very large number of allocations to\nhappen for large literals, of which wasm-bindgen generates quite a few (some are\nMB large).\n\nThis commit fixes the issue by lazily allocating the error message, only doing\nso if the error message is actually needed (which should be never). As a result,\nthe debug mode compilation time for our `web-sys` crate decreased from 90s to\n20s, a very nice improvement! (although we've still got some work to do).", "tree": {"sha": "629971d76bfcd3c7ae0de01cc11b35ef6c20cb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/629971d76bfcd3c7ae0de01cc11b35ef6c20cb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445718084f481956382f65f2020418f6ebeabcde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlt74LgACgkQ/vbIBR0O\nATwHkg//bc+sATKbRXFmOhpSAqf/7TPOgv1LlltWtGRrv1jMas8XgKVjROYnONb/\nOPDgL+bmrAG0i77loZZ6yilVFfkr7EoVgl+euSAZWiQjIysxjpf3BLqcCr+Noioq\nD5MIK+H4WEvEFTPFWFjIzizU9MInkPSgx+0ccVxPxCnQUhv6JmngYETeGyhFKuiW\n1pJe1S3SKtMfY+CI6QvuaGEelLMQvYfxVMRHG1hkh23SVZJXHHIGLUmN4yRbi5L7\nzHoVnMe0dE874oymaiPJPVRlS0RSbibC7E2MPexPbSZW6gHUJETUmRr1ZLnoc/8Y\nLJSI0Kw4qhDx/gDBbIBYYTtzq+5Z8cfnwiIB8hU4M13y/va3SMpZQ38AjlyzoZhK\n1YLPB/4fJaxqu9y4W1KH9u/aoczVlgDrzQNssW5YYbONsaoyAiy4BS7jOYQQH+Zl\n5U8yJG6fJ4+NjByddENwntP7u4z3vvqyXpwBBS7ku5P3Yml3e6xrjL5DaQuo4gEK\nGNYXHF4k8S+ouC2F+S/1EBMSkbQj0LIBRmMXkWGabiVz88XDi11pdKvFh6gl8/8H\nbGL3oWFAu49Z+XDmwNsJErTTG31KHfI5m/AcRSI1r2msib70usaQZcGv6Ih1tBTa\ngx1jAEI5K1vQvb6sPDfYiDUu4DO7+9OsyG0avfbA5+Y3YWK64as=\n=ndFW\n-----END PGP SIGNATURE-----", "payload": "tree 629971d76bfcd3c7ae0de01cc11b35ef6c20cb82\nparent b5519db3236a94c1f090dcafaf38ef858ec33a26\nparent 5bf2ad3018de1f5a94bed2685211f3694f94249c\nauthor kennytm <kennytm@gmail.com> 1534820865 +0800\ncommitter kennytm <kennytm@gmail.com> 1534845112 +0800\n\nRollup merge of #53521 - alexcrichton:optimize-lit-token, r=michaelwoerister\n\nsyntax: Optimize some literal parsing\n\nCurrently in the `wasm-bindgen` project we have a very very large crate that's\nprocedurally generated, `web-sys`. To generate this crate we parse all of a\nbrowser's WebIDL and we then generate bindings for all of the APIs contained\nwithin.\n\nThe resulting Rust file is 18MB large (wow!) and currently takes a very long\ntime to compile in debug mode. On the nightly compiler a *debug* build takes 90s\nfor the crate to finish. I was curious what was taking so long and upon\ninvestigating a *massive* portion of the time was spent in the `lit_token`\nmethod of the compiler, primarily formatting strings via `format!`.\n\nUpon some more investigation it looks like the `byte_str_lit` was allocating an\nerror message once per byte, causing a very large number of allocations to\nhappen for large literals, of which wasm-bindgen generates quite a few (some are\nMB large).\n\nThis commit fixes the issue by lazily allocating the error message, only doing\nso if the error message is actually needed (which should be never). As a result,\nthe debug mode compilation time for our `web-sys` crate decreased from 90s to\n20s, a very nice improvement! (although we've still got some work to do).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445718084f481956382f65f2020418f6ebeabcde", "html_url": "https://github.com/rust-lang/rust/commit/445718084f481956382f65f2020418f6ebeabcde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445718084f481956382f65f2020418f6ebeabcde/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5519db3236a94c1f090dcafaf38ef858ec33a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5519db3236a94c1f090dcafaf38ef858ec33a26", "html_url": "https://github.com/rust-lang/rust/commit/b5519db3236a94c1f090dcafaf38ef858ec33a26"}, {"sha": "5bf2ad3018de1f5a94bed2685211f3694f94249c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf2ad3018de1f5a94bed2685211f3694f94249c", "html_url": "https://github.com/rust-lang/rust/commit/5bf2ad3018de1f5a94bed2685211f3694f94249c"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "1136cda5ee3597587c3332eb8cede5982f22c217", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/445718084f481956382f65f2020418f6ebeabcde/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445718084f481956382f65f2020418f6ebeabcde/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=445718084f481956382f65f2020418f6ebeabcde", "patch": "@@ -533,7 +533,7 @@ fn byte_lit(lit: &str) -> (u8, usize) {\n fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n     let mut res = Vec::with_capacity(lit.len());\n \n-    let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n+    let error = |i| panic!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n     fn eat<I: Iterator<Item=(usize, u8)>>(it: &mut iter::Peekable<I>) {\n@@ -552,12 +552,11 @@ fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n     loop {\n         match chars.next() {\n             Some((i, b'\\\\')) => {\n-                let em = error(i);\n-                match chars.peek().expect(&em).1 {\n+                match chars.peek().unwrap_or_else(|| error(i)).1 {\n                     b'\\n' => eat(&mut chars),\n                     b'\\r' => {\n                         chars.next();\n-                        if chars.peek().expect(&em).1 != b'\\n' {\n+                        if chars.peek().unwrap_or_else(|| error(i)).1 != b'\\n' {\n                             panic!(\"lexer accepted bare CR\");\n                         }\n                         eat(&mut chars);\n@@ -574,8 +573,7 @@ fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n                 }\n             },\n             Some((i, b'\\r')) => {\n-                let em = error(i);\n-                if chars.peek().expect(&em).1 != b'\\n' {\n+                if chars.peek().unwrap_or_else(|| error(i)).1 != b'\\n' {\n                     panic!(\"lexer accepted bare CR\");\n                 }\n                 chars.next();"}]}