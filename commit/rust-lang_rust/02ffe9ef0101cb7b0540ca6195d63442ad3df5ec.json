{"sha": "02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZmZlOWVmMDEwMWNiN2IwNTQwY2E2MTk1ZDYzNDQyYWQzZGY1ZWM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-06T22:56:01Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-11T22:16:43Z"}, "message": "Fix injected errors when running doctests on a crate named after a keyword\n\nUnfortunately, this can't currently be tested. The problem is that we\nneed the file to be compiled first to then be used as dependency, which\ncannot be done currently unfortunately in the rustdoc test suites.\nExample:\n\n```rust\n// name this file \"foo.rs\"\n\n/// ```\n/// let x = foo::foo();\n/// ```\npub fn foo() {}\n```\n\nIf you run `rustdoc --test foo.rs`, you'll get:\n\n```\nrunning 1 test\ntest foo.rs - foo (line 1) ... FAILED\n\nfailures:\n\n---- foo.rs - foo (line 1) stdout ----\nerror[E0463]: can't find crate for `foo`\n --> foo.rs:0:1\n  |\n2 | extern crate foo;\n  | ^^^^^^^^^^^^^^^^^ can't find crate\n```\n\nIf a test were possible, it would look something like\n\n ````rust\n #![crate_name = \"mod\"]\n #![crate_type = \"lib\"]\n //! ```\n //! // NOTE: requires that the literal string 'mod' appears in the doctest for\n //! // the bug to appear\n //! assert_eq!(1, 1);\n //! ```\n ````", "tree": {"sha": "91e4de5c6f751868c0e1310f4213071fb4159d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e4de5c6f751868c0e1310f4213071fb4159d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "html_url": "https://github.com/rust-lang/rust/commit/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178108bf81606a0e25b1066568c2b8c8e0648617", "url": "https://api.github.com/repos/rust-lang/rust/commits/178108bf81606a0e25b1066568c2b8c8e0648617", "html_url": "https://github.com/rust-lang/rust/commit/178108bf81606a0e25b1066568c2b8c8e0648617"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "fb4774ae192466beb254ebd49921c7ed809341ba", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "patch": "@@ -546,9 +546,12 @@ crate fn make_test(\n     // compiler.\n     if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n         if let Some(cratename) = cratename {\n-            // Make sure its actually used if not included.\n+            // Don't inject `extern crate` if the crate is never used.\n+            // NOTE: this is terribly inaccurate because it doesn't actually\n+            // parse the source, but only has false positives, not false\n+            // negatives.\n             if s.contains(cratename) {\n-                prog.push_str(&format!(\"extern crate {};\\n\", cratename));\n+                prog.push_str(&format!(\"extern crate r#{};\\n\", cratename));\n                 line_offset += 1;\n             }\n         }"}, {"sha": "c49e45c0e25a0410797cbceca32165998e8b87d1", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "patch": "@@ -38,7 +38,7 @@ fn make_test_crate_name() {\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -128,7 +128,7 @@ fn make_test_opts_attrs() {\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![feature(sick_rad)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -141,7 +141,7 @@ assert_eq!(2+2, 4);\n     opts.attrs.push(\"feature(hella_dope)\".to_string());\n     let expected = \"#![feature(sick_rad)]\n #![feature(hella_dope)]\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n@@ -250,7 +250,7 @@ assert_eq!(asdf::foo, 4);\";\n \n     let expected = \"#![allow(unused)]\n extern crate hella_qwop;\n-extern crate asdf;\n+extern crate r#asdf;\n fn main() {\n assert_eq!(asdf::foo, 4);\n }\""}, {"sha": "dbe2297f81887128d921b68c5ce24cafaebdb5d4", "filename": "src/test/rustdoc/playground-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ffe9ef0101cb7b0540ca6195d63442ad3df5ec/src%2Ftest%2Frustdoc%2Fplayground-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-arg.rs?ref=02ffe9ef0101cb7b0540ca6195d63442ad3df5ec", "patch": "@@ -11,4 +11,4 @@\n pub fn dummy() {}\n \n // ensure that `extern crate foo;` was inserted into code snips automatically:\n-// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D&edition=2015\"]' \"Run\"\n+// @matches foo/index.html '//a[@class=\"test-arrow\"][@href=\"https://example.com/?code=%23!%5Ballow(unused)%5D%0Aextern%20crate%20r%23foo%3B%0Afn%20main()%20%7B%0Ause%20foo%3A%3Adummy%3B%0Adummy()%3B%0A%7D&edition=2015\"]' \"Run\""}]}