{"sha": "e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTk4NGI2YzY3ZjJhZGYxYzEyZDg0YzQ4ZmRmNGYwMWJlMDIwZTU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T04:05:03Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-11T05:38:16Z"}, "message": "Introduce str_slice runtime function\n\nThis reduces the time to execute the new lib-str tests from 1:40ish to a few\nseconds and will eventually allow the full lib-sha1 test to run in a\nreasonable amount of time. XFAIL lib-str in stage0 - it will run very slowly\nuntil the next snapshot.", "tree": {"sha": "73ee96cb57bcb696357ccc9252b2dd499905131e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ee96cb57bcb696357ccc9252b2dd499905131e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "html_url": "https://github.com/rust-lang/rust/commit/e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0aab47a77fbd47354dc6cf64cdb300cb6fd4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0aab47a77fbd47354dc6cf64cdb300cb6fd4b3", "html_url": "https://github.com/rust-lang/rust/commit/dc0aab47a77fbd47354dc6cf64cdb300cb6fd4b3"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "6e39b3599f446c96a8baf5210cd5677cbc5fce30", "filename": "src/lib/Str.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Flib%2FStr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Flib%2FStr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FStr.rs?ref=e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "patch": "@@ -12,6 +12,7 @@ native \"rust\" mod rustrt {\n     fn str_from_cstr(sbuf cstr) -> str;\n     fn str_from_buf(sbuf buf, uint len) -> str;\n     fn str_push_byte(str s, uint byte) -> str;\n+    fn str_slice(str s, uint begin, uint end) -> str;\n     fn refcount[T](str s) -> uint;\n }\n \n@@ -384,13 +385,10 @@ fn substr(str s, uint begin, uint len) -> str {\n }\n \n fn slice(str s, uint begin, uint end) -> str {\n-    let str accum = \"\";\n-    let uint i = begin;\n-    while (i < end) {\n-        push_byte(accum, s.(i));\n-        i += 1u;\n-    }\n-    ret accum;\n+    // FIXME: Typestate precondition\n+    assert (begin <= end);\n+    assert (end <= Str.byte_len(s));\n+    ret rustrt.str_slice(s, begin, end);\n }\n \n fn shift_byte(&mutable str s) -> u8 {"}, {"sha": "bc2c5adde6029b9c081f0ef35310ebc4d2ac18dd", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "patch": "@@ -226,6 +226,24 @@ str_push_byte(rust_task* task, rust_str* v, size_t byte)\n     return v;\n }\n \n+extern \"C\" CDECL rust_str*\n+str_slice(rust_task* task, rust_str* v, size_t begin, size_t end)\n+{\n+    size_t len = end - begin;\n+    rust_str *st =\n+        vec_alloc_with_data(task,\n+                            len + 1, // +1 to fit at least '\\0'\n+                            len,\n+                            1,\n+                            len ? v->data + begin : NULL);\n+    if (!st) {\n+        task->fail(2);\n+        return NULL;\n+    }\n+    st->data[st->fill++] = '\\0';\n+    return st;\n+}\n+\n extern \"C\" CDECL char const *\n str_buf(rust_task *task, rust_str *s)\n {"}, {"sha": "1258f97b9aec229eb9248bf8c66dc9a59a98fcb4", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "patch": "@@ -32,6 +32,7 @@ str_from_buf\n str_from_cstr\n str_from_vec\n str_push_byte\n+str_slice\n str_vec\n task_sleep\n unsafe_vec_to_mut"}, {"sha": "8985c22e51fd142198eef00ba2d86f3393a4c838", "filename": "src/test/run-pass/lib-str.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Ftest%2Frun-pass%2Flib-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35984b6c67f2adf1c12d84c48fdf4f01be020e5/src%2Ftest%2Frun-pass%2Flib-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-str.rs?ref=e35984b6c67f2adf1c12d84c48fdf4f01be020e5", "patch": "@@ -1,3 +1,6 @@\n+// xfail-boot\n+// xfail-stage0\n+\n use std;\n import std.Str;\n \n@@ -98,6 +101,36 @@ fn test_to_upper() {\n   assert (Str.eq(expected, actual));\n }\n \n+fn test_slice() {\n+  assert (Str.eq(\"ab\", Str.slice(\"abc\", 0u, 2u)));\n+  assert (Str.eq(\"bc\", Str.slice(\"abc\", 1u, 3u)));\n+  assert (Str.eq(\"\", Str.slice(\"abc\", 1u, 1u)));\n+\n+  fn a_million_letter_a() -> str {\n+    auto i = 0;\n+    auto res = \"\";\n+    while (i < 100000) {\n+      res += \"aaaaaaaaaa\";\n+      i += 1;\n+    }\n+    ret res;\n+  }\n+\n+  fn half_a_million_letter_a() -> str {\n+    auto i = 0;\n+    auto res = \"\";\n+    while (i < 100000) {\n+      res += \"aaaaa\";\n+      i += 1;\n+    }\n+    ret res;\n+  }\n+\n+  assert (Str.eq(half_a_million_letter_a(),\n+                 Str.slice(a_million_letter_a(),\n+                           0u,\n+                           500000u)));\n+}\n \n fn main() {\n   test_bytes_len();\n@@ -108,4 +141,5 @@ fn main() {\n   test_concat();\n   test_connect();\n   test_to_upper();\n+  test_slice();\n }"}]}