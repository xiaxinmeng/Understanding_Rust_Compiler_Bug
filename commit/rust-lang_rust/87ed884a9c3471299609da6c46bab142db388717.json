{"sha": "87ed884a9c3471299609da6c46bab142db388717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWQ4ODRhOWMzNDcxMjk5NjA5ZGE2YzQ2YmFiMTQyZGIzODg3MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-09T17:35:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-09T17:35:09Z"}, "message": "Merge pull request #20699 from vhbit/ios-archs\n\nBetter iOS support\n\nReviewed-by: alexcrichton", "tree": {"sha": "00793af0cedc3a1cd04e88f72f7a62184342a901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00793af0cedc3a1cd04e88f72f7a62184342a901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87ed884a9c3471299609da6c46bab142db388717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87ed884a9c3471299609da6c46bab142db388717", "html_url": "https://github.com/rust-lang/rust/commit/87ed884a9c3471299609da6c46bab142db388717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87ed884a9c3471299609da6c46bab142db388717/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2372c6c4a265992b0eb615ea9fdee4ab999143", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2372c6c4a265992b0eb615ea9fdee4ab999143", "html_url": "https://github.com/rust-lang/rust/commit/2e2372c6c4a265992b0eb615ea9fdee4ab999143"}, {"sha": "577d0dbcb88a53e45e5c24c3a9a2e1c22acd31aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/577d0dbcb88a53e45e5c24c3a9a2e1c22acd31aa", "html_url": "https://github.com/rust-lang/rust/commit/577d0dbcb88a53e45e5c24c3a9a2e1c22acd31aa"}], "stats": {"total": 876, "additions": 746, "deletions": 130}, "files": [{"sha": "cbd889669ab22921885a17b870acaf0fd7b9d6ad", "filename": "mk/cfg/aarch64-apple-ios.mk", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Faarch64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Faarch64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-apple-ios.mk?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,36 @@\n+# aarch64-apple-ios configuration\n+CFG_SDK_NAME_aarch64-apple-ios := iphoneos\n+CFG_SDK_ARCHS_aarch64-apple-ios := arm64\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n+CFG_IOS_SDK_aarch64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n+CFG_IOS_SDK_FLAGS_aarch64-apple-ios := -target aarch64-apple-darwin -isysroot $(CFG_IOS_SDK_aarch64-apple-ios) -mios-version-min=7.0 -arch arm64\n+CC_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n+CXX_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+CPP_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+AR_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n+endif\n+CFG_LIB_NAME_aarch64-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_aarch64-apple-ios = lib$(1)-*.a\n+CFG_LIB_SKIP_INSTALL_aarch64-apple-ios = 1 #lib$(1)-*.a\n+CFG_STATIC_LIB_NAME_aarch64-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_aarch64-apple-ios = lib$(1)-*.a.dSYM\n+CFG_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n+CFG_JEMALLOC_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n+CFG_GCCISH_CFLAGS_aarch64-apple-ios := -Wall -Werror -fPIC $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n+CFG_GCCISH_CXXFLAGS_aarch64-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios) -I$(CFG_IOS_SDK_aarch64-apple-ios)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_aarch64-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_aarch64-apple-ios) -Wl,-no_compact_unwind\n+CFG_GCCISH_DEF_FLAG_aarch64-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_aarch64-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_aarch64-apple-ios :=\n+CFG_DEF_SUFFIX_aarch64-apple-ios := .darwin.def\n+CFG_LLC_FLAGS_aarch64-apple-ios := -mattr=+neon,+cyclone,+fp-armv8\n+CFG_INSTALL_NAME_aarch64-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_aarch64-apple-ios =\n+CFG_EXE_SUFFIX_aarch64-apple-ios :=\n+CFG_WINDOWSY_aarch64-apple-ios :=\n+CFG_UNIXY_aarch64-apple-ios := 1\n+CFG_PATH_MUNGE_aarch64-apple-ios := true\n+CFG_LDPATH_aarch64-apple-ios :=\n+CFG_RUN_aarch64-apple-ios = $(2)\n+CFG_RUN_TARG_aarch64-apple-ios = $(call CFG_RUN_aarch64-apple-ios,,$(2))\n+CFG_GNU_TRIPLE_aarch64-apple-ios := aarch64-apple-ios"}, {"sha": "d1f1ee6f3bdb42b88b0248baeb86319180f055f0", "filename": "mk/cfg/arm-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2e2372c6c4a265992b0eb615ea9fdee4ab999143/mk%2Fcfg%2Farm-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2e2372c6c4a265992b0eb615ea9fdee4ab999143/mk%2Fcfg%2Farm-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-apple-ios.mk?ref=2e2372c6c4a265992b0eb615ea9fdee4ab999143", "patch": "@@ -1,35 +0,0 @@\n-# arm-apple-ios configuration\n-CFG_SDK_NAME_arm-apple-ios = iphoneos\n-CFG_SDK_ARCHS_arm-apple-ios = armv7\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK = $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_FLAGS = -target armv7-apple-ios -isysroot $(CFG_IOS_SDK) -mios-version-min=7.0\n-CC_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_arm-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_arm-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_arm-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_arm-apple-ios = lib$(1)-*.a\n-CFG_STATIC_LIB_NAME_arm-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_arm-apple-ios = lib$(1)-*.a.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_FLAGS)\n-CFG_GCCISH_CFLAGS_arm-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_FLAGS) -mfpu=vfp3 -arch armv7\n-CFG_GCCISH_CXXFLAGS_arm-apple-ios := -fno-rtti $(CFG_IOS_FLAGS) -I$(CFG_IOS_SDK)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_arm-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_arm-apple-ios := -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_arm-apple-ios :=\n-CFG_GCCISH_POST_LIB_FLAGS_arm-apple-ios :=\n-CFG_DEF_SUFFIX_arm-apple-ios := .darwin.def\n-CFG_LLC_FLAGS_arm-apple-ios := -mattr=+vfp3,+v7,+thumb2,+neon -march=arm\n-CFG_INSTALL_NAME_arm-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_arm-apple-ios :=\n-CFG_WINDOWSY_arm-apple-ios :=\n-CFG_UNIXY_arm-apple-ios := 1\n-CFG_PATH_MUNGE_arm-apple-ios := true\n-CFG_LDPATH_arm-apple-ios :=\n-CFG_RUN_arm-apple-ios = $(2)\n-CFG_RUN_TARG_arm-apple-ios = $(call CFG_RUN_arm-apple-ios,,$(2))\n-RUSTC_FLAGS_arm-apple-ios := -C relocation_model=pic\n-RUSTC_CROSS_FLAGS_arm-apple-ios :=-C relocation_model=pic\n-CFG_GNU_TRIPLE_arm-apple-ios := arm-apple-ios"}, {"sha": "23686c41f2b19ccfc7063d74d1ec5b942ae3f1b1", "filename": "mk/cfg/armv7-apple-ios.mk", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Farmv7-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Farmv7-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-apple-ios.mk?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,34 @@\n+# armv7-apple-ios configuration\n+CFG_SDK_NAME_armv7-apple-ios := iphoneos\n+CFG_SDK_ARCHS_armv7-apple-ios := armv7\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n+CFG_IOS_SDK_armv7-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n+CFG_IOS_SDK_FLAGS_armv7-apple-ios := -target armv7-apple-ios -isysroot $(CFG_IOS_SDK_armv7-apple-ios) -mios-version-min=7.0\n+CC_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n+CXX_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+CPP_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+AR_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n+endif\n+CFG_LIB_NAME_armv7-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_armv7-apple-ios = lib$(1)-*.a\n+CFG_LIB_SKIP_INSTALL_armv7-apple-ios = 1 #lib$(1)-*.a\n+CFG_STATIC_LIB_NAME_armv7-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_armv7-apple-ios = lib$(1)-*.a.dSYM\n+CFG_JEMALLOC_CFLAGS_armv7-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_SDK_FLAGS_armv7-apple-ios)\n+CFG_GCCISH_CFLAGS_armv7-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -mfpu=vfp3 -arch armv7\n+CFG_GCCISH_CXXFLAGS_armv7-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -I$(CFG_IOS_SDK_armv7-apple-ios)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_armv7-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7-apple-ios) -Wl,-no_compact_unwind\n+CFG_GCCISH_DEF_FLAG_armv7-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_armv7-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_armv7-apple-ios :=\n+CFG_DEF_SUFFIX_armv7-apple-ios := .darwin.def\n+CFG_LLC_FLAGS_armv7-apple-ios := -mattr=+vfp3,+v7,+neon -march=arm\n+CFG_INSTALL_NAME_armv7-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_EXE_SUFFIX_armv7-apple-ios :=\n+CFG_WINDOWSY_armv7-apple-ios :=\n+CFG_UNIXY_armv7-apple-ios := 1\n+CFG_PATH_MUNGE_armv7-apple-ios := true\n+CFG_LDPATH_armv7-apple-ios :=\n+CFG_RUN_armv7-apple-ios = $(2)\n+CFG_RUN_TARG_armv7-apple-ios = $(call CFG_RUN_armv7-apple-ios,,$(2))\n+CFG_GNU_TRIPLE_armv7-apple-ios := armv7-apple-ios"}, {"sha": "ccb7f014159ff9e8a55bc6acbb35c26652e0a58d", "filename": "mk/cfg/armv7s-apple-ios.mk", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Farmv7s-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Farmv7s-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7s-apple-ios.mk?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,34 @@\n+# armv7s-apple-ios configuration\n+CFG_SDK_NAME_armv7s-apple-ios := iphoneos\n+CFG_SDK_ARCHS_armv7s-apple-ios := armv7s\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n+CFG_IOS_SDK_armv7s-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n+CFG_IOS_SDK_FLAGS_armv7s-apple-ios := -target armv7s-apple-ios -isysroot $(CFG_IOS_SDK_armv7s-apple-ios) -mios-version-min=7.0\n+CC_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n+CXX_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+CPP_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n+AR_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n+endif\n+CFG_LIB_NAME_armv7s-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_armv7s-apple-ios = lib$(1)-*.a\n+CFG_LIB_SKIP_INSTALL_armv7s-apple-ios = 1 #lib$(1)-*.a\n+CFG_STATIC_LIB_NAME_armv7s-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_armv7s-apple-ios = lib$(1)-*.a.dSYM\n+CFG_JEMALLOC_CFLAGS_armv7s-apple-ios := -arch armv7s -mfpu=vfp4 $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios)\n+CFG_GCCISH_CFLAGS_armv7s-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -mfpu=vfp4 -arch armv7s\n+CFG_GCCISH_CXXFLAGS_armv7s-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -I$(CFG_IOS_SDK_armv7s-apple-ios)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_armv7s-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7s-apple-ios) -Wl,-no_compact_unwind\n+CFG_GCCISH_DEF_FLAG_armv7s-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_armv7s-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_armv7s-apple-ios :=\n+CFG_DEF_SUFFIX_armv7s-apple-ios := .darwin.def\n+CFG_LLC_FLAGS_armv7s-apple-ios := -mattr=+vfp4,+v7,+neon\n+CFG_INSTALL_NAME_armv7s-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_EXE_SUFFIX_armv7s-apple-ios :=\n+CFG_WINDOWSY_armv7s-apple-ios :=\n+CFG_UNIXY_armv7s-apple-ios := 1\n+CFG_PATH_MUNGE_armv7s-apple-ios := true\n+CFG_LDPATH_armv7s-apple-ios :=\n+CFG_RUN_armv7s-apple-ios = $(2)\n+CFG_RUN_TARG_armv7s-apple-ios = $(call CFG_RUN_armv7s-apple-ios,,$(2))\n+CFG_GNU_TRIPLE_armv7s-apple-ios := armv7s-apple-ios"}, {"sha": "5007c0617c5a988cbfdf032ef33984edf01e045d", "filename": "mk/cfg/i386-apple-ios.mk", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Fi386-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Fi386-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi386-apple-ios.mk?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -1,9 +1,9 @@\n # i386-apple-ios configuration\n-CFG_SDK_NAME_i386-apple-ios = iphonesimulator\n-CFG_SDK_ARCHS_i386-apple-ios = i386\n+CFG_SDK_NAME_i386-apple-ios := iphonesimulator\n+CFG_SDK_ARCHS_i386-apple-ios := i386\n ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOSSIM_SDK = $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n-CFG_IOSSIM_FLAGS = -target i386-apple-ios -isysroot $(CFG_IOSSIM_SDK) -mios-simulator-version-min=7.0\n+CFG_IOSSIM_SDK_i386-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n+CFG_IOSSIM_FLAGS_i386-apple-ios := -m32 -target i386-apple-ios -isysroot $(CFG_IOSSIM_SDK_i386-apple-ios) -mios-simulator-version-min=7.0\n CC_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n CXX_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n CPP_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n@@ -13,21 +13,21 @@ CFG_LIB_NAME_i386-apple-ios = lib$(1).a\n CFG_LIB_GLOB_i386-apple-ios = lib$(1)-*.dylib\n CFG_STATIC_LIB_NAME_i386-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_i386-apple-ios = lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_i386-apple-ios = -Wall -Werror -g -fPIC -m32 $(CFG_IOSSIM_FLAGS)\n-CFG_GCCISH_CXXFLAGS_i386-apple-ios = -fno-rtti $(CFG_IOSSIM_FLAGS) -I$(CFG_IOSSIM_SDK)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_i386-apple-ios = -lpthread -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK)\n-CFG_GCCISH_DEF_FLAG_i386-apple-ios = -Wl,-exported_symbols_list,\n-CFG_GCCISH_PRE_LIB_FLAGS_i386-apple-ios =\n-CFG_GCCISH_POST_LIB_FLAGS_i386-apple-ios =\n-CFG_DEF_SUFFIX_i386-apple-ios = .darwin.def\n+CFG_GCCISH_CFLAGS_i386-apple-ios := -Wall -Werror -g -fPIC -m32 $(CFG_IOSSIM_FLAGS_i386-apple-ios)\n+CFG_GCCISH_CXXFLAGS_i386-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_i386-apple-ios) -I$(CFG_IOSSIM_SDK_i386-apple-ios)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_i386-apple-ios := -lpthread -m32 -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios)\n+CFG_GCCISH_DEF_FLAG_i386-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_i386-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_i386-apple-ios :=\n+CFG_DEF_SUFFIX_i386-apple-ios := .darwin.def\n CFG_LLC_FLAGS_i386-apple-ios =\n CFG_INSTALL_NAME_i386-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_i386-apple-ios =\n-CFG_WINDOWSY_i386-apple-ios =\n-CFG_UNIXY_i386-apple-ios = 1\n-CFG_PATH_MUNGE_i386-apple-ios = true\n+CFG_EXE_SUFFIX_i386-apple-ios :=\n+CFG_WINDOWSY_i386-apple-ios :=\n+CFG_UNIXY_i386-apple-ios := 1\n+CFG_PATH_MUNGE_i386-apple-ios = :true\n CFG_LDPATH_i386-apple-ios =\n CFG_RUN_i386-apple-ios = $(2)\n CFG_RUN_TARG_i386-apple-ios = $(call CFG_RUN_i386-apple-ios,,$(2))\n-CFG_JEMALLOC_CFLAGS_i386-apple-ios = $(CFG_IOSSIM_FLAGS) -target i386-apple-ios -Wl,-syslibroot $(CFG_IOSSIM_SDK) -Wl,-no_compact_unwind\n+CFG_JEMALLOC_CFLAGS_i386-apple-ios = $(CFG_IOSSIM_FLAGS_i386-apple-ios) -target i386-apple-ios #-Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios) -Wl,-no_compact_unwind\n CFG_GNU_TRIPLE_i386-apple-ios := i386-apple-ios"}, {"sha": "69070ec4fad4d5e57843074cd9477bb4c9f9ddee", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,36 @@\n+# x86_64-apple-ios configuration\n+CFG_SDK_NAME_x86_64-apple-ios := iphonesimulator\n+CFG_SDK_ARCHS_x86_64-apple-ios := x86_64\n+ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n+CFG_IOSSIM_SDK_x86_64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n+CFG_IOSSIM_FLAGS_x86_64-apple-ios := -m64 -target x86_64-apple-ios -isysroot $(CFG_IOSSIM_SDK_x86_64-apple-ios) -mios-simulator-version-min=7.0\n+CC_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n+CXX_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n+CPP_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n+AR_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n+endif\n+CFG_LIB_NAME_x86_64-apple-ios = lib$(1).a\n+CFG_LIB_GLOB_x86_64-apple-ios = lib$(1)-*.a\n+CFG_LIB_SKIP_INSTALL_x86_64-apple-ios = 1 #lib$(1)-*.a\n+CFG_STATIC_LIB_NAME_x86_64-apple-ios=lib$(1).a\n+CFG_LIB_DSYM_GLOB_x86_64-apple-ios = lib$(1)-*.a.dSYM\n+CFG_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n+CFG_JEMALLOC_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n+CFG_GCCISH_CFLAGS_x86_64-apple-ios := -Wall -Werror -fPIC $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n+CFG_GCCISH_CXXFLAGS_x86_64-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_x86_64-apple-ios) -I$(CFG_IOSSIM_SDK_x86_64-apple-ios)/usr/include/c++/4.2.1\n+CFG_GCCISH_LINK_FLAGS_x86_64-apple-ios := -lpthread -Wl,-no_compact_unwind -m64 -Wl,-syslibroot $(CFG_IOSSIM_SDK_x86_64-apple-ios)\n+CFG_GCCISH_DEF_FLAG_x86_64-apple-ios := -Wl,-exported_symbols_list,\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-apple-ios :=\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-apple-ios :=\n+CFG_DEF_SUFFIX_x86_64-apple-ios := .darwin.def\n+CFG_LLC_FLAGS_x86_64-apple-ios :=\n+CFG_INSTALL_NAME_x86_64-apple-ios = -Wl,-install_name,@rpath/$(1)\n+CFG_LIBUV_LINK_FLAGS_x86_64-apple-ios :=\n+CFG_EXE_SUFFIX_x86_64-apple-ios :=\n+CFG_WINDOWSY_x86_64-apple-ios :=\n+CFG_UNIXY_x86_64-apple-ios := 1\n+CFG_PATH_MUNGE_x86_64-apple-ios := true\n+CFG_LDPATH_x86_64-apple-ios :=\n+CFG_RUN_x86_64-apple-ios = $(2)\n+CFG_RUN_TARG_x86_64-apple-ios = $(call CFG_RUN_x86_64-apple-ios,,$(2))\n+CFG_GNU_TRIPLE_i386-apple-ios := x86_64-apple-ios"}, {"sha": "58ab642c30d9f97735d5745b5d01781ee199c6ae", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -1 +1 @@\n-Subproject commit 62a4ca6055ad6fda8faf767b93b5736dcdfb7013\n+Subproject commit 58ab642c30d9f97735d5745b5d01781ee199c6ae"}, {"sha": "c866deafee4569a84bb99985e4a760f27d9391e3", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -1969,7 +1969,7 @@ pub mod types {\n             }\n         }\n \n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;"}, {"sha": "2ceb34e68b7720ac7574818046f2d6a81657a4d1", "filename": "src/librustc_back/target/aarch64_apple_ios.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_apple_ios.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions};\n+use super::apple_ios_base::{opts, Arch};\n+\n+pub fn target() -> Target {\n+    Target {\n+        // reference layout: e-m:o-i64:64-i128:128-n32:64-S128\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      i128:128-f32:32:32-f64:64:64-v64:64:64-v128:128:128-\\\n+                      a:0:64-n32:64-S128\".to_string(),\n+        llvm_target: \"arm64-apple-ios\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"ios\".to_string(),\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n+            eliminate_frame_pointer: false,\n+            .. opts(Arch::Arm64)\n+        },\n+    }\n+}"}, {"sha": "f9dcb4fb81230b7dc82711602c757352f99f0ce2", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io::{Command, IoError, OtherIoError};\n+use target::TargetOptions;\n+\n+use self::Arch::*;\n+\n+#[allow(non_camel_case_types)]\n+pub enum Arch {\n+    Armv7,\n+    Armv7s,\n+    Arm64,\n+    I386,\n+    X86_64\n+}\n+\n+impl Arch {\n+    pub fn to_string(&self) -> &'static str {\n+        match self {\n+            &Armv7 => \"armv7\",\n+            &Armv7s => \"armv7s\",\n+            &Arm64 => \"arm64\",\n+            &I386 => \"i386\",\n+            &X86_64 => \"x86_64\"\n+        }\n+    }\n+}\n+\n+pub fn get_sdk_root(sdk_name: &str) -> String {\n+    let res = Command::new(\"xcrun\")\n+                      .arg(\"--show-sdk-path\")\n+                      .arg(\"-sdk\")\n+                      .arg(sdk_name)\n+                      .spawn()\n+                      .and_then(|c| c.wait_with_output())\n+                      .and_then(|output| {\n+                          if output.status.success() {\n+                              Ok(String::from_utf8(output.output).unwrap())\n+                          } else {\n+                              Err(IoError {\n+                                  kind: OtherIoError,\n+                                  desc: \"process exit with error\",\n+                                  detail: String::from_utf8(output.error).ok()})\n+                          }\n+                      });\n+\n+    match res {\n+        Ok(output) => output.trim().to_string(),\n+        Err(e) => panic!(\"failed to get {} SDK path: {}\", sdk_name, e)\n+    }\n+}\n+\n+fn pre_link_args(arch: Arch) -> Vec<String> {\n+    let sdk_name = match arch {\n+        Armv7 | Armv7s | Arm64 => \"iphoneos\",\n+        I386 | X86_64 => \"iphonesimulator\"\n+    };\n+\n+    let arch_name = arch.to_string();\n+\n+    vec![\"-arch\".to_string(), arch_name.to_string(),\n+         \"-Wl,-syslibroot\".to_string(), get_sdk_root(sdk_name)]\n+}\n+\n+pub fn opts(arch: Arch) -> TargetOptions {\n+    TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        // Although there is an experimental implementation of LLVM which\n+        // supports SS on armv7 it wasn't approved by Apple, see:\n+        // http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20140505/216350.html\n+        // It looks like it might be never accepted to upstream LLVM.\n+        //\n+        // SS might be also enabled on Arm64 as it has builtin support in LLVM\n+        // but I haven't tested it through yet\n+        morestack: false,\n+        pre_link_args: pre_link_args(arch),\n+        .. super::apple_base::opts()\n+    }\n+}"}, {"sha": "e0afef6e3904f235faa475bcb24609e1c7bfdf93", "filename": "src/librustc_back/target/arm_apple_ios.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2372c6c4a265992b0eb615ea9fdee4ab999143/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_apple_ios.rs?ref=2e2372c6c4a265992b0eb615ea9fdee4ab999143", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target::{Target, TargetOptions};\n-\n-pub fn target() -> Target {\n-    Target {\n-        data_layout: \"e-p:32:32:32\\\n-                      -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n-                      -f32:32:32-f64:64:64\\\n-                      -v64:64:64-v128:64:128\\\n-                      -a:0:64-n32\".to_string(),\n-        llvm_target: \"arm-apple-ios\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        arch: \"arm\".to_string(),\n-        target_os: \"ios\".to_string(),\n-        options: TargetOptions {\n-            features: \"+v7,+thumb2,+vfp3,+neon\".to_string(),\n-            executables: false,\n-            dynamic_linking: false,\n-            // Although there is an experimental implementation of LLVM which\n-            // supports SS on armv7 it wasn't approved by Apple, see:\n-            // http://lists.cs.uiuc.edu/pipermail/llvm-commits/Week-of-Mon-20140505/216350.html\n-            // It looks like it might be never accepted to upstream LLVM.\n-            morestack: false,\n-            .. super::apple_base::opts()\n-        }\n-    }\n-}"}, {"sha": "4137642188691942df4c855a1d0ea29166582bba", "filename": "src/librustc_back/target/armv7_apple_ios.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_apple_ios.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions};\n+use super::apple_ios_base::{opts, Arch};\n+\n+pub fn target() -> Target {\n+    Target {\n+        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        llvm_target: \"armv7-apple-ios\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"ios\".to_string(),\n+        options: TargetOptions {\n+            features: \"+v7,+vfp3,+neon\".to_string(),\n+            .. opts(Arch::Armv7)\n+        }\n+    }\n+}"}, {"sha": "ef16aefdbd9dd9b8e3f9830703178e64f82a6ebf", "filename": "src/librustc_back/target/armv7s_apple_ios.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7s_apple_ios.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetOptions};\n+use super::apple_ios_base::{opts, Arch};\n+\n+pub fn target() -> Target {\n+    Target {\n+        data_layout: \"e-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        llvm_target: \"armv7s-apple-ios\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"ios\".to_string(),\n+        options: TargetOptions {\n+            features: \"+v7,+vfp4,+neon\".to_string(),\n+            .. opts(Arch::Armv7s)\n+        }\n+    }\n+}"}, {"sha": "afe63d006cf1a04c0600302a42987cc1fa159738", "filename": "src/librustc_back/target/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi386_apple_ios.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use target::Target;\n+use super::apple_ios_base::{opts, Arch};\n \n pub fn target() -> Target {\n     Target {\n@@ -22,7 +23,6 @@ pub fn target() -> Target {\n         target_pointer_width: \"32\".to_string(),\n         arch: \"x86\".to_string(),\n         target_os: \"ios\".to_string(),\n-\n-        options: super::apple_base::opts()\n+        options: opts(Arch::I386)\n     }\n }"}, {"sha": "57e2744ae9bf8c467e33c47e5d4dc5c67e9d8915", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -53,22 +53,27 @@ use std::io::fs::PathExtensions;\n mod windows_base;\n mod linux_base;\n mod apple_base;\n+mod apple_ios_base;\n mod freebsd_base;\n mod dragonfly_base;\n \n-mod arm_apple_ios;\n+mod armv7_apple_ios;\n+mod armv7s_apple_ios;\n+mod i386_apple_ios;\n+\n mod arm_linux_androideabi;\n mod arm_unknown_linux_gnueabi;\n mod arm_unknown_linux_gnueabihf;\n+mod aarch64_apple_ios;\n mod aarch64_unknown_linux_gnu;\n mod i686_apple_darwin;\n-mod i386_apple_ios;\n mod i686_pc_windows_gnu;\n mod i686_unknown_dragonfly;\n mod i686_unknown_linux_gnu;\n mod mips_unknown_linux_gnu;\n mod mipsel_unknown_linux_gnu;\n mod x86_64_apple_darwin;\n+mod x86_64_apple_ios;\n mod x86_64_pc_windows_gnu;\n mod x86_64_unknown_freebsd;\n mod x86_64_unknown_dragonfly;\n@@ -346,8 +351,12 @@ impl Target {\n \n             x86_64_apple_darwin,\n             i686_apple_darwin,\n+\n             i386_apple_ios,\n-            arm_apple_ios,\n+            x86_64_apple_ios,\n+            aarch64_apple_ios,\n+            armv7_apple_ios,\n+            armv7s_apple_ios,\n \n             x86_64_pc_windows_gnu,\n             i686_pc_windows_gnu"}, {"sha": "9df2ccca50003059062e63524ca1933abb463b21", "filename": "src/librustc_back/target/x86_64_apple_ios.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_apple_ios.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+use super::apple_ios_base::{opts, Arch};\n+\n+pub fn target() -> Target {\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n+                      s0:64:64-f80:128:128-n8:16:32:64\".to_string(),\n+        llvm_target: \"x86_64-apple-ios\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"ios\".to_string(),\n+        options: opts(Arch::X86_64)\n+    }\n+}"}, {"sha": "f7ffbb95feb3b43699a5002d526f6e1546a45d87", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -115,8 +115,15 @@ pub fn compute_abi_info(ccx: &CrateContext,\n         } else {\n             cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def)\n         },\n-        \"arm\" => cabi_arm::compute_abi_info(ccx, atys, rty, ret_def),\n         \"aarch64\" => cabi_aarch64::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"arm\" => {\n+            let flavor = if ccx.sess().target.target.target_os == \"ios\" {\n+                cabi_arm::Flavor::Ios\n+            } else {\n+                cabi_arm::Flavor::General\n+            };\n+            cabi_arm::compute_abi_info(ccx, atys, rty, ret_def, flavor)\n+        },\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)\n                               []),"}, {"sha": "830771d7397e2d3c7c3a16a40f4c4814df7f4d91", "filename": "src/librustc_trans/trans/cabi_arm.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_arm.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -19,16 +19,23 @@ use trans::type_::Type;\n \n use std::cmp;\n \n+pub enum Flavor {\n+    General,\n+    Ios\n+}\n+\n+type TyAlignFn = fn(ty: Type) -> uint;\n+\n fn align_up_to(off: uint, a: uint) -> uint {\n     return (off + a - 1u) / a * a;\n }\n \n-fn align(off: uint, ty: Type) -> uint {\n-    let a = ty_align(ty);\n+fn align(off: uint, ty: Type, align_fn: TyAlignFn) -> uint {\n+    let a = align_fn(ty);\n     return align_up_to(off, a);\n }\n \n-fn ty_align(ty: Type) -> uint {\n+fn general_ty_align(ty: Type) -> uint {\n     match ty.kind() {\n         Integer => {\n             unsafe {\n@@ -43,18 +50,51 @@ fn ty_align(ty: Type) -> uint {\n                 1\n             } else {\n                 let str_tys = ty.field_types();\n-                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, general_ty_align(*t)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            general_ty_align(elt)\n+        }\n+        _ => panic!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+// For more information see:\n+// ARMv7\n+// https://developer.apple.com/library/ios/documentation/Xcode/Conceptual\n+//    /iPhoneOSABIReference/Articles/ARMv7FunctionCallingConventions.html\n+// ARMv6\n+// https://developer.apple.com/library/ios/documentation/Xcode/Conceptual\n+//    /iPhoneOSABIReference/Articles/ARMv6FunctionCallingConventions.html\n+fn ios_ty_align(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                cmp::min(4, ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8)\n+            }\n+        }\n+        Pointer => 4,\n+        Float => 4,\n+        Double => 4,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ios_ty_align(*t)))\n             }\n         }\n         Array => {\n             let elt = ty.element_type();\n-            ty_align(elt)\n+            ios_ty_align(elt)\n         }\n         _ => panic!(\"ty_align: unhandled type\")\n     }\n }\n \n-fn ty_size(ty: Type) -> uint {\n+fn ty_size(ty: Type, align_fn: TyAlignFn) -> uint {\n     match ty.kind() {\n         Integer => {\n             unsafe {\n@@ -67,29 +107,32 @@ fn ty_size(ty: Type) -> uint {\n         Struct => {\n             if ty.is_packed() {\n                 let str_tys = ty.field_types();\n-                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t, align_fn))\n             } else {\n                 let str_tys = ty.field_types();\n-                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n-                align(size, ty)\n+                let size = str_tys.iter()\n+                                  .fold(0, |s, t| {\n+                                      align(s, *t, align_fn) + ty_size(*t, align_fn)\n+                                  });\n+                align(size, ty, align_fn)\n             }\n         }\n         Array => {\n             let len = ty.array_length();\n             let elt = ty.element_type();\n-            let eltsz = ty_size(elt);\n+            let eltsz = ty_size(elt, align_fn);\n             len * eltsz\n         }\n         _ => panic!(\"ty_size: unhandled type\")\n     }\n }\n \n-fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type, align_fn: TyAlignFn) -> ArgType {\n     if is_reg_ty(ty) {\n         let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n         return ArgType::direct(ty, None, None, attr);\n     }\n-    let size = ty_size(ty);\n+    let size = ty_size(ty, align_fn);\n     if size <= 4 {\n         let llty = if size <= 1 {\n             Type::i8(ccx)\n@@ -103,13 +146,13 @@ fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n     ArgType::indirect(ty, Some(StructRetAttribute))\n }\n \n-fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type, align_fn: TyAlignFn) -> ArgType {\n     if is_reg_ty(ty) {\n         let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n         return ArgType::direct(ty, None, None, attr);\n     }\n-    let align = ty_align(ty);\n-    let size = ty_size(ty);\n+    let align = align_fn(ty);\n+    let size = ty_size(ty, align_fn);\n     let llty = if align <= 4 {\n         Type::array(&Type::i32(ccx), ((size + 3) / 4) as u64)\n     } else {\n@@ -131,15 +174,21 @@ fn is_reg_ty(ty: Type) -> bool {\n pub fn compute_abi_info(ccx: &CrateContext,\n                         atys: &[Type],\n                         rty: Type,\n-                        ret_def: bool) -> FnType {\n+                        ret_def: bool,\n+                        flavor: Flavor) -> FnType {\n+    let align_fn = match flavor {\n+        Flavor::General => general_ty_align as TyAlignFn,\n+        Flavor::Ios => ios_ty_align as TyAlignFn,\n+    };\n+\n     let mut arg_tys = Vec::new();\n     for &aty in atys.iter() {\n-        let ty = classify_arg_ty(ccx, aty);\n+        let ty = classify_arg_ty(ccx, aty, align_fn);\n         arg_tys.push(ty);\n     }\n \n     let ret_ty = if ret_def {\n-        classify_ret_ty(ccx, rty)\n+        classify_ret_ty(ccx, rty, align_fn)\n     } else {\n         ArgType::direct(Type::void(ccx), None, None, None)\n     };"}, {"sha": "67c14dc2dc12de381fc4f380070446f95e5c855f", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -23,23 +23,36 @@ pub fn next_test_port() -> u16 {\n     base_port() + NEXT_OFFSET.fetch_add(1, Ordering::Relaxed) as u16\n }\n \n-/// Get a temporary path which could be the location of a unix socket\n-pub fn next_test_unix() -> Path {\n+// iOS has a pretty long tmpdir path which causes pipe creation\n+// to like: invalid argument: path must be smaller than SUN_LEN\n+fn next_test_unix_socket() -> String {\n     static COUNT: AtomicUint = ATOMIC_UINT_INIT;\n     // base port and pid are an attempt to be unique between multiple\n     // test-runners of different configurations running on one\n     // buildbot, the count is to be unique within this executable.\n-    let string = format!(\"rust-test-unix-path-{}-{}-{}\",\n-                         base_port(),\n-                         unsafe {libc::getpid()},\n-                         COUNT.fetch_add(1, Ordering::Relaxed));\n+    format!(\"rust-test-unix-path-{}-{}-{}\",\n+            base_port(),\n+            unsafe {libc::getpid()},\n+            COUNT.fetch_add(1, Ordering::Relaxed))\n+}\n+\n+/// Get a temporary path which could be the location of a unix socket\n+#[cfg(not(target_os = \"ios\"))]\n+pub fn next_test_unix() -> Path {\n+    let string = next_test_unix_socket();\n     if cfg!(unix) {\n         os::tmpdir().join(string)\n     } else {\n         Path::new(format!(\"{}{}\", r\"\\\\.\\pipe\\\", string))\n     }\n }\n \n+/// Get a temporary path which could be the location of a unix socket\n+#[cfg(target_os = \"ios\")]\n+pub fn next_test_unix() -> Path {\n+    Path::new(format!(\"/var/tmp/{}\", next_test_unix_socket()))\n+}\n+\n /// Get a unique IPv4 localhost:port pair starting at 9600\n pub fn next_test_ip4() -> SocketAddr {\n     SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: next_test_port() }\n@@ -99,7 +112,7 @@ pub fn raise_fd_limit() {\n /// multithreaded scheduler testing, depending on the number of cores available.\n ///\n /// This fixes issue #7772.\n-#[cfg(target_os=\"macos\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n #[allow(non_camel_case_types)]\n mod darwin_fd_limit {\n     use libc;\n@@ -156,7 +169,7 @@ mod darwin_fd_limit {\n     }\n }\n \n-#[cfg(not(target_os=\"macos\"))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n mod darwin_fd_limit {\n     pub unsafe fn raise_fd_limit() {}\n }"}, {"sha": "fbbdee1009d5b7adefe5eaf716df9b5b12817f42", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -61,19 +61,22 @@ mod os {\n mod os {\n     use libc;\n \n-    #[cfg(target_arch = \"x86_64\")]\n+    #[cfg(any(target_arch = \"x86_64\",\n+              target_arch = \"aarch64\"))]\n     const __PTHREAD_MUTEX_SIZE__: uint = 56;\n     #[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\"))]\n     const __PTHREAD_MUTEX_SIZE__: uint = 40;\n \n-    #[cfg(target_arch = \"x86_64\")]\n+    #[cfg(any(target_arch = \"x86_64\",\n+              target_arch = \"aarch64\"))]\n     const __PTHREAD_COND_SIZE__: uint = 40;\n     #[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\"))]\n     const __PTHREAD_COND_SIZE__: uint = 24;\n \n-    #[cfg(target_arch = \"x86_64\")]\n+    #[cfg(any(target_arch = \"x86_64\",\n+              target_arch = \"aarch64\"))]\n     const __PTHREAD_RWLOCK_SIZE__: uint = 192;\n     #[cfg(any(target_arch = \"x86\",\n               target_arch = \"arm\"))]"}, {"sha": "772b84670141364fb95ba70bae83c6bf980b88b4", "filename": "src/rt/arch/aarch64/morestack.S", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Faarch64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Faarch64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Faarch64%2Fmorestack.S?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -7,13 +7,29 @@\n \n /* See i386/morestack.S for the lengthy, general explanation. */\n \n-.global rust_stack_exhausted\n+#if defined(__APPLE__)\n+#define MORESTACK ___morestack\n+#define STACK_EXHAUSTED _rust_stack_exhausted\n+#else\n+#define MORESTACK __morestack\n+#define STACK_EXHAUSTED rust_stack_exhausted\n+#endif\n+\n+.global STACK_EXHAUSTED\n+\n+#if defined(__APPLE__)\n+.private_extern MORESTACK\n+#else\n+.hidden MORESTACK\n+#endif\n+\n+#if !defined(__APPLE__)\n+.type MORESTACK,%function\n+#endif\n \n // FIXME(AARCH64): this might not be perfectly right but works for now\n-func\t__morestack\n+MORESTACK:\n \t.cfi_startproc\n-\tbl rust_stack_exhausted\n+\tbl STACK_EXHAUSTED@plt\n \t// the above function ensures that it never returns\n \t.cfi_endproc\n-endfunc\t__morestack\n-\t.hidden __morestack"}, {"sha": "0b9012cc2a80a27a48cc7fd4b6d0531aae349196", "filename": "src/rt/arch/armv7/morestack.S", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farmv7%2Fmorestack.S?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,70 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif\n+\n+/* See i386/morestack.S for the lengthy, general explanation. */\n+\n+.text\n+.code 32\n+.arm\n+#if defined(__APPLE__)\n+.align 2\n+#else\n+.align\n+#endif\n+\n+#if defined(__APPLE__)\n+#define MORESTACK ___morestack\n+#define STACK_EXHAUSTED _rust_stack_exhausted\n+#else\n+#define MORESTACK __morestack\n+#define STACK_EXHAUSTED rust_stack_exhausted\n+#endif\n+\n+.global STACK_EXHAUSTED\n+.global MORESTACK\n+\n+// Unfortunately LLVM yet doesn't support emitting correct debug\n+// DWARF information for non-ELF targets so to make it compile\n+// on iOS all that directives are simply commented out\n+#if defined(__APPLE__)\n+#define UNWIND @\n+#else\n+#define UNWIND\n+#endif\n+\n+#if defined(__APPLE__)\n+.private_extern MORESTACK\n+#else\n+.hidden MORESTACK\n+#endif\n+\n+#if !defined(__APPLE__)\n+   .type MORESTACK,%function\n+#endif\n+\n+// r4 and r5 are scratch registers for __morestack due to llvm\n+// ARMFrameLowering::adjustForSegmentedStacks() implementation.\n+MORESTACK:\n+    UNWIND .fnstart\n+\n+    // Save frame pointer and return address\n+    UNWIND .save {r4, r5}\n+    UNWIND .save {lr}\n+    UNWIND .save {r6, fp, lr}\n+    push {r6, fp, lr}\n+\n+    UNWIND .movsp r6\n+    mov r6, sp\n+    UNWIND .setfp fp, sp, #4\n+    add fp, sp, #4\n+\n+    // Save argument registers of the original function\n+    push {r0, r1, r2, r3, lr}\n+\n+    // Create new stack\n+    bl STACK_EXHAUSTED@plt\n+\n+    // the above function ensures that it never returns\n+    UNWIND  .fnend"}, {"sha": "d0e9b81b95a9bfbe03a1268100afcfafd7afc2fb", "filename": "src/rt/arch/armv7/record_sp.S", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farmv7%2Frecord_sp.S?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,56 @@\n+// Do not compile anything here for iOS because split stacks\n+// are disabled at all and do not need any runtime support.\n+//\n+// See also comments in librustrt/stack.rs about why it was\n+// disabled and how it could be implemented in case of need.\n+#if !defined(__APPLE__)\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif\n+\n+.text\n+.code 32\n+.arm\n+.align\n+\n+#define RECORD_SP_LIMIT record_sp_limit\n+#define GET_SP_LIMIT    get_sp_limit\n+\n+.globl \tRECORD_SP_LIMIT\n+.globl\tGET_SP_LIMIT\n+\n+RECORD_SP_LIMIT:\n+\t// First, try to read TLS address from coprocessor\n+\tmrc p15, #0, r3, c13, c0, #3\n+\tcmp r3, #0\n+\t// Otherwise, try to read from magic address 0xFFFF0FF0\n+\tmvneq r3, #0xF000\n+\tldreq r3, [r3, #-15]\n+\n+#if __ANDROID__\n+\tadd r3, r3, #252\n+#elif __linux__\n+\tadd r3, r3, #4\n+#endif // ANDROID\n+\n+\tstr r0, [r3]\n+\tmov pc, lr\n+\n+GET_SP_LIMIT:\n+\t// First, try to read TLS address from coprocessor\n+\tmrc p15, #0, r3, c13, c0, #3\n+\tcmp r3, #0\n+\t// Otherwise, try to read from magic address 0xFFFF0FF0\n+\tmvneq r3, #0xF000\n+\tldreq r3, [r3, #-15]\n+\n+#if __ANDROID__\n+\tadd r3, r3, #252\n+#elif __linux__\n+\tadd r3, r3, #4\n+#endif  // __ANDROID__\n+\n+\tldr r0, [r3]\n+\tmov pc, lr\n+#endif"}, {"sha": "0b9012cc2a80a27a48cc7fd4b6d0531aae349196", "filename": "src/rt/arch/armv7s/morestack.S", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7s%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7s%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farmv7s%2Fmorestack.S?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,70 @@\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif\n+\n+/* See i386/morestack.S for the lengthy, general explanation. */\n+\n+.text\n+.code 32\n+.arm\n+#if defined(__APPLE__)\n+.align 2\n+#else\n+.align\n+#endif\n+\n+#if defined(__APPLE__)\n+#define MORESTACK ___morestack\n+#define STACK_EXHAUSTED _rust_stack_exhausted\n+#else\n+#define MORESTACK __morestack\n+#define STACK_EXHAUSTED rust_stack_exhausted\n+#endif\n+\n+.global STACK_EXHAUSTED\n+.global MORESTACK\n+\n+// Unfortunately LLVM yet doesn't support emitting correct debug\n+// DWARF information for non-ELF targets so to make it compile\n+// on iOS all that directives are simply commented out\n+#if defined(__APPLE__)\n+#define UNWIND @\n+#else\n+#define UNWIND\n+#endif\n+\n+#if defined(__APPLE__)\n+.private_extern MORESTACK\n+#else\n+.hidden MORESTACK\n+#endif\n+\n+#if !defined(__APPLE__)\n+   .type MORESTACK,%function\n+#endif\n+\n+// r4 and r5 are scratch registers for __morestack due to llvm\n+// ARMFrameLowering::adjustForSegmentedStacks() implementation.\n+MORESTACK:\n+    UNWIND .fnstart\n+\n+    // Save frame pointer and return address\n+    UNWIND .save {r4, r5}\n+    UNWIND .save {lr}\n+    UNWIND .save {r6, fp, lr}\n+    push {r6, fp, lr}\n+\n+    UNWIND .movsp r6\n+    mov r6, sp\n+    UNWIND .setfp fp, sp, #4\n+    add fp, sp, #4\n+\n+    // Save argument registers of the original function\n+    push {r0, r1, r2, r3, lr}\n+\n+    // Create new stack\n+    bl STACK_EXHAUSTED@plt\n+\n+    // the above function ensures that it never returns\n+    UNWIND  .fnend"}, {"sha": "d0e9b81b95a9bfbe03a1268100afcfafd7afc2fb", "filename": "src/rt/arch/armv7s/record_sp.S", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7s%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/87ed884a9c3471299609da6c46bab142db388717/src%2Frt%2Farch%2Farmv7s%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farmv7s%2Frecord_sp.S?ref=87ed884a9c3471299609da6c46bab142db388717", "patch": "@@ -0,0 +1,56 @@\n+// Do not compile anything here for iOS because split stacks\n+// are disabled at all and do not need any runtime support.\n+//\n+// See also comments in librustrt/stack.rs about why it was\n+// disabled and how it could be implemented in case of need.\n+#if !defined(__APPLE__)\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif\n+\n+.text\n+.code 32\n+.arm\n+.align\n+\n+#define RECORD_SP_LIMIT record_sp_limit\n+#define GET_SP_LIMIT    get_sp_limit\n+\n+.globl \tRECORD_SP_LIMIT\n+.globl\tGET_SP_LIMIT\n+\n+RECORD_SP_LIMIT:\n+\t// First, try to read TLS address from coprocessor\n+\tmrc p15, #0, r3, c13, c0, #3\n+\tcmp r3, #0\n+\t// Otherwise, try to read from magic address 0xFFFF0FF0\n+\tmvneq r3, #0xF000\n+\tldreq r3, [r3, #-15]\n+\n+#if __ANDROID__\n+\tadd r3, r3, #252\n+#elif __linux__\n+\tadd r3, r3, #4\n+#endif // ANDROID\n+\n+\tstr r0, [r3]\n+\tmov pc, lr\n+\n+GET_SP_LIMIT:\n+\t// First, try to read TLS address from coprocessor\n+\tmrc p15, #0, r3, c13, c0, #3\n+\tcmp r3, #0\n+\t// Otherwise, try to read from magic address 0xFFFF0FF0\n+\tmvneq r3, #0xF000\n+\tldreq r3, [r3, #-15]\n+\n+#if __ANDROID__\n+\tadd r3, r3, #252\n+#elif __linux__\n+\tadd r3, r3, #4\n+#endif  // __ANDROID__\n+\n+\tldr r0, [r3]\n+\tmov pc, lr\n+#endif"}]}