{"sha": "5f2588f020c3da7b1d5c6ec089b833ca424ad403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjU4OGYwMjBjM2RhN2IxZDVjNmVjMDg5YjgzM2NhNDI0YWQ0MDM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-23T22:55:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:33Z"}, "message": "Fix behaviour in error condition", "tree": {"sha": "943868d0fd407495213c82f00d69c1331dc544bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943868d0fd407495213c82f00d69c1331dc544bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2588f020c3da7b1d5c6ec089b833ca424ad403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2588f020c3da7b1d5c6ec089b833ca424ad403", "html_url": "https://github.com/rust-lang/rust/commit/5f2588f020c3da7b1d5c6ec089b833ca424ad403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2588f020c3da7b1d5c6ec089b833ca424ad403/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db94efab39438278b77c990972978a7b00bdb9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/db94efab39438278b77c990972978a7b00bdb9b9", "html_url": "https://github.com/rust-lang/rust/commit/db94efab39438278b77c990972978a7b00bdb9b9"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "647e7b4a70f4b2f5f333e171205b1fba68d0571f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f2588f020c3da7b1d5c6ec089b833ca424ad403/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2588f020c3da7b1d5c6ec089b833ca424ad403/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5f2588f020c3da7b1d5c6ec089b833ca424ad403", "patch": "@@ -4987,24 +4987,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n         while let Some((def_id, defs)) = stack.pop() {\n-            let mut params = defs.params.iter().peekable();\n-            let mut remove_self = false;\n+            let mut params = defs.params.iter();\n+            let mut next_param = params.next();\n             if has_self {\n-                if let Some(param) = params.peek() {\n+                if let Some(param) = next_param {\n                     if param.index == 0 {\n                         if let GenericParamDefKind::Type { .. } = param.kind {\n                             // Handle `Self` first, so we can adjust the index to match the AST.\n                             push_to_substs!(opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n                                 self.var_for_def(span, param)\n                             }));\n-                            remove_self = true;\n+                            next_param = params.next();\n                         }\n                     }\n                 }\n             }\n-            if remove_self {\n-                params.next();\n-            }\n \n             let mut infer_types = true;\n             if let Some(&PathSeg(_, index)) = path_segs\n@@ -5015,29 +5012,33 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(ref data) = segments[index].args {\n                         let args = &data.args;\n                         'args: for arg in args {\n-                            while let Some(param) = params.next() {\n+                            while let Some(param) = next_param {\n                                 match param.kind {\n                                     GenericParamDefKind::Lifetime => match arg {\n                                         GenericArg::Lifetime(lt) => {\n                                             push_to_substs!(AstConv::ast_region_to_region(self,\n                                                 lt, Some(param)).into());\n+                                            next_param = params.next();\n                                             continue 'args;\n                                         }\n                                         GenericArg::Type(_) => {\n                                             // We're inferring a lifetime.\n                                             push_to_substs!(\n                                                 self.re_infer(span, Some(param)).unwrap().into());\n+                                            next_param = params.next();\n                                         }\n                                     }\n                                     GenericParamDefKind::Type { .. } => match arg {\n                                         GenericArg::Type(ty) => {\n                                             push_to_substs!(self.to_ty(ty).into());\n+                                            next_param = params.next();\n                                             continue 'args;\n                                         }\n                                         GenericArg::Lifetime(_) => {\n                                             self.tcx.sess.delay_span_bug(span,\n                                                 \"found a GenericArg::Lifetime where a \\\n                                                  GenericArg::Type was expected\");\n+                                            break 'args;\n                                         }\n                                     }\n                                 }\n@@ -5051,7 +5052,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            while let Some(param) = params.next() {\n+            while let Some(param) = next_param {\n                 match param.kind {\n                     GenericParamDefKind::Lifetime => {\n                         push_to_substs!(self.re_infer(span, Some(param)).unwrap().into());\n@@ -5073,6 +5074,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n+                next_param = params.next();\n             }\n         }\n         let substs = self.tcx.intern_substs(&substs);"}]}