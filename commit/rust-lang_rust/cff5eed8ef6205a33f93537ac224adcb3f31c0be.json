{"sha": "cff5eed8ef6205a33f93537ac224adcb3f31c0be", "node_id": "C_kwDOAAsO6NoAKGNmZjVlZWQ4ZWY2MjA1YTMzZjkzNTM3YWMyMjRhZGNiM2YzMWMwYmU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-18T10:10:52Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-18T10:10:52Z"}, "message": "Sync from rust 880416180b0a9ee1141c07d4d17667edb77daebd", "tree": {"sha": "5ea281a2fbfa5ecc290b55756047b6921799b795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea281a2fbfa5ecc290b55756047b6921799b795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff5eed8ef6205a33f93537ac224adcb3f31c0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff5eed8ef6205a33f93537ac224adcb3f31c0be", "html_url": "https://github.com/rust-lang/rust/commit/cff5eed8ef6205a33f93537ac224adcb3f31c0be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff5eed8ef6205a33f93537ac224adcb3f31c0be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8aab374644ba5aa269f7d9f9da80fdf4fb33684", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8aab374644ba5aa269f7d9f9da80fdf4fb33684", "html_url": "https://github.com/rust-lang/rust/commit/b8aab374644ba5aa269f7d9f9da80fdf4fb33684"}, {"sha": "33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b297a52543ce7eb7783a9a0b1243e8b50c60f9", "html_url": "https://github.com/rust-lang/rust/commit/33b297a52543ce7eb7783a9a0b1243e8b50c60f9"}], "stats": {"total": 109, "additions": 48, "deletions": 61}, "files": [{"sha": "2ecc8b8238b18abb344c6b1b5a76095c87ddee4f", "filename": "example/issue-91827-extern-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/example%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/example%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-91827-extern-types.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -6,7 +6,6 @@\n // Regression test for issue #91827.\n \n #![feature(const_ptr_offset_from)]\n-#![feature(const_slice_from_raw_parts)]\n #![feature(extern_types)]\n \n use std::ptr::addr_of;"}, {"sha": "77f437974c2d66527e965c27a36cf0f3aff62546", "filename": "patches/0027-sysroot-128bit-atomic-operations.patch", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/patches%2F0027-sysroot-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/patches%2F0027-sysroot-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-sysroot-128bit-atomic-operations.patch?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -19,7 +19,7 @@ index 092b7cf..158cf71 100644\n  #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n  impl RefUnwindSafe for crate::sync::atomic::AtomicI64 {}\n -#[cfg(target_has_atomic_load_store = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"99069\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}\n \n  #[cfg(target_has_atomic_load_store = \"ptr\")]\n@@ -29,7 +29,7 @@ index 092b7cf..158cf71 100644\n  #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n  impl RefUnwindSafe for crate::sync::atomic::AtomicU64 {}\n -#[cfg(target_has_atomic_load_store = \"128\")]\n--#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"99069\")]\n -impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}\n \n  #[cfg(target_has_atomic_load_store = \"8\")]\n@@ -46,14 +46,14 @@ index d9de37e..8293fce 100644\n -atomic_int! {\n -    cfg(target_has_atomic = \"128\"),\n -    cfg(target_has_atomic_equal_alignment = \"128\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n -    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicI128\"),\n -    \"i128\",\n -    \"#![feature(integer_atomics)]\\n\\n\",\n@@ -66,14 +66,14 @@ index d9de37e..8293fce 100644\n -atomic_int! {\n -    cfg(target_has_atomic = \"128\"),\n -    cfg(target_has_atomic_equal_alignment = \"128\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n -    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n--    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"99069\"),\n -    cfg_attr(not(test), rustc_diagnostic_item = \"AtomicU128\"),\n -    \"u128\",\n -    \"#![feature(integer_atomics)]\\n\\n\","}, {"sha": "6d321c7b298a730464bbf88e4e723afc52a7e501", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn codegen(\n             unwind_context,\n             kind,\n             tcx.lang_items().oom().is_some(),\n-            tcx.sess.opts.debugging_opts.oom,\n+            tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n     } else {"}, {"sha": "098e04452e6946fbdb04b9fb039fbcc5f8c3ad21", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -530,6 +530,11 @@ fn codegen_stmt<'tcx>(\n                     let val = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, val);\n                 }\n+                Rvalue::CopyForDeref(place) => {\n+                    let cplace = codegen_place(fx, place);\n+                    let val = cplace.to_cvalue(fx);\n+                    lval.write_cvalue(fx, val)\n+                }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n                     let place = codegen_place(fx, place);\n                     let ref_ = place.place_ref(fx, lval.layout());\n@@ -662,29 +667,6 @@ fn codegen_stmt<'tcx>(\n                             let (ptr, _extra) = operand.load_scalar_pair(fx);\n                             lval.write_cvalue(fx, CValue::by_val(ptr, dest_layout))\n                         }\n-                    } else if let ty::Adt(adt_def, _substs) = from_ty.kind() {\n-                        // enum -> discriminant value\n-                        assert!(adt_def.is_enum());\n-                        match to_ty.kind() {\n-                            ty::Uint(_) | ty::Int(_) => {}\n-                            _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n-                        }\n-                        let to_clif_ty = fx.clif_type(to_ty).unwrap();\n-\n-                        let discriminant = crate::discriminant::codegen_get_discriminant(\n-                            fx,\n-                            operand,\n-                            fx.layout_of(operand.layout().ty.discriminant_ty(fx.tcx)),\n-                        )\n-                        .load_scalar(fx);\n-\n-                        let res = crate::cast::clif_intcast(\n-                            fx,\n-                            discriminant,\n-                            to_clif_ty,\n-                            to_ty.is_signed(),\n-                        );\n-                        lval.write_cvalue(fx, CValue::by_val(res, dest_layout));\n                     } else {\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n                         let from = operand.load_scalar(fx);\n@@ -862,6 +844,7 @@ pub(crate) fn codegen_place<'tcx>(\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }\n+            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }"}, {"sha": "bad5d1f08a9cf5454766b36de3f2614e5a6020a4", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -144,7 +144,7 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n         };\n \n-        if let Some(false) = fx.tcx.sess.opts.debugging_opts.saturating_float_casts {\n+        if let Some(false) = fx.tcx.sess.opts.unstable_opts.saturating_float_casts {\n             return val;\n         }\n "}, {"sha": "a18b9da1fdd6dbd05a939f455ff6d73d424d9c9e", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -167,6 +167,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n \n     match const_val {\n+        ConstValue::ZeroSized => unreachable!(), // we already handles ZST above\n         ConstValue::Scalar(x) => match x {\n             Scalar::Int(int) => {\n                 if fx.clif_type(layout.ty).is_some() {"}, {"sha": "bbcb9591373dd7192f2e8b7f05a1063fbd0ed348", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -140,7 +140,7 @@ impl<'tcx> DebugContext<'tcx> {\n             // In order to have a good line stepping behavior in debugger, we overwrite debug\n             // locations of macro expansions with that of the outermost expansion site\n             // (unless the crate is being compiled with `-Z debug-macros`).\n-            let span = if !span.from_expansion() || tcx.sess.opts.debugging_opts.debug_macros {\n+            let span = if !span.from_expansion() || tcx.sess.opts.unstable_opts.debug_macros {\n                 span\n             } else {\n                 // Walk up the macro expansion chain until we reach a non-expanded span."}, {"sha": "3cd1ef5639ef9f2e33f9c06e606ce4701fbf1ec2", "filename": "src/driver/aot.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -33,7 +33,7 @@ fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectM\n     // Unlike cg_llvm, cg_clif defaults to disabling -Zfunction-sections. For cg_llvm binary size\n     // is important, while cg_clif cares more about compilation times. Enabling -Zfunction-sections\n     // can easily double the amount of time necessary to perform linking.\n-    builder.per_function_section(sess.opts.debugging_opts.function_sections.unwrap_or(false));\n+    builder.per_function_section(sess.opts.unstable_opts.function_sections.unwrap_or(false));\n     ObjectModule::new(builder)\n }\n \n@@ -66,7 +66,11 @@ fn emit_module(\n     let work_product = if backend_config.disable_incr_cache {\n         None\n     } else {\n-        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(tcx.sess, &name, &tmp_file)\n+        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n+            tcx.sess,\n+            &name,\n+            &[(\"o\", &tmp_file)],\n+        )\n     };\n \n     ModuleCodegenResult(\n@@ -82,7 +86,10 @@ fn reuse_workproduct_for_cgu(\n ) -> CompiledModule {\n     let work_product = cgu.previous_work_product(tcx);\n     let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n-    let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &work_product.saved_file);\n+    let source_file = rustc_incremental::in_incr_comp_dir_sess(\n+        &tcx.sess,\n+        &work_product.saved_files.get(\"o\").expect(\"no saved object file in work product\"),\n+    );\n     if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n         tcx.sess.err(&format!(\n             \"unable to copy {} to {}: {}\","}, {"sha": "4b2207f375879add06b4fbaff0ba8b7fe9cf14a9", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -58,7 +58,6 @@ pub(crate) use llvm::codegen_llvm_intrinsic_call;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_target::abi::InitKind;\n \n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;\n@@ -672,12 +671,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_zero_valid\n-                && !layout.might_permit_raw_init(\n-                    fx,\n-                    InitKind::Zero,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n-\n+            if intrinsic == sym::assert_zero_valid && !fx.tcx.permits_zero_init(layout) {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n@@ -688,12 +682,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 return;\n             }\n \n-            if intrinsic == sym::assert_uninit_valid\n-                && !layout.might_permit_raw_init(\n-                    fx,\n-                    InitKind::Uninit,\n-                    fx.tcx.sess.opts.debugging_opts.strict_init_checks) {\n-\n+            if intrinsic == sym::assert_uninit_valid && !fx.tcx.permits_uninit_init(layout) {\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,"}, {"sha": "568bb20a3f4a7614ab35b22a8931291695e824be", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -79,7 +79,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, UintTy,\n+        TypeFoldable, TypeVisitable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n \n@@ -171,7 +171,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         }\n     }\n \n-    fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n+    fn target_features(&self, _sess: &Session, _allow_unstable: bool) -> Vec<rustc_span::Symbol> {\n         vec![]\n     }\n "}, {"sha": "8ff35d2f76dbfb62c4c79b5ff9f1dbc3234343a1", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff5eed8ef6205a33f93537ac224adcb3f31c0be/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=cff5eed8ef6205a33f93537ac224adcb3f31c0be", "patch": "@@ -615,6 +615,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn place_opaque_cast(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n+    }\n+\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}]}