{"sha": "8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMWIwYWEzMjU1MmYyZTY5NGFhODcwMmZmMmNkNmQ5YTBlODk0ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-21T17:42:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-21T17:42:19Z"}, "message": "Auto merge of #27613 - GSam:binop, r=nrc\n\nIn the case where there are no paren in the AST, the pretty printer doesn't correctly print binary operations where precedence is concerned. Parenthesis may be missing due to some kind of expansion or manipulation of the AST. \r\n\r\nExample:\r\nPretty printer prints Expr(*, Expr(+, 1, 1), 2) as 1 + 1 * 2, as opposed to (1 + 1) * 2\r\n\r\nr? @nrc", "tree": {"sha": "fe9d4158b137aa84209eca234699188ee9de7fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9d4158b137aa84209eca234699188ee9de7fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1", "html_url": "https://github.com/rust-lang/rust/commit/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d07bbe701641e3841c81da808159ef1710f70e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d07bbe701641e3841c81da808159ef1710f70e", "html_url": "https://github.com/rust-lang/rust/commit/b1d07bbe701641e3841c81da808159ef1710f70e"}, {"sha": "22baa46f784856b6d6bb4374bcc3fb4b66bb8097", "url": "https://api.github.com/repos/rust-lang/rust/commits/22baa46f784856b6d6bb4374bcc3fb4b66bb8097", "html_url": "https://github.com/rust-lang/rust/commit/22baa46f784856b6d6bb4374bcc3fb4b66bb8097"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "b93a244df130625d4487524e9bab0ffd70dbcb11", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8f1b0aa32552f2e694aa8702ff2cd6d9a0e894f1", "patch": "@@ -1555,6 +1555,21 @@ impl<'a> State<'a> {\n         self.pclose()\n     }\n \n+    pub fn check_expr_bin_needs_paren(&mut self, sub_expr: &ast::Expr,\n+                                      binop: ast::BinOp) -> bool {\n+        match sub_expr.node {\n+            ast::ExprBinary(ref sub_op, _, _) => {\n+                if ast_util::operator_prec(sub_op.node) <\n+                    ast_util::operator_prec(binop.node) {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => true\n+        }\n+    }\n+\n     pub fn print_expr_maybe_paren(&mut self, expr: &ast::Expr) -> io::Result<()> {\n         let needs_par = needs_parentheses(expr);\n         if needs_par {\n@@ -1670,10 +1685,18 @@ impl<'a> State<'a> {\n                          op: ast::BinOp,\n                          lhs: &ast::Expr,\n                          rhs: &ast::Expr) -> io::Result<()> {\n-        try!(self.print_expr(lhs));\n+        if self.check_expr_bin_needs_paren(lhs, op) {\n+            try!(self.print_expr_maybe_paren(lhs));\n+        } else {\n+            try!(self.print_expr(lhs));\n+        }\n         try!(space(&mut self.s));\n         try!(self.word_space(ast_util::binop_to_string(op.node)));\n-        self.print_expr(rhs)\n+        if self.check_expr_bin_needs_paren(rhs, op) {\n+            self.print_expr_maybe_paren(rhs)\n+        } else {\n+            self.print_expr(rhs)\n+        }\n     }\n \n     fn print_expr_unary(&mut self,\n@@ -1730,7 +1753,11 @@ impl<'a> State<'a> {\n                 try!(self.print_literal(&**lit));\n             }\n             ast::ExprCast(ref expr, ref ty) => {\n-                try!(self.print_expr(&**expr));\n+                if let ast::ExprCast(..) = expr.node {\n+                    try!(self.print_expr(&**expr));\n+                } else {\n+                    try!(self.print_expr_maybe_paren(&**expr));\n+                }\n                 try!(space(&mut self.s));\n                 try!(self.word_space(\"as\"));\n                 try!(self.print_type(&**ty));"}]}