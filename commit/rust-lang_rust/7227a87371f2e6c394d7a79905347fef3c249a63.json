{"sha": "7227a87371f2e6c394d7a79905347fef3c249a63", "node_id": "C_kwDOAAsO6NoAKDcyMjdhODczNzFmMmU2YzM5NGQ3YTc5OTA1MzQ3ZmVmM2MyNDlhNjM", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T00:57:53Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T17:09:15Z"}, "message": "When `.await` is called on a non-`Future` expression, suggest removal\n\nKeep track of the origin of a `T: Future` obligation when caused by an\n`.await` expression.\n\nAddress #66731.", "tree": {"sha": "4a808dcfa6a484434b123e3691f01c2a9ced7fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a808dcfa6a484434b123e3691f01c2a9ced7fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7227a87371f2e6c394d7a79905347fef3c249a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7227a87371f2e6c394d7a79905347fef3c249a63", "html_url": "https://github.com/rust-lang/rust/commit/7227a87371f2e6c394d7a79905347fef3c249a63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7227a87371f2e6c394d7a79905347fef3c249a63/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27", "html_url": "https://github.com/rust-lang/rust/commit/06a6674a7de1ef7af00b0fcdfa0d77e6c3023a27"}], "stats": {"total": 311, "additions": 190, "deletions": 121}, "files": [{"sha": "2cf0dbaf425b8f0bf8e851ab1caba14888a0a291", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -607,6 +607,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     /// }\n     /// ```\n     fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let dot_await_span = expr.span.shrink_to_hi().to(await_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n@@ -623,7 +624,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 err.emit();\n             }\n         }\n-        let span = self.mark_span_with_reason(DesugaringKind::Await, await_span, None);\n+        let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n             await_span,\n@@ -682,7 +683,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(await_span, expr_break, ThinVec::new()))\n+                this.arena.alloc(this.expr(span, expr_break, ThinVec::new()))\n             });\n             self.arm(ready_pat, break_x)\n         };"}, {"sha": "5a2f6b2d7b1225a3d2e87324d4f9e3af1177a0c8", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -348,6 +348,8 @@ pub enum ObligationCauseCode<'tcx> {\n     /// If `X` is the concrete type of an opaque type `impl Y`, then `X` must implement `Y`\n     OpaqueType,\n \n+    AwaitableExpr,\n+\n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n     /// then it will be used to eprform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span."}, {"sha": "be5163cb7a34d539014f902320d31372dbc44477", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -2838,8 +2838,8 @@ impl<'a> Parser<'a> {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {\n-        let span = lo.to(self.prev_token.span);\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, _lo: Span) -> P<Expr> {\n+        let span = self.prev_token.span;\n         let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), AttrVec::new());\n         self.recover_from_await_method_call();\n         await_expr"}, {"sha": "239d9d65c58646fbcd39405dafb074e6b4d2ba52", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -439,6 +439,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n+                        self.suggest_remove_await(&obligation, &mut err);\n \n                         if Some(trait_ref.def_id()) == tcx.lang_items().try_trait() {\n                             self.suggest_await_before_try(&mut err, &obligation, trait_ref, span);"}, {"sha": "7d21d6019f85d2a08e8fc2ce9cdfcff263c0484a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -89,6 +89,12 @@ pub trait InferCtxtExt<'tcx> {\n         trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n     );\n \n+    fn suggest_remove_await(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    );\n+\n     fn suggest_change_mut(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -873,6 +879,25 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_remove_await(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        let span = obligation.cause.span;\n+\n+        if let ObligationCauseCode::AwaitableExpr = obligation.cause.code {\n+            // FIXME: use `trait_ref.self_ty().no_bound_vars()` to typecheck if `()` and if not\n+            // maybe suggest returning instead?\n+            err.span_suggestion_verbose(\n+                span,\n+                \"do not `.await` the expression\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     /// Check if the trait bound is implemented for a different mutability and note it in the\n     /// final error.\n     fn suggest_change_mut(\n@@ -1935,6 +1960,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::ReturnType\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_)\n+            | ObligationCauseCode::AwaitableExpr\n             | ObligationCauseCode::LetElse => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");"}, {"sha": "d80ca8feedf3b50193422af5207ea8220e34690c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -804,7 +804,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));\n-        self.add_required_obligations(span, def_id, &substs);\n+        self.add_required_obligations_with_code(\n+            span,\n+            def_id,\n+            &substs,\n+            match lang_item {\n+                hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr,\n+                // FIXME: see if there are other obligation specializations we could do here beyond\n+                // what we do above for `.await`.\n+                _ => traits::ItemObligation(def_id),\n+            },\n+        );\n         (Res::Def(def_kind, def_id), ty)\n     }\n \n@@ -1486,12 +1496,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n-    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n     crate fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        self.add_required_obligations_with_code(\n+            span,\n+            def_id,\n+            substs,\n+            traits::ItemObligation(def_id),\n+        )\n+    }\n+\n+    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n+    fn add_required_obligations_with_code(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        substs: &SubstsRef<'tcx>,\n+        code: ObligationCauseCode<'tcx>,\n+    ) {\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n+            traits::ObligationCause::new(span, self.body_id, code),\n             self.param_env,\n             bounds,\n         ) {"}, {"sha": "7d4447b6d5578a171f55641bbe421eb4666af734", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -14,10 +14,10 @@ LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/async-error-span.rs:14:5\n+  --> $DIR/async-error-span.rs:14:17\n    |\n LL |     get_future().await;\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bff282085735c8d8ba701253aed8b0c72df0c5f7", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,13 +6,13 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:24:5\n+  --> $DIR/async-fn-nonsend.rs:24:10\n    |\n LL |     let x = non_send();\n    |         - has type `impl Debug` which is not `Send`\n LL |     drop(x);\n LL |     fut().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `assert_send`\n@@ -29,12 +29,12 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:33:20\n+  --> $DIR/async-fn-nonsend.rs:33:25\n    |\n LL |     match Some(non_send()) {\n    |                ---------- has type `impl Debug` which is not `Send`\n LL |         Some(_) => fut().await,\n-   |                    ^^^^^^^^^^^ await occurs here, with `non_send()` maybe used later\n+   |                         ^^^^^^ await occurs here, with `non_send()` maybe used later\n ...\n LL | }\n    | - `non_send()` is later dropped here\n@@ -52,13 +52,13 @@ LL |     assert_send(non_sync_with_method_call());\n    |\n    = help: the trait `Send` is not implemented for `dyn std::fmt::Write`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:42:9\n+  --> $DIR/async-fn-nonsend.rs:42:14\n    |\n LL |     let f: &mut std::fmt::Formatter = panic!();\n    |         - has type `&mut Formatter<'_>` which is not `Send`\n LL |     if non_sync().fmt(f).unwrap() == () {\n LL |         fut().await;\n-   |         ^^^^^^^^^^^ await occurs here, with `f` maybe used later\n+   |              ^^^^^^ await occurs here, with `f` maybe used later\n LL |     }\n LL | }\n    | - `f` is later dropped here"}, {"sha": "27f4b0dac618b5a88b5d746b79d3674b377feda1", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -162,52 +162,52 @@ LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:71:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:71:19\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:76:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:76:19\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:81:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:81:19\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:85:19\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n-   |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                   ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:90:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:90:23\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n-   |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:97:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:97:23\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n-   |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n   --> $DIR/incorrect-syntax-suggestions.rs:113:17"}, {"sha": "e205de4738f24c3ebac12fd79d0d12c27e2ae625", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,12 +6,12 @@ LL |     is_sync(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:15:5\n+  --> $DIR/issue-64130-1-sync.rs:15:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Sync`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_sync`"}, {"sha": "2225000e2e5797c6383d1c636fdec7de1147ff0b", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(bar());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:15:5\n+  --> $DIR/issue-64130-2-send.rs:15:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which is not `Send`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "17867a6a3f62e6b6fc48f646a2967d89cc7b96ea", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -8,12 +8,12 @@ LL |     is_qux(bar());\n    |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:18:5\n+  --> $DIR/issue-64130-3-other.rs:18:10\n    |\n LL |     let x = Foo;\n    |         - has type `Foo` which does not implement `Qux`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n+   |          ^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n note: required by a bound in `is_qux`"}, {"sha": "d631e6dc7f7e968aa80446b2791fbe7114d8a7fb", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,13 +6,13 @@ LL | pub fn foo() -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Any + Send + 'static)`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-4-async-move.rs:21:26\n+  --> $DIR/issue-64130-4-async-move.rs:21:31\n    |\n LL |         match client.status() {\n    |               ------ has type `&Client` which is not `Send`\n LL |             200 => {\n LL |                 let _x = get().await;\n-   |                          ^^^^^^^^^^^ await occurs here, with `client` maybe used later\n+   |                               ^^^^^^ await occurs here, with `client` maybe used later\n ...\n LL |     }\n    |     - `client` is later dropped here"}, {"sha": "1da80d98bf8fc465f0626b17421760c2a1fccdc6", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,12 +6,12 @@ LL |     is_send(foo());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n+  --> $DIR/issue-64130-non-send-future-diags.rs:17:10\n    |\n LL |     let g = x.lock().unwrap();\n    |         - has type `MutexGuard<'_, u32>` which is not `Send`\n LL |     baz().await;\n-   |     ^^^^^^^^^^^ await occurs here, with `g` maybe used later\n+   |          ^^^^^^ await occurs here, with `g` maybe used later\n LL | }\n    | - `g` is later dropped here\n note: required by a bound in `is_send`"}, {"sha": "f32e074d75d620a1656a053b5c2745b79e677a79", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,12 +6,12 @@ LL |     spawn(async {\n    |\n    = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-67252-unnamed-future.rs:20:9\n+  --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |\n LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n    |             -- has type `*mut ()` which is not `Send`\n LL |         AFuture.await;\n-   |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n+   |                ^^^^^^ await occurs here, with `_a` maybe used later\n LL |     });\n    |     - `_a` is later dropped here\n note: required by a bound in `spawn`"}, {"sha": "bfed4b0b05c6e8255cd250f373356c944c718f7a", "filename": "src/test/ui/async-await/issue-70594.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,6 +6,7 @@ async fn fun() {\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `()` is not a future\n+    //~| error: `()` is not a future\n }\n \n fn main() {}"}, {"sha": "a2d4257577e3228a4cde28015d864a72d65b28bd", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,34 +1,48 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL | async fn fun() {\n    |          --- this is not `async`\n LL |     [1; ().await];\n-   |         ^^^^^^^^ only allowed inside `async` functions and blocks\n+   |            ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0744]: `.await` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^\n+   |            ^^^^^\n \n error[E0744]: `.await` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:11\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^\n+   |           ^^^^^^\n \n error[E0277]: `()` is not a future\n-  --> $DIR/issue-70594.rs:4:9\n+  --> $DIR/issue-70594.rs:4:12\n    |\n LL |     [1; ().await];\n-   |         ^^^^^^^^ `()` is not a future\n+   |            ^^^^^ `()` is not a future\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n    = note: required because of the requirements on the impl of `IntoFuture` for `()`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: `()` is not a future\n+  --> $DIR/issue-70594.rs:4:11\n+   |\n+LL |     [1; ().await];\n+   |           ^^^^^^ `()` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+help: do not `.await` the expression\n+   |\n+LL -     [1; ().await];\n+LL +     [1; ()];\n+   | \n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0728, E0744.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "4929aa29d0f40677797b075719122f793098b70d", "filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,25 +6,16 @@ LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:13:9\n-   |\n-LL | /         baz(|| async{\n-LL | |             foo(tx.clone());\n-LL | |         }).await;\n-   | |________________^ first, await occurs here, with the value maybe used later...\n-note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:15:17\n-   |\n-LL |         }).await;\n-   |                 ^\n-note: this has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n-  --> $DIR/issue-70935-complex-spans.rs:13:13\n+  --> $DIR/issue-70935-complex-spans.rs:15:11\n    |\n LL |           baz(|| async{\n-   |  _____________^\n+   |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n-   | |_________^\n+   | |         - ^^^^^^- the value is later dropped here\n+   | |         | |\n+   | |_________| await occurs here, with the value maybe used later\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n \n error: aborting due to previous error\n "}, {"sha": "eade6aa2d3dcc7673de407b8f2c86cbccbea88cd", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,12 +6,12 @@ LL |   fake_spawn(wrong_mutex());\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-71137.rs:14:5\n+  --> $DIR/issue-71137.rs:14:25\n    |\n LL |     let mut guard = m.lock().unwrap();\n    |         --------- has type `MutexGuard<'_, i32>` which is not `Send`\n LL |     (async { \"right\"; }).await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ await occurs here, with `mut guard` maybe used later\n+   |                         ^^^^^^ await occurs here, with `mut guard` maybe used later\n LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here"}, {"sha": "19cc339ec0a07ca78e63ef4e5d13ff477b48f056", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,8 +1,8 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:8:19\n+  --> $DIR/issue-51719.rs:8:25\n    |\n LL |     let _gen = || foo().await;\n-   |                -- ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                --       ^^^^^ only allowed inside `async` functions and blocks\n    |                |\n    |                this is not `async`\n "}, {"sha": "6dd3726608ba89a81fd7f1fa17d5dcb5b56ded74", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:9:20\n+  --> $DIR/issue-51751.rs:9:27\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let result = inc(10000);\n LL |     let finished = result.await;\n-   |                    ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                           ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "71108b4e1d856e524959bcb18e0dd6e7036f16bb", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,10 +6,11 @@ fn main() {\n     async { let (); }.await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     async {\n-    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n         let task1 = print_dur().await;\n     }.await;\n+    //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     (|_| 2333).await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n-    //~^^ ERROR\n+    //~| ERROR is not a future\n+    //~| ERROR is not a future\n }"}, {"sha": "c09903e48c6028979d2ec8e2316fe1653fc4534c", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,43 +1,54 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:5\n+  --> $DIR/issue-62009-1.rs:6:23\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:10:7\n    |\n-LL |   fn main() {\n-   |      ---- this is not `async`\n+LL | fn main() {\n+   |    ---- this is not `async`\n ...\n-LL | /     async {\n-LL | |\n-LL | |         let task1 = print_dur().await;\n-LL | |     }.await;\n-   | |___________^ only allowed inside `async` functions and blocks\n+LL |     }.await;\n+   |       ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:12:16\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                ^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:12:16\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+   |                ^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n    = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+  --> $DIR/issue-62009-1.rs:12:15\n+   |\n+LL |     (|_| 2333).await;\n+   |               ^^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n+   |\n+   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n+help: do not `.await` the expression\n+   |\n+LL -     (|_| 2333).await;\n+LL +     (|_| 2333);\n+   | \n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0728.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "9c2f20df6576f18e63534436bc2d155326e791eb", "filename": "src/test/ui/async-await/issues/issue-62009-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-2.rs:8:5\n+  --> $DIR/issue-62009-2.rs:8:23\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     (async || 2333)().await;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                       ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "cac174061a2b5717ebc6cecadd65c958079aa77c", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -6,16 +6,12 @@ LL |     assert_send(async {\n    |\n    = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:9\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ first, await occurs here, with `std::ptr::null()` maybe used later...\n-note: `std::ptr::null()` is later dropped here\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:14:41\n-   |\n-LL |         bar(Foo(std::ptr::null())).await;\n-   |                 ----------------        ^\n-   |                 |\n+   |                 ----------------  ^^^^^^- `std::ptr::null()` is later dropped here\n+   |                 |                 |\n+   |                 |                 await occurs here, with `std::ptr::null()` maybe used later\n    |                 has type `*const u8` which is not `Send`\n help: consider moving this into a `let` binding to create a shorter lived borrow\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:13"}, {"sha": "b6583022c161a439f59f04709a5941c47d194fe8", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:9:13\n+  --> $DIR/non-async-enclosing-span.rs:9:28\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let x = move || {};\n LL |     let y = do_the_thing().await;\n-   |             ^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                            ^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "a812840d40b883aba89f1144306f4bb50ec2079c", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -39,7 +39,7 @@ LL |     dummy();\n    |            +\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/suggest-missing-await.rs:35:9\n+  --> $DIR/suggest-missing-await.rs:35:17\n    |\n LL |       let _x = if true {\n    |  ______________-\n@@ -48,7 +48,7 @@ LL | |         dummy()\n LL | |\n LL | |     } else {\n LL | |         dummy().await\n-   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |                 ^^^^^ expected opaque type, found `()`\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n@@ -61,7 +61,7 @@ LL |         dummy().await\n    |                ++++++\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/suggest-missing-await.rs:45:14\n+  --> $DIR/suggest-missing-await.rs:45:22\n    |\n LL |       let _x = match 0usize {\n    |  ______________-\n@@ -70,7 +70,7 @@ LL | |         0 => dummy(),\n LL | |         1 => dummy(),\n    | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n-   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+   | |                      ^^^^^ expected opaque type, found `()`\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types"}, {"sha": "8c0ecb8785d3375dc2493ae7fc36f4612fc8d1ad", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -5,10 +5,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -17,10 +17,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -29,10 +29,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -41,10 +41,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n@@ -53,10 +53,10 @@ LL |     bar().await;\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n    |\n note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:9:5\n+  --> $DIR/unresolved_type_param.rs:9:10\n    |\n LL |     bar().await;\n-   |     ^^^^^^^^^^^\n+   |          ^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b3c9b43810cd90c845938f67dbc74d2215f2356c", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -4,7 +4,7 @@ error: boxed `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/boxed.rs:3:9"}, {"sha": "bc1b611299a2b2caaf9e3e52af4b916f0689931e", "filename": "src/test/ui/lint/must_not_suspend/dedup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -2,7 +2,7 @@ error: `No` held across a suspend point, but should not be\n   --> $DIR/dedup.rs:16:12\n    |\n LL |     wheeee(No {}).await;\n-   |     -------^^^^^------- the value is held across this suspend point\n+   |            ^^^^^ ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/dedup.rs:3:9"}, {"sha": "0d4319670e6622e7ade73ade1dc610e6e25feb41", "filename": "src/test/ui/lint/must_not_suspend/gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgated.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -31,7 +31,7 @@ error: `MutexGuard` held across a suspend point, but should not be\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/gated.rs:2:9"}, {"sha": "a968b7ca0330fb7b72b3033b145624805b4006f1", "filename": "src/test/ui/lint/must_not_suspend/mutex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fmutex.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -4,7 +4,7 @@ error: `MutexGuard` held across a suspend point, but should not be\n LL |     let _guard = m.lock().unwrap();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/mutex.rs:3:9"}, {"sha": "6d30f134ec4216afb0904a5ac7254f83e8a50e51", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -5,7 +5,7 @@ LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n LL | \n LL |         other().await;\n-   |         ------------- the value is held across this suspend point\n+   |                ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/ref.rs:3:9"}, {"sha": "dd3978b02a852f36893372fe32d2e11420c37d1f", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -5,7 +5,7 @@ LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/trait.rs:3:9\n@@ -25,7 +25,7 @@ LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL | \n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:22:9"}, {"sha": "42d037b350b1999175231adb23c25d816c43aa26", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -4,7 +4,7 @@ error: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/unit.rs:3:9"}, {"sha": "417c397dad0101c0b48ea0e3a05f69a5e8d1601b", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7227a87371f2e6c394d7a79905347fef3c249a63/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=7227a87371f2e6c394d7a79905347fef3c249a63", "patch": "@@ -4,7 +4,7 @@ warning: `Umm` held across a suspend point, but should not be\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this suspend point\n+   |            ------ the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/warn.rs:4:9"}]}