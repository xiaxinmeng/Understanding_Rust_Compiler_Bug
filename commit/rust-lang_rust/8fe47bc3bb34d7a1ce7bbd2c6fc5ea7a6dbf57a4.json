{"sha": "8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTQ3YmMzYmIzNGQ3YTFjZTdiYmQyYzZmYzVlYTdhNmRiZjU3YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-27T02:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-27T02:41:24Z"}, "message": "auto merge of #15183 : steveklabnik/rust/hello_cargo, r=huonw\n\nBuilt on top of https://github.com/rust-lang/rust/pull/15181. https://github.com/steveklabnik/rust/commit/e52719291183d7b4f691a1997c69fd75b8101b07 is the only new commit, you may want to review that separately.\r\n\r\nI'm not sure if the car analogy is too glib.", "tree": {"sha": "3103fc696cd71d144bf983b59154c80bb526b0ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3103fc696cd71d144bf983b59154c80bb526b0ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4", "html_url": "https://github.com/rust-lang/rust/commit/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb6b04e91e9046b80f2ad7552d4aaf41fa78622", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb6b04e91e9046b80f2ad7552d4aaf41fa78622", "html_url": "https://github.com/rust-lang/rust/commit/deb6b04e91e9046b80f2ad7552d4aaf41fa78622"}, {"sha": "6bfbc35491f320092c82a5f599963cd197bc6ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfbc35491f320092c82a5f599963cd197bc6ca9", "html_url": "https://github.com/rust-lang/rust/commit/6bfbc35491f320092c82a5f599963cd197bc6ca9"}], "stats": {"total": 164, "additions": 144, "deletions": 20}, "files": [{"sha": "fd7846386ed1bc1096d849e6c298c49ee6970ae2", "filename": "src/doc/guide.md", "status": "modified", "additions": 144, "deletions": 20, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=8fe47bc3bb34d7a1ce7bbd2c6fc5ea7a6dbf57a4", "patch": "@@ -27,7 +27,8 @@ Sound good? Let's go!\n \n The first step to using Rust is to install it! There are a number of ways to\n install Rust, but the easiest is to use the the `rustup` script. If you're on\n-Linux or a Mac, All you need to do is this:\n+Linux or a Mac, all you need to do is this (note that you don't need to type\n+in the `$`s, they just indicate the start of each command):\n \n ```{ignore}\n $ curl -s http://www.rust-lang.org/rustup.sh | sudo sh\n@@ -96,13 +97,14 @@ host: x86_64-unknown-linux-gnu\n If you did, Rust has been installed successfully! Congrats!\n \n If not, there are a number of places where you can get help. The easiest is\n-IRC, which you can access\n-[here](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust). Click\n+[the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust), which\n+you can access through\n+[Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust). Click\n that link, and you'll be chatting with other Rustaceans (a silly nickname we\n-call ourselves), and we can help you out. Other great resources include our\n-[mailing list](https://mail.mozilla.org/listinfo/rust-dev),\n-[subreddit](http://www.reddit.com/r/rust), and\n-[StackOverflow](http://stackoverflow.com/questions/tagged/rust).\n+call ourselves), and we can help you out. Other great resources include [our\n+mailing list](https://mail.mozilla.org/listinfo/rust-dev), [the /r/rust\n+subreddit](http://www.reddit.com/r/rust), and [Stack\n+Overflow](http://stackoverflow.com/questions/tagged/rust).\n \n ## Hello, world!\n \n@@ -123,8 +125,7 @@ require that you know a whole ton about the command line, but until the\n language is in a more finished state, IDE support is spotty. Rust makes no\n specific demands on your editing tooling, or where your code lives.\n \n-With that said, let's make a directory in our projects directory. Note that you\n-don't need to type in the `$`s, they just indicate the start of each command:\n+With that said, let's make a directory in our projects directory.\n \n ```{bash}\n $ mkdir ~/projects\n@@ -159,7 +160,7 @@ Save the file, and then type this into your terminal window:\n \n ```{bash}\n $ rustc hello_world.rs\n-$ ./hello_world  # on Windows, this is ./hello_world.exe\n+$ ./hello_world # just 'hello_world' on Windows\n Hello, world\n ```\n \n@@ -180,8 +181,8 @@ entirely.  We'll get to it later.\n \n You'll also note that the function is wrapped in curly braces (`{` and `}`).\n Rust requires these around all function bodies. It is also considered good\n-style to put the curly brace on the same line as the function declaration, with\n-one space in between.\n+style to put the opening curly brace on the same line as the function\n+declaration, with one space in between.\n \n Next up is this line:\n \n@@ -199,13 +200,16 @@ The second point is the `println!()` part. This is calling a Rust **macro**,\n which is how metaprogramming is done in Rust. If it were a function instead, it\n would look like this: `println()`. For our purposes, we don't need to worry\n about this difference. Just know that sometimes, you'll see a `!`, and that\n-means that you're calling a macro instead of a normal function.\n+means that you're calling a macro instead of a normal function. One last thing\n+to mention: Rust's macros are significantly different than C macros, if you've\n+used those. Don't be scared of using macros. We'll get to the details\n+eventually, you'll just have to trust us for now.\n \n-Next, `\"Hello, world\"` is a **string**. Strings are a surprisingly\n-complicated topic in a systems programming language, and this is a **staticly\n-allocated** string. We will talk more about different kinds of allocation\n-later. We pass this string as an argument to `println!`, which prints the\n-string to the screen. Easy enough!\n+Next, `\"Hello, world\"` is a **string**. Strings are a surprisingly complicated\n+topic in a systems programming language, and this is a **statically allocated**\n+string. We will talk more about different kinds of allocation later. We pass\n+this string as an argument to `println!`, which prints the string to the\n+screen. Easy enough!\n \n Finally, the line ends with a semicolon (`;`). Rust is an **expression\n oriented** language, which means that most things are expressions. The `;` is\n@@ -235,8 +239,8 @@ $ dir\n hello_world.exe  hello_world.rs\n ```\n \n-There are now two files: our source code, with the `.rs`, and the executable.\n-We ran the executable like this:\n+There are now two files: our source code, with the `.rs` extension, and the\n+executable (`hello_world.exe` on Windows, `hello_world` everywhere else)\n \n ```{bash}\n $ ./hello_world  # or ./hello_world.exe on Windows\n@@ -264,26 +268,146 @@ projects.\n \n ## Hello, Cargo!\n \n+[Cargo](http://crates.io) is a tool that Rustaceans use to help manage their\n+Rust projects. Cargo is currently in an alpha state, just like Rust, and so it\n+is still a work in progress. However, it is already good enough to use for many\n+Rust projects, and so it is assumed that Rust projects will use Cargo from the\n+beginning.\n \n+Programmers love car analogies, so I've got a good one for you to think about\n+the relationship between `cargo` and `rustc`: `rustc` is like a car, and\n+`cargo` is like a robotic driver. You can drive your car yourself, of course,\n+but isn't it just easier to let a computer drive it for you?\n \n+Anyway, Cargo manages three things: building your code, downloading the\n+dependencies your code needs, and building the dependencies your code needs.\n+At first, your program doesn't have any dependencies, so we'll only be using\n+the first part of its functionality. Eventually, we'll add more. Since we\n+started off by using Cargo, it'll be easy to add later.\n \n+Let's convert Hello World to Cargo. The first thing we need to do is install\n+it. To do this, we need to build it from source. There are no binaries yet.\n \n+First, let's go back to our projects directory. We don't want Cargo to\n+live in our project!\n \n+```{bash}\n+$ cd ..\n+```\n \n+Next, we need these commands:\n \n+```{bash}\n+$ git clone --recursive https://github.com/rust-lang/cargo\n+$ cd cargo\n+$ make\n+$ make install # may need sudo or admin permissions\n+```\n \n+The `--recursive` downloads Cargo's own dependencies. You can't use Cargo to\n+fetch dependencies until you have Cargo installed! Also, you will need to have\n+`git` installed. Much of the Rust world assumes `git` usage, so it's a good\n+thing to have around. Please check out [the git\n+documentation](http://git-scm.com/book/en/Getting-Started-Installing-Git) for\n+more on installing `git`.\n \n+We hope to give Cargo a binary installer, similar to Rust's own, so that\n+this will not be necessary in the future.\n \n+Let's see if that worked. Try this:\n \n+```{bash}\n+$ cargo\n+Commands:\n+  build          # compile the current project\n \n+Options (for all commands):\n \n+-v, [--verbose]\n+-h, [--help]\n+```\n \n+If you see this output when you run `cargo`, congrats! Cargo is working. If\n+not, please [open an issue](https://github.com/rust-lang/cargo/issues/new) or\n+drop by the Rust IRC, and we can help you out.\n \n+Let's move back into our `hello_world` directory now:\n \n+```{bash}\n+$ cd ..              # move back up into projects\n+$ cd hello_world     # move into hello_world\n+```\n \n+To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n+configuration file, and put our source file in the right place. Let's\n+do that part first:\n \n+```{bash}\n+$ mkdir src\n+$ mv hello_world.rs src/hello_world.rs\n+```\n+\n+Cargo expects your source files to live inside a `src` directory. That leaves\n+the top level for other things, like READMEs, licence information, and anything\n+not related to your code. Cargo helps us keep our projects nice and tidy. A\n+place for everything, and everything in its place.\n+\n+Next, our configuration file:\n+\n+```{bash}\n+$ editor Cargo.toml\n+```\n \n+Make sure to get this name right: you need the capital `C`!\n \n+Put this inside:\n+\n+```{ignore}\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.1.0\"\n+authors = [ \"someone@example.com\" ]\n+\n+[[bin]]\n+\n+name = \"hello_world\"\n+```\n+\n+This file is in the [TOML](https://github.com/toml-lang/toml) format. Let's let\n+it explain itself to you:\n+\n+> TOML aims to be a minimal configuration file format that's easy to read due\n+> to obvious semantics. TOML is designed to map unambiguously to a hash table.\n+> TOML should be easy to parse into data structures in a wide variety of\n+> languages.\n+\n+TOML is very similar to INI, but with some extra goodies.\n+\n+Anyway, there are two **table**s in this file: `package` and `bin`. The first\n+tells Cargo metadata about your package. The second tells Cargo that we're\n+interested in building a binary, not a library (though we could do both!), as\n+well as what it is named.\n+\n+Once you have this file in place, we should be ready to build! Try this:\n+\n+```{bash}\n+$ cargo build\n+   Compiling hello_world v0.1.0 (file:/home/yourname/projects/hello_world)\n+$ ./target/hello_world \n+Hello, world!\n+```\n \n+Bam! We build our project with `cargo build`, and run it with\n+`./target/hello_world`. This hasn't bought us a whole lot over our simple use\n+of `rustc`, but think about the future: when our project has more than one\n+file, we would need to call `rustc` twice, and pass it a bunch of options to\n+tell it to build everything together. With Cargo, as our project grows, we can\n+just `cargo build` and it'll work the right way.\n \n+That's it! We've successfully built `hello_world` with Cargo. Even though our\n+program is simple, it's using much of the real tooling that you'll use for the\n+rest of your Rust career.\n \n+Next, we'll learn more about Rust itself, by starting to write a more complicated\n+program. We hope you want to do more with Rust than just print \"Hello, world!\""}]}