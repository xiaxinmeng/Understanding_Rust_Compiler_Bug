{"sha": "a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzJjYTFiNTZlNjRmNGE1NjU4YWUwMzcxZGE0NGU3YWY3Y2Q1OGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-02T12:57:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:11Z"}, "message": "`eval_mir_constant` doesn't need a builder param", "tree": {"sha": "01abb1b622eeeeaa5f61ba0c152d96b01e48ea57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01abb1b622eeeeaa5f61ba0c152d96b01e48ea57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "html_url": "https://github.com/rust-lang/rust/commit/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b688a959def6d3441d3e4854fde557de0913e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b688a959def6d3441d3e4854fde557de0913e36", "html_url": "https://github.com/rust-lang/rust/commit/2b688a959def6d3441d3e4854fde557de0913e36"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "494355efeaaa76c5cf82347427f413c09c1df2bd", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "patch": "@@ -657,7 +657,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             span_bug!(span, \"shuffle indices must be constant\");\n                         }\n                         mir::Operand::Constant(ref constant) => {\n-                            let c = self.eval_mir_constant(&bx, constant);\n+                            let c = self.eval_mir_constant(constant);\n                             let (llval, ty) = self.simd_shuffle_indices(\n                                 &bx,\n                                 constant.span,"}, {"sha": "3f8dc420cf40278692c33ac0cffd5680a87331d0", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "patch": "@@ -3,7 +3,7 @@ use rustc_mir::const_eval::const_field;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout;\n+use rustc::ty::layout::{self, HasTyCtxt};\n use syntax::source_map::Span;\n use crate::traits::*;\n \n@@ -12,20 +12,19 @@ use super::FunctionCx;\n impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn eval_mir_constant(\n         &mut self,\n-        bx: &Bx,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n         match constant.literal.val {\n             mir::interpret::ConstValue::Unevaluated(def_id, ref substs) => {\n                 let substs = self.monomorphize(substs);\n                 let instance = ty::Instance::resolve(\n-                    bx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs,\n+                    self.cx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs,\n                 ).unwrap();\n                 let cid = mir::interpret::GlobalId {\n                     instance,\n                     promoted: None,\n                 };\n-                bx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid))\n+                self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid))\n             },\n             _ => Ok(*self.monomorphize(&constant.literal)),\n         }"}, {"sha": "289129e8e62ffe8d366407cb0310d41c36549bbc", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=a0c2ca1b56e64f4a5658ae0371da44e7af7cd58f", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Operand::Constant(ref constant) => {\n                 let ty = self.monomorphize(&constant.ty);\n-                self.eval_mir_constant(bx, constant)\n+                self.eval_mir_constant(constant)\n                     .and_then(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n                         match err {"}]}