{"sha": "2072e117304da97ea1c7df052519f6dc3777b7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzJlMTE3MzA0ZGE5N2VhMWM3ZGYwNTI1MTlmNmRjMzc3N2I3ZmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-03T16:09:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-03T16:09:08Z"}, "message": "Rollup merge of #80591 - lcnr:incomplete-features, r=RalfJung\n\nremove allow(incomplete_features) from std\n\ncc https://github.com/rust-lang/rust/pull/80349#issuecomment-753357123\n\n> Now I am somewhat concerned that the standard library uses some of these features...\n\nI think it is theoretically ok to use incomplete features in the standard library or the compiler if we know that there is an already working subset and we explicitly document what we have to be careful about. Though at that point it is probably better to try and split the incomplete feature into two separate ones, similar to `min_specialization`.\n\nWill be interesting once `feature(const_evaluatable_checked)` works well enough to imo be used in the compiler but not yet well enough to be removed from `INCOMPLETE_FEATURES`.\n\nr? `@RalfJung`", "tree": {"sha": "e6a934b47776bae0292922262c8124edfc40e781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a934b47776bae0292922262c8124edfc40e781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2072e117304da97ea1c7df052519f6dc3777b7ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8ewkCRBK7hj4Ov3rIwAAdHIIAG9xSHC9pqhWF8LWv6vKSPeA\nbW3K6k5gtIsZO21SC+Spuzjia7q3zfNhAKDWH+l+v+ixQMspOTdmdM9RHLTGL3+e\nk7fudXzpdi3cht2ZrdtH7R6RoH+lXokT8HgHfiD2swhbnV4lWCBPtGfCeXgZP4b5\nb30tid3TSBNkvSbaVIGlJY9ibSBQecA39QbVZye9FtpvLShOgGYhzM2zD6c0sUrD\ngYbVkkBY+GlGnHUOkP0kI8xVQXaOb7XirfeqaxidoRpXtJJrifMwCAYp83C3aYqF\ns0cCyrTnoFegpxYfAJanYqwSweayRcjBDoBbOaiIridMhLBHgV09XgBOg0EKkac=\n=ac3v\n-----END PGP SIGNATURE-----\n", "payload": "tree e6a934b47776bae0292922262c8124edfc40e781\nparent 2686daa7791865d7970fba2b9d6e6db279666a41\nparent 6cf47ff4f0ed0395343c97dddbd278281189f446\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1609690148 +0100\ncommitter GitHub <noreply@github.com> 1609690148 +0100\n\nRollup merge of #80591 - lcnr:incomplete-features, r=RalfJung\n\nremove allow(incomplete_features) from std\n\ncc https://github.com/rust-lang/rust/pull/80349#issuecomment-753357123\n\n> Now I am somewhat concerned that the standard library uses some of these features...\n\nI think it is theoretically ok to use incomplete features in the standard library or the compiler if we know that there is an already working subset and we explicitly document what we have to be careful about. Though at that point it is probably better to try and split the incomplete feature into two separate ones, similar to `min_specialization`.\n\nWill be interesting once `feature(const_evaluatable_checked)` works well enough to imo be used in the compiler but not yet well enough to be removed from `INCOMPLETE_FEATURES`.\n\nr? `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2072e117304da97ea1c7df052519f6dc3777b7ff", "html_url": "https://github.com/rust-lang/rust/commit/2072e117304da97ea1c7df052519f6dc3777b7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2072e117304da97ea1c7df052519f6dc3777b7ff/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2686daa7791865d7970fba2b9d6e6db279666a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2686daa7791865d7970fba2b9d6e6db279666a41", "html_url": "https://github.com/rust-lang/rust/commit/2686daa7791865d7970fba2b9d6e6db279666a41"}, {"sha": "6cf47ff4f0ed0395343c97dddbd278281189f446", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf47ff4f0ed0395343c97dddbd278281189f446", "html_url": "https://github.com/rust-lang/rust/commit/6cf47ff4f0ed0395343c97dddbd278281189f446"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "cfad111aa546fa86ddb994d673df7abf1b1aa441", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2072e117304da97ea1c7df052519f6dc3777b7ff/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2072e117304da97ea1c7df052519f6dc3777b7ff/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=2072e117304da97ea1c7df052519f6dc3777b7ff", "patch": "@@ -70,7 +70,6 @@\n #![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(incomplete_features)]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![feature(rustc_allow_const_fn_unstable)]\n #![cfg_attr(not(test), feature(generator_trait))]\n@@ -90,7 +89,6 @@\n #![feature(coerce_unsized)]\n #![feature(const_btree_new)]\n #![feature(const_fn)]\n-#![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n #![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n@@ -120,6 +118,7 @@\n #![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n+#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]"}, {"sha": "df8d9ff371fe4af5b2ebeb022ed2723d75854202", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2072e117304da97ea1c7df052519f6dc3777b7ff/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2072e117304da97ea1c7df052519f6dc3777b7ff/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2072e117304da97ea1c7df052519f6dc3777b7ff", "patch": "@@ -62,7 +62,6 @@\n #![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(incomplete_features)]\n #![feature(rustc_allow_const_fn_unstable)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n@@ -89,7 +88,6 @@\n #![feature(const_impl_trait)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n-#![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]\n #![feature(const_ptr_offset)]\n@@ -131,6 +129,7 @@\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n #![feature(simd_ffi)]\n+#![cfg_attr(bootstrap, feature(min_const_generics))]\n #![feature(min_specialization)]\n #![feature(staged_api)]\n #![feature(std_internals)]"}]}