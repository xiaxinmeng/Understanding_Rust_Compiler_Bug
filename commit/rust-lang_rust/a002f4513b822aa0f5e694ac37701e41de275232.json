{"sha": "a002f4513b822aa0f5e694ac37701e41de275232", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMDJmNDUxM2I4MjJhYTBmNWU2OTRhYzM3NzAxZTQxZGUyNzUyMzI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-15T12:48:14Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T12:30:11Z"}, "message": "Remove `sub_types_or_anon`", "tree": {"sha": "a7c54bae98386aaa818c0d2feafc06d7c040d1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c54bae98386aaa818c0d2feafc06d7c040d1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a002f4513b822aa0f5e694ac37701e41de275232", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmD0HtMACgkQgTGiTgx5\n76/6XQ//V6tMSvLb6mnNfX39hLWsnSgmXY9cVpa7iBBQfWf0QKI/QnXC8LuI1KyJ\nMWsB0+4O9dc1OdA6gg4jtHyTVrsAL+8bf6TH2K/TNV+8/jn0gFrO3X5954tJHG5y\nnCL/U9FqvnmAxk53ldk7RHMuDeZesimacsz0wNquZfjv+s0pLssOV7BhP1KGm8XP\nBlQh5Jrb2Ea72ewKrrQk9DU39R7gJ0r8+LRm3Jti2K8KK4wtAZDmfVoqdHJ5VBXo\nIbGKBVa/BVSgUHj6DeTJY/Rf5ToFpI5rk0keDkMfRI1clCPAdWV683JzCvd4NIeo\n6cwtK/t4sd/DxjLY3BZvzgI1JrFM9xIYF9Cu5ooqnGnKJdRpS8fZapw97c80nOSR\nbyqC7carAz44/NgK44RUe/K2TuAkIerVxQHgHir42G3k6ifdZwOwTSK+F1x4y+Em\nYaMpBW9ELuGN/l8D6waMSsIOFeA0tetOkP6pzj6ei4hujfnUxoOdvjSWpIMQ1aSO\nXP71aTkX6MJNo7At+dGx0Vn78QImEZxQ4qlsM4gGHeWw10ztxxDhPWTimpxl4axW\nHRw1r81EZM2mCDdiwQEMuOjf/ONXyjN7n9Jh1lJq1XnA74pLEun3LQgDzSxRqjjb\n1Ym8mGQBb32nmAZUBVWglF4KZ6H2Ok9VfZmBk+MpOjaGPpLIH1Q=\n=u2UF\n-----END PGP SIGNATURE-----", "payload": "tree a7c54bae98386aaa818c0d2feafc06d7c040d1ac\nparent a0e1291c2db0b76b6cfc31bc14466e5f620b9126\nauthor Santiago Pastorino <spastorino@gmail.com> 1626353294 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626611411 -0300\n\nRemove `sub_types_or_anon`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a002f4513b822aa0f5e694ac37701e41de275232", "html_url": "https://github.com/rust-lang/rust/commit/a002f4513b822aa0f5e694ac37701e41de275232", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a002f4513b822aa0f5e694ac37701e41de275232/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e1291c2db0b76b6cfc31bc14466e5f620b9126", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e1291c2db0b76b6cfc31bc14466e5f620b9126", "html_url": "https://github.com/rust-lang/rust/commit/a0e1291c2db0b76b6cfc31bc14466e5f620b9126"}], "stats": {"total": 115, "additions": 2, "deletions": 113}, "files": [{"sha": "cbcf050c9b89249c5a75d7a38650a12d63653d99", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a002f4513b822aa0f5e694ac37701e41de275232/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a002f4513b822aa0f5e694ac37701e41de275232/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=a002f4513b822aa0f5e694ac37701e41de275232", "patch": "@@ -1130,32 +1130,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.relate_types(sub, ty::Variance::Covariant, sup, locations, category)\n     }\n \n-    /// Try to relate `sub <: sup`; if this fails, instantiate opaque\n-    /// variables in `sub` with their inferred definitions and try\n-    /// again. This is used for opaque types in places (e.g., `let x:\n-    /// impl Foo = ..`).\n-    fn sub_types_or_anon(\n-        &mut self,\n-        sub: Ty<'tcx>,\n-        sup: Ty<'tcx>,\n-        locations: Locations,\n-        category: ConstraintCategory,\n-    ) -> Fallible<()> {\n-        if let Err(terr) = self.sub_types(sub, sup, locations, category) {\n-            if let ty::Opaque(..) = sup.kind() {\n-                // When you have `let x: impl Foo = ...` in a closure,\n-                // the resulting inferend values are stored with the\n-                // def-id of the base function.\n-                let parent_def_id =\n-                    self.tcx().closure_base_def_id(self.body.source.def_id()).expect_local();\n-                return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n-            } else {\n-                return Err(terr);\n-            }\n-        }\n-        Ok(())\n-    }\n-\n     fn eq_types(\n         &mut self,\n         a: Ty<'tcx>,\n@@ -1490,7 +1464,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 let rv_ty = rv.ty(body, tcx);\n                 let rv_ty = self.normalize(rv_ty, location);\n                 if let Err(terr) =\n-                    self.sub_types_or_anon(rv_ty, place_ty, location.to_locations(), category)\n+                    self.sub_types(rv_ty, place_ty, location.to_locations(), category)\n                 {\n                     span_mirbug!(\n                         self,\n@@ -1777,9 +1751,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 let locations = term_location.to_locations();\n \n-                if let Err(terr) =\n-                    self.sub_types_or_anon(sig.output(), dest_ty, locations, category)\n-                {\n+                if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {\n                     span_mirbug!(\n                         self,\n                         term,"}, {"sha": "0c37399df8dd21fa70195fd42074bfc09447cfcd", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a0e1291c2db0b76b6cfc31bc14466e5f620b9126/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e1291c2db0b76b6cfc31bc14466e5f620b9126/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.rs?ref=a0e1291c2db0b76b6cfc31bc14466e5f620b9126", "patch": "@@ -1,23 +0,0 @@\n-#![feature(min_type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)]\n-#![allow(incomplete_features)]\n-\n-type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-//~^ ERROR: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-//~| ERROR: the type `&'<empty> str` does not fulfill the required lifetime\n-//~| ERROR: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-\n-trait Output<'a> {}\n-\n-impl<'a> Output<'a> for &'a str {}\n-\n-fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-    //~^ ERROR: concrete type differs from previous defining opaque type use\n-    let out: OpaqueOutputImpl<'a> = arg;\n-    arg\n-}\n-\n-fn main() {\n-    let s = String::from(\"wassup\");\n-    cool_fn(&s);\n-}"}, {"sha": "233c996340d844fe57b47485af643d0308d3a703", "filename": "src/test/ui/type-alias-impl-trait/issue-85113.stderr", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a0e1291c2db0b76b6cfc31bc14466e5f620b9126/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0e1291c2db0b76b6cfc31bc14466e5f620b9126/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-85113.stderr?ref=a0e1291c2db0b76b6cfc31bc14466e5f620b9126", "patch": "@@ -1,60 +0,0 @@\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: hidden type `&'<empty> str` captures lifetime smaller than the function body\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-85113.rs:14:1\n-   |\n-LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&'<empty> str`, got `&'a str`\n-   |\n-note: previous use here\n-  --> $DIR/issue-85113.rs:14:1\n-   |\n-LL | fn cool_fn<'a>(arg: &'a str) -> OpaqueOutputImpl<'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0477]: the type `&'<empty> str` does not fulfill the required lifetime\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: type must outlive the lifetime `'a` as defined on the item at 5:23\n-  --> $DIR/issue-85113.rs:5:23\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                       ^^\n-\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: first, the lifetime cannot outlive the empty lifetime...\n-note: ...but the lifetime must also be valid for the lifetime `'a` as defined on the item at 5:23...\n-  --> $DIR/issue-85113.rs:5:23\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                       ^^\n-note: ...so that the types are compatible\n-  --> $DIR/issue-85113.rs:5:29\n-   |\n-LL | type OpaqueOutputImpl<'a> = impl Output<'a> + 'a;\n-   |                             ^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `Output<'a>`\n-              found `Output<'_>`\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0477, E0495, E0700.\n-For more information about an error, try `rustc --explain E0477`."}]}