{"sha": "1160e60df99ec5bf7e04e991d699e0e6747751a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNjBlNjBkZjk5ZWM1YmY3ZTA0ZTk5MWQ2OTllMGU2NzQ3NzUxYTc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-03T20:33:22Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-10-06T08:59:17Z"}, "message": "Move ConstraintCategory to rustc::mir\n\nAllows us to use the category of outlive requirements inside a closure\nwhen reporting free region errors caused by its closure bounds.", "tree": {"sha": "e61ee973c28a77a289177fabedb2292406174d10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61ee973c28a77a289177fabedb2292406174d10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1160e60df99ec5bf7e04e991d699e0e6747751a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1160e60df99ec5bf7e04e991d699e0e6747751a7", "html_url": "https://github.com/rust-lang/rust/commit/1160e60df99ec5bf7e04e991d699e0e6747751a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1160e60df99ec5bf7e04e991d699e0e6747751a7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac841e74502183cde08e462d98cc55752abd000a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac841e74502183cde08e462d98cc55752abd000a", "html_url": "https://github.com/rust-lang/rust/commit/ac841e74502183cde08e462d98cc55752abd000a"}], "stats": {"total": 148, "additions": 86, "deletions": 62}, "files": [{"sha": "f69d1d159005955153365ebcae06e012f54775b6", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -550,7 +550,23 @@ impl_stable_hash_for!(struct mir::ClosureRegionRequirements<'tcx> {\n impl_stable_hash_for!(struct mir::ClosureOutlivesRequirement<'tcx> {\n     subject,\n     outlived_free_region,\n-    blame_span\n+    blame_span,\n+    category\n+});\n+\n+impl_stable_hash_for!(enum mir::ConstraintCategory {\n+    Return,\n+    TypeAnnotation,\n+    Cast,\n+    ClosureBounds,\n+    CallArgument,\n+    CopyBound,\n+    SizedBound,\n+    Assignment,\n+    OpaqueType,\n+    Boring,\n+    BoringNoLocation,\n+    Internal,\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::ClosureOutlivesSubject<'gcx> {"}, {"sha": "61e8ad4a8c480f2c253e8e0fa9da5cea40db7b14", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -2646,6 +2646,43 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     pub blame_span: Span,\n }\n \n+/// Outlives constraints can be categorized to determine whether and why they\n+/// are interesting (for error reporting). Order of variants indicates sort\n+/// order of the category, thereby influencing diagnostic output.\n+///\n+/// See also [rustc_mir::borrow_check::nll::constraints]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum ConstraintCategory {\n+    Return,\n+    TypeAnnotation,\n+    Cast,\n+\n+    /// A constraint that came from checking the body of a closure.\n+    ///\n+    /// We try to get the category that the closure used when reporting this.\n+    ClosureBounds,\n+    CallArgument,\n+    CopyBound,\n+    SizedBound,\n+    Assignment,\n+    OpaqueType,\n+\n+    /// A \"boring\" constraint (caused by the given location) is one that\n+    /// the user probably doesn't want to see described in diagnostics,\n+    /// because it is kind of an artifact of the type system setup.\n+    /// Example: `x = Foo { field: y }` technically creates\n+    /// intermediate regions representing the \"type of `Foo { field: y\n+    /// }`\", and data flows from `y` into those variables, but they\n+    /// are not very interesting. The assignment into `x` on the other\n+    /// hand might be.\n+    Boring,\n+    // Boring and applicable everywhere.\n+    BoringNoLocation,\n+\n+    /// A constraint that doesn't correspond to anything the user sees.\n+    Internal,\n+}\n+\n /// The subject of a ClosureOutlivesRequirement -- that is, the thing\n /// that must outlive some region.\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "3d4b2456f9657eebe8c30c1dbb7d7cb50755134b", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintIndex};\n+use borrow_check::nll::constraints::ConstraintIndex;\n use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "a873af8333a7fb0af867ae6423ed36645e4951d6", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -23,42 +24,6 @@ crate struct ConstraintSet {\n     constraints: IndexVec<ConstraintIndex, OutlivesConstraint>,\n }\n \n-/// Constraints can be categorized to determine whether and why they are\n-/// interesting. Order of variants indicates sort order of the category,\n-/// thereby influencing diagnostic output.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-pub enum ConstraintCategory {\n-    Return,\n-    TypeAnnotation,\n-    Cast,\n-    CallArgument,\n-\n-    /// A constraint that came from checking the body of a closure.\n-    ///\n-    /// Ideally we would give an explanation that points to the relevant part\n-    /// of the closure's body.\n-    ClosureBounds,\n-    CopyBound,\n-    SizedBound,\n-    Assignment,\n-    OpaqueType,\n-\n-    /// A \"boring\" constraint (caused by the given location) is one that\n-    /// the user probably doesn't want to see described in diagnostics,\n-    /// because it is kind of an artifact of the type system setup.\n-    /// Example: `x = Foo { field: y }` technically creates\n-    /// intermediate regions representing the \"type of `Foo { field: y\n-    /// }`\", and data flows from `y` into those variables, but they\n-    /// are not very interesting. The assignment into `x` on the other\n-    /// hand might be.\n-    Boring,\n-    // Boring and applicable everywhere.\n-    BoringNoLocation,\n-\n-    /// A constraint that doesn't correspond to anything the user sees.\n-    Internal,\n-}\n-\n impl ConstraintSet {\n     crate fn push(&mut self, constraint: OutlivesConstraint) {\n         debug!("}, {"sha": "9acfe42e6ca667c14ee812dc88547ebd16227bd0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{OutlivesConstraint, ConstraintCategory};\n+use borrow_check::nll::constraints::{OutlivesConstraint};\n use borrow_check::nll::region_infer::RegionInferenceContext;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{Location, Mir};\n+use rustc::mir::{ConstraintCategory, Location, Mir};\n use rustc::ty::{self, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n@@ -28,22 +28,26 @@ mod var_name;\n \n use self::region_name::RegionName;\n \n-impl fmt::Display for ConstraintCategory {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+trait ConstraintDescription {\n+    fn description(&self) -> &'static str;\n+}\n+\n+impl ConstraintDescription for ConstraintCategory {\n+    fn description(&self) -> &'static str {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n-            ConstraintCategory::Assignment => write!(f, \"assignment \"),\n-            ConstraintCategory::Return => write!(f, \"returning this value \"),\n-            ConstraintCategory::Cast => write!(f, \"cast \"),\n-            ConstraintCategory::CallArgument => write!(f, \"argument \"),\n-            ConstraintCategory::TypeAnnotation => write!(f, \"type annotation \"),\n-            ConstraintCategory::ClosureBounds => write!(f, \"closure body \"),\n-            ConstraintCategory::SizedBound => write!(f, \"proving this value is `Sized` \"),\n-            ConstraintCategory::CopyBound => write!(f, \"copying this value \"),\n-            ConstraintCategory::OpaqueType => write!(f, \"opaque type \"),\n+            ConstraintCategory::Assignment => \"assignment \",\n+            ConstraintCategory::Return => \"returning this value \",\n+            ConstraintCategory::Cast => \"cast \",\n+            ConstraintCategory::CallArgument => \"argument \",\n+            ConstraintCategory::TypeAnnotation => \"type annotation \",\n+            ConstraintCategory::ClosureBounds => \"closure body \",\n+            ConstraintCategory::SizedBound => \"proving this value is `Sized` \",\n+            ConstraintCategory::CopyBound => \"copying this value \",\n+            ConstraintCategory::OpaqueType => \"opaque type \",\n             ConstraintCategory::Boring\n             | ConstraintCategory::BoringNoLocation\n-            | ConstraintCategory::Internal => write!(f, \"\"),\n+            | ConstraintCategory::Internal => \"\",\n         }\n     }\n }\n@@ -358,7 +362,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             _ => {\n                 diag.span_label(span, format!(\n                     \"{}requires that `{}` must outlive `{}`\",\n-                    category, fr_name, outlived_fr_name,\n+                    category.description(), fr_name, outlived_fr_name,\n                 ));\n             },\n         }"}, {"sha": "a6730fa847f521556857caaedee34e43e8599bf5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -19,8 +19,8 @@ use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n use rustc::mir::{\n-    ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements, Local, Location,\n-    Mir,\n+    ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n+    ConstraintCategory, Local, Location, Mir,\n };\n use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common;"}, {"sha": "4ab0f952bdee94fe41bbd252076be0267a4324a5", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n+use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::region_infer::TypeTest;\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::UniversalRegions;\n@@ -17,6 +17,7 @@ use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};\n use rustc::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc::infer::{self, SubregionOrigin};\n+use rustc::mir::ConstraintCategory;\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, TyCtxt};\n use syntax_pos::DUMMY_SP;"}, {"sha": "35342b2129e6e752a83d036a7eb9ccddba4a604f", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -12,11 +12,11 @@ use borrow_check::nll::type_check::constraint_conversion;\n use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::constraints::ConstraintCategory;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::InferCtxt;\n+use rustc::mir::ConstraintCategory;\n use rustc::traits::query::outlives_bounds::{self, OutlivesBound};\n use rustc::traits::query::type_op::{self, TypeOp};\n use rustc::ty::{self, RegionVid, Ty};"}, {"sha": "a4665984d3e0b0448d36c6f0cabdd74f139bce7e", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::Ty;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n-use super::{ConstraintCategory, Locations, TypeChecker};\n+use super::{Locations, TypeChecker};\n \n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     pub(super) fn equate_inputs_and_outputs("}, {"sha": "bc4e0ca235139c63ab7e5aa54623982a8407ec5d", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::ConstraintCategory;\n use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n@@ -19,7 +18,7 @@ use dataflow::move_paths::indexes::MovePathIndex;\n use dataflow::move_paths::MoveData;\n use dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::{BasicBlock, Local, Location, Mir};\n+use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;"}, {"sha": "553d4a426a76130e05109f83456e181443df1fc2", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -13,7 +13,7 @@\n \n use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n+use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::values::LivenessValues;\n use borrow_check::nll::region_infer::values::PlaceholderIndices;"}, {"sha": "41aab02d1e8266f3b9c8a478663995a38e6fc933", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1160e60df99ec5bf7e04e991d699e0e6747751a7/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=1160e60df99ec5bf7e04e991d699e0e6747751a7", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{ConstraintCategory, OutlivesConstraint};\n+use borrow_check::nll::constraints::OutlivesConstraint;\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n use rustc::infer::canonical::{Canonical, CanonicalVarInfos};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc::mir::ConstraintCategory;\n use rustc::traits::query::Fallible;\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};"}]}