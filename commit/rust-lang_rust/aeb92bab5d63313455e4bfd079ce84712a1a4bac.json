{"sha": "aeb92bab5d63313455e4bfd079ce84712a1a4bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYjkyYmFiNWQ2MzMxMzQ1NWU0YmZkMDc5Y2U4NDcxMmExYTRiYWM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-12T04:51:15Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-12T04:51:15Z"}, "message": "rustc: rename ty::populate_implementations_for_type_if_necessary to make it clear that it only populates inherent impls.", "tree": {"sha": "3d72d6641c3de8182de1309ce732f38c2b3ac7e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d72d6641c3de8182de1309ce732f38c2b3ac7e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb92bab5d63313455e4bfd079ce84712a1a4bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb92bab5d63313455e4bfd079ce84712a1a4bac", "html_url": "https://github.com/rust-lang/rust/commit/aeb92bab5d63313455e4bfd079ce84712a1a4bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb92bab5d63313455e4bfd079ce84712a1a4bac/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcb3cb475f0e5223ac63274d229fcbd866f7fe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcb3cb475f0e5223ac63274d229fcbd866f7fe6", "html_url": "https://github.com/rust-lang/rust/commit/8bcb3cb475f0e5223ac63274d229fcbd866f7fe6"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "4d59bf5d96ab4bcb4496b503b0f0e890ef0a2978", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=aeb92bab5d63313455e4bfd079ce84712a1a4bac", "patch": "@@ -313,13 +313,13 @@ pub fn each_impl<F>(cstore: &cstore::CStore,\n     decoder::each_impl(&*cdata, callback)\n }\n \n-pub fn each_implementation_for_type<F>(cstore: &cstore::CStore,\n-                                       def_id: ast::DefId,\n-                                       callback: F) where\n+pub fn each_inherent_implementation_for_type<F>(cstore: &cstore::CStore,\n+                                                def_id: ast::DefId,\n+                                                callback: F) where\n     F: FnMut(ast::DefId),\n {\n     let cdata = cstore.get_crate_data(def_id.krate);\n-    decoder::each_implementation_for_type(&*cdata, def_id.node, callback)\n+    decoder::each_inherent_implementation_for_type(&*cdata, def_id.node, callback)\n }\n \n pub fn each_implementation_for_trait<F>(cstore: &cstore::CStore,"}, {"sha": "c5ef97c75f8781ae3cef8a136b8cedb8ee1ab19d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=aeb92bab5d63313455e4bfd079ce84712a1a4bac", "patch": "@@ -1338,17 +1338,18 @@ pub fn each_impl<F>(cdata: Cmd, mut callback: F) where\n     });\n }\n \n-pub fn each_implementation_for_type<F>(cdata: Cmd,\n-                                       id: ast::NodeId,\n-                                       mut callback: F)\n+pub fn each_inherent_implementation_for_type<F>(cdata: Cmd,\n+                                                id: ast::NodeId,\n+                                                mut callback: F)\n     where F: FnMut(ast::DefId),\n {\n     let item_doc = lookup_item(id, cdata.data());\n     reader::tagged_docs(item_doc,\n                         tag_items_data_item_inherent_impl,\n                         |impl_doc| {\n-        let implementation_def_id = item_def_id(impl_doc, cdata);\n-        callback(implementation_def_id);\n+        if reader::maybe_get_doc(impl_doc, tag_item_trait_ref).is_none() {\n+            callback(item_def_id(impl_doc, cdata));\n+        }\n         true\n     });\n }"}, {"sha": "38cd6d91a31e83ba38eb31cea1a3d4cd3c629298", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=aeb92bab5d63313455e4bfd079ce84712a1a4bac", "patch": "@@ -6336,10 +6336,10 @@ pub fn populate_implementations_for_primitive_if_necessary(tcx: &ctxt,\n     tcx.populated_external_primitive_impls.borrow_mut().insert(primitive_def_id);\n }\n \n-/// Populates the type context with all the implementations for the given type\n-/// if necessary.\n-pub fn populate_implementations_for_type_if_necessary(tcx: &ctxt,\n-                                                      type_id: ast::DefId) {\n+/// Populates the type context with all the inherent implementations for\n+/// the given type if necessary.\n+pub fn populate_inherent_implementations_for_type_if_necessary(tcx: &ctxt,\n+                                                               type_id: ast::DefId) {\n     if type_id.krate == LOCAL_CRATE {\n         return\n     }\n@@ -6348,37 +6348,15 @@ pub fn populate_implementations_for_type_if_necessary(tcx: &ctxt,\n         return\n     }\n \n-    debug!(\"populate_implementations_for_type_if_necessary: searching for {:?}\", type_id);\n+    debug!(\"populate_inherent_implementations_for_type_if_necessary: searching for {:?}\", type_id);\n \n     let mut inherent_impls = Vec::new();\n-    csearch::each_implementation_for_type(&tcx.sess.cstore, type_id, |impl_def_id| {\n-        let impl_items = csearch::get_impl_items(&tcx.sess.cstore, impl_def_id);\n-\n-        // Record the implementation, if needed\n-        if let Some(trait_ref) = csearch::get_impl_trait(tcx, impl_def_id) {\n-            let trait_def = lookup_trait_def(tcx, trait_ref.def_id);\n-            trait_def.record_impl(tcx, impl_def_id, trait_ref);\n-        } else {\n-            inherent_impls.push(impl_def_id);\n-        }\n-\n-        // For any methods that use a default implementation, add them to\n-        // the map. This is a bit unfortunate.\n-        for impl_item_def_id in &impl_items {\n-            let method_def_id = impl_item_def_id.def_id();\n-            match impl_or_trait_item(tcx, method_def_id) {\n-                MethodTraitItem(method) => {\n-                    if let Some(source) = method.provided_source {\n-                        tcx.provided_method_sources\n-                           .borrow_mut()\n-                           .insert(method_def_id, source);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n+    csearch::each_inherent_implementation_for_type(&tcx.sess.cstore, type_id, |impl_def_id| {\n+        // Record the implementation.\n+        inherent_impls.push(impl_def_id);\n \n         // Store the implementation info.\n+        let impl_items = csearch::get_impl_items(&tcx.sess.cstore, impl_def_id);\n         tcx.impl_items.borrow_mut().insert(impl_def_id, impl_items);\n     });\n "}, {"sha": "6171df218bb60a468ecec9570881f0c9a7a105d2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=aeb92bab5d63313455e4bfd079ce84712a1a4bac", "patch": "@@ -371,7 +371,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n     fn assemble_inherent_impl_candidates_for_type(&mut self, def_id: ast::DefId) {\n         // Read the inherent implementation candidates for this type from the\n         // metadata if necessary.\n-        ty::populate_implementations_for_type_if_necessary(self.tcx(), def_id);\n+        ty::populate_inherent_implementations_for_type_if_necessary(self.tcx(), def_id);\n \n         if let Some(impl_infos) = self.tcx().inherent_impls.borrow().get(&def_id) {\n             for &impl_def_id in &***impl_infos {"}, {"sha": "3ce8835b1a8de76744d561010ce4a5794d7e007e", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb92bab5d63313455e4bfd079ce84712a1a4bac/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=aeb92bab5d63313455e4bfd079ce84712a1a4bac", "patch": "@@ -221,7 +221,7 @@ fn build_type(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEn\n \n pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n                    did: ast::DefId) -> Vec<clean::Item> {\n-    ty::populate_implementations_for_type_if_necessary(tcx, did);\n+    ty::populate_inherent_implementations_for_type_if_necessary(tcx, did);\n     let mut impls = Vec::new();\n \n     match tcx.inherent_impls.borrow().get(&did) {"}]}