{"sha": "67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZjljNzFlNDU0N2I5ODkyYjJmNmVkNjhjMzRmYjlkMGYwMGM5ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T23:05:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T23:05:11Z"}, "message": "Auto merge of #52564 - pnkfelix:issue-52126-lhs-of-assign-op-is-invariant, r=eddyb\n\nLHS of assign op is invariant\n\nThis addresses a bug injected by #45435. That PR changed the way we type-check `LHS <op> RHS` to coerce the LHS to the expected supertype in much the same way that we coerce the RHS.\n\nThe problem is that when we have a case of `LHS <op>= RHS`, we do not want to coerce to a supertype; we need the type to remain invariant. Otherwise we risk leaking a value with short-lifetimes into a expression context that needs to satisfy a long lifetime.\n\nFix #52126", "tree": {"sha": "9be05f772aa2ff744c0995a7d6c976619162d771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be05f772aa2ff744c0995a7d6c976619162d771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "html_url": "https://github.com/rust-lang/rust/commit/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf3d2567c18abdaaac689776105fc99aaa36a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf3d2567c18abdaaac689776105fc99aaa36a3", "html_url": "https://github.com/rust-lang/rust/commit/ffaf3d2567c18abdaaac689776105fc99aaa36a3"}, {"sha": "f153be6258f24155756298b3a79e9b14df7afe00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f153be6258f24155756298b3a79e9b14df7afe00", "html_url": "https://github.com/rust-lang/rust/commit/f153be6258f24155756298b3a79e9b14df7afe00"}], "stats": {"total": 119, "additions": 107, "deletions": 12}, "files": [{"sha": "fb153464dff112ade1d4b61dda09057abeeaa949", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "patch": "@@ -165,18 +165,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                op,\n                is_assign);\n \n-        let lhs_needs = match is_assign {\n-            IsAssign::Yes => Needs::MutPlace,\n-            IsAssign::No => Needs::None\n+        let lhs_ty = match is_assign {\n+            IsAssign::No => {\n+                // Find a suitable supertype of the LHS expression's type, by coercing to\n+                // a type variable, to pass as the `Self` to the trait, avoiding invariant\n+                // trait matching creating lifetime constraints that are too strict.\n+                // E.g. adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n+                // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n+                let lhs_ty = self.check_expr_with_needs(lhs_expr, Needs::None);\n+                let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n+                self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No)\n+            }\n+            IsAssign::Yes => {\n+                // rust-lang/rust#52126: We have to use strict\n+                // equivalence on the LHS of an assign-op like `+=`;\n+                // overwritten or mutably-borrowed places cannot be\n+                // coerced to a supertype.\n+                self.check_expr_with_needs(lhs_expr, Needs::MutPlace)\n+            }\n         };\n-        // Find a suitable supertype of the LHS expression's type, by coercing to\n-        // a type variable, to pass as the `Self` to the trait, avoiding invariant\n-        // trait matching creating lifetime constraints that are too strict.\n-        // E.g. adding `&'a T` and `&'b T`, given `&'x T: Add<&'x T>`, will result\n-        // in `&'a T <: &'x T` and `&'b T <: &'x T`, instead of `'a = 'b = 'x`.\n-        let lhs_ty = self.check_expr_with_needs(lhs_expr, lhs_needs);\n-        let fresh_var = self.next_ty_var(TypeVariableOrigin::MiscVariable(lhs_expr.span));\n-        let lhs_ty = self.demand_coerce(lhs_expr, lhs_ty, fresh_var,  AllowTwoPhase::No);\n         let lhs_ty = self.resolve_type_vars_with_obligations(lhs_ty);\n \n         // NB: As we have not yet type-checked the RHS, we don't have the"}, {"sha": "dcca491a87bb4aae390a8473d9384e1d8f793425", "filename": "src/test/ui/issue-52126-assign-op-invariance.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.nll.stderr?ref=67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `line` does not live long enough\n+  --> $DIR/issue-52126-assign-op-invariance.rs:44:28\n+   |\n+LL |         let v: Vec<&str> = line.split_whitespace().collect();\n+   |                            ^^^^ borrowed value does not live long enough\n+LL |         //~^ ERROR `line` does not live long enough\n+LL |         println!(\"accumulator before add_assign {:?}\", acc.map);\n+   |                                                        ------- borrow later used here\n+...\n+LL |     }\n+   |     - borrowed value only lives until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "b26ad9bc37dd15dea784869e38dd967175c24259", "filename": "src/test/ui/issue-52126-assign-op-invariance.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.rs?ref=67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 52126: With respect to variance, the assign-op's like += were\n+// accidentally lumped together with other binary op's. In both cases\n+// we were coercing the LHS of the op to the expected supertype.\n+//\n+// The problem is that since the LHS of += is modified, we need the\n+// parameter to be invariant with respect to the overall type, not\n+// covariant.\n+\n+use std::collections::HashMap;\n+use std::ops::AddAssign;\n+\n+pub fn main() {\n+    panics();\n+}\n+\n+pub struct Counter<'l> {\n+    map: HashMap<&'l str, usize>,\n+}\n+\n+impl<'l> AddAssign for Counter<'l>\n+{\n+    fn add_assign(&mut self, rhs: Counter<'l>) {\n+        rhs.map.into_iter().for_each(|(key, val)| {\n+            let count = self.map.entry(key).or_insert(0);\n+            *count += val;\n+        });\n+    }\n+}\n+\n+/// often times crashes, if not prints invalid strings\n+pub fn panics() {\n+    let mut acc = Counter{map: HashMap::new()};\n+    for line in vec![\"123456789\".to_string(), \"12345678\".to_string()] {\n+        let v: Vec<&str> = line.split_whitespace().collect();\n+        //~^ ERROR `line` does not live long enough\n+        println!(\"accumulator before add_assign {:?}\", acc.map);\n+        let mut map = HashMap::new();\n+        for str_ref in v {\n+            let e = map.entry(str_ref);\n+            println!(\"entry: {:?}\", e);\n+            let count = e.or_insert(0);\n+            *count += 1;\n+        }\n+        let cnt2 = Counter{map};\n+        acc += cnt2;\n+        println!(\"accumulator after add_assign {:?}\", acc.map);\n+        // line gets dropped here but references are kept in acc.map\n+    }\n+}"}, {"sha": "a4ea8085c12afbd964fa28b536e710c36d75fe21", "filename": "src/test/ui/issue-52126-assign-op-invariance.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52126-assign-op-invariance.stderr?ref=67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `line` does not live long enough\n+  --> $DIR/issue-52126-assign-op-invariance.rs:44:28\n+   |\n+LL |         let v: Vec<&str> = line.split_whitespace().collect();\n+   |                            ^^^^ borrowed value does not live long enough\n+...\n+LL |     }\n+   |     - `line` dropped here while still borrowed\n+LL | }\n+   | - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "6e2c0ae7bba50c18b8bd3dbb179d150f751e836e", "filename": "src/test/ui/nll/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fnll%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1/src%2Ftest%2Fui%2Fnll%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fconstant.rs?ref=67f9c71e4547b9892b2f6ed68c34fb9d0f00c9d1", "patch": "@@ -11,7 +11,7 @@\n // Test that MIR borrowck and NLL analysis can handle constants of\n // arbitrary types without ICEs.\n \n-// compile-flags:-Zborrowck=mir -Zverbose\n+// compile-flags:-Zborrowck=mir\n // compile-pass\n \n const HI: &str = \"hi\";"}]}