{"sha": "17841cc97ac950312355403b6cfe11b916e242a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODQxY2M5N2FjOTUwMzEyMzU1NDAzYjZjZmUxMWI5MTZlMjQyYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T17:30:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T17:30:55Z"}, "message": "Auto merge of #50345 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #50233 (Make `Vec::new` a `const fn`)\n - #50312 (Add more links in panic docs)\n - #50316 (Fix some broken links in docs.)\n - #50325 (Add a few more tests for proc macro feature gating)\n - #50327 (Display correct unused field suggestion for nested struct patterns)\n - #50330 (check that #[used] is used only on statics)\n - #50344 (Update Cargo to 2018-04-28 122fd5be5201913d42e219e132d6569493583bca)\n\nFailed merges:", "tree": {"sha": "5bd04ce4f05ca35b78d7612b13bf3a15f4e49655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bd04ce4f05ca35b78d7612b13bf3a15f4e49655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17841cc97ac950312355403b6cfe11b916e242a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17841cc97ac950312355403b6cfe11b916e242a6", "html_url": "https://github.com/rust-lang/rust/commit/17841cc97ac950312355403b6cfe11b916e242a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17841cc97ac950312355403b6cfe11b916e242a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4745092d608e65ec869c0ebdb27c535f27606ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4745092d608e65ec869c0ebdb27c535f27606ea4", "html_url": "https://github.com/rust-lang/rust/commit/4745092d608e65ec869c0ebdb27c535f27606ea4"}, {"sha": "6166f20571aeadc3e0790ab79b642b0a1d41169d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6166f20571aeadc3e0790ab79b642b0a1d41169d", "html_url": "https://github.com/rust-lang/rust/commit/6166f20571aeadc3e0790ab79b642b0a1d41169d"}], "stats": {"total": 334, "additions": 277, "deletions": 57}, "files": [{"sha": "0493f92bc520d1747432fec5e60ab9e6f0410a33", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -124,6 +124,7 @@\n #![feature(pointer_methods)]\n #![feature(inclusive_range_fields)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n+#![feature(rustc_const_unstable)]\n \n #![cfg_attr(not(test), feature(fn_traits, i128))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "eb25ae17511707064c110b2dfca3ea2b439faede", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -56,14 +56,16 @@ pub struct RawVec<T, A: Alloc = Global> {\n impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new` but parameterized over the choice of allocator for\n     /// the returned RawVec.\n-    pub fn new_in(a: A) -> Self {\n+    pub const fn new_in(a: A) -> Self {\n         // !0 is usize::MAX. This branch should be stripped at compile time.\n-        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`\n+        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n         // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n         RawVec {\n             ptr: Unique::empty(),\n-            cap,\n+            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n             a,\n         }\n     }\n@@ -120,7 +122,7 @@ impl<T> RawVec<T, Global> {\n     /// RawVec with capacity 0. If T has 0 size, then it makes a\n     /// RawVec with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n-    pub fn new() -> Self {\n+    pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n "}, {"sha": "35d0a69a05abe846942a0caad8d47b5bf08a48e6", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -322,7 +322,8 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> Vec<T> {\n+    #[rustc_const_unstable(feature = \"const_vec_new\")]\n+    pub const fn new() -> Vec<T> {\n         Vec {\n             buf: RawVec::new(),\n             len: 0,"}, {"sha": "b27bd3142e1ed915ac2d2c83d7077f6bbfb50b10", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1094,6 +1094,8 @@ pub trait Iterator {\n     /// `flatten()` a three-dimensional array the result will be\n     /// two-dimensional and not one-dimensional. To get a one-dimensional\n     /// structure, you have to `flatten()` again.\n+    ///\n+    /// [`flat_map()`]: #method.flat_map\n     #[inline]\n     #[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n     fn flatten(self) -> Flatten<Self>"}, {"sha": "c074adfd570e339adaa765b09080eb750fe4e44c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -602,6 +602,8 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// `Pin` pointer.\n ///\n /// This trait is automatically implemented for almost every type.\n+///\n+/// [`Pin`]: ../mem/struct.Pin.html\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub unsafe auto trait Unpin {}\n "}, {"sha": "5d0b675e8e4c53639b95e6eae1fa7f0305ca0a43", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -2552,10 +2552,9 @@ impl<T: Sized> Unique<T> {\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n     // FIXME: rename to dangling() to match NonNull?\n-    pub fn empty() -> Self {\n+    pub const fn empty() -> Self {\n         unsafe {\n-            let ptr = mem::align_of::<T>() as *mut T;\n-            Unique::new_unchecked(ptr)\n+            Unique::new_unchecked(mem::align_of::<T>() as *mut T)\n         }\n     }\n }"}, {"sha": "cad6ff8ae9fc2a1ca584d853810f5eaab159d1be", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -31,6 +31,7 @@ enum Target {\n     Expression,\n     Statement,\n     Closure,\n+    Static,\n     Other,\n }\n \n@@ -43,6 +44,7 @@ impl Target {\n             hir::ItemEnum(..) => Target::Enum,\n             hir::ItemConst(..) => Target::Const,\n             hir::ItemForeignMod(..) => Target::ForeignMod,\n+            hir::ItemStatic(..) => Target::Static,\n             _ => Target::Other,\n         }\n     }\n@@ -102,6 +104,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         }\n \n         self.check_repr(item, target);\n+        self.check_used(item, target);\n     }\n \n     /// Check if an `#[inline]` is applied to a function or a closure.\n@@ -305,6 +308,15 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    fn check_used(&self, item: &hir::Item, target: Target) {\n+        for attr in &item.attrs {\n+            if attr.name().map(|name| name == \"used\").unwrap_or(false) && target != Target::Static {\n+                self.tcx.sess\n+                    .span_err(attr.span, \"attribute must be applied to a `static` variable\");\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {"}, {"sha": "d1a46f5f155637f02624592f1e9d127436a87425", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -111,6 +111,7 @@ use ty::{self, TyCtxt};\n use lint;\n use util::nodemap::{NodeMap, NodeSet};\n \n+use std::collections::VecDeque;\n use std::{fmt, usize};\n use std::io::prelude::*;\n use std::io;\n@@ -412,18 +413,43 @@ fn visit_local<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, local: &'tcx hir::Local) {\n }\n \n fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n-    for pat in &arm.pats {\n-        // for struct patterns, take note of which fields used shorthand (`x` rather than `x: x`)\n+    for mut pat in &arm.pats {\n+        // For struct patterns, take note of which fields used shorthand\n+        // (`x` rather than `x: x`).\n         //\n-        // FIXME: according to the rust-lang-nursery/rustc-guide book, `NodeId`s are to be phased\n-        // out in favor of `HirId`s; however, we need to match the signature of `each_binding`,\n-        // which uses `NodeIds`.\n+        // FIXME: according to the rust-lang-nursery/rustc-guide book, `NodeId`s are to be\n+        // phased out in favor of `HirId`s; however, we need to match the signature of\n+        // `each_binding`, which uses `NodeIds`.\n         let mut shorthand_field_ids = NodeSet();\n-        if let hir::PatKind::Struct(_, ref fields, _) = pat.node {\n-            for field in fields {\n-                if field.node.is_shorthand {\n-                    shorthand_field_ids.insert(field.node.pat.id);\n+        let mut pats = VecDeque::new();\n+        pats.push_back(pat);\n+        while let Some(pat) = pats.pop_front() {\n+            use hir::PatKind::*;\n+            match pat.node {\n+                Binding(_, _, _, ref inner_pat) => {\n+                    pats.extend(inner_pat.iter());\n                 }\n+                Struct(_, ref fields, _) => {\n+                    for field in fields {\n+                        if field.node.is_shorthand {\n+                            shorthand_field_ids.insert(field.node.pat.id);\n+                        }\n+                    }\n+                }\n+                Ref(ref inner_pat, _) |\n+                Box(ref inner_pat) => {\n+                    pats.push_back(inner_pat);\n+                }\n+                TupleStruct(_, ref inner_pats, _) |\n+                Tuple(ref inner_pats, _) => {\n+                    pats.extend(inner_pats.iter());\n+                }\n+                Slice(ref pre_pats, ref inner_pat, ref post_pats) => {\n+                    pats.extend(pre_pats.iter());\n+                    pats.extend(inner_pat.iter());\n+                    pats.extend(post_pats.iter());\n+                }\n+                _ => {}\n             }\n         }\n "}, {"sha": "b50652ed6b557759ddc7949eafa511b36e76fa40", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -79,7 +79,7 @@ impl TaggedHashUintPtr {\n ///\n /// Essential invariants of this structure:\n ///\n-///   - if t.hashes[i] == EMPTY_BUCKET, then `Bucket::at_index(&t, i).raw`\n+///   - if `t.hashes[i] == EMPTY_BUCKET`, then `Bucket::at_index(&t, i).raw`\n ///     points to 'undefined' contents. Don't read from it. This invariant is\n ///     enforced outside this module with the `EmptyBucket`, `FullBucket`,\n ///     and `SafeHash` types."}, {"sha": "8164f52d3c34d570b202f75d36d9fe64340a6ae8", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1118,6 +1118,7 @@ impl CStr {\n     ///\n     /// [`Cow`]: ../borrow/enum.Cow.html\n     /// [`Borrowed`]: ../borrow/enum.Cow.html#variant.Borrowed\n+    /// [`Owned`]: ../borrow/enum.Cow.html#variant.Owned\n     /// [`str`]: ../primitive.str.html\n     /// [`String`]: ../string/struct.String.html\n     ///"}, {"sha": "229034eb7790b029c30b087b733212441fb4c581", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -31,10 +31,14 @@ pub use core::panic::{PanicInfo, Location};\n /// A marker trait which represents \"panic safe\" types in Rust.\n ///\n /// This trait is implemented by default for many types and behaves similarly in\n-/// terms of inference of implementation to the `Send` and `Sync` traits. The\n-/// purpose of this trait is to encode what types are safe to cross a `catch_unwind`\n+/// terms of inference of implementation to the [`Send`] and [`Sync`] traits. The\n+/// purpose of this trait is to encode what types are safe to cross a [`catch_unwind`]\n /// boundary with no fear of unwind safety.\n ///\n+/// [`Send`]: ../marker/trait.Send.html\n+/// [`Sync`]: ../marker/trait.Sync.html\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n+///\n /// ## What is unwind safety?\n ///\n /// In Rust a function can \"return\" early if it either panics or calls a\n@@ -95,12 +99,13 @@ pub use core::panic::{PanicInfo, Location};\n ///\n /// ## When should `UnwindSafe` be used?\n ///\n-/// Is not intended that most types or functions need to worry about this trait.\n-/// It is only used as a bound on the `catch_unwind` function and as mentioned above,\n-/// the lack of `unsafe` means it is mostly an advisory. The `AssertUnwindSafe`\n-/// wrapper struct in this module can be used to force this trait to be\n-/// implemented for any closed over variables passed to the `catch_unwind` function\n-/// (more on this below).\n+/// It is not intended that most types or functions need to worry about this trait.\n+/// It is only used as a bound on the `catch_unwind` function and as mentioned\n+/// above, the lack of `unsafe` means it is mostly an advisory. The\n+/// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n+/// implemented for any closed over variables passed to `catch_unwind`.\n+///\n+/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may not be safely transferred \\\n                             across an unwind boundary\"]\n@@ -109,11 +114,14 @@ pub auto trait UnwindSafe {}\n /// A marker trait representing types where a shared reference is considered\n /// unwind safe.\n ///\n-/// This trait is namely not implemented by `UnsafeCell`, the root of all\n+/// This trait is namely not implemented by [`UnsafeCell`], the root of all\n /// interior mutability.\n ///\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n-/// `UnwindSafe` trait, for more information see that documentation.\n+/// [`UnwindSafe`] trait, for more information see that documentation.\n+///\n+/// [`UnsafeCell`]: ../cell/struct.UnsafeCell.html\n+/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n@@ -122,14 +130,15 @@ pub auto trait RefUnwindSafe {}\n \n /// A simple wrapper around a type to assert that it is unwind safe.\n ///\n-/// When using `catch_unwind` it may be the case that some of the closed over\n+/// When using [`catch_unwind`] it may be the case that some of the closed over\n /// variables are not unwind safe. For example if `&mut T` is captured the\n /// compiler will generate a warning indicating that it is not unwind safe. It\n /// may not be the case, however, that this is actually a problem due to the\n-/// specific usage of `catch_unwind` if unwind safety is specifically taken into\n+/// specific usage of [`catch_unwind`] if unwind safety is specifically taken into\n /// account. This wrapper struct is useful for a quick and lightweight\n /// annotation that a variable is indeed unwind safe.\n ///\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n /// # Examples\n ///\n /// One way to use `AssertUnwindSafe` is to assert that the entire closure\n@@ -318,18 +327,22 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n /// panic and allowing a graceful handling of the error.\n ///\n /// It is **not** recommended to use this function for a general try/catch\n-/// mechanism. The `Result` type is more appropriate to use for functions that\n+/// mechanism. The [`Result`] type is more appropriate to use for functions that\n /// can fail on a regular basis. Additionally, this function is not guaranteed\n /// to catch all panics, see the \"Notes\" section below.\n ///\n-/// The closure provided is required to adhere to the `UnwindSafe` trait to ensure\n+/// [`Result`]: ../result/enum.Result.html\n+///\n+/// The closure provided is required to adhere to the [`UnwindSafe`] trait to ensure\n /// that all captured variables are safe to cross this boundary. The purpose of\n /// this bound is to encode the concept of [exception safety][rfc] in the type\n /// system. Most usage of this function should not need to worry about this\n /// bound as programs are naturally unwind safe without `unsafe` code. If it\n-/// becomes a problem the associated `AssertUnwindSafe` wrapper type in this\n-/// module can be used to quickly assert that the usage here is indeed unwind\n-/// safe.\n+/// becomes a problem the [`AssertUnwindSafe`] wrapper struct can be used to quickly\n+/// assert that the usage here is indeed unwind safe.\n+///\n+/// [`AssertUnwindSafe`]: ./struct.AssertUnwindSafe.html\n+/// [`UnwindSafe`]: ./trait.UnwindSafe.html\n ///\n /// [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1236-stabilize-catch-panic.md\n ///\n@@ -364,9 +377,11 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n \n /// Triggers a panic without invoking the panic hook.\n ///\n-/// This is designed to be used in conjunction with `catch_unwind` to, for\n+/// This is designed to be used in conjunction with [`catch_unwind`] to, for\n /// example, carry a panic across a layer of C code.\n ///\n+/// [`catch_unwind`]: ./fn.catch_unwind.html\n+///\n /// # Notes\n ///\n /// Note that panics in Rust are not always implemented via unwinding, but they"}, {"sha": "403056240bf57c3e7d917a9dcd1bb7f58ce34b23", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -76,7 +76,9 @@ static mut HOOK: Hook = Hook::Default;\n /// is invoked. As such, the hook will run with both the aborting and unwinding\n /// runtimes. The default hook prints a message to standard error and generates\n /// a backtrace if requested, but this behavior can be customized with the\n-/// `set_hook` and `take_hook` functions.\n+/// `set_hook` and [`take_hook`] functions.\n+///\n+/// [`take_hook`]: ./fn.take_hook.html\n ///\n /// The hook is provided with a `PanicInfo` struct which contains information\n /// about the origin of the panic, including the payload passed to `panic!` and\n@@ -121,6 +123,10 @@ pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n \n /// Unregisters the current panic hook, returning it.\n ///\n+/// *See also the function [`set_hook`].*\n+///\n+/// [`set_hook`]: ./fn.set_hook.html\n+///\n /// If no custom hook is registered, the default hook will be returned.\n ///\n /// # Panics"}, {"sha": "fff433b90ce69683905d541734f8cef980b61c8c", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -24,9 +24,17 @@ use foo::*;\n #[foo::a] //~ ERROR: paths of length greater than one\n fn _test() {}\n \n+fn _test_inner() {\n+    #![a] // OK\n+}\n+\n #[a] //~ ERROR: custom attributes cannot be applied to modules\n mod _test2 {}\n \n+mod _test2_inner {\n+    #![a] //~ ERROR: custom attributes cannot be applied to modules\n+}\n+\n #[a = y] //~ ERROR: must only be followed by a delimiter token\n fn _test3() {}\n \n@@ -36,19 +44,40 @@ fn _test4() {}\n #[a () = ] //~ ERROR: must only be followed by a delimiter token\n fn _test5() {}\n \n-fn main() {\n+fn attrs() {\n+    // Statement, item\n+    #[a] // OK\n+    struct S;\n+\n+    // Statement, macro\n+    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    println!();\n+\n+    // Statement, semi\n+    #[a] //~ ERROR: custom attributes cannot be applied to statements\n+    S;\n+\n+    // Statement, local\n     #[a] //~ ERROR: custom attributes cannot be applied to statements\n     let _x = 2;\n-    let _x = #[a] 2;\n-    //~^ ERROR: custom attributes cannot be applied to expressions\n-\n-    let _x: m!(u32) = 3;\n-    //~^ ERROR: procedural macros cannot be expanded to types\n-    if let m!(Some(_x)) = Some(3) {\n-    //~^ ERROR: procedural macros cannot be expanded to patterns\n-    }\n-    let _x = m!(3);\n-    //~^ ERROR: procedural macros cannot be expanded to expressions\n-    m!(let _x = 3;);\n-    //~^ ERROR: procedural macros cannot be expanded to statements\n+\n+    // Expr\n+    let _x = #[a] 2; //~ ERROR: custom attributes cannot be applied to expressions\n+\n+    // Opt expr\n+    let _x = [#[a] 2]; //~ ERROR: custom attributes cannot be applied to expressions\n+\n+    // Expr macro\n+    let _x = #[a] println!(); //~ ERROR: custom attributes cannot be applied to expressions\n+}\n+\n+fn main() {\n+    let _x: m!(u32) = 3; //~ ERROR: procedural macros cannot be expanded to types\n+    if let m!(Some(_x)) = Some(3) {} //~ ERROR: procedural macros cannot be expanded to patterns\n+\n+    m!(struct S;); //~ ERROR: procedural macros cannot be expanded to statements\n+    m!(let _x = 3;); //~ ERROR: procedural macros cannot be expanded to statements\n+\n+    let _x = m!(3); //~ ERROR: procedural macros cannot be expanded to expressions\n+    let _x = [m!(3)]; //~ ERROR: procedural macros cannot be expanded to expressions\n }"}, {"sha": "f170d9c25f56d1234254ee97eb55618299d60377", "filename": "src/test/compile-fail/used.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fcompile-fail%2Fused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fcompile-fail%2Fused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fused.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(used)]\n+\n+#[used]\n+static FOO: u32 = 0; // OK\n+\n+#[used] //~ ERROR attribute must be applied to a `static` variable\n+fn foo() {}\n+\n+#[used] //~ ERROR attribute must be applied to a `static` variable\n+struct Foo {}\n+\n+#[used] //~ ERROR attribute must be applied to a `static` variable\n+trait Bar {}\n+\n+#[used] //~ ERROR attribute must be applied to a `static` variable\n+impl Bar for Foo {}\n+\n+fn main() {}"}, {"sha": "62e2a36d7cc77d5ea874b79b92ec7b4d2d01bb1a", "filename": "src/test/run-pass/vec-const-new.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-const-new.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that Vec::new() can be used for constants\n+\n+#![feature(const_vec_new)]\n+\n+const MY_VEC: Vec<usize> = Vec::new();\n+\n+pub fn main() {}"}, {"sha": "6994a377a06d7c01373dca5bc51034f61bbec92d", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -10,6 +10,8 @@\n \n // compile-pass\n \n+#![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![warn(unused)] // UI tests pass `-A unused` (#43896)\n \n struct SoulHistory {\n@@ -18,6 +20,13 @@ struct SoulHistory {\n     endless_and_singing: bool\n }\n \n+#[derive(Clone, Copy)]\n+enum Large {\n+    Suit { case: () }\n+}\n+\n+struct Tuple(Large, ());\n+\n fn main() {\n     let i_think_continually = 2;\n     let who_from_the_womb_remembered = SoulHistory {\n@@ -31,4 +40,38 @@ fn main() {\n                          endless_and_singing: true } = who_from_the_womb_remembered {\n         hours_are_suns = false;\n     }\n+\n+    let bag = Large::Suit {\n+        case: ()\n+    };\n+\n+    // Plain struct\n+    match bag {\n+        Large::Suit { case } => {}\n+    };\n+\n+    // Referenced struct\n+    match &bag {\n+        &Large::Suit { case } => {}\n+    };\n+\n+    // Boxed struct\n+    match box bag {\n+        box Large::Suit { case } => {}\n+    };\n+\n+    // Tuple with struct\n+    match (bag,) {\n+        (Large::Suit { case },) => {}\n+    };\n+\n+    // Slice with struct\n+    match [bag] {\n+        [Large::Suit { case }] => {}\n+    };\n+\n+    // Tuple struct with struct\n+    match Tuple(bag, ()) {\n+        Tuple(Large::Suit { case }, ()) => {}\n+    };\n }"}, {"sha": "7bfe2c9162ed17d9a30936a164989645d8bea17f", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17841cc97ac950312355403b6cfe11b916e242a6/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1,40 +1,76 @@\n warning: unused variable: `i_think_continually`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:22:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:31:9\n    |\n LL |     let i_think_continually = 2;\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n    |\n note: lint level defined here\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:15:9\n    |\n LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n warning: unused variable: `corridors_of_light`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:29:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:26\n    |\n LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:30:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:39:26\n    |\n LL |                          mut hours_are_suns,\n    |                          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n \n warning: value assigned to `hours_are_suns` is never read\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:32:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:41:9\n    |\n LL |         hours_are_suns = false;\n    |         ^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:13:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:15:9\n    |\n LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    |         ^^^^^^\n    = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n \n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:50:23\n+   |\n+LL |         Large::Suit { case } => {}\n+   |                       ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:55:24\n+   |\n+LL |         &Large::Suit { case } => {}\n+   |                        ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:60:27\n+   |\n+LL |         box Large::Suit { case } => {}\n+   |                           ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:65:24\n+   |\n+LL |         (Large::Suit { case },) => {}\n+   |                        ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:70:24\n+   |\n+LL |         [Large::Suit { case }] => {}\n+   |                        ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:75:29\n+   |\n+LL |         Tuple(Large::Suit { case }, ()) => {}\n+   |                             ^^^^ help: try ignoring the field: `case: _`\n+"}, {"sha": "122fd5be5201913d42e219e132d6569493583bca", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=17841cc97ac950312355403b6cfe11b916e242a6", "patch": "@@ -1 +1 @@\n-Subproject commit 0a1add2d8689ad12a86f6c32d0a5cd0393dc5d80\n+Subproject commit 122fd5be5201913d42e219e132d6569493583bca"}]}