{"sha": "36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTlmMGNmZjE2YWM4Y2YyMGM5YjgyZWEzNGEyMDAyODAyYTg4Zjc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-29T01:57:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-02-14T20:30:23Z"}, "message": "refactoring: inline some function in the parser", "tree": {"sha": "01e847725407e2d613e8966e28b22588e3de70e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01e847725407e2d613e8966e28b22588e3de70e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "html_url": "https://github.com/rust-lang/rust/commit/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58eed9266a63456016602092f9dc37d8869bfd94", "url": "https://api.github.com/repos/rust-lang/rust/commits/58eed9266a63456016602092f9dc37d8869bfd94", "html_url": "https://github.com/rust-lang/rust/commit/58eed9266a63456016602092f9dc37d8869bfd94"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "58a291bc85e329e5fe6a175affbdd2f82f87dfb1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a9f0cff16ac8cf20c9b82ea34a2002802a88f7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=36a9f0cff16ac8cf20c9b82ea34a2002802a88f7", "patch": "@@ -2641,36 +2641,6 @@ impl<'a> Parser<'a> {\n         // yet.\n         maybe_whole!(deref self, NtTT);\n \n-        // this is the fall-through for the 'match' below.\n-        // invariants: the current token is not a left-delimiter,\n-        // not an EOF, and not the desired right-delimiter (if\n-        // it were, parse_seq_to_before_end would have prevented\n-        // reaching this point.\n-        fn parse_non_delim_tt_tok<'b>(p: &mut Parser<'b>) -> PResult<'b,  TokenTree> {\n-            maybe_whole!(deref p, NtTT);\n-            match p.token {\n-                token::CloseDelim(_) => {\n-                    let token_str = p.this_token_to_string();\n-                    let mut err = p.fatal(\n-                        &format!(\"incorrect close delimiter: `{}`\", token_str));\n-                    // This is a conservative error: only report the last unclosed delimiter. The\n-                    // previous unclosed delimiters could actually be closed! The parser just hasn't\n-                    // gotten to them yet.\n-                    if let Some(&sp) = p.open_braces.last() {\n-                        err.span_note(sp, \"unclosed delimiter\");\n-                    };\n-                    Err(err)\n-                },\n-                /* we ought to allow different depths of unquotation */\n-                token::Dollar | token::SubstNt(..) if p.quote_depth > 0 => {\n-                    p.parse_unquoted()\n-                }\n-                _ => {\n-                    Ok(TokenTree::Token(p.span, p.bump_and_get()))\n-                }\n-            }\n-        }\n-\n         match self.token {\n             token::Eof => {\n                 let open_braces = self.open_braces.clone();\n@@ -2712,7 +2682,34 @@ impl<'a> Parser<'a> {\n                     close_span: close_span,\n                 })))\n             },\n-            _ => parse_non_delim_tt_tok(self),\n+            _ => {\n+                // invariants: the current token is not a left-delimiter,\n+                // not an EOF, and not the desired right-delimiter (if\n+                // it were, parse_seq_to_before_end would have prevented\n+                // reaching this point.\n+                maybe_whole!(deref self, NtTT);\n+                match self.token {\n+                    token::CloseDelim(_) => {\n+                        let token_str = self.this_token_to_string();\n+                        let mut err = self.fatal(\n+                            &format!(\"incorrect close delimiter: `{}`\", token_str));\n+                        // This is a conservative error: only report the last unclosed delimiter.\n+                        // The previous unclosed delimiters could actually be closed! The parser\n+                        // just hasn't gotten to them yet.\n+                        if let Some(&sp) = self.open_braces.last() {\n+                            err.span_note(sp, \"unclosed delimiter\");\n+                        };\n+                        Err(err)\n+                    },\n+                    /* we ought to allow different depths of unquotation */\n+                    token::Dollar | token::SubstNt(..) if self.quote_depth > 0 => {\n+                        self.parse_unquoted()\n+                    }\n+                    _ => {\n+                        Ok(TokenTree::Token(self.span, self.bump_and_get()))\n+                    }\n+                }\n+            }\n         }\n     }\n "}]}