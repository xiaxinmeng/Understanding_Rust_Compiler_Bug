{"sha": "d02a221d318d54adb354bfdfdb88d594c232ae5d", "node_id": "C_kwDOAAsO6NoAKGQwMmEyMjFkMzE4ZDU0YWRiMzU0YmZkZmRiODhkNTk0YzIzMmFlNWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-17T15:15:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-17T15:15:50Z"}, "message": "Rollup merge of #102945 - compiler-errors:placeholder-region-outlives, r=lcnr\n\nDo not register placeholder `RegionOutlives` obligations when `considering_regions` is false\n\n**NOTE:** I'm kinda just putting this up for discussion. I'm not certain this is correct...?\n\nThis was introduced in [`608625d`](https://github.com/rust-lang/rust/commit/608625dae95cde00e4570eb6c2d63b2244bbf34c#diff-6e54b18681342ec725d75591dbf384ad08cd73df29db00485fe51b4e90f76ff7R361).\n\nInterestingly, we only check `data.has_placeholders()` for `RegionOutlives`, and not for `TypeOutlives`... why? For the record, that different treatment between `RegionOutlives` and `TypeOutlives` is why the fix \"The compiling succeeds when all `'a : 'b` are replaced with `&'a () : 'b`\" in #100689 _\"works\"_, but it seems like an implementation detail considering this.\n\nAlso, why do we care about placeholder regions being registered if `considering_regions` is false? It doesn't seem to affect any UI tests, for example.\n\nr? `@lcnr`\n\nFixes #102899\nFixes #100689", "tree": {"sha": "7d64f46d76223962d3968aed8d4f3cd3119496bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d64f46d76223962d3968aed8d4f3cd3119496bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d02a221d318d54adb354bfdfdb88d594c232ae5d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTXGmCRBK7hj4Ov3rIwAA8LUIAAFoVDK7BWOrmNctiYG1zNyQ\nTS3FlsDv3JyrX2kC0ZWsVQfkNY5TsHPMXDtupQhjiaTZ9wDWzexHp5WR3LXhqp/f\nIE7/L4mwITyjVlz5b9ltlh1vbyrpR5W5GmWLGMHbPQsOaoC9rgc3ndmgiV/HkBbx\njZXfxPRMRIk1tQe7yXyGCCP9mEhBXPL6sWYyqxlnbTIJXvEIdAN0KdKSo//orIbU\nt1HtevZLyrmqJ/9JD0ILFGUkSWSX0TXPydlyR/M6Sh21UPaE4DFzhREiaRwP6vKI\ntkR1VtwOAFfbveRG34KGgWzmJOWrwJPePbKUzHvu3aiFU0qPv4vcFd8vBEdLszg=\n=q46L\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d64f46d76223962d3968aed8d4f3cd3119496bb\nparent e91fd0b514eaf950f8b84f0703142e8926d27286\nparent 3021598fdbba9ce32d313bba6b49e03c7701da1f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666019750 +0200\ncommitter GitHub <noreply@github.com> 1666019750 +0200\n\nRollup merge of #102945 - compiler-errors:placeholder-region-outlives, r=lcnr\n\nDo not register placeholder `RegionOutlives` obligations when `considering_regions` is false\n\n**NOTE:** I'm kinda just putting this up for discussion. I'm not certain this is correct...?\n\nThis was introduced in [`608625d`](https://github.com/rust-lang/rust/commit/608625dae95cde00e4570eb6c2d63b2244bbf34c#diff-6e54b18681342ec725d75591dbf384ad08cd73df29db00485fe51b4e90f76ff7R361).\n\nInterestingly, we only check `data.has_placeholders()` for `RegionOutlives`, and not for `TypeOutlives`... why? For the record, that different treatment between `RegionOutlives` and `TypeOutlives` is why the fix \"The compiling succeeds when all `'a : 'b` are replaced with `&'a () : 'b`\" in #100689 _\"works\"_, but it seems like an implementation detail considering this.\n\nAlso, why do we care about placeholder regions being registered if `considering_regions` is false? It doesn't seem to affect any UI tests, for example.\n\nr? `@lcnr`\n\nFixes #102899\nFixes #100689\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d02a221d318d54adb354bfdfdb88d594c232ae5d", "html_url": "https://github.com/rust-lang/rust/commit/d02a221d318d54adb354bfdfdb88d594c232ae5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d02a221d318d54adb354bfdfdb88d594c232ae5d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91fd0b514eaf950f8b84f0703142e8926d27286", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91fd0b514eaf950f8b84f0703142e8926d27286", "html_url": "https://github.com/rust-lang/rust/commit/e91fd0b514eaf950f8b84f0703142e8926d27286"}, {"sha": "3021598fdbba9ce32d313bba6b49e03c7701da1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3021598fdbba9ce32d313bba6b49e03c7701da1f", "html_url": "https://github.com/rust-lang/rust/commit/3021598fdbba9ce32d313bba6b49e03c7701da1f"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "d4c734273861602b9deb20405d8c8431173ae47f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02a221d318d54adb354bfdfdb88d594c232ae5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02a221d318d54adb354bfdfdb88d594c232ae5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d02a221d318d54adb354bfdfdb88d594c232ae5d", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::RegionOutlives(data) => {\n-                    if infcx.considering_regions || data.has_placeholders() {\n+                    if infcx.considering_regions {\n                         infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data));\n                     }\n "}, {"sha": "2db7f8a354cf58479eae15f7c81282ef25a274fc", "filename": "src/test/ui/higher-rank-trait-bounds/issue-100689.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d02a221d318d54adb354bfdfdb88d594c232ae5d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02a221d318d54adb354bfdfdb88d594c232ae5d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-100689.rs?ref=d02a221d318d54adb354bfdfdb88d594c232ae5d", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+\n+struct Foo<'a> {\n+    foo: &'a mut usize,\n+}\n+\n+trait Bar<'a> {\n+    type FooRef<'b>\n+    where\n+        'a: 'b;\n+    fn uwu(foo: Foo<'a>, f: impl for<'b> FnMut(Self::FooRef<'b>));\n+}\n+impl<'a> Bar<'a> for () {\n+    type FooRef<'b>\n+    =\n+        &'b Foo<'a>\n+    where\n+        'a : 'b,\n+    ;\n+\n+    fn uwu(\n+        foo: Foo<'a>,\n+        mut f: impl for<'b> FnMut(&'b Foo<'a>), //relevant part\n+    ) {\n+        f(&foo);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "952b81584f30d9ce0bf24ead28e785d8716d2fed", "filename": "src/test/ui/higher-rank-trait-bounds/issue-102899.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d02a221d318d54adb354bfdfdb88d594c232ae5d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02a221d318d54adb354bfdfdb88d594c232ae5d/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-102899.rs?ref=d02a221d318d54adb354bfdfdb88d594c232ae5d", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+pub trait BufferTrait<'buffer> {\n+    type Subset<'channel>\n+    where\n+        'buffer: 'channel;\n+\n+    fn for_each_subset<F>(&self, f: F)\n+    where\n+        F: for<'channel> Fn(Self::Subset<'channel>);\n+}\n+\n+pub struct SomeBuffer<'buffer> {\n+    samples: &'buffer [()],\n+}\n+\n+impl<'buffer> BufferTrait<'buffer> for SomeBuffer<'buffer> {\n+    type Subset<'subset> = Subset<'subset> where 'buffer: 'subset;\n+\n+    fn for_each_subset<F>(&self, _f: F)\n+    where\n+        F: for<'subset> Fn(Subset<'subset>),\n+    {\n+        todo!()\n+    }\n+}\n+\n+pub struct Subset<'subset> {\n+    buffer: &'subset [()],\n+}\n+\n+fn main() {}"}]}