{"sha": "558f8d8e3ea6b7da3d6d338740637149a7e45840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OGY4ZDhlM2VhNmI3ZGEzZDZkMzM4NzQwNjM3MTQ5YTdlNDU4NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T16:12:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-07T16:12:22Z"}, "message": "auto merge of #19539 : cmr/rust/18959, r=nikomatsakis\n\nCloses #18959\r\n\r\nTechnically, this causes code that once compiled to no longer compile, but\r\nthat code probably never ran.\r\n\r\n[breaking-change]\r\n\r\n------------\r\n\r\nNot quite sure the error message is good enough, I feel like it ought to tell you \"because it inherits from non-object-safe trait Foo\", so I've opened up a follow-up issue #19538", "tree": {"sha": "b7fdff48fd7136b2e37d04712c74367ad49f7f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7fdff48fd7136b2e37d04712c74367ad49f7f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558f8d8e3ea6b7da3d6d338740637149a7e45840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558f8d8e3ea6b7da3d6d338740637149a7e45840", "html_url": "https://github.com/rust-lang/rust/commit/558f8d8e3ea6b7da3d6d338740637149a7e45840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558f8d8e3ea6b7da3d6d338740637149a7e45840/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a243e8820a2bc61866e6d644f56c2f96096e17bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a243e8820a2bc61866e6d644f56c2f96096e17bb", "html_url": "https://github.com/rust-lang/rust/commit/a243e8820a2bc61866e6d644f56c2f96096e17bb"}, {"sha": "6e18b5af9336947ec5d41e66d216c52c12bf74a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e18b5af9336947ec5d41e66d216c52c12bf74a3", "html_url": "https://github.com/rust-lang/rust/commit/6e18b5af9336947ec5d41e66d216c52c12bf74a3"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "cdf34c7f4d2f3c8dc845d84053407341581d2bbb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=558f8d8e3ea6b7da3d6d338740637149a7e45840", "patch": "@@ -1747,8 +1747,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.register_unsize_obligations(span, &**u)\n             }\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n-                vtable::check_object_safety(self.tcx(), ty_trait, span);\n-\n+                vtable::check_object_safety(self.tcx(), &ty_trait.principal, span);\n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` implements `Foo`:\n                 vtable::register_object_cast_obligations(self,"}, {"sha": "b9f7eb3f271b7b2bcc4aa28ad82938218b95c3ff", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=558f8d8e3ea6b7da3d6d338740637149a7e45840", "patch": "@@ -45,7 +45,7 @@ pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n             // Ensure that if ~T is cast to ~Trait, then T : Trait\n             push_cast_obligation(fcx, cast_expr, object_trait, referent_ty);\n-            check_object_safety(fcx.tcx(), object_trait, source_expr.span);\n+            check_object_safety(fcx.tcx(), &object_trait.principal, source_expr.span);\n         }\n \n         (&ty::ty_rptr(referent_region, ty::mt { ty: referent_ty,\n@@ -69,7 +69,7 @@ pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                target_region,\n                                referent_region);\n \n-                check_object_safety(fcx.tcx(), object_trait, source_expr.span);\n+                check_object_safety(fcx.tcx(), &object_trait.principal, source_expr.span);\n             }\n         }\n \n@@ -133,17 +133,32 @@ pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n // self by value, has no type parameters and does not use the `Self` type, except\n // in self position.\n pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                                 object_trait: &ty::TyTrait<'tcx>,\n+                                 object_trait: &ty::TraitRef<'tcx>,\n+                                 span: Span) {\n+\n+    let mut object = object_trait.clone();\n+    if object.substs.types.len(SelfSpace) == 0 {\n+        object.substs.types.push(SelfSpace, ty::mk_err());\n+    }\n+\n+    let object = Rc::new(object);\n+    for tr in traits::supertraits(tcx, object) {\n+        check_object_safety_inner(tcx, &*tr, span);\n+    }\n+}\n+\n+fn check_object_safety_inner<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                 object_trait: &ty::TraitRef<'tcx>,\n                                  span: Span) {\n     // Skip the fn_once lang item trait since only the compiler should call\n     // `call_once` which is the method which takes self by value. What could go\n     // wrong?\n     match tcx.lang_items.fn_once_trait() {\n-        Some(def_id) if def_id == object_trait.principal.def_id => return,\n+        Some(def_id) if def_id == object_trait.def_id => return,\n         _ => {}\n     }\n \n-    let trait_items = ty::trait_items(tcx, object_trait.principal.def_id);\n+    let trait_items = ty::trait_items(tcx, object_trait.def_id);\n \n     let mut errors = Vec::new();\n     for item in trait_items.iter() {\n@@ -157,7 +172,7 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     let mut errors = errors.iter().flat_map(|x| x.iter()).peekable();\n     if errors.peek().is_some() {\n-        let trait_name = ty::item_path_str(tcx, object_trait.principal.def_id);\n+        let trait_name = ty::item_path_str(tcx, object_trait.def_id);\n         span_err!(tcx.sess, span, E0038,\n             \"cannot convert to a trait object because trait `{}` is not object-safe\",\n             trait_name);"}, {"sha": "3d126790335a87f08d8c956c0d9efbc1c27dff2e", "filename": "src/test/compile-fail/issue-18959.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558f8d8e3ea6b7da3d6d338740637149a7e45840/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=558f8d8e3ea6b7da3d6d338740637149a7e45840", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo for Sized? { fn foo<T>(&self, ext_thing: &T); }\n+pub trait Bar for Sized?: Foo { }\n+impl<T: Foo> Bar for T { }\n+\n+pub struct Thing;\n+impl Foo for Thing {\n+    fn foo<T>(&self, _: &T) {}\n+}\n+\n+#[inline(never)] fn foo(b: &Bar) { b.foo(&0u) }\n+\n+fn main() {\n+    let mut thing = Thing;\n+    let test: &Bar = &mut thing; //~ ERROR cannot convert to a trait object because trait `Foo`\n+    foo(test);\n+}"}]}