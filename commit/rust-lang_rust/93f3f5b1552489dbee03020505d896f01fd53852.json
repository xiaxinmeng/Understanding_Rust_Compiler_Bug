{"sha": "93f3f5b1552489dbee03020505d896f01fd53852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZjNmNWIxNTUyNDg5ZGJlZTAzMDIwNTA1ZDg5NmYwMWZkNTM4NTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-18T10:55:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-28T14:04:04Z"}, "message": "Use FxHash{Map,Set} instead of the default Hash{Map,Set} everywhere in rustc.", "tree": {"sha": "19ccbcb3c491764f5ae6d3b65e1e0f76f450ce55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ccbcb3c491764f5ae6d3b65e1e0f76f450ce55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f3f5b1552489dbee03020505d896f01fd53852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f3f5b1552489dbee03020505d896f01fd53852", "html_url": "https://github.com/rust-lang/rust/commit/93f3f5b1552489dbee03020505d896f01fd53852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f3f5b1552489dbee03020505d896f01fd53852/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ddc33347cade429fdb47509818e775a67c1af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ddc33347cade429fdb47509818e775a67c1af6", "html_url": "https://github.com/rust-lang/rust/commit/83ddc33347cade429fdb47509818e775a67c1af6"}], "stats": {"total": 308, "additions": 156, "deletions": 152}, "files": [{"sha": "8584b534ff240b4c5cb18781653f66197b04318c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -50,14 +50,15 @@ use hir::GenericArg;\n use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use middle::cstore::CrateStore;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::small_vec::OneVector;\n use rustc_data_structures::thin_vec::ThinVec;\n use session::Session;\n use util::common::FN_OUTPUT_NAME;\n use util::nodemap::{DefIdMap, NodeMap};\n \n-use std::collections::{BTreeMap, HashSet};\n+use std::collections::BTreeMap;\n use std::fmt::Debug;\n use std::iter;\n use std::mem;\n@@ -1342,7 +1343,7 @@ impl<'a> LoweringContext<'a> {\n             exist_ty_id: NodeId,\n             collect_elided_lifetimes: bool,\n             currently_bound_lifetimes: Vec<hir::LifetimeName>,\n-            already_defined_lifetimes: HashSet<hir::LifetimeName>,\n+            already_defined_lifetimes: FxHashSet<hir::LifetimeName>,\n             output_lifetimes: Vec<hir::GenericArg>,\n             output_lifetime_params: Vec<hir::GenericParam>,\n         }\n@@ -1476,7 +1477,7 @@ impl<'a> LoweringContext<'a> {\n             exist_ty_id,\n             collect_elided_lifetimes: true,\n             currently_bound_lifetimes: Vec::new(),\n-            already_defined_lifetimes: HashSet::new(),\n+            already_defined_lifetimes: FxHashSet::default(),\n             output_lifetimes: Vec::new(),\n             output_lifetime_params: Vec::new(),\n         };"}, {"sha": "cbf6722c0fd375dbcbfbac29a7dd1862098ef168", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -13,6 +13,7 @@\n use session::config;\n use middle::lang_items;\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast;\n use syntax::symbol::Symbol;\n@@ -23,8 +24,6 @@ use hir::intravisit;\n use hir;\n use ty::TyCtxt;\n \n-use std::collections::HashSet;\n-\n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n@@ -101,7 +100,7 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return\n     }\n \n-    let mut missing = HashSet::new();\n+    let mut missing = FxHashSet::default();\n     for &cnum in tcx.crates().iter() {\n         for &item in tcx.missing_lang_items(cnum).iter() {\n             missing.insert(item);"}, {"sha": "ee683e37648f0089c9f316c667d88cbda01639d5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -37,10 +37,10 @@ use std::collections::btree_map::Iter as BTreeMapIter;\n use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::{fmt, str};\n use std::hash::Hasher;\n use std::collections::hash_map::DefaultHasher;\n-use std::collections::HashSet;\n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n \n@@ -1373,7 +1373,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let max_atomic_width = sess.target.target.max_atomic_width();\n     let atomic_cas = sess.target.target.options.atomic_cas;\n \n-    let mut ret = HashSet::new();\n+    let mut ret = FxHashSet::default();\n     // Target bindings.\n     ret.insert((Symbol::intern(\"target_os\"), Some(Symbol::intern(os))));\n     if let Some(ref fam) = sess.target.target.options.target_family {"}, {"sha": "0de5d3d03d5c37cbb725264079ddc62b10bb42d3", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -12,8 +12,8 @@\n \n pub use self::FileMatch::*;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n-use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -40,7 +40,7 @@ impl<'a> FileSearch<'a> {\n     pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n         F: FnMut(&Path, PathKind)\n     {\n-        let mut visited_dirs = HashSet::new();\n+        let mut visited_dirs = FxHashSet::default();\n \n         for (path, kind) in self.search_paths.iter(self.kind) {\n             f(path, kind);"}, {"sha": "adab73c3b7290bb6a46952ba2d8e76e0d2b361df", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -47,7 +47,6 @@ use jobserver::Client;\n \n use std;\n use std::cell::{self, Cell, RefCell};\n-use std::collections::HashMap;\n use std::env;\n use std::fmt;\n use std::io::Write;\n@@ -122,7 +121,7 @@ pub struct Session {\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n-    pub imported_macro_spans: OneThread<RefCell<HashMap<Span, (String, Span)>>>,\n+    pub imported_macro_spans: OneThread<RefCell<FxHashMap<Span, (String, Span)>>>,\n \n     incr_comp_session: OneThread<RefCell<IncrCompSession>>,\n \n@@ -1129,7 +1128,7 @@ pub fn build_session_(\n         injected_allocator: Once::new(),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n-        imported_macro_spans: OneThread::new(RefCell::new(HashMap::new())),\n+        imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         self_profiling: Lock::new(SelfProfiler::new()),\n         profile_channel: Lock::new(None),"}, {"sha": "d07891fca12aea5144fbe378051805c345a2eb43", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -11,6 +11,7 @@\n #![allow(warnings)]\n \n use std::mem;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, Weak};\n use rustc_data_structures::OnDrop;\n use syntax_pos::Span;\n@@ -21,7 +22,7 @@ use ty::context::TyCtxt;\n use errors::Diagnostic;\n use std::process;\n use std::{fmt, ptr};\n-use std::collections::HashSet;\n+\n #[cfg(parallel_queries)]\n use {\n     rayon_core,\n@@ -282,7 +283,7 @@ where\n fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n                      span: Span,\n                      stack: &mut Vec<(Span, Lrc<QueryJob<'tcx>>)>,\n-                     visited: &mut HashSet<*const QueryJob<'tcx>>\n+                     visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> Option<Option<Waiter<'tcx>>> {\n     if visited.contains(&query.as_ptr()) {\n         return if let Some(p) = stack.iter().position(|q| q.1.as_ptr() == query.as_ptr()) {\n@@ -321,7 +322,7 @@ fn cycle_check<'tcx>(query: Lrc<QueryJob<'tcx>>,\n #[cfg(parallel_queries)]\n fn connected_to_root<'tcx>(\n     query: Lrc<QueryJob<'tcx>>,\n-    visited: &mut HashSet<*const QueryJob<'tcx>>\n+    visited: &mut FxHashSet<*const QueryJob<'tcx>>\n ) -> bool {\n     // We already visited this or we're deliberately ignoring it\n     if visited.contains(&query.as_ptr()) {\n@@ -357,7 +358,7 @@ fn remove_cycle<'tcx>(\n     wakelist: &mut Vec<Lrc<QueryWaiter<'tcx>>>,\n     tcx: TyCtxt<'_, 'tcx, '_>\n ) -> bool {\n-    let mut visited = HashSet::new();\n+    let mut visited = FxHashSet::default();\n     let mut stack = Vec::new();\n     // Look for a cycle starting with the last query in `jobs`\n     if let Some(waiter) = cycle_check(jobs.pop().unwrap(),\n@@ -389,7 +390,7 @@ fn remove_cycle<'tcx>(\n         // connected to queries outside the cycle\n         let entry_points: Vec<Lrc<QueryJob<'tcx>>> = stack.iter().filter_map(|query| {\n             // Mark all the other queries in the cycle as already visited\n-            let mut visited = HashSet::from_iter(stack.iter().filter_map(|q| {\n+            let mut visited = FxHashSet::from_iter(stack.iter().filter_map(|q| {\n                 if q.1.as_ptr() != query.1.as_ptr() {\n                     Some(q.1.as_ptr())\n                 } else {"}, {"sha": "3ba4e4ddbb13bb7e883f26b7096ba4324aac5be1", "filename": "src/librustc/util/time_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Futil%2Ftime_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc%2Futil%2Ftime_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ftime_graph.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::fs::File;\n use std::io::prelude::*;\n use std::marker::PhantomData;\n@@ -40,7 +40,7 @@ struct PerThread {\n \n #[derive(Clone)]\n pub struct TimeGraph {\n-    data: Arc<Mutex<HashMap<TimelineId, PerThread>>>,\n+    data: Arc<Mutex<FxHashMap<TimelineId, PerThread>>>,\n }\n \n #[derive(Clone, Copy)]\n@@ -68,7 +68,7 @@ impl Drop for RaiiToken {\n impl TimeGraph {\n     pub fn new() -> TimeGraph {\n         TimeGraph {\n-            data: Arc::new(Mutex::new(HashMap::new()))\n+            data: Arc::new(Mutex::new(FxHashMap::default()))\n         }\n     }\n "}, {"sha": "24f6156bd769220d5bbc1788d29407381d001b05", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n@@ -30,7 +30,7 @@ use serialize::{json, Encoder};\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n pub struct LinkerInfo {\n-    exports: HashMap<CrateType, Vec<String>>,\n+    exports: FxHashMap<CrateType, Vec<String>>,\n }\n \n impl LinkerInfo {"}, {"sha": "aa4f7688b0f42fb7be454b93e8017609a3c88d93", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use std::env;\n use std::path::{Path, PathBuf};\n use std::fs;\n@@ -172,7 +172,7 @@ fn get_install_prefix_rpath(config: &mut RPathConfig) -> String {\n }\n \n fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n-    let mut set = HashSet::new();\n+    let mut set = FxHashSet::default();\n     let mut minimized = Vec::new();\n     for rpath in rpaths {\n         if set.insert(rpath) {"}, {"sha": "26cc2c9f17cfbd57dba41abe1cdc796fb6022e4b", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use fx::FxHashMap;\n use std::cmp::max;\n use std::slice;\n use std::iter;\n@@ -18,17 +18,17 @@ use super::*;\n pub struct TestGraph {\n     num_nodes: usize,\n     start_node: usize,\n-    successors: HashMap<usize, Vec<usize>>,\n-    predecessors: HashMap<usize, Vec<usize>>,\n+    successors: FxHashMap<usize, Vec<usize>>,\n+    predecessors: FxHashMap<usize, Vec<usize>>,\n }\n \n impl TestGraph {\n     pub fn new(start_node: usize, edges: &[(usize, usize)]) -> Self {\n         let mut graph = TestGraph {\n             num_nodes: start_node + 1,\n             start_node,\n-            successors: HashMap::new(),\n-            predecessors: HashMap::new(),\n+            successors: FxHashMap::default(),\n+            predecessors: FxHashMap::default(),\n         };\n         for &(source, target) in edges {\n             graph.num_nodes = max(graph.num_nodes, source + 1);"}, {"sha": "e329b037d22aafce284a8e8337467d9fb7fe863e", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -10,10 +10,10 @@\n \n use super::*;\n use syntax_pos::SpanData;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc::util::common::QueryMsg;\n use std::fs::File;\n use std::time::{Duration, Instant};\n-use std::collections::hash_map::HashMap;\n use rustc::dep_graph::{DepNode};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -149,7 +149,7 @@ fn write_traces_rec(file: &mut File, traces: &[Rec], total: Duration, depth: usi\n     }\n }\n \n-fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec]) {\n+fn compute_counts_rec(counts: &mut FxHashMap<String,QueryMetric>, traces: &[Rec]) {\n     for t in traces.iter() {\n         match t.effect {\n             Effect::TimeBegin(ref msg) => {\n@@ -200,7 +200,7 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &[Rec])\n     }\n }\n \n-pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetric>) {\n+pub fn write_counts(count_file: &mut File, counts: &mut FxHashMap<String,QueryMetric>) {\n     use rustc::util::common::duration_to_secs_str;\n     use std::cmp::Reverse;\n \n@@ -219,7 +219,7 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n \n pub fn write_traces(html_file: &mut File, counts_file: &mut File, traces: &[Rec]) {\n     let capacity = traces.iter().fold(0, |acc, t| acc + 1 + t.extent.len());\n-    let mut counts : HashMap<String, QueryMetric> = HashMap::with_capacity(capacity);\n+    let mut counts = FxHashMap::with_capacity_and_hasher(capacity, Default::default());\n     compute_counts_rec(&mut counts, traces);\n     write_counts(counts_file, &mut counts);\n "}, {"sha": "5f275b700387360eaec802315d1fffc30a726853", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -16,12 +16,12 @@ use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, SourceMapperDyn, D\n use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use styled_buffer::StyledBuffer;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use atty;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n-use std::collections::HashMap;\n use std::cmp::{min, Reverse};\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n use termcolor::{WriteColor, Color, Buffer};\n@@ -1090,7 +1090,7 @@ impl EmitterWriter {\n                                             max_line_num_len + 1);\n \n                 // Contains the vertical lines' positions for active multiline annotations\n-                let mut multilines = HashMap::new();\n+                let mut multilines = FxHashMap::default();\n \n                 // Next, output the annotate source for this file\n                 for line_idx in 0..annotated_file.lines.len() {\n@@ -1109,7 +1109,7 @@ impl EmitterWriter {\n                                                          width_offset,\n                                                          code_offset);\n \n-                    let mut to_add = HashMap::new();\n+                    let mut to_add = FxHashMap::default();\n \n                     for (depth, style) in depths {\n                         if multilines.get(&depth).is_some() {"}, {"sha": "9a2302171bab3fe8fb222e22f875b15c6f9526f7", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Clone)]\n pub struct Registry {\n-    descriptions: HashMap<&'static str, &'static str>,\n+    descriptions: FxHashMap<&'static str, &'static str>,\n }\n \n impl Registry {"}, {"sha": "1b3819474c22e6b8e4a3f8ce6ffc49c89ce9d705", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -24,7 +24,6 @@\n //! the required condition is not met.\n //!\n \n-use std::collections::HashSet;\n use std::iter::FromIterator;\n use std::vec::Vec;\n use rustc::dep_graph::{DepNode, label_strs};\n@@ -193,7 +192,7 @@ const LABELS_TRAIT: &[&[&str]] = &[\n //\n //     TypeOfItem for these.\n \n-type Labels = HashSet<String>;\n+type Labels = FxHashSet<String>;\n \n /// Represents the requested configuration by rustc_clean/dirty\n struct Assertion {\n@@ -205,13 +204,13 @@ impl Assertion {\n     fn from_clean_labels(labels: Labels) -> Assertion {\n         Assertion {\n             clean: labels,\n-            dirty: Labels::new(),\n+            dirty: Labels::default(),\n         }\n     }\n \n     fn from_dirty_labels(labels: Labels) -> Assertion {\n         Assertion {\n-            clean: Labels::new(),\n+            clean: Labels::default(),\n             dirty: labels,\n         }\n     }\n@@ -328,7 +327,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n             }\n         }\n         // if no `label` or `except` is given, only the node's group are asserted\n-        Labels::new()\n+        Labels::default()\n     }\n \n     /// Return all DepNode labels that should be asserted for this item.\n@@ -436,7 +435,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n     }\n \n     fn resolve_labels(&self, item: &NestedMetaItem, value: &str) -> Labels {\n-        let mut out: Labels = HashSet::new();\n+        let mut out = Labels::default();\n         for label in value.split(',') {\n             let label = label.trim();\n             if DepNode::has_label_string(label) {"}, {"sha": "ab210b013c308eda3d959b06c2e32ddf43a3ee03", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -39,7 +39,6 @@ use util::nodemap::NodeSet;\n use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n-use std::collections::HashSet;\n use rustc::util::nodemap::FxHashSet;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n@@ -304,14 +303,14 @@ pub struct MissingDoc {\n     doc_hidden_stack: Vec<bool>,\n \n     /// Private traits or trait items that leaked through. Don't check their methods.\n-    private_traits: HashSet<ast::NodeId>,\n+    private_traits: FxHashSet<ast::NodeId>,\n }\n \n impl MissingDoc {\n     pub fn new() -> MissingDoc {\n         MissingDoc {\n             doc_hidden_stack: vec![false],\n-            private_traits: HashSet::new(),\n+            private_traits: FxHashSet::default(),\n         }\n     }\n \n@@ -908,7 +907,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         let mut work_queue = vec![cfg.entry];\n         let mut reached_exit_without_self_call = false;\n         let mut self_call_spans = vec![];\n-        let mut visited = HashSet::new();\n+        let mut visited = FxHashSet::default();\n \n         while let Some(idx) = work_queue.pop() {\n             if idx == cfg.exit {"}, {"sha": "9492385957eabe79f7571b120bbfde0a5f868f72", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -226,6 +226,7 @@ use cstore::{MetadataRef, MetadataBlob};\n use creader::Library;\n use schema::{METADATA_HEADER, rustc_version};\n \n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::{config, Session};\n@@ -239,7 +240,6 @@ use syntax_pos::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n use std::cmp;\n-use std::collections::HashSet;\n use std::fmt;\n use std::fs;\n use std::io::{self, Read};\n@@ -308,7 +308,7 @@ impl CratePaths {\n \n impl<'a> Context<'a> {\n     pub fn maybe_load_library_crate(&mut self) -> Option<Library> {\n-        let mut seen_paths = HashSet::new();\n+        let mut seen_paths = FxHashSet::default();\n         match self.extra_filename {\n             Some(s) => self.find_library_crate(s, &mut seen_paths)\n                 .or_else(|| self.find_library_crate(\"\", &mut seen_paths)),\n@@ -431,7 +431,7 @@ impl<'a> Context<'a> {\n \n     fn find_library_crate(&mut self,\n                           extra_prefix: &str,\n-                          seen_paths: &mut HashSet<PathBuf>)\n+                          seen_paths: &mut FxHashSet<PathBuf>)\n                           -> Option<Library> {\n         // If an SVH is specified, then this is a transitive dependency that\n         // must be loaded via -L plus some filtering."}, {"sha": "dcbf92b57b13a2a895a0ee897fd44b1b20eb4aad", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -67,9 +67,9 @@ use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n use rustc::ty::subst::Substs;\n use util::dump_mir;\n use util::liveness::{self, IdentityMap};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_set::IdxSet;\n-use std::collections::HashMap;\n use std::borrow::Cow;\n use std::iter::once;\n use std::mem;\n@@ -142,10 +142,12 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n     state_field: usize,\n \n     // Mapping from Local to (type of local, generator struct index)\n-    remap: HashMap<Local, (Ty<'tcx>, usize)>,\n+    // FIXME(eddyb) This should use `IndexVec<Local, Option<_>>`.\n+    remap: FxHashMap<Local, (Ty<'tcx>, usize)>,\n \n     // A map from a suspension point in a block to the locals which have live storage at that point\n-    storage_liveness: HashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n+    // FIXME(eddyb) This should use `IndexVec<BasicBlock, Option<_>>`.\n+    storage_liveness: FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n \n     // A list of suspension points, generated during the transform\n     suspension_points: Vec<SuspensionPoint>,\n@@ -364,12 +366,15 @@ impl<'tcx> Visitor<'tcx> for BorrowedLocals {\n     }\n }\n \n-fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                               mir: &Mir<'tcx>,\n-                                               source: MirSource,\n-                                               movable: bool) ->\n-                                               (liveness::LiveVarSet<Local>,\n-                                                HashMap<BasicBlock, liveness::LiveVarSet<Local>>) {\n+fn locals_live_across_suspend_points(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    source: MirSource,\n+    movable: bool,\n+) -> (\n+    liveness::LiveVarSet<Local>,\n+    FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>,\n+) {\n     let dead_unwinds = IdxSet::new_empty(mir.basic_blocks().len());\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n \n@@ -413,7 +418,7 @@ fn locals_live_across_suspend_points<'a, 'tcx,>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         &liveness,\n     );\n \n-    let mut storage_liveness_map = HashMap::new();\n+    let mut storage_liveness_map = FxHashMap::default();\n \n     for (block, data) in mir.basic_blocks().iter_enumerated() {\n         if let TerminatorKind::Yield { .. } = data.terminator().kind {\n@@ -477,9 +482,9 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             interior: Ty<'tcx>,\n                             movable: bool,\n                             mir: &mut Mir<'tcx>)\n-    -> (HashMap<Local, (Ty<'tcx>, usize)>,\n+    -> (FxHashMap<Local, (Ty<'tcx>, usize)>,\n         GeneratorLayout<'tcx>,\n-        HashMap<BasicBlock, liveness::LiveVarSet<Local>>)\n+        FxHashMap<BasicBlock, liveness::LiveVarSet<Local>>)\n {\n     // Use a liveness analysis to compute locals which are live across a suspension point\n     let (live_locals, storage_liveness) = locals_live_across_suspend_points(tcx,"}, {"sha": "5ef05cb1d6b6e8fdcd7321290c78ae837e3f1721", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -12,6 +12,7 @@\n \n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n+use rustc::util::nodemap::FxHashMap;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n@@ -21,7 +22,6 @@ use syntax::ast;\n use syntax::feature_gate::AttributeType;\n use syntax_pos::Span;\n \n-use std::collections::HashMap;\n use std::borrow::ToOwned;\n \n /// Structure used to register plugins.\n@@ -53,7 +53,7 @@ pub struct Registry<'a> {\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n     #[doc(hidden)]\n-    pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n+    pub lint_groups: FxHashMap<&'static str, Vec<LintId>>,\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n@@ -74,7 +74,7 @@ impl<'a> Registry<'a> {\n             syntax_exts: vec![],\n             early_lint_passes: vec![],\n             late_lint_passes: vec![],\n-            lint_groups: HashMap::new(),\n+            lint_groups: FxHashMap::default(),\n             llvm_passes: vec![],\n             attributes: vec![],\n             whitelisted_custom_derives: Vec::new(),"}, {"sha": "6f5655b8cec535be80182279598cb27bcad7d9db", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -91,7 +91,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // of macro use (callsite) spans. We store these to ensure\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n-    // mac_defs: HashSet<Span>,\n+    // mac_defs: FxHashSet<Span>,\n     macro_calls: FxHashSet<Span>,\n }\n \n@@ -107,7 +107,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             dumper,\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n-            // mac_defs: HashSet::new(),\n+            // mac_defs: FxHashSet::default(),\n             macro_calls: FxHashSet(),\n         }\n     }"}, {"sha": "18ad862c11bb0915953059768629af09e8959ccb", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -29,8 +29,9 @@\n \n #![allow(non_camel_case_types)]\n \n+use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n-use std::collections::{HashMap, VecDeque};\n+use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::{self, Write};\n use std::borrow::Cow;\n@@ -417,14 +418,14 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for SummaryLine<'a, I> {\n /// references.\n struct Footnotes<'a, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n-    footnotes: HashMap<String, (Vec<Event<'a>>, u16)>,\n+    footnotes: FxHashMap<String, (Vec<Event<'a>>, u16)>,\n }\n \n impl<'a, I: Iterator<Item = Event<'a>>> Footnotes<'a, I> {\n     fn new(iter: I) -> Self {\n         Footnotes {\n             inner: iter,\n-            footnotes: HashMap::new(),\n+            footnotes: FxHashMap::default(),\n         }\n     }\n     fn get_entry(&mut self, key: &str) -> &mut (Vec<Event<'a>>, u16) {\n@@ -865,7 +866,7 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n \n #[derive(Default)]\n pub struct IdMap {\n-    map: HashMap<String, usize>,\n+    map: FxHashMap<String, usize>,\n }\n \n impl IdMap {\n@@ -880,7 +881,7 @@ impl IdMap {\n     }\n \n     pub fn reset(&mut self) {\n-        self.map = HashMap::new();\n+        self.map = FxHashMap::default();\n     }\n \n     pub fn derive(&mut self, candidate: String) -> String {"}, {"sha": "1abe01dd0ac20ec800ba1562fa951bf5949181d4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -38,7 +38,7 @@ pub use self::ExternalLocation::*;\n use std::borrow::Cow;\n use std::cell::RefCell;\n use std::cmp::Ordering;\n-use std::collections::{BTreeMap, HashSet, VecDeque};\n+use std::collections::{BTreeMap, VecDeque};\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter, Write as FmtWrite};\n@@ -741,7 +741,7 @@ fn write_shared(cx: &Context,\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n-    let mut themes: HashSet<String> = HashSet::new();\n+    let mut themes: FxHashSet<String> = FxHashSet::default();\n \n     for entry in &cx.shared.themes {\n         let mut content = Vec::with_capacity(100000);\n@@ -1539,35 +1539,36 @@ impl Ord for ItemEntry {\n \n #[derive(Debug)]\n struct AllTypes {\n-    structs: HashSet<ItemEntry>,\n-    enums: HashSet<ItemEntry>,\n-    unions: HashSet<ItemEntry>,\n-    primitives: HashSet<ItemEntry>,\n-    traits: HashSet<ItemEntry>,\n-    macros: HashSet<ItemEntry>,\n-    functions: HashSet<ItemEntry>,\n-    typedefs: HashSet<ItemEntry>,\n-    existentials: HashSet<ItemEntry>,\n-    statics: HashSet<ItemEntry>,\n-    constants: HashSet<ItemEntry>,\n-    keywords: HashSet<ItemEntry>,\n+    structs: FxHashSet<ItemEntry>,\n+    enums: FxHashSet<ItemEntry>,\n+    unions: FxHashSet<ItemEntry>,\n+    primitives: FxHashSet<ItemEntry>,\n+    traits: FxHashSet<ItemEntry>,\n+    macros: FxHashSet<ItemEntry>,\n+    functions: FxHashSet<ItemEntry>,\n+    typedefs: FxHashSet<ItemEntry>,\n+    existentials: FxHashSet<ItemEntry>,\n+    statics: FxHashSet<ItemEntry>,\n+    constants: FxHashSet<ItemEntry>,\n+    keywords: FxHashSet<ItemEntry>,\n }\n \n impl AllTypes {\n     fn new() -> AllTypes {\n+        let new_set = |cap| FxHashSet::with_capacity_and_hasher(cap, Default::default());\n         AllTypes {\n-            structs: HashSet::with_capacity(100),\n-            enums: HashSet::with_capacity(100),\n-            unions: HashSet::with_capacity(100),\n-            primitives: HashSet::with_capacity(26),\n-            traits: HashSet::with_capacity(100),\n-            macros: HashSet::with_capacity(100),\n-            functions: HashSet::with_capacity(100),\n-            typedefs: HashSet::with_capacity(100),\n-            existentials: HashSet::with_capacity(100),\n-            statics: HashSet::with_capacity(100),\n-            constants: HashSet::with_capacity(100),\n-            keywords: HashSet::with_capacity(100),\n+            structs: new_set(100),\n+            enums: new_set(100),\n+            unions: new_set(100),\n+            primitives: new_set(26),\n+            traits: new_set(100),\n+            macros: new_set(100),\n+            functions: new_set(100),\n+            typedefs: new_set(100),\n+            existentials: new_set(100),\n+            statics: new_set(100),\n+            constants: new_set(100),\n+            keywords: new_set(100),\n         }\n     }\n \n@@ -1595,7 +1596,7 @@ impl AllTypes {\n     }\n }\n \n-fn print_entries(f: &mut fmt::Formatter, e: &HashSet<ItemEntry>, title: &str,\n+fn print_entries(f: &mut fmt::Formatter, e: &FxHashSet<ItemEntry>, title: &str,\n                  class: &str) -> fmt::Result {\n     if !e.is_empty() {\n         let mut e: Vec<&ItemEntry> = e.iter().collect();\n@@ -4185,7 +4186,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 }\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n-                let mut links = HashSet::new();\n+                let mut links = FxHashSet::default();\n                 impls.iter()\n                            .filter_map(|i| {\n                                let is_negative_impl = is_negative_impl(i.inner_impl());"}, {"sha": "73cc363009de5992063af609be74e7d6a97f51b7", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use std::fs::File;\n use std::hash::{Hash, Hasher};\n use std::io::Read;\n@@ -31,7 +31,7 @@ macro_rules! try_something {\n #[derive(Debug, Clone, Eq)]\n pub struct CssPath {\n     pub name: String,\n-    pub children: HashSet<CssPath>,\n+    pub children: FxHashSet<CssPath>,\n }\n \n // This PartialEq implementation IS NOT COMMUTATIVE!!!\n@@ -66,7 +66,7 @@ impl CssPath {\n     fn new(name: String) -> CssPath {\n         CssPath {\n             name,\n-            children: HashSet::new(),\n+            children: FxHashSet::default(),\n         }\n     }\n }\n@@ -211,7 +211,7 @@ fn build_rule(v: &[u8], positions: &[usize]) -> String {\n              .join(\" \")\n }\n \n-fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> HashSet<CssPath> {\n+fn inner(v: &[u8], events: &[Events], pos: &mut usize) -> FxHashSet<CssPath> {\n     let mut paths = Vec::with_capacity(50);\n \n     while *pos < events.len() {"}, {"sha": "bd0e0d277ee54e932518e45178ba664190a8c3cb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -28,8 +28,8 @@ use ThinVec;\n use tokenstream::{ThinTokenStream, TokenStream};\n \n use serialize::{self, Encoder, Decoder};\n-use std::collections::HashSet;\n use std::fmt;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use std::u32;\n \n@@ -407,7 +407,7 @@ pub struct WhereEqPredicate {\n \n /// The set of MetaItems that define the compilation environment of the crate,\n /// used to drive conditional compilation\n-pub type CrateConfig = HashSet<(Name, Option<Symbol>)>;\n+pub type CrateConfig = FxHashSet<(Name, Option<Symbol>)>;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {"}, {"sha": "e8a68b6d7676c5640803e2bf50dcbd9c0eadc949", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -26,7 +26,7 @@ use OneVector;\n use symbol::{keywords, Ident, Symbol};\n use ThinVec;\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -800,7 +800,7 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut dyn Resolver,\n     pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n-    pub expansions: HashMap<Span, Vec<String>>,\n+    pub expansions: FxHashMap<Span, Vec<String>>,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -821,7 +821,7 @@ impl<'a> ExtCtxt<'a> {\n                 directory_ownership: DirectoryOwnership::Owned { relative: None },\n                 crate_span: None,\n             },\n-            expansions: HashMap::new(),\n+            expansions: FxHashMap::default(),\n         }\n     }\n "}, {"sha": "684cee38874630fa7d0f311cd34d1b729c9177d8", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -17,7 +17,7 @@ use parse::parser::PathStyle;\n use symbol::Symbol;\n use syntax_pos::Span;\n \n-use std::collections::HashSet;\n+use rustc_data_structures::fx::FxHashSet;\n \n pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n     let mut result = Vec::new();\n@@ -48,7 +48,7 @@ pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec\n pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path], item: T) -> T\n     where T: HasAttrs,\n {\n-    let (mut names, mut pretty_name) = (HashSet::new(), \"derive(\".to_owned());\n+    let (mut names, mut pretty_name) = (FxHashSet::default(), \"derive(\".to_owned());\n     for (i, path) in traits.iter().enumerate() {\n         if i > 0 {\n             pretty_name.push_str(\", \");"}, {"sha": "6e38f820586ffaea612ff38ddbab17eff5011d21", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -34,7 +34,7 @@ use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n use visit::{self, Visitor};\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use std::fs::File;\n use std::io::Read;\n use std::iter::FromIterator;\n@@ -319,7 +319,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         // Unresolved macros produce dummy outputs as a recovery measure.\n         invocations.reverse();\n         let mut expanded_fragments = Vec::new();\n-        let mut derives: HashMap<Mark, Vec<_>> = HashMap::new();\n+        let mut derives: FxHashMap<Mark, Vec<_>> = FxHashMap::default();\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {"}, {"sha": "5906412883ad0c0356091004cbbe261a8a5e63c6", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -21,7 +21,7 @@ use symbol::keywords;\n use ThinVec;\n use util::move_map::MoveMap;\n \n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n     fn mac_placeholder() -> ast::Mac {\n@@ -81,7 +81,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n }\n \n pub struct PlaceholderExpander<'a, 'b: 'a> {\n-    expanded_fragments: HashMap<ast::NodeId, AstFragment>,\n+    expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n     cx: &'a mut ExtCtxt<'b>,\n     monotonic: bool,\n }\n@@ -90,7 +90,7 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n         PlaceholderExpander {\n             cx,\n-            expanded_fragments: HashMap::new(),\n+            expanded_fragments: FxHashMap::default(),\n             monotonic,\n         }\n     }"}, {"sha": "c962e7fcbb4cfce003da8e7f43c0b8eae534cfab", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -96,11 +96,11 @@ use OneVector;\n use symbol::keywords;\n use tokenstream::TokenStream;\n \n+use rustc_data_structures::fx::FxHashMap;\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n use std::ops::{Deref, DerefMut};\n use std::rc::Rc;\n-use std::collections::HashMap;\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.\n \n@@ -263,7 +263,7 @@ pub enum ParseResult<T> {\n \n /// A `ParseResult` where the `Success` variant contains a mapping of `Ident`s to `NamedMatch`es.\n /// This represents the mapping of metavars to the token trees they bind to.\n-pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n+pub type NamedParseResult = ParseResult<FxHashMap<Ident, Rc<NamedMatch>>>;\n \n /// Count how many metavars are named in the given matcher `ms`.\n pub fn count_names(ms: &[TokenTree]) -> usize {\n@@ -351,7 +351,7 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n         sess: &ParseSess,\n         m: &TokenTree,\n         res: &mut I,\n-        ret_val: &mut HashMap<Ident, Rc<NamedMatch>>,\n+        ret_val: &mut FxHashMap<Ident, Rc<NamedMatch>>,\n     ) -> Result<(), (syntax_pos::Span, String)> {\n         match *m {\n             TokenTree::Sequence(_, ref seq) => for next_m in &seq.tts {\n@@ -382,7 +382,7 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n         Ok(())\n     }\n \n-    let mut ret_val = HashMap::new();\n+    let mut ret_val = FxHashMap::default();\n     for m in ms {\n         match n_rec(sess, m, res.by_ref(), &mut ret_val) {\n             Ok(_) => {}"}, {"sha": "d09127d6b08b7a303ffd729c22727f21b798ea0f", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -27,8 +27,8 @@ use parse::token::Token::*;\n use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n \n+use rustc_data_structures::fx::FxHashMap;\n use std::borrow::Cow;\n-use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::sync::Lrc;\n@@ -451,14 +451,14 @@ struct FirstSets {\n     // If two sequences have the same span in a matcher, then map that\n     // span to None (invalidating the mapping here and forcing the code to\n     // use a slow path).\n-    first: HashMap<Span, Option<TokenSet>>,\n+    first: FxHashMap<Span, Option<TokenSet>>,\n }\n \n impl FirstSets {\n     fn new(tts: &[quoted::TokenTree]) -> FirstSets {\n         use self::quoted::TokenTree;\n \n-        let mut sets = FirstSets { first: HashMap::new() };\n+        let mut sets = FirstSets { first: FxHashMap::default() };\n         build_recur(&mut sets, tts);\n         return sets;\n "}, {"sha": "549e5f00dcec4cbe8cc7478f673140fadc4f0aa6", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -19,11 +19,11 @@ use OneVector;\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{TokenStream, TokenTree, Delimited};\n \n-use std::rc::Rc;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::mem;\n use std::ops::Add;\n-use std::collections::HashMap;\n+use std::rc::Rc;\n \n // An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).\n enum Frame {\n@@ -67,11 +67,11 @@ impl Iterator for Frame {\n /// `src` contains no `TokenTree::{Sequence, MetaVar, MetaVarDecl}`s, `interp` can\n /// (and should) be None.\n pub fn transcribe(cx: &ExtCtxt,\n-                  interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n+                  interp: Option<FxHashMap<Ident, Rc<NamedMatch>>>,\n                   src: Vec<quoted::TokenTree>)\n                   -> TokenStream {\n     let mut stack: OneVector<Frame> = smallvec![Frame::new(src)];\n-    let interpolations = interp.unwrap_or_else(HashMap::new); /* just a convenience */\n+    let interpolations = interp.unwrap_or_else(FxHashMap::default); /* just a convenience */\n     let mut repeats = Vec::new();\n     let mut result: Vec<TokenStream> = Vec::new();\n     let mut result_stack = Vec::new();\n@@ -187,7 +187,7 @@ pub fn transcribe(cx: &ExtCtxt,\n }\n \n fn lookup_cur_matched(ident: Ident,\n-                      interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n+                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n                       repeats: &[(usize, usize)])\n                       -> Option<Rc<NamedMatch>> {\n     interpolations.get(&ident).map(|matched| {\n@@ -234,7 +234,7 @@ impl Add for LockstepIterSize {\n }\n \n fn lockstep_iter_size(tree: &quoted::TokenTree,\n-                      interpolations: &HashMap<Ident, Rc<NamedMatch>>,\n+                      interpolations: &FxHashMap<Ident, Rc<NamedMatch>>,\n                       repeats: &[(usize, usize)])\n                       -> LockstepIterSize {\n     use self::quoted::TokenTree;"}, {"sha": "96584a580f1758d72e5797aee7bb11255362dae1", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -1831,10 +1831,10 @@ mod tests {\n     use errors;\n     use feature_gate::UnstableFeatures;\n     use parse::token;\n-    use std::collections::HashSet;\n     use std::io;\n     use std::path::PathBuf;\n     use diagnostics::plugin::ErrorMap;\n+    use rustc_data_structures::fx::FxHashSet;\n     use rustc_data_structures::sync::Lock;\n     use with_globals;\n     fn mk_sess(cm: Lrc<SourceMap>) -> ParseSess {\n@@ -1845,10 +1845,10 @@ mod tests {\n         ParseSess {\n             span_diagnostic: errors::Handler::with_emitter(true, false, Box::new(emitter)),\n             unstable_features: UnstableFeatures::from_environment(),\n-            config: CrateConfig::new(),\n+            config: CrateConfig::default(),\n             included_mod_stack: Lock::new(Vec::new()),\n             code_map: cm,\n-            missing_fragment_specifiers: Lock::new(HashSet::new()),\n+            missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             non_modrs_mods: Lock::new(vec![]),"}, {"sha": "28d63399b4461f3c024a30820fb3a43ff2d3b757", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -24,8 +24,8 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n use diagnostics::plugin::ErrorMap;\n \n+use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n-use std::collections::HashSet;\n use std::iter;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -46,7 +46,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n-    pub missing_fragment_specifiers: Lock<HashSet<Span>>,\n+    pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature gating\n     /// raw identifiers\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n@@ -75,8 +75,8 @@ impl ParseSess {\n         ParseSess {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(),\n-            config: HashSet::new(),\n-            missing_fragment_specifiers: Lock::new(HashSet::new()),\n+            config: FxHashSet::default(),\n+            missing_fragment_specifiers: Lock::new(FxHashSet::default()),\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             included_mod_stack: Lock::new(vec![]),"}, {"sha": "efe9c2cefdebe93b3e1e4f646e2b2093061ae5b3", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -24,9 +24,9 @@ use syntax::tokenstream;\n use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n use errors::Applicability;\n \n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n-use std::collections::{HashMap, HashSet};\n \n #[derive(PartialEq)]\n enum ArgumentType {\n@@ -65,7 +65,7 @@ struct Context<'a, 'b: 'a> {\n     /// Unique format specs seen for each argument.\n     arg_unique_types: Vec<Vec<ArgumentType>>,\n     /// Map from named arguments to their resolved indices.\n-    names: HashMap<String, usize>,\n+    names: FxHashMap<String, usize>,\n \n     /// The latest consecutive literal strings, or empty if there weren't any.\n     literal: String,\n@@ -104,7 +104,7 @@ struct Context<'a, 'b: 'a> {\n     /// * `count_args`: `vec![Exact(0), Exact(5), Exact(3)]`\n     count_args: Vec<Position>,\n     /// Relative slot numbers for count arguments.\n-    count_positions: HashMap<usize, usize>,\n+    count_positions: FxHashMap<usize, usize>,\n     /// Number of count slots assigned.\n     count_positions_count: usize,\n \n@@ -134,9 +134,9 @@ struct Context<'a, 'b: 'a> {\n fn parse_args(ecx: &mut ExtCtxt,\n               sp: Span,\n               tts: &[tokenstream::TokenTree])\n-              -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, HashMap<String, usize>)> {\n+              -> Option<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<String, usize>)> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n-    let mut names = HashMap::<String, usize>::new();\n+    let mut names = FxHashMap::<String, usize>::default();\n \n     let mut p = ecx.new_parser_from_tts(tts);\n \n@@ -768,7 +768,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                                     sp: Span,\n                                     efmt: P<ast::Expr>,\n                                     args: Vec<P<ast::Expr>>,\n-                                    names: HashMap<String, usize>,\n+                                    names: FxHashMap<String, usize>,\n                                     append_newline: bool)\n                                     -> P<ast::Expr> {\n     // NOTE: this verbose way of initializing `Vec<Vec<ArgumentType>>` is because\n@@ -852,7 +852,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         curpiece: 0,\n         arg_index_map: Vec::new(),\n         count_args: Vec::new(),\n-        count_positions: HashMap::new(),\n+        count_positions: FxHashMap::default(),\n         count_positions_count: 0,\n         count_args_index_offset: 0,\n         literal: String::new(),\n@@ -952,7 +952,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n \n             // The set of foreign substitutions we've explained.  This prevents spamming the user\n             // with `%d should be written as {}` over and over again.\n-            let mut explained = HashSet::new();\n+            let mut explained = FxHashSet::default();\n \n             macro_rules! check_foreign {\n                 ($kind:ident) => {{"}, {"sha": "7e985cf52f550d1aa1f8c95cd5ba9fbdd0dad2b6", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f3f5b1552489dbee03020505d896f01fd53852/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=93f3f5b1552489dbee03020505d896f01fd53852", "patch": "@@ -21,8 +21,7 @@ use edition::Edition;\n use symbol::Symbol;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n-use std::collections::HashMap;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n@@ -190,7 +189,7 @@ impl Mark {\n crate struct HygieneData {\n     marks: Vec<MarkData>,\n     syntax_contexts: Vec<SyntaxContextData>,\n-    markings: HashMap<(SyntaxContext, Mark, Transparency), SyntaxContext>,\n+    markings: FxHashMap<(SyntaxContext, Mark, Transparency), SyntaxContext>,\n     default_edition: Edition,\n }\n \n@@ -212,7 +211,7 @@ impl HygieneData {\n                 opaque: SyntaxContext(0),\n                 opaque_and_semitransparent: SyntaxContext(0),\n             }],\n-            markings: HashMap::new(),\n+            markings: FxHashMap::default(),\n             default_edition: Edition::Edition2015,\n         }\n     }\n@@ -231,7 +230,7 @@ pub fn set_default_edition(edition: Edition) {\n }\n \n pub fn clear_markings() {\n-    HygieneData::with(|data| data.markings = HashMap::new());\n+    HygieneData::with(|data| data.markings = FxHashMap::default());\n }\n \n impl SyntaxContext {"}]}