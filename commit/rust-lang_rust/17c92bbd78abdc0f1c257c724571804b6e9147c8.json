{"sha": "17c92bbd78abdc0f1c257c724571804b6e9147c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YzkyYmJkNzhhYmRjMGYxYzI1N2M3MjQ1NzE4MDRiNmU5MTQ3Yzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-08T09:11:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-08T09:11:46Z"}, "message": "Rustup to rustc 1.30.0-nightly (fc81e3624 2018-09-07)", "tree": {"sha": "c724a2f9dc86942e922115e70ca3a6c13ffcfb50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c724a2f9dc86942e922115e70ca3a6c13ffcfb50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17c92bbd78abdc0f1c257c724571804b6e9147c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17c92bbd78abdc0f1c257c724571804b6e9147c8", "html_url": "https://github.com/rust-lang/rust/commit/17c92bbd78abdc0f1c257c724571804b6e9147c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17c92bbd78abdc0f1c257c724571804b6e9147c8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341b5fe371c5486812b7c010849381c955e1f2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/341b5fe371c5486812b7c010849381c955e1f2e5", "html_url": "https://github.com/rust-lang/rust/commit/341b5fe371c5486812b7c010849381c955e1f2e5"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "a8d2745c9558044b01cc6d246c0b53c00d1b75f6", "filename": "0002-Disable-u128-and-i128-in-libcore.patch", "status": "modified", "additions": 50, "deletions": 43, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/17c92bbd78abdc0f1c257c724571804b6e9147c8/0002-Disable-u128-and-i128-in-libcore.patch", "raw_url": "https://github.com/rust-lang/rust/raw/17c92bbd78abdc0f1c257c724571804b6e9147c8/0002-Disable-u128-and-i128-in-libcore.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0002-Disable-u128-and-i128-in-libcore.patch?ref=17c92bbd78abdc0f1c257c724571804b6e9147c8", "patch": "@@ -1,27 +1,27 @@\n-From 78c557ab91915384c4de6b743fa67dedcb0263c9 Mon Sep 17 00:00:00 2001\n+From 7f8b6fdc01a17a0f963ac05bf9a488c093307090 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Tue, 14 Aug 2018 09:59:32 +0200\n+Date: Sat, 8 Sep 2018 11:06:28 +0200\n Subject: [PATCH] Disable u128 and i128 in libcore\n \n ---\n  src/libcore/clone.rs         |  4 +-\n  src/libcore/cmp.rs           |  6 +--\n  src/libcore/default.rs       |  2 -\n  src/libcore/fmt/num.rs       |  6 +--\n- src/libcore/hash/mod.rs      | 20 ----------\n+ src/libcore/hash/mod.rs      | 20 ---------\n  src/libcore/iter/range.rs    |  1 -\n  src/libcore/iter/traits.rs   |  2 +-\n  src/libcore/lib.rs           |  2 -\n  src/libcore/marker.rs        |  4 +-\n  src/libcore/mem.rs           |  2 -\n- src/libcore/num/mod.rs       | 92 +++++++++++++-------------------------------\n+ src/libcore/num/mod.rs       | 99 ++++++++++++--------------------------------\n  src/libcore/num/wrapping.rs  | 14 +++----\n- src/libcore/ops/arith.rs     | 22 +++++------\n- src/libcore/ops/bit.rs       | 30 ++++++---------\n- src/libcore/tests/iter.rs    | 15 --------\n- src/libcore/tests/num/mod.rs | 18 ---------\n- src/libcore/time.rs          | 51 ------------------------\n- 17 files changed, 62 insertions(+), 229 deletions(-)\n+ src/libcore/ops/arith.rs     | 22 +++++-----\n+ src/libcore/ops/bit.rs       | 30 +++++---------\n+ src/libcore/tests/iter.rs    | 15 -------\n+ src/libcore/tests/num/mod.rs | 18 --------\n+ src/libcore/time.rs          | 51 -----------------------\n+ 17 files changed, 62 insertions(+), 236 deletions(-)\n \n diff --git a/src/libcore/clone.rs b/src/libcore/clone.rs\n index 3b15ba2..de08ce0 100644\n@@ -39,10 +39,10 @@ index 3b15ba2..de08ce0 100644\n          bool char\n      }\n diff --git a/src/libcore/cmp.rs b/src/libcore/cmp.rs\n-index 58d6c4f..a6e6496 100644\n+index ef7d83a..e40c5c2 100644\n --- a/src/libcore/cmp.rs\n +++ b/src/libcore/cmp.rs\n-@@ -800,7 +800,7 @@ mod impls {\n+@@ -883,7 +883,7 @@ mod impls {\n      }\n  \n      partial_eq_impl! {\n@@ -51,7 +51,7 @@ index 58d6c4f..a6e6496 100644\n      }\n  \n      macro_rules! eq_impl {\n-@@ -810,7 +810,7 @@ mod impls {\n+@@ -893,7 +893,7 @@ mod impls {\n          )*)\n      }\n  \n@@ -60,7 +60,7 @@ index 58d6c4f..a6e6496 100644\n  \n      macro_rules! partial_ord_impl {\n          ($($t:ty)*) => ($(\n-@@ -899,7 +899,7 @@ mod impls {\n+@@ -982,7 +982,7 @@ mod impls {\n          }\n      }\n  \n@@ -188,10 +188,10 @@ index e7907e0..84b700c 100644\n  \n      #[stable(feature = \"rust1\", since = \"1.0.0\")]\n diff --git a/src/libcore/iter/range.rs b/src/libcore/iter/range.rs\n-index 651c7a3..3708b8e 100644\n+index 55addd8..6695cfe 100644\n --- a/src/libcore/iter/range.rs\n +++ b/src/libcore/iter/range.rs\n-@@ -175,7 +175,6 @@ step_impl_signed!([i64: u64]);\n+@@ -183,7 +183,6 @@ step_impl_signed!([i64: u64]);\n  // assume here that it is less than 64-bits.\n  #[cfg(not(target_pointer_width = \"64\"))]\n  step_impl_no_between!(u64 i64);\n@@ -213,10 +213,10 @@ index 4b2c1aa..ec3991f 100644\n  \n  /// An iterator adapter that produces output as long as the underlying\n diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n-index c7618b9..31b33a2 100644\n+index fb90be8..310f376 100644\n --- a/src/libcore/lib.rs\n +++ b/src/libcore/lib.rs\n-@@ -144,14 +144,12 @@ mod uint_macros;\n+@@ -152,14 +152,12 @@ mod uint_macros;\n  #[path = \"num/i16.rs\"]   pub mod i16;\n  #[path = \"num/i32.rs\"]   pub mod i32;\n  #[path = \"num/i64.rs\"]   pub mod i64;\n@@ -232,10 +232,10 @@ index c7618b9..31b33a2 100644\n  #[path = \"num/f32.rs\"]   pub mod f32;\n  #[path = \"num/f64.rs\"]   pub mod f64;\n diff --git a/src/libcore/marker.rs b/src/libcore/marker.rs\n-index d18e167..ec2edc1 100644\n+index dd57d2d..b75376b 100644\n --- a/src/libcore/marker.rs\n +++ b/src/libcore/marker.rs\n-@@ -649,8 +649,8 @@ mod copy_impls {\n+@@ -672,8 +672,8 @@ mod copy_impls {\n      }\n  \n      impl_copy! {\n@@ -247,10 +247,10 @@ index d18e167..ec2edc1 100644\n          bool char\n      }\n diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n-index 8a74e7c..642fffa 100644\n+index 1803ade..f7fb0cb 100644\n --- a/src/libcore/mem.rs\n +++ b/src/libcore/mem.rs\n-@@ -196,12 +196,10 @@ pub fn forget<T>(t: T) {\n+@@ -162,12 +162,10 @@ pub fn forget<T>(t: T) {\n  /// u16 | 2\n  /// u32 | 4\n  /// u64 | 8\n@@ -264,48 +264,55 @@ index 8a74e7c..642fffa 100644\n  /// f64 | 8\n  /// char | 4\n diff --git a/src/libcore/num/mod.rs b/src/libcore/num/mod.rs\n-index eb63966..eb06710 100644\n+index 5ae984a..63b3754 100644\n --- a/src/libcore/num/mod.rs\n +++ b/src/libcore/num/mod.rs\n-@@ -95,7 +95,6 @@ nonzero_integers! {\n+@@ -105,7 +105,6 @@ nonzero_integers! {\n      NonZeroU16(u16);\n      NonZeroU32(u32);\n      NonZeroU64(u64);\n -    NonZeroU128(u128);\n      NonZeroUsize(usize);\n  }\n  \n-@@ -2025,15 +2024,6 @@ impl i64 {\n-          \"0x6a2c48091e6a2c48\" }\n+@@ -2282,18 +2281,6 @@ impl i64 {\n+          \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n -#[lang = \"i128\"]\n -impl i128 {\n -    int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n -        170141183460469231731687303715884105727, \"\", \"\", 16,\n -        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n--        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\"\n--    }\n+-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+-        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+-          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n -}\n -\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"isize\"]\n  impl isize {\n-@@ -4157,13 +4147,6 @@ impl u64 {\n-         \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n+@@ -4729,17 +4716,6 @@ impl u64 {\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n  }\n  \n -#[lang = \"u128\"]\n -impl u128 {\n -    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n -        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n--        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\" }\n+-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+-        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+-          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n -}\n -\n  #[cfg(target_pointer_width = \"16\")]\n  #[lang = \"usize\"]\n  impl usize {\n-@@ -4244,7 +4227,7 @@ macro_rules! from_str_radix_int_impl {\n+@@ -4823,7 +4799,7 @@ macro_rules! from_str_radix_int_impl {\n          }\n      )*}\n  }\n@@ -314,7 +321,7 @@ index eb63966..eb06710 100644\n  \n  /// The error type returned when a checked integral type conversion fails.\n  #[unstable(feature = \"try_from\", issue = \"33417\")]\n-@@ -4360,30 +4343,25 @@ macro_rules! rev {\n+@@ -4939,30 +4915,25 @@ macro_rules! rev {\n  try_from_upper_bounded!(u16, u8);\n  try_from_upper_bounded!(u32, u16, u8);\n  try_from_upper_bounded!(u64, u32, u16, u8);\n@@ -349,7 +356,7 @@ index eb63966..eb06710 100644\n  \n  // usize/isize\n  try_from_upper_bounded!(usize, isize);\n-@@ -4395,21 +4373,21 @@ mod ptr_try_from_impls {\n+@@ -4974,21 +4945,21 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8);\n@@ -379,7 +386,7 @@ index eb63966..eb06710 100644\n  }\n  \n  #[cfg(target_pointer_width = \"32\")]\n-@@ -4418,24 +4396,24 @@ mod ptr_try_from_impls {\n+@@ -4997,24 +4968,24 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16);\n@@ -412,7 +419,7 @@ index eb63966..eb06710 100644\n  }\n  \n  #[cfg(target_pointer_width = \"64\")]\n-@@ -4444,24 +4422,20 @@ mod ptr_try_from_impls {\n+@@ -5023,24 +4994,20 @@ mod ptr_try_from_impls {\n      use convert::TryFrom;\n  \n      try_from_upper_bounded!(usize, u8, u16, u32);\n@@ -441,7 +448,7 @@ index eb63966..eb06710 100644\n  }\n  \n  #[doc(hidden)]\n-@@ -4496,7 +4470,7 @@ macro_rules! doit {\n+@@ -5075,7 +5042,7 @@ macro_rules! doit {\n          }\n      })*)\n  }\n@@ -450,7 +457,7 @@ index eb63966..eb06710 100644\n  \n  fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n      use self::IntErrorKind::*;\n-@@ -4664,52 +4638,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n+@@ -5243,52 +5210,38 @@ impl_from_bool! { u8, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u16, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u32, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n  impl_from_bool! { u64, #[stable(feature = \"from_bool\", since = \"1.28.0\")] }\n@@ -839,10 +846,11 @@ index 72b115f..d542e10 100644\n  \n      #[derive(Clone)]\n      struct Test(Bigger);\n-@@ -1878,19 +1876,6 @@ fn test_step_replace_signed() {\n+@@ -1877,19 +1875,6 @@ fn test_step_replace_signed() {\n+     assert_eq!(y, 5);\n  }\n  \n- #[test]\n+-#[test]\n -fn test_step_replace_no_between() {\n -    let mut x = 4u128;\n -    let y = x.replace_zero();\n@@ -855,10 +863,9 @@ index 72b115f..d542e10 100644\n -    assert_eq!(y, 5);\n -}\n -\n--#[test]\n+ #[test]\n  fn test_rev_try_folds() {\n      let f = &|acc, x| i32::checked_add(2*acc, x);\n-     assert_eq!((1..10).rev().try_fold(7, f), (1..10).try_rfold(7, f));\n diff --git a/src/libcore/tests/num/mod.rs b/src/libcore/tests/num/mod.rs\n index ab96d31..bb5c1d0 100644\n --- a/src/libcore/tests/num/mod.rs\n@@ -991,5 +998,5 @@ index b589202..0f8a2ee 100644\n      /// if overflow occurred.\n      ///\n -- \n-2.11.0\n+2.15.2 (Apple Git-101.1)\n "}]}