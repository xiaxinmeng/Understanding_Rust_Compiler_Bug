{"sha": "a5206f9749faf60f6b4163a526de9ad18241503e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MjA2Zjk3NDlmYWY2MGY2YjQxNjNhNTI2ZGU5YWQxODI0MTUwM2U=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-03-13T08:51:55Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-03-18T07:25:58Z"}, "message": "add `Option::{zip,zip_with}` methods under \"option_zip\" gate\n\nThis commit introduces 2 methods - `Option::zip` and `Option::zip_with` with\nrespective signatures:\n- zip: `(Option<T>, Option<U>) -> Option<(T, U)>`\n- zip_with: `(Option<T>, Option<U>, (T, U) -> R) -> Option<R>`\nBoth are under the feature gate \"option_zip\".\n\nI'm not sure about the name \"zip\", maybe we can find a better name for this.\n(I would prefer `union` for example, but this is a keyword :( )\n\n--------------------------------------------------------------------------------\n\nRecently in a russian rust begginers telegram chat a newbie asked (translated):\n> Are there any methods for these conversions:\n>\n> 1. `(Option<A>, Option<B>) -> Option<(A, B)>`\n> 2. `Vec<Option<T>> -> Option<Vec<T>>`\n>\n> ?\n\nWhile second (2.) is clearly `vec.into_iter().collect::<Option<Vec<_>>()`, the\nfirst one isn't that clear.\n\nI couldn't find anything similar in the `core` and I've come to this solution:\n```rust\nlet tuple: (Option<A>, Option<B>) = ...;\nlet res: Option<(A, B)> = tuple.0.and_then(|a| tuple.1.map(|b| (a, b)));\n```\n\nHowever this solution isn't \"nice\" (same for just `match`/`if let`), so I thought\nthat this functionality should be in `core`.", "tree": {"sha": "02efc5c900847a5b482fe140c92c87547013c65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02efc5c900847a5b482fe140c92c87547013c65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5206f9749faf60f6b4163a526de9ad18241503e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5206f9749faf60f6b4163a526de9ad18241503e", "html_url": "https://github.com/rust-lang/rust/commit/a5206f9749faf60f6b4163a526de9ad18241503e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5206f9749faf60f6b4163a526de9ad18241503e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d939f708d960161d23b964309ba68ff207fc0ead", "url": "https://api.github.com/repos/rust-lang/rust/commits/d939f708d960161d23b964309ba68ff207fc0ead", "html_url": "https://github.com/rust-lang/rust/commit/d939f708d960161d23b964309ba68ff207fc0ead"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "94fc2fd357a06d424679e424d9264ca421752fde", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5206f9749faf60f6b4163a526de9ad18241503e/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5206f9749faf60f6b4163a526de9ad18241503e/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a5206f9749faf60f6b4163a526de9ad18241503e", "patch": "@@ -140,6 +140,7 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n+#![feature(option_zip)]\n #![feature(no_niche)] // rust-lang/rust#68303\n \n #[prelude_import]"}, {"sha": "5db92a1b35248e65030d1b767af7e92f8fbaf559", "filename": "src/libcore/option.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a5206f9749faf60f6b4163a526de9ad18241503e/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5206f9749faf60f6b4163a526de9ad18241503e/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a5206f9749faf60f6b4163a526de9ad18241503e", "patch": "@@ -913,6 +913,65 @@ impl<T> Option<T> {\n     pub fn replace(&mut self, value: T) -> Option<T> {\n         mem::replace(self, Some(value))\n     }\n+\n+    /// Zips `self` with another `Option`.\n+    ///\n+    /// Returns `Some((_, _))` when both `self` and `other`\n+    /// are `Some(_)`, otherwise return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_zip)]\n+    /// let x = Some(1);\n+    /// let y = Some(\"hi\");\n+    /// let z = None::<u8>;\n+    ///\n+    /// assert_eq!(x.zip(y), Some((1, \"hi\")));\n+    /// assert_eq!(x.zip(z), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_zip\", issue = \"none\")]\n+    pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)> {\n+        self.zip_with(other, |a, b| (a, b))\n+    }\n+\n+    /// Zips `self` and another `Option` with function `f`.\n+    ///\n+    /// Returns `Some(_)` when both `self` and `other`\n+    /// are `Some(_)`, otherwise return `None`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_zip)]\n+    ///\n+    /// #[derive(Debug, PartialEq)]\n+    /// struct Point {\n+    ///     x: f64,\n+    ///     y: f64,\n+    /// }\n+    ///\n+    /// impl Point {\n+    ///     fn new(x: f64, y: f64) -> Self {\n+    ///         Self { x, y }\n+    ///     }\n+    /// }\n+    ///\n+    /// let x = Some(17.);\n+    /// let y = Some(42.);\n+    ///\n+    /// assert_eq!(x.zip_with(y, Point::new), Some(Point { x: 17., y: 42. }));\n+    /// assert_eq!(x.zip_with(None, Point::new), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"option_zip\", issue = \"none\")]\n+    pub fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n+    where\n+        F: FnOnce(T, U) -> R,\n+    {\n+        Some(f(self?, other?))\n+    }\n }\n \n impl<T: Copy> Option<&T> {"}]}