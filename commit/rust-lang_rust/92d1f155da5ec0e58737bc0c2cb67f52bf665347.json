{"sha": "92d1f155da5ec0e58737bc0c2cb67f52bf665347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZDFmMTU1ZGE1ZWMwZTU4NzM3YmMwYzJjYjY3ZjUyYmY2NjUzNDc=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-05-01T17:32:07Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-22T07:17:41Z"}, "message": "Emit LLVM lifetime intrinsics to improve stack usage and codegen in general\n\nLifetime intrinsics help to reduce stack usage, because LLVM can apply\nstack coloring to reuse the stack slots of dead allocas for new ones.\n\nFor example these functions now both use the same amount of stack, while\nprevious `bar()` used five times as much as `foo()`:\n\n````rust\nfn foo() {\n  println(\"{}\", 5);\n}\n\nfn bar() {\n  println(\"{}\", 5);\n  println(\"{}\", 5);\n  println(\"{}\", 5);\n  println(\"{}\", 5);\n  println(\"{}\", 5);\n}\n````\n\nOn top of that, LLVM can also optimize out certain operations when it\nknows that memory is dead after a certain point. For example, it can\nsometimes remove the zeroing used to cancel the drop glue. This is\npossible when the glue drop itself was already removed because the\nzeroing dominated the drop glue call. For example in:\n\n````rust\npub fn bar(x: (Box<int>, int)) -> (Box<int>, int) {\n    x\n}\n````\n\nWith optimizations, this currently results in:\n\n````llvm\ndefine void @_ZN3bar20h330fa42547df8179niaE({ i64*, i64 }* noalias nocapture nonnull sret, { i64*, i64 }* noalias nocapture nonnull) unnamed_addr #0 {\n\"_ZN29_$LP$Box$LT$int$GT$$C$int$RP$39glue_drop.$x22glue_drop$x22$LP$1347$RP$17h88cf42702e5a322aE.exit\":\n  %2 = bitcast { i64*, i64 }* %1 to i8*\n  %3 = bitcast { i64*, i64 }* %0 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 16, i32 8, i1 false)\n  tail call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 8, i1 false)\n  ret void\n}\n````\n\nBut with lifetime intrinsics we get:\n\n````llvm\ndefine void @_ZN3bar20h330fa42547df8179niaE({ i64*, i64 }* noalias nocapture nonnull sret, { i64*, i64 }* noalias nocapture nonnull) unnamed_addr #0 {\n\"_ZN29_$LP$Box$LT$int$GT$$C$int$RP$39glue_drop.$x22glue_drop$x22$LP$1347$RP$17h88cf42702e5a322aE.exit\":\n  %2 = bitcast { i64*, i64 }* %1 to i8*\n  %3 = bitcast { i64*, i64 }* %0 to i8*\n  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 16, i32 8, i1 false)\n  tail call void @llvm.lifetime.end(i64 16, i8* %2)\n  ret void\n}\n````\n\nFixes #15665", "tree": {"sha": "acfeb7a10dc31ae17341e3579a4ec985c0da3abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acfeb7a10dc31ae17341e3579a4ec985c0da3abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92d1f155da5ec0e58737bc0c2cb67f52bf665347", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92d1f155da5ec0e58737bc0c2cb67f52bf665347", "html_url": "https://github.com/rust-lang/rust/commit/92d1f155da5ec0e58737bc0c2cb67f52bf665347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92d1f155da5ec0e58737bc0c2cb67f52bf665347/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6", "html_url": "https://github.com/rust-lang/rust/commit/8748a69e6cf6d6e922ddf07bd9ef69a67ebc83b6"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "20526fa91078d0140d7ba10e27c8d03387d86bce", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -1603,6 +1603,7 @@ fn mk_binding_alloca<'a,A>(bcx: &'a Block<'a>,\n     // Subtle: be sure that we *populate* the memory *before*\n     // we schedule the cleanup.\n     let bcx = populate(arg, bcx, llval, var_ty);\n+    bcx.fcx.schedule_lifetime_end(cleanup_scope, llval);\n     bcx.fcx.schedule_drop_mem(cleanup_scope, llval, var_ty);\n \n     // Now that memory is initialized and has cleanup scheduled,"}, {"sha": "a9d5b30b9c7f4a92ea2ab9e31e21f84c4178f343", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -1070,6 +1070,34 @@ pub fn with_cond<'a>(\n     next_cx\n }\n \n+pub fn call_lifetime_start(cx: &Block, ptr: ValueRef) {\n+    if cx.sess().opts.optimize == config::No {\n+        return;\n+    }\n+\n+    let _icx = push_ctxt(\"lifetime_start\");\n+    let ccx = cx.ccx();\n+\n+    let llsize = C_u64(ccx, machine::llsize_of_alloc(ccx, val_ty(ptr).element_type()));\n+    let ptr = PointerCast(cx, ptr, Type::i8p(ccx));\n+    let lifetime_start = ccx.get_intrinsic(&\"llvm.lifetime.start\");\n+    Call(cx, lifetime_start, [llsize, ptr], []);\n+}\n+\n+pub fn call_lifetime_end(cx: &Block, ptr: ValueRef) {\n+    if cx.sess().opts.optimize == config::No {\n+        return;\n+    }\n+\n+    let _icx = push_ctxt(\"lifetime_end\");\n+    let ccx = cx.ccx();\n+\n+    let llsize = C_u64(ccx, machine::llsize_of_alloc(ccx, val_ty(ptr).element_type()));\n+    let ptr = PointerCast(cx, ptr, Type::i8p(ccx));\n+    let lifetime_end = ccx.get_intrinsic(&\"llvm.lifetime.end\");\n+    Call(cx, lifetime_end, [llsize, ptr], []);\n+}\n+\n pub fn call_memcpy(cx: &Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {\n     let _icx = push_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();\n@@ -1157,6 +1185,8 @@ pub fn alloca_maybe_zeroed(cx: &Block, ty: Type, name: &str, zero: bool) -> Valu\n         let b = cx.fcx.ccx.builder();\n         b.position_before(cx.fcx.alloca_insert_pt.get().unwrap());\n         memzero(&b, p, ty);\n+    } else {\n+        call_lifetime_start(cx, p);\n     }\n     p\n }\n@@ -1169,7 +1199,9 @@ pub fn arrayalloca(cx: &Block, ty: Type, v: ValueRef) -> ValueRef {\n         }\n     }\n     debuginfo::clear_source_location(cx.fcx);\n-    return ArrayAlloca(cx, ty, v);\n+    let p = ArrayAlloca(cx, ty, v);\n+    call_lifetime_start(cx, p);\n+    p\n }\n \n // Creates and returns space for, or returns the argument representing, the"}, {"sha": "c14429b2086ab97be4484ea1d757ae64379252e8", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -226,6 +226,20 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n         self.trans_cleanups_to_exit_scope(ReturnExit)\n     }\n \n+    fn schedule_lifetime_end(&self,\n+                             cleanup_scope: ScopeId,\n+                             val: ValueRef) {\n+        let drop = box LifetimeEnd {\n+            ptr: val,\n+        };\n+\n+        debug!(\"schedule_lifetime_end({:?}, val={})\",\n+               cleanup_scope,\n+               self.ccx.tn.val_to_string(val));\n+\n+        self.schedule_clean(cleanup_scope, drop as Box<Cleanup>);\n+    }\n+\n     fn schedule_drop_mem(&self,\n                          cleanup_scope: ScopeId,\n                          val: ValueRef,\n@@ -902,6 +916,21 @@ impl Cleanup for FreeValue {\n     }\n }\n \n+pub struct LifetimeEnd {\n+    ptr: ValueRef,\n+}\n+\n+impl Cleanup for LifetimeEnd {\n+    fn clean_on_unwind(&self) -> bool {\n+        false\n+    }\n+\n+    fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a> {\n+        base::call_lifetime_end(bcx, self.ptr);\n+        bcx\n+    }\n+}\n+\n pub fn temporary_scope(tcx: &ty::ctxt,\n                        id: ast::NodeId)\n                        -> ScopeId {\n@@ -957,6 +986,9 @@ pub trait CleanupMethods<'a> {\n                          cleanup_scope: ast::NodeId,\n                          exit: uint) -> BasicBlockRef;\n     fn return_exit_block(&'a self) -> BasicBlockRef;\n+    fn schedule_lifetime_end(&self,\n+                         cleanup_scope: ScopeId,\n+                         val: ValueRef);\n     fn schedule_drop_mem(&self,\n                          cleanup_scope: ScopeId,\n                          val: ValueRef,"}, {"sha": "f3457f3b0ae06ff49be2480027d8cb8914c00587", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -425,6 +425,9 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.umul.with.overflow.i32\" fn(t_i32, t_i32) -> mk_struct!{t_i32, i1});\n     ifn!(\"llvm.umul.with.overflow.i64\" fn(t_i64, t_i64) -> mk_struct!{t_i64, i1});\n \n+    ifn!(\"llvm.lifetime.start\" fn(t_i64,i8p) -> void);\n+    ifn!(\"llvm.lifetime.end\" fn(t_i64, i8p) -> void);\n+\n     ifn!(\"llvm.expect.i1\" fn(i1, i1) -> i1);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have"}, {"sha": "4ea895c89bf25fd0f92955d8a9eb8d1fa65e5494", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -124,6 +124,7 @@ pub fn lvalue_scratch_datum<'a, A>(bcx: &'a Block<'a>,\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n     let bcx = populate(arg, bcx, scratch);\n+    bcx.fcx.schedule_lifetime_end(scope, scratch);\n     bcx.fcx.schedule_drop_mem(scope, scratch, ty);\n \n     DatumBlock::new(bcx, Datum::new(scratch, ty, Lvalue))\n@@ -169,7 +170,10 @@ fn add_rvalue_clean(mode: RvalueMode,\n                     ty: ty::t) {\n     match mode {\n         ByValue => { fcx.schedule_drop_immediate(scope, val, ty); }\n-        ByRef => { fcx.schedule_drop_mem(scope, val, ty); }\n+        ByRef => {\n+            fcx.schedule_lifetime_end(scope, val);\n+            fcx.schedule_drop_mem(scope, val, ty);\n+        }\n     }\n }\n "}, {"sha": "4cb1edbe1e77fb7090318ea863444e2a8babfc2e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -1145,8 +1145,9 @@ pub fn trans_adt<'a>(bcx: &'a Block<'a>,\n         let dest = adt::trans_field_ptr(bcx, repr, addr, discr, i);\n         let e_ty = expr_ty_adjusted(bcx, &**e);\n         bcx = trans_into(bcx, &**e, SaveIn(dest));\n-        fcx.schedule_drop_mem(cleanup::CustomScope(custom_cleanup_scope),\n-                              dest, e_ty);\n+        let scope = cleanup::CustomScope(custom_cleanup_scope);\n+        fcx.schedule_lifetime_end(scope, dest);\n+        fcx.schedule_drop_mem(scope, dest, e_ty);\n     }\n \n     for base in optbase.iter() {"}, {"sha": "1241a85e95cfc5ee3fd7eb9d410f70ca06503683", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92d1f155da5ec0e58737bc0c2cb67f52bf665347/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=92d1f155da5ec0e58737bc0c2cb67f52bf665347", "patch": "@@ -170,6 +170,7 @@ pub fn trans_slice_vstore<'a>(\n         let llfixed_ty = type_of::type_of(bcx.ccx(), fixed_ty).ptr_to();\n         let llfixed_casted = BitCast(bcx, llfixed, llfixed_ty);\n         let cleanup_scope = cleanup::temporary_scope(bcx.tcx(), content_expr.id);\n+        fcx.schedule_lifetime_end(cleanup_scope, llfixed_casted);\n         fcx.schedule_drop_mem(cleanup_scope, llfixed_casted, fixed_ty);\n \n         // Generate the content into the backing array.\n@@ -364,10 +365,9 @@ pub fn write_content<'a>(\n                                i, bcx.val_to_string(lleltptr));\n                         bcx = expr::trans_into(bcx, &**element,\n                                                SaveIn(lleltptr));\n-                        fcx.schedule_drop_mem(\n-                            cleanup::CustomScope(temp_scope),\n-                            lleltptr,\n-                            vt.unit_ty);\n+                        let scope = cleanup::CustomScope(temp_scope);\n+                        fcx.schedule_lifetime_end(scope, lleltptr);\n+                        fcx.schedule_drop_mem(scope, lleltptr, vt.unit_ty);\n                     }\n                     fcx.pop_custom_cleanup_scope(temp_scope);\n                 }"}]}