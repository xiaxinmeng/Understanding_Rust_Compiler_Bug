{"sha": "66a812f3e133400f269f2e2beea2c67c8ba7d181", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YTgxMmYzZTEzMzQwMGYyNjlmMmUyYmVlYTJjNjdjOGJhN2QxODE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-01T16:48:27Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-01T16:48:27Z"}, "message": "Merge pull request #16 from oli-obk/logs\n\nuse the `log` crate + `env_logger`", "tree": {"sha": "aedfce1e2d7e7a1316e0162d39b3bfbe26b5d311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedfce1e2d7e7a1316e0162d39b3bfbe26b5d311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a812f3e133400f269f2e2beea2c67c8ba7d181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a812f3e133400f269f2e2beea2c67c8ba7d181", "html_url": "https://github.com/rust-lang/rust/commit/66a812f3e133400f269f2e2beea2c67c8ba7d181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a812f3e133400f269f2e2beea2c67c8ba7d181/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8151703b2bebf1a7b02bb76eb08869392c00851", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8151703b2bebf1a7b02bb76eb08869392c00851", "html_url": "https://github.com/rust-lang/rust/commit/c8151703b2bebf1a7b02bb76eb08869392c00851"}, {"sha": "fee3a2c1a7b631f0b2f208450497a0f0e984a775", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee3a2c1a7b631f0b2f208450497a0f0e984a775", "html_url": "https://github.com/rust-lang/rust/commit/fee3a2c1a7b631f0b2f208450497a0f0e984a775"}], "stats": {"total": 214, "additions": 180, "deletions": 34}, "files": [{"sha": "c5518b1238a270047b0d2e0e7be9d338b4988bd2", "filename": "Cargo.lock", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -3,7 +3,18 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -13,14 +24,107 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.1.1\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"env_logger\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"kernel32-sys\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"winapi 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"lazy_static\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"log_settings\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"lazy_static 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"0.1.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"0.1.71\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"thread_local 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"thread-id\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"thread_local\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"utf8-ranges\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.2.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"winapi-build\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+"}, {"sha": "5a8211230fa86d8b003a365b648d100f90653285", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -16,6 +16,9 @@ test = false\n \n [dependencies]\n byteorder = \"0.4.2\"\n+env_logger = \"0.3.3\"\n+log = \"0.3.6\"\n+log_settings = \"0.1.1\"\n \n [dev-dependencies]\n compiletest_rs = \"0.1.1\""}, {"sha": "34a8c1b2be8793830c99981a319a9e87556e25ec", "filename": "src/bin/miri.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -5,6 +5,9 @@ extern crate getopts;\n extern crate miri;\n extern crate rustc;\n extern crate rustc_driver;\n+extern crate env_logger;\n+extern crate log_settings;\n+extern crate log;\n \n use miri::interpreter;\n use rustc::session::Session;\n@@ -31,6 +34,32 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n #[miri_run]\n fn main() {\n+    init_logger();\n     let args: Vec<String> = std::env::args().collect();\n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n }\n+\n+#[miri_run]\n+fn init_logger() {\n+    const NSPACES: usize = 40;\n+    let format = |record: &log::LogRecord| {\n+        // prepend spaces to indent the final string\n+        let indentation = log_settings::settings().indentation;\n+        format!(\"{lvl}:{module}{depth:2}{indent:<indentation$} {text}\",\n+            lvl = record.level(),\n+            module = record.location().module_path(),\n+            depth = indentation / NSPACES,\n+            indentation = indentation % NSPACES,\n+            indent = \"\",\n+            text = record.args())\n+    };\n+\n+    let mut builder = env_logger::LogBuilder::new();\n+    builder.format(format).filter(None, log::LogLevelFilter::Info);\n+\n+    if std::env::var(\"MIRI_LOG\").is_ok() {\n+        builder.parse(&std::env::var(\"MIRI_LOG\").unwrap());\n+    }\n+\n+    builder.init().unwrap();\n+}"}, {"sha": "0f9cc899193d6d3f944680db764c6ca0c94180ee", "filename": "src/interpreter.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -20,8 +20,6 @@ use error::{EvalError, EvalResult};\n use memory::{Memory, Pointer};\n use primval::{self, PrimVal};\n \n-const TRACE_EXECUTION: bool = true;\n-\n struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -168,32 +166,24 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         r\n     }\n \n-    fn log<F>(&self, extra_indent: usize, f: F) where F: FnOnce() {\n-        let indent = self.stack.len() + extra_indent;\n-        if !TRACE_EXECUTION { return; }\n-        for _ in 0..indent { print!(\"    \"); }\n-        f();\n-        println!(\"\");\n-    }\n-\n     fn run(&mut self) -> EvalResult<()> {\n         'outer: while !self.stack.is_empty() {\n             let mut current_block = self.frame().next_block;\n \n             loop {\n-                self.log(0, || print!(\"// {:?}\", current_block));\n+                trace!(\"// {:?}\", current_block);\n                 let current_mir = self.mir().clone(); // Cloning a reference.\n                 let block_data = current_mir.basic_block_data(current_block);\n \n                 for stmt in &block_data.statements {\n-                    self.log(0, || print!(\"{:?}\", stmt));\n+                    trace!(\"{:?}\", stmt);\n                     let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n                     let result = self.eval_assignment(lvalue, rvalue);\n                     self.maybe_report(stmt.span, result)?;\n                 }\n \n                 let terminator = block_data.terminator();\n-                self.log(0, || print!(\"{:?}\", terminator.kind));\n+                trace!(\"{:?}\", terminator.kind);\n \n                 let result = self.eval_terminator(terminator);\n                 match self.maybe_report(terminator.span, result)? {\n@@ -245,6 +235,8 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         let num_args = mir.arg_decls.len();\n         let num_vars = mir.var_decls.len();\n \n+        ::log_settings::settings().indentation += 1;\n+\n         self.stack.push(Frame {\n             mir: mir.clone(),\n             next_block: mir::START_BLOCK,\n@@ -256,6 +248,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     }\n \n     fn pop_stack_frame(&mut self) {\n+        ::log_settings::settings().indentation -= 1;\n         let _frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         // TODO(solson): Deallocate local variables.\n         self.substs_stack.pop();\n@@ -419,10 +412,10 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n     fn drop(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<()> {\n         if !self.type_needs_drop(ty) {\n-            self.log(1, || print!(\"no need to drop {:?}\", ty));\n+            debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n-        self.log(1, || print!(\"need to drop {:?}\", ty));\n+        trace!(\"-need to drop {:?}\", ty);\n \n         // TODO(solson): Call user-defined Drop::drop impls.\n \n@@ -431,7 +424,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 match self.memory.read_ptr(ptr) {\n                     Ok(contents_ptr) => {\n                         self.drop(contents_ptr, contents_ty)?;\n-                        self.log(1, || print!(\"deallocating box\"));\n+                        trace!(\"-deallocating box\");\n                         self.memory.deallocate(contents_ptr)?;\n                     }\n                     Err(EvalError::ReadBytesAsPointer) => {\n@@ -1421,32 +1414,29 @@ pub fn interpret_start_points<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir_map: &MirMap<'tcx>,\n ) {\n+    let initial_indentation = ::log_settings::settings().indentation;\n     for (&id, mir) in &mir_map.map {\n         for attr in tcx.map.attrs(id) {\n             use syntax::attr::AttrMetaMethods;\n             if attr.check_name(\"miri_run\") {\n                 let item = tcx.map.expect_item(id);\n \n-                if TRACE_EXECUTION {\n-                    println!(\"Interpreting: {}\", item.name);\n-                }\n+                ::log_settings::settings().indentation = initial_indentation;\n+\n+                debug!(\"Interpreting: {}\", item.name);\n \n                 let mut gecx = GlobalEvalContext::new(tcx, mir_map);\n                 let mut fecx = FnEvalContext::new(&mut gecx);\n                 match fecx.call_nested(mir) {\n-                    Ok(Some(return_ptr)) => if TRACE_EXECUTION {\n+                    Ok(Some(return_ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n                         fecx.memory.dump(return_ptr.alloc_id);\n                     },\n-                    Ok(None) => println!(\"(diverging function returned)\"),\n+                    Ok(None) => warn!(\"diverging function returned\"),\n                     Err(_e) => {\n                         // TODO(solson): Detect whether the error was already reported or not.\n                         // tcx.sess.err(&e.to_string());\n                     }\n                 }\n-\n-                if TRACE_EXECUTION {\n-                    println!(\"\");\n-                }\n             }\n         }\n     }"}, {"sha": "80d89c164ac5f97e6b32b93217fee732fef5aa54", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -12,6 +12,8 @@\n #[macro_use] extern crate rustc;\n extern crate rustc_mir;\n extern crate syntax;\n+#[macro_use] extern crate log;\n+extern crate log_settings;\n \n // From crates.io.\n extern crate byteorder;"}, {"sha": "f0fb4113f1f76debdd50bb533ec848af17ea4b69", "filename": "tests/run-fail/inception.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/66a812f3e133400f269f2e2beea2c67c8ba7d181/tests%2Frun-fail%2Finception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a812f3e133400f269f2e2beea2c67c8ba7d181/tests%2Frun-fail%2Finception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-fail%2Finception.rs?ref=66a812f3e133400f269f2e2beea2c67c8ba7d181", "patch": "@@ -9,14 +9,32 @@ fn run_miri(file: &str, sysroot: &str) -> Output {\n     let libpath = libpath.to_str().unwrap();\n     let libpath2 = path.join(\"target\").join(\"debug\").join(\"deps\");\n     let libpath2 = libpath2.to_str().unwrap();\n+    let mut args = vec![\n+        \"run\".to_string(), \"--\".to_string(),\n+        \"--sysroot\".to_string(), sysroot.to_string(),\n+        \"-L\".to_string(), libpath.to_string(),\n+        \"-L\".to_string(), libpath2.to_string(),\n+        file.to_string()\n+    ];\n+    for file in std::fs::read_dir(\"target/debug/deps\").unwrap() {\n+        let file = file.unwrap();\n+        if file.file_type().unwrap().is_file() {\n+            let path = file.path();\n+            if let Some(ext) = path.extension() {\n+                if ext == \"rlib\" {\n+                    let name = path.file_stem().unwrap().to_str().unwrap();\n+                    if let Some(dash) = name.rfind('-') {\n+                        if name.starts_with(\"lib\") {\n+                            args.push(\"--extern\".to_string());\n+                            args.push(format!(\"{}={}\", &name[3..dash], path.to_str().unwrap()));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n     Command::new(\"cargo\")\n-        .args(&[\n-            \"run\", \"--\",\n-            \"--sysroot\", sysroot,\n-            \"-L\", libpath,\n-            \"-L\", libpath2,\n-            file\n-        ])\n+        .args(&args)\n         .output()\n         .unwrap_or_else(|e| panic!(\"failed to execute process: {}\", e))\n }"}]}