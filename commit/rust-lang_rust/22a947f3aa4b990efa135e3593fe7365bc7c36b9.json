{"sha": "22a947f3aa4b990efa135e3593fe7365bc7c36b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTk0N2YzYWE0Yjk5MGVmYTEzNWUzNTkzZmU3MzY1YmM3YzM2Yjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-22T10:02:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-01-28T09:48:38Z"}, "message": "add macro for creating uninitialized array", "tree": {"sha": "59e3051f236646814c60d51f5bcc0940f2b3e9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e3051f236646814c60d51f5bcc0940f2b3e9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a947f3aa4b990efa135e3593fe7365bc7c36b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a947f3aa4b990efa135e3593fe7365bc7c36b9", "html_url": "https://github.com/rust-lang/rust/commit/22a947f3aa4b990efa135e3593fe7365bc7c36b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a947f3aa4b990efa135e3593fe7365bc7c36b9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630aaa4e801393c55c8327f642aec2349adfaee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/630aaa4e801393c55c8327f642aec2349adfaee3", "html_url": "https://github.com/rust-lang/rust/commit/630aaa4e801393c55c8327f642aec2349adfaee3"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "25810d680fa4b8de89e060b13213285b86b56c7b", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=22a947f3aa4b990efa135e3593fe7365bc7c36b9", "patch": "@@ -106,11 +106,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            // Creating a `[MaybeUninit; N]` array by first creating a\n-            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n-            // array does not require initialization.\n-            keys: MaybeUninit::uninitialized().into_inner(),\n-            vals: MaybeUninit::uninitialized().into_inner(),\n+            keys: uninitialized_array![_; CAPACITY],\n+            vals: uninitialized_array![_; CAPACITY],\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninitialized(),\n             len: 0\n@@ -162,10 +159,7 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            // Creating a `[MaybeUninit; N]` array by first creating a\n-            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n-            // array does not require initialization.\n-            edges: MaybeUninit::uninitialized().into_inner(),\n+            edges: uninitialized_array![_; 2*B],\n         }\n     }\n }"}, {"sha": "5283c6d7ef347944f1e0b3618092701eff90d367", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=22a947f3aa4b990efa135e3593fe7365bc7c36b9", "patch": "@@ -51,12 +51,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        // Creating a `[MaybeUninit; N]` array by first creating a\n-        // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n-        // array does not require initialization.\n-        let mut buf: [MaybeUninit<u8>; 128] = unsafe {\n-            MaybeUninit::uninitialized().into_inner()\n-        };\n+        let mut buf = uninitialized_array![u8; 128];\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -203,12 +198,7 @@ macro_rules! impl_Display {\n                 // convert the negative num to positive by summing 1 to it's 2 complement\n                 (!self.$conv_fn()).wrapping_add(1)\n             };\n-            // Creating a `[MaybeUninit; N]` array by first creating a\n-            // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n-            // array does not require initialization.\n-            let mut buf: [MaybeUninit<u8>; 39] = unsafe {\n-                MaybeUninit::uninitialized().into_inner()\n-            };\n+            let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_mut_ptr(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();"}, {"sha": "1295acb44a543b501ef7ffd17fcfdb95f64fb302", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=22a947f3aa4b990efa135e3593fe7365bc7c36b9", "patch": "@@ -123,6 +123,7 @@\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n+#![feature(maybe_uninit)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "12b7adb8a9d268d828478153408ea6bcbe8f9da7", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=22a947f3aa4b990efa135e3593fe7365bc7c36b9", "patch": "@@ -547,6 +547,23 @@ macro_rules! unimplemented {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n }\n \n+/// A macro to create an array of [`MaybeUninit`]\n+///\n+/// This macro constructs and uninitialized array of the type `[MaybeUninit<K>; N]`.\n+///\n+/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+#[macro_export]\n+#[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+macro_rules! uninitialized_array {\n+    // This `into_inner` is safe because an array of `MaybeUninit` does not\n+    // require initialization.\n+    // FIXME(#49147): Could be replaced by an array initializer, once those can\n+    // be any const expression.\n+    ($t:ty; $size:expr) => (unsafe {\n+        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_inner()\n+    });\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "2ff67a4934f74b4494db38aca51b53f06be593e0", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a947f3aa4b990efa135e3593fe7365bc7c36b9/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=22a947f3aa4b990efa135e3593fe7365bc7c36b9", "patch": "@@ -216,21 +216,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    // Creating a `[MaybeUninit; N]` array by first creating a\n-    // `MaybeUninit<[MaybeUninit; N]>`; the `into_inner` is safe because the inner\n-    // array does not require initialization.\n-    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = unsafe {\n-        MaybeUninit::uninitialized().into_inner()\n-    };\n+    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = unsafe {\n-        MaybeUninit::uninitialized().into_inner()\n-    };\n+    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient."}]}