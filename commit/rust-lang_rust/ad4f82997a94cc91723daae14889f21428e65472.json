{"sha": "ad4f82997a94cc91723daae14889f21428e65472", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNGY4Mjk5N2E5NGNjOTE3MjNkYWFlMTQ4ODlmMjE0MjhlNjU0NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-16T08:45:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-16T08:45:10Z"}, "message": "Auto merge of #6119 - rsulli55:find_is_some_on_strs, r=flip1995\n\nAdd a case to `lint_search_is_some` to handle searching strings\n\nFixes: #6010\n\nThis adds a lint which recommends using `contains()` instead of `find()` followed by `is_some()` on strings as suggested in #6010.\n\nThis was added as an additional case to\nhttps://github.com/rust-lang/rust-clippy/blob/5af88e3c2d8cc4fb74a0e455381669930ee3a31a/clippy_lints/src/methods/mod.rs#L3037\n\nI would really appreciate any comments/suggestions for my code!\n\nchangelog: Added case to `lint_search_is_some` to handle searching strings", "tree": {"sha": "a706cecbec048afc9ba7ca3976d88199e989f693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a706cecbec048afc9ba7ca3976d88199e989f693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad4f82997a94cc91723daae14889f21428e65472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f82997a94cc91723daae14889f21428e65472", "html_url": "https://github.com/rust-lang/rust/commit/ad4f82997a94cc91723daae14889f21428e65472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad4f82997a94cc91723daae14889f21428e65472/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df3bb5881d27cd337011a714c74ff07fca59103c", "url": "https://api.github.com/repos/rust-lang/rust/commits/df3bb5881d27cd337011a714c74ff07fca59103c", "html_url": "https://github.com/rust-lang/rust/commit/df3bb5881d27cd337011a714c74ff07fca59103c"}, {"sha": "5c1c50ee174f20574ddbf67b43ab0e9bb5b2c60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1c50ee174f20574ddbf67b43ab0e9bb5b2c60d", "html_url": "https://github.com/rust-lang/rust/commit/5c1c50ee174f20574ddbf67b43ab0e9bb5b2c60d"}], "stats": {"total": 401, "additions": 280, "deletions": 121}, "files": [{"sha": "5c1c1594f7dc963ca809e59596b48a580fa9cce3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -515,11 +515,11 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for an iterator search (such as `find()`,\n+    /// **What it does:** Checks for an iterator or string search (such as `find()`,\n     /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.any(_)`.\n+    /// `_.any(_)` or `_.contains(_)`.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -535,7 +535,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n-    \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\"\n+    \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\"\n }\n \n declare_clippy_lint! {\n@@ -3041,6 +3041,7 @@ fn lint_flat_map_identity<'tcx>(\n }\n \n /// lint searching an Iterator followed by `is_some()`\n+/// or calling `find()` on a string followed by `is_some()`\n fn lint_search_is_some<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n@@ -3052,10 +3053,10 @@ fn lint_search_is_some<'tcx>(\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with {}. This is more succinctly \\\n-             expressed by calling `any()`.\",\n+            \"called `is_some()` after searching an `Iterator` with `{}`\",\n             search_method\n         );\n+        let hint = \"this is more succinctly expressed by calling `any()`\";\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -3083,15 +3084,44 @@ fn lint_search_is_some<'tcx>(\n                 SEARCH_IS_SOME,\n                 method_span.with_hi(expr.span.hi()),\n                 &msg,\n-                \"try this\",\n+                \"use `any()` instead\",\n                 format!(\n                     \"any({})\",\n                     any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n-            span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);\n+            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, hint);\n+        }\n+    }\n+    // lint if `find()` is called by `String` or `&str`\n+    else if search_method == \"find\" {\n+        let is_string_or_str_slice = |e| {\n+            let self_ty = cx.typeck_results().expr_ty(e).peel_refs();\n+            if is_type_diagnostic_item(cx, self_ty, sym!(string_type)) {\n+                true\n+            } else {\n+                *self_ty.kind() == ty::Str\n+            }\n+        };\n+        if_chain! {\n+            if is_string_or_str_slice(&search_args[0]);\n+            if is_string_or_str_slice(&search_args[1]);\n+            then {\n+                let msg = \"called `is_some()` after calling `find()` on a string\";\n+                let mut applicability = Applicability::MachineApplicable;\n+                let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                span_lint_and_sugg(\n+                    cx,\n+                    SEARCH_IS_SOME,\n+                    method_span.with_hi(expr.span.hi()),\n+                    msg,\n+                    \"use `contains()` instead\",\n+                    format!(\"contains({})\", find_arg),\n+                    applicability,\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "69acd3d9b8bc5cefdcfac28a02a2531e4b367dba", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -2121,7 +2121,7 @@ vec![\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\",\n-        desc: \"using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\",\n+        desc: \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\",\n         deprecation: None,\n         module: \"methods\",\n     },"}, {"sha": "513d930e0568758783426279201dfa1bbfe9d8b7", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -133,50 +133,6 @@ fn filter_next() {\n     let _ = foo.filter().next();\n }\n \n-/// Checks implementation of `SEARCH_IS_SOME` lint.\n-#[rustfmt::skip]\n-fn search_is_some() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n-\n-    // Check `find().is_some()`, single-line case.\n-    let _ = v.iter().find(|&x| *x < 0).is_some();\n-    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_some();\n-    let _ = v.iter().find(|x| **x == 0).is_some();\n-\n-    // Check `find().is_some()`, multi-line case.\n-    let _ = v.iter().find(|&x| {\n-                              *x < 0\n-                          }\n-                   ).is_some();\n-\n-    // Check `position().is_some()`, single-line case.\n-    let _ = v.iter().position(|&x| x < 0).is_some();\n-\n-    // Check `position().is_some()`, multi-line case.\n-    let _ = v.iter().position(|&x| {\n-                                  x < 0\n-                              }\n-                   ).is_some();\n-\n-    // Check `rposition().is_some()`, single-line case.\n-    let _ = v.iter().rposition(|&x| x < 0).is_some();\n-\n-    // Check `rposition().is_some()`, multi-line case.\n-    let _ = v.iter().rposition(|&x| {\n-                                   x < 0\n-                               }\n-                   ).is_some();\n-\n-    // Check that we don't lint if the caller is not an `Iterator`.\n-    let foo = IteratorFalsePositives { foo: 0 };\n-    let _ = foo.find().is_some();\n-    let _ = foo.position().is_some();\n-    let _ = foo.rposition().is_some();\n-}\n-\n fn main() {\n     filter_next();\n-    search_is_some();\n }"}, {"sha": "33aba630a5304e22de80e7badd67c1b460c32653", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -20,73 +20,5 @@ LL | |                    ).next();\n    |\n    = note: `-D clippy::filter-next` implied by `-D warnings`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:143:22\n-   |\n-LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n-   |\n-   = note: `-D clippy::search-is-some` implied by `-D warnings`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:144:20\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:145:20\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:146:22\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:149:13\n-   |\n-LL |       let _ = v.iter().find(|&x| {\n-   |  _____________^\n-LL | |                               *x < 0\n-LL | |                           }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:155:22\n-   |\n-LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:158:13\n-   |\n-LL |       let _ = v.iter().position(|&x| {\n-   |  _____________^\n-LL | |                                   x < 0\n-LL | |                               }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:164:22\n-   |\n-LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:167:13\n-   |\n-LL |       let _ = v.iter().rposition(|&x| {\n-   |  _____________^\n-LL | |                                    x < 0\n-LL | |                                }\n-LL | |                    ).is_some();\n-   | |______________________________^\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "f0dc3b3d06bbc7f4f30d4c32e51e0d9dd2a968af", "filename": "tests/ui/search_is_some.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -0,0 +1,38 @@\n+// aux-build:option_helpers.rs\n+extern crate option_helpers;\n+use option_helpers::IteratorFalsePositives;\n+\n+#[warn(clippy::search_is_some)]\n+#[rustfmt::skip]\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+\n+    // Check `find().is_some()`, multi-line case.\n+    let _ = v.iter().find(|&x| {\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // Check `position().is_some()`, multi-line case.\n+    let _ = v.iter().position(|&x| {\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // Check `rposition().is_some()`, multi-line case.\n+    let _ = v.iter().rposition(|&x| {\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // Check that we don't lint if the caller is not an `Iterator` or string\n+    let falsepos = IteratorFalsePositives { foo: 0 };\n+    let _ = falsepos.find().is_some();\n+    let _ = falsepos.position().is_some();\n+    let _ = falsepos.rposition().is_some();\n+    // check that we don't lint if `find()` is called with\n+    // `Pattern` that is not a string\n+    let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n+}"}, {"sha": "c601f568c609bccf4cf3d7b9c60ac5f3823da45a", "filename": "tests/ui/search_is_some.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -0,0 +1,39 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:13:13\n+   |\n+LL |       let _ = v.iter().find(|&x| {\n+   |  _____________^\n+LL | |                               *x < 0\n+LL | |                           }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: called `is_some()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some.rs:19:13\n+   |\n+LL |       let _ = v.iter().position(|&x| {\n+   |  _____________^\n+LL | |                                   x < 0\n+LL | |                               }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: called `is_some()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some.rs:25:13\n+   |\n+LL |       let _ = v.iter().rposition(|&x| {\n+   |  _____________^\n+LL | |                                    x < 0\n+LL | |                                }\n+LL | |                    ).is_some();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dc3f290e56246d14890ae48db869f6de311c4b1b", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().any(|x| *x < 0);\n+    let _ = (0..1).any(|x| **y == x); // one dereference less\n+    let _ = (0..1).any(|x| x == 0);\n+    let _ = v.iter().any(|x| *x == 0);\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".contains(\"world\");\n+    let _ = \"hello world\".contains(&s2);\n+    let _ = \"hello world\".contains(&s2[2..]);\n+    // caller of `find()` is a `String`\n+    let _ = s1.contains(\"world\");\n+    let _ = s1.contains(&s2);\n+    let _ = s1.contains(&s2[2..]);\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].contains(\"world\");\n+    let _ = s1[2..].contains(&s2);\n+    let _ = s1[2..].contains(&s2[2..]);\n+}"}, {"sha": "146cf5adf1b0f97fc0e7d6536416c0192d06733f", "filename": "tests/ui/search_is_some_fixable.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".find(\"world\").is_some();\n+    let _ = \"hello world\".find(&s2).is_some();\n+    let _ = \"hello world\".find(&s2[2..]).is_some();\n+    // caller of `find()` is a `String`\n+    let _ = s1.find(\"world\").is_some();\n+    let _ = s1.find(&s2).is_some();\n+    let _ = s1.find(&s2[2..]).is_some();\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].find(\"world\").is_some();\n+    let _ = s1[2..].find(&s2).is_some();\n+    let _ = s1[2..].find(&s2[2..]).is_some();\n+}"}, {"sha": "23c1d9a901b97da68cdbd6636f55a73c99ff069e", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad4f82997a94cc91723daae14889f21428e65472/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=ad4f82997a94cc91723daae14889f21428e65472", "patch": "@@ -0,0 +1,94 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:10:22\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:11:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:12:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:13:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some_fixable.rs:16:22\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some_fixable.rs:19:22\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:24:27\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:25:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:26:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:28:16\n+   |\n+LL |     let _ = s1.find(\"world\").is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:29:16\n+   |\n+LL |     let _ = s1.find(&s2).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:30:16\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:32:21\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:33:21\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:34:21\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: aborting due to 15 previous errors\n+"}]}