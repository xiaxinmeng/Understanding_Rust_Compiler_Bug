{"sha": "d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "node_id": "C_kwDOAAsO6NoAKGQ2ZGRlZTYzN2I2MmM2YzRjZGVlOTBkOThjM2EyMWExMzI1YThlODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-01T20:35:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-01T20:35:53Z"}, "message": "Auto merge of #111066 - matthiaskrgr:rollup-4k6rj23, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109540 (std docs: edit `PathBuf::set_file_name` example)\n - #110093 (Add 64-bit `time_t` support on 32-bit glibc Linux to `set_times`)\n - #110987 (update wasi_clock_time_api ref.)\n - #111038 (Leave promoteds untainted by errors when borrowck fails)\n - #111042 (Add `#[no_coverage]` to the test harness's `fn main`)\n - #111057 (Make sure the implementation of TcpStream::as_raw_fd is fully inlined)\n - #111065 (Explicitly document how Send and Sync relate to references)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4be608ba309b622a1f66a912b261179c1595a291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be608ba309b622a1f66a912b261179c1595a291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "html_url": "https://github.com/rust-lang/rust/commit/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbba594575ce75b1b57ccb1e4223b9909a28b1b8", "html_url": "https://github.com/rust-lang/rust/commit/dbba594575ce75b1b57ccb1e4223b9909a28b1b8"}, {"sha": "15eebac9d962fa7510f4729f85e57c46a39c3ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/15eebac9d962fa7510f4729f85e57c46a39c3ea1", "html_url": "https://github.com/rust-lang/rust/commit/15eebac9d962fa7510f4729f85e57c46a39c3ea1"}], "stats": {"total": 196, "additions": 180, "deletions": 16}, "files": [{"sha": "9bc1e27b4ec74032c514114f09b375f6eb571f14", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -232,7 +232,7 @@ fn generate_test_harness(\n     let expn_id = ext_cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,\n         AstPass::TestHarness,\n-        &[sym::test, sym::rustc_attrs],\n+        &[sym::test, sym::rustc_attrs, sym::no_coverage],\n         None,\n     );\n     let def_site = DUMMY_SP.with_def_site_ctxt(expn_id.to_expn_id());\n@@ -313,6 +313,8 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     // #[rustc_main]\n     let main_attr = ecx.attr_word(sym::rustc_main, sp);\n+    // #[no_coverage]\n+    let no_coverage_attr = ecx.attr_word(sym::no_coverage, sp);\n \n     // pub fn main() { ... }\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(ThinVec::new()));\n@@ -342,7 +344,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n \n     let main = P(ast::Item {\n         ident: main_id,\n-        attrs: thin_vec![main_attr],\n+        attrs: thin_vec![main_attr, no_coverage_attr],\n         id: ast::DUMMY_NODE_ID,\n         kind: main,\n         vis: ast::Visibility { span: sp, kind: ast::VisibilityKind::Public, tokens: None },"}, {"sha": "8d9a22ea30ddfdcfe7f72a96f542fc2ad139f27c", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -616,13 +616,10 @@ fn promoted_mir(tcx: TyCtxt<'_>, def: LocalDefId) -> &IndexVec<Promoted, Body<'_\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    let tainted_by_errors = tcx.mir_borrowck(def).tainted_by_errors;\n+    tcx.ensure_with_value().mir_borrowck(def);\n     let mut promoted = tcx.mir_promoted(def).1.steal();\n \n     for body in &mut promoted {\n-        if let Some(error_reported) = tainted_by_errors {\n-            body.tainted_by_errors = Some(error_reported);\n-        }\n         run_analysis_to_runtime_passes(tcx, body);\n     }\n "}, {"sha": "82e4c6489745d803ae6217666b28693e55014ce8", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -24,7 +24,7 @@ use crate::hash::Hasher;\n /// operations. Its cousin [`sync::Arc`][arc] does use atomic operations (incurring\n /// some overhead) and thus is `Send`.\n ///\n-/// See [the Nomicon](../../nomicon/send-and-sync.html) for more details.\n+/// See [the Nomicon](../../nomicon/send-and-sync.html) and the [`Sync`] trait for more details.\n ///\n /// [`Rc`]: ../../std/rc/struct.Rc.html\n /// [arc]: ../../std/sync/struct.Arc.html\n@@ -426,6 +426,11 @@ pub macro Copy($item:item) {\n /// becomes read-only, as if it were a `& &T`. Hence there is no risk\n /// of a data race.\n ///\n+/// A shorter overview of how [`Sync`] and [`Send`] relate to referencing:\n+/// * `&T` is [`Send`] if and only if `T` is [`Sync`]\n+/// * `&mut T` is [`Send`] if and only if `T` is [`Send`]\n+/// * `&T` and `&mut T` are [`Sync`] if and only if `T` is [`Sync`]\n+///\n /// Types that are not `Sync` are those that have \"interior\n /// mutability\" in a non-thread-safe form, such as [`Cell`][cell]\n /// and [`RefCell`][refcell]. These types allow for mutation of"}, {"sha": "6640c7fb1621420de49fad602957c66f5cc9cdad", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -709,6 +709,7 @@ impl File {\n // `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n \n impl AsInner<fs_imp::File> for File {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::File {\n         &self.inner\n     }\n@@ -1087,12 +1088,14 @@ impl OpenOptions {\n }\n \n impl AsInner<fs_imp::OpenOptions> for OpenOptions {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::OpenOptions {\n         &self.0\n     }\n }\n \n impl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut fs_imp::OpenOptions {\n         &mut self.0\n     }\n@@ -1352,6 +1355,7 @@ impl fmt::Debug for Metadata {\n }\n \n impl AsInner<fs_imp::FileAttr> for Metadata {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FileAttr {\n         &self.0\n     }\n@@ -1604,6 +1608,7 @@ impl FileType {\n }\n \n impl AsInner<fs_imp::FileType> for FileType {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FileType {\n         &self.0\n     }\n@@ -1616,6 +1621,7 @@ impl FromInner<fs_imp::FilePermissions> for Permissions {\n }\n \n impl AsInner<fs_imp::FilePermissions> for Permissions {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::FilePermissions {\n         &self.0\n     }\n@@ -1770,6 +1776,7 @@ impl fmt::Debug for DirEntry {\n }\n \n impl AsInner<fs_imp::DirEntry> for DirEntry {\n+    #[inline]\n     fn as_inner(&self) -> &fs_imp::DirEntry {\n         &self.0\n     }\n@@ -2510,6 +2517,7 @@ impl DirBuilder {\n }\n \n impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut fs_imp::DirBuilder {\n         &mut self.inner\n     }"}, {"sha": "541e95d229b62528d9db7650aa7b991c027d1c60", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -691,6 +691,7 @@ impl Write for &TcpStream {\n }\n \n impl AsInner<net_imp::TcpStream> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::TcpStream {\n         &self.0\n     }\n@@ -1033,6 +1034,7 @@ impl Iterator for IntoIncoming {\n impl FusedIterator for IntoIncoming {}\n \n impl AsInner<net_imp::TcpListener> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::TcpListener {\n         &self.0\n     }"}, {"sha": "9628bcc51083d16aa4a709ebfaceac1cfcf649ec", "filename": "library/std/src/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fudp.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -788,6 +788,7 @@ impl UdpSocket {\n // `AsRawSocket`/`IntoRawSocket`/`FromRawSocket` on Windows.\n \n impl AsInner<net_imp::UdpSocket> for UdpSocket {\n+    #[inline]\n     fn as_inner(&self) -> &net_imp::UdpSocket {\n         &self.0\n     }"}, {"sha": "2b3ff76d7a4a795523b126a8b9cb6d745e937ba3", "filename": "library/std/src/os/linux/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fprocess.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -52,6 +52,7 @@ pub struct PidFd {\n }\n \n impl AsInner<FileDesc> for PidFd {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.inner\n     }\n@@ -70,6 +71,7 @@ impl IntoInner<FileDesc> for PidFd {\n }\n \n impl AsRawFd for PidFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().as_raw_fd()\n     }"}, {"sha": "198996c5f707f26f4cc360069d32ff713d217e86", "filename": "library/std/src/path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -1395,11 +1395,16 @@ impl PathBuf {\n     ///\n     /// let mut buf = PathBuf::from(\"/\");\n     /// assert!(buf.file_name() == None);\n-    /// buf.set_file_name(\"bar\");\n-    /// assert!(buf == PathBuf::from(\"/bar\"));\n+    ///\n+    /// buf.set_file_name(\"foo.txt\");\n+    /// assert!(buf == PathBuf::from(\"/foo.txt\"));\n     /// assert!(buf.file_name().is_some());\n-    /// buf.set_file_name(\"baz.txt\");\n-    /// assert!(buf == PathBuf::from(\"/baz.txt\"));\n+    ///\n+    /// buf.set_file_name(\"bar.txt\");\n+    /// assert!(buf == PathBuf::from(\"/bar.txt\"));\n+    ///\n+    /// buf.set_file_name(\"baz\");\n+    /// assert!(buf == PathBuf::from(\"/baz\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_file_name<S: AsRef<OsStr>>(&mut self, file_name: S) {\n@@ -2562,7 +2567,8 @@ impl Path {\n     /// ```\n     /// use std::path::{Path, PathBuf};\n     ///\n-    /// let path = Path::new(\"/tmp/foo.txt\");\n+    /// let path = Path::new(\"/tmp/foo.png\");\n+    /// assert_eq!(path.with_file_name(\"bar\"), PathBuf::from(\"/tmp/bar\"));\n     /// assert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n     ///\n     /// let path = Path::new(\"/tmp\");"}, {"sha": "bf22c2d46c9e03c3db408fe043d27ce1f44131de", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -211,6 +211,7 @@ pub struct Child {\n impl crate::sealed::Sealed for Child {}\n \n impl AsInner<imp::Process> for Child {\n+    #[inline]\n     fn as_inner(&self) -> &imp::Process {\n         &self.handle\n     }\n@@ -304,6 +305,7 @@ impl Write for &ChildStdin {\n }\n \n impl AsInner<AnonPipe> for ChildStdin {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -373,6 +375,7 @@ impl Read for ChildStdout {\n }\n \n impl AsInner<AnonPipe> for ChildStdout {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -438,6 +441,7 @@ impl Read for ChildStderr {\n }\n \n impl AsInner<AnonPipe> for ChildStderr {\n+    #[inline]\n     fn as_inner(&self) -> &AnonPipe {\n         &self.inner\n     }\n@@ -1107,12 +1111,14 @@ impl fmt::Debug for Command {\n }\n \n impl AsInner<imp::Command> for Command {\n+    #[inline]\n     fn as_inner(&self) -> &imp::Command {\n         &self.inner\n     }\n }\n \n impl AsInnerMut<imp::Command> for Command {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut imp::Command {\n         &mut self.inner\n     }\n@@ -1605,6 +1611,7 @@ impl ExitStatus {\n }\n \n impl AsInner<imp::ExitStatus> for ExitStatus {\n+    #[inline]\n     fn as_inner(&self) -> &imp::ExitStatus {\n         &self.0\n     }\n@@ -1884,6 +1891,7 @@ impl From<u8> for ExitCode {\n }\n \n impl AsInner<imp::ExitCode> for ExitCode {\n+    #[inline]\n     fn as_inner(&self) -> &imp::ExitCode {\n         &self.0\n     }"}, {"sha": "ccde05aa1d7db6026376ca8b4a0d281b38583283", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -75,6 +75,7 @@ impl FromRawFd for FileDesc {\n }\n \n impl AsInner<OwnedFd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.fd\n     }"}, {"sha": "4bb735668d24c0dfa4a24a69fd4afa3de6001503", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -367,12 +367,14 @@ impl DirBuilder {\n }\n \n impl AsInner<FileDesc> for File {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n }\n \n impl AsInnerMut<FileDesc> for File {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut FileDesc {\n         &mut self.0\n     }\n@@ -397,6 +399,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "8c2d489d6a36258387693c281ce5bcb6ec763895", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -340,6 +340,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n@@ -364,6 +365,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "b3686d0e28328d8fc41c3e50011db5ae26724ebe", "filename": "library/std/src/sys/sgx/fd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffd.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -62,6 +62,7 @@ impl FileDesc {\n }\n \n impl AsInner<Fd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &Fd {\n         &self.fd\n     }"}, {"sha": "03620a08f2c03ee56a8cde86624cf626ff80ccf6", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -24,6 +24,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.inner\n     }\n@@ -220,6 +221,7 @@ impl TcpStream {\n }\n \n impl AsInner<Socket> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -304,6 +306,7 @@ impl TcpListener {\n }\n \n impl AsInner<Socket> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "0bd2bc3b961998557a422937c816e922471e1fb3", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -112,6 +112,7 @@ impl FileDesc {\n }\n \n impl AsInner<c_int> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &c_int {\n         &self.fd\n     }\n@@ -462,6 +463,7 @@ impl Socket {\n }\n \n impl AsInner<c_int> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &c_int {\n         self.0.as_inner()\n     }"}, {"sha": "45f96478fc373ef64de365f7f0115a30ec04e27a", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -481,6 +481,7 @@ impl<'a> Read for &'a FileDesc {\n }\n \n impl AsInner<OwnedFd> for FileDesc {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.0\n     }\n@@ -505,6 +506,7 @@ impl AsFd for FileDesc {\n }\n \n impl AsRawFd for FileDesc {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "b398fd5eb24bf649b837ee4c6177ab105e7439e5", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -547,6 +547,7 @@ impl FileAttr {\n }\n \n impl AsInner<stat64> for FileAttr {\n+    #[inline]\n     fn as_inner(&self) -> &stat64 {\n         &self.stat\n     }\n@@ -1193,8 +1194,6 @@ impl File {\n                 None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n             }\n         };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1206,6 +1205,7 @@ impl File {\n                     \"setting file times not supported\",\n                 ))\n             } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 // futimens requires macOS 10.13, and Android API level 19\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n@@ -1232,6 +1232,22 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n+                #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\", not(target_arch = \"riscv32\")))]\n+                {\n+                    use crate::sys::{time::__timespec64, weak::weak};\n+\n+                    // Added in glibc 2.34\n+                    weak!(fn __futimens64(libc::c_int, *const __timespec64) -> libc::c_int);\n+\n+                    if let Some(futimens64) = __futimens64.get() {\n+                        let to_timespec = |time: Option<SystemTime>| time.map(|time| time.t.to_timespec64())\n+                            .unwrap_or(__timespec64::new(0, libc::UTIME_OMIT as _));\n+                        let times = [to_timespec(times.accessed), to_timespec(times.modified)];\n+                        cvt(unsafe { futimens64(self.as_raw_fd(), times.as_ptr()) })?;\n+                        return Ok(());\n+                    }\n+                }\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }\n@@ -1254,12 +1270,14 @@ impl DirBuilder {\n }\n \n impl AsInner<FileDesc> for File {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n }\n \n impl AsInnerMut<FileDesc> for File {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut FileDesc {\n         &mut self.0\n     }\n@@ -1284,6 +1302,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "ee016887e70215b12806102e79be0cdc3c948d58", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -129,6 +129,7 @@ pub mod net {\n     }\n \n     impl AsInner<FileDesc> for Socket {\n+        #[inline]\n         fn as_inner(&self) -> &FileDesc {\n             &self.0\n         }\n@@ -153,6 +154,7 @@ pub mod net {\n     }\n \n     impl AsRawFd for Socket {\n+        #[inline]\n         fn as_raw_fd(&self) -> RawFd {\n             self.0.as_raw_fd()\n         }\n@@ -183,6 +185,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }\n@@ -305,6 +308,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }\n@@ -371,6 +375,7 @@ pub mod net {\n             unimpl!();\n         }\n \n+        #[inline]\n         pub fn socket(&self) -> &Socket {\n             &self.inner\n         }"}, {"sha": "39edb136c24fdfdc4291ef483ce6c45d3dd352ef", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -490,6 +490,7 @@ impl Socket {\n }\n \n impl AsInner<FileDesc> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &FileDesc {\n         &self.0\n     }\n@@ -514,6 +515,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "488217f39413f052244d77b4cd946e0cadee61ab", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -89,6 +89,7 @@ impl IntoInner<Vec<u8>> for Buf {\n }\n \n impl AsInner<[u8]> for Buf {\n+    #[inline]\n     fn as_inner(&self) -> &[u8] {\n         &self.inner\n     }"}, {"sha": "938a46bfdd833d21160be6bd2b183e0ded3d322e", "filename": "library/std/src/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fpipe.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -135,6 +135,7 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n }\n \n impl AsRawFd for AnonPipe {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }"}, {"sha": "a61d926ca8b3a4167eaeb54351ab0b874ce69e9e", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -166,6 +166,16 @@ impl Timespec {\n         }\n         self.to_timespec()\n     }\n+\n+    #[cfg(all(\n+        target_os = \"linux\",\n+        target_env = \"gnu\",\n+        target_pointer_width = \"32\",\n+        not(target_arch = \"riscv32\")\n+    ))]\n+    pub fn to_timespec64(&self) -> __timespec64 {\n+        __timespec64::new(self.tv_sec, self.tv_nsec.0 as _)\n+    }\n }\n \n impl From<libc::timespec> for Timespec {\n@@ -190,6 +200,18 @@ pub(in crate::sys::unix) struct __timespec64 {\n     _padding: i32,\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl __timespec64 {\n+    pub(in crate::sys::unix) fn new(tv_sec: i64, tv_nsec: i32) -> Self {\n+        Self { tv_sec, tv_nsec, _padding: 0 }\n+    }\n+}\n+\n #[cfg(all(\n     target_os = \"linux\",\n     target_env = \"gnu\","}, {"sha": "9a8b2a0be5b000bb9253e93eaabddbfeb60f9912", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -275,12 +275,14 @@ impl WasiFd {\n }\n \n impl AsInner<OwnedFd> for WasiFd {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedFd {\n         &self.fd\n     }\n }\n \n impl AsInnerMut<OwnedFd> for WasiFd {\n+    #[inline]\n     fn as_inner_mut(&mut self) -> &mut OwnedFd {\n         &mut self.fd\n     }\n@@ -305,6 +307,7 @@ impl AsFd for WasiFd {\n }\n \n impl AsRawFd for WasiFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd.as_raw_fd()\n     }"}, {"sha": "8d1dbf59155a4e7619a1c03b44591a1f19fcf49e", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -498,6 +498,7 @@ impl File {\n }\n \n impl AsInner<WasiFd> for File {\n+    #[inline]\n     fn as_inner(&self) -> &WasiFd {\n         &self.fd\n     }\n@@ -522,6 +523,7 @@ impl AsFd for File {\n }\n \n impl AsRawFd for File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.fd.as_raw_fd()\n     }"}, {"sha": "2239880ffbef45079d504387ac2368469a50850d", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -17,6 +17,7 @@ pub struct TcpStream {\n }\n \n impl AsInner<WasiFd> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &WasiFd {\n         &self.0\n     }\n@@ -41,6 +42,7 @@ impl AsFd for Socket {\n }\n \n impl AsRawFd for Socket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.as_raw_fd()\n     }\n@@ -184,6 +186,7 @@ impl TcpStream {\n         }\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -274,6 +277,7 @@ impl TcpListener {\n         }\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -284,6 +288,7 @@ impl TcpListener {\n }\n \n impl AsInner<Socket> for TcpListener {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -436,6 +441,7 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -446,6 +452,7 @@ impl UdpSocket {\n }\n \n impl AsInner<Socket> for UdpSocket {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "f99cdfbecfb696d98ab82980037e1accda2555f7", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -832,6 +832,7 @@ fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<\n }\n \n impl AsInner<Handle> for File {\n+    #[inline]\n     fn as_inner(&self) -> &Handle {\n         &self.handle\n     }"}, {"sha": "c7677d1c13abb8b38c08e74ef43ae55a35127645", "filename": "library/std/src/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fhandle.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -34,6 +34,7 @@ impl Handle {\n }\n \n impl AsInner<OwnedHandle> for Handle {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedHandle {\n         &self.0\n     }"}, {"sha": "8158713fa84a828b725a89230c570a76d8b964cd", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -446,6 +446,7 @@ impl<'a> Read for &'a Socket {\n }\n \n impl AsInner<OwnedSocket> for Socket {\n+    #[inline]\n     fn as_inner(&self) -> &OwnedSocket {\n         &self.0\n     }"}, {"sha": "2f2b0e56e0889e3ac3e4b75aafa652d5aa4b794c", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -27,6 +27,7 @@ impl FromInner<Wtf8Buf> for Buf {\n }\n \n impl AsInner<Wtf8> for Buf {\n+    #[inline]\n     fn as_inner(&self) -> &Wtf8 {\n         &self.inner\n     }"}, {"sha": "652c695fc57b00d6c93e6b46fbf3fe703c083b66", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -239,6 +239,7 @@ impl TcpStream {\n         Ok(TcpStream { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -352,6 +353,7 @@ impl TcpStream {\n }\n \n impl AsInner<Socket> for TcpStream {\n+    #[inline]\n     fn as_inner(&self) -> &Socket {\n         &self.inner\n     }\n@@ -427,6 +429,7 @@ impl TcpListener {\n         Ok(TcpListener { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }\n@@ -517,6 +520,7 @@ impl UdpSocket {\n         Ok(UdpSocket { inner: sock })\n     }\n \n+    #[inline]\n     pub fn socket(&self) -> &Socket {\n         &self.inner\n     }"}, {"sha": "ff96c35fb0ba6386085ec32be39efc20acc6868d", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -501,6 +501,7 @@ pub struct Wtf8 {\n }\n \n impl AsInner<[u8]> for Wtf8 {\n+    #[inline]\n     fn as_inner(&self) -> &[u8] {\n         &self.bytes\n     }"}, {"sha": "00e2857a13759172685df08085860cebcae29470", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -119,7 +119,7 @@ pub use core::time::TryFromFloatSecsError;\n /// [QueryPerformanceCounter]: https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n-/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n+/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\n /// [clock_gettime (Monotonic Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [mach_absolute_time]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/services/services.html\n ///\n@@ -224,7 +224,7 @@ pub struct Instant(time::Instant);\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: https://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n-/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n+/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#clock_time_get\n /// [GetSystemTimePreciseAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///"}, {"sha": "7d7f682130df86b6d780c3e51697e7c6f0a4dfee", "filename": "tests/pretty/tests-are-sorted.pp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fpretty%2Ftests-are-sorted.pp", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fpretty%2Ftests-are-sorted.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpretty%2Ftests-are-sorted.pp?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -79,6 +79,7 @@\n     };\n fn a_test() {}\n #[rustc_main]\n+#[no_coverage]\n pub fn main() -> () {\n     extern crate test;\n     test::test_main_static(&[&a_test, &m_test, &z_test])"}, {"sha": "93bd1cfcb48971c55c1e21bb91f3c2cedeb2b5a8", "filename": "tests/run-make/coverage-reports/expected_show_coverage.test_harness.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.test_harness.txt?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -0,0 +1,11 @@\n+    1|       |// Verify that the entry point injected by the test harness doesn't cause\n+    2|       |// weird artifacts in the coverage report (e.g. issue #10749).\n+    3|       |\n+    4|       |// compile-flags: --test\n+    5|       |\n+    6|       |#[allow(dead_code)]\n+    7|      0|fn unused() {}\n+    8|       |\n+    9|      1|#[test]\n+   10|      1|fn my_test() {}\n+"}, {"sha": "12a755734c198bd6d1b7a969c3def47c3b339ffc", "filename": "tests/run-make/coverage/test_harness.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Ftest_harness.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -0,0 +1,10 @@\n+// Verify that the entry point injected by the test harness doesn't cause\n+// weird artifacts in the coverage report (e.g. issue #10749).\n+\n+// compile-flags: --test\n+\n+#[allow(dead_code)]\n+fn unused() {}\n+\n+#[test]\n+fn my_test() {}"}, {"sha": "2b6f0ddbd6c7fc793fddd28bb4d34410313d8ed6", "filename": "tests/ui/borrowck/tainted-promoteds.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftainted-promoteds.rs?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for issue #110856, where a borrowck error for a MIR tainted\n+// all promoteds within. This in turn generated a spurious \"erroneous constant\n+// used\" note when trying to evaluate a promoted.\n+\n+pub fn f() -> u32 {\n+    let a = 0;\n+    a = &0 * &1 * &2 * &3;\n+    //~^ ERROR: cannot assign twice to immutable variable\n+    a\n+}\n+\n+fn main() {}"}, {"sha": "b276ea9acebe909dc6dd1651d3241fe290f3e0b9", "filename": "tests/ui/borrowck/tainted-promoteds.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6ddee637b62c6c4cdee90d98c3a21a1325a8e81/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Ftainted-promoteds.stderr?ref=d6ddee637b62c6c4cdee90d98c3a21a1325a8e81", "patch": "@@ -0,0 +1,14 @@\n+error[E0384]: cannot assign twice to immutable variable `a`\n+  --> $DIR/tainted-promoteds.rs:7:5\n+   |\n+LL |     let a = 0;\n+   |         -\n+   |         |\n+   |         first assignment to `a`\n+   |         help: consider making this binding mutable: `mut a`\n+LL |     a = &0 * &1 * &2 * &3;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0384`."}]}