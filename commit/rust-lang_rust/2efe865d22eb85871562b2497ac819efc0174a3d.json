{"sha": "2efe865d22eb85871562b2497ac819efc0174a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZmU4NjVkMjJlYjg1ODcxNTYyYjI0OTdhYzgxOWVmYzAxNzRhM2Q=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-16T20:33:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-16T22:52:47Z"}, "message": "AST/HIR: Merge ObjectSum and PolyTraitRef", "tree": {"sha": "8391f7670462a2536057f9c22c3aa87f90a79d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8391f7670462a2536057f9c22c3aa87f90a79d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2efe865d22eb85871562b2497ac819efc0174a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2efe865d22eb85871562b2497ac819efc0174a3d", "html_url": "https://github.com/rust-lang/rust/commit/2efe865d22eb85871562b2497ac819efc0174a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2efe865d22eb85871562b2497ac819efc0174a3d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828404684b486a2b741858970a150530228258bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/828404684b486a2b741858970a150530228258bb", "html_url": "https://github.com/rust-lang/rust/commit/828404684b486a2b741858970a150530228258bb"}], "stats": {"total": 359, "additions": 119, "deletions": 240}, "files": [{"sha": "001a5f6e586125e6423dcef5102144cf5276d644", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -562,15 +562,11 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyPath(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.id, typ.span);\n         }\n-        TyObjectSum(ref ty, ref bounds) => {\n-            visitor.visit_ty(ty);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n-        }\n         TyArray(ref ty, length) => {\n             visitor.visit_ty(ty);\n             visitor.visit_nested_body(length)\n         }\n-        TyPolyTraitRef(ref bounds) => {\n+        TyObjectSum(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n         TyImplTrait(ref bounds) => {"}, {"sha": "9a0ef6537ce3a30ca14e9bf1bddeed840bdb0d64", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -308,9 +308,6 @@ impl<'a> LoweringContext<'a> {\n                         span: t.span,\n                     })))\n                 }\n-                TyKind::ObjectSum(ref ty, ref bounds) => {\n-                    hir::TyObjectSum(self.lower_ty(ty), self.lower_bounds(bounds))\n-                }\n                 TyKind::Array(ref ty, ref length) => {\n                     let length = self.lower_expr(length);\n                     hir::TyArray(self.lower_ty(ty),\n@@ -320,8 +317,8 @@ impl<'a> LoweringContext<'a> {\n                     let expr = self.lower_expr(expr);\n                     hir::TyTypeof(self.record_body(expr, None))\n                 }\n-                TyKind::PolyTraitRef(ref bounds) => {\n-                    hir::TyPolyTraitRef(self.lower_bounds(bounds))\n+                TyKind::ObjectSum(ref bounds) => {\n+                    hir::TyObjectSum(self.lower_bounds(bounds))\n                 }\n                 TyKind::ImplTrait(ref bounds) => {\n                     hir::TyImplTrait(self.lower_bounds(bounds))"}, {"sha": "c3ae0e3f276c4ba25b77b215e66df9e399e19c27", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -1214,12 +1214,11 @@ pub enum Ty_ {\n     ///\n     /// Type parameters may be stored in each `PathSegment`.\n     TyPath(QPath),\n-\n-    /// Something like `A+B`. Note that `B` must always be a path.\n-    TyObjectSum(P<Ty>, TyParamBounds),\n-    /// A type like `for<'a> Foo<&'a Bar>`\n-    TyPolyTraitRef(TyParamBounds),\n-    /// An `impl TraitA+TraitB` type.\n+    /// A trait object type `Bound1 + Bound2 + Bound3`\n+    /// where `Bound` is a trait or a lifetime.\n+    TyObjectSum(TyParamBounds),\n+    /// An `impl Bound1 + Bound2 + Bound3` type\n+    /// where `Bound` is a trait or a lifetime.\n     TyImplTrait(TyParamBounds),\n     /// Unused for now\n     TyTypeof(BodyId),"}, {"sha": "c314145721f1081c76a22237cf83924ef417212c", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -418,11 +418,7 @@ impl<'a> State<'a> {\n             hir::TyPath(ref qpath) => {\n                 self.print_qpath(qpath, false)?\n             }\n-            hir::TyObjectSum(ref ty, ref bounds) => {\n-                self.print_type(&ty)?;\n-                self.print_bounds(\"+\", &bounds[..])?;\n-            }\n-            hir::TyPolyTraitRef(ref bounds) => {\n+            hir::TyObjectSum(ref bounds) => {\n                 self.print_bounds(\"\", &bounds[..])?;\n             }\n             hir::TyImplTrait(ref bounds) => {"}, {"sha": "c2abba5cce3f8e54391594df37e6f2fb470b1ada", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -441,7 +441,6 @@ enum SawTyComponent {\n     SawTyTup,\n     SawTyPath,\n     SawTyObjectSum,\n-    SawTyPolyTraitRef,\n     SawTyImplTrait,\n     SawTyTypeof,\n     SawTyInfer\n@@ -458,7 +457,6 @@ fn saw_ty(node: &Ty_) -> SawTyComponent {\n       TyTup(..) => SawTyTup,\n       TyPath(_) => SawTyPath,\n       TyObjectSum(..) => SawTyObjectSum,\n-      TyPolyTraitRef(..) => SawTyPolyTraitRef,\n       TyImplTrait(..) => SawTyImplTrait,\n       TyTypeof(..) => SawTyTypeof,\n       TyInfer => SawTyInfer"}, {"sha": "e38fcbb5f6b05892ea248732906c0696e4a90617", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -143,8 +143,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     err.emit();\n                 });\n             }\n-            TyKind::ObjectSum(_, ref bounds) |\n-            TyKind::PolyTraitRef(ref bounds) => {\n+            TyKind::ObjectSum(ref bounds) => {\n                 self.no_questions_in_bounds(bounds, \"trait object types\", false);\n             }\n             _ => {}"}, {"sha": "bcb82c85f2485b4c67c5a6e1db3974e89c6e5cfb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 86, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -73,7 +73,7 @@ use std::iter;\n use syntax::{abi, ast};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::symbol::{Symbol, keywords};\n-use syntax_pos::{Span, Pos};\n+use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n pub trait AstConv<'gcx, 'tcx> {\n@@ -930,87 +930,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         decl_ty.subst(self.tcx(), substs)\n     }\n \n-    fn ast_ty_to_object_trait_ref(&self,\n-                                  rscope: &RegionScope,\n-                                  span: Span,\n-                                  ty: &hir::Ty,\n-                                  bounds: &[hir::TyParamBound])\n-                                  -> Ty<'tcx>\n-    {\n-        /*!\n-         * In a type like `Foo + Send`, we want to wait to collect the\n-         * full set of bounds before we make the object type, because we\n-         * need them to infer a region bound.  (For example, if we tried\n-         * made a type from just `Foo`, then it wouldn't be enough to\n-         * infer a 'static bound, and hence the user would get an error.)\n-         * So this function is used when we're dealing with a sum type to\n-         * convert the LHS. It only accepts a type that refers to a trait\n-         * name, and reports an error otherwise.\n-         */\n-\n-        let tcx = self.tcx();\n-        match ty.node {\n-            hir::TyPath(hir::QPath::Resolved(None, ref path)) => {\n-                if let Def::Trait(trait_def_id) = path.def {\n-                    self.trait_path_to_object_type(rscope,\n-                                                   path.span,\n-                                                   trait_def_id,\n-                                                   ty.id,\n-                                                   path.segments.last().unwrap(),\n-                                                   span,\n-                                                   partition_bounds(bounds))\n-                } else {\n-                    struct_span_err!(tcx.sess, ty.span, E0172,\n-                                     \"expected a reference to a trait\")\n-                        .span_label(ty.span, &format!(\"expected a trait\"))\n-                        .emit();\n-                    tcx.types.err\n-                }\n-            }\n-            _ => {\n-                let mut err = struct_span_err!(tcx.sess, ty.span, E0178,\n-                                               \"expected a path on the left-hand side \\\n-                                                of `+`, not `{}`\",\n-                                               tcx.map.node_to_pretty_string(ty.id));\n-                err.span_label(ty.span, &format!(\"expected a path\"));\n-                let hi = bounds.iter().map(|x| match *x {\n-                    hir::TraitTyParamBound(ref tr, _) => tr.span.hi,\n-                    hir::RegionTyParamBound(ref r) => r.span.hi,\n-                }).max_by_key(|x| x.to_usize());\n-                let full_span = hi.map(|hi| Span {\n-                    lo: ty.span.lo,\n-                    hi: hi,\n-                    expn_id: ty.span.expn_id,\n-                });\n-                match (&ty.node, full_span) {\n-                    (&hir::TyRptr(ref lifetime, ref mut_ty), Some(full_span)) => {\n-                        let ty_str = hir::print::to_string(&tcx.map, |s| {\n-                            use syntax::print::pp::word;\n-                            use syntax::print::pprust::PrintState;\n-\n-                            word(&mut s.s, \"&\")?;\n-                            s.print_opt_lifetime(lifetime)?;\n-                            s.print_mutability(mut_ty.mutbl)?;\n-                            s.popen()?;\n-                            s.print_type(&mut_ty.ty)?;\n-                            s.print_bounds(\" +\", bounds)?;\n-                            s.pclose()\n-                        });\n-                        err.span_suggestion(full_span, \"try adding parentheses (per RFC 438):\",\n-                                            ty_str);\n-                    }\n-\n-                    _ => {\n-                        help!(&mut err,\n-                                   \"perhaps you forgot parentheses? (per RFC 438)\");\n-                    }\n-                }\n-                err.emit();\n-                tcx.types.err\n-            }\n-        }\n-    }\n-\n     /// Transform a PolyTraitRef into a PolyExistentialTraitRef by\n     /// removing the dummy Self type (TRAIT_OBJECT_DUMMY_SELF).\n     fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n@@ -1534,9 +1453,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             hir::TySlice(ref ty) => {\n                 tcx.mk_slice(self.ast_ty_to_ty(rscope, &ty))\n             }\n-            hir::TyObjectSum(ref ty, ref bounds) => {\n-                self.ast_ty_to_object_trait_ref(rscope, ast_ty.span, ty, bounds)\n-            }\n             hir::TyPtr(ref mt) => {\n                 tcx.mk_ptr(ty::TypeAndMut {\n                     ty: self.ast_ty_to_ty(rscope, &mt.ty),\n@@ -1609,7 +1525,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 }\n                 tcx.mk_fn_ptr(bare_fn_ty)\n             }\n-            hir::TyPolyTraitRef(ref bounds) => {\n+            hir::TyObjectSum(ref bounds) => {\n                 self.conv_object_ty_poly_trait_ref(rscope, ast_ty.span, bounds)\n             }\n             hir::TyImplTrait(ref bounds) => {"}, {"sha": "3617b1f0a7de97722230bcfe6f18496f3559d072", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -1864,55 +1864,6 @@ fn bar(foo: Foo) -> u32 {\n ```\n \"##,\n \n-E0172: r##\"\n-This error means that an attempt was made to specify the type of a variable with\n-a combination of a concrete type and a trait. Consider the following example:\n-\n-```compile_fail,E0172\n-fn foo(bar: i32+std::fmt::Display) {}\n-```\n-\n-The code is trying to specify that we want to receive a signed 32-bit integer\n-which also implements `Display`. This doesn't make sense: when we pass `i32`, a\n-concrete type, it implicitly includes all of the traits that it implements.\n-This includes `Display`, `Debug`, `Clone`, and a host of others.\n-\n-If `i32` implements the trait we desire, there's no need to specify the trait\n-separately. If it does not, then we need to `impl` the trait for `i32` before\n-passing it into `foo`. Either way, a fixed definition for `foo` will look like\n-the following:\n-\n-```\n-fn foo(bar: i32) {}\n-```\n-\n-To learn more about traits, take a look at the Book:\n-\n-https://doc.rust-lang.org/book/traits.html\n-\"##,\n-\n-E0178: r##\"\n-In types, the `+` type operator has low precedence, so it is often necessary\n-to use parentheses.\n-\n-For example:\n-\n-```compile_fail,E0178\n-trait Foo {}\n-\n-struct Bar<'a> {\n-    w: &'a Foo + Copy,   // error, use &'a (Foo + Copy)\n-    x: &'a Foo + 'a,     // error, use &'a (Foo + 'a)\n-    y: &'a mut Foo + 'a, // error, use &'a mut (Foo + 'a)\n-    z: fn() -> Foo + 'a, // error, use fn() -> (Foo + 'a)\n-}\n-```\n-\n-More details can be found in [RFC 438].\n-\n-[RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n-\"##,\n-\n E0182: r##\"\n You bound an associated type in an expression path which is not\n allowed.\n@@ -4152,6 +4103,7 @@ register_diagnostics! {\n //  E0163, // merged into E0071\n //  E0167,\n //  E0168,\n+//  E0172, // non-trait found in a type sum, moved to resolve\n //  E0173, // manual implementations of unboxed closure traits are experimental\n //  E0174,\n     E0183,"}, {"sha": "77ca6ef34b875f51ecf0867ca1da76fd1c26afea", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -1504,9 +1504,6 @@ pub enum Type {\n     // _\n     Infer,\n \n-    // for<'a> Foo(&'a)\n-    PolyTraitRef(Vec<TyParamBound>),\n-\n     // impl TraitA+TraitB\n     ImplTrait(Vec<TyParamBound>),\n }\n@@ -1768,24 +1765,26 @@ impl Clean<Type> for hir::Ty {\n                     trait_: box resolve_type(cx, trait_path.clean(cx), self.id)\n                 }\n             }\n-            TyObjectSum(ref lhs, ref bounds) => {\n-                let lhs_ty = lhs.clean(cx);\n+            TyObjectSum(ref bounds) => {\n+                let lhs_ty = bounds[0].clean(cx);\n                 match lhs_ty {\n-                    ResolvedPath { path, typarams: None, did, is_generic } => {\n-                        ResolvedPath {\n-                            path: path,\n-                            typarams: Some(bounds.clean(cx)),\n-                            did: did,\n-                            is_generic: is_generic,\n+                    TraitBound(poly_trait, ..) => {\n+                        match poly_trait.trait_ {\n+                            ResolvedPath { path, typarams: None, did, is_generic } => {\n+                                ResolvedPath {\n+                                    path: path,\n+                                    typarams: Some(bounds[1..].clean(cx)),\n+                                    did: did,\n+                                    is_generic: is_generic,\n+                                }\n+                            }\n+                            _ => Infer // shouldn't happen\n                         }\n                     }\n-                    _ => {\n-                        lhs_ty // shouldn't happen\n-                    }\n+                    _ => Infer // shouldn't happen\n                 }\n             }\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n-            TyPolyTraitRef(ref bounds) => PolyTraitRef(bounds.clean(cx)),\n             TyImplTrait(ref bounds) => ImplTrait(bounds.clean(cx)),\n             TyInfer => Infer,\n             TyTypeof(..) => panic!(\"Unimplemented type {:?}\", self.node),"}, {"sha": "d25c4184f3cf9f816d58ae4960355d2eecf8687d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -679,19 +679,6 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n             }\n         }\n-        clean::PolyTraitRef(ref bounds) => {\n-            for (i, bound) in bounds.iter().enumerate() {\n-                if i != 0 {\n-                    write!(f, \" + \")?;\n-                }\n-                if f.alternate() {\n-                    write!(f, \"{:#}\", *bound)?;\n-                } else {\n-                    write!(f, \"{}\", *bound)?;\n-                }\n-            }\n-            Ok(())\n-        }\n         clean::ImplTrait(ref bounds) => {\n             write!(f, \"impl \")?;\n             for (i, bound) in bounds.iter().enumerate() {"}, {"sha": "6c69aa14bcf96dcefccd615eae84e1d4747e054c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -1357,11 +1357,11 @@ pub enum TyKind {\n     ///\n     /// Type parameters are stored in the Path itself\n     Path(Option<QSelf>, Path),\n-    /// Something like `A+B`. Note that `B` must always be a path.\n-    ObjectSum(P<Ty>, TyParamBounds),\n-    /// A type like `for<'a> Foo<&'a Bar>`\n-    PolyTraitRef(TyParamBounds),\n-    /// An `impl TraitA+TraitB` type.\n+    /// A trait object type `Bound1 + Bound2 + Bound3`\n+    /// where `Bound` is a trait or a lifetime.\n+    ObjectSum(TyParamBounds),\n+    /// An `impl Bound1 + Bound2 + Bound3` type\n+    /// where `Bound` is a trait or a lifetime.\n     ImplTrait(TyParamBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     Paren(P<Ty>),"}, {"sha": "2b4d13375046e851c7910765114ce16d38a32f4c", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -15,6 +15,28 @@\n // In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n register_long_diagnostics! {\n \n+E0178: r##\"\n+In types, the `+` type operator has low precedence, so it is often necessary\n+to use parentheses.\n+\n+For example:\n+\n+```compile_fail,E0178\n+trait Foo {}\n+\n+struct Bar<'a> {\n+    w: &'a Foo + Copy,   // error, use &'a (Foo + Copy)\n+    x: &'a Foo + 'a,     // error, use &'a (Foo + 'a)\n+    y: &'a mut Foo + 'a, // error, use &'a mut (Foo + 'a)\n+    z: fn() -> Foo + 'a, // error, use fn() -> (Foo + 'a)\n+}\n+```\n+\n+More details can be found in [RFC 438].\n+\n+[RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n+\"##,\n+\n E0534: r##\"\n The `inline` attribute was malformed.\n "}, {"sha": "fc3cbf20fb955f88613a38274ab8ad7c9346a381", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -54,7 +54,6 @@ pub trait AstBuilder {\n \n     fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty>;\n     fn ty_path(&self, ast::Path) -> P<ast::Ty>;\n-    fn ty_sum(&self, ast::Path, ast::TyParamBounds) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n \n     fn ty_rptr(&self, span: Span,\n@@ -403,12 +402,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.ty(path.span, ast::TyKind::Path(None, path))\n     }\n \n-    fn ty_sum(&self, path: ast::Path, bounds: ast::TyParamBounds) -> P<ast::Ty> {\n-        self.ty(path.span,\n-                ast::TyKind::ObjectSum(self.ty_path(path),\n-                                 bounds))\n-    }\n-\n     // Might need to take bounds as an argument in the future, if you ever want\n     // to generate a bounded existential trait type.\n     fn ty_ident(&self, span: Span, ident: ast::Ident)"}, {"sha": "8b045f1b53002cd93a8c6282b816453144749715", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -380,18 +380,14 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 });\n                 TyKind::Path(qself, fld.fold_path(path))\n             }\n-            TyKind::ObjectSum(ty, bounds) => {\n-                TyKind::ObjectSum(fld.fold_ty(ty),\n-                            fld.fold_bounds(bounds))\n-            }\n             TyKind::Array(ty, e) => {\n                 TyKind::Array(fld.fold_ty(ty), fld.fold_expr(e))\n             }\n             TyKind::Typeof(expr) => {\n                 TyKind::Typeof(fld.fold_expr(expr))\n             }\n-            TyKind::PolyTraitRef(bounds) => {\n-                TyKind::PolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+            TyKind::ObjectSum(bounds) => {\n+                TyKind::ObjectSum(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n             }\n             TyKind::ImplTrait(bounds) => {\n                 TyKind::ImplTrait(bounds.move_map(|b| fld.fold_ty_param_bound(b)))"}, {"sha": "bae08da0a640c5ab24a064bebe943c5375f1379a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -40,7 +40,7 @@ use ast::{Visibility, WhereClause};\n use ast::{BinOpKind, UnOp};\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, spanned, respan};\n-use syntax_pos::{self, Span, BytePos, mk_sp};\n+use syntax_pos::{self, Span, Pos, BytePos, mk_sp};\n use errors::{self, DiagnosticBuilder};\n use ext::tt::macro_parser;\n use parse;\n@@ -1045,7 +1045,7 @@ impl<'a> Parser<'a> {\n                 Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n                 .chain(other_bounds.into_vec())\n                 .collect();\n-            Ok(ast::TyKind::PolyTraitRef(all_bounds))\n+            Ok(ast::TyKind::ObjectSum(all_bounds))\n         }\n     }\n \n@@ -1267,7 +1267,7 @@ impl<'a> Parser<'a> {\n             return Ok(lhs);\n         }\n \n-        let bounds = self.parse_ty_param_bounds()?;\n+        let mut bounds = self.parse_ty_param_bounds()?.into_vec();\n \n         // In type grammar, `+` is treated like a binary operator,\n         // and hence both L and R side are required.\n@@ -1277,9 +1277,57 @@ impl<'a> Parser<'a> {\n                           \"at least one type parameter bound \\\n                           must be specified\");\n         }\n+        if let TyKind::Path(None, ref path) = lhs.node {\n+            let poly_trait_ref = PolyTraitRef {\n+                bound_lifetimes: Vec::new(),\n+                trait_ref: TraitRef { path: path.clone(), ref_id: lhs.id },\n+                span: lhs.span,\n+            };\n+            let poly_trait_ref = TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None);\n+            bounds.insert(0, poly_trait_ref);\n+        } else {\n+            let mut err = struct_span_err!(self.sess.span_diagnostic, lhs.span, E0178,\n+                                            \"expected a path on the left-hand side \\\n+                                            of `+`, not `{}`\",\n+                                            pprust::ty_to_string(&lhs));\n+            err.span_label(lhs.span, &format!(\"expected a path\"));\n+            let hi = bounds.iter().map(|x| match *x {\n+                ast::TraitTyParamBound(ref tr, _) => tr.span.hi,\n+                ast::RegionTyParamBound(ref r) => r.span.hi,\n+            }).max_by_key(|x| x.to_usize());\n+            let full_span = hi.map(|hi| Span {\n+                lo: lhs.span.lo,\n+                hi: hi,\n+                expn_id: lhs.span.expn_id,\n+            });\n+            match (&lhs.node, full_span) {\n+                (&TyKind::Rptr(ref lifetime, ref mut_ty), Some(full_span)) => {\n+                    let ty_str = pprust::to_string(|s| {\n+                        use print::pp::word;\n+                        use print::pprust::PrintState;\n+\n+                        word(&mut s.s, \"&\")?;\n+                        s.print_opt_lifetime(lifetime)?;\n+                        s.print_mutability(mut_ty.mutbl)?;\n+                        s.popen()?;\n+                        s.print_type(&mut_ty.ty)?;\n+                        s.print_bounds(\" +\", &bounds)?;\n+                        s.pclose()\n+                    });\n+                    err.span_suggestion(full_span, \"try adding parentheses (per RFC 438):\",\n+                                        ty_str);\n+                }\n+\n+                _ => {\n+                    help!(&mut err,\n+                                \"perhaps you forgot parentheses? (per RFC 438)\");\n+                }\n+            }\n+            err.emit();\n+        }\n \n         let sp = mk_sp(lo, self.prev_span.hi);\n-        let sum = ast::TyKind::ObjectSum(lhs, bounds);\n+        let sum = TyKind::ObjectSum(bounds.into());\n         Ok(P(Ty {id: ast::DUMMY_NODE_ID, node: sum, span: sp}))\n     }\n "}, {"sha": "31e6f25559dec47b954b50a3e2ae6d8ab1e53c7d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -1028,11 +1028,7 @@ impl<'a> State<'a> {\n             ast::TyKind::Path(Some(ref qself), ref path) => {\n                 self.print_qpath(path, qself, false)?\n             }\n-            ast::TyKind::ObjectSum(ref ty, ref bounds) => {\n-                self.print_type(&ty)?;\n-                self.print_bounds(\"+\", &bounds[..])?;\n-            }\n-            ast::TyKind::PolyTraitRef(ref bounds) => {\n+            ast::TyKind::ObjectSum(ref bounds) => {\n                 self.print_bounds(\"\", &bounds[..])?;\n             }\n             ast::TyKind::ImplTrait(ref bounds) => {"}, {"sha": "b0d7a2518036fccff1cdd2df296550b7e875fc2e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -342,15 +342,11 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             }\n             visitor.visit_path(path, typ.id);\n         }\n-        TyKind::ObjectSum(ref ty, ref bounds) => {\n-            visitor.visit_ty(ty);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n-        }\n         TyKind::Array(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n-        TyKind::PolyTraitRef(ref bounds) => {\n+        TyKind::ObjectSum(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n         TyKind::ImplTrait(ref bounds) => {"}, {"sha": "485a31d96663795a2cbb2eabe73d3ede755fde00", "filename": "src/test/compile-fail/E0172.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/828404684b486a2b741858970a150530228258bb/src%2Ftest%2Fcompile-fail%2FE0172.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828404684b486a2b741858970a150530228258bb/src%2Ftest%2Fcompile-fail%2FE0172.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0172.rs?ref=828404684b486a2b741858970a150530228258bb", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(bar: i32+std::fmt::Display) {}\n-    //~^ ERROR E0172\n-    //~| NOTE expected a trait\n-\n-fn main() {\n-}"}, {"sha": "ffc5940c95c98c8bae7412b955d0c06545f08b3d", "filename": "src/test/compile-fail/E0178.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2FE0178.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2FE0178.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0178.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -17,12 +17,15 @@ struct Bar<'a> {\n     x: &'a Foo + 'a,\n     //~^ ERROR E0178\n     //~| NOTE expected a path\n+    //~| ERROR at least one non-builtin trait is required for an object type\n     y: &'a mut Foo + 'a,\n     //~^ ERROR E0178\n     //~| NOTE expected a path\n+    //~| ERROR at least one non-builtin trait is required for an object type\n     z: fn() -> Foo + 'a,\n     //~^ ERROR E0178\n     //~| NOTE expected a path\n+    //~| ERROR at least one non-builtin trait is required for an object type\n }\n \n fn main() {"}, {"sha": "cabe0fd48edf99d0124ef40e19b45060f8ec4cf0", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -11,6 +11,6 @@\n \n struct Foo;\n \n-fn foo(_x: Box<Foo + Send>) { } //~ ERROR expected a reference to a trait\n+fn foo(_x: Box<Foo + Send>) { } //~ ERROR expected trait, found struct `Foo`\n \n fn main() { }"}, {"sha": "c009644c5619fe09447ba5067d2934b960ee658e", "filename": "src/test/compile-fail/trait-object-reference-without-parens-suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -13,8 +13,10 @@ fn main() {\n     //~^ ERROR expected a path\n     //~| HELP try adding parentheses\n     //~| SUGGESTION let _: &(Copy + 'static);\n+    //~| ERROR at least one non-builtin trait is required for an object type\n     let _: &'static Copy + 'static;\n     //~^ ERROR expected a path\n     //~| HELP try adding parentheses\n     //~| SUGGESTION let _: &'static (Copy + 'static);\n+    //~| ERROR at least one non-builtin trait is required for an object type\n }"}, {"sha": "651d2b67941cb9ffbdd442d9e035b528948cb0d7", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efe865d22eb85871562b2497ac819efc0174a3d/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=2efe865d22eb85871562b2497ac819efc0174a3d", "patch": "@@ -16,10 +16,10 @@ trait Tr {\n }\n impl Tr for isize { }\n \n-fn foo<'a>(x: Box<Tr+ Sync + 'a>) -> Box<Tr+ Sync + 'a> { x }\n+fn foo<'a>(x: Box< Tr + Sync + 'a>) -> Box< Tr + Sync + 'a> { x }\n \n fn main() {\n-    let x: Box<Tr+ Sync>;\n+    let x: Box< Tr + Sync>;\n \n-    Box::new(1isize) as Box<Tr+ Sync>;\n+    Box::new(1isize) as Box< Tr + Sync>;\n }"}]}