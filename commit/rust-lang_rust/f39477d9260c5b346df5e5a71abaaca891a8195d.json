{"sha": "f39477d9260c5b346df5e5a71abaaca891a8195d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTQ3N2Q5MjYwYzViMzQ2ZGY1ZTVhNzFhYmFhY2E4OTFhODE5NWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-11T01:24:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-11T01:24:41Z"}, "message": "In resolve, check that an or-pattern has the same number of bindings in each disjunct\n\nresolve3 wasn't checking this. Added test cases. Also added a helpful informational\nmessage in the case where you have a variable binding that you probably think\nrefers to a variant that you forgot to import.\n\nThis is easier to do in resolve than in typeck because there's code in typeck\nthat assumes that each of the patterns binds the same number of variables.", "tree": {"sha": "059ff59c6cd75a9b3b38886c6b0fe19fbede57a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/059ff59c6cd75a9b3b38886c6b0fe19fbede57a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39477d9260c5b346df5e5a71abaaca891a8195d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39477d9260c5b346df5e5a71abaaca891a8195d", "html_url": "https://github.com/rust-lang/rust/commit/f39477d9260c5b346df5e5a71abaaca891a8195d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39477d9260c5b346df5e5a71abaaca891a8195d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019d4291c712b5127e07b6dab02d4b8c484ecaf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/019d4291c712b5127e07b6dab02d4b8c484ecaf8", "html_url": "https://github.com/rust-lang/rust/commit/019d4291c712b5127e07b6dab02d4b8c484ecaf8"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "482f22cc6abe79cac287d8725de12e19183ba320", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=f39477d9260c5b346df5e5a71abaaca891a8195d", "patch": "@@ -34,9 +34,6 @@ fn pat_is_variant(dm: resolve::def_map, pat: @pat) -> bool {\n     }\n }\n \n-// This does *not* normalize. The pattern should be already normalized\n-// if you want to get a normalized pattern out of it.\n-// Could return a constrained type in order to express that (future work)\n fn pat_bindings(dm: resolve::def_map, pat: @pat,\n                 it: fn(node_id, span, @path)) {\n     do walk_pat(pat) |p| {"}, {"sha": "d3502fb96441e692f34edb9955f33dc659991eac", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=f39477d9260c5b346df5e5a71abaaca891a8195d", "patch": "@@ -17,8 +17,9 @@ import syntax::ast::{ident, trait_ref, impure_fn, instance_var, item};\n import syntax::ast::{item_class, item_const, item_enum, item_fn, item_mac};\n import syntax::ast::{item_foreign_mod, item_trait, item_impl, item_mod};\n import syntax::ast::{item_ty, local, local_crate, method, node_id, pat};\n-import syntax::ast::{pat_enum, pat_ident, pat_lit, pat_range, path, prim_ty};\n-import syntax::ast::{stmt_decl, ty};\n+import syntax::ast::{pat_enum, pat_ident, path, prim_ty, stmt_decl, ty,\n+                     pat_box, pat_uniq, pat_lit, pat_range, pat_rec,\n+                     pat_tup, pat_wild};\n import syntax::ast::{ty_bool, ty_char, ty_constr, ty_f, ty_f32, ty_f64};\n import syntax::ast::{ty_float, ty_i, ty_i16, ty_i32, ty_i64, ty_i8, ty_int};\n import syntax::ast::{ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64};\n@@ -28,6 +29,7 @@ import syntax::ast::{view_path_list, view_path_simple};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{walk_pat};\n import syntax::attr::{attr_metas, contains_name};\n+import syntax::print::pprust::path_to_str;\n import syntax::codemap::span;\n import syntax::visit::{default_visitor, fk_method, mk_vt, visit_block};\n import syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n@@ -3384,6 +3386,40 @@ class Resolver {\n                              none, visitor);\n     }\n \n+    fn num_bindings(pat: @pat) -> uint {\n+      pat_util::pat_binding_ids(self.def_map, pat).len()\n+    }\n+\n+    fn warn_var_patterns(arm: arm) {\n+      /*\n+        The idea here is that an arm like:\n+           alpha | beta\n+        where alpha is a variant and beta is an identifier that\n+        might refer to a variant that's not in scope will result\n+        in a confusing error message. Showing that beta actually binds a\n+        new variable might help.\n+       */\n+      for arm.pats.each |p| {\n+         do pat_util::pat_bindings(self.def_map, p) |_id, sp, pth| {\n+             self.session.span_note(sp, #fmt(\"Treating %s as a variable \\\n+               binding, because it does not denote any variant in scope\",\n+                                             path_to_str(pth)));\n+         }\n+      };\n+    }\n+    fn check_consistent_bindings(arm: arm) {\n+      if arm.pats.len() == 0 { ret; }\n+      let good = self.num_bindings(arm.pats[0]);\n+      for arm.pats.each() |p: @pat| {\n+        if self.num_bindings(p) != good {\n+          self.session.span_err(p.span,\n+             \"inconsistent number of bindings\");\n+          self.warn_var_patterns(arm);\n+          break;\n+        };\n+      };\n+    }\n+\n     fn resolve_arm(arm: arm, visitor: ResolveVisitor) {\n         (*self.value_ribs).push(@Rib(NormalRibKind));\n \n@@ -3393,6 +3429,10 @@ class Resolver {\n                                  some(bindings_list), visitor);\n         }\n \n+        // This has to happen *after* we determine which\n+        // pat_idents are variants\n+        self.check_consistent_bindings(arm);\n+\n         visit_expr_opt(arm.guard, (), visitor);\n         self.resolve_block(arm.body, visitor);\n "}, {"sha": "606c5fc8e003b58487934290466d4a6b83efd8de", "filename": "src/test/compile-fail/issue-2848.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs?ref=f39477d9260c5b346df5e5a71abaaca891a8195d", "patch": "@@ -0,0 +1,15 @@\n+mod bar {\n+    enum foo {\n+        alpha,\n+        beta,\n+        charlie\n+    }\n+}\n+\n+fn main() {\n+    import bar::{alpha, charlie};\n+    alt alpha {\n+      alpha | beta {} //~ ERROR: inconsistent number of bindings\n+      charlie {}\n+    }\n+}"}, {"sha": "5fed9f2d26c22413a02dd11d9c58364674fdad43", "filename": "src/test/compile-fail/issue-2849.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39477d9260c5b346df5e5a71abaaca891a8195d/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2849.rs?ref=f39477d9260c5b346df5e5a71abaaca891a8195d", "patch": "@@ -0,0 +1,7 @@\n+enum foo { alpha, beta(int) }\n+\n+fn main() {\n+    alt alpha {\n+      alpha | beta(i) {} //~ ERROR inconsistent number of bindings\n+    }\n+}"}]}