{"sha": "42d0f8351aafa58755c44f49358675da208c4d51", "node_id": "C_kwDOAAsO6NoAKDQyZDBmODM1MWFhZmE1ODc1NWM0NGY0OTM1ODY3NWRhMjA4YzRkNTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-07T10:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-07T10:04:57Z"}, "message": "Rollup merge of #91065 - wesleywiser:add_incr_test, r=jackh726\n\nAdd test for evaluate_obligation: Ok(EvaluatedToOkModuloRegions) ICE\n\nAdds the minimial repro test case from #85360. The fix for #85360 was\nsupposed to be #85868 however the repro was resolved in the 2021-07-05\nnightly while #85868 didn't land until 2021-09-03. The reason for that\nis d34a3a401b4e44f289a4d5bf53da83367cbb6aa7 **also** resolves that\nissue.\n\nTo test if #85868 actually fixes #85360, I reverted\nd34a3a401b4e44f289a4d5bf53da83367cbb6aa7 and found that #85868 does\nindeed resolve #85360.\n\nWith that question resolved, add a test case to our incremental test\nsuite for the original Ok(EvaluatedToOkModuloRegions) ICE.\n\nThanks to ````@lqd```` for helping track this down!", "tree": {"sha": "c167c5d250974d34bfc3872ca434505fe1bf1652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c167c5d250974d34bfc3872ca434505fe1bf1652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d0f8351aafa58755c44f49358675da208c4d51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhrzHKCRBK7hj4Ov3rIwAAQ9MIADlcSh67uiZnxOWgdrJhO/z4\nvnekk/iplViJETmlHlZ1eMKE3bC/ttES9WupXb00a7/daqg9epkFB2GRjvv44yCm\nHaXOhgI0TtNEtGQOxWchPWM25CyuPXSJ3kw/QdswZsSyGO/Ami/zQFRWJlrT6K4z\nQ9PRLcppS4lD+zWi61usFcVpoF49yL1Npc93EGyLT7GPeyho6KWiERp6xk6Zlorj\nxPtc+irK9pfL5O7/SxTvVojT0SCTdlAXfnYBc30OjIFzNkzfs0cepJJNUYKoEOxI\nC38j24abMMKgzsIm8e8D1oaJeTeN2x07qsfB53AJjxcOZS5FkXoqlomqGFUCYYg=\n=ZccD\n-----END PGP SIGNATURE-----\n", "payload": "tree c167c5d250974d34bfc3872ca434505fe1bf1652\nparent f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8\nparent 6fe13f62c1e73e6d102ce3673ad31d7195169560\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638871497 +0100\ncommitter GitHub <noreply@github.com> 1638871497 +0100\n\nRollup merge of #91065 - wesleywiser:add_incr_test, r=jackh726\n\nAdd test for evaluate_obligation: Ok(EvaluatedToOkModuloRegions) ICE\n\nAdds the minimial repro test case from #85360. The fix for #85360 was\nsupposed to be #85868 however the repro was resolved in the 2021-07-05\nnightly while #85868 didn't land until 2021-09-03. The reason for that\nis d34a3a401b4e44f289a4d5bf53da83367cbb6aa7 **also** resolves that\nissue.\n\nTo test if #85868 actually fixes #85360, I reverted\nd34a3a401b4e44f289a4d5bf53da83367cbb6aa7 and found that #85868 does\nindeed resolve #85360.\n\nWith that question resolved, add a test case to our incremental test\nsuite for the original Ok(EvaluatedToOkModuloRegions) ICE.\n\nThanks to ````@lqd```` for helping track this down!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d0f8351aafa58755c44f49358675da208c4d51", "html_url": "https://github.com/rust-lang/rust/commit/42d0f8351aafa58755c44f49358675da208c4d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d0f8351aafa58755c44f49358675da208c4d51/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8", "html_url": "https://github.com/rust-lang/rust/commit/f84a734a8ea3fdd9abe0217797d7a07f31bb8ee8"}, {"sha": "6fe13f62c1e73e6d102ce3673ad31d7195169560", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe13f62c1e73e6d102ce3673ad31d7195169560", "html_url": "https://github.com/rust-lang/rust/commit/6fe13f62c1e73e6d102ce3673ad31d7195169560"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "1796c9d197c2b372dcf220d0fc19f5cd02d06ce0", "filename": "src/test/incremental/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-85360-eval-obligation-ice.rs?ref=42d0f8351aafa58755c44f49358675da208c4d51", "patch": "@@ -0,0 +1,118 @@\n+// revisions:cfail1 cfail2\n+//[cfail1] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=not-loaded\n+//[cfail2] compile-flags: --crate-type=lib --edition=2021 -Zassert-incr-state=loaded\n+// build-pass\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}, {"sha": "19131684a481b66df9fbd83745ca054e0aa8ce12", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.rs?ref=42d0f8351aafa58755c44f49358675da208c4d51", "patch": "@@ -0,0 +1,143 @@\n+// compile-flags: --edition=2021\n+\n+#![feature(rustc_attrs)]\n+\n+use core::any::Any;\n+use core::marker::PhantomData;\n+\n+fn main() {\n+    test::<MaskedStorage<GenericComp<Pos>>>(make());\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+\n+    test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn test<T: Sized>(_: T) {}\n+\n+fn make<T>() -> T {\n+    todo!()\n+}\n+\n+struct DerefWrap<T>(T);\n+\n+impl<T> core::ops::Deref for DerefWrap<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+struct Storage<T, D> {\n+    phantom: PhantomData<(T, D)>,\n+}\n+\n+type ReadStorage<T> = Storage<T, DerefWrap<MaskedStorage<T>>>;\n+\n+pub trait Component {\n+    type Storage;\n+}\n+\n+struct VecStorage;\n+\n+struct Pos;\n+\n+impl Component for Pos {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp<T> {\n+    type Storage = VecStorage;\n+}\n+\n+struct GenericComp2<T> {\n+    _t: T,\n+}\n+\n+impl<T: 'static> Component for GenericComp2<T> where for<'a> &'a bool: 'a {\n+    type Storage = VecStorage;\n+}\n+\n+struct ReadData {\n+    pos_interpdata: ReadStorage<GenericComp<Pos>>,\n+}\n+\n+trait System {\n+    type SystemData;\n+\n+    fn run(data: Self::SystemData, any: Box<dyn Any>);\n+}\n+\n+struct Sys;\n+\n+impl System for Sys {\n+    type SystemData = (ReadData, ReadStorage<Pos>);\n+\n+    fn run((data, pos): Self::SystemData, any: Box<dyn Any>) {\n+        <ReadStorage<GenericComp<Pos>> as SystemData>::setup(any);\n+\n+        ParJoin::par_join((&pos, &data.pos_interpdata));\n+    }\n+}\n+\n+trait ParJoin {\n+    fn par_join(self)\n+    where\n+        Self: Sized,\n+    {\n+    }\n+}\n+\n+impl<'a, T, D> ParJoin for &'a Storage<T, D>\n+where\n+    T: Component,\n+    D: core::ops::Deref<Target = MaskedStorage<T>>,\n+    T::Storage: Sync,\n+{\n+}\n+\n+impl<A, B> ParJoin for (A, B)\n+where\n+    A: ParJoin,\n+    B: ParJoin,\n+{\n+}\n+\n+pub trait SystemData {\n+    fn setup(any: Box<dyn Any>);\n+}\n+\n+impl<T: 'static> SystemData for ReadStorage<T>\n+where\n+    T: Component,\n+{\n+    fn setup(any: Box<dyn Any>) {\n+        let storage: &MaskedStorage<T> = any.downcast_ref().unwrap();\n+\n+        <dyn Any as CastFrom<MaskedStorage<T>>>::cast(&storage);\n+    }\n+}\n+\n+pub struct MaskedStorage<T: Component> {\n+    _inner: T::Storage,\n+}\n+\n+pub unsafe trait CastFrom<T> {\n+    fn cast(t: &T) -> &Self;\n+}\n+\n+unsafe impl<T> CastFrom<T> for dyn Any\n+where\n+    T: Any + 'static,\n+{\n+    fn cast(t: &T) -> &Self {\n+        t\n+    }\n+}"}, {"sha": "ebf977dd6805140376614a89a62a690030e795ac", "filename": "src/test/ui/traits/issue-85360-eval-obligation-ice.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d0f8351aafa58755c44f49358675da208c4d51/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85360-eval-obligation-ice.stderr?ref=42d0f8351aafa58755c44f49358675da208c4d51", "patch": "@@ -0,0 +1,38 @@\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |         - predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:9:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |            ----- predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:13:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |         - predicate\n+\n+error: evaluate(Binder(TraitPredicate(<MaskedStorage<GenericComp2<Pos>> as std::marker::Sized>, polarity:Positive), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-85360-eval-obligation-ice.rs:13:5\n+   |\n+LL |     test::<MaskedStorage<GenericComp2<Pos>>>(make());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn test<T: Sized>(_: T) {}\n+   |            ----- predicate\n+\n+error: aborting due to 4 previous errors\n+"}]}