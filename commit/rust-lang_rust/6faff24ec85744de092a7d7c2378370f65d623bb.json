{"sha": "6faff24ec85744de092a7d7c2378370f65d623bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWZmMjRlYzg1NzQ0ZGUwOTJhN2Q3YzIzNzgzNzBmNjVkNjIzYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T20:12:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T20:12:09Z"}, "message": "auto merge of #19144 : michaelwoerister/rust/lldb-scripts, r=alexcrichton\n\nThis PR adds the `rust-lldb` script (feel free to bikeshed about the name).\r\nThe script will start LLDB and, before doing anything else, load [LLDB type summaries](http://lldb.llvm.org/varformats.html) that will make LLDB print values with Rust syntax. Just use the script like you would normally use LLDB:\r\n\r\n```\r\nrust-lldb executable-to-debug --and-any-other-commandline --args \r\n```\r\nThe script will just add one additional commandline argument to the LLDB invocation and pass along the rest of the arguments to LLDB after that.\r\n\r\nGiven the following program...\r\n```rust\r\nfn main() {\r\n\tlet x = Some(1u);\r\n\tlet y = [0, 1, 2i];\r\n\tlet z = (x, y);\r\n\r\n\tprintln!(\"{} {} {}\", x, y, z);\r\n}\r\n```\r\n...*without* the 'LLDB type summaries', values will be printed something like this...\r\n```\r\n(lldb) p x\r\n(core::option::Option<uint>) $3 = {\r\n   = (RUST$ENUM$DISR = Some)\r\n   = (RUST$ENUM$DISR = Some, 1)\r\n}\r\n(lldb) p y\r\n(long [3]) $4 = ([0] = 0, [1] = 1, [2] = 2)\r\n(lldb) p z\r\n((core::option::Option<uint>, [int, ..3])) $5 = {\r\n   = {\r\n     = (RUST$ENUM$DISR = Some)\r\n     = (RUST$ENUM$DISR = Some, 1)\r\n  }\r\n   = ([0] = 0, [1] = 1, [2] = 2)\r\n}\r\n```\r\n...*with* the 'LLDB type summaries', values will be printed like this:\r\n```\r\n(lldb) p x\r\n(core::option::Option<uint>) $0 = Some(1)\r\n(lldb) p y\r\n(long [3]) $1 = [0, 1, 2]\r\n(lldb) p z\r\n((core::option::Option<uint>, [int, ..3])) $2 = (Some(1), [0, 1, 2])\r\n```\r\n\r\nThe 'LLDB type summaries' used by the script have been in use for a while in the LLDB autotests but I still consider them to be of alpha-version quality. If you see anything weird when you use them, feel free to file an issue.\r\n\r\nThe script will use whatever Rust \"installation\" is in PATH, so whichever `rustc` will be called if you type `rustc` into the console, this is the one that the script will ask for the LLDB extension module location. The build system will take care of putting the script and LLDB python module in the right places, whether you want to use the stage1 or stage2 compiler or the one coming with `make install` / `rustup.sh`.\r\n\r\nSince I don't have much experience with the build system, Makefiles and shell scripts, please look these changes over carefully.", "tree": {"sha": "b6e67e9a410599ef74e608b2cb015a8ad5a9979e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e67e9a410599ef74e608b2cb015a8ad5a9979e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6faff24ec85744de092a7d7c2378370f65d623bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6faff24ec85744de092a7d7c2378370f65d623bb", "html_url": "https://github.com/rust-lang/rust/commit/6faff24ec85744de092a7d7c2378370f65d623bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6faff24ec85744de092a7d7c2378370f65d623bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a44875af985de43d514192d43ef260a24e83d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a44875af985de43d514192d43ef260a24e83d26", "html_url": "https://github.com/rust-lang/rust/commit/1a44875af985de43d514192d43ef260a24e83d26"}, {"sha": "67ba096cc30ec0f5fac8deec23d5557012e33d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ba096cc30ec0f5fac8deec23d5557012e33d27", "html_url": "https://github.com/rust-lang/rust/commit/67ba096cc30ec0f5fac8deec23d5557012e33d27"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "17ae845bf0773da92ce98f685375a92e3e709b2f", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -198,6 +198,8 @@ include $(CFG_SRC_DIR)mk/rustllvm.mk\n include $(CFG_SRC_DIR)mk/docs.mk\n # LLVM\n include $(CFG_SRC_DIR)mk/llvm.mk\n+# Rules for installing debugger scripts\n+include $(CFG_SRC_DIR)mk/debuggers.mk\n \n ######################################################################\n # Secondary makefiles, conditionalized for speed"}, {"sha": "aadc55ba6c4977dda86d5e5567c1ea6a8681b108", "filename": "mk/clean.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -63,6 +63,7 @@ clean-generic-$(2)-$(1):\n          -name '*.lib' -o \\\n          -name '*.dll' -o \\\n          -name '*.def' -o \\\n+         -name '*.py' -o \\\n          -name '*.bc' \\\n          \\) \\\n          | xargs rm -f\n@@ -78,7 +79,7 @@ define CLEAN_HOST_STAGE_N\n \n clean$(1)_H_$(2): \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS),clean$(1)_H_$(2)-tool-$$(tool))\n+\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS),clean$(1)_H_$(2)-tool-$$(tool))\n \t$$(Q)rm -fr $(2)/rt/libbacktrace\n \n clean$(1)_H_$(2)-tool-%:\n@@ -98,7 +99,7 @@ define CLEAN_TARGET_STAGE_N\n \n clean$(1)_T_$(2)_H_$(3): \\\n \t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n+\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libcompiler-rt.a\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix"}, {"sha": "54955f06295fc168eb069bb170601d02ed96a54b", "filename": "mk/debuggers.mk", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fdebuggers.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fdebuggers.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdebuggers.mk?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -0,0 +1,59 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+######################################################################\n+# Copy debugger related scripts\n+######################################################################\n+\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS=lldb_rust_formatters.py\n+DEBUGGER_BIN_SCRIPTS=rust-lldb\n+\n+DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS=$(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS), \\\n+                                     $(CFG_SRC_DIR)src/etc/$(script))\n+DEBUGGER_BIN_SCRIPTS_ABS=$(foreach script,$(DEBUGGER_BIN_SCRIPTS), \\\n+                             $(CFG_SRC_DIR)src/etc/$(script))\n+\n+DEBUGGER_SCRIPTS_ALL=$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $(DEBUGGER_BIN_SCRIPTS_ABS)\n+\n+# $(1) - the stage to copy to\n+# $(2) - the host triple\n+define DEF_INSTALL_DEBUGGER_SCRIPTS_HOST\n+\n+tmp/install-debugger-scripts$(1)_H_$(2).done: $$(DEBUGGER_SCRIPTS_ALL)\n+\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n+\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ABS) $$(HBIN$(1)_H_$(2))\n+\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n+\t$(Q)touch $$@\n+endef\n+\n+# Expand host make-targets for all stages\n+$(foreach stage,$(STAGES), \\\n+  $(foreach host,$(CFG_HOST), \\\n+    $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_HOST,$(stage),$(host)))))\n+\n+# $(1) is the stage number\n+# $(2) is the target triple\n+# $(3) is the host triple\n+define DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET\n+\n+tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3).done: $$(DEBUGGER_SCRIPTS_ALL)\n+\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n+\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n+\t$(Q)touch $$@\n+endef\n+\n+# Expand target make-targets for all stages\n+$(foreach stage,$(STAGES), \\\n+  $(foreach target,$(CFG_TARGET), \\\n+    $(foreach host,$(CFG_HOST), \\\n+      $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET,$(stage),$(target),$(host))))))"}, {"sha": "4aed1cea9ca0987dd637ffbdd1a5fdac70e2307c", "filename": "mk/main.mk", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -356,7 +356,8 @@ HSREQ$(1)_H_$(3) = $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\n else\n HSREQ$(1)_H_$(3) = \\\n \t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t$$(MKFILE_DEPS)\n+\t$$(MKFILE_DEPS) \\\n+\ttmp/install-debugger-scripts$(1)_H_$(3).done\n endif\n \n # Prerequisites for using the stageN compiler to build target artifacts\n@@ -370,7 +371,8 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(foreach dep,$$(TARGET_CRATES), \\\n-\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n+\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n+\ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3).done\n \n # Prerequisites for a working stageN compiler and complete set of target\n # libraries"}, {"sha": "d404d3d2950e04a931740f3e926975ad4f97efd2", "filename": "mk/prepare.mk", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -155,7 +155,7 @@ prepare-base-$(1): PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELAT\n prepare-base-$(1): PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n prepare-base-$(1): prepare-everything-$(1)\n \n-prepare-everything-$(1): prepare-host-$(1) prepare-targets-$(1)\n+prepare-everything-$(1): prepare-host-$(1) prepare-targets-$(1) prepare-debugger-scripts-$(1)\n \n prepare-host-$(1): prepare-host-tools-$(1)\n \n@@ -167,8 +167,13 @@ prepare-host-tools-$(1): \\\n prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR))\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR))\n+\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR)/rustlib/etc)\n \t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n \n+prepare-debugger-scripts-$(1): prepare-host-dirs-$(1) $(DEBUGGER_SCRIPTS_ALL)\n+\t$$(Q)$$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_ABS) $$(PREPARE_DEST_BIN_DIR)\n+\t$$(Q)$$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ABS) $$(PREPARE_DEST_LIB_DIR)/rustlib/etc\n+\n $$(foreach tool,$$(PREPARE_TOOLS), \\\n   $$(foreach host,$$(CFG_HOST), \\\n       $$(eval $$(call DEF_PREPARE_HOST_TOOL,$$(tool),$$(PREPARE_STAGE),$$(host),$(1)))))"}, {"sha": "7924d63c8e0d577f51367bcc2b3db6e39c02dbd8", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -69,8 +69,14 @@ def print_struct_val_starting_from(field_start_index, val, internal_dict):\n   assert val.GetType().GetTypeClass() == lldb.eTypeClassStruct\n \n   t = val.GetType()\n-  has_field_names = type_has_field_names(t)\n   type_name = extract_type_name(t.GetName())\n+  num_children = val.num_children\n+\n+  if (num_children - field_start_index) == 0:\n+    # The only field of this struct is the enum discriminant\n+    return type_name\n+\n+  has_field_names = type_has_field_names(t)\n \n   if has_field_names:\n       template = \"%(type_name)s {\\n%(body)s\\n}\"\n@@ -83,8 +89,6 @@ def print_struct_val_starting_from(field_start_index, val, internal_dict):\n     # this is a tuple, so don't print the type name\n     type_name = \"\"\n \n-  num_children = val.num_children\n-\n   def render_child(child_index):\n     this = \"\"\n     if has_field_names:\n@@ -105,7 +109,6 @@ def print_enum_val(val, internal_dict):\n \n   assert val.GetType().GetTypeClass() == lldb.eTypeClassUnion\n \n-\n   if val.num_children == 1:\n     # This is either an enum with just one variant, or it is an Option-like enum\n     # where the discriminant is encoded in a non-nullable pointer field. We find"}, {"sha": "19f36df7dbab4f433b2cd3f90c13e63cd991a29e", "filename": "src/etc/rust-lldb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Fetc%2Frust-lldb", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Fetc%2Frust-lldb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-lldb?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/sh\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Exit if anything fails\n+set -e\n+\n+# Create a tempfile containing the LLDB script we want to execute on startup\n+TMPFILE=`mktemp /tmp/rust-lldb-commands.XXXXXX`\n+\n+# Make sure to delete the tempfile no matter what\n+trap \"rm -f $TMPFILE; exit\" INT TERM EXIT\n+\n+# Find out where to look for the pretty printer Python module\n+RUSTC_SYSROOT=`rustc -Zprint-sysroot`\n+\n+# Write the LLDB script to the tempfile\n+echo \"command script import \\\"$RUSTC_SYSROOT/lib/rustlib/etc/lldb_rust_formatters.py\\\"\" >> $TMPFILE\n+echo \"type summary add --no-value --python-function lldb_rust_formatters.print_val -x \\\".*\\\" --category Rust\" >> $TMPFILE\n+echo \"type category enable Rust\" >> $TMPFILE\n+\n+# Call LLDB with the script added to the argument list\n+lldb --source-before-file=\"$TMPFILE\" \"$@\""}, {"sha": "8b4918b6db0f30c0d99168ca3e86fd3ccf3731a7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -212,13 +212,14 @@ debugging_opts!(\n         FLOWGRAPH_PRINT_LOANS,\n         FLOWGRAPH_PRINT_MOVES,\n         FLOWGRAPH_PRINT_ASSIGNS,\n-        FLOWGRAPH_PRINT_ALL\n+        FLOWGRAPH_PRINT_ALL,\n+        PRINT_SYSROOT\n     ]\n     0\n )\n \n pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n-    vec!((\"verbose\", \"in general, enable more debug printouts\", VERBOSE),\n+    vec![(\"verbose\", \"in general, enable more debug printouts\", VERBOSE),\n      (\"time-passes\", \"measure time of each rustc pass\", TIME_PASSES),\n      (\"count-llvm-insns\", \"count where LLVM \\\n                            instrs originate\", COUNT_LLVM_INSNS),\n@@ -256,7 +257,9 @@ pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> {\n      (\"flowgraph-print-assigns\", \"Include assignment analysis data in \\\n                        --pretty flowgraph output\", FLOWGRAPH_PRINT_ASSIGNS),\n      (\"flowgraph-print-all\", \"Include all dataflow analysis data in \\\n-                       --pretty flowgraph output\", FLOWGRAPH_PRINT_ALL))\n+                       --pretty flowgraph output\", FLOWGRAPH_PRINT_ALL),\n+     (\"print-sysroot\", \"Print the sysroot as used by this rustc invocation\",\n+      PRINT_SYSROOT)]\n }\n \n #[deriving(Clone)]"}, {"sha": "658be9169afdd5fe0e84f0a1d5287bf05bc48e1d", "filename": "src/librustc_trans/driver/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faff24ec85744de092a7d7c2378370f65d623bb/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fmod.rs?ref=6faff24ec85744de092a7d7c2378370f65d623bb", "patch": "@@ -75,6 +75,13 @@ fn run_compiler(args: &[String]) {\n                 describe_lints(&ls, false);\n                 return;\n             }\n+\n+            let sess = build_session(sopts, None, descriptions);\n+            if sess.debugging_opt(config::PRINT_SYSROOT) {\n+                println!(\"{}\", sess.sysroot().display());\n+                return;\n+            }\n+\n             early_error(\"no input filename given\");\n         }\n         1u => {"}]}