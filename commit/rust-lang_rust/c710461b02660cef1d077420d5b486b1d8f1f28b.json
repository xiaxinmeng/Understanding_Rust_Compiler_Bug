{"sha": "c710461b02660cef1d077420d5b486b1d8f1f28b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTA0NjFiMDI2NjBjZWYxZDA3NzQyMGQ1YjQ4NmIxZDhmMWYyOGI=", "commit": {"author": {"name": "Hanif Bin Ariffin", "email": "hanif.ariffin.4326@gmail.com", "date": "2020-04-26T01:18:47Z"}, "committer": {"name": "Hanif Bin Ariffin", "email": "hanif.ariffin.4326@gmail.com", "date": "2020-06-13T19:06:22Z"}, "message": "Added some unsafety documentation to partition_equal", "tree": {"sha": "6bb06b96ddfe99e93dbafe65e96ae7202f86a703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb06b96ddfe99e93dbafe65e96ae7202f86a703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c710461b02660cef1d077420d5b486b1d8f1f28b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c710461b02660cef1d077420d5b486b1d8f1f28b", "html_url": "https://github.com/rust-lang/rust/commit/c710461b02660cef1d077420d5b486b1d8f1f28b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c710461b02660cef1d077420d5b486b1d8f1f28b/comments", "author": {"login": "hbina", "id": 6733660, "node_id": "MDQ6VXNlcjY3MzM2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6733660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hbina", "html_url": "https://github.com/hbina", "followers_url": "https://api.github.com/users/hbina/followers", "following_url": "https://api.github.com/users/hbina/following{/other_user}", "gists_url": "https://api.github.com/users/hbina/gists{/gist_id}", "starred_url": "https://api.github.com/users/hbina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hbina/subscriptions", "organizations_url": "https://api.github.com/users/hbina/orgs", "repos_url": "https://api.github.com/users/hbina/repos", "events_url": "https://api.github.com/users/hbina/events{/privacy}", "received_events_url": "https://api.github.com/users/hbina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hbina", "id": 6733660, "node_id": "MDQ6VXNlcjY3MzM2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6733660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hbina", "html_url": "https://github.com/hbina", "followers_url": "https://api.github.com/users/hbina/followers", "following_url": "https://api.github.com/users/hbina/following{/other_user}", "gists_url": "https://api.github.com/users/hbina/gists{/gist_id}", "starred_url": "https://api.github.com/users/hbina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hbina/subscriptions", "organizations_url": "https://api.github.com/users/hbina/orgs", "repos_url": "https://api.github.com/users/hbina/repos", "events_url": "https://api.github.com/users/hbina/events{/privacy}", "received_events_url": "https://api.github.com/users/hbina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c471519b999265c45595750e5b98de6865325650", "url": "https://api.github.com/repos/rust-lang/rust/commits/c471519b999265c45595750e5b98de6865325650", "html_url": "https://github.com/rust-lang/rust/commit/c471519b999265c45595750e5b98de6865325650"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "2ec4f43b1f7871d18905c5bf03e763de2b2941d3", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c710461b02660cef1d077420d5b486b1d8f1f28b/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c710461b02660cef1d077420d5b486b1d8f1f28b/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=c710461b02660cef1d077420d5b486b1d8f1f28b", "patch": "@@ -435,15 +435,17 @@ where\n         // Find the first pair of out-of-order elements.\n         let mut l = 0;\n         let mut r = v.len();\n+\n+        // SAFETY: The unsafety below involves indexing an array.\n+        // For the first one: we already do the bound checking here with `l<r`.\n+        // For the secondn one: the minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n         unsafe {\n             // Find the first element greater than or equal to the pivot.\n-            // SAFETY: We already do the bound checking here with `l<r`.\n             while l < r && is_less(v.get_unchecked(l), pivot) {\n                 l += 1;\n             }\n \n             // Find the last element smaller that the pivot.\n-            // SAFETY: The minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n             while l < r && !is_less(v.get_unchecked(r - 1), pivot) {\n                 r -= 1;\n             }\n@@ -477,6 +479,7 @@ where\n \n     // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n     // operation panics, the pivot will be automatically written back into the slice.\n+    // SAFETY: The pointer here is valid because it is obtained from a reference to a slice.\n     let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n     let _pivot_guard = CopyOnDrop { src: &mut *tmp, dest: pivot };\n     let pivot = &*tmp;\n@@ -485,15 +488,16 @@ where\n     let mut l = 0;\n     let mut r = v.len();\n     loop {\n+        // SAFETY: The unsafety below involves indexing an array.\n+        // For the first one: we already do the bound checking here with `l<r`.\n+        // For the second one: the minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n         unsafe {\n             // Find the first element greater than the pivot.\n-            // SAFETY: We already do the bound checking here with `l<r`\n             while l < r && !is_less(pivot, v.get_unchecked(l)) {\n                 l += 1;\n             }\n \n             // Find the last element equal to the pivot.\n-            // SAFETY: The minimum value for `l` is 0 and the maximum value for `r` is `v.len().`\n             while l < r && is_less(pivot, v.get_unchecked(r - 1)) {\n                 r -= 1;\n             }"}]}