{"sha": "c582e52a1be88d4d0465f3eb396640d0b619dedf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODJlNTJhMWJlODhkNGQwNDY1ZjNlYjM5NjY0MGQwYjYxOWRlZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-15T08:51:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-15T08:53:16Z"}, "message": "Use standard test style", "tree": {"sha": "2268b025c3039e6fb12c0cb7257d087912eb52ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2268b025c3039e6fb12c0cb7257d087912eb52ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c582e52a1be88d4d0465f3eb396640d0b619dedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c582e52a1be88d4d0465f3eb396640d0b619dedf", "html_url": "https://github.com/rust-lang/rust/commit/c582e52a1be88d4d0465f3eb396640d0b619dedf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c582e52a1be88d4d0465f3eb396640d0b619dedf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51f42db1d5704008e50ceb101c8e13bcef0524a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f42db1d5704008e50ceb101c8e13bcef0524a0", "html_url": "https://github.com/rust-lang/rust/commit/51f42db1d5704008e50ceb101c8e13bcef0524a0"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "fe557424207e0373fb6812c47e6a2f26ec8539b1", "filename": "crates/assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 67, "deletions": 62, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c582e52a1be88d4d0465f3eb396640d0b619dedf/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c582e52a1be88d4d0465f3eb396640d0b619dedf/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=c582e52a1be88d4d0465f3eb396640d0b619dedf", "patch": "@@ -4,6 +4,7 @@ use rustc_hash::FxHashMap;\n use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n use ide_db::RootDatabase;\n use syntax::{algo, ast, match_ast, AstNode, SyntaxKind, SyntaxKind::*, SyntaxNode};\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -38,6 +39,7 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     });\n \n     if sorted_fields == fields {\n+        mark::hit!(reorder_sorted_fields);\n         return None;\n     }\n \n@@ -107,22 +109,25 @@ fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashM\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::mark;\n+\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n     #[test]\n-    fn not_applicable_if_sorted() {\n+    fn reorder_sorted_fields() {\n+        mark::check!(reorder_sorted_fields);\n         check_assist_not_applicable(\n             reorder_fields,\n             r#\"\n-        struct Foo {\n-            foo: i32,\n-            bar: i32,\n-        }\n+struct Foo {\n+    foo: i32,\n+    bar: i32,\n+}\n \n-        const test: Foo = <|>Foo { foo: 0, bar: 0 };\n-        \"#,\n+const test: Foo = <|>Foo { foo: 0, bar: 0 };\n+\"#,\n         )\n     }\n \n@@ -131,9 +136,9 @@ mod tests {\n         check_assist_not_applicable(\n             reorder_fields,\n             r#\"\n-        struct Foo {};\n-        const test: Foo = <|>Foo {}\n-        \"#,\n+struct Foo {};\n+const test: Foo = <|>Foo {}\n+\"#,\n         )\n     }\n \n@@ -142,13 +147,13 @@ mod tests {\n         check_assist(\n             reorder_fields,\n             r#\"\n-        struct Foo {foo: i32, bar: i32};\n-        const test: Foo = <|>Foo {bar: 0, foo: 1}\n-        \"#,\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = <|>Foo {bar: 0, foo: 1}\n+\"#,\n             r#\"\n-        struct Foo {foo: i32, bar: i32};\n-        const test: Foo = Foo {foo: 1, bar: 0}\n-        \"#,\n+struct Foo {foo: i32, bar: i32};\n+const test: Foo = Foo {foo: 1, bar: 0}\n+\"#,\n         )\n     }\n \n@@ -157,25 +162,25 @@ mod tests {\n         check_assist(\n             reorder_fields,\n             r#\"\n-        struct Foo { foo: i64, bar: i64, baz: i64 }\n+struct Foo { foo: i64, bar: i64, baz: i64 }\n \n-        fn f(f: Foo) -> {\n-            match f {\n-                <|>Foo { baz: 0, ref mut bar, .. } => (),\n-                _ => ()\n-            }\n-        }\n-        \"#,\n+fn f(f: Foo) -> {\n+    match f {\n+        <|>Foo { baz: 0, ref mut bar, .. } => (),\n+        _ => ()\n+    }\n+}\n+\"#,\n             r#\"\n-        struct Foo { foo: i64, bar: i64, baz: i64 }\n+struct Foo { foo: i64, bar: i64, baz: i64 }\n \n-        fn f(f: Foo) -> {\n-            match f {\n-                Foo { ref mut bar, baz: 0, .. } => (),\n-                _ => ()\n-            }\n-        }\n-        \"#,\n+fn f(f: Foo) -> {\n+    match f {\n+        Foo { ref mut bar, baz: 0, .. } => (),\n+        _ => ()\n+    }\n+}\n+\"#,\n         )\n     }\n \n@@ -184,39 +189,39 @@ mod tests {\n         check_assist(\n             reorder_fields,\n             r#\"\n-            struct Foo {\n-                foo: String,\n-                bar: String,\n-            }\n+struct Foo {\n+    foo: String,\n+    bar: String,\n+}\n \n-            impl Foo {\n-                fn new() -> Foo {\n-                    let foo = String::new();\n-                    <|>Foo {\n-                        bar: foo.clone(),\n-                        extra: \"Extra field\",\n-                        foo,\n-                    }\n-                }\n-            }\n-            \"#,\n+impl Foo {\n+    fn new() -> Foo {\n+        let foo = String::new();\n+        <|>Foo {\n+            bar: foo.clone(),\n+            extra: \"Extra field\",\n+            foo,\n+        }\n+    }\n+}\n+\"#,\n             r#\"\n-            struct Foo {\n-                foo: String,\n-                bar: String,\n-            }\n+struct Foo {\n+    foo: String,\n+    bar: String,\n+}\n \n-            impl Foo {\n-                fn new() -> Foo {\n-                    let foo = String::new();\n-                    Foo {\n-                        foo,\n-                        bar: foo.clone(),\n-                        extra: \"Extra field\",\n-                    }\n-                }\n-            }\n-            \"#,\n+impl Foo {\n+    fn new() -> Foo {\n+        let foo = String::new();\n+        Foo {\n+            foo,\n+            bar: foo.clone(),\n+            extra: \"Extra field\",\n+        }\n+    }\n+}\n+\"#,\n         )\n     }\n }"}]}