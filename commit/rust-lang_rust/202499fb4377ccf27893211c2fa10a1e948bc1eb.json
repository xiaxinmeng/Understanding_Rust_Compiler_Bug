{"sha": "202499fb4377ccf27893211c2fa10a1e948bc1eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMjQ5OWZiNDM3N2NjZjI3ODkzMjExYzJmYTEwYTFlOTQ4YmMxZWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:01:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:01:13Z"}, "message": "Rollup merge of #73304 - dtolnay:socketeq, r=Mark-Simulacrum\n\nRevert heterogeneous SocketAddr PartialEq impls\n\nOriginally added in #72239.\n\nThese lead to inference regressions (mostly in tests) in code that looks like:\n\n```rust\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nassert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n```\n\nThat compiles as of stable 1.44.0 but fails in beta with:\n\n```console\nerror[E0284]: type annotations needed\n --> src/main.rs:3:41\n  |\n3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n  |                                         ^^^^^ cannot infer type for type parameter `F` declared on the associated function `parse`\n  |\n  = note: cannot satisfy `<_ as std::str::FromStr>::Err == _`\nhelp: consider specifying the type argument in the method call\n  |\n3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse::<F>().unwrap());\n  |\n```\n\nCloses #73242.", "tree": {"sha": "7cbfada01c73e64e87db2800119da486574695bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cbfada01c73e64e87db2800119da486574695bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202499fb4377ccf27893211c2fa10a1e948bc1eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe50bpCRBK7hj4Ov3rIwAAdHIIACuUnjdq87cCTy/XmshXELXZ\nsvb3B6kPeQzUSAK7HQJjS2bIOPqgchtUdMly6OI3RILIkZOCe4GvBiCfdHPfzyTz\nHvrUu9HljOK8ksfwX0QClr89L3FvqpzhqG9Z3F2Rtxgh8yoDtXzY2QcrUayWPaE9\nBm02GRnKGmzbjf1QLolgJ1Rs3IUUlzWYFWryo7gDmMf3cIntevElX03M9Bt4MyIh\nxDTt5p5XWlCdz6U699a3mZELut6c1hnnTT7in0W+qul9h590cr8Mp5p1R2guxQcY\nQF0i7XuyoovwESVg2Z68FcQBHmk2uJ62UaWeF1z2P7edO3zIEiax7ZyHMGVzK8k=\n=XOCL\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cbfada01c73e64e87db2800119da486574695bb\nparent fb75d4a74615d0c28d3ab7e3cf97db2bf8cf677f\nparent 204c236ad5b632294d8794e729326be8053ab2aa\nauthor Ralf Jung <post@ralfj.de> 1592215273 +0200\ncommitter GitHub <noreply@github.com> 1592215273 +0200\n\nRollup merge of #73304 - dtolnay:socketeq, r=Mark-Simulacrum\n\nRevert heterogeneous SocketAddr PartialEq impls\n\nOriginally added in #72239.\n\nThese lead to inference regressions (mostly in tests) in code that looks like:\n\n```rust\nlet socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\nassert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n```\n\nThat compiles as of stable 1.44.0 but fails in beta with:\n\n```console\nerror[E0284]: type annotations needed\n --> src/main.rs:3:41\n  |\n3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n  |                                         ^^^^^ cannot infer type for type parameter `F` declared on the associated function `parse`\n  |\n  = note: cannot satisfy `<_ as std::str::FromStr>::Err == _`\nhelp: consider specifying the type argument in the method call\n  |\n3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse::<F>().unwrap());\n  |\n```\n\nCloses #73242.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202499fb4377ccf27893211c2fa10a1e948bc1eb", "html_url": "https://github.com/rust-lang/rust/commit/202499fb4377ccf27893211c2fa10a1e948bc1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202499fb4377ccf27893211c2fa10a1e948bc1eb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb75d4a74615d0c28d3ab7e3cf97db2bf8cf677f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb75d4a74615d0c28d3ab7e3cf97db2bf8cf677f", "html_url": "https://github.com/rust-lang/rust/commit/fb75d4a74615d0c28d3ab7e3cf97db2bf8cf677f"}, {"sha": "204c236ad5b632294d8794e729326be8053ab2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/204c236ad5b632294d8794e729326be8053ab2aa", "html_url": "https://github.com/rust-lang/rust/commit/204c236ad5b632294d8794e729326be8053ab2aa"}], "stats": {"total": 45, "additions": 5, "deletions": 40}, "files": [{"sha": "b8fa1a7f744d3ca432d5338cb80ad31bf77569ce", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/202499fb4377ccf27893211c2fa10a1e948bc1eb/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202499fb4377ccf27893211c2fa10a1e948bc1eb/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=202499fb4377ccf27893211c2fa10a1e948bc1eb", "patch": "@@ -694,42 +694,6 @@ impl PartialEq for SocketAddrV6 {\n             && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n     }\n }\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddrV4> for SocketAddr {\n-    fn eq(&self, other: &SocketAddrV4) -> bool {\n-        match self {\n-            SocketAddr::V4(v4) => v4 == other,\n-            SocketAddr::V6(_) => false,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddrV6> for SocketAddr {\n-    fn eq(&self, other: &SocketAddrV6) -> bool {\n-        match self {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(v6) => v6 == other,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddr> for SocketAddrV4 {\n-    fn eq(&self, other: &SocketAddr) -> bool {\n-        match other {\n-            SocketAddr::V4(v4) => self == v4,\n-            SocketAddr::V6(_) => false,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddr> for SocketAddrV6 {\n-    fn eq(&self, other: &SocketAddr) -> bool {\n-        match other {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(v6) => self == v6,\n-        }\n-    }\n-}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV4 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1242,12 +1206,8 @@ mod tests {\n         // equality\n         assert_eq!(v4_1, v4_1);\n         assert_eq!(v6_1, v6_1);\n-        assert_eq!(v4_1, SocketAddr::V4(v4_1));\n-        assert_eq!(v6_1, SocketAddr::V6(v6_1));\n         assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n         assert_eq!(SocketAddr::V6(v6_1), SocketAddr::V6(v6_1));\n-        assert!(v4_1 != SocketAddr::V6(v6_1));\n-        assert!(v6_1 != SocketAddr::V4(v4_1));\n         assert!(v4_1 != v4_2);\n         assert!(v6_1 != v6_2);\n \n@@ -1268,5 +1228,10 @@ mod tests {\n         assert!(v6_1 < v6_3);\n         assert!(v4_3 > v4_1);\n         assert!(v6_3 > v6_1);\n+\n+        // compare with an inferred right-hand side\n+        assert_eq!(v4_1, \"224.120.45.1:23456\".parse().unwrap());\n+        assert_eq!(v6_1, \"[2001:db8:f00::1002]:23456\".parse().unwrap());\n+        assert_eq!(SocketAddr::V4(v4_1), \"224.120.45.1:23456\".parse().unwrap());\n     }\n }"}]}