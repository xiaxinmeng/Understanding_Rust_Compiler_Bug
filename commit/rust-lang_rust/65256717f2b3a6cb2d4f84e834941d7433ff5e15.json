{"sha": "65256717f2b3a6cb2d4f84e834941d7433ff5e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MjU2NzE3ZjJiM2E2Y2IyZDRmODRlODM0OTQxZDc0MzNmZjVlMTU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-01-30T03:45:18Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-02T17:01:53Z"}, "message": "Add better diagnostic for missing where clause\n\nPreviously, it's not clear what exactly should be added in the suggested where clause,\nso this adds an example to demonstrate.", "tree": {"sha": "07fd23f15d80b093fd8fc7387f3f0cab47b74d9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fd23f15d80b093fd8fc7387f3f0cab47b74d9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65256717f2b3a6cb2d4f84e834941d7433ff5e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65256717f2b3a6cb2d4f84e834941d7433ff5e15", "html_url": "https://github.com/rust-lang/rust/commit/65256717f2b3a6cb2d4f84e834941d7433ff5e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65256717f2b3a6cb2d4f84e834941d7433ff5e15/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04caa632dd10c2bf64b69524c7f9c4c30a436877", "url": "https://api.github.com/repos/rust-lang/rust/commits/04caa632dd10c2bf64b69524c7f9c4c30a436877", "html_url": "https://github.com/rust-lang/rust/commit/04caa632dd10c2bf64b69524c7f9c4c30a436877"}], "stats": {"total": 111, "additions": 93, "deletions": 18}, "files": [{"sha": "5240df6cf1e30c0e6eaae17407f0894daddb3a38", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -16,8 +16,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::abstract_const::{Node, NodeId};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n-use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -43,10 +42,6 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 for pred in param_env.caller_bounds() {\n                     match pred.kind().skip_binder() {\n                         ty::PredicateKind::ConstEvaluatable(b_def, b_substs) => {\n-                            debug!(\n-                                \"is_const_evaluatable: caller_bound={:?}, {:?}\",\n-                                b_def, b_substs\n-                            );\n                             if b_def == def && b_substs == substs {\n                                 debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n                                 return Ok(());\n@@ -100,15 +95,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     }\n                     FailureKind::MentionsParam => {\n                         // FIXME(const_evaluatable_checked): Better error message.\n-                        infcx\n-                            .tcx\n-                            .sess\n-                            .struct_span_err(span, \"unconstrained generic constant\")\n-                            .span_help(\n+                        let mut err =\n+                            infcx.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n+                        let const_span = tcx.def_span(def.did);\n+                        // FIXME(const_evaluatable_checked): Update this suggestion once\n+                        // explicit const evaluatable bounds are implemented.\n+                        if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(const_span)\n+                        {\n+                            err.span_help(\n                                 tcx.def_span(def.did),\n+                                &format!(\"try adding a `where` bound using this expression: where [u8; {}]: Sized\", snippet),\n+                            );\n+                        } else {\n+                            err.span_help(\n+                                const_span,\n                                 \"consider adding a `where` bound for this expression\",\n-                            )\n-                            .emit();\n+                            );\n+                        }\n+                        err.emit();\n                         return Err(ErrorHandled::Reported(ErrorReported));\n                     }\n                     FailureKind::Concrete => {"}, {"sha": "92547ca4796a4304131889cbc305423e1dca5deb", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -16,7 +16,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n@@ -28,7 +28,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -40,7 +40,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]"}, {"sha": "00efb61000401b3d3a6147b7e17827ab0cfbb09e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     [0; size_of::<Foo<T>>()]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; size_of::<Foo<T>>()]: Sized\n   --> $DIR/different-fn.rs:10:9\n    |\n LL |     [0; size_of::<Foo<T>>()]"}, {"sha": "498a2ae753361358dc0cd056633e46ad4fec46ca", "filename": "src/test/ui/const_evaluatable/needs_where_clause.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+const fn complex_maths<T>(n : usize) -> usize {\n+  2 * n + 1\n+}\n+\n+struct Example<T, const N: usize> {\n+  a: [f32; N],\n+  b: [f32; complex_maths::<T>(N)],\n+  //~^ ERROR unconstrained\n+  c: T,\n+}"}, {"sha": "e991c508c03f38aaa4b455381ee7030476c6ed7c", "filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/needs_where_clause.rs:11:6\n+   |\n+LL |   b: [f32; complex_maths::<T>(N)],\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try adding a `where` bound using this expression: where [u8; complex_maths::<T>(N)]: Sized\n+  --> $DIR/needs_where_clause.rs:11:12\n+   |\n+LL |   b: [f32; complex_maths::<T>(N)],\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "12f4a22038ef77c92d2a7ca25dbfb891bead2e7b", "filename": "src/test/ui/const_evaluatable/no_where_clause.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -0,0 +1,29 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features, unused)]\n+\n+const fn complex_maths(n : usize) -> usize {\n+  2 * n + 1\n+}\n+\n+pub struct Example<const N: usize> {\n+  a: [f32; N],\n+  b: [f32; complex_maths(N)],\n+  //~^ ERROR unconstrained generic\n+}\n+\n+impl<const N: usize> Example<N> {\n+  pub fn new() -> Self {\n+    Self {\n+      a: [0.; N],\n+      b: [0.; complex_maths(N)],\n+    }\n+  }\n+}\n+\n+impl Example<2> {\n+  pub fn sum(&self) -> f32 {\n+    self.a.iter().sum::<f32>() + self.b.iter().sum::<f32>()\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "65100909e53d508fb33f75dbb2c6e1bc06b0d501", "filename": "src/test/ui/const_evaluatable/no_where_clause.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65256717f2b3a6cb2d4f84e834941d7433ff5e15/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr?ref=65256717f2b3a6cb2d4f84e834941d7433ff5e15", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/no_where_clause.rs:10:6\n+   |\n+LL |   b: [f32; complex_maths(N)],\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try adding a `where` bound using this expression: where [u8; complex_maths(N)]: Sized\n+  --> $DIR/no_where_clause.rs:10:12\n+   |\n+LL |   b: [f32; complex_maths(N)],\n+   |            ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}