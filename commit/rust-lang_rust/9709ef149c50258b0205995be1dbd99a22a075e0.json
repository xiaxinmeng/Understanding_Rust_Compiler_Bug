{"sha": "9709ef149c50258b0205995be1dbd99a22a075e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDllZjE0OWM1MDI1OGIwMjA1OTk1YmUxZGJkOTlhMjJhMDc1ZTA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-10-24T13:37:03Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2020-12-04T20:46:00Z"}, "message": "Move hygienic comparison into own function", "tree": {"sha": "ce7ef43847716318f619d640a6624f8c815c1f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7ef43847716318f619d640a6624f8c815c1f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9709ef149c50258b0205995be1dbd99a22a075e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9709ef149c50258b0205995be1dbd99a22a075e0", "html_url": "https://github.com/rust-lang/rust/commit/9709ef149c50258b0205995be1dbd99a22a075e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9709ef149c50258b0205995be1dbd99a22a075e0/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2218520b8adf8b8e64b817537d9eb0a84840e2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2218520b8adf8b8e64b817537d9eb0a84840e2f1", "html_url": "https://github.com/rust-lang/rust/commit/2218520b8adf8b8e64b817537d9eb0a84840e2f1"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "2d1ea7d200cefbda54be114501ded3ff0cd2802c", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9709ef149c50258b0205995be1dbd99a22a075e0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709ef149c50258b0205995be1dbd99a22a075e0/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=9709ef149c50258b0205995be1dbd99a22a075e0", "patch": "@@ -33,12 +33,9 @@ impl InherentOverlapChecker<'tcx> {\n         }\n \n         for item1 in impl_items1.in_definition_order() {\n-            let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).any(|item2| {\n-                // Symbols and namespace match, compare hygienically.\n-                item1.kind.namespace() == item2.kind.namespace()\n-                    && item1.ident.normalize_to_macros_2_0()\n-                        == item2.ident.normalize_to_macros_2_0()\n-            });\n+            let collision = impl_items2\n+                .filter_by_name_unhygienic(item1.ident.name)\n+                .any(|item2| self.compare_hygienically(item1, item2));\n \n             if collision {\n                 return true;\n@@ -48,6 +45,12 @@ impl InherentOverlapChecker<'tcx> {\n         false\n     }\n \n+    fn compare_hygienically(&self, item1: &'tcx ty::AssocItem, item2: &'tcx ty::AssocItem) -> bool {\n+        // Symbols and namespace match, compare hygienically.\n+        item1.kind.namespace() == item2.kind.namespace()\n+            && item1.ident.normalize_to_macros_2_0() == item2.ident.normalize_to_macros_2_0()\n+    }\n+\n     fn check_for_common_items_in_impls(\n         &self,\n         impl1: DefId,\n@@ -58,12 +61,9 @@ impl InherentOverlapChecker<'tcx> {\n         let impl_items2 = self.tcx.associated_items(impl2);\n \n         for item1 in impl_items1.in_definition_order() {\n-            let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).find(|item2| {\n-                // Symbols and namespace match, compare hygienically.\n-                item1.kind.namespace() == item2.kind.namespace()\n-                    && item1.ident.normalize_to_macros_2_0()\n-                        == item2.ident.normalize_to_macros_2_0()\n-            });\n+            let collision = impl_items2\n+                .filter_by_name_unhygienic(item1.ident.name)\n+                .find(|item2| self.compare_hygienically(item1, item2));\n \n             if let Some(item2) = collision {\n                 let name = item1.ident.normalize_to_macros_2_0();"}]}