{"sha": "7f1a4a287f4aa39500aa4c45f60ad805047ad725", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMWE0YTI4N2Y0YWEzOTUwMGFhNGM0NWY2MGFkODA1MDQ3YWQ3MjU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-21T22:37:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T22:37:46Z"}, "message": "Rollup merge of #85182 - CDirkx:available_concurrency, r=JohnTitor\n\nMove `available_concurrency` implementation to `sys`\n\nThis splits out the platform-specific implementation of `available_concurrency` to the corresponding platforms under `sys`. No changes are made to the implementation.\n\nTidy didn't lint against this code being originally added outside of `sys` because of a bug (see #84677), this PR also reverts the exclusion that was introduced in that bugfix.\n\nTracking issue of `available_concurrency`: #74479", "tree": {"sha": "b0fbd8fce61ec74f56cb924f7b0c383384d96852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0fbd8fce61ec74f56cb924f7b0c383384d96852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f1a4a287f4aa39500aa4c45f60ad805047ad725", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0RS6CRBK7hj4Ov3rIwAALi0IABR4DyHf2HANT/I19BeROgus\nXGw7rDiprF6LAlXlY28y3p+z+1Y5zTHWCXQiPGeAqgnzRSeeaZI+5trKRaRB9dTW\n+RcobF/uCcBSGmv41dUCG6JltstV7ueyTAu56McjbzjwrLelhCjZgh1QRSLObR7g\ncrbUCFhaAHpOf4Q6kdL6k/pBx7sEXnhqSUOeozgd7dvWAHxyHhl8pi2cd6mNWLBV\no3CCGpfTeonRJIzqVRkvgb4KrqpgBvVUYfNyVkZjSdtkFPsGpUqgZdfVUTtckAce\nG/7ehpV1lfYI+w7x0DZJ0FyknUH0MuGbQXqDY+NOPveRS50T2VLYWN8nt47aQLU=\n=Uaps\n-----END PGP SIGNATURE-----\n", "payload": "tree b0fbd8fce61ec74f56cb924f7b0c383384d96852\nparent d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6\nparent 888418a079f0daf6447d36ae533366a26eecdbc9\nauthor Yuki Okushi <jtitor@2k36.org> 1624315066 +0900\ncommitter GitHub <noreply@github.com> 1624315066 +0900\n\nRollup merge of #85182 - CDirkx:available_concurrency, r=JohnTitor\n\nMove `available_concurrency` implementation to `sys`\n\nThis splits out the platform-specific implementation of `available_concurrency` to the corresponding platforms under `sys`. No changes are made to the implementation.\n\nTidy didn't lint against this code being originally added outside of `sys` because of a bug (see #84677), this PR also reverts the exclusion that was introduced in that bugfix.\n\nTracking issue of `available_concurrency`: #74479\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1a4a287f4aa39500aa4c45f60ad805047ad725", "html_url": "https://github.com/rust-lang/rust/commit/7f1a4a287f4aa39500aa4c45f60ad805047ad725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f1a4a287f4aa39500aa4c45f60ad805047ad725/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6", "html_url": "https://github.com/rust-lang/rust/commit/d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6"}, {"sha": "888418a079f0daf6447d36ae533366a26eecdbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/888418a079f0daf6447d36ae533366a26eecdbc9", "html_url": "https://github.com/rust-lang/rust/commit/888418a079f0daf6447d36ae533366a26eecdbc9"}], "stats": {"total": 345, "additions": 182, "deletions": 163}, "files": [{"sha": "6da79d19f5949cd410ddb2b350b61571cf25dc06", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -1,8 +1,10 @@\n #![allow(dead_code)]\n \n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::thread_local_dtor::run_dtors;\n use crate::time::Duration;\n@@ -95,6 +97,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "cbb8ba964018a687d7f07c76c5e5305f82faeaa1", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -1,6 +1,8 @@\n #![cfg_attr(test, allow(dead_code))] // why is this necessary?\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -135,6 +137,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "df2ba0a8bc8e6289af4ce55d83f3a17c58f4d419", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -2,6 +2,7 @@ use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::ptr;\n use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n@@ -198,6 +199,88 @@ impl Drop for Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    cfg_if::cfg_if! {\n+        if #[cfg(any(\n+            target_os = \"android\",\n+            target_os = \"emscripten\",\n+            target_os = \"fuchsia\",\n+            target_os = \"ios\",\n+            target_os = \"linux\",\n+            target_os = \"macos\",\n+            target_os = \"solaris\",\n+            target_os = \"illumos\",\n+        ))] {\n+            match unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) } {\n+                -1 => Err(io::Error::last_os_error()),\n+                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n+                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) }),\n+            }\n+        } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n+            use crate::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = crate::mem::size_of_val(&cpus);\n+\n+            unsafe {\n+                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            }\n+\n+            // Fallback approach in case of errors or no hardware threads.\n+            if cpus < 1 {\n+                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+                let res = unsafe {\n+                    libc::sysctl(\n+                        mib.as_mut_ptr(),\n+                        2,\n+                        &mut cpus as *mut _ as *mut _,\n+                        &mut cpus_size as *mut _ as *mut _,\n+                        ptr::null_mut(),\n+                        0,\n+                    )\n+                };\n+\n+                // Handle errors if any.\n+                if res == -1 {\n+                    return Err(io::Error::last_os_error());\n+                } else if cpus == 0 {\n+                    return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n+                }\n+            }\n+            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else if #[cfg(target_os = \"openbsd\")] {\n+            use crate::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = crate::mem::size_of_val(&cpus);\n+            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+\n+            let res = unsafe {\n+                libc::sysctl(\n+                    mib.as_mut_ptr(),\n+                    2,\n+                    &mut cpus as *mut _ as *mut _,\n+                    &mut cpus_size as *mut _ as *mut _,\n+                    ptr::null_mut(),\n+                    0,\n+                )\n+            };\n+\n+            // Handle errors if any.\n+            if res == -1 {\n+                return Err(io::Error::last_os_error());\n+            } else if cpus == 0 {\n+                return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n+            }\n+\n+            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n+        } else {\n+            // FIXME: implement on vxWorks, Redox, Haiku, l4re\n+            Err(io::Error::new_const(io::ErrorKind::Unsupported, &\"Getting the number of hardware threads is not supported on the target platform\"))\n+        }\n+    }\n+}\n+\n #[cfg(all(\n     not(target_os = \"linux\"),\n     not(target_os = \"freebsd\"),"}, {"sha": "dc75d4ee6725ce997761e7c4b38462ae17be7fd6", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -1,6 +1,7 @@\n use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::time::Duration;\n \n pub struct Thread(!);\n@@ -30,6 +31,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "9ec02bbec2644f53a6a4a6f721d113b1254661f4", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -3,6 +3,7 @@\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n+use crate::num::NonZeroUsize;\n use crate::sys::unsupported;\n use crate::time::Duration;\n \n@@ -63,6 +64,10 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "0971483510495bb33f586467689164dc331aec90", "filename": "library/std/src/sys/wasm/atomics/thread.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -1,5 +1,7 @@\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::sys::unsupported;\n use crate::time::Duration;\n \n@@ -39,6 +41,10 @@ impl Thread {\n     pub fn join(self) {}\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    unsupported()\n+}\n+\n pub mod guard {\n     pub type Guard = !;\n     pub unsafe fn current() -> Option<Guard> {"}, {"sha": "193c28c7673d71e956bced47ef00e65eff272ca7", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -13,6 +13,7 @@ use libc::{c_void, size_t, wchar_t};\n pub use self::EXCEPTION_DISPOSITION::*;\n pub use self::FILE_INFO_BY_HANDLE_CLASS::*;\n \n+pub type DWORD_PTR = ULONG_PTR;\n pub type DWORD = c_ulong;\n pub type NonZeroDWORD = NonZero_c_ulong;\n pub type HANDLE = LPVOID;\n@@ -53,6 +54,7 @@ pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n+pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n pub type LPWSABUF = *mut WSABUF;\n pub type LPWSAOVERLAPPED = *mut c_void;\n pub type LPWSAOVERLAPPED_COMPLETION_ROUTINE = *mut c_void;\n@@ -533,6 +535,21 @@ pub struct FILETIME {\n     pub dwHighDateTime: DWORD,\n }\n \n+#[repr(C)]\n+pub struct SYSTEM_INFO {\n+    pub wProcessorArchitecture: WORD,\n+    pub wReserved: WORD,\n+    pub dwPageSize: DWORD,\n+    pub lpMinimumApplicationAddress: LPVOID,\n+    pub lpMaximumApplicationAddress: LPVOID,\n+    pub dwActiveProcessorMask: DWORD_PTR,\n+    pub dwNumberOfProcessors: DWORD,\n+    pub dwProcessorType: DWORD,\n+    pub dwAllocationGranularity: DWORD,\n+    pub wProcessorLevel: WORD,\n+    pub wProcessorRevision: WORD,\n+}\n+\n #[repr(C)]\n pub struct OVERLAPPED {\n     pub Internal: *mut c_ulong,\n@@ -934,6 +951,7 @@ extern \"system\" {\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n+    pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n \n     pub fn CreateEventW(\n         lpEventAttributes: LPSECURITY_ATTRIBUTES,"}, {"sha": "ef7a9733fd880e19d8eff8383fa5fe7ae654e732", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -1,5 +1,6 @@\n use crate::ffi::CStr;\n use crate::io;\n+use crate::num::NonZeroUsize;\n use crate::ptr;\n use crate::sys::c;\n use crate::sys::handle::Handle;\n@@ -98,6 +99,21 @@ impl Thread {\n     }\n }\n \n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    let res = unsafe {\n+        let mut sysinfo: c::SYSTEM_INFO = crate::mem::zeroed();\n+        c::GetSystemInfo(&mut sysinfo);\n+        sysinfo.dwNumberOfProcessors as usize\n+    };\n+    match res {\n+        0 => Err(io::Error::new_const(\n+            io::ErrorKind::NotFound,\n+            &\"The number of hardware threads is not known for the target platform\",\n+        )),\n+        cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus) }),\n+    }\n+}\n+\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n     pub type Guard = !;"}, {"sha": "e8cdde880145935c8028a193abd738300ef8bab7", "filename": "library/std/src/thread/available_concurrency.rs", "status": "removed", "additions": 0, "deletions": 156, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Favailable_concurrency.rs?ref=d6e344d45d751c449fa59542a2aa1dc1f2c6a6e6", "patch": "@@ -1,156 +0,0 @@\n-use crate::io;\n-use crate::num::NonZeroUsize;\n-\n-/// Returns the number of hardware threads available to the program.\n-///\n-/// This value should be considered only a hint.\n-///\n-/// # Platform-specific behavior\n-///\n-/// If interpreted as the number of actual hardware threads, it may undercount on\n-/// Windows systems with more than 64 hardware threads. If interpreted as the\n-/// available concurrency for that process, it may overcount on Windows systems\n-/// when limited by a process wide affinity mask or job object limitations, and\n-/// it may overcount on Linux systems when limited by a process wide affinity\n-/// mask or affected by cgroups limits.\n-///\n-/// # Errors\n-///\n-/// This function will return an error in the following situations, but is not\n-/// limited to just these cases:\n-///\n-/// - If the number of hardware threads is not known for the target platform.\n-/// - The process lacks permissions to view the number of hardware threads\n-///   available.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// # #![allow(dead_code)]\n-/// #![feature(available_concurrency)]\n-/// use std::thread;\n-///\n-/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n-/// ```\n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n-    available_concurrency_internal()\n-}\n-\n-cfg_if::cfg_if! {\n-    if #[cfg(windows)] {\n-        #[allow(nonstandard_style)]\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            #[repr(C)]\n-            struct SYSTEM_INFO {\n-                wProcessorArchitecture: u16,\n-                wReserved: u16,\n-                dwPageSize: u32,\n-                lpMinimumApplicationAddress: *mut u8,\n-                lpMaximumApplicationAddress: *mut u8,\n-                dwActiveProcessorMask: *mut u8,\n-                dwNumberOfProcessors: u32,\n-                dwProcessorType: u32,\n-                dwAllocationGranularity: u32,\n-                wProcessorLevel: u16,\n-                wProcessorRevision: u16,\n-            }\n-            extern \"system\" {\n-                fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n-            }\n-            let res = unsafe {\n-                let mut sysinfo = crate::mem::zeroed();\n-                GetSystemInfo(&mut sysinfo);\n-                sysinfo.dwNumberOfProcessors as usize\n-            };\n-            match res {\n-                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n-                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus) }),\n-            }\n-        }\n-    } else if #[cfg(any(\n-        target_os = \"android\",\n-        target_os = \"emscripten\",\n-        target_os = \"fuchsia\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"solaris\",\n-        target_os = \"illumos\",\n-    ))] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            match unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) } {\n-                -1 => Err(io::Error::last_os_error()),\n-                0 => Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\")),\n-                cpus => Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) }),\n-            }\n-        }\n-    } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            use crate::ptr;\n-\n-            let mut cpus: libc::c_uint = 0;\n-            let mut cpus_size = crate::mem::size_of_val(&cpus);\n-\n-            unsafe {\n-                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n-            }\n-\n-            // Fallback approach in case of errors or no hardware threads.\n-            if cpus < 1 {\n-                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-                let res = unsafe {\n-                    libc::sysctl(\n-                        mib.as_mut_ptr(),\n-                        2,\n-                        &mut cpus as *mut _ as *mut _,\n-                        &mut cpus_size as *mut _ as *mut _,\n-                        ptr::null_mut(),\n-                        0,\n-                    )\n-                };\n-\n-                // Handle errors if any.\n-                if res == -1 {\n-                    return Err(io::Error::last_os_error());\n-                } else if cpus == 0 {\n-                    return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n-                }\n-            }\n-            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n-        }\n-    } else if #[cfg(target_os = \"openbsd\")] {\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            use crate::ptr;\n-\n-            let mut cpus: libc::c_uint = 0;\n-            let mut cpus_size = crate::mem::size_of_val(&cpus);\n-            let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-\n-            let res = unsafe {\n-                libc::sysctl(\n-                    mib.as_mut_ptr(),\n-                    2,\n-                    &mut cpus as *mut _ as *mut _,\n-                    &mut cpus_size as *mut _ as *mut _,\n-                    ptr::null_mut(),\n-                    0,\n-                )\n-            };\n-\n-            // Handle errors if any.\n-            if res == -1 {\n-                return Err(io::Error::last_os_error());\n-            } else if cpus == 0 {\n-                return Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"));\n-            }\n-\n-            Ok(unsafe { NonZeroUsize::new_unchecked(cpus as usize) })\n-        }\n-    } else {\n-        // FIXME: implement on vxWorks, Redox, HermitCore, Haiku, l4re\n-        fn available_concurrency_internal() -> io::Result<NonZeroUsize> {\n-            Err(io::Error::new_const(io::ErrorKind::NotFound, &\"The number of hardware threads is not known for the target platform\"))\n-        }\n-    }\n-}"}, {"sha": "f7e791419038d197d42e66054f2100eaec38da07", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -155,6 +155,7 @@ use crate::fmt;\n use crate::io;\n use crate::mem;\n use crate::num::NonZeroU64;\n+use crate::num::NonZeroUsize;\n use crate::panic;\n use crate::panicking;\n use crate::str;\n@@ -174,15 +175,9 @@ use crate::time::Duration;\n #[macro_use]\n mod local;\n \n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-mod available_concurrency;\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n-pub use available_concurrency::available_concurrency;\n-\n // The types used by the thread_local! macro to access TLS keys. Note that there\n // are two types, the \"OS\" type and the \"fast\" type. The OS thread local key\n // type is accessed via platform-specific API calls and is slow, while the fast\n@@ -1422,3 +1417,39 @@ fn _assert_sync_and_send() {\n     _assert_both::<JoinHandle<()>>();\n     _assert_both::<Thread>();\n }\n+\n+/// Returns the number of hardware threads available to the program.\n+///\n+/// This value should be considered only a hint.\n+///\n+/// # Platform-specific behavior\n+///\n+/// If interpreted as the number of actual hardware threads, it may undercount on\n+/// Windows systems with more than 64 hardware threads. If interpreted as the\n+/// available concurrency for that process, it may overcount on Windows systems\n+/// when limited by a process wide affinity mask or job object limitations, and\n+/// it may overcount on Linux systems when limited by a process wide affinity\n+/// mask or affected by cgroups limits.\n+///\n+/// # Errors\n+///\n+/// This function will return an error in the following situations, but is not\n+/// limited to just these cases:\n+///\n+/// - If the number of hardware threads is not known for the target platform.\n+/// - The process lacks permissions to view the number of hardware threads\n+///   available.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// #![feature(available_concurrency)]\n+/// use std::thread;\n+///\n+/// let count = thread::available_concurrency().map(|n| n.get()).unwrap_or(1);\n+/// ```\n+#[unstable(feature = \"available_concurrency\", issue = \"74479\")]\n+pub fn available_concurrency() -> io::Result<NonZeroUsize> {\n+    imp::available_concurrency()\n+}"}, {"sha": "31cdc6865a4022c199880c2b57a693ada29ef3bc", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f1a4a287f4aa39500aa4c45f60ad805047ad725/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1a4a287f4aa39500aa4c45f60ad805047ad725/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=7f1a4a287f4aa39500aa4c45f60ad805047ad725", "patch": "@@ -56,7 +56,6 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/std/src/f32.rs\",\n     \"library/std/src/f64.rs\",\n     \"library/std/src/path.rs\",\n-    \"library/std/src/thread/available_concurrency.rs\",\n     \"library/std/src/sys_common\", // Should only contain abstractions over platforms\n     \"library/std/src/net/test.rs\", // Utility helpers for tests\n ];"}]}