{"sha": "ca0f0002a4dd7a1572fc571483771a67d1d73a37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMGYwMDAyYTRkZDdhMTU3MmZjNTcxNDgzNzcxYTY3ZDFkNzNhMzc=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-17T19:02:42Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-17T19:09:54Z"}, "message": "Remove dead code after not linting else if let", "tree": {"sha": "73bb873d08dd6f2d43104ac0ebd1637a81919983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bb873d08dd6f2d43104ac0ebd1637a81919983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca0f0002a4dd7a1572fc571483771a67d1d73a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f0002a4dd7a1572fc571483771a67d1d73a37", "html_url": "https://github.com/rust-lang/rust/commit/ca0f0002a4dd7a1572fc571483771a67d1d73a37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f0002a4dd7a1572fc571483771a67d1d73a37/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b", "html_url": "https://github.com/rust-lang/rust/commit/1aad7541db90a4d70b01a0e4c9d41f9e683f8e9b"}], "stats": {"total": 45, "additions": 3, "deletions": 42}, "files": [{"sha": "b6af4175edfdabce7903ba40233b106a11d8daa7", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ca0f0002a4dd7a1572fc571483771a67d1d73a37/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca0f0002a4dd7a1572fc571483771a67d1d73a37/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=ca0f0002a4dd7a1572fc571483771a67d1d73a37", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::contains_return_break_continue_macro;\n-use clippy_utils::{eager_or_lazy, get_enclosing_block, in_macro, is_else_clause, is_lang_ctor};\n+use clippy_utils::{eager_or_lazy, in_macro, is_else_clause, is_lang_ctor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionSome;\n@@ -81,7 +81,6 @@ struct OptionIfLetElseOccurence {\n     method_sugg: String,\n     some_expr: String,\n     none_expr: String,\n-    wrap_braces: bool,\n }\n \n /// Extracts the body of a given arm. If the arm contains only an expression,\n@@ -106,37 +105,6 @@ fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n     }\n }\n \n-/// If this is the else body of an if/else expression, then we need to wrap\n-/// it in curly braces. Otherwise, we don't.\n-fn should_wrap_in_braces(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n-        let mut should_wrap = false;\n-\n-        if let Some(Expr {\n-            kind:\n-                ExprKind::Match(\n-                    _,\n-                    arms,\n-                    MatchSource::IfLetDesugar {\n-                        contains_else_clause: true,\n-                    },\n-                ),\n-            ..\n-        }) = parent.expr\n-        {\n-            should_wrap = expr.hir_id == arms[1].body.hir_id;\n-        } else if let Some(Expr {\n-            kind: ExprKind::If(_, _, Some(else_clause)),\n-            ..\n-        }) = parent.expr\n-        {\n-            should_wrap = expr.hir_id == else_clause.hir_id;\n-        }\n-\n-        should_wrap\n-    })\n-}\n-\n fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: bool, as_mut: bool) -> String {\n     format!(\n         \"{}{}\",\n@@ -176,7 +144,6 @@ fn detect_option_if_let_else<'tcx>(\n             let none_body = extract_body_from_arm(&arms[1])?;\n             let method_sugg = if eager_or_lazy::is_eagerness_candidate(cx, none_body) { \"map_or\" } else { \"map_or_else\" };\n             let capture_name = id.name.to_ident_string();\n-            let wrap_braces = should_wrap_in_braces(cx, expr);\n             let (as_ref, as_mut) = match &cond_expr.kind {\n                 ExprKind::AddrOf(_, Mutability::Not, _) => (true, false),\n                 ExprKind::AddrOf(_, Mutability::Mut, _) => (false, true),\n@@ -192,7 +159,6 @@ fn detect_option_if_let_else<'tcx>(\n                 method_sugg: method_sugg.to_string(),\n                 some_expr: format!(\"|{}{}| {}\", capture_mut, capture_name, Sugg::hir(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\")),\n-                wrap_braces,\n             })\n         } else {\n             None\n@@ -210,13 +176,8 @@ impl<'tcx> LateLintPass<'tcx> for OptionIfLetElse {\n                 format!(\"use Option::{} instead of an if let/else\", detection.method_sugg).as_str(),\n                 \"try\",\n                 format!(\n-                    \"{}{}.{}({}, {}){}\",\n-                    if detection.wrap_braces { \"{ \" } else { \"\" },\n-                    detection.option,\n-                    detection.method_sugg,\n-                    detection.none_expr,\n-                    detection.some_expr,\n-                    if detection.wrap_braces { \" }\" } else { \"\" },\n+                    \"{}.{}({}, {})\",\n+                    detection.option, detection.method_sugg, detection.none_expr, detection.some_expr,\n                 ),\n                 Applicability::MaybeIncorrect,\n             );"}]}