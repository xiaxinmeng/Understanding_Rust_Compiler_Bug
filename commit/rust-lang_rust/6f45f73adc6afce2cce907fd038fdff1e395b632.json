{"sha": "6f45f73adc6afce2cce907fd038fdff1e395b632", "node_id": "C_kwDOAAsO6NoAKDZmNDVmNzNhZGM2YWZjZTJjY2U5MDdmZDAzOGZkZmYxZTM5NWI2MzI", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-16T22:46:13Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-03-08T00:20:41Z"}, "message": "Change wording of suggestion to add missing `match` arm", "tree": {"sha": "829944bfc362378a25f69900fd10439a6e4ebf2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829944bfc362378a25f69900fd10439a6e4ebf2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f45f73adc6afce2cce907fd038fdff1e395b632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f45f73adc6afce2cce907fd038fdff1e395b632", "html_url": "https://github.com/rust-lang/rust/commit/6f45f73adc6afce2cce907fd038fdff1e395b632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f45f73adc6afce2cce907fd038fdff1e395b632/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab4feea50dd3e0109a30488300c213ca074d01a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab4feea50dd3e0109a30488300c213ca074d01a6", "html_url": "https://github.com/rust-lang/rust/commit/ab4feea50dd3e0109a30488300c213ca074d01a6"}], "stats": {"total": 561, "additions": 290, "deletions": 271}, "files": [{"sha": "b80d2e52ee709cabe32710b81b38ecbad2294d33", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -336,7 +336,7 @@ fn check_for_bindings_named_same_as_variants(\n                     let ty_path = cx.tcx.def_path_str(edef.did);\n                     let mut err = lint.build(&format!(\n                         \"pattern binding `{}` is named the same as one \\\n-                                        of the variants of the type `{}`\",\n+                         of the variants of the type `{}`\",\n                         ident, ty_path\n                     ));\n                     err.code(error_code!(E0170));\n@@ -508,6 +508,7 @@ fn non_exhaustive_match<'p, 'tcx>(\n     // informative.\n     let mut err;\n     let pattern;\n+    let mut patterns_len = 0;\n     if is_empty_match && !non_empty_enum {\n         err = create_e0004(\n             cx.tcx.sess,\n@@ -523,6 +524,7 @@ fn non_exhaustive_match<'p, 'tcx>(\n             format!(\"non-exhaustive patterns: {} not covered\", joined_patterns),\n         );\n         err.span_label(sp, pattern_not_covered_label(&witnesses, &joined_patterns));\n+        patterns_len = witnesses.len();\n         pattern = if witnesses.len() < 4 {\n             witnesses\n                 .iter()\n@@ -622,12 +624,29 @@ fn non_exhaustive_match<'p, 'tcx>(\n         _ => {}\n     }\n \n-    let msg = \"ensure that all possible cases are being handled, possibly by adding wildcards \\\n-        or more match arms\";\n+    let msg = format!(\n+        \"ensure that all possible cases are being handled by adding a match arm with a wildcard \\\n+         pattern{}{}\",\n+        if patterns_len > 1 && patterns_len < 4 && suggestion.is_some() {\n+            \", a match arm with multiple or-patterns\"\n+        } else {\n+            // we are either not suggesting anything, or suggesting `_`\n+            \"\"\n+        },\n+        match patterns_len {\n+            // non-exhaustive enum case\n+            0 if suggestion.is_some() => \" as shown\",\n+            0 => \"\",\n+            1 if suggestion.is_some() => \" or an explicit pattern as shown\",\n+            1 => \" or an explicit pattern\",\n+            _ if suggestion.is_some() => \" as shown, or multiple match arms\",\n+            _ => \" or multiple match arms\",\n+        },\n+    );\n     if let Some((span, sugg)) = suggestion {\n-        err.span_suggestion_verbose(span, msg, sugg, Applicability::HasPlaceholders);\n+        err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n     } else {\n-        err.help(msg);\n+        err.help(&msg);\n     }\n     err.emit();\n }"}, {"sha": "7e22defa98dd460e43b091b5b56af30f090b7981", "filename": "src/test/ui/closures/2229_closure_analysis/match/issue-88331.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fissue-88331.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `Opcode` defined here\n LL | pub struct Opcode(pub u8);\n    |            ^^^^^^\n    = note: the matched value is of type `Opcode`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Opcode::OP1 => unimplemented!(),\n LL ~         Opcode(0_u8) | Opcode(2_u8..=u8::MAX) => todo!(),\n@@ -28,7 +28,7 @@ note: `Opcode2` defined here\n LL | pub struct Opcode2(Opcode);\n    |            ^^^^^^^\n    = note: the matched value is of type `Opcode2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Opcode2::OP2=> unimplemented!(),\n LL ~         Opcode2(Opcode(0_u8)) | Opcode2(Opcode(2_u8..=u8::MAX)) => todo!(),"}, {"sha": "32d36274ff6ef7aed9b85878e020c4f044814e21", "filename": "src/test/ui/closures/2229_closure_analysis/match/non-exhaustive-match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fnon-exhaustive-match.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `L1` defined here\n LL | enum L1 { A, B }\n    |      --      ^ not covered\n    = note: the matched value is of type `L1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     let _b = || { match l1 { L1::A => (), B => todo!() } };\n    |                                         ++++++++++++++\n@@ -27,7 +27,7 @@ note: `E1` defined here\n LL | pub enum E1 {}\n    | ^^^^^^^^^^^^^^\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     let _d = || { match e1 {\n LL +         _ => todo!(),\n@@ -46,7 +46,7 @@ note: `E2` defined here\n LL | pub enum E2 { A, B }\n    | ^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     let _e = || { match e2 { E2::A => (), E2::B => (), _ => todo!() } };\n    |                                                      ++++++++++++++"}, {"sha": "e55fb7ce4bbe9528a70b259251de935fda539d20", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || match x { };\n    |                       ^\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     let c1 = || match x {\n LL +         _ => todo!(),"}, {"sha": "d4519af540859078b7587ba20c30a2ea998e9610", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -19,7 +19,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Option<i32>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n LL +         None | Some(_) => todo!(),"}, {"sha": "8ba151d9e65fa483bd0b5dfb61fc6058ecfcdd6f", "filename": "src/test/ui/error-codes/E0004.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -12,7 +12,7 @@ LL | enum Terminator {\n LL |     HastaLaVistaBaby,\n    |     ^^^^^^^^^^^^^^^^ not covered\n    = note: the matched value is of type `Terminator`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Terminator::TalkToMyHand => {}\n LL +         HastaLaVistaBaby => todo!()"}, {"sha": "b5510683328f54097f884ca53d7c749371af823e", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -7,7 +7,7 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         0..=usize::MAX => {}\n LL +         _ => todo!()\n@@ -22,7 +22,7 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         isize::MIN..=isize::MAX => {}\n LL +         _ => todo!()"}, {"sha": "c2c77290c4374a59ce9c0bb157c4e2d48d6dec21", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-exhaustive-fail.stderr", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-exhaustive-fail.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     m!(0f32, f32::NEG_INFINITY..);\n    |        ^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -18,7 +18,7 @@ LL |     m!(0f32, ..f32::INFINITY);\n    |        ^^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -31,7 +31,7 @@ LL |     m!('a', ..core::char::MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         '\\u{10ffff}' => todo!() }\n@@ -44,7 +44,7 @@ LL |     m!('a', ..ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10fffe}'..='\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         '\\u{10fffe}'..='\\u{10ffff}' => todo!() }\n@@ -57,7 +57,7 @@ LL |     m!('a', ALMOST_MIN..);\n    |        ^^^ pattern `'\\u{0}'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         '\\u{0}' => todo!() }\n@@ -70,7 +70,7 @@ LL |     m!('a', ..=ALMOST_MAX);\n    |        ^^^ pattern `'\\u{10ffff}'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         '\\u{10ffff}' => todo!() }\n@@ -83,7 +83,7 @@ LL |     m!('a', ..=VAL | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         'b' => todo!() }\n@@ -96,7 +96,7 @@ LL |     m!('a', ..VAL_1 | VAL_2..);\n    |        ^^^ pattern `'b'` not covered\n    |\n    = note: the matched value is of type `char`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         'b' => todo!() }\n@@ -109,7 +109,7 @@ LL |         m!(0, ..u8::MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u8::MAX => todo!() }\n@@ -122,7 +122,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `254_u8..=u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         254_u8..=u8::MAX => todo!() }\n@@ -135,7 +135,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u8 => todo!() }\n@@ -148,7 +148,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u8::MAX => todo!() }\n@@ -161,7 +161,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u8 => todo!() }\n@@ -174,7 +174,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u8 => todo!() }\n@@ -187,7 +187,7 @@ LL |         m!(0, ..u16::MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u16::MAX => todo!() }\n@@ -200,7 +200,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `65534_u16..=u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         65534_u16..=u16::MAX => todo!() }\n@@ -213,7 +213,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u16 => todo!() }\n@@ -226,7 +226,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u16::MAX` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u16::MAX => todo!() }\n@@ -239,7 +239,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u16 => todo!() }\n@@ -252,7 +252,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u16` not covered\n    |\n    = note: the matched value is of type `u16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u16 => todo!() }\n@@ -265,7 +265,7 @@ LL |         m!(0, ..u32::MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u32::MAX => todo!() }\n@@ -278,7 +278,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `4294967294_u32..=u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         4294967294_u32..=u32::MAX => todo!() }\n@@ -291,7 +291,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u32 => todo!() }\n@@ -304,7 +304,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u32::MAX` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u32::MAX => todo!() }\n@@ -317,7 +317,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u32 => todo!() }\n@@ -330,7 +330,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u32` not covered\n    |\n    = note: the matched value is of type `u32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u32 => todo!() }\n@@ -343,7 +343,7 @@ LL |         m!(0, ..u64::MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u64::MAX => todo!() }\n@@ -356,7 +356,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         18446744073709551614_u64..=u64::MAX => todo!() }\n@@ -369,7 +369,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u64 => todo!() }\n@@ -382,7 +382,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u64::MAX` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u64::MAX => todo!() }\n@@ -395,7 +395,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u64 => todo!() }\n@@ -408,7 +408,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u64` not covered\n    |\n    = note: the matched value is of type `u64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u64 => todo!() }\n@@ -421,7 +421,7 @@ LL |         m!(0, ..u128::MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u128::MAX => todo!() }\n@@ -434,7 +434,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `340282366920938463463374607431768211454_u128..=u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         340282366920938463463374607431768211454_u128..=u128::MAX => todo!() }\n@@ -447,7 +447,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `0_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u128 => todo!() }\n@@ -460,7 +460,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u128::MAX => todo!() }\n@@ -473,7 +473,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u128 => todo!() }\n@@ -486,7 +486,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_u128 => todo!() }\n@@ -499,7 +499,7 @@ LL |         m!(0, ..i8::MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MAX => todo!() }\n@@ -512,7 +512,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `126_i8..=i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         126_i8..=i8::MAX => todo!() }\n@@ -525,7 +525,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i8::MIN` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MIN => todo!() }\n@@ -538,7 +538,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MAX => todo!() }\n@@ -551,7 +551,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i8 => todo!() }\n@@ -564,7 +564,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i8 => todo!() }\n@@ -577,7 +577,7 @@ LL |         m!(0, ..i16::MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i16::MAX => todo!() }\n@@ -590,7 +590,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `32766_i16..=i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         32766_i16..=i16::MAX => todo!() }\n@@ -603,7 +603,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i16::MIN` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i16::MIN => todo!() }\n@@ -616,7 +616,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i16::MAX` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i16::MAX => todo!() }\n@@ -629,7 +629,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i16 => todo!() }\n@@ -642,7 +642,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i16` not covered\n    |\n    = note: the matched value is of type `i16`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i16 => todo!() }\n@@ -655,7 +655,7 @@ LL |         m!(0, ..i32::MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i32::MAX => todo!() }\n@@ -668,7 +668,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `2147483646_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         2147483646_i32..=i32::MAX => todo!() }\n@@ -681,7 +681,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i32::MIN` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i32::MIN => todo!() }\n@@ -694,7 +694,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i32::MAX => todo!() }\n@@ -707,7 +707,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i32 => todo!() }\n@@ -720,7 +720,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i32` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i32 => todo!() }\n@@ -733,7 +733,7 @@ LL |         m!(0, ..i64::MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i64::MAX => todo!() }\n@@ -746,7 +746,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         9223372036854775806_i64..=i64::MAX => todo!() }\n@@ -759,7 +759,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i64::MIN` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i64::MIN => todo!() }\n@@ -772,7 +772,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i64::MAX` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i64::MAX => todo!() }\n@@ -785,7 +785,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i64 => todo!() }\n@@ -798,7 +798,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i64` not covered\n    |\n    = note: the matched value is of type `i64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i64 => todo!() }\n@@ -811,7 +811,7 @@ LL |         m!(0, ..i128::MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i128::MAX => todo!() }\n@@ -824,7 +824,7 @@ LL |         m!(0, ..ALMOST_MAX);\n    |            ^ pattern `170141183460469231731687303715884105726_i128..=i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         170141183460469231731687303715884105726_i128..=i128::MAX => todo!() }\n@@ -837,7 +837,7 @@ LL |         m!(0, ALMOST_MIN..);\n    |            ^ pattern `i128::MIN` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i128::MIN => todo!() }\n@@ -850,7 +850,7 @@ LL |         m!(0, ..=ALMOST_MAX);\n    |            ^ pattern `i128::MAX` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i128::MAX => todo!() }\n@@ -863,7 +863,7 @@ LL |         m!(0, ..=VAL | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i128 => todo!() }\n@@ -876,7 +876,7 @@ LL |         m!(0, ..VAL_1 | VAL_2..);\n    |            ^ pattern `43_i128` not covered\n    |\n    = note: the matched value is of type `i128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         43_i128 => todo!() }"}, {"sha": "6206dc85ea05f81c72ab6854ef03416a232cbcb5", "filename": "src/test/ui/match/match_non_exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch_non_exhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `L` defined here\n LL | enum L { A, B }\n    |      -      ^ not covered\n    = note: the matched value is of type `L`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     match l { L::A => (), B => todo!() };\n    |                         ++++++++++++++\n@@ -27,7 +27,7 @@ note: `E1` defined here\n LL | pub enum E1 {}\n    | ^^^^^^^^^^^^^^\n    = note: the matched value is of type `E1`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match e1 {\n LL +         _ => todo!(),\n@@ -46,7 +46,7 @@ note: `E2` defined here\n LL | pub enum E2 { A, B }\n    | ^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `E2`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     match e2 { E2::A => (), E2::B => (), _ => todo!() };\n    |                                        ++++++++++++++"}, {"sha": "9aa808e6bc9a69db9b07d19d49e945961335ce92", "filename": "src/test/ui/or-patterns/exhaustiveness-non-exhaustive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-non-exhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (0u8, 0u8) {\n    |           ^^^^^^^^^^ pattern `(2_u8..=u8::MAX, _)` not covered\n    |\n    = note: the matched value is of type `(u8, u8)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (0 | 1, 2 | 3) => {}\n LL +         (2_u8..=u8::MAX, _) => todo!()\n@@ -18,7 +18,7 @@ LL |     match ((0u8,),) {\n    |           ^^^^^^^^^ pattern `((4_u8..=u8::MAX))` not covered\n    |\n    = note: the matched value is of type `((u8,),)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         ((0 | 1,) | (2 | 3,),) => {}\n LL +         ((4_u8..=u8::MAX)) => todo!()\n@@ -31,7 +31,7 @@ LL |     match (Some(0u8),) {\n    |           ^^^^^^^^^^^^ pattern `(Some(2_u8..=u8::MAX))` not covered\n    |\n    = note: the matched value is of type `(Option<u8>,)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (None | Some(0 | 1),) => {}\n LL +         (Some(2_u8..=u8::MAX)) => todo!()"}, {"sha": "37a35700b36d5731ebc544d4e1de7a2ad5c43263", "filename": "src/test/ui/or-patterns/issue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-69875-should-have-been-expanded-earlier-non-exhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -19,7 +19,7 @@ LL |     match 0 {\n    |           ^ patterns `i32::MIN..=-1_i32` and `3_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         0 | (1 | 2) => {}\n LL +         i32::MIN..=-1_i32 | 3_i32..=i32::MAX => todo!()"}, {"sha": "cd5c283f9fd93c75c4d551c900317d2b29ecfde0", "filename": "src/test/ui/pattern/usefulness/always-inhabited-union-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Falways-inhabited-union-ref.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -6,7 +6,7 @@ LL |     match uninhab_ref() {\n    |\n    = note: the matched value is of type `&!`\n    = note: references are always considered inhabited\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match uninhab_ref() {\n LL +         _ => todo!(),\n@@ -25,7 +25,7 @@ note: `Foo` defined here\n LL | pub union Foo {\n    |           ^^^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match uninhab_union() {\n LL +         _ => todo!(),"}, {"sha": "7d0b71a497ec2f91f0fb290bf18f9f74a77cb900", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -15,7 +15,7 @@ LL | |     C,\n LL | | }\n    | |_^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo::B => {}\n LL +         _ => todo!()\n@@ -39,7 +39,7 @@ LL | |     C,\n LL | | }\n    | |_-\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo::C => {}\n LL +         B => todo!()\n@@ -63,7 +63,7 @@ LL | |     C,\n LL | | }\n    | |_-\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Foo::A => {}\n LL +         B | _ => todo!()\n@@ -88,7 +88,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Option<Foo>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Some(Foo::A) => {}\n LL +         Some(B) | Some(_) => todo!()"}, {"sha": "d31ee0dbd14e5a032c8327c20a244021f269b4a2", "filename": "src/test/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -47,7 +47,7 @@ LL |     match_no_arms!(0u8);\n    |                    ^^^\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n   --> $DIR/empty-match.rs:79:20\n@@ -61,7 +61,7 @@ note: `NonEmptyStruct1` defined here\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n   --> $DIR/empty-match.rs:80:20\n@@ -75,7 +75,7 @@ note: `NonEmptyStruct2` defined here\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/empty-match.rs:81:20\n@@ -89,7 +89,7 @@ note: `NonEmptyUnion1` defined here\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/empty-match.rs:82:20\n@@ -103,7 +103,7 @@ note: `NonEmptyUnion2` defined here\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n@@ -119,7 +119,7 @@ LL | enum NonEmptyEnum1 {\n LL |     Foo(bool),\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n@@ -137,7 +137,7 @@ LL |     Foo(bool),\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n@@ -151,7 +151,7 @@ note: `NonEmptyEnum5` defined here\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/empty-match.rs:87:24\n@@ -160,7 +160,7 @@ LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             _ => todo!()\n@@ -178,7 +178,7 @@ note: `NonEmptyStruct1` defined here\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyStruct1 => todo!()\n@@ -196,7 +196,7 @@ note: `NonEmptyStruct2` defined here\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyStruct2(_) => todo!()\n@@ -214,7 +214,7 @@ note: `NonEmptyUnion1` defined here\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyUnion1 { .. } => todo!()\n@@ -232,7 +232,7 @@ note: `NonEmptyUnion2` defined here\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyUnion2 { .. } => todo!()\n@@ -252,7 +252,7 @@ LL | enum NonEmptyEnum1 {\n LL |     Foo(bool),\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             Foo(_) => todo!()\n@@ -274,7 +274,7 @@ LL |     Foo(bool),\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n LL +             Foo(_) | Bar => todo!()\n@@ -292,7 +292,7 @@ note: `NonEmptyEnum5` defined here\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n LL +             _ => todo!()"}, {"sha": "d31ee0dbd14e5a032c8327c20a244021f269b4a2", "filename": "src/test/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -47,7 +47,7 @@ LL |     match_no_arms!(0u8);\n    |                    ^^^\n    |\n    = note: the matched value is of type `u8`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n   --> $DIR/empty-match.rs:79:20\n@@ -61,7 +61,7 @@ note: `NonEmptyStruct1` defined here\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n   --> $DIR/empty-match.rs:80:20\n@@ -75,7 +75,7 @@ note: `NonEmptyStruct2` defined here\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n   --> $DIR/empty-match.rs:81:20\n@@ -89,7 +89,7 @@ note: `NonEmptyUnion1` defined here\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n   --> $DIR/empty-match.rs:82:20\n@@ -103,7 +103,7 @@ note: `NonEmptyUnion2` defined here\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` not covered\n   --> $DIR/empty-match.rs:83:20\n@@ -119,7 +119,7 @@ LL | enum NonEmptyEnum1 {\n LL |     Foo(bool),\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum1`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `Foo(_)` and `Bar` not covered\n   --> $DIR/empty-match.rs:84:20\n@@ -137,7 +137,7 @@ LL |     Foo(bool),\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `V1`, `V2`, `V3` and 2 more not covered\n   --> $DIR/empty-match.rs:85:20\n@@ -151,7 +151,7 @@ note: `NonEmptyEnum5` defined here\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/empty-match.rs:87:24\n@@ -160,7 +160,7 @@ LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             _ => todo!()\n@@ -178,7 +178,7 @@ note: `NonEmptyStruct1` defined here\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyStruct1 => todo!()\n@@ -196,7 +196,7 @@ note: `NonEmptyStruct2` defined here\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyStruct2(_) => todo!()\n@@ -214,7 +214,7 @@ note: `NonEmptyUnion1` defined here\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyUnion1 { .. } => todo!()\n@@ -232,7 +232,7 @@ note: `NonEmptyUnion2` defined here\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             NonEmptyUnion2 { .. } => todo!()\n@@ -252,7 +252,7 @@ LL | enum NonEmptyEnum1 {\n LL |     Foo(bool),\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum1`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             _ if false => {}\n LL +             Foo(_) => todo!()\n@@ -274,7 +274,7 @@ LL |     Foo(bool),\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n LL +             Foo(_) | Bar => todo!()\n@@ -292,7 +292,7 @@ note: `NonEmptyEnum5` defined here\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~             _ if false => {}\n LL +             _ => todo!()"}, {"sha": "c926e50b3580bd58d0b003d833588687e0c05dd8", "filename": "src/test/ui/pattern/usefulness/floats.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match 0.0 {\n    |           ^^^ pattern `_` not covered\n    |\n    = note: the matched value is of type `f64`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~       0.0..=1.0 => {}\n LL +       _ => todo!()"}, {"sha": "0c1563c160c1c092928918ed492b2b5e358a468b", "filename": "src/test/ui/pattern/usefulness/guards.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match 0u8 {\n    |           ^^^ pattern `128_u8..=u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         128 ..= 255 if true => {}\n LL +         128_u8..=u8::MAX => todo!()"}, {"sha": "fec54e89d63cf091f175dd0ea06581584e6bced9", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     m!(0u8, 0..255);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u8::MAX => todo!() }\n@@ -18,7 +18,7 @@ LL |     m!(0u8, 0..=254);\n    |        ^^^ pattern `u8::MAX` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u8::MAX => todo!() }\n@@ -31,7 +31,7 @@ LL |     m!(0u8, 1..=255);\n    |        ^^^ pattern `0_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u8 => todo!() }\n@@ -44,7 +44,7 @@ LL |     m!(0u8, 0..42 | 43..=255);\n    |        ^^^ pattern `42_u8` not covered\n    |\n    = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         42_u8 => todo!() }\n@@ -57,7 +57,7 @@ LL |     m!(0i8, -128..127);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MAX => todo!() }\n@@ -70,7 +70,7 @@ LL |     m!(0i8, -128..=126);\n    |        ^^^ pattern `i8::MAX` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MAX => todo!() }\n@@ -83,7 +83,7 @@ LL |     m!(0i8, -127..=127);\n    |        ^^^ pattern `i8::MIN` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         i8::MIN => todo!() }\n@@ -96,7 +96,7 @@ LL |     match 0i8 {\n    |           ^^^ pattern `0_i8` not covered\n    |\n    = note: the matched value is of type `i8`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         1 ..= i8::MAX => {}\n LL +         0_i8 => todo!()\n@@ -109,7 +109,7 @@ LL |     m!(0u128, 0..=ALMOST_MAX);\n    |        ^^^^^ pattern `u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         u128::MAX => todo!() }\n@@ -122,7 +122,7 @@ LL |     m!(0u128, 0..=4);\n    |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         5_u128..=u128::MAX => todo!() }\n@@ -135,7 +135,7 @@ LL |     m!(0u128, 1..=u128::MAX);\n    |        ^^^^^ pattern `0_u128` not covered\n    |\n    = note: the matched value is of type `u128`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         0_u128 => todo!() }\n@@ -148,7 +148,7 @@ LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n    |\n    = note: the matched value is of type `(u8, bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (0 ..= 255, true) => {}\n LL +         (126_u8..=127_u8, false) => todo!()"}, {"sha": "9f277fa1e1800a1cf3da3cf816f2bd79b3419dd2", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.allow.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match 7usize {}\n    |           ^^^^^^\n    |\n    = note: the matched value is of type `usize`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match 7usize {\n LL +         _ => todo!(),"}, {"sha": "fa4146a7ad892268d13713830f79cabd45d42d95", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int.deny.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int.deny.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -7,7 +7,7 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         0 ..= usize::MAX => {}\n LL +         _ => todo!()\n@@ -22,7 +22,7 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         isize::MIN ..= isize::MAX => {}\n LL +         _ => todo!()\n@@ -37,7 +37,7 @@ LL |     m!(0usize, 0..=usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -52,7 +52,7 @@ LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -67,7 +67,7 @@ LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -80,7 +80,7 @@ LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n    = note: the matched value is of type `(usize, bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         (_, _) => todo!() }\n@@ -95,7 +95,7 @@ LL |     m!(0isize, isize::MIN..=isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -110,7 +110,7 @@ LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -125,7 +125,7 @@ LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         _ => todo!() }\n@@ -138,7 +138,7 @@ LL |     m!((0isize, true), (isize::MIN..5, true)\n    |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n    |\n    = note: the matched value is of type `(isize, bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         match $s { $($t)+ => {}\n LL ~         (_, _) => todo!() }\n@@ -153,7 +153,7 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         1 ..= isize::MAX => {}\n LL +         _ => todo!()\n@@ -166,7 +166,7 @@ LL |     match 7usize {}\n    |           ^^^^^^\n    |\n    = note: the matched value is of type `usize`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match 7usize {\n LL +         _ => todo!(),"}, {"sha": "30492c98206c90729923710f265f482976963a5c", "filename": "src/test/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -7,7 +7,7 @@ LL |     match 0usize {\n    = note: the matched value is of type `usize`\n    = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         0..=usize::MAX => {}\n LL +         _ => todo!()\n@@ -22,7 +22,7 @@ LL |     match 0isize {\n    = note: the matched value is of type `isize`\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         isize::MIN..=isize::MAX => {}\n LL +         _ => todo!()"}, {"sha": "af60f3ff50bf37583622e13c2b3472b8e3155f91", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (T::T1(()), V::V2(true)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `(T1(()), V2(_))` and `(T2(()), V1(_))` not covered\n    |\n    = note: the matched value is of type `(T, V)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         (T::T2(()), V::V2(b)) => (),\n LL ~         (T1(()), V2(_)) | (T2(()), V1(_)) => todo!(),"}, {"sha": "01890b73cbdd8a77875e2f677b976717f880197c", "filename": "src/test/ui/pattern/usefulness/issue-2111.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (a, b) {\n    |           ^^^^^^ patterns `(None, None)` and `(Some(_), Some(_))` not covered\n    |\n    = note: the matched value is of type `(Option<usize>, Option<usize>)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         (Some(_), None) | (None, Some(_)) => {}\n LL +         (None, None) | (Some(_), Some(_)) => todo!()"}, {"sha": "759fdeafe4eb545202f947b8e7e78d3a7bf61f64", "filename": "src/test/ui/pattern/usefulness/issue-30240.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = note: the matched value is of type `&str`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         \"hello\" => {}\n LL +         &_ => todo!()\n@@ -18,7 +18,7 @@ LL |     match \"world\" {\n    |           ^^^^^^^ pattern `&_` not covered\n    |\n    = note: the matched value is of type `&str`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         \"hello\" => {}\n LL +         &_ => todo!()"}, {"sha": "d8884394f8e9619a0b501090c18a7ea865cc48a5", "filename": "src/test/ui/pattern/usefulness/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match () { }\n    |           ^^\n    |\n    = note: the matched value is of type `()`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match () {\n LL +         _ => todo!(),"}, {"sha": "2df8911badcda230b55b572dbd8f7355658bffe8", "filename": "src/test/ui/pattern/usefulness/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match x { }\n    |           ^\n    |\n    = note: the matched value is of type `*const Bottom`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),"}, {"sha": "717bb53c32750e0df2dfc527505bb4d3296b1494", "filename": "src/test/ui/pattern/usefulness/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-35609.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (A, ()) {\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, ())`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         (A, _) => {}\n LL +         _ => todo!()\n@@ -18,7 +18,7 @@ LL |     match (A, A) {\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n    |\n    = note: the matched value is of type `(Enum, Enum)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         (_, A) => {}\n LL +         _ => todo!()\n@@ -31,7 +31,7 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         ((A, ()), _) => {}\n LL +         _ => todo!()\n@@ -44,7 +44,7 @@ LL |     match ((A, ()), A) {\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), Enum)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         ((A, ()), _) => {}\n LL +         _ => todo!()\n@@ -57,7 +57,7 @@ LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = note: the matched value is of type `((Enum, ()), ())`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         ((A, _), _) => {}\n LL +         _ => todo!()\n@@ -75,7 +75,7 @@ note: `S` defined here\n LL | struct S(Enum, ());\n    |        ^\n    = note: the matched value is of type `S`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         S(A, _) => {}\n LL +         _ => todo!()\n@@ -93,7 +93,7 @@ note: `Sd` defined here\n LL | struct Sd { x: Enum, y: () }\n    |        ^^\n    = note: the matched value is of type `Sd`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         Sd { x: A, y: _ } => {}\n LL +         _ => todo!()\n@@ -117,7 +117,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_^\n    = note: the matched value is of type `Option<Enum>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         None => (),\n LL +         _ => todo!()"}, {"sha": "4e0adcc1ba2a538af4aaa509610a9deb3ce432d0", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -13,7 +13,7 @@ LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator\n LL | | >(Unique<T>, A);\n    | |________________^\n    = note: the matched value is of type `Box<ElementKind>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~             box ElementKind::HTMLImageElement(ref d) if d.image.is_some() => { true }\n LL +             box _ => todo!()"}, {"sha": "ca37af6fb809540f6e0e42f9f546332a72131154", "filename": "src/test/ui/pattern/usefulness/issue-39362.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -12,7 +12,7 @@ LL | enum Foo {\n LL |     Bar { bar: Bar, id: usize }\n    |     ^^^ not covered\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         Foo::Bar { bar: Bar::B, .. } => (),\n LL ~         _ => todo!(),"}, {"sha": "c477e435335043274051e4ee041245a421b1ef44", "filename": "src/test/ui/pattern/usefulness/issue-40221.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -12,7 +12,7 @@ LL | enum P {\n LL |     C(PC),\n    |     ^ not covered\n    = note: the matched value is of type `P`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         P::C(PC::Q) => (),\n LL ~         C(QA) => todo!(),"}, {"sha": "293273174101686bc4fd8e254d3009705eb56c9c", "filename": "src/test/ui/pattern/usefulness/issue-4321.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"foo {:}\", match tup {\n    |                               ^^^ pattern `(true, false)` not covered\n    |\n    = note: the matched value is of type `(bool, bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (true, true) => \"baz\",\n LL +         (true, false) => todo!()"}, {"sha": "2bdbecabbbea092375cf58da0bf79a7f3ae079ec", "filename": "src/test/ui/pattern/usefulness/issue-50900.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `Tag` defined here\n LL | pub struct Tag(pub Context, pub u16);\n    |            ^^^\n    = note: the matched value is of type `Tag`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Tag::ExifIFDPointer => {}\n LL +         Tag(Exif, _) => todo!()"}, {"sha": "f6261001c5e0903f455ec3da533bff1cda3cc995", "filename": "src/test/ui/pattern/usefulness/issue-56379.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-56379.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -16,7 +16,7 @@ LL |     B(bool),\n LL |     C(bool),\n    |     ^ not covered\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Foo::C(true) => {}\n LL +         A(false) | B(false) | C(false) => todo!()"}, {"sha": "20f002dd3db15c66d276335c80d09ea60844c7a6", "filename": "src/test/ui/pattern/usefulness/issue-72377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72377.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (x, y) {\n    |           ^^^^^^ patterns `(A, Some(A))`, `(A, Some(B))`, `(B, Some(B))` and 2 more not covered\n    |\n    = note: the matched value is of type `(X, Option<X>)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         (X::A, Some(X::C)) | (X::C, Some(X::A)) => false,\n LL ~         _ => todo!(),"}, {"sha": "bf05d616d6ed1c2865ed46ccf21e3fa76c169e13", "filename": "src/test/ui/pattern/usefulness/issue-78123-non-exhaustive-reference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-78123-non-exhaustive-reference.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -11,7 +11,7 @@ LL | enum A {}\n    |      ^\n    = note: the matched value is of type `&A`\n    = note: references are always considered inhabited\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match a {\n LL +         _ => todo!(),"}, {"sha": "3326e6b85a471734c11bd6e3930a368be393202c", "filename": "src/test/ui/pattern/usefulness/match-arm-statics-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-arm-statics-2.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (true, false) {\n    |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered\n    |\n    = note: the matched value is of type `(bool, bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (false, true) => (),\n LL +         (true, false) => todo!()\n@@ -33,7 +33,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Option<Option<Direction>>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         None => (),\n LL +         Some(Some(West)) => todo!()\n@@ -51,7 +51,7 @@ note: `Foo` defined here\n LL | struct Foo {\n    |        ^^^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo { bar: Some(EAST), .. } => (),\n LL +         Foo { bar: Some(North), baz: NewBool(true) } => todo!()"}, {"sha": "a90f32f7aebf34e3bd99ba18d36dc5ded1077df7", "filename": "src/test/ui/pattern/usefulness/match-byte-array-patterns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-byte-array-patterns-2.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match buf {\n    |           ^^^ patterns `&[0_u8..=64_u8, _, _, _]` and `&[66_u8..=u8::MAX, _, _, _]` not covered\n    |\n    = note: the matched value is of type `&[u8; 4]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         b\"AAAA\" => {}\n LL +         &[0_u8..=64_u8, _, _, _] | &[66_u8..=u8::MAX, _, _, _] => todo!()\n@@ -18,7 +18,7 @@ LL |     match buf {\n    |           ^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 2 more not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         b\"AAAA\" => {}\n LL +         _ => todo!()"}, {"sha": "08dde523a15fb524e3aaa7367452432fc642a6bf", "filename": "src/test/ui/pattern/usefulness/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-non-exhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match 0 { 1 => () }\n    |           ^ patterns `i32::MIN..=0_i32` and `2_i32..=i32::MAX` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL |     match 0 { 1 => (), i32::MIN..=0_i32 | 2_i32..=i32::MAX => todo!() }\n    |                      ++++++++++++++++++++++++++++++++++++++++++++++++\n@@ -17,7 +17,7 @@ LL |     match 0 { 0 if false => () }\n    |           ^ pattern `_` not covered\n    |\n    = note: the matched value is of type `i32`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     match 0 { 0 if false => (), _ => todo!() }\n    |                               ++++++++++++++"}, {"sha": "88178d6429197eac5850ce0b9cc5c5d098ef3631", "filename": "src/test/ui/pattern/usefulness/match-privately-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-privately-empty.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -17,7 +17,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Option<Private>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         }) => {}\n LL +         Some(Private { misc: true, .. }) => todo!()"}, {"sha": "961dd5901196149b004bc627c8a01647beacf62d", "filename": "src/test/ui/pattern/usefulness/match-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-slice-patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match list {\n    |           ^^^^ pattern `&[_, Some(_), .., None, _]` not covered\n    |\n    = note: the matched value is of type `&[Option<()>]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         &[.., Some(_), _] => {}\n LL ~         &[_, Some(_), .., None, _] => todo!(),"}, {"sha": "8f5adccea806db36ba27570cf92d19421e6e8502", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -16,7 +16,7 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `E`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n LL +         B | C => todo!()\n@@ -65,7 +65,7 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `&E`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n LL +         &B | &C => todo!()\n@@ -114,7 +114,7 @@ LL |     B,\n LL |     C\n    |     ^ not covered\n    = note: the matched value is of type `&&mut &E`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         E::A => {}\n LL +         &&mut &B | &&mut &C => todo!()\n@@ -160,7 +160,7 @@ LL | enum Opt {\n LL |     None,\n    |     ^^^^ not covered\n    = note: the matched value is of type `Opt`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Opt::Some(ref _x) => {}\n LL +         None => todo!()"}, {"sha": "cbbd544f943ba1f0f3488868e0dbcfe68bbc5004", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match-nested.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match (l1, l2) {\n    |           ^^^^^^^^ pattern `(Some(&[]), Err(_))` not covered\n    |\n    = note: the matched value is of type `(Option<&[T]>, Result<&[T], ()>)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         (None, Ok(&[_, _, ..])) => \"None, Ok(at least two elements)\",\n LL +         (Some(&[]), Err(_)) => todo!()\n@@ -23,7 +23,7 @@ note: `T` defined here\n LL | enum T { A(U), B }\n    |      -   ^ not covered\n    = note: the matched value is of type `T`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         T::B => { panic!(\"goodbye\"); }\n LL +         A(C) => todo!()"}, {"sha": "e7fa6a7814f85358f8b7a7c59358eec5aac730a5", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-match.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-match.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `T` defined here\n LL | enum T { A, B }\n    |      -   ^ not covered\n    = note: the matched value is of type `T`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL |     match x { T::B => { } A => todo!() }\n    |                           ++++++++++++\n@@ -22,7 +22,7 @@ LL |     match true {\n    |           ^^^^ pattern `false` not covered\n    |\n    = note: the matched value is of type `bool`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~       true => {}\n LL +       false => todo!()\n@@ -47,7 +47,7 @@ LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Option<i32>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~       None => {}\n LL +       Some(_) => todo!()\n@@ -60,7 +60,7 @@ LL |     match (2, 3, 4) {\n    |           ^^^^^^^^^ patterns `(_, _, i32::MIN..=3_i32)` and `(_, _, 5_i32..=i32::MAX)` not covered\n    |\n    = note: the matched value is of type `(i32, i32, i32)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~       (_, _, 4) => {}\n LL +       (_, _, i32::MIN..=3_i32) | (_, _, 5_i32..=i32::MAX) => todo!()\n@@ -73,7 +73,7 @@ LL |     match (T::A, T::A) {\n    |           ^^^^^^^^^^^^ patterns `(A, A)` and `(B, B)` not covered\n    |\n    = note: the matched value is of type `(T, T)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~       (T::B, T::A) => {}\n LL +       (A, A) | (B, B) => todo!()\n@@ -91,7 +91,7 @@ note: `T` defined here\n LL | enum T { A, B }\n    |      -      ^ not covered\n    = note: the matched value is of type `T`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~       T::A => {}\n LL +       B => todo!()\n@@ -104,7 +104,7 @@ LL |     match *vec {\n    |           ^^^^ pattern `[]` not covered\n    |\n    = note: the matched value is of type `[Option<isize>]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [None] => {}\n LL +         [] => todo!()\n@@ -117,7 +117,7 @@ LL |     match *vec {\n    |           ^^^^ pattern `[_, _, _, _, ..]` not covered\n    |\n    = note: the matched value is of type `[f32]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [] => (),\n LL +         [_, _, _, _, ..] => todo!()"}, {"sha": "b0cfd631fb07ebd28c493bafa38dd3722d1fee3c", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-witness.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `Foo` defined here\n LL | struct Foo {\n    |        ^^^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),\n LL +         Foo { first: false, second: Some([_, _, _, _]) } => todo!()\n@@ -30,7 +30,7 @@ LL | enum Color {\n LL |     Red,\n    |     ^^^ not covered\n    = note: the matched value is of type `Color`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Color::Green => (),\n LL +         Red => todo!()\n@@ -53,7 +53,7 @@ LL |     North, East, South, West\n    |            |     not covered\n    |            not covered\n    = note: the matched value is of type `Direction`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Direction::North => (),\n LL +         East | South | West => todo!()\n@@ -71,7 +71,7 @@ note: `ExcessiveEnum` defined here\n LL | enum ExcessiveEnum {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `ExcessiveEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         ExcessiveEnum::First => (),\n LL +         _ => todo!()\n@@ -92,7 +92,7 @@ LL | enum Color {\n LL |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n    |     ^^^^^^^^^^ not covered\n    = note: the matched value is of type `Color`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),\n LL +         CustomRGBA { a: true, .. } => todo!()\n@@ -105,7 +105,7 @@ LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n    |\n    = note: the matched value is of type `[Enum]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [_, _, ref tail @ .., _] => (),\n LL +         [Second(true), Second(false)] => todo!()\n@@ -118,7 +118,7 @@ LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered\n    |\n    = note: the matched value is of type `((), bool)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         ((), true) => (),\n LL +         ((), false) => todo!()"}, {"sha": "5d1e170ae6c2b5739f4396f09cd1e09c2d55cb53", "filename": "src/test/ui/pattern/usefulness/slice-patterns-exhaustiveness.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fslice-patterns-exhaustiveness.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, _]` not covered\n    |\n    = note: the matched value is of type `&[bool; 2]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [true, .., true] => {}\n LL +         &[false, _] => todo!()\n@@ -18,7 +18,7 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool; 3]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [true, .., true] => {}\n LL +         &[false, ..] => todo!()\n@@ -31,7 +31,7 @@ LL |     match s10 {\n    |           ^^^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool; 10]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [true, .., true] => {}\n LL +         &[false, ..] => todo!()\n@@ -44,7 +44,7 @@ LL |     match s2 {\n    |           ^^ pattern `&[false, true]` not covered\n    |\n    = note: the matched value is of type `&[bool; 2]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [.., false] => {}\n LL +         &[false, true] => todo!()\n@@ -57,7 +57,7 @@ LL |     match s3 {\n    |           ^^ pattern `&[false, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool; 3]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [.., false] => {}\n LL +         &[false, .., true] => todo!()\n@@ -70,7 +70,7 @@ LL |     match s {\n    |           ^ pattern `&[false, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [.., false] => {}\n LL +         &[false, .., true] => todo!()\n@@ -83,7 +83,7 @@ LL |     match s {\n    |           ^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [] => {}\n LL +         &[_, ..] => todo!()\n@@ -96,7 +96,7 @@ LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [_] => {}\n LL +         &[_, _, ..] => todo!()\n@@ -109,7 +109,7 @@ LL |     match s {\n    |           ^ pattern `&[false, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [true, ..] => {}\n LL +         &[false, ..] => todo!()\n@@ -122,7 +122,7 @@ LL |     match s {\n    |           ^ pattern `&[false, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [true, ..] => {}\n LL +         &[false, _, ..] => todo!()\n@@ -135,7 +135,7 @@ LL |     match s {\n    |           ^ pattern `&[_, .., false]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [.., true] => {}\n LL +         &[_, .., false] => todo!()\n@@ -148,7 +148,7 @@ LL |     match s {\n    |           ^ pattern `&[_, _, .., true]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [.., false] => {}\n LL +         &[_, _, .., true] => todo!()\n@@ -161,7 +161,7 @@ LL |     match s {\n    |           ^ pattern `&[true, _, .., _]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [false, .., false] => {}\n LL +         &[true, _, .., _] => todo!()\n@@ -174,7 +174,7 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         &[true] => {}\n LL +         &[] | &[_, _, ..] => todo!()\n@@ -187,7 +187,7 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         CONST => {}\n LL +         &[] | &[_, _, ..] => todo!()\n@@ -200,7 +200,7 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         &[false] => {}\n LL +         &[] | &[_, _, ..] => todo!()\n@@ -213,7 +213,7 @@ LL |     match s {\n    |           ^ patterns `&[]` and `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         CONST => {}\n LL +         &[] | &[_, _, ..] => todo!()\n@@ -226,7 +226,7 @@ LL |     match s {\n    |           ^ pattern `&[_, _, ..]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         CONST => {}\n LL +         &[_, _, ..] => todo!()\n@@ -239,7 +239,7 @@ LL |     match s {\n    |           ^ pattern `&[false]` not covered\n    |\n    = note: the matched value is of type `&[bool]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         &[_, _, ..] => {}\n LL +         &[false] => todo!()\n@@ -252,7 +252,7 @@ LL |     match s1 {\n    |           ^^ pattern `&[false]` not covered\n    |\n    = note: the matched value is of type `&[bool; 1]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         CONST1 => {}\n LL +         &[false] => todo!()"}, {"sha": "696ef9d8de9362d2ef539a56217077ec87403782", "filename": "src/test/ui/pattern/usefulness/stable-gated-patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstable-gated-patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -18,7 +18,7 @@ LL | |     Unstable,\n LL | | }\n    | |_-\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~         Foo::Stable => {}\n LL +         Stable2 | _ => todo!()\n@@ -42,7 +42,7 @@ LL | |     Unstable,\n LL | | }\n    | |_^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo::Stable2 => {}\n LL +         _ => todo!()"}, {"sha": "6127fad3f7d54410d144a5d218c6e100cf043366", "filename": "src/test/ui/pattern/usefulness/struct-like-enum-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fstruct-like-enum-nonexhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -12,7 +12,7 @@ LL | enum A {\n LL |     B { x: Option<isize> },\n    |     ^ not covered\n    = note: the matched value is of type `A`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         A::B { x: None } => {}\n LL +         B { x: Some(_) } => todo!()"}, {"sha": "fc0430d06fa1c03354a6875b6040d6793548f9b2", "filename": "src/test/ui/pattern/usefulness/tuple-struct-nonexhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftuple-struct-nonexhaustive.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `Foo` defined here\n LL | struct Foo(isize, isize);\n    |        ^^^\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo(2, b) => println!(\"{}\", b)\n LL +         Foo(_, _) => todo!()"}, {"sha": "acae605dae3a870f60e58cb3ccbea349d8eb0441", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match data {\n    |           ^^^^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         b\"\" => 1,\n LL ~         &[_, ..] => todo!(),\n@@ -18,7 +18,7 @@ LL |     match data {\n    |           ^^^^ patterns `&[]`, `&[_]`, `&[_, _]` and 1 more not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms\n    |\n LL ~         [_, _, _] => 1,\n LL ~         _ => todo!(),"}, {"sha": "8487c9725da8332f6935291b7ec28b33454786a0", "filename": "src/test/ui/pattern/usefulness/unstable-gated-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Funstable-gated-patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -17,7 +17,7 @@ LL | |     Unstable,\n LL | | }\n    | |_-\n    = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Foo::Stable2 => {}\n LL +         Unstable => todo!()"}, {"sha": "60c1f5420f62c29322de982b95fc63ad28cdf9d8", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -5,7 +5,7 @@ LL |     match sl {\n    |           ^^ pattern `&[]` not covered\n    |\n    = note: the matched value is of type `&[u8]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         [first, remainder @ ..] => {}\n LL ~         &[] => todo!(),"}, {"sha": "5ef078c20057df6faeb2dd592a53b16358fb7f21", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `EmptyNonExhaustiveEnum` defined here\n LL | pub enum EmptyNonExhaustiveEnum {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `EmptyNonExhaustiveEnum`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -33,7 +33,7 @@ LL | |     Struct { field: u32 },\n LL | | }\n    | |_^\n    = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         NonExhaustiveEnum::Struct { .. } => \"third\",\n LL +         _ => todo!()\n@@ -55,7 +55,7 @@ LL | |     Struct { field: u32 },\n LL | | }\n    | |_^\n    = note: the matched value is of type `NonExhaustiveEnum`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~     match enum_unit {\n LL +         _ => todo!(),"}, {"sha": "1f20904483fe755649f29eec70edd5d371ce43ce", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate_empty_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate_empty_match.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -30,7 +30,7 @@ LL |\n LL |     Struct { field: u32 }\n    |     ^^^^^^ not covered\n    = note: the matched value is of type `NonExhaustiveEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match NonExhaustiveEnum::Unit {\n LL +         Unit | Tuple(_) | Struct { .. } => todo!(),\n@@ -57,7 +57,7 @@ LL |\n LL |     Struct { field: u32 }\n    |     ^^^^^^ not covered\n    = note: the matched value is of type `NormalEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match NormalEnum::Unit {\n LL +         Unit | Tuple(_) | Struct { .. } => todo!(),"}, {"sha": "2dc4eabb8630a141b551cc9cb65cae9e40e399f7", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `IndirectUninhabitedEnum` defined here\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -29,7 +29,7 @@ note: `IndirectUninhabitedStruct` defined here\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -48,7 +48,7 @@ note: `IndirectUninhabitedTupleStruct` defined here\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -67,7 +67,7 @@ note: `IndirectUninhabitedVariants` defined here\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),"}, {"sha": "c1219054140353175cb8cc802b1ec64366ba3850", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `IndirectUninhabitedEnum` defined here\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -29,7 +29,7 @@ note: `IndirectUninhabitedStruct` defined here\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -48,7 +48,7 @@ note: `IndirectUninhabitedTupleStruct` defined here\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -67,7 +67,7 @@ note: `IndirectUninhabitedVariants` defined here\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),"}, {"sha": "f0cb13de3f799b9043fd0aea3ba3afdfd46c1208", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `IndirectUninhabitedEnum` defined here\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedEnum`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -29,7 +29,7 @@ note: `IndirectUninhabitedStruct` defined here\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -48,7 +48,7 @@ note: `IndirectUninhabitedTupleStruct` defined here\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -67,7 +67,7 @@ note: `IndirectUninhabitedVariants` defined here\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `IndirectUninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),"}, {"sha": "49febd9241dc6e9cceb1e5dd6511c8910b6afbae", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -11,7 +11,7 @@ LL | / pub enum UninhabitedEnum {\n LL | | }\n    | |_^\n    = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -32,7 +32,7 @@ LL | |     _priv: !,\n LL | | }\n    | |_^\n    = note: the matched value is of type `UninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -51,7 +51,7 @@ note: `UninhabitedTupleStruct` defined here\n LL | pub struct UninhabitedTupleStruct(!);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `UninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -75,7 +75,7 @@ LL | |     #[non_exhaustive] Struct { x: ! }\n LL | | }\n    | |_-\n    = note: the matched value is of type `UninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n LL +         Tuple(_) | Struct { .. } => todo!(),"}, {"sha": "c89c70ae6cc1f9acc1272dff64396311eb669aba", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -10,7 +10,7 @@ note: `UninhabitedStruct` defined here\n LL | pub struct UninhabitedStruct {\n    |            ^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `UninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -29,7 +29,7 @@ note: `UninhabitedTupleStruct` defined here\n LL | pub struct UninhabitedTupleStruct(!);\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `UninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -52,7 +52,7 @@ LL |     #[non_exhaustive] Tuple(!),\n LL |     #[non_exhaustive] Struct { x: ! }\n    |                       ^^^^^^ not covered\n    = note: the matched value is of type `UninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n LL +         Tuple(_) | Struct { .. } => todo!(),"}, {"sha": "e18c2678d323c2f4d60498067b71fc817171f02c", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -11,7 +11,7 @@ LL | / pub enum UninhabitedEnum {\n LL | | }\n    | |_^\n    = note: the matched value is of type `UninhabitedEnum`, which is marked as non-exhaustive\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -32,7 +32,7 @@ LL | |     _priv: !,\n LL | | }\n    | |_^\n    = note: the matched value is of type `UninhabitedStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -51,7 +51,7 @@ note: `UninhabitedTupleStruct` defined here\n LL | pub struct UninhabitedTupleStruct(!);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the matched value is of type `UninhabitedTupleStruct`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     match x {\n LL +         _ => todo!(),\n@@ -75,7 +75,7 @@ LL | |     #[non_exhaustive] Struct { x: ! }\n LL | | }\n    | |_-\n    = note: the matched value is of type `UninhabitedVariants`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n    |\n LL ~     match x {\n LL +         Tuple(_) | Struct { .. } => todo!(),"}, {"sha": "d90075d82f47b37defdc1e6a6d67b240ece67c86", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f45f73adc6afce2cce907fd038fdff1e395b632/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=6f45f73adc6afce2cce907fd038fdff1e395b632", "patch": "@@ -17,7 +17,7 @@ LL | |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Result<u32, &Void>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Ok(n) => n,\n LL ~         Err(_) => todo!(),\n@@ -36,7 +36,7 @@ LL | enum Void {}\n    |      ^^^^\n    = note: the matched value is of type `&Void`\n    = note: references are always considered inhabited\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     let _ = match x {\n LL +         _ => todo!(),\n@@ -50,7 +50,7 @@ LL |     let _ = match x {};\n    |                   ^\n    |\n    = note: the matched value is of type `(Void,)`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     let _ = match x {\n LL +         _ => todo!(),\n@@ -64,7 +64,7 @@ LL |     let _ = match x {};\n    |                   ^\n    |\n    = note: the matched value is of type `[Void; 1]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n    |\n LL ~     let _ = match x {\n LL +         _ => todo!(),\n@@ -78,7 +78,7 @@ LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n    = note: the matched value is of type `&[Void]`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         &[] => (),\n LL ~         &[_, ..] => todo!(),\n@@ -103,7 +103,7 @@ LL | |     Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n LL | | }\n    | |_-\n    = note: the matched value is of type `Result<u32, Void>`\n-help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n    |\n LL ~         Ok(x) => x,\n LL ~         Err(_) => todo!(),"}]}