{"sha": "b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDE0ZWYwOGZlZmE4MWE4ZjRiNDU5ZmJmYjExZGFmZTkwMDVkMGE=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-04T17:30:41Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-04T17:30:54Z"}, "message": "dropck", "tree": {"sha": "94091363cdb6cfdadbef2d559651a35d6755a7b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94091363cdb6cfdadbef2d559651a35d6755a7b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "html_url": "https://github.com/rust-lang/rust/commit/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3dc0464422ebadf3b8647f591bcf6e3107e805", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3dc0464422ebadf3b8647f591bcf6e3107e805", "html_url": "https://github.com/rust-lang/rust/commit/7f3dc0464422ebadf3b8647f591bcf6e3107e805"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "f0b8556b7a8af4aae44366afb7012abbb4b23522", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "patch": "@@ -217,10 +217,10 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         // repeated `.iter().any(..)` calls.\n \n         // This closure is a more robust way to check `Predicate` equality\n-        // than simple `==` checks (which were the previous implementation).\n-        // It relies on `ty::relate` for `TraitPredicate` and `ProjectionPredicate`\n-        // (which implement the Relate trait), while delegating on simple equality\n-        // for the other `Predicate`.\n+        // than simple `==` checks (which were the previous implementation). It relies on\n+        // `ty::relate` for `TraitPredicate`, `ProjectionPredicate`, `ConstEvaluatable`\n+        // `TypeOutlives` and `TypeWellFormedFromEnv` (which implement the Relate trait),\n+        // while delegating on simple equality for the other `Predicate`.\n         // This implementation solves (Issue #59497) and (Issue #58311).\n         // It is unclear to me at the moment whether the approach based on `relate`\n         // could be extended easily also to the other `Predicate`.\n@@ -235,6 +235,17 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n+                (\n+                    ty::PredicateKind::ConstEvaluatable(def_a, substs_a),\n+                    ty::PredicateKind::ConstEvaluatable(def_b, substs_b),\n+                ) => tcx.try_unify_abstract_consts(((def_a, substs_a), (def_b, substs_b))),\n+                (ty::PredicateKind::TypeOutlives(a), ty::PredicateKind::TypeOutlives(b)) => {\n+                    relator.relate(predicate.rebind(a.0), p.rebind(b.0)).is_ok()\n+                }\n+                (\n+                    ty::PredicateKind::TypeWellFormedFromEnv(a),\n+                    ty::PredicateKind::TypeWellFormedFromEnv(b),\n+                ) => relator.relate(predicate.rebind(a), p.rebind(b)).is_ok(),\n                 _ => predicate == p,\n             }\n         };"}, {"sha": "41fb5d70afd6ee5a25eb4eba346f7080320e1187", "filename": "src/test/ui/const-generics/const_evaluatable_checked/drop_impl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdrop_impl.rs?ref=b1d14ef08fefa81a8f4b459fbfb11dafe9005d0a", "patch": "@@ -0,0 +1,16 @@\n+//check-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize>\n+where\n+    [(); N + 1]: ;\n+\n+impl<const N: usize> Drop for Foo<N>\n+where\n+    [(); N + 1]: ,\n+{\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {}"}]}