{"sha": "79e3c7cd55094dc51f4196256db9648498f8b581", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZTNjN2NkNTUwOTRkYzUxZjQxOTYyNTZkYjk2NDg0OThmOGI1ODE=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-06-12T03:07:48Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-06-12T08:28:52Z"}, "message": "Remove wrong lifetime from LintContext", "tree": {"sha": "4c58ad75d8e28f3196d6f92ea465e7e029f55b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c58ad75d8e28f3196d6f92ea465e7e029f55b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e3c7cd55094dc51f4196256db9648498f8b581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e3c7cd55094dc51f4196256db9648498f8b581", "html_url": "https://github.com/rust-lang/rust/commit/79e3c7cd55094dc51f4196256db9648498f8b581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e3c7cd55094dc51f4196256db9648498f8b581/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1702a05fb7f787bf070538eafb13ecf7280e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1702a05fb7f787bf070538eafb13ecf7280e1d", "html_url": "https://github.com/rust-lang/rust/commit/ba1702a05fb7f787bf070538eafb13ecf7280e1d"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "aed1142d9aea1fc395fa66bf749da4a397fb8e6e", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=79e3c7cd55094dc51f4196256db9648498f8b581", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n     }\n }\n \n-fn span_useless_format<'a, 'tcx: 'a, T: LintContext<'tcx>>(cx: &'a T, span: Span, help: &str, mut sugg: String) {\n+fn span_useless_format<T: LintContext>(cx: &T, span: Span, help: &str, mut sugg: String) {\n     let to_replace = span.source_callsite();\n \n     // The callsite span contains the statement semicolon for some reason."}, {"sha": "6210cebfe9a0385710cf526f1bf9e19a58c59e86", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=79e3c7cd55094dc51f4196256db9648498f8b581", "patch": "@@ -48,7 +48,7 @@ impl<'a> DiagnosticWrapper<'a> {\n /// 17 |     std::mem::forget(seven);\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n-pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n+pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n     DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n }\n \n@@ -70,13 +70,7 @@ pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: impl I\n ///    |\n ///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    span: Span,\n-    msg: &str,\n-    help: &str,\n-) {\n+pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     db.0.help(help);\n     db.docs_link(lint);\n@@ -103,7 +97,7 @@ pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n /// 10 |     forget(&SomeStruct);\n ///    |            ^^^^^^^^^^^\n /// ```\n-pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+pub fn span_note_and_lint<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n     span: Span,\n@@ -120,13 +114,8 @@ pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     db.docs_link(lint);\n }\n \n-pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n-    cx: &'a T,\n-    lint: &'static Lint,\n-    sp: Span,\n-    msg: &str,\n-    f: F,\n-) where\n+pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n@@ -166,7 +155,7 @@ pub fn span_lint_hir_and_then(\n ///     |\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n-pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n+pub fn span_lint_and_sugg<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n     sp: Span,"}, {"sha": "ae5c430f133fb387cd1b3193e2d2faa5e4a5cdb0", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=79e3c7cd55094dc51f4196256db9648498f8b581", "patch": "@@ -114,7 +114,7 @@ pub fn in_macro(span: Span) -> bool {\n // sources that the user has no control over.\n // For some reason these attributes don't have any expansion info on them, so\n // we have to check it this way until there is a better way.\n-pub fn is_present_in_source<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n+pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n     if let Some(snippet) = snippet_opt(cx, span) {\n         if snippet.is_empty() {\n             return false;\n@@ -455,7 +455,7 @@ pub fn contains_name(name: Name, expr: &Expr) -> bool {\n /// ```rust,ignore\n /// snippet(cx, expr.span, \"..\")\n /// ```\n-pub fn snippet<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n     snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n }\n \n@@ -465,7 +465,7 @@ pub fn snippet<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str)\n /// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`.\n /// - If the default value is used and the applicability level is `MachineApplicable`, change it to\n /// `HasPlaceholders`\n-pub fn snippet_with_applicability<'a, 'b, T: LintContext<'b>>(\n+pub fn snippet_with_applicability<'a, T: LintContext>(\n     cx: &T,\n     span: Span,\n     default: &'a str,\n@@ -487,12 +487,12 @@ pub fn snippet_with_applicability<'a, 'b, T: LintContext<'b>>(\n \n /// Same as `snippet`, but should only be used when it's clear that the input span is\n /// not a macro argument.\n-pub fn snippet_with_macro_callsite<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+pub fn snippet_with_macro_callsite<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n     snippet(cx, span.source_callsite(), default)\n }\n \n /// Converts a span to a code snippet. Returns `None` if not available.\n-pub fn snippet_opt<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String> {\n+pub fn snippet_opt<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     cx.sess().source_map().span_to_snippet(span).ok()\n }\n \n@@ -506,14 +506,14 @@ pub fn snippet_opt<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String>\n /// ```rust,ignore\n /// snippet_block(cx, expr.span, \"..\")\n /// ```\n-pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+pub fn snippet_block<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n     let snip = snippet(cx, span, default);\n     trim_multiline(snip, true)\n }\n \n /// Same as `snippet_block`, but adapts the applicability level by the rules of\n /// `snippet_with_applicabiliy`.\n-pub fn snippet_block_with_applicability<'a, 'b, T: LintContext<'b>>(\n+pub fn snippet_block_with_applicability<'a, T: LintContext>(\n     cx: &T,\n     span: Span,\n     default: &'a str,\n@@ -524,7 +524,7 @@ pub fn snippet_block_with_applicability<'a, 'b, T: LintContext<'b>>(\n }\n \n /// Returns a new Span that covers the full last line of the given Span\n-pub fn last_line_of_span<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Span {\n+pub fn last_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n     let line_no = source_map_and_line.line;\n     let line_start = &source_map_and_line.sf.lines[line_no];\n@@ -533,12 +533,7 @@ pub fn last_line_of_span<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Span {\n \n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n-pub fn expr_block<'a, 'b, T: LintContext<'b>>(\n-    cx: &T,\n-    expr: &Expr,\n-    option: Option<String>,\n-    default: &'a str,\n-) -> Cow<'a, str> {\n+pub fn expr_block<'a, T: LintContext>(cx: &T, expr: &Expr, option: Option<String>, default: &'a str) -> Cow<'a, str> {\n     let code = snippet_block(cx, expr.span, default);\n     let string = option.unwrap_or_default();\n     if in_macro_or_desugar(expr.span) {"}, {"sha": "70286dc95a3bcb6ff3c00755ebcbfcfd78eeccd3", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e3c7cd55094dc51f4196256db9648498f8b581/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=79e3c7cd55094dc51f4196256db9648498f8b581", "patch": "@@ -480,7 +480,7 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n \n /// Returns the indentation before `span` if there are nothing but `[ \\t]`\n /// before it on its line.\n-fn indentation<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String> {\n+fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     let lo = cx.sess().source_map().lookup_char_pos(span.lo());\n     if let Some(line) = lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */) {\n         if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n@@ -499,7 +499,7 @@ fn indentation<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Option<String> {\n }\n \n /// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n+pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -546,7 +546,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext<'a>> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n+impl<'a, 'b, 'c, T: LintContext> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}]}