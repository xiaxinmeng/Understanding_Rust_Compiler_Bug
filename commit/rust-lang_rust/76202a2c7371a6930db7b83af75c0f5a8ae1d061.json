{"sha": "76202a2c7371a6930db7b83af75c0f5a8ae1d061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjAyYTJjNzM3MWE2OTMwZGI3YjgzYWY3NWMwZjVhOGFlMWQwNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-29T17:22:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-29T17:22:15Z"}, "message": "Rename NomialDef -> AdtDef", "tree": {"sha": "9b355311e2b9261c125f2c3a2a0f205b9d8e5da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b355311e2b9261c125f2c3a2a0f205b9d8e5da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76202a2c7371a6930db7b83af75c0f5a8ae1d061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76202a2c7371a6930db7b83af75c0f5a8ae1d061", "html_url": "https://github.com/rust-lang/rust/commit/76202a2c7371a6930db7b83af75c0f5a8ae1d061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76202a2c7371a6930db7b83af75c0f5a8ae1d061/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d28292157e1b6c9675ef64eddf53786c3e7dc5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d28292157e1b6c9675ef64eddf53786c3e7dc5f", "html_url": "https://github.com/rust-lang/rust/commit/3d28292157e1b6c9675ef64eddf53786c3e7dc5f"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "90ece9fab050eb5386ca5b9b6ab57aa0f915c3f2", "filename": "crates/ra_assists/src/handlers/generate_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_derive.rs?ref=76202a2c7371a6930db7b83af75c0f5a8ae1d061", "patch": "@@ -26,7 +26,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let cap = ctx.config.snippet_cap?;\n-    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     let target = nominal.syntax().text_range();\n     acc.add(\n@@ -58,7 +58,7 @@ pub(crate) fn generate_derive(acc: &mut Assists, ctx: &AssistContext) -> Option<\n }\n \n // Insert `derive` after doc comments.\n-fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextSize> {\n+fn derive_insertion_offset(nominal: &ast::AdtDef) -> Option<TextSize> {\n     let non_ws_child = nominal\n         .syntax()\n         .children_with_tokens()"}, {"sha": "42eb4defaccc51263488b835f2c9e3d589f98911", "filename": "crates/ra_assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=76202a2c7371a6930db7b83af75c0f5a8ae1d061", "patch": "@@ -23,7 +23,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n+    let nominal = ctx.find_node_at_offset::<ast::AdtDef>()?;\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n     acc.add("}, {"sha": "16a61d071f4b65ff987a97e3a622ddf48a4a223b", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=76202a2c7371a6930db7b83af75c0f5a8ae1d061", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn goto_implementation(\n \n     let krate = sema.to_module_def(position.file_id)?.krate();\n \n-    if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n+    if let Some(nominal_def) = find_node_at_offset::<ast::AdtDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n             nominal_def.syntax().text_range(),\n             impls_for_def(&sema, &nominal_def, krate)?,\n@@ -40,13 +40,13 @@ pub(crate) fn goto_implementation(\n \n fn impls_for_def(\n     sema: &Semantics<RootDatabase>,\n-    node: &ast::NominalDef,\n+    node: &ast::AdtDef,\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n-        ast::NominalDef::StructDef(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::NominalDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n-        ast::NominalDef::UnionDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::StructDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::UnionDef(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n     let impls = ImplDef::all_in_crate(sema.db, krate);"}, {"sha": "04a4d354c2e97b4547bf7f8840661646b05ec13e", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76202a2c7371a6930db7b83af75c0f5a8ae1d061/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=76202a2c7371a6930db7b83af75c0f5a8ae1d061", "patch": "@@ -1376,15 +1376,15 @@ impl ast::AttrsOwner for ExternItem {}\n impl ast::NameOwner for ExternItem {}\n impl ast::VisibilityOwner for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum NominalDef {\n+pub enum AdtDef {\n     StructDef(StructDef),\n     EnumDef(EnumDef),\n     UnionDef(UnionDef),\n }\n-impl ast::AttrsOwner for NominalDef {}\n-impl ast::NameOwner for NominalDef {}\n-impl ast::TypeParamsOwner for NominalDef {}\n-impl ast::VisibilityOwner for NominalDef {}\n+impl ast::AttrsOwner for AdtDef {}\n+impl ast::NameOwner for AdtDef {}\n+impl ast::TypeParamsOwner for AdtDef {}\n+impl ast::VisibilityOwner for AdtDef {}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3345,16 +3345,16 @@ impl AstNode for ExternItem {\n         }\n     }\n }\n-impl From<StructDef> for NominalDef {\n-    fn from(node: StructDef) -> NominalDef { NominalDef::StructDef(node) }\n+impl From<StructDef> for AdtDef {\n+    fn from(node: StructDef) -> AdtDef { AdtDef::StructDef(node) }\n }\n-impl From<EnumDef> for NominalDef {\n-    fn from(node: EnumDef) -> NominalDef { NominalDef::EnumDef(node) }\n+impl From<EnumDef> for AdtDef {\n+    fn from(node: EnumDef) -> AdtDef { AdtDef::EnumDef(node) }\n }\n-impl From<UnionDef> for NominalDef {\n-    fn from(node: UnionDef) -> NominalDef { NominalDef::UnionDef(node) }\n+impl From<UnionDef> for AdtDef {\n+    fn from(node: UnionDef) -> AdtDef { AdtDef::UnionDef(node) }\n }\n-impl AstNode for NominalDef {\n+impl AstNode for AdtDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             STRUCT_DEF | ENUM_DEF | UNION_DEF => true,\n@@ -3363,18 +3363,18 @@ impl AstNode for NominalDef {\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            STRUCT_DEF => NominalDef::StructDef(StructDef { syntax }),\n-            ENUM_DEF => NominalDef::EnumDef(EnumDef { syntax }),\n-            UNION_DEF => NominalDef::UnionDef(UnionDef { syntax }),\n+            STRUCT_DEF => AdtDef::StructDef(StructDef { syntax }),\n+            ENUM_DEF => AdtDef::EnumDef(EnumDef { syntax }),\n+            UNION_DEF => AdtDef::UnionDef(UnionDef { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            NominalDef::StructDef(it) => &it.syntax,\n-            NominalDef::EnumDef(it) => &it.syntax,\n-            NominalDef::UnionDef(it) => &it.syntax,\n+            AdtDef::StructDef(it) => &it.syntax,\n+            AdtDef::EnumDef(it) => &it.syntax,\n+            AdtDef::UnionDef(it) => &it.syntax,\n         }\n     }\n }\n@@ -3423,7 +3423,7 @@ impl std::fmt::Display for ExternItem {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for NominalDef {\n+impl std::fmt::Display for AdtDef {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "b6ec5d5e784f76d868e4b7ed61c9cc6c265d70b1", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76202a2c7371a6930db7b83af75c0f5a8ae1d061/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/76202a2c7371a6930db7b83af75c0f5a8ae1d061/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=76202a2c7371a6930db7b83af75c0f5a8ae1d061", "patch": "@@ -426,7 +426,7 @@ ExternItemList =\n MetaItem =\n   Path '=' AttrInput nested_meta_items:MetaItem*\n \n-NominalDef =\n+AdtDef =\n   StructDef\n | EnumDef\n | UnionDef"}]}