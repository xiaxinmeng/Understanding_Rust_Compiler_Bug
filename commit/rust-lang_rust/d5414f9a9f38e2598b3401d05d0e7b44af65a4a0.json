{"sha": "d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDE0ZjlhOWYzOGUyNTk4YjM0MDFkMDVkMGU3YjQ0YWY2NWE0YTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-09T15:52:06Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-25T12:48:11Z"}, "message": "Implement new panic!() behaviour for Rust 2021.", "tree": {"sha": "2ac89682e45d5d16327a791f1025df12744d80e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac89682e45d5d16327a791f1025df12744d80e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "html_url": "https://github.com/rust-lang/rust/commit/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec5cfbabab4a81f10a5bad6151302df17e92431", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec5cfbabab4a81f10a5bad6151302df17e92431", "html_url": "https://github.com/rust-lang/rust/commit/dec5cfbabab4a81f10a5bad6151302df17e92431"}], "stats": {"total": 851, "additions": 506, "deletions": 345}, "files": [{"sha": "bcb3622a959806c45b36423287fc6a8e9e7fe27a", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -33,6 +33,7 @@ mod global_allocator;\n mod global_asm;\n mod llvm_asm;\n mod log_syntax;\n+mod panic;\n mod source_util;\n mod test;\n mod trace_macros;\n@@ -76,6 +77,8 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,\n+        core_panic: panic::expand_panic,\n+        std_panic: panic::expand_panic,\n         stringify: source_util::expand_stringify,\n         trace_macros: trace_macros::expand_trace_macros,\n     }"}, {"sha": "6f5962d435c330a2316bd058132511af36e80584", "filename": "compiler/rustc_builtin_macros/src/panic.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -0,0 +1,48 @@\n+use rustc_ast::ptr::P;\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n+use rustc_ast::*;\n+use rustc_expand::base::*;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+\n+// This expands to either\n+// - `$crate::panic::panic_2015!(...)` or\n+// - `$crate::panic::panic_2021!(...)`\n+// depending on the edition.\n+//\n+// This is used for both std::panic!() and core::panic!().\n+//\n+// `$crate` will refer to either the `std` or `core` crate depending on which\n+// one we're expanding from.\n+pub fn expand_panic<'cx>(\n+    cx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n+    let panic = if sp.rust_2021() { sym::panic_2021 } else { sym::panic_2015 };\n+\n+    let sp = cx.with_call_site_ctxt(sp);\n+\n+    MacEager::expr(\n+        cx.expr(\n+            sp,\n+            ExprKind::MacCall(MacCall {\n+                path: Path {\n+                    span: sp,\n+                    segments: cx\n+                        .std_path(&[sym::panic, panic])\n+                        .into_iter()\n+                        .map(|ident| PathSegment::from_ident(ident))\n+                        .collect(),\n+                    tokens: None,\n+                },\n+                args: P(MacArgs::Delimited(\n+                    DelimSpan::from_single(sp),\n+                    MacDelimiter::Parenthesis,\n+                    tts,\n+                )),\n+                prior_type_ascription: None,\n+            }),\n+        ),\n+    )\n+}"}, {"sha": "4a6aca72acbbec957c2b4af13594c57ee60a22ed", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -19,10 +19,9 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// `panic!(\"{}\")` panics with the message `\"{}\"`, as a `panic!()` invocation\n-    /// with a single argument does not use `format_args!()`.\n-    /// A future edition of Rust will interpret this string as format string,\n-    /// which would break this.\n+    /// In Rust 2018 and earlier, `panic!(\"{}\")` panics with the message `\"{}\"`,\n+    /// as a `panic!()` invocation with a single argument does not use `format_args!()`.\n+    /// Rust 2021 interprets this string as format string, which breaks this.\n     PANIC_FMT,\n     Warn,\n     \"detect braces in single-argument panic!() invocations\",\n@@ -50,8 +49,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         if let ast::LitKind::Str(sym, _) = lit.node {\n             let mut expn = f.span.ctxt().outer_expn_data();\n             if let Some(id) = expn.macro_def_id {\n-                if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n-                    || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n+                if cx.tcx.is_diagnostic_item(sym::std_panic_2015_macro, id)\n+                    || cx.tcx.is_diagnostic_item(sym::core_panic_2015_macro, id)\n                 {\n                     let fmt = sym.as_str();\n                     if !fmt.contains(&['{', '}'][..]) {\n@@ -75,9 +74,15 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                     let n_arguments =\n                         (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n-                    // Unwrap another level of macro expansion if this panic!()\n-                    // was expanded from assert!() or debug_assert!().\n-                    for &assert in &[sym::assert_macro, sym::debug_assert_macro] {\n+                    // Unwrap more levels of macro expansion, as panic_2015!()\n+                    // was likely expanded from panic!() and possibly from\n+                    // [debug_]assert!().\n+                    for &assert in &[\n+                        sym::std_panic_macro,\n+                        sym::core_panic_macro,\n+                        sym::assert_macro,\n+                        sym::debug_assert_macro,\n+                    ] {\n                         let parent = expn.call_site.ctxt().outer_expn_data();\n                         if parent\n                             .macro_def_id"}, {"sha": "ea7bbeb528e73e82fafd94b22a53920e0353d069", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -398,6 +398,8 @@ symbols! {\n         copysignf64,\n         core,\n         core_intrinsics,\n+        core_panic,\n+        core_panic_2015_macro,\n         core_panic_macro,\n         cosf32,\n         cosf64,\n@@ -794,6 +796,8 @@ symbols! {\n         owned_box,\n         packed,\n         panic,\n+        panic_2015,\n+        panic_2021,\n         panic_abort,\n         panic_bounds_check,\n         panic_handler,\n@@ -1095,6 +1099,8 @@ symbols! {\n         staticlib,\n         std,\n         std_inject,\n+        std_panic,\n+        std_panic_2015_macro,\n         std_panic_macro,\n         stmt,\n         stmt_expr_attributes,"}, {"sha": "10d30609aca324014e8e89270652af4048677c56", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -1,3 +1,4 @@\n+#[cfg(bootstrap)]\n #[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic)]\n@@ -18,6 +19,21 @@ macro_rules! panic {\n     );\n }\n \n+#[cfg(not(bootstrap))]\n+#[doc(include = \"panic.md\")]\n+#[macro_export]\n+#[rustc_builtin_macro = \"core_panic\"]\n+#[allow_internal_unstable(edition_panic)]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+#[rustc_diagnostic_item = \"core_panic_macro\"]\n+macro_rules! panic {\n+    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`\n+    // depending on the edition of the caller.\n+    ($($arg:tt)*) => {\n+        /* compiler built-in */\n+    };\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "cbb10c324c495e6ade9bb1262f8ec4cfc9d0ee2b", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -5,6 +5,40 @@\n use crate::any::Any;\n use crate::fmt;\n \n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"core_panic_2015_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro panic_2015 {\n+    () => (\n+        $crate::panicking::panic(\"explicit panic\")\n+    ),\n+    ($msg:literal $(,)?) => (\n+        $crate::panicking::panic($msg)\n+    ),\n+    ($msg:expr $(,)?) => (\n+        $crate::panicking::panic_str($msg)\n+    ),\n+    ($fmt:expr, $($arg:tt)+) => (\n+        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))\n+    ),\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n+#[allow_internal_unstable(core_panic)]\n+#[rustc_diagnostic_item = \"core_panic_2021_macro\"]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro panic_2021 {\n+    () => (\n+        $crate::panicking::panic(\"explicit panic\")\n+    ),\n+    ($($t:tt)+) => (\n+        $crate::panicking::panic_fmt($crate::format_args!($($t)+))\n+    ),\n+}\n+\n /// A struct providing information about a panic.\n ///\n /// `PanicInfo` structure is passed to a panic hook set by the [`set_hook`]"}, {"sha": "f9ff1532dc5d6f182cdc63888fb33a7df5306983", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -258,6 +258,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n #![feature(duration_zero)]\n+#![feature(edition_panic)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]"}, {"sha": "0ce6542cb7253d5cd7eeccdc218ca386bdac143d", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -4,6 +4,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n+#[cfg(bootstrap)]\n #[doc(include = \"../../core/src/macros/panic.md\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -17,6 +18,21 @@ macro_rules! panic {\n     });\n }\n \n+#[cfg(not(bootstrap))]\n+#[doc(include = \"../../core/src/macros/panic.md\")]\n+#[macro_export]\n+#[rustc_builtin_macro = \"std_panic\"]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable(edition_panic)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_macro\")]\n+macro_rules! panic {\n+    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`\n+    // depending on the edition of the caller.\n+    ($($arg:tt)*) => {\n+        /* compiler built-in */\n+    };\n+}\n+\n /// Prints to the standard output.\n ///\n /// Equivalent to the [`println!`] macro except that a newline is not printed at"}, {"sha": "00a2865120e118b2b2ecf59c9c1d0daa9ad20a26", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -17,6 +17,36 @@ use crate::sync::{Arc, Mutex, RwLock};\n use crate::task::{Context, Poll};\n use crate::thread::Result;\n \n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n+#[allow_internal_unstable(libstd_sys_internals)]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"std_panic_2015_macro\")]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro panic_2015 {\n+    () => ({\n+        $crate::rt::begin_panic(\"explicit panic\")\n+    }),\n+    ($msg:expr $(,)?) => ({\n+        $crate::rt::begin_panic($msg)\n+    }),\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))\n+    }),\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"edition_panic\", issue = \"none\", reason = \"use panic!() instead\")]\n+#[allow_internal_unstable(libstd_sys_internals)]\n+#[rustc_macro_transparency = \"semitransparent\"]\n+pub macro panic_2021 {\n+    () => ({\n+        $crate::rt::begin_panic(\"explicit panic\")\n+    }),\n+    ($($t:tt)+) => ({\n+        $crate::rt::begin_panic_fmt(&$crate::format_args!($($t)+))\n+    }),\n+}\n+\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use crate::panicking::{set_hook, take_hook};\n "}, {"sha": "e1f2fbe84434a989ebaf8ede1256160175effb09", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -4,7 +4,7 @@\n   fn hello() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/control-flow-simplification.rs:11:14: 11:14\n       let mut _1: bool;                    // in scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n-      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _2: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n@@ -15,16 +15,16 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+          begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str\n                                            // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n       }\n   "}, {"sha": "9139f2cf6092b30ce326418a55238d14a15756ec", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -11,16 +11,16 @@\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _13: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -34,30 +34,30 @@\n                   scope 5 {\n                       debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _27;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n                   }\n               }\n           }\n@@ -111,26 +111,26 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           (_12.0: &[&str]) = move _13 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_16.0: &&i32) = &_17;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _19 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _18 = &_19;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _24 = (_16.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _27 = (_16.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -144,47 +144,47 @@\n       }\n   \n       bb3: {\n-          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _26 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n       }\n   }"}, {"sha": "9139f2cf6092b30ce326418a55238d14a15756ec", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -11,16 +11,16 @@\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _13: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _14: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _15: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _16: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let _17: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _19: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _20: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _21: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -34,30 +34,30 @@\n                   scope 5 {\n                       debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _27;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _23;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _22: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _23: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _24: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _27;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _26;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _25: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _26: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _27: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug pieces => (_12.0: &[&str]); // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug args => _29;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _28: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _29: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n                   }\n               }\n           }\n@@ -111,26 +111,26 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           (_12.0: &[&str]) = move _13 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_16.0: &&i32) = &_17;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _19 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _18 = &_19;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_16.1: &&i32) = move _18;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _24 = (_16.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _27 = (_16.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _22 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _23) -> bb3; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -144,47 +144,47 @@\n       }\n   \n       bb3: {\n-          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_20.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {\n-          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_20.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _22; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n           _26 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _26) -> bb5; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb5: {\n-          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.0: &core::fmt::Opaque) = transmute::<&&i32, &core::fmt::Opaque>(move _27) -> bb6; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_21.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _25; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_25);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _15 = [move _20, move _21];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _14 = &_15;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _29 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          discriminant(_28) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_12.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _28; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_12.2: &[std::fmt::ArgumentV1]) = move _29; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_28);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic_fmt(move _12); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n       }\n   }"}, {"sha": "0eea0bf0a061442d321c85777cd12cca88e4884d", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -18,25 +18,25 @@\n       let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _21: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _22: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _23: &[&str; 3];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _24: [&str; 3];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _30: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _31: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _32: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _33: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _37: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _38: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _41: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n@@ -56,33 +56,33 @@\n                   scope 5 {\n                       debug arg0 => _34;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _35;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n                   }\n               }\n           }\n@@ -155,8 +155,8 @@\n       }\n   \n       bb3: {\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -171,11 +171,11 @@\n           _22 = _23;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_31);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _31 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -184,28 +184,28 @@\n           StorageLive(_33);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _33 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _32 = &_33;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _34 = (_29.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _35 = (_29.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _37 = _34;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _38 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -223,86 +223,86 @@\n       }\n   \n       bb5: {\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = _35;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _41 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb8: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n       }\n   }"}, {"sha": "0eea0bf0a061442d321c85777cd12cca88e4884d", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -18,25 +18,25 @@\n       let mut _16: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _17: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _18: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _20: std::fmt::Arguments;    // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _21: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _22: &[&str; 3];             // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _23: &[&str; 3];                 // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _24: [&str; 3];                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _25: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _26: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _27: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let _28: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n+      let mut _29: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _30: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _31: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _32: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _33: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _36: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _37: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _38: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _39: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _41: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n@@ -56,33 +56,33 @@\n                   scope 5 {\n                       debug arg0 => _34;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _35;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _37;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _38;  // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _44: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _45: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _46: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _47: &&i32; // in scope 6 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 7 {\n                           }\n                       }\n-                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug x => _40;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          debug f => _41;  // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _48: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _50: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                          let mut _51: &&i32; // in scope 8 at $SRC_DIR/core/src/panic.rs:LL:COL\n                           scope 9 {\n                           }\n                       }\n                   }\n-                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug pieces => _21; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      debug args => _25;   // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _52: &[&str]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _53: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+                      let mut _54: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n                   }\n               }\n           }\n@@ -155,8 +155,8 @@\n       }\n   \n       bb3: {\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -171,11 +171,11 @@\n           _22 = _23;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_28);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_29);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_31);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _31 = _13;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -184,28 +184,28 @@\n           StorageLive(_33);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _33 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _32 = &_33;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_29.0: &&i32) = move _30;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_29.1: &&i32) = move _32;       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_32);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_30);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _34 = (_29.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _35 = (_29.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _37 = _34;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _38 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _45 = _38;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _44 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _45) -> bb5; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n@@ -223,86 +223,86 @@\n       }\n   \n       bb5: {\n-          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _47 = _37;                       // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _46 = transmute::<&&i32, &core::fmt::Opaque>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb6: {\n-          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_47);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_36.0: &core::fmt::Opaque) = move _46; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_36.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _44; // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_44);                // scope 7 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_38);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_37);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = _35;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _41 = <&i32 as Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _49 = _41;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _48 = transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _49) -> bb7; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb7: {\n-          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _51 = _40;                       // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _50 = transmute::<&&i32, &core::fmt::Opaque>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb8: {\n-          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_39.0: &core::fmt::Opaque) = move _50; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_39.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _48; // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_50);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_48);                // scope 9 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_41);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _28 = [move _36, move _39];      // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _27 = &_28;                      // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _26 = _27;                       // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _25 = move _26 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_26);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _52 = _21;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          discriminant(_53) = 0;           // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageLive(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          _54 = _25;                       // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.0: &[&str]) = move _52;     // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _53; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          (_20.2: &[std::fmt::ArgumentV1]) = move _54; // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_54);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_53);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_52);                // scope 10 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_25);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          StorageDead(_21);                // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic_fmt(move _20); // scope 4 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) -> ! {core::panicking::panic_fmt}, val: Value(Scalar(<ZST>)) }\n       }\n   }"}, {"sha": "7913ad260e893d5165ddacec91ff6a1fe761bd9a", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -21,7 +21,7 @@\n       let mut _19: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:54: 9:68\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:9:70: 9:84\n-      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:10: 9:16\n@@ -64,10 +64,10 @@\n       }\n   \n       bb1: {\n-          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n+          core::panicking::panic(const \"internal error: entered unreachable code\"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n                                            // + ty: &str"}, {"sha": "75e0656dd7bbf0b561183555c0f387efd802ed88", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -5,7 +5,7 @@ fn unwrap(_1: Option<T>) -> T {\n     let mut _0: T;                       // return place in scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:33: 7:34\n     let mut _2: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     let _3: T;                           // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n-    let mut _4: !;                       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+    let mut _4: !;                       // in scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n     let mut _5: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     let mut _6: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     let mut _7: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n@@ -19,16 +19,16 @@ fn unwrap(_1: Option<T>) -> T {\n     }\n \n     bb1: {\n-        StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-        begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n+        begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                         // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 })\n                                          // mir::Constant\n-                                         // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                         // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n     }\n "}, {"sha": "29c98c45c4e4c9285dc6e05b498b4af8af7a95b1", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -9,20 +9,20 @@ LL | const Z: () = panic!(\"cheese\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:9:15\n+  --> $DIR/feature-gate-const_panic.rs:6:15\n    |\n-LL | const X: () = unimplemented!();\n-   |               ^^^^^^^^^^^^^^^^\n+LL | const Y: () = unreachable!();\n+   |               ^^^^^^^^^^^^^^\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n-  --> $DIR/feature-gate-const_panic.rs:6:15\n+  --> $DIR/feature-gate-const_panic.rs:9:15\n    |\n-LL | const Y: () = unreachable!();\n-   |               ^^^^^^^^^^^^^^\n+LL | const X: () = unimplemented!();\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable"}, {"sha": "8a90fdfc5751b0cc9aa399a25877c4eb8a4514f9", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -5,7 +5,7 @@ LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n-   |     inside `foo` at $SRC_DIR/std/src/macros.rs:LL:COL\n+   |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |     inside `_` at $DIR/unwind-abort.rs:8:15\n ...\n LL | const _: () = foo();"}, {"sha": "b2e037c69cb00f4f290dbf848345560190c4650b", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -5,7 +5,7 @@ LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'called `Option::unwrap()` on a `None` value', $DIR/const-unwrap.rs:9:38\n-   |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |                     inside `Option::<i32>::unwrap` at $SRC_DIR/core/src/panic.rs:LL:COL\n    |                     inside `BAR` at $DIR/const-unwrap.rs:9:18\n    | \n   ::: $DIR/const-unwrap.rs:9:1"}, {"sha": "ba3b61a3fa732c187ce5d696e873c58c607fddf3", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -32,6 +32,7 @@ const U8_MUT3: &u8 = { //~ NOTE\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n+    //~| NOTE in this expansion of panic!\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "4484a813a883d33a6af01299d49861e60403dba0", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5414f9a9f38e2598b3401d05d0e7b44af65a4a0/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=d5414f9a9f38e2598b3401d05d0e7b44af65a4a0", "patch": "@@ -11,7 +11,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n@@ -29,7 +29,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:48:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n@@ -52,7 +52,7 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:59:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n@@ -65,6 +65,7 @@ LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n+LL | |\n LL | | };\n    | |__-\n    |\n@@ -75,31 +76,31 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:48:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:59:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^"}]}