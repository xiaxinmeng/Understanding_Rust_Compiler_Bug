{"sha": "0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMmVhZTcyYWY4YzEyYTEwN2FkZTkxOWQ5YzMzYzVhZTBlMGM2YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T01:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T01:16:22Z"}, "message": "Auto merge of #54164 - mikhail-m1:54131, r=pnkfelix\n\nadd \"temporary value borrowed for too long\" error\n\nIssue #54131\n\nr? @nikomatsakis", "tree": {"sha": "c6763d95be5832c2c30c15cdf725f5e16f79ac4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6763d95be5832c2c30c15cdf725f5e16f79ac4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "html_url": "https://github.com/rust-lang/rust/commit/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92aff72a0503baa6cf0448555f649957de802b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/92aff72a0503baa6cf0448555f649957de802b03", "html_url": "https://github.com/rust-lang/rust/commit/92aff72a0503baa6cf0448555f649957de802b03"}, {"sha": "2af199d58e10374d907d26b671c8b1c2e84ebf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af199d58e10374d907d26b671c8b1c2e84ebf9a", "html_url": "https://github.com/rust-lang/rust/commit/2af199d58e10374d907d26b671c8b1c2e84ebf9a"}], "stats": {"total": 1044, "additions": 852, "deletions": 192}, "files": [{"sha": "f29870623a9eeb692d4bf375d463328e50653967", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -694,9 +694,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let mut err =\n-            tcx.path_does_not_live_long_enough(proper_span, \"borrowed value\", Origin::Mir);\n-        err.span_label(proper_span, \"temporary value does not live long enough\");\n-        err.span_label(drop_span, \"temporary value only lives until here\");\n+            tcx.temporary_value_borrowed_for_too_long(proper_span, Origin::Mir);\n+        err.span_label(proper_span, \"creates a temporary which is freed while still in use\");\n+        err.span_label(drop_span, \"temporary value is freed at the end of this statement\");\n \n         let explanation = self.explain_why_borrow_contains_point(context, borrow, None);\n         match explanation {"}, {"sha": "75745849290eb7cc40aaa768bb43e20d5b551b94", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -2261,7 +2261,92 @@ that after `demo` finishes excuting, something else (such as the\n destructor!) could access `s.data` after the end of that shorter\n lifetime, which would again violate the `&mut`-borrow's exclusive\n access.\n+\"##,\n+\n+E0716: r##\"\n+This error indicates that a temporary value is being dropped\n+while a borrow is still in active use.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0716\n+# #![feature(nll)]\n+fn foo() -> i32 { 22 }\n+fn bar(x: &i32) -> &i32 { x }\n+let p = bar(&foo());\n+         // ------ creates a temporary\n+let q = *p;\n+```\n+\n+Here, the expression `&foo()` is borrowing the expression\n+`foo()`. As `foo()` is call to a function, and not the name of\n+a variable, this creates a **temporary** -- that temporary stores\n+the return value from `foo()` so that it can be borrowed.\n+So you might imagine that `let p = bar(&foo())` is equivalent\n+to this:\n+\n+```compile_fail,E0597\n+# fn foo() -> i32 { 22 }\n+# fn bar(x: &i32) -> &i32 { x }\n+let p = {\n+  let tmp = foo(); // the temporary\n+  bar(&tmp)\n+}; // <-- tmp is freed as we exit this block\n+let q = p;\n+```\n+\n+Whenever a temporary is created, it is automatically dropped (freed)\n+according to fixed rules. Ordinarily, the temporary is dropped\n+at the end of the enclosing statement -- in this case, after the `let`.\n+This is illustrated in the example above by showing that `tmp` would\n+be freed as we exit the block.\n+\n+To fix this problem, you need to create a local variable\n+to store the value in rather than relying on a temporary.\n+For example, you might change the original program to\n+the following:\n \n+```\n+fn foo() -> i32 { 22 }\n+fn bar(x: &i32) -> &i32 { x }\n+let value = foo(); // dropped at the end of the enclosing block\n+let p = bar(&value);\n+let q = *p;\n+```\n+\n+By introducing the explicit `let value`, we allocate storage\n+that will last until the end of the enclosing block (when `value`\n+goes out of scope). When we borrow `&value`, we are borrowing a\n+local variable that already exists, and hence no temporary is created.\n+\n+Temporaries are not always dropped at the end of the enclosing\n+statement. In simple cases where the `&` expression is immediately\n+stored into a variable, the compiler will automatically extend\n+the lifetime of the temporary until the end of the enclosinb\n+block. Therefore, an alternative way to fix the original\n+program is to write `let tmp = &foo()` and not `let tmp = foo()`:\n+\n+```\n+fn foo() -> i32 { 22 }\n+fn bar(x: &i32) -> &i32 { x }\n+let value = &foo();\n+let p = bar(value);\n+let q = *p;\n+```\n+\n+Here, we are still borrowing `foo()`, but as the borrow is assigned\n+directly into a variable, the temporary will not be dropped until\n+the end of the enclosing block. Similar rules apply when temporaries\n+are stored into aggregate structures like a tuple or struct:\n+\n+```\n+// Here, two temporaries are created, but\n+// as they are stored directly into `value`,\n+// they are not dropped until the end of the\n+// enclosing block.\n+fn foo() -> i32 { 22 }\n+let value = (&foo(), &foo());\n+```\n \"##,\n \n }"}, {"sha": "2616d0cd9640b746618f7e4a06e5d6730dd3f251", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -730,6 +730,22 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n \n         self.cancel_if_wrong_origin(err, o)\n     }\n+\n+    fn temporary_value_borrowed_for_too_long(\n+        self,\n+        span: Span,\n+        o: Origin,\n+    ) -> DiagnosticBuilder<'cx> {\n+        let err = struct_span_err!(\n+            self,\n+            span,\n+            E0716,\n+            \"temporary value dropped while borrowed{OGN}\",\n+            OGN = o\n+        );\n+\n+        self.cancel_if_wrong_origin(err, o)\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> BorrowckErrors<'cx> for TyCtxt<'cx, 'gcx, 'tcx> {"}, {"sha": "fe2bc0ca79b2351b910727b65ea253c3cea954d7", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,18 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/borrowck-borrow-from-temporary.rs:19:24\n+   |\n+LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n+   |                        ^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n+  --> $DIR/borrowck-borrow-from-temporary.rs:18:8\n+   |\n+LL | fn foo<'a>() -> &'a isize {\n+   |        ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "80c71b8e28203e9ca7224150f3bb336559244aed", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:32:20\n    |\n LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value only lives until here\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                    |\n-   |                    temporary value does not live long enough\n+   |                    creates a temporary which is freed while still in use\n LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n@@ -13,4 +13,4 @@ LL |     x.x[0];\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "0c71ac793df75e842d3c82cd61afd9c4264608ea", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-borrowed-uniq-rvalue.rs:20:28\n    |\n LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n-   |                            ^^^^^^^^^^^ - temporary value only lives until here\n+   |                            ^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                            |\n-   |                            temporary value does not live long enough\n+   |                            creates a temporary which is freed while still in use\n ...\n LL |     buggy_map.insert(43, &*tmp);\n    |     --------- borrow later used here\n@@ -13,4 +13,4 @@ LL |     buggy_map.insert(43, &*tmp);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "101fb530a91015c95de826d1bf9991c1e85ea8e3", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.nll.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,57 +1,57 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:21\n    |\n LL |     let ref mut x = 1234543; //~ ERROR\n-   |                     ^^^^^^^ temporary value does not live long enough\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n LL |     x\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:20:25\n    |\n LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n-   |                         ^^^^^^^^^^^ temporary value does not live long enough\n+   |                         ^^^^^^^^^^^ creates a temporary which is freed while still in use\n LL |     x\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:25:11\n    |\n LL |     match 1234543 {\n-   |           ^^^^^^^ temporary value does not live long enough\n+   |           ^^^^^^^ creates a temporary which is freed while still in use\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:31:11\n    |\n LL |     match (123443,) {\n-   |           ^^^^^^^^^ temporary value does not live long enough\n+   |           ^^^^^^^^^ creates a temporary which is freed while still in use\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:37:10\n    |\n LL |     &mut 1234543 //~ ERROR\n-   |          ^^^^^^^ temporary value does not live long enough\n+   |          ^^^^^^^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "fe7187af5f59825a1254cb7bcdf749b7a819ea66", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,43 @@\n+error: `foo` is not yet stable as a const fn\n+  --> $DIR/dont_promote_unstable_const_fn.rs:25:25\n+   |\n+LL | const fn bar() -> u32 { foo() } //~ ERROR `foo` is not yet stable as a const fn\n+   |                         ^^^^^\n+   |\n+   = help: in Nightly builds, add `#![feature(foo)]` to the crate attributes to enable\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/dont_promote_unstable_const_fn.rs:28:28\n+   |\n+LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                            ^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/dont_promote_unstable_const_fn.rs:32:28\n+   |\n+LL |     let _: &'static u32 = &meh(); //~ ERROR does not live long enough\n+   |                            ^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/dont_promote_unstable_const_fn.rs:33:26\n+   |\n+LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     //~^ does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "c4feb1129014c1f895ebc2ed4bc2cb0723a716cb", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn_cross_crate.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn_cross_crate.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:18:28\n+   |\n+LL |     let _: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                            ^^^^^ creates a temporary which is freed while still in use\n+LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/dont_promote_unstable_const_fn_cross_crate.rs:19:29\n+   |\n+LL |     let _x: &'static u32 = &foo(); //~ ERROR does not live long enough\n+   |                             ^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "bc8a99f55483fcb984f1d7a0431f5d2e26c811d0", "filename": "src/test/ui/consts/const-eval/promoted_raw_ptr_ops.nll.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_raw_ptr_ops.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,35 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:14:29\n+   |\n+LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:16:30\n+   |\n+LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_raw_ptr_ops.rs:17:28\n+   |\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "cf3678e7d60ddd97f90c85c276b0da8dc42d1251", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,14 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/transmute-const-promotion.rs:16:37\n+   |\n+LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     //~^ ERROR value does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "afc5c462c4633948f8df7c3b9f6324e36da6159c", "filename": "src/test/ui/consts/const-eval/union_promotion.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion_promotion.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,16 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/union_promotion.rs:19:29\n+   |\n+LL |       let x: &'static bool = &unsafe { //~ borrowed value does not live long enough\n+   |  _____________________________^\n+LL | |         Foo { a: &1 }.b == Foo { a: &2 }.b\n+LL | |     };\n+   | |_____^ creates a temporary which is freed while still in use\n+LL |   }\n+   |   - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "8fe6816f0b21a18f7731f8c8957741e4143aad45", "filename": "src/test/ui/consts/const-int-conversion.nll.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,80 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:14:28\n+   |\n+LL |     let x: &'static i32 = &(5_i32.reverse_bits());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:16:28\n+   |\n+LL |     let y: &'static i32 = &(i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:18:28\n+   |\n+LL |     let z: &'static i32 = &(i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:20:28\n+   |\n+LL |     let a: &'static i32 = &(i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0])));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:22:29\n+   |\n+LL |     let b: &'static [u8] = &(0x12_34_56_78_i32.to_be_bytes());\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:24:29\n+   |\n+LL |     let c: &'static [u8] = &(0x12_34_56_78_i32.to_le_bytes());\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-conversion.rs:26:29\n+   |\n+LL |     let d: &'static [u8] = &(i32::min_value().to_be().to_ne_bytes());\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |         //~^ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "3f4a7562ce9b011c45328bc8d8b8d7e9ac55e0e4", "filename": "src/test/ui/consts/const-int-overflowing.nll.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,35 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-overflowing.rs:12:36\n+   |\n+LL |     let x: &'static (i32, bool) = &(5_i32.overflowing_add(3)); //~ ERROR does not live long enough\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-overflowing.rs:13:36\n+   |\n+LL |     let y: &'static (i32, bool) = &(5_i32.overflowing_sub(3)); //~ ERROR does not live long enough\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-overflowing.rs:14:36\n+   |\n+LL |     let z: &'static (i32, bool) = &(5_i32.overflowing_mul(3)); //~ ERROR does not live long enough\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "8a0c49a6d845138776ad491787dd773dae465374", "filename": "src/test/ui/consts/const-int-rotate.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-rotate.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-rotate.rs:12:28\n+   |\n+LL |     let x: &'static i32 = &(5_i32.rotate_left(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-rotate.rs:13:28\n+   |\n+LL |     let y: &'static i32 = &(5_i32.rotate_right(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "53bcba8c77e542daa1a49395ec2b4d965184b326", "filename": "src/test/ui/consts/const-int-sign.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,24 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-sign.rs:12:29\n+   |\n+LL |     let x: &'static bool = &(5_i32.is_negative()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-sign.rs:13:29\n+   |\n+LL |     let y: &'static bool = &(5_i32.is_positive()); //~ ERROR does not live long enough\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "3fd83090a4df5390b65e9da6923f6dd695c02387", "filename": "src/test/ui/consts/const-int-wrapping.nll.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,57 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-wrapping.rs:12:28\n+   |\n+LL |     let x: &'static i32 = &(5_i32.wrapping_add(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-wrapping.rs:13:28\n+   |\n+LL |     let y: &'static i32 = &(5_i32.wrapping_sub(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-wrapping.rs:14:28\n+   |\n+LL |     let z: &'static i32 = &(5_i32.wrapping_mul(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-wrapping.rs:15:28\n+   |\n+LL |     let a: &'static i32 = &(5_i32.wrapping_shl(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/const-int-wrapping.rs:16:28\n+   |\n+LL |     let b: &'static i32 = &(5_i32.wrapping_shr(3)); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "715884d5175124582d54dd962af92cc1eeed71a0", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -190,13 +190,13 @@ error: trait bounds other than `Sized` on const fn parameters are unstable\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn.rs:144:64\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                                ^^ - temporary value only lives until here\n+   |                                                                ^^ - temporary value is freed at the end of this statement\n    |                                                                |\n-   |                                                                temporary value does not live long enough\n+   |                                                                creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n@@ -220,5 +220,5 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n \n error: aborting due to 36 previous errors\n \n-Some errors occurred: E0493, E0597.\n+Some errors occurred: E0493, E0716.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "9fc38e9e1f36e2701dcf5aa2d6e583e00dc7e961", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -10,16 +10,16 @@ error: trait bounds other than `Sized` on const fn parameters are unstable\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:24:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-   |                                                                   ^    - temporary value only lives until here\n+   |                                                                   ^    - temporary value is freed at the end of this statement\n    |                                                                   |\n-   |                                                                   temporary value does not live long enough\n+   |                                                                   creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "f818f5b6195f356196e12e482efc5faa63aa9a5d", "filename": "src/test/ui/issues/issue-11681.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11681.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,18 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-11681.rs:22:20\n+   |\n+LL |   let testValue = &Test; //~ ERROR borrowed value does not live long enough\n+   |                    ^^^^ creates a temporary which is freed while still in use\n+LL |   return testValue;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:15...\n+  --> $DIR/issue-11681.rs:21:15\n+   |\n+LL | fn createTest<'a>() -> &'a Test {\n+   |               ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "889bfa07ab9be6ffec86bf99f4e00ffebce78930", "filename": "src/test/ui/issues/issue-17545.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17545.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-17545.rs:17:10\n    |\n LL |         &id(()), //~ ERROR borrowed value does not live long enough\n-   |          ^^^^^^ temporary value does not live long enough\n+   |          ^^^^^^ creates a temporary which is freed while still in use\n LL |     ));\n-   |       - temporary value only lives until here\n+   |       - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:12...\n   --> $DIR/issue-17545.rs:15:12\n@@ -14,4 +14,4 @@ LL | pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "03fc31b7a7b54819c5f3de08bf844d4b622b6121", "filename": "src/test/ui/issues/issue-17718-constants-not-static.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-constants-not-static.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,13 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-17718-constants-not-static.rs:15:31\n+   |\n+LL | fn foo() -> &'static usize { &id(FOO) }\n+   |                               ^^^^^^^ - temporary value is freed at the end of this statement\n+   |                               |\n+   |                               creates a temporary which is freed while still in use\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "a1d8c7aeb0eb9c143a1b69dadb3e8e4c6a924846", "filename": "src/test/ui/issues/issue-27592.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,19 +1,19 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-27592.rs:26:27\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |                           ^^^^                             - temporary value only lives until here\n+   |                           ^^^^                             - temporary value is freed at the end of this statement\n    |                           |\n-   |                           temporary value does not live long enough\n+   |                           creates a temporary which is freed while still in use\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-27592.rs:26:33\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                                 |\n-   |                                 temporary value does not live long enough\n+   |                                 creates a temporary which is freed while still in use\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "7a11743fe462136751af36981d49acb0746e2164", "filename": "src/test/ui/issues/issue-30438-a.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-a.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-30438-a.rs:22:17\n    |\n LL |         return &Test { s: &self.s};\n-   |                 ^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                 ^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                 |\n-   |                 temporary value does not live long enough\n+   |                 creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 21:5...\n   --> $DIR/issue-30438-a.rs:21:5\n@@ -17,4 +17,4 @@ LL | |     }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "ae1022f593ed55a8a6ebc8fb4bfb67c7c58e6490", "filename": "src/test/ui/issues/issue-30438-b.nll.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-b.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,21 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-30438-b.rs:23:10\n+   |\n+LL |         &Test { s: &self.s}\n+   |          ^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |         //~^ ERROR: borrowed value does not live long enough\n+LL |     }\n+   |     - temporary value is freed at the end of this statement\n+   |\n+note: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 22:5...\n+  --> $DIR/issue-30438-b.rs:22:5\n+   |\n+LL | /     fn index(&self, _: usize) -> &Self::Output {\n+LL | |         &Test { s: &self.s}\n+LL | |         //~^ ERROR: borrowed value does not live long enough\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "7fa7cee0aec1eeec5452827ab8fe64cd28be373e", "filename": "src/test/ui/issues/issue-36082.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-36082.rs:23:19\n    |\n LL |     let val: &_ = x.borrow().0;\n-   |                   ^^^^^^^^^^  - temporary value only lives until here\n+   |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement\n    |                   |\n-   |                   temporary value does not live long enough\n+   |                   creates a temporary which is freed while still in use\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n@@ -13,4 +13,4 @@ LL |     println!(\"{}\", val);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "7fa7cee0aec1eeec5452827ab8fe64cd28be373e", "filename": "src/test/ui/issues/issue-36082.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-36082.rs:23:19\n    |\n LL |     let val: &_ = x.borrow().0;\n-   |                   ^^^^^^^^^^  - temporary value only lives until here\n+   |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement\n    |                   |\n-   |                   temporary value does not live long enough\n+   |                   creates a temporary which is freed while still in use\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n@@ -13,4 +13,4 @@ LL |     println!(\"{}\", val);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "b8a498a4dc85c14a9a5bc6ce09f09472521a8ad2", "filename": "src/test/ui/issues/issue-36082.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -25,9 +25,9 @@ fn main() {\n     //[ast]~| NOTE temporary value dropped here while still borrowed\n     //[ast]~| NOTE temporary value does not live long enough\n     //[ast]~| NOTE consider using a `let` binding to increase its lifetime\n-    //[mir]~^^^^^ ERROR borrowed value does not live long enough [E0597]\n-    //[mir]~| NOTE temporary value does not live long enough\n-    //[mir]~| NOTE temporary value only lives until here\n+    //[mir]~^^^^^ ERROR temporary value dropped while borrowed [E0716]\n+    //[mir]~| NOTE temporary value is freed at the end of this statement\n+    //[mir]~| NOTE creates a temporary which is freed while still in use\n     //[mir]~| NOTE consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //[mir]~^ borrow later used here"}, {"sha": "dadd58cf4805db8470b229540182107a8d58ee38", "filename": "src/test/ui/issues/issue-44373.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44373.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,13 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/issue-44373.rs:15:42\n+   |\n+LL |     let _val: &'static [&'static u32] = &[&FOO]; //~ ERROR borrowed value does not live long enough\n+   |                                          ^^^^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "84e30a4d29167a0765207d1927f84d9763426a36", "filename": "src/test/ui/issues/issue-46472.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -13,7 +13,7 @@\n fn bar<'a>() -> &'a mut u32 {\n     &mut 4\n     //~^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-    //~| ERROR borrowed value does not live long enough (Mir) [E0597]\n+    //~| ERROR temporary value dropped while borrowed (Mir) [E0716]\n }\n \n fn main() { }"}, {"sha": "4c0e6544a93939d32798fc29b37a521c6bf5b6b5", "filename": "src/test/ui/issues/issue-46472.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -13,14 +13,14 @@ note: borrowed value must be valid for the lifetime 'a as defined on the functio\n LL | fn bar<'a>() -> &'a mut u32 {\n    |        ^^\n \n-error[E0597]: borrowed value does not live long enough (Mir)\n+error[E0716]: temporary value dropped while borrowed (Mir)\n   --> $DIR/issue-46472.rs:14:10\n    |\n LL |     &mut 4\n-   |          ^ temporary value does not live long enough\n+   |          ^ creates a temporary which is freed while still in use\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 13:8...\n   --> $DIR/issue-46472.rs:13:8\n@@ -30,4 +30,5 @@ LL | fn bar<'a>() -> &'a mut u32 {\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "95d9d858ecdb05baec49a7d2f0a3e193093642fa", "filename": "src/test/ui/issues/issue-47184.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let _vec: Vec<&'static String> = vec![&String::new()];\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n }"}, {"sha": "4a8e9255723cc6c8a15955357d5c30c259666a14", "filename": "src/test/ui/issues/issue-47184.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47184.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,13 +1,13 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-47184.rs:14:44\n    |\n LL |     let _vec: Vec<&'static String> = vec![&String::new()];\n-   |                                            ^^^^^^^^^^^^^ - temporary value only lives until here\n+   |                                            ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                                            |\n-   |                                            temporary value does not live long enough\n+   |                                            creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "eb984fbde03a81ec1e71f61c1b382d125fd75e2f", "filename": "src/test/ui/issues/issue-52049.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52049.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,13 +1,13 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-52049.rs:16:10\n    |\n LL |     foo(&unpromotable(5u32));\n-   |          ^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+   |          ^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "38a711bcefb0aa1d24da5dcb57681f8babaa4054", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-let-suggestion.rs:12:17\n    |\n LL |     let mut x = vec![1].iter();\n-   |                 ^^^^^^^       - temporary value only lives until here\n+   |                 ^^^^^^^       - temporary value is freed at the end of this statement\n    |                 |\n-   |                 temporary value does not live long enough\n+   |                 creates a temporary which is freed while still in use\n LL |     //~^ ERROR borrowed value does not live long enough\n LL |     x.use_mut();\n    |     - borrow later used here\n@@ -14,4 +14,4 @@ LL |     x.use_mut();\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "3bfb319ff318a8189abea8430b9e5e4c7f134032", "filename": "src/test/ui/nll/borrowed-temporary-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let x = gimme({\n         let v = 22;\n         &(v,)\n-        //~^ ERROR borrowed value does not live long enough [E0597]\n+        //~^ ERROR temporary value dropped while borrowed [E0716]\n     });\n     println!(\"{:?}\", x);\n }"}, {"sha": "7f62f2ee52a9e95e0654e5d8f35dd239f6dae223", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,16 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowed-temporary-error.rs:20:10\n    |\n LL |         &(v,)\n-   |          ^^^^ temporary value does not live long enough\n-LL |         //~^ ERROR borrowed value does not live long enough [E0597]\n+   |          ^^^^ creates a temporary which is freed while still in use\n+LL |         //~^ ERROR temporary value dropped while borrowed [E0716]\n LL |     });\n-   |       - temporary value only lives until here\n+   |       - temporary value is freed at the end of this statement\n LL |     println!(\"{:?}\", x);\n    |                      - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "016a4f49e504ac525126b1074fb464800f5f7ff0", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -18,7 +18,7 @@ fn gimme(x: &(u32,)) -> &u32 {\n fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n     let v = 22;\n     gimme(&(v,))\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n }\n \n fn main() {}"}, {"sha": "d7ab5cec4a84ae856122f817e15ab0c751d0bc3c", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowed-universal-error.rs:20:12\n    |\n LL |     gimme(&(v,))\n-   |            ^^^^ temporary value does not live long enough\n-LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n+   |            ^^^^ creates a temporary which is freed while still in use\n+LL |     //~^ ERROR temporary value dropped while borrowed [E0716]\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n   --> $DIR/borrowed-universal-error.rs:18:8\n@@ -15,4 +15,4 @@ LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "0d071915a3b892547de0c9ce13c3f4c1787ea8e6", "filename": "src/test/ui/nll/issue-52534-1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-1.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -52,13 +52,13 @@ LL | }\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-52534-1.rs:30:6\n    |\n LL |     &&x\n-   |      ^^ temporary value does not live long enough\n+   |      ^^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 28:1...\n   --> $DIR/issue-52534-1.rs:28:1\n@@ -137,4 +137,5 @@ LL | }\n \n error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "e598147bdab770d2163cdd6bb3098eefd28ea1af", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -14,7 +14,7 @@\n #![allow(dead_code)]\n \n fn gimme_static_mut() -> &'static mut u32 {\n-    let ref mut x = 1234543; //~ ERROR borrowed value does not live long enough [E0597]\n+    let ref mut x = 1234543; //~ ERROR temporary value dropped while borrowed [E0716]\n     x\n }\n "}, {"sha": "368cc67747185b7581da86261036aec06018fc75", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,14 +1,14 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/return-ref-mut-issue-46557.rs:17:21\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR borrowed value does not live long enough [E0597]\n-   |                     ^^^^^^^ temporary value does not live long enough\n+LL |     let ref mut x = 1234543; //~ ERROR temporary value dropped while borrowed [E0716]\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n LL |     x\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "e3bac513fa8748b79968ebbd48d0f65f3926e3bd", "filename": "src/test/ui/nll/user-annotations/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.rs?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -51,13 +51,13 @@ fn underscore_with_initializer() {\n     let _: &'static u32 = &x; //~ ERROR\n \n     let _: Vec<&'static String> = vec![&String::new()];\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n \n     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n \n     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-    //~^ ERROR borrowed value does not live long enough [E0597]\n+    //~^ ERROR temporary value dropped while borrowed [E0716]\n }\n \n fn pair_underscores_with_initializer() {"}, {"sha": "b01dc65fc5f9a905f00731deda1999a1b109776f", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -40,33 +40,33 @@ LL | }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:53:41\n    |\n LL |     let _: Vec<&'static String> = vec![&String::new()];\n-   |                                         ^^^^^^^^^^^^^ - temporary value only lives until here\n+   |                                         ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n    |                                         |\n-   |                                         temporary value does not live long enough\n+   |                                         creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:56:52\n    |\n LL |     let (_, a): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-   |                                                    ^^^^^^^^^^^^^      - temporary value only lives until here\n+   |                                                    ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |                                                    |\n-   |                                                    temporary value does not live long enough\n+   |                                                    creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/patterns.rs:59:53\n    |\n LL |     let (_a, b): (Vec<&'static String>, _) = (vec![&String::new()], 44);\n-   |                                                     ^^^^^^^^^^^^^      - temporary value only lives until here\n+   |                                                     ^^^^^^^^^^^^^      - temporary value is freed at the end of this statement\n    |                                                     |\n-   |                                                     temporary value does not live long enough\n+   |                                                     creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n@@ -140,4 +140,5 @@ LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n \n error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "a98cacaad99bf5f8938efbc489d30ceaa98dd8c2", "filename": "src/test/ui/regions/regions-creating-enums.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,24 +1,24 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-creating-enums.rs:33:17\n    |\n LL |         return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n-   |                 ^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                 ^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                 |\n-   |                 temporary value does not live long enough\n+   |                 creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n   --> $DIR/regions-creating-enums.rs:30:13\n    |\n LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usize) -> usize {\n    |             ^^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-creating-enums.rs:38:17\n    |\n LL |         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n-   |                 ^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                 ^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                 |\n-   |                 temporary value does not live long enough\n+   |                 creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 30:13...\n   --> $DIR/regions-creating-enums.rs:30:13\n@@ -28,4 +28,4 @@ LL | fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(usi\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "75758206d6b4817e4d7500d3da6ee5b1dbede3a1", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-free-region-ordering-caller1.rs:19:27\n    |\n LL |     let z: &'a & usize = &(&y);\n-   |                           ^^^^ temporary value does not live long enough\n+   |                           ^^^^ creates a temporary which is freed while still in use\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:10...\n   --> $DIR/regions-free-region-ordering-caller1.rs:15:10\n@@ -15,4 +15,4 @@ LL | fn call1<'a>(x: &'a usize) {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "eb870d55e0f4b54e505495b51c8f0b708465d51b", "filename": "src/test/ui/regions/regions-lifetime-of-struct-or-enum-variant.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-of-struct-or-enum-variant.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,33 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:24:20\n+   |\n+LL |   let testValue = &id(Test);\n+   |                    ^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 23:19...\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:23:19\n+   |\n+LL | fn structLifetime<'a>() -> &'a Test {\n+   |                   ^^\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:30:20\n+   |\n+LL |   let testValue = &id(MyEnum::Variant1);\n+   |                    ^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 29:20...\n+  --> $DIR/regions-lifetime-of-struct-or-enum-variant.rs:29:20\n+   |\n+LL | fn variantLifetime<'a>() -> &'a MyEnum {\n+   |                    ^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "1976a3dc84d834299d5a8ba3b0d7eba06a15b4b3", "filename": "src/test/ui/regions/regions-ref-in-fn-arg.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ref-in-fn-arg.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,22 +1,22 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-ref-in-fn-arg.rs:14:13\n    |\n LL | fn arg_item(box ref x: Box<isize>) -> &'static isize {\n-   |             ^^^^^^^^^ temporary value does not live long enough\n+   |             ^^^^^^^^^ creates a temporary which is freed while still in use\n LL |     x //~^ ERROR borrowed value does not live long enough\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-ref-in-fn-arg.rs:21:11\n    |\n LL |     with(|box ref x| x) //~ ERROR borrowed value does not live long enough\n-   |           ^^^^^^^^^  - temporary value only lives until here\n+   |           ^^^^^^^^^  - temporary value is freed at the end of this statement\n    |           |\n-   |           temporary value does not live long enough\n+   |           creates a temporary which is freed while still in use\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "be4d5bf9da0d505a6832f32c33492f00ea17f3e6", "filename": "src/test/ui/regions/regions-ret.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-ret.rs:14:13\n    |\n LL |     return &id(3); //~ ERROR borrowed value does not live long enough\n-   |             ^^^^^- temporary value only lives until here\n+   |             ^^^^^- temporary value is freed at the end of this statement\n    |             |\n-   |             temporary value does not live long enough\n+   |             creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 13:1...\n   --> $DIR/regions-ret.rs:13:1\n@@ -16,4 +16,4 @@ LL | | }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "e175a3e7f2f8fbc7d8299afc2f1cb5f5199625b9", "filename": "src/test/ui/regions/regions-return-stack-allocated-vec.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-stack-allocated-vec.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,13 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/regions-return-stack-allocated-vec.rs:14:6\n+   |\n+LL |     &[x] //~ ERROR borrowed value does not live long enough\n+   |      ^^^ creates a temporary which is freed while still in use\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "c790f7ec1e53fca31209ec0704c736f1efc7c730", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-var-type-out-of-scope.rs:19:14\n    |\n LL |         x = &id(3); //~ ERROR borrowed value does not live long enough\n-   |              ^^^^^- temporary value only lives until here\n+   |              ^^^^^- temporary value is freed at the end of this statement\n    |              |\n-   |              temporary value does not live long enough\n+   |              creates a temporary which is freed while still in use\n LL |         assert_eq!(*x, 3);\n    |         ------------------ borrow later used here\n    |\n@@ -13,4 +13,4 @@ LL |         assert_eq!(*x, 3);\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "873871107eeae159e6ae395803e689663d0764b8", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,36 +1,36 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:28:14\n    |\n LL |     v3.push(&id('x'));           // statement 6\n-   |              ^^^^^^^ - temporary value only lives until here\n+   |              ^^^^^^^ - temporary value is freed at the end of this statement\n    |              |\n-   |              temporary value does not live long enough\n+   |              creates a temporary which is freed while still in use\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |              -- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:38:18\n    |\n LL |         v4.push(&id('y'));\n-   |                  ^^^^^^^ - temporary value only lives until here\n+   |                  ^^^^^^^ - temporary value is freed at the end of this statement\n    |                  |\n-   |                  temporary value does not live long enough\n+   |                  creates a temporary which is freed while still in use\n ...\n LL |         v4.use_ref();\n    |         -- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:49:14\n    |\n LL |     v5.push(&id('z'));\n-   |              ^^^^^^^ - temporary value only lives until here\n+   |              ^^^^^^^ - temporary value is freed at the end of this statement\n    |              |\n-   |              temporary value does not live long enough\n+   |              creates a temporary which is freed while still in use\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |                                     -- borrow later used here\n@@ -39,4 +39,4 @@ LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "3dc64dabf903adb78ea9d676ae4bb6f1c808e45a", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,16 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/borrowck-ref-into-rvalue.rs:13:11\n    |\n LL |     match Some(\"Hello\".to_string()) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n ...\n LL |     }\n-   |     - temporary value only lives until here\n+   |     - temporary value is freed at the end of this statement\n LL |     println!(\"{}\", *msg);\n    |                    ---- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "a93bf025d4b3c3770bcc8df66f73b884d187b260", "filename": "src/test/ui/span/issue-15480.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-15480.rs:15:10\n    |\n LL |         &id(3)\n-   |          ^^^^^ temporary value does not live long enough\n+   |          ^^^^^ creates a temporary which is freed while still in use\n LL |     ];\n-   |      - temporary value only lives until here\n+   |      - temporary value is freed at the end of this statement\n ...\n LL |     for &&x in &v {\n    |                -- borrow later used here\n@@ -13,4 +13,4 @@ LL |     for &&x in &v {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "6f7fbdcf4214543800958fc94026e0fd769f357e", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,16 +1,16 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:27\n    |\n LL |         let ss: &isize = &id(1);\n-   |                           ^^^^^ temporary value does not live long enough\n+   |                           ^^^^^ creates a temporary which is freed while still in use\n ...\n LL |     }\n-   |     - temporary value only lives until here\n+   |     - temporary value is freed at the end of this statement\n LL | }\n    | - borrow later used here, when `blah` is dropped\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "71e53e876a6e4e276f14657605d0851238269bbf", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/slice-borrow.rs:16:28\n    |\n LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n-   |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n ...\n LL |     }\n-   |     - temporary value only lives until here\n+   |     - temporary value is freed at the end of this statement\n LL |     y.use_ref();\n    |     - borrow later used here\n    |\n@@ -14,4 +14,4 @@ LL |     y.use_ref();\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "a498d80b67b1b2cc694a773c7bf72c0f392ee853", "filename": "src/test/ui/static/static-drop-scope.nll.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,60 @@\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:19:60\n+   |\n+LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n+   |                                                            ^^^^^^^^ statics cannot evaluate destructors\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/static-drop-scope.rs:19:60\n+   |\n+LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n+   |                                                            ^^^^^^^^- temporary value is freed at the end of this statement\n+   |                                                            |\n+   |                                                            creates a temporary which is freed while still in use\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:23:59\n+   |\n+LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n+   |                                                           ^^^^^^^^ constants cannot evaluate destructors\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/static-drop-scope.rs:23:59\n+   |\n+LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n+   |                                                           ^^^^^^^^- temporary value is freed at the end of this statement\n+   |                                                           |\n+   |                                                           creates a temporary which is freed while still in use\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:27:28\n+   |\n+LL | static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n+   |                            ^^^^^^^^^^^^^ statics cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:30:27\n+   |\n+LL | const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n+   |                           ^^^^^^^^^^^^^ constants cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:33:24\n+   |\n+LL | const fn const_drop<T>(_: T) {}\n+   |                        ^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/static-drop-scope.rs:37:5\n+   |\n+LL |     (x, ()).1\n+   |     ^^^^^^^ constant functions cannot evaluate destructors\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors occurred: E0493, E0716.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "a9ecc14403ab92006d14aef3db395ec2ac590ea3", "filename": "src/test/ui/static/static-reference-to-fn-2.nll.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-reference-to-fn-2.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:28:22\n    |\n LL |     self_.statefn = &id(state2 as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                      |\n-   |                      temporary value does not live long enough\n+   |                      creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 27:1...\n   --> $DIR/static-reference-to-fn-2.rs:27:1\n@@ -16,13 +16,13 @@ LL | |     return Some(\"state1\");\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:34:22\n    |\n LL |     self_.statefn = &id(state3 as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                      |\n-   |                      temporary value does not live long enough\n+   |                      creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 33:1...\n   --> $DIR/static-reference-to-fn-2.rs:33:1\n@@ -34,13 +34,13 @@ LL | |     return Some(\"state2\");\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:40:22\n    |\n LL |     self_.statefn = &id(finished as StateMachineFunc);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value only lives until here\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- temporary value is freed at the end of this statement\n    |                      |\n-   |                      temporary value does not live long enough\n+   |                      creates a temporary which is freed while still in use\n    |\n note: borrowed value must be valid for the anonymous lifetime #2 defined on the function body at 39:1...\n   --> $DIR/static-reference-to-fn-2.rs:39:1\n@@ -52,17 +52,17 @@ LL | |     return Some(\"state3\");\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-reference-to-fn-2.rs:51:19\n    |\n LL |         statefn: &id(state1 as StateMachineFunc)\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n ...\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "45af062c824369e5befa108f343cb614269b5e7a", "filename": "src/test/ui/static/static-region-bound.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-region-bound.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -0,0 +1,14 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/static-region-bound.rs:20:14\n+   |\n+LL |     let x = &id(3); //~ ERROR borrowed value does not live long enough\n+   |              ^^^^^ creates a temporary which is freed while still in use\n+LL |     f(x);\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "7c7c0468c6fcd5d341084225bbeddbc40960e561", "filename": "src/test/ui/wf/wf-misc-methods-issue-28609.nll.stderr", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-misc-methods-issue-28609.nll.stderr?ref=0b2eae72af8c12a107ade919d9c33c5ae0e0c6c1", "patch": "@@ -1,10 +1,10 @@\n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/wf-misc-methods-issue-28609.rs:32:31\n    |\n LL |     s.transmute_inherent(&mut 42) //~ ERROR does not live long enough\n-   |                               ^^ temporary value does not live long enough\n+   |                               ^^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 30:1...\n   --> $DIR/wf-misc-methods-issue-28609.rs:30:1\n@@ -55,13 +55,13 @@ LL | |     &*s\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/wf-misc-methods-issue-28609.rs:63:15\n    |\n LL |     s << &mut 3 //~ ERROR does not live long enough\n-   |               ^ temporary value does not live long enough\n+   |               ^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 61:1...\n   --> $DIR/wf-misc-methods-issue-28609.rs:61:1\n@@ -72,13 +72,13 @@ LL | |     s << &mut 3 //~ ERROR does not live long enough\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/wf-misc-methods-issue-28609.rs:68:16\n    |\n LL |     s.shl(&mut 3) //~ ERROR does not live long enough\n-   |                ^ temporary value does not live long enough\n+   |                ^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 66:1...\n   --> $DIR/wf-misc-methods-issue-28609.rs:66:1\n@@ -89,13 +89,13 @@ LL | |     s.shl(&mut 3) //~ ERROR does not live long enough\n LL | | }\n    | |_^\n \n-error[E0597]: borrowed value does not live long enough\n+error[E0716]: temporary value dropped while borrowed\n   --> $DIR/wf-misc-methods-issue-28609.rs:73:21\n    |\n LL |     S2::shl(s, &mut 3) //~ ERROR does not live long enough\n-   |                     ^ temporary value does not live long enough\n+   |                     ^ creates a temporary which is freed while still in use\n LL | }\n-   | - temporary value only lives until here\n+   | - temporary value is freed at the end of this statement\n    |\n note: borrowed value must be valid for the anonymous lifetime #1 defined on the function body at 71:1...\n   --> $DIR/wf-misc-methods-issue-28609.rs:71:1\n@@ -108,4 +108,5 @@ LL | | }\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}]}