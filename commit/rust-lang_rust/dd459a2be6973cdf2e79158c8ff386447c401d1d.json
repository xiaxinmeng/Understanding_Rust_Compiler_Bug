{"sha": "dd459a2be6973cdf2e79158c8ff386447c401d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDU5YTJiZTY5NzNjZGYyZTc5MTU4YzhmZjM4NjQ0N2M0MDFkMWQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-15T02:42:59Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-15T18:54:59Z"}, "message": "Remove useless `clean::Variant` struct\n\nIt had exactly one field and no special behavior, so there was no point.", "tree": {"sha": "785da5254839c75ab9ec3b7a7ef6f852cbfefa2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785da5254839c75ab9ec3b7a7ef6f852cbfefa2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd459a2be6973cdf2e79158c8ff386447c401d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd459a2be6973cdf2e79158c8ff386447c401d1d", "html_url": "https://github.com/rust-lang/rust/commit/dd459a2be6973cdf2e79158c8ff386447c401d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd459a2be6973cdf2e79158c8ff386447c401d1d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48eb37b9470a26748c916f7153569906f3c67bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48eb37b9470a26748c916f7153569906f3c67bf", "html_url": "https://github.com/rust-lang/rust/commit/e48eb37b9470a26748c916f7153569906f3c67bf"}], "stats": {"total": 58, "additions": 22, "deletions": 36}, "files": [{"sha": "7aed5983be4fa580a8b3ba1a52d0761f4e7bcdb0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -1861,12 +1861,8 @@ impl Clean<Item> for ty::VariantDef {\n                     .collect(),\n             }),\n         };\n-        let what_rustc_thinks = Item::from_def_id_and_parts(\n-            self.def_id,\n-            Some(self.ident.name),\n-            VariantItem(Variant { kind }),\n-            cx,\n-        );\n+        let what_rustc_thinks =\n+            Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), VariantItem(kind), cx);\n         // don't show `pub` for fields, which are always public\n         Item { visibility: Inherited, ..what_rustc_thinks }\n     }\n@@ -2048,7 +2044,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n \n impl Clean<Item> for hir::Variant<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        let kind = VariantItem(Variant { kind: self.data.clean(cx) });\n+        let kind = VariantItem(self.data.clean(cx));\n         let what_rustc_thinks =\n             Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n         // don't show `pub` for variants, which are always public"}, {"sha": "60ed5f0f82dcf0f71835b5f6e3fec987df8cbc71", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -237,9 +237,7 @@ impl Item {\n         match *self.kind {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n             UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant { kind: VariantKind::Struct(ref vstruct) }) => {\n-                Some(vstruct.fields_stripped)\n-            }\n+            VariantItem(VariantKind::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n             _ => None,\n         }\n     }\n@@ -325,7 +323,7 @@ crate enum ItemKind {\n     /// A method with a body.\n     MethodItem(Function, Option<hir::Defaultness>),\n     StructFieldItem(Type),\n-    VariantItem(Variant),\n+    VariantItem(VariantKind),\n     /// `fn`s from an extern block\n     ForeignFunctionItem(Function),\n     /// `static`s from an extern block\n@@ -353,7 +351,7 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(Variant { kind: VariantKind::Struct(v) }) => v.fields.iter(),\n+            VariantItem(VariantKind::Struct(v)) => v.fields.iter(),\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -1718,11 +1716,6 @@ crate struct Enum {\n     crate variants_stripped: bool,\n }\n \n-#[derive(Clone, Debug)]\n-crate struct Variant {\n-    crate kind: VariantKind,\n-}\n-\n #[derive(Clone, Debug)]\n crate enum VariantKind {\n     CLike,"}, {"sha": "090f7648e4e3cf5c6c663fe5f2d9f8dd814083ae", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -55,13 +55,13 @@ crate trait DocFolder: Sized {\n             }\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n-                match i.kind {\n+                match i {\n                     VariantKind::Struct(mut j) => {\n                         let num_fields = j.fields.len();\n                         j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len()\n                             || j.fields.iter().any(|f| f.is_stripped());\n-                        VariantItem(Variant { kind: VariantKind::Struct(j) })\n+                        VariantItem(VariantKind::Struct(j))\n                     }\n                     _ => VariantItem(i2),\n                 }"}, {"sha": "0c9bb78b9673b8a23bdb3d5629e945b3ae57deab", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -3200,7 +3200,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"    \");\n                 let name = v.name.as_ref().unwrap();\n                 match *v.kind {\n-                    clean::VariantItem(ref var) => match var.kind {\n+                    clean::VariantItem(ref var) => match var {\n                         clean::VariantKind::CLike => write!(w, \"{}\", name),\n                         clean::VariantKind::Tuple(ref tys) => {\n                             write!(w, \"{}(\", name);\n@@ -3249,25 +3249,22 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 id = id,\n                 name = variant.name.as_ref().unwrap()\n             );\n-            if let clean::VariantItem(ref var) = *variant.kind {\n-                if let clean::VariantKind::Tuple(ref tys) = var.kind {\n-                    write!(w, \"(\");\n-                    for (i, ty) in tys.iter().enumerate() {\n-                        if i > 0 {\n-                            write!(w, \",&nbsp;\");\n-                        }\n-                        write!(w, \"{}\", ty.print());\n+            if let clean::VariantItem(clean::VariantKind::Tuple(ref tys)) = *variant.kind {\n+                write!(w, \"(\");\n+                for (i, ty) in tys.iter().enumerate() {\n+                    if i > 0 {\n+                        write!(w, \",&nbsp;\");\n                     }\n-                    write!(w, \")\");\n+                    write!(w, \"{}\", ty.print());\n                 }\n+                write!(w, \")\");\n             }\n             write!(w, \"</code></div>\");\n             document(w, cx, variant, Some(it));\n             document_non_exhaustive(w, variant);\n \n-            use crate::clean::{Variant, VariantKind};\n-            if let clean::VariantItem(Variant { kind: VariantKind::Struct(ref s) }) = *variant.kind\n-            {\n+            use crate::clean::VariantKind;\n+            if let clean::VariantItem(VariantKind::Struct(ref s)) = *variant.kind {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,"}, {"sha": "aa4d51f84e0bf790c6ccfb18892bc13b70cad490", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -480,10 +480,10 @@ impl From<clean::VariantStruct> for Struct {\n     }\n }\n \n-impl From<clean::Variant> for Variant {\n-    fn from(variant: clean::Variant) -> Self {\n+impl From<clean::VariantKind> for Variant {\n+    fn from(variant: clean::VariantKind) -> Self {\n         use clean::VariantKind::*;\n-        match variant.kind {\n+        match variant {\n             CLike => Variant::Plain,\n             Tuple(t) => Variant::Tuple(t.into_iter().map(Into::into).collect()),\n             Struct(s) => Variant::Struct(ids(s.fields)),"}, {"sha": "133849a038933fc0b4d273277dae224ddde48e92", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd459a2be6973cdf2e79158c8ff386447c401d1d/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=dd459a2be6973cdf2e79158c8ff386447c401d1d", "patch": "@@ -94,7 +94,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Struct variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant { kind: clean::VariantKind::Struct(..) }) => true,\n+            clean::VariantItem(clean::VariantKind::Struct(..)) => true,\n             _ => false,\n         };\n "}]}