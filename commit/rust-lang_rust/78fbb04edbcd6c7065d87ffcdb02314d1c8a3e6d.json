{"sha": "78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZmJiMDRlZGJjZDZjNzA2NWQ4N2ZmY2RiMDIzMTRkMWM4YTNlNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T13:43:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T13:43:01Z"}, "message": "Auto merge of #6071 - ebroto:rustup, r=ebroto\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "3903755e869fcfc733b0b48f433fcc23f6f296cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3903755e869fcfc733b0b48f433fcc23f6f296cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "html_url": "https://github.com/rust-lang/rust/commit/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88b9b7543756afef81dcb2e2c37a11603d513d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88b9b7543756afef81dcb2e2c37a11603d513d5", "html_url": "https://github.com/rust-lang/rust/commit/d88b9b7543756afef81dcb2e2c37a11603d513d5"}, {"sha": "4117ae1175430087441c9b34145f148d49c2f08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4117ae1175430087441c9b34145f148d49c2f08c", "html_url": "https://github.com/rust-lang/rust/commit/4117ae1175430087441c9b34145f148d49c2f08c"}], "stats": {"total": 888, "additions": 415, "deletions": 473}, "files": [{"sha": "6f47687c41088e7ba9586cd12a921576f4e8d2e6", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 62, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -1440,15 +1440,12 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+    use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;\n-    use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n+    use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n     use rustc_lint::LateContext;\n-    use rustc_middle::ty;\n-    use rustc_mir::const_eval::is_const_fn;\n-    use rustc_span::source_map::Symbol;\n \n     pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Match(op, arms, ref match_source) = &expr.kind {\n@@ -1468,37 +1465,24 @@ mod redundant_pattern_match {\n         arms: &[Arm<'_>],\n         keyword: &'static str,\n     ) {\n-        fn find_suggestion(cx: &LateContext<'_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n-            if match_qpath(path, &paths::RESULT_OK) && can_suggest(cx, hir_id, sym!(result_type), \"is_ok\") {\n-                return Some(\"is_ok()\");\n-            }\n-            if match_qpath(path, &paths::RESULT_ERR) && can_suggest(cx, hir_id, sym!(result_type), \"is_err\") {\n-                return Some(\"is_err()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n-                return Some(\"is_some()\");\n-            }\n-            if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n-                return Some(\"is_none()\");\n-            }\n-            None\n-        }\n-\n-        let hir_id = expr.hir_id;\n         let good_method = match arms[0].pat.kind {\n             PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n                 if let PatKind::Wild = patterns[0].kind {\n-                    find_suggestion(cx, hir_id, path)\n+                    if match_qpath(path, &paths::RESULT_OK) {\n+                        \"is_ok()\"\n+                    } else if match_qpath(path, &paths::RESULT_ERR) {\n+                        \"is_err()\"\n+                    } else if match_qpath(path, &paths::OPTION_SOME) {\n+                        \"is_some()\"\n+                    } else {\n+                        return;\n+                    }\n                 } else {\n-                    None\n+                    return;\n                 }\n             },\n-            PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n-            _ => None,\n-        };\n-        let good_method = match good_method {\n-            Some(method) => method,\n-            None => return,\n+            PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n+            _ => return,\n         };\n \n         // check that `while_let_on_iterator` lint does not trigger\n@@ -1547,7 +1531,6 @@ mod redundant_pattern_match {\n         if arms.len() == 2 {\n             let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n-            let hir_id = expr.hir_id;\n             let found_good_method = match node_pair {\n                 (\n                     PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -1562,8 +1545,6 @@ mod redundant_pattern_match {\n                             &paths::RESULT_ERR,\n                             \"is_ok()\",\n                             \"is_err()\",\n-                            || can_suggest(cx, hir_id, sym!(result_type), \"is_ok\"),\n-                            || can_suggest(cx, hir_id, sym!(result_type), \"is_err\"),\n                         )\n                     } else {\n                         None\n@@ -1582,8 +1563,6 @@ mod redundant_pattern_match {\n                             &paths::OPTION_NONE,\n                             \"is_some()\",\n                             \"is_none()\",\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n-                            || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                         )\n                     } else {\n                         None\n@@ -1616,7 +1595,6 @@ mod redundant_pattern_match {\n         }\n     }\n \n-    #[allow(clippy::too_many_arguments)]\n     fn find_good_method_for_match<'a>(\n         arms: &[Arm<'_>],\n         path_left: &QPath<'_>,\n@@ -1625,8 +1603,6 @@ mod redundant_pattern_match {\n         expected_right: &[&str],\n         should_be_left: &'a str,\n         should_be_right: &'a str,\n-        can_suggest_left: impl Fn() -> bool,\n-        can_suggest_right: impl Fn() -> bool,\n     ) -> Option<&'a str> {\n         let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n             (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -1638,35 +1614,13 @@ mod redundant_pattern_match {\n \n         match body_node_pair {\n             (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-                (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n-                (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n+                (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+                (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n                 _ => None,\n             },\n             _ => None,\n         }\n     }\n-\n-    fn can_suggest(cx: &LateContext<'_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n-        if !in_constant(cx, hir_id) {\n-            return true;\n-        }\n-\n-        // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n-        cx.tcx\n-            .get_diagnostic_item(diag_item)\n-            .and_then(|def_id| {\n-                cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n-                    cx.tcx\n-                        .associated_items(*imp)\n-                        .in_definition_order()\n-                        .find_map(|item| match item.kind {\n-                            ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n-                            _ => None,\n-                        })\n-                })\n-            })\n-            .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n-    }\n }\n \n #[test]"}, {"sha": "17d908336d5934f7418020ee19fd244e02256198", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 14, "deletions": 85, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -18,39 +18,14 @@ fn main() {\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<()>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n-    if Some(42).is_some() {\n-        foo();\n-    } else {\n-        bar();\n-    }\n-\n-    while Some(42).is_some() {}\n-\n-    while Some(42).is_none() {}\n-\n-    while None::<()>.is_none() {}\n-\n     while Ok::<i32, i32>(10).is_ok() {}\n \n     while Ok::<i32, i32>(10).is_err() {}\n \n-    let mut v = vec![1, 2, 3];\n-    while v.pop().is_some() {\n-        foo();\n-    }\n-\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<i32>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n     if let Ok(x) = Ok::<i32, i32>(42) {\n         println!(\"{}\", x);\n     }\n@@ -63,48 +38,24 @@ fn main() {\n \n     Err::<i32, i32>(42).is_ok();\n \n-    Some(42).is_some();\n-\n-    None::<()>.is_none();\n-\n-    let _ = None::<()>.is_none();\n-\n     let _ = if Ok::<usize, ()>(4).is_ok() { true } else { false };\n \n-    let opt = Some(false);\n-    let x = if opt.is_some() { true } else { false };\n-    takes_bool(x);\n-\n     issue5504();\n-    issue5697();\n+    issue6067();\n \n-    let _ = if gen_opt().is_some() {\n+    let _ = if gen_res().is_ok() {\n         1\n-    } else if gen_opt().is_none() {\n-        2\n-    } else if gen_res().is_ok() {\n-        3\n     } else if gen_res().is_err() {\n-        4\n+        2\n     } else {\n-        5\n+        3\n     };\n }\n \n-fn gen_opt() -> Option<()> {\n-    None\n-}\n-\n fn gen_res() -> Result<(), ()> {\n     Ok(())\n }\n \n-fn takes_bool(_: bool) {}\n-\n-fn foo() {}\n-\n-fn bar() {}\n-\n macro_rules! m {\n     () => {\n         Some(42u32)\n@@ -128,41 +79,19 @@ fn issue5504() {\n     while m!().is_some() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-\n-    if let Err(_) = Err::<i32, i32>(42) {}\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Ok(_) = Ok::<i32, i32>(10) {}\n-\n-    while let Err(_) = Ok::<i32, i32>(10) {}\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if Ok::<i32, i32>(42).is_ok() {}\n \n-    while let Some(_) = Some(42) {}\n+    if Err::<i32, i32>(42).is_err() {}\n \n-    while let None = None::<()> {}\n+    while Ok::<i32, i32>(10).is_ok() {}\n \n-    match Ok::<i32, i32>(42) {\n-        Ok(_) => true,\n-        Err(_) => false,\n-    };\n+    while Ok::<i32, i32>(10).is_err() {}\n \n-    match Err::<i32, i32>(42) {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n+    Ok::<i32, i32>(42).is_ok();\n \n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n+    Err::<i32, i32>(42).is_err();\n }"}, {"sha": "d57fbb14ae496e369a63ac0579854266699005d1", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 8, "deletions": 82, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -18,39 +18,14 @@ fn main() {\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n-    if let None = None::<()> {}\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let Some(_) = Some(42) {\n-        foo();\n-    } else {\n-        bar();\n-    }\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n-    let mut v = vec![1, 2, 3];\n-    while let Some(_) = v.pop() {\n-        foo();\n-    }\n-\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<i32>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n     if let Ok(x) = Ok::<i32, i32>(42) {\n         println!(\"{}\", x);\n     }\n@@ -75,57 +50,24 @@ fn main() {\n         Err(_) => false,\n     };\n \n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-\n-    let _ = match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-\n     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n \n-    let opt = Some(false);\n-    let x = if let Some(_) = opt { true } else { false };\n-    takes_bool(x);\n-\n     issue5504();\n-    issue5697();\n+    issue6067();\n \n-    let _ = if let Some(_) = gen_opt() {\n+    let _ = if let Ok(_) = gen_res() {\n         1\n-    } else if let None = gen_opt() {\n-        2\n-    } else if let Ok(_) = gen_res() {\n-        3\n     } else if let Err(_) = gen_res() {\n-        4\n+        2\n     } else {\n-        5\n+        3\n     };\n }\n \n-fn gen_opt() -> Option<()> {\n-    None\n-}\n-\n fn gen_res() -> Result<(), ()> {\n     Ok(())\n }\n \n-fn takes_bool(_: bool) {}\n-\n-fn foo() {}\n-\n-fn bar() {}\n-\n macro_rules! m {\n     () => {\n         Some(42u32)\n@@ -149,25 +91,18 @@ fn issue5504() {\n     while let Some(_) = m!() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n     match Ok::<i32, i32>(42) {\n         Ok(_) => true,\n         Err(_) => false,\n@@ -177,13 +112,4 @@ const fn issue5697() {\n         Ok(_) => false,\n         Err(_) => true,\n     };\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n }"}, {"sha": "955900f3e6c9e54b001292bc6866fa0ac8ae17b5", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 58, "deletions": 104, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -18,62 +18,20 @@ error: redundant pattern matching, consider using `is_err()`\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:21:12\n-   |\n-LL |     if let None = None::<()> {}\n-   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:23:12\n-   |\n-LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:25:12\n-   |\n-LL |     if let Some(_) = Some(42) {\n-   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:31:15\n-   |\n-LL |     while let Some(_) = Some(42) {}\n-   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:33:15\n-   |\n-LL |     while let None = Some(42) {}\n-   |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:35:15\n-   |\n-LL |     while let None = None::<()> {}\n-   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:37:15\n+  --> $DIR/redundant_pattern_matching.rs:21:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:39:15\n+  --> $DIR/redundant_pattern_matching.rs:23:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:42:15\n-   |\n-LL |     while let Some(_) = v.pop() {\n-   |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:58:5\n+  --> $DIR/redundant_pattern_matching.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -82,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:63:5\n+  --> $DIR/redundant_pattern_matching.rs:38:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -91,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:68:5\n+  --> $DIR/redundant_pattern_matching.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -100,101 +58,97 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:73:5\n+  --> $DIR/redundant_pattern_matching.rs:48:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n LL | |         Err(_) => false,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:78:5\n-   |\n-LL | /     match Some(42) {\n-LL | |         Some(_) => true,\n-LL | |         None => false,\n-LL | |     };\n-   | |_____^ help: try this: `Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:83:5\n-   |\n-LL | /     match None::<()> {\n-LL | |         Some(_) => false,\n-LL | |         None => true,\n-LL | |     };\n-   | |_____^ help: try this: `None::<()>.is_none()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:88:13\n-   |\n-LL |       let _ = match None::<()> {\n-   |  _____________^\n-LL | |         Some(_) => false,\n-LL | |         None => true,\n-LL | |     };\n-   | |_____^ help: try this: `None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:93:20\n+  --> $DIR/redundant_pattern_matching.rs:53:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:96:20\n-   |\n-LL |     let x = if let Some(_) = opt { true } else { false };\n-   |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:102:20\n-   |\n-LL |     let _ = if let Some(_) = gen_opt() {\n-   |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:104:19\n-   |\n-LL |     } else if let None = gen_opt() {\n-   |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:106:19\n+  --> $DIR/redundant_pattern_matching.rs:58:20\n    |\n-LL |     } else if let Ok(_) = gen_res() {\n-   |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n+LL |     let _ = if let Ok(_) = gen_res() {\n+   |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:108:19\n+  --> $DIR/redundant_pattern_matching.rs:60:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:141:19\n+  --> $DIR/redundant_pattern_matching.rs:83:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:16\n+  --> $DIR/redundant_pattern_matching.rs:84:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:148:12\n+  --> $DIR/redundant_pattern_matching.rs:90:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:149:15\n+  --> $DIR/redundant_pattern_matching.rs:91:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n-error: aborting due to 29 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:98:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:100:12\n+   |\n+LL |     if let Err(_) = Err::<i32, i32>(42) {}\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:102:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:104:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:106:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         Err(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:111:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         Err(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: aborting due to 22 previous errors\n "}, {"sha": "de3fe00d5fa689b81591706e9acd4693f1073053", "filename": "tests/ui/redundant_pattern_matching_const_result.fixed", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=d88b9b7543756afef81dcb2e2c37a11603d513d5", "patch": "@@ -1,44 +0,0 @@\n-// run-rustfix\n-\n-#![feature(const_result)]\n-#![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::match_like_matches_macro, unused)]\n-\n-// Test that results are linted with the feature enabled.\n-\n-const fn issue_5697() {\n-    if Ok::<i32, i32>(42).is_ok() {}\n-\n-    if Err::<i32, i32>(42).is_err() {}\n-\n-    while Ok::<i32, i32>(10).is_ok() {}\n-\n-    while Ok::<i32, i32>(10).is_err() {}\n-\n-    Ok::<i32, i32>(42).is_ok();\n-\n-    Err::<i32, i32>(42).is_err();\n-\n-    // These should not be linted until `const_option` is implemented.\n-    // See https://github.com/rust-lang/rust/issues/67441\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n-fn main() {}"}, {"sha": "b77969d53d92df3def12d657c545d7c62e5ee39d", "filename": "tests/ui/redundant_pattern_matching_const_result.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=d88b9b7543756afef81dcb2e2c37a11603d513d5", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![feature(const_result)]\n-#![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::match_like_matches_macro, unused)]\n-\n-// Test that results are linted with the feature enabled.\n-\n-const fn issue_5697() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-\n-    if let Err(_) = Err::<i32, i32>(42) {}\n-\n-    while let Ok(_) = Ok::<i32, i32>(10) {}\n-\n-    while let Err(_) = Ok::<i32, i32>(10) {}\n-\n-    match Ok::<i32, i32>(42) {\n-        Ok(_) => true,\n-        Err(_) => false,\n-    };\n-\n-    match Err::<i32, i32>(42) {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n-\n-    // These should not be linted until `const_option` is implemented.\n-    // See https://github.com/rust-lang/rust/issues/67441\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n-fn main() {}"}, {"sha": "8ecd72158d33c8c86271578c4e60730199b1b9d0", "filename": "tests/ui/redundant_pattern_matching_const_result.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d88b9b7543756afef81dcb2e2c37a11603d513d5/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=d88b9b7543756afef81dcb2e2c37a11603d513d5", "patch": "@@ -1,46 +0,0 @@\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:10:12\n-   |\n-LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n-   |\n-   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n-   |\n-LL |     if let Err(_) = Err::<i32, i32>(42) {}\n-   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n-\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:14:15\n-   |\n-LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n-   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n-   |\n-LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n-   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n-\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:18:5\n-   |\n-LL | /     match Ok::<i32, i32>(42) {\n-LL | |         Ok(_) => true,\n-LL | |         Err(_) => false,\n-LL | |     };\n-   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:23:5\n-   |\n-LL | /     match Err::<i32, i32>(42) {\n-LL | |         Ok(_) => false,\n-LL | |         Err(_) => true,\n-LL | |     };\n-   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "499b975b2bb475d9343b556d03db861c02e0086f", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(\n+    clippy::unit_arg,\n+    unused_must_use,\n+    clippy::needless_bool,\n+    clippy::match_like_matches_macro,\n+    deprecated\n+)]\n+\n+fn main() {\n+    if None::<()>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    if Some(42).is_some() {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while Some(42).is_some() {}\n+\n+    while Some(42).is_none() {}\n+\n+    while None::<()>.is_none() {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while v.pop().is_some() {\n+        foo();\n+    }\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+\n+    let _ = None::<()>.is_none();\n+\n+    let opt = Some(false);\n+    let x = if opt.is_some() { true } else { false };\n+    takes_bool(x);\n+\n+    issue6067();\n+\n+    let _ = if gen_opt().is_some() {\n+        1\n+    } else if gen_opt().is_none() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_some` and `is_none` of `Option` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if Some(42).is_some() {}\n+\n+    if None::<()>.is_none() {}\n+\n+    while Some(42).is_some() {}\n+\n+    while None::<()>.is_none() {}\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+}"}, {"sha": "2a98435e7902e8aa7b246c71322fc30ed26e2929", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -0,0 +1,100 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(\n+    clippy::unit_arg,\n+    unused_must_use,\n+    clippy::needless_bool,\n+    clippy::match_like_matches_macro,\n+    deprecated\n+)]\n+\n+fn main() {\n+    if let None = None::<()> {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let Some(_) = Some(42) {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while let Some(_) = v.pop() {\n+        foo();\n+    }\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+\n+    let _ = match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+\n+    let opt = Some(false);\n+    let x = if let Some(_) = opt { true } else { false };\n+    takes_bool(x);\n+\n+    issue6067();\n+\n+    let _ = if let Some(_) = gen_opt() {\n+        1\n+    } else if let None = gen_opt() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_some` and `is_none` of `Option` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "eebb34484913e9794b774a805bc38ff9ad609616", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -0,0 +1,134 @@\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:14:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:16:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:18:12\n+   |\n+LL |     if let Some(_) = Some(42) {\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:24:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:26:15\n+   |\n+LL |     while let None = Some(42) {}\n+   |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:28:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:31:15\n+   |\n+LL |     while let Some(_) = v.pop() {\n+   |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:39:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:44:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:49:13\n+   |\n+LL |       let _ = match None::<()> {\n+   |  _____________^\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:55:20\n+   |\n+LL |     let x = if let Some(_) = opt { true } else { false };\n+   |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:60:20\n+   |\n+LL |     let _ = if let Some(_) = gen_opt() {\n+   |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:62:19\n+   |\n+LL |     } else if let None = gen_opt() {\n+   |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:83:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:85:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:87:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:89:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:91:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:96:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: aborting due to 19 previous errors\n+"}]}