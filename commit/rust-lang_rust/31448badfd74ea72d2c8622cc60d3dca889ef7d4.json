{"sha": "31448badfd74ea72d2c8622cc60d3dca889ef7d4", "node_id": "C_kwDOAAsO6NoAKDMxNDQ4YmFkZmQ3NGVhNzJkMmM4NjIyY2M2MGQzZGNhODg5ZWY3ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T16:48:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T16:48:04Z"}, "message": "Auto merge of #108450 - matthiaskrgr:rollup-rqvfgu3, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108354 (Update `fuchsia-test-runner.py` and docs)\n - #108404 (support `x fmt` for sub and outside of rust directories)\n - #108407 (docs: use intra-doc links for `Vec::get(_mut)`)\n - #108410 (rustdoc: avoid including `<li>` tags in item table short desc)\n - #108412 (Fix GUI test navigation bug)\n - #108433 (Wrap missing provider message correctly)\n - #108434 (Migrate `rustc_hir_analysis` to session diagnostic [Part One])\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d6037bc3a65c76247c006dac6665f67932423873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6037bc3a65c76247c006dac6665f67932423873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31448badfd74ea72d2c8622cc60d3dca889ef7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31448badfd74ea72d2c8622cc60d3dca889ef7d4", "html_url": "https://github.com/rust-lang/rust/commit/31448badfd74ea72d2c8622cc60d3dca889ef7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31448badfd74ea72d2c8622cc60d3dca889ef7d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcca6a375bd4eddb3deea7038ebf29d02af53b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcca6a375bd4eddb3deea7038ebf29d02af53b48", "html_url": "https://github.com/rust-lang/rust/commit/dcca6a375bd4eddb3deea7038ebf29d02af53b48"}, {"sha": "2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb", "html_url": "https://github.com/rust-lang/rust/commit/2aad179b4ec2fa1155ad0affdaae7b9db193a7fb"}], "stats": {"total": 379, "additions": 276, "deletions": 103}, "files": [{"sha": "e87731160d93f2de86fc0908ffe649ce7ff7ee78", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -132,3 +132,26 @@ hir_analysis_where_clause_on_main = `main` function is not allowed to have a `wh\n \n hir_analysis_track_caller_on_main = `main` function is not allowed to be `#[track_caller]`\n     .label = `main` function is not allowed to be `#[track_caller]`\n+\n+hir_analysis_start_not_track_caller = `start` is not allowed to be `#[track_caller]`\n+    .label = `start` is not allowed to be `#[track_caller]`\n+\n+hir_analysis_start_not_async = `start` is not allowed to be `async`\n+    .label = `start` is not allowed to be `async`\n+\n+hir_analysis_start_function_where = start function is not allowed to have a `where` clause\n+    .label = start function cannot have a `where` clause\n+\n+hir_analysis_start_function_parameters = start function is not allowed to have type parameters\n+    .label = start function cannot have type parameters\n+\n+hir_analysis_main_function_return_type_generic = `main` function return type is not allowed to have generic parameters\n+\n+hir_analysis_main_function_async = `main` function is not allowed to be `async`\n+    .label = `main` function is not allowed to be `async`\n+\n+hir_analysis_main_function_generic_parameters = `main` function is not allowed to have generic parameters\n+    .label = `main` cannot have generic parameters\n+\n+hir_analysis_variadic_function_compatible_convention = C-variadic function must have a compatible calling convention, like {$conventions}\n+    .label = C-variadic function must have a compatible calling convention"}, {"sha": "309d02052b7b2b2ff8a54f342eba9609999cc664", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -333,3 +333,70 @@ pub(crate) struct TrackCallerOnMain {\n     #[label]\n     pub annotated: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_not_track_caller)]\n+pub(crate) struct StartTrackCaller {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub start: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_not_async, code = \"E0752\")]\n+pub(crate) struct StartAsync {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_function_where, code = \"E0647\")]\n+pub(crate) struct StartFunctionWhere {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_start_function_parameters, code = \"E0132\")]\n+pub(crate) struct StartFunctionParameters {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_return_type_generic, code = \"E0131\")]\n+pub(crate) struct MainFunctionReturnTypeGeneric {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_async, code = \"E0752\")]\n+pub(crate) struct MainFunctionAsync {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub asyncness: Option<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_main_function_generic_parameters, code = \"E0131\")]\n+pub(crate) struct MainFunctionGenericParameters {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub label_span: Option<Span>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_variadic_function_compatible_convention, code = \"E0045\")]\n+pub(crate) struct VariadicFunctionCompatibleConvention<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub conventions: &'a str,\n+}"}, {"sha": "33c132fd5349bc4e61abf1daf5808cc99bb743e9", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 63, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -98,7 +98,7 @@ mod outlives;\n pub mod structured_errors;\n mod variance;\n \n-use rustc_errors::{struct_span_err, ErrorGuaranteed};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::Node;\n@@ -123,7 +123,6 @@ use bounds::Bounds;\n fluent_messages! { \"../locales/en-US.ftl\" }\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    const ERROR_HEAD: &str = \"C-variadic function must have a compatible calling convention\";\n     const CONVENTIONS_UNSTABLE: &str = \"`C`, `cdecl`, `win64`, `sysv64` or `efiapi`\";\n     const CONVENTIONS_STABLE: &str = \"`C` or `cdecl`\";\n     const UNSTABLE_EXPLAIN: &str =\n@@ -155,8 +154,7 @@ fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi\n         (true, false) => CONVENTIONS_UNSTABLE,\n     };\n \n-    let mut err = struct_span_err!(tcx.sess, span, E0045, \"{}, like {}\", ERROR_HEAD, conventions);\n-    err.span_label(span, ERROR_HEAD).emit();\n+    tcx.sess.emit_err(errors::VariadicFunctionCompatibleConvention { span, conventions });\n }\n \n fn require_same_types<'tcx>(\n@@ -258,15 +256,10 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     let main_fn_predicates = tcx.predicates_of(main_def_id);\n     if main_fn_generics.count() != 0 || !main_fnsig.bound_vars().is_empty() {\n         let generics_param_span = main_fn_generics_params_span(tcx, main_def_id);\n-        let msg = \"`main` function is not allowed to have generic \\\n-            parameters\";\n-        let mut diag =\n-            struct_span_err!(tcx.sess, generics_param_span.unwrap_or(main_span), E0131, \"{}\", msg);\n-        if let Some(generics_param_span) = generics_param_span {\n-            let label = \"`main` cannot have generic parameters\";\n-            diag.span_label(generics_param_span, label);\n-        }\n-        diag.emit();\n+        tcx.sess.emit_err(errors::MainFunctionGenericParameters {\n+            span: generics_param_span.unwrap_or(main_span),\n+            label_span: generics_param_span,\n+        });\n         error = true;\n     } else if !main_fn_predicates.predicates.is_empty() {\n         // generics may bring in implicit predicates, so we skip this check if generics is present.\n@@ -280,17 +273,8 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n \n     let main_asyncness = tcx.asyncness(main_def_id);\n     if let hir::IsAsync::Async = main_asyncness {\n-        let mut diag = struct_span_err!(\n-            tcx.sess,\n-            main_span,\n-            E0752,\n-            \"`main` function is not allowed to be `async`\"\n-        );\n         let asyncness_span = main_fn_asyncness_span(tcx, main_def_id);\n-        if let Some(asyncness_span) = asyncness_span {\n-            diag.span_label(asyncness_span, \"`main` function is not allowed to be `async`\");\n-        }\n-        diag.emit();\n+        tcx.sess.emit_err(errors::MainFunctionAsync { span: main_span, asyncness: asyncness_span });\n         error = true;\n     }\n \n@@ -308,9 +292,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let return_ty = main_fnsig.output();\n         let return_ty_span = main_fn_return_type_span(tcx, main_def_id).unwrap_or(main_span);\n         if !return_ty.bound_vars().is_empty() {\n-            let msg = \"`main` function return type is not allowed to have generic \\\n-                    parameters\";\n-            struct_span_err!(tcx.sess, return_ty_span, E0131, \"{}\", msg).emit();\n+            tcx.sess.emit_err(errors::MainFunctionReturnTypeGeneric { span: return_ty_span });\n             error = true;\n         }\n         let return_ty = return_ty.skip_binder();\n@@ -367,56 +349,28 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                 if let hir::ItemKind::Fn(sig, generics, _) = &it.kind {\n                     let mut error = false;\n                     if !generics.params.is_empty() {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            generics.span,\n-                            E0132,\n-                            \"start function is not allowed to have type parameters\"\n-                        )\n-                        .span_label(generics.span, \"start function cannot have type parameters\")\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartFunctionParameters { span: generics.span });\n                         error = true;\n                     }\n                     if generics.has_where_clause_predicates {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            generics.where_clause_span,\n-                            E0647,\n-                            \"start function is not allowed to have a `where` clause\"\n-                        )\n-                        .span_label(\n-                            generics.where_clause_span,\n-                            \"start function cannot have a `where` clause\",\n-                        )\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartFunctionWhere {\n+                            span: generics.where_clause_span,\n+                        });\n                         error = true;\n                     }\n                     if let hir::IsAsync::Async = sig.header.asyncness {\n                         let span = tcx.def_span(it.owner_id);\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            span,\n-                            E0752,\n-                            \"`start` is not allowed to be `async`\"\n-                        )\n-                        .span_label(span, \"`start` is not allowed to be `async`\")\n-                        .emit();\n+                        tcx.sess.emit_err(errors::StartAsync { span: span });\n                         error = true;\n                     }\n \n                     let attrs = tcx.hir().attrs(start_id);\n                     for attr in attrs {\n                         if attr.has_name(sym::track_caller) {\n-                            tcx.sess\n-                                .struct_span_err(\n-                                    attr.span,\n-                                    \"`start` is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .span_label(\n-                                    start_span,\n-                                    \"`start` is not allowed to be `#[track_caller]`\",\n-                                )\n-                                .emit();\n+                            tcx.sess.emit_err(errors::StartTrackCaller {\n+                                span: attr.span,\n+                                start: start_span,\n+                            });\n                             error = true;\n                         }\n                     }"}, {"sha": "3d9a5075d4ade2e7a2ba2bcb80c8ac685718874e", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -328,8 +328,9 @@ macro_rules! define_callbacks {\n \n                 Providers {\n                     $($name: |_, key| bug!(\n-                        \"`tcx.{}({:?})` is not supported for {} crate;\\n\n-                        hint: Queries can be either made to the local crate, or the external crate. This error means you tried to use it for one that's not supported.\\n\n+                        \"`tcx.{}({:?})` is not supported for {} crate;\\n\\\n+                        hint: Queries can be either made to the local crate, or the external crate. \\\n+                        This error means you tried to use it for one that's not supported.\\n\\\n                         If that's not the case, {} was likely never assigned to a provider function.\\n\",\n                         stringify!($name),\n                         key,"}, {"sha": "b279f21b5247ab5d597009986e510d44c16d44a7", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -378,8 +378,8 @@ mod spec_extend;\n /// Currently, `Vec` does not guarantee the order in which elements are dropped.\n /// The order has changed in the past and may change again.\n ///\n-/// [`get`]: ../../std/vec/struct.Vec.html#method.get\n-/// [`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n+/// [`get`]: slice::get\n+/// [`get_mut`]: slice::get_mut\n /// [`String`]: crate::string::String\n /// [`&str`]: type@str\n /// [`shrink_to_fit`]: Vec::shrink_to_fit"}, {"sha": "ae72a42973cd143af82f0d7158499b00e950bf97", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -218,7 +218,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                     WalkBuilder::new(first)\n                 }\n             } else {\n-                WalkBuilder::new(first)\n+                WalkBuilder::new(src.join(first))\n             };\n \n             for path in &paths[1..] {\n@@ -229,7 +229,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                         walker.add(path);\n                     }\n                 } else {\n-                    walker.add(path);\n+                    walker.add(src.join(path));\n                 }\n             }\n "}, {"sha": "9c550b2d728c55e83754e592aab90420208f89ed", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -1 +1 @@\n-0.14.3\n\\ No newline at end of file\n+0.14.4\n\\ No newline at end of file"}, {"sha": "c3d532c4b27a365808b42687e4d7f6c92f1bf6b7", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -507,9 +507,8 @@ def start(self):\n     bin/{exe_name}={bin_path}\n     lib/{libstd_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libstd_name}\n     lib/{libtest_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libtest_name}\n-    lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/lib/libc.so\n-    lib/libzircon.so={sdk_dir}/arch/{target_arch}/sysroot/lib/libzircon.so\n-    lib/libfdio.so={sdk_dir}/arch/{target_arch}/lib/libfdio.so\n+    lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/dist/lib/ld.so.1\n+    lib/libfdio.so={sdk_dir}/arch/{target_arch}/dist/libfdio.so\n     \"\"\"\n \n     TEST_ENV_VARS: ClassVar[List[str]] = [\n@@ -844,23 +843,34 @@ def debug(self, args):\n             \"--\",\n             \"--build-id-dir\",\n             os.path.join(self.sdk_dir, \".build-id\"),\n-            \"--build-id-dir\",\n-            os.path.join(self.libs_dir(), \".build-id\"),\n         ]\n \n-        # Add rust source if it's available\n-        if args.rust_src is not None:\n+        libs_build_id_path = os.path.join(self.libs_dir(), \".build-id\")\n+        if os.path.exists(libs_build_id_path):\n+            # Add .build-id symbols if installed libs have been stripped into a\n+            # .build-id directory\n             command += [\n-                \"--build-dir\",\n-                args.rust_src,\n+                \"--build-id-dir\",\n+                libs_build_id_path,\n+            ]\n+        else:\n+            # If no .build-id directory is detected, then assume that the shared\n+            # libs contain their debug symbols\n+            command += [\n+                f\"--symbol-path={self.rust_dir}/lib/rustlib/{self.target}/lib\",\n             ]\n \n+        # Add rust source if it's available\n+        rust_src_map = None\n+        if args.rust_src is not None:\n+            # This matches the remapped prefix used by compiletest. There's no\n+            # clear way that we can determine this, so it's hard coded.\n+            rust_src_map = f\"/rustc/FAKE_PREFIX={args.rust_src}\"\n+\n         # Add fuchsia source if it's available\n+        fuchsia_src_map = None\n         if args.fuchsia_src is not None:\n-            command += [\n-                \"--build-dir\",\n-                os.path.join(args.fuchsia_src, \"out\", \"default\"),\n-            ]\n+            fuchsia_src_map = f\"./../..={args.fuchsia_src}\"\n \n         # Load debug symbols for the test binary and automatically attach\n         if args.test is not None:\n@@ -883,7 +893,28 @@ def debug(self, args):\n                 test_name,\n             )\n \n+            # The fake-test-src-base directory maps to the suite directory\n+            # e.g. tests/ui/foo.rs has a path of rust/fake-test-src-base/foo.rs\n+            fake_test_src_base = os.path.join(\n+                args.rust_src,\n+                \"fake-test-src-base\",\n+            )\n+            real_test_src_base = os.path.join(\n+                args.rust_src,\n+                \"tests\",\n+                args.test.split(os.path.sep)[0],\n+            )\n+            test_src_map = f\"{fake_test_src_base}={real_test_src_base}\"\n+\n             with open(self.zxdb_script_path(), mode=\"w\", encoding=\"utf-8\") as f:\n+                print(f\"set source-map += {test_src_map}\", file=f)\n+\n+                if rust_src_map is not None:\n+                    print(f\"set source-map += {rust_src_map}\", file=f)\n+\n+                if fuchsia_src_map is not None:\n+                    print(f\"set source-map += {fuchsia_src_map}\", file=f)\n+\n                 print(f\"attach {test_name[:31]}\", file=f)\n \n             command += [\n@@ -900,6 +931,20 @@ def debug(self, args):\n         # Connect to the running emulator with zxdb\n         subprocess.run(command, env=self.ffx_cmd_env(), check=False)\n \n+    def syslog(self, args):\n+        subprocess.run(\n+            [\n+                self.tool_path(\"ffx\"),\n+                \"--config\",\n+                self.ffx_user_config_path(),\n+                \"log\",\n+                \"--since\",\n+                \"now\",\n+            ],\n+            env=self.ffx_cmd_env(),\n+            check=False,\n+        )\n+\n \n def start(args):\n     test_env = TestEnvironment.from_args(args)\n@@ -933,6 +978,12 @@ def debug(args):\n     return 0\n \n \n+def syslog(args):\n+    test_env = TestEnvironment.read_from_file()\n+    test_env.syslog(args)\n+    return 0\n+\n+\n def main():\n     parser = argparse.ArgumentParser()\n \n@@ -1028,6 +1079,11 @@ def print_help(args):\n     )\n     debug_parser.set_defaults(func=debug)\n \n+    syslog_parser = subparsers.add_parser(\n+        \"syslog\", help=\"prints the device syslog\"\n+    )\n+    syslog_parser.set_defaults(func=syslog)\n+\n     args = parser.parse_args()\n     return args.func(args)\n "}, {"sha": "63dde2aaedd6424271c81de1f142808cc5953fda", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -687,7 +687,9 @@ Rust compiler locally. See \"[Targeting Fuchsia with a compiler built from source\n for the steps to build locally.\n \n You'll also need to download a copy of the Fuchsia SDK. The current minimum\n-supported SDK version is [9.20220726.1.1](https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:9.20220726.1.1).\n+supported SDK version is [10.20221207.2.89][minimum_supported_sdk_version].\n+\n+[minimum_supported_sdk_version]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:10.20221207.2.89\n \n Fuchsia's test runner interacts with the Fuchsia emulator and is located at\n `src/ci/docker/scripts/fuchsia-test-runner.py`. We can use it to start our\n@@ -697,7 +699,7 @@ test environment with:\n src/ci/docker/scripts/fuchsia-test-runner.py start\n     --rust ${RUST_SRC_PATH}/install\n     --sdk ${SDK_PATH}\n-    --target-triple {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n+    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n ```\n \n Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and\n@@ -717,17 +719,11 @@ run the full `tests/ui` test suite:\n     --target x86_64-unknown-fuchsia                                           \\\n     --run=always --jobs 1                                                     \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args -L                                                            \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args ${SDK_PATH}/arch/{x64|arm64}/sysroot/lib                      \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args -L                                                            \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args ${SDK_PATH}/arch/{x64|arm64}/lib                              \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/lib                     \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args -Cpanic=abort                                                 \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args -Zpanic_abort_tests                                           \\\n+    --test-args -Clink-arg=--undefined-version                                \\\n     --test-args --remote-test-client                                          \\\n     --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \\\n )\n@@ -736,7 +732,18 @@ run the full `tests/ui` test suite:\n *Note: The test suite cannot be run in parallel at the moment, so `x.py`\n must be run with `--jobs 1` to ensure only one test runs at a time.*\n \n-When finished, the test runner can be used to stop the test environment:\n+By default, `x.py` compiles test binaries with `panic=unwind`. If you built your\n+Rust toolchain with `-Cpanic=abort`, you need to tell `x.py` to compile test\n+binaries with `panic=abort` as well:\n+\n+```sh\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cpanic=abort                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Zpanic_abort_tests                                           \\\n+```\n+\n+When finished testing, the test runner can be used to stop the test environment:\n \n ```sh\n src/ci/docker/scripts/fuchsia-test-runner.py stop\n@@ -764,8 +771,9 @@ ${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n * `--symbol-path` gets required symbol paths, which are\n necessary for stepping through your program.\n \n-The \"[displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\" section describes how you can\n-display Rust and/or Fuchsia source code in your debugging session.\n+The \"[displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\"\n+section describes how you can display Rust and/or Fuchsia source code in your\n+debugging session.\n \n ### Using `zxdb`\n \n@@ -866,6 +874,64 @@ ${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n  Linking to a Fuchsia checkout can help with debugging Fuchsia libraries,\n  such as [fdio].\n \n+### Debugging the compiler test suite\n+\n+Debugging the compiler test suite requires some special configuration:\n+\n+First, we have to properly configure zxdb so it will be able to find debug\n+symbols and source information for our test. The test runner can do this for us\n+with:\n+\n+```sh\n+src/ci/docker/scripts/fuchsia-test-runner.py debug                            \\\n+    --rust-src ${RUST_SRC_PATH}                                               \\\n+    --fuchsia-src ${FUCHSIA_SRC_PATH}                                         \\\n+    --test ${TEST}\n+```\n+\n+where `${TEST}` is relative to Rust's `tests` directory (e.g. `ui/abi/...`).\n+\n+This will start a zxdb session that is properly configured for the specific test\n+being run. All three arguments are optional, so you can omit `--fuchsia-src` if\n+you don't have it downloaded. Now is a good time to set any desired breakpoints,\n+like `b main`.\n+\n+Next, we have to tell `x.py` not to optimize or strip debug symbols from our\n+test suite binaries. We can do this by passing some new arguments to `rustc`\n+through our `x.py` invocation. The full invocation is:\n+\n+```sh\n+( \\\n+    source config-env.sh &&                                                   \\\n+    ./x.py                                                                    \\\n+    --config config.toml                                                      \\\n+    --stage=2                                                                 \\\n+    test tests/${TEST}                                                        \\\n+    --target x86_64-unknown-fuchsia                                           \\\n+    --run=always --jobs 1                                                     \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/lib                     \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Clink-arg=--undefined-version                                \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cdebuginfo=2                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Copt-level=0                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cstrip=none                                                  \\\n+    --test-args --remote-test-client                                          \\\n+    --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \\\n+)\n+```\n+\n+*If you built your Rust toolchain with `panic=abort`, make sure to include the\n+previous flags so your test binaries are also compiled with `panic=abort`.*\n+\n+Upon running this command, the test suite binary will be run and zxdb will\n+attach and load any relevant debug symbols.\n+\n [Fuchsia team]: https://team-api.infra.rust-lang.org/v1/teams/fuchsia.json\n [Fuchsia]: https://fuchsia.dev/\n [source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build"}, {"sha": "89f1ad71134cad311216d14f34ce81d6f6d8a233", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -552,10 +552,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> SummaryLine<'a, I> {\n }\n \n fn check_if_allowed_tag(t: &Tag<'_>) -> bool {\n-    matches!(\n-        t,\n-        Tag::Paragraph | Tag::Item | Tag::Emphasis | Tag::Strong | Tag::Link(..) | Tag::BlockQuote\n-    )\n+    matches!(t, Tag::Paragraph | Tag::Emphasis | Tag::Strong | Tag::Link(..) | Tag::BlockQuote)\n }\n \n fn is_forbidden_tag(t: &Tag<'_>) -> bool {"}, {"sha": "6e2321a696303b61921ac3e0e4232b7316e16533", "filename": "tests/rustdoc-gui/help-page.goml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc-gui%2Fhelp-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc-gui%2Fhelp-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fhelp-page.goml?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -68,5 +68,4 @@ size: (1000, 1000) // Popover only appears when the screen width is >700px.\n assert-false: \"#help\"\n click: \"#help-button > a\"\n click: \".popover a[href='https://doc.rust-lang.org/rustdoc/']\"\n-wait-for: 2000\n-assert-document-property: {\"URL\": \"https://doc.rust-lang.org/rustdoc/\"}\n+wait-for-document-property: {\"URL\": \"https://doc.rust-lang.org/rustdoc/\"}"}, {"sha": "72bde573cead36114ba34cb5fb9de90c0d7cfba2", "filename": "tests/rustdoc/item-desc-list-at-start.item-table.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc%2Fitem-desc-list-at-start.item-table.html", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc%2Fitem-desc-list-at-start.item-table.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fitem-desc-list-at-start.item-table.html?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -0,0 +1 @@\n+<ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"constant\" href=\"constant.MY_CONSTANT.html\" title=\"constant item_desc_list_at_start::MY_CONSTANT\">MY_CONSTANT</a></div><div class=\"desc docblock-short\">Groups: <code>SamplePatternSGIS</code>, <code>SamplePatternEXT</code></div></li></ul>\n\\ No newline at end of file"}, {"sha": "d88c61d333e87daecec6139227c4acc1c8301b1c", "filename": "tests/rustdoc/item-desc-list-at-start.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc%2Fitem-desc-list-at-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31448badfd74ea72d2c8622cc60d3dca889ef7d4/tests%2Frustdoc%2Fitem-desc-list-at-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fitem-desc-list-at-start.rs?ref=31448badfd74ea72d2c8622cc60d3dca889ef7d4", "patch": "@@ -0,0 +1,9 @@\n+// @has item_desc_list_at_start/index.html\n+// @count - '//ul[@class=\"item-table\"]/li/div/li' 0\n+// @count - '//ul[@class=\"item-table\"]/li' 1\n+// @snapshot item-table - '//ul[@class=\"item-table\"]'\n+\n+// based on https://docs.rs/gl_constants/0.1.1/src/gl_constants/lib.rs.html#16\n+\n+/// * Groups: `SamplePatternSGIS`, `SamplePatternEXT`\n+pub const MY_CONSTANT: usize = 0;"}]}