{"sha": "b556690c53d87ea7530c631d3c257da3567e5a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NTY2OTBjNTNkODdlYTc1MzBjNjMxZDNjMjU3ZGEzNTY3ZTVhOWE=", "commit": {"author": {"name": "cjkenn", "email": "cjkenn@users.noreply.github.com", "date": "2020-11-19T00:16:23Z"}, "committer": {"name": "cjkenn", "email": "cjkenn@users.noreply.github.com", "date": "2020-11-19T00:16:23Z"}, "message": "move checks later into optimization passes", "tree": {"sha": "7e00ca15c30db99f2dd53cc361cad1ee56a9b062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e00ca15c30db99f2dd53cc361cad1ee56a9b062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b556690c53d87ea7530c631d3c257da3567e5a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b556690c53d87ea7530c631d3c257da3567e5a9a", "html_url": "https://github.com/rust-lang/rust/commit/b556690c53d87ea7530c631d3c257da3567e5a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b556690c53d87ea7530c631d3c257da3567e5a9a/comments", "author": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjkenn", "id": 6255842, "node_id": "MDQ6VXNlcjYyNTU4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6255842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjkenn", "html_url": "https://github.com/cjkenn", "followers_url": "https://api.github.com/users/cjkenn/followers", "following_url": "https://api.github.com/users/cjkenn/following{/other_user}", "gists_url": "https://api.github.com/users/cjkenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjkenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjkenn/subscriptions", "organizations_url": "https://api.github.com/users/cjkenn/orgs", "repos_url": "https://api.github.com/users/cjkenn/repos", "events_url": "https://api.github.com/users/cjkenn/events{/privacy}", "received_events_url": "https://api.github.com/users/cjkenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e524fb36c0d1d20495b67ccb232f123d7a11891", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e524fb36c0d1d20495b67ccb232f123d7a11891", "html_url": "https://github.com/rust-lang/rust/commit/1e524fb36c0d1d20495b67ccb232f123d7a11891"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "617086622cc1ac7728317681276c6ca473849b10", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=b556690c53d87ea7530c631d3c257da3567e5a9a", "patch": "@@ -14,14 +14,9 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n             return;\n         }\n \n-        if !tcx.consider_optimizing(|| {\n-            format!(\"MultipleReturnTerminators {:?} \", body.source.def_id())\n-        }) {\n-            return;\n-        }\n-\n         // find basic blocks with no statement and a return terminator\n         let mut bbs_simple_returns = BitSet::new_empty(body.basic_blocks().len());\n+        let def_id = body.source.def_id();\n         let bbs = body.basic_blocks_mut();\n         for idx in bbs.indices() {\n             if bbs[idx].statements.is_empty()\n@@ -32,6 +27,10 @@ impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n         }\n \n         for bb in bbs {\n+            if !tcx.consider_optimizing(|| format!(\"MultipleReturnTerminators {:?} \", def_id)) {\n+                break;\n+            }\n+\n             if let TerminatorKind::Goto { target } = bb.terminator().kind {\n                 if bbs_simple_returns.contains(target) {\n                     bb.terminator_mut().kind = TerminatorKind::Return;"}, {"sha": "221114eebaa45a670c93b8699c9906160eb4ee1e", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=b556690c53d87ea7530c631d3c257da3567e5a9a", "patch": "@@ -11,10 +11,6 @@ pub struct RemoveUnneededDrops;\n \n impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if !tcx.consider_optimizing(|| format!(\"RemoveUnneededDrops {:?} \", body.source.def_id())) {\n-            return;\n-        }\n-\n         trace!(\"Running RemoveUnneededDrops on {:?}\", body.source);\n         let mut opt_finder = RemoveUnneededDropsOptimizationFinder {\n             tcx,\n@@ -25,6 +21,12 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n         opt_finder.visit_body(body);\n         let should_simplify = !opt_finder.optimizations.is_empty();\n         for (loc, target) in opt_finder.optimizations {\n+            if !tcx\n+                .consider_optimizing(|| format!(\"RemoveUnneededDrops {:?} \", body.source.def_id()))\n+            {\n+                break;\n+            }\n+\n             let terminator = body.basic_blocks_mut()[loc.block].terminator_mut();\n             debug!(\"SUCCESS: replacing `drop` with goto({:?})\", target);\n             terminator.kind = TerminatorKind::Goto { target };"}, {"sha": "e39c8656021b25a245d1dcd667d002a4f5a16302", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b556690c53d87ea7530c631d3c257da3567e5a9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=b556690c53d87ea7530c631d3c257da3567e5a9a", "patch": "@@ -18,12 +18,6 @@ impl MirPass<'_> for UnreachablePropagation {\n             return;\n         }\n \n-        if !tcx\n-            .consider_optimizing(|| format!(\"UnreachablePropagation {:?} \", body.source.def_id()))\n-        {\n-            return;\n-        }\n-\n         let mut unreachable_blocks = FxHashSet::default();\n         let mut replacements = FxHashMap::default();\n \n@@ -56,6 +50,12 @@ impl MirPass<'_> for UnreachablePropagation {\n \n         let replaced = !replacements.is_empty();\n         for (bb, terminator_kind) in replacements {\n+            if !tcx.consider_optimizing(|| {\n+                format!(\"UnreachablePropagation {:?} \", body.source.def_id())\n+            }) {\n+                break;\n+            }\n+\n             body.basic_blocks_mut()[bb].terminator_mut().kind = terminator_kind;\n         }\n "}]}