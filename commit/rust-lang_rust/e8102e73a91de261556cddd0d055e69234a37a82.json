{"sha": "e8102e73a91de261556cddd0d055e69234a37a82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MTAyZTczYTkxZGUyNjE1NTZjZGRkMGQwNTVlNjkyMzRhMzdhODI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-20T15:14:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-20T15:15:04Z"}, "message": "core: Add a Zero and One trait to num\n\nI believe these are the last traits we need in order\nto start grouping our numerical types into mathematical\ngroups and rings.", "tree": {"sha": "bc02ee400393f97966917048649397d20b73f8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc02ee400393f97966917048649397d20b73f8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8102e73a91de261556cddd0d055e69234a37a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8102e73a91de261556cddd0d055e69234a37a82", "html_url": "https://github.com/rust-lang/rust/commit/e8102e73a91de261556cddd0d055e69234a37a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8102e73a91de261556cddd0d055e69234a37a82/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8554d5e7104be30d20ce8e8dc08239ce20b171c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8554d5e7104be30d20ce8e8dc08239ce20b171c2", "html_url": "https://github.com/rust-lang/rust/commit/8554d5e7104be30d20ce8e8dc08239ce20b171c2"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "5e34c7c5530b67ae5e4bf2bb0ac00f066d46dd69", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -174,6 +174,14 @@ impl f32: num::Num {\n     static pure fn from_int(n: int) -> f32 { return n as f32;    }\n }\n \n+impl f32: num::Zero {\n+    static pure fn zero() -> f32 { 0.0 }\n+}\n+\n+impl f32: num::One {\n+    static pure fn one() -> f32 { 1.0 }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "2e35d0360b62e70d05aebb159062b57895164ab4", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -193,6 +193,14 @@ impl f64: num::Num {\n     static pure fn from_int(n: int) -> f64 { return n as f64;    }\n }\n \n+impl f64: num::Zero {\n+    static pure fn zero() -> f64 { 0.0 }\n+}\n+\n+impl f64: num::One {\n+    static pure fn one() -> f64 { 1.0 }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "27184a397087f2223639e46af421e822e8e45760", "filename": "src/libcore/float.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -443,6 +443,14 @@ impl float: num::Num {\n     static pure fn from_int(&self, n: int) -> float { return n as float;  }\n }\n \n+impl float: num::Zero {\n+    static pure fn zero() -> float { 0.0 }\n+}\n+\n+impl float: num::One {\n+    static pure fn one() -> float { 1.0 }\n+}\n+\n #[test]\n pub fn test_from_str() {\n    assert from_str(~\"3\") == Some(3.);"}, {"sha": "c3fe24fff321bb41fc0f1046bd3b300e5941e8b7", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -91,6 +91,14 @@ impl T: num::Num {\n     static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n+impl T: num::Zero {\n+    static pure fn zero() -> T { 0 }\n+}\n+\n+impl T: num::One {\n+    static pure fn one() -> T { 1 }\n+}\n+\n impl T: iter::Times {\n     #[inline(always)]\n     #[doc = \"A convenience form for basic iteration. Given a variable `x` \\"}, {"sha": "4c2daa458a48db2b2b972ad478ae76a1724c26e1", "filename": "src/libcore/num.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -22,3 +22,11 @@ pub trait Num {\n     pure fn to_int(&self) -> int;\n     static pure fn from_int(n: int) -> self;\n }\n+\n+pub trait Zero {\n+    static pure fn zero() -> self;\n+}\n+\n+pub trait One {\n+    static pure fn one() -> self;\n+}"}, {"sha": "80b393a813cf198483a1780becfae1dc6dd2d160", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8102e73a91de261556cddd0d055e69234a37a82/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=e8102e73a91de261556cddd0d055e69234a37a82", "patch": "@@ -85,6 +85,14 @@ impl T: num::Num {\n     static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n+impl T: num::Zero {\n+    static pure fn zero() -> T { 0 }\n+}\n+\n+impl T: num::One {\n+    static pure fn one() -> T { 1 }\n+}\n+\n impl T: iter::Times {\n     #[inline(always)]\n     #[doc = \"A convenience form for basic iteration. Given a variable `x` \\"}]}