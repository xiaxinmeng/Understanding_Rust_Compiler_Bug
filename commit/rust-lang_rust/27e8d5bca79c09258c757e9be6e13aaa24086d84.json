{"sha": "27e8d5bca79c09258c757e9be6e13aaa24086d84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZThkNWJjYTc5YzA5MjU4Yzc1N2U5YmU2ZTEzYWFhMjQwODZkODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-31T12:50:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-31T12:50:55Z"}, "message": "auto merge of #16788 : Manishearth/rust/raw-ptr-syntax-ty, r=huonw\n\n@huonw , r? :)\r\n\r\n#16781", "tree": {"sha": "76b2a3bd57c4927f4caca9db20f4f0a8c21f6bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76b2a3bd57c4927f4caca9db20f4f0a8c21f6bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e8d5bca79c09258c757e9be6e13aaa24086d84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e8d5bca79c09258c757e9be6e13aaa24086d84", "html_url": "https://github.com/rust-lang/rust/commit/27e8d5bca79c09258c757e9be6e13aaa24086d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e8d5bca79c09258c757e9be6e13aaa24086d84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db47aa5bdf308213b4198b81e9d2e406ec716189", "url": "https://api.github.com/repos/rust-lang/rust/commits/db47aa5bdf308213b4198b81e9d2e406ec716189", "html_url": "https://github.com/rust-lang/rust/commit/db47aa5bdf308213b4198b81e9d2e406ec716189"}, {"sha": "2b312eca89c4da41403f594d9a8887dfed55d54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b312eca89c4da41403f594d9a8887dfed55d54c", "html_url": "https://github.com/rust-lang/rust/commit/2b312eca89c4da41403f594d9a8887dfed55d54c"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "64ab0e5cb191f442b448cabd015443baacff3fb6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27e8d5bca79c09258c757e9be6e13aaa24086d84/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e8d5bca79c09258c757e9be6e13aaa24086d84/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=27e8d5bca79c09258c757e9be6e13aaa24086d84", "patch": "@@ -52,6 +52,9 @@ pub trait AstBuilder {\n                ty: P<ast::Ty>,\n                lifetime: Option<ast::Lifetime>,\n                mutbl: ast::Mutability) -> P<ast::Ty>;\n+    fn ty_ptr(&self, span: Span,\n+              ty: P<ast::Ty>,\n+              mutbl: ast::Mutability) -> P<ast::Ty>;\n     fn ty_uniq(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty>;\n \n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;\n@@ -369,6 +372,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 ast::TyRptr(lifetime, self.ty_mt(ty, mutbl)))\n     }\n \n+    fn ty_ptr(&self,\n+              span: Span,\n+              ty: P<ast::Ty>,\n+              mutbl: ast::Mutability)\n+        -> P<ast::Ty> {\n+        self.ty(span,\n+                ast::TyPtr(self.ty_mt(ty, mutbl)))\n+    }\n     fn ty_uniq(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty> {\n         self.ty(span, ast::TyUniq(ty))\n     }"}, {"sha": "8b4a9c51cf09dbc07d8691205844a61220895fe4", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27e8d5bca79c09258c757e9be6e13aaa24086d84/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e8d5bca79c09258c757e9be6e13aaa24086d84/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=27e8d5bca79c09258c757e9be6e13aaa24086d84", "patch": "@@ -28,6 +28,8 @@ use std::gc::Gc;\n pub enum PtrTy<'a> {\n     /// &'lifetime mut\n     Borrowed(Option<&'a str>, ast::Mutability),\n+    /// *mut\n+    Raw(ast::Mutability),\n }\n \n /// A path, e.g. `::std::option::Option::<int>` (global). Has support\n@@ -82,7 +84,7 @@ impl<'a> Path<'a> {\n     }\n }\n \n-/// A type. Supports pointers (except for *), Self, and literals\n+/// A type. Supports pointers, Self, and literals\n #[deriving(Clone)]\n pub enum Ty<'a> {\n     Self,\n@@ -143,6 +145,7 @@ impl<'a> Ty<'a> {\n                         let lt = mk_lifetime(cx, span, lt);\n                         cx.ty_rptr(span, raw_ty, lt, mutbl)\n                     }\n+                    Raw(mutbl) => cx.ty_ptr(span, raw_ty, mutbl)\n                 }\n             }\n             Literal(ref p) => { p.to_ty(cx, span, self_ty, self_generics) }\n@@ -273,6 +276,7 @@ pub fn get_explicit_self(cx: &ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n                         let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s).name));\n                         ast::SelfRegion(lt, mutbl, special_idents::self_)\n                     }\n+                    Raw(_) => cx.span_bug(span, \"attempted to use *self in deriving definition\")\n                 });\n             let self_expr = cx.expr_deref(span, self_path);\n             (self_expr, self_ty)"}]}