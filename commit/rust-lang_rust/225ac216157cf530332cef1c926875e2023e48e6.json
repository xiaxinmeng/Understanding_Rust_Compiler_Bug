{"sha": "225ac216157cf530332cef1c926875e2023e48e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNWFjMjE2MTU3Y2Y1MzAzMzJjZWYxYzkyNjg3NWUyMDIzZTQ4ZTY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-25T01:53:51Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-25T01:53:51Z"}, "message": "Update impl of Round for Ratio", "tree": {"sha": "69eba4122ef99816caea1c02579fae25e685d75f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69eba4122ef99816caea1c02579fae25e685d75f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225ac216157cf530332cef1c926875e2023e48e6", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225ac216157cf530332cef1c926875e2023e48e6", "html_url": "https://github.com/rust-lang/rust/commit/225ac216157cf530332cef1c926875e2023e48e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225ac216157cf530332cef1c926875e2023e48e6/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c24188f9191888110ebea2bc5193de9a0b26d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/48c24188f9191888110ebea2bc5193de9a0b26d5", "html_url": "https://github.com/rust-lang/rust/commit/48c24188f9191888110ebea2bc5193de9a0b26d5"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "8af1d99fa47196cd663df43a064640e487e82a67", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/225ac216157cf530332cef1c926875e2023e48e6/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225ac216157cf530332cef1c926875e2023e48e6/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=225ac216157cf530332cef1c926875e2023e48e6", "patch": "@@ -204,20 +204,6 @@ impl<T: Copy + Num + Ord>\n /* Utils */\n impl<T: Copy + Num + Ord>\n     Round for Ratio<T> {\n-    fn round(&self, mode: num::RoundMode) -> Ratio<T> {\n-        match mode {\n-            num::RoundUp => { self.ceil() }\n-            num::RoundDown => { self.floor()}\n-            num::RoundToZero => { Ratio::from_integer(self.numer / self.denom) }\n-            num::RoundFromZero => {\n-                if *self < Zero::zero() {\n-                    Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n-                } else {\n-                    Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n-                }\n-            }\n-        }\n-    }\n \n     fn floor(&self) -> Ratio<T> {\n         if *self < Zero::zero() {\n@@ -226,13 +212,29 @@ impl<T: Copy + Num + Ord>\n             Ratio::from_integer(self.numer / self.denom)\n         }\n     }\n+\n     fn ceil(&self) -> Ratio<T> {\n         if *self < Zero::zero() {\n             Ratio::from_integer(self.numer / self.denom)\n         } else {\n             Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n         }\n     }\n+\n+    #[inline(always)]\n+    fn round(&self) -> Ratio<T> {\n+        if *self < Zero::zero() {\n+            Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n+        } else {\n+            Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n+        }\n+    }\n+\n+    #[inline(always)]\n+    fn trunc(&self) -> Ratio<T> {\n+        Ratio::from_integer(self.numer / self.denom)\n+    }\n+\n     fn fract(&self) -> Ratio<T> {\n         Ratio::new_raw(self.numer % self.denom, self.denom)\n     }\n@@ -421,18 +423,18 @@ mod test {\n     fn test_round() {\n         assert_eq!(_1_2.ceil(), _1);\n         assert_eq!(_1_2.floor(), _0);\n-        assert_eq!(_1_2.round(num::RoundToZero), _0);\n-        assert_eq!(_1_2.round(num::RoundFromZero), _1);\n+        assert_eq!(_1_2.round(), _1);\n+        assert_eq!(_1_2.trunc(), _0);\n \n         assert_eq!(_neg1_2.ceil(), _0);\n         assert_eq!(_neg1_2.floor(), -_1);\n-        assert_eq!(_neg1_2.round(num::RoundToZero), _0);\n-        assert_eq!(_neg1_2.round(num::RoundFromZero), -_1);\n+        assert_eq!(_neg1_2.round(), -_1);\n+        assert_eq!(_neg1_2.trunc(), _0);\n \n         assert_eq!(_1.ceil(), _1);\n         assert_eq!(_1.floor(), _1);\n-        assert_eq!(_1.round(num::RoundToZero), _1);\n-        assert_eq!(_1.round(num::RoundFromZero), _1);\n+        assert_eq!(_1.round(), _1);\n+        assert_eq!(_1.trunc(), _1);\n     }\n \n     #[test]"}]}