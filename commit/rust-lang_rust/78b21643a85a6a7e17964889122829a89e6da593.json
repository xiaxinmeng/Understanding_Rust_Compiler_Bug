{"sha": "78b21643a85a6a7e17964889122829a89e6da593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YjIxNjQzYTg1YTZhN2UxNzk2NDg4OTEyMjgyOWE4OWU2ZGE1OTM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-01T22:42:51Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-13T08:01:14Z"}, "message": "Moved helper functions from NiceRegionError to TyCtxt.", "tree": {"sha": "cd68b998848e0e90d5b4a05b8ccebae2785945da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd68b998848e0e90d5b4a05b8ccebae2785945da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b21643a85a6a7e17964889122829a89e6da593", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluaGUoACgkQAXYLT59T\n8VTRIg//drSC8+piMlYsXs61SwsWe71Nylwv4ErrA7Uk1nCb3TH6YRtQOSktX6z+\nRyn2YU1D/q4MNpke3dWhD19C/fCfzVjNkqafhD3lIwFyhXrlnBF8bHzlrYhYGkVg\n8KSb7tlPh5wdl+DipOiUvlq8kynD3RXVAhbofu0d6HxABGy4OtEcBd8LrB8IQ6fB\nY/Yj038AsJsIyyW68zrYneeqxLhFGvgERN/O2xPrChEWlPEzIkRFxamWyt200Adm\nHJHGTI/JpP7y71FHS2z41CQORtBhxJCRG/sp81DUrI3CJYqTNkHt9GV9fT1zfcN1\nLyhC6U0ch7lGkeQQdmR74LQiWMJ9995xL1VeUDK0jyrIIiXnnSeLFAYSp52BQ+lG\n1wr+m2HaJtzbjn4/v6O/Mo5G0QtMXBozDYCUF8ekmBwCCnGDBWWv1ZDp+NxEIEuE\n6xZjroMuaF4x5IikYkpMnfr9wLX/NoTeTM+1mRuOKnPFHXFUKDeCdArCrGvjTOAI\nR/Zakm4rsIuTngYtST7S0WqRAvVl5pN7qkYoo9dUoMVRYJxxzmjmtvFNNKHTX5is\nSc6/UKssPRi4cIrMJ4Kx8nGIJrQ3h/pEZQf6ZwY7fg03Ft3v07qcubaL2BboKq8N\nlNtuIxUpGqZx61Df8+N8gXBd5x5Lfewi6+rE/fzPkFXQUetNkJg=\n=yBdK\n-----END PGP SIGNATURE-----", "payload": "tree cd68b998848e0e90d5b4a05b8ccebae2785945da\nparent 994cdd918589535d705177545bf503cd0c3c5148\nauthor David Wood <david@davidtw.co> 1535841771 +0200\ncommitter David Wood <david@davidtw.co> 1536825674 +0200\n\nMoved helper functions from NiceRegionError to TyCtxt.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b21643a85a6a7e17964889122829a89e6da593", "html_url": "https://github.com/rust-lang/rust/commit/78b21643a85a6a7e17964889122829a89e6da593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b21643a85a6a7e17964889122829a89e6da593/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994cdd918589535d705177545bf503cd0c3c5148", "url": "https://api.github.com/repos/rust-lang/rust/commits/994cdd918589535d705177545bf503cd0c3c5148", "html_url": "https://github.com/rust-lang/rust/commit/994cdd918589535d705177545bf503cd0c3c5148"}], "stats": {"total": 178, "additions": 88, "deletions": 90}, "files": [{"sha": "97b1978cb2eb2223af8e437504a15ee63945b470", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -56,9 +56,9 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (span, sub, sup) = self.get_regions();\n \n         // Determine whether the sub and sup consist of both anonymous (elided) regions.\n-        let anon_reg_sup = self.is_suitable_region(sup)?;\n+        let anon_reg_sup = self.tcx.is_suitable_region(sup)?;\n \n-        let anon_reg_sub = self.is_suitable_region(sub)?;\n+        let anon_reg_sub = self.tcx.is_suitable_region(sub)?;\n         let scope_def_id_sup = anon_reg_sup.def_id;\n         let bregion_sup = anon_reg_sup.boundregion;\n         let scope_def_id_sub = anon_reg_sub.def_id;"}, {"sha": "10a2d179dd564e4aef52f81f24da3c75b115956f", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         region: Region<'tcx>,\n         br: &ty::BoundRegion,\n     ) -> Option<(&hir::Ty, &hir::FnDecl)> {\n-        if let Some(anon_reg) = self.is_suitable_region(region) {\n+        if let Some(anon_reg) = self.tcx.is_suitable_region(region) {\n             let def_id = anon_reg.def_id;\n             if let Some(node_id) = self.tcx.hir.as_local_node_id(def_id) {\n                 let fndecl = match self.tcx.hir.get(node_id) {"}, {"sha": "0eb634ea2cc8e4f3f11aa5ed74e63b3e47e427c5", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -33,23 +33,23 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         // version new_ty of its type where the anonymous region is replaced\n         // with the named one.//scope_def_id\n         let (named, anon, anon_arg_info, region_info) = if self.is_named_region(sub)\n-            && self.is_suitable_region(sup).is_some()\n+            && self.tcx.is_suitable_region(sup).is_some()\n             && self.find_arg_with_region(sup, sub).is_some()\n         {\n             (\n                 sub,\n                 sup,\n                 self.find_arg_with_region(sup, sub).unwrap(),\n-                self.is_suitable_region(sup).unwrap(),\n+                self.tcx.is_suitable_region(sup).unwrap(),\n             )\n-        } else if self.is_named_region(sup) && self.is_suitable_region(sub).is_some()\n+        } else if self.is_named_region(sup) && self.tcx.is_suitable_region(sub).is_some()\n             && self.find_arg_with_region(sub, sup).is_some()\n         {\n             (\n                 sup,\n                 sub,\n                 self.find_arg_with_region(sub, sup).unwrap(),\n-                self.is_suitable_region(sub).unwrap(),\n+                self.tcx.is_suitable_region(sub).unwrap(),\n             )\n         } else {\n             return None; // inapplicable"}, {"sha": "2f7c6adfd21851b1c32d534a19a851d439fdc2c2", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -27,9 +27,9 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                     sup_origin,\n                     sup_r,\n                 ) => {\n-                    let anon_reg_sup = self.is_suitable_region(sup_r)?;\n+                    let anon_reg_sup = self.tcx.is_suitable_region(sup_r)?;\n                     if sub_r == &RegionKind::ReStatic &&\n-                        self.is_return_type_impl_trait(anon_reg_sup.def_id)\n+                        self.tcx.is_return_type_impl_trait(anon_reg_sup.def_id)\n                     {\n                         let sp = var_origin.span();\n                         let return_sp = sub_origin.span();"}, {"sha": "afc50fe1151665e3a37fb37549644f74013d5344", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -15,7 +15,6 @@ use hir;\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use ty::{self, Region, Ty};\n use hir::def_id::DefId;\n-use hir::Node;\n use syntax_pos::Span;\n \n // The struct contains the information about the anonymous region\n@@ -35,18 +34,6 @@ pub(super) struct AnonymousArgInfo<'tcx> {\n     pub is_first: bool,\n }\n \n-// This struct contains information regarding the\n-// Refree((FreeRegion) corresponding to lifetime conflict\n-#[derive(Debug)]\n-pub(super) struct FreeRegionInfo {\n-    // def id corresponding to FreeRegion\n-    pub def_id: DefId,\n-    // the bound region corresponding to FreeRegion\n-    pub boundregion: ty::BoundRegion,\n-    // checks if bound region is in Impl Item\n-    pub is_impl_item: bool,\n-}\n-\n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     // This method walks the Type of the function body arguments using\n     // `fold_regions()` function and returns the\n@@ -122,36 +109,6 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // This method returns the DefId and the BoundRegion corresponding to the given region.\n-    pub(super) fn is_suitable_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n-        let (suitable_region_binding_scope, bound_region) = match *region {\n-            ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n-            ty::ReEarlyBound(ref ebr) => (\n-                self.tcx.parent_def_id(ebr.def_id).unwrap(),\n-                ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n-            ),\n-            _ => return None, // not a free region\n-        };\n-\n-        let node_id = self.tcx\n-            .hir\n-            .as_local_node_id(suitable_region_binding_scope)\n-            .unwrap();\n-        let is_impl_item = match self.tcx.hir.find(node_id) {\n-            Some(Node::Item(..)) | Some(Node::TraitItem(..)) => false,\n-            Some(Node::ImplItem(..)) => {\n-                self.is_bound_region_in_impl_item(suitable_region_binding_scope)\n-            }\n-            _ => return None,\n-        };\n-\n-        return Some(FreeRegionInfo {\n-            def_id: suitable_region_binding_scope,\n-            boundregion: bound_region,\n-            is_impl_item: is_impl_item,\n-        });\n-    }\n-\n     // Here, we check for the case where the anonymous region\n     // is in the return type.\n     // FIXME(#42703) - Need to handle certain cases here.\n@@ -176,22 +133,6 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    pub(super) fn is_return_type_impl_trait(\n-        &self,\n-        scope_def_id: DefId,\n-    ) -> bool {\n-        let ret_ty = self.tcx.type_of(scope_def_id);\n-        match ret_ty.sty {\n-            ty::FnDef(_, _) => {\n-                let sig = ret_ty.fn_sig(self.tcx);\n-                let output = self.tcx.erase_late_bound_regions(&sig.output());\n-                return output.is_impl_trait();\n-            }\n-            _ => {}\n-        }\n-        false\n-    }\n-\n     // Here we check for the case where anonymous region\n     // corresponds to self and if yes, we display E0312.\n     // FIXME(#42700) - Need to format self properly to\n@@ -203,24 +144,4 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 .map(|i| i.method_has_self_argument) == Some(true)\n     }\n \n-    // Here we check if the bound region is in Impl Item.\n-    pub(super) fn is_bound_region_in_impl_item(\n-        &self,\n-        suitable_region_binding_scope: DefId,\n-    ) -> bool {\n-        let container_id = self.tcx\n-            .associated_item(suitable_region_binding_scope)\n-            .container\n-            .id();\n-        if self.tcx.impl_trait_ref(container_id).is_some() {\n-            // For now, we do not try to target impls of traits. This is\n-            // because this message is going to suggest that the user\n-            // change the fn signature, but they may not be free to do so,\n-            // since the signature must match the trait.\n-            //\n-            // FIXME(#42706) -- in some cases, we could do better here.\n-            return true;\n-        }\n-        false\n-    }\n }"}, {"sha": "c1ae7bba50a29c9b44948793ad6ce4608413a569", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 78, "deletions": 1, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -17,7 +17,7 @@ use session::Session;\n use session::config::{BorrowckMode, OutputFilenames};\n use session::config::CrateType;\n use middle;\n-use hir::{TraitCandidate, HirId, ItemLocalId};\n+use hir::{TraitCandidate, HirId, ItemLocalId, Node};\n use hir::def::{Def, Export};\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use hir::map as hir_map;\n@@ -870,6 +870,18 @@ impl<'tcx> CommonTypes<'tcx> {\n     }\n }\n \n+// This struct contains information regarding the `ReFree(FreeRegion)` corresponding to a lifetime\n+// conflict.\n+#[derive(Debug)]\n+pub struct FreeRegionInfo {\n+    // def id corresponding to FreeRegion\n+    pub def_id: DefId,\n+    // the bound region corresponding to FreeRegion\n+    pub boundregion: ty::BoundRegion,\n+    // checks if bound region is in Impl Item\n+    pub is_impl_item: bool,\n+}\n+\n /// The central data structure of the compiler. It stores references\n /// to the various **arenas** and also houses the results of the\n /// various **compiler queries** that have been performed. See the\n@@ -1545,6 +1557,71 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         })\n     }\n+\n+    // This method returns the DefId and the BoundRegion corresponding to the given region.\n+    pub fn is_suitable_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n+        let (suitable_region_binding_scope, bound_region) = match *region {\n+            ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n+            ty::ReEarlyBound(ref ebr) => (\n+                self.parent_def_id(ebr.def_id).unwrap(),\n+                ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n+            ),\n+            _ => return None, // not a free region\n+        };\n+\n+        let node_id = self.hir\n+            .as_local_node_id(suitable_region_binding_scope)\n+            .unwrap();\n+        let is_impl_item = match self.hir.find(node_id) {\n+            Some(Node::Item(..)) | Some(Node::TraitItem(..)) => false,\n+            Some(Node::ImplItem(..)) => {\n+                self.is_bound_region_in_impl_item(suitable_region_binding_scope)\n+            }\n+            _ => return None,\n+        };\n+\n+        return Some(FreeRegionInfo {\n+            def_id: suitable_region_binding_scope,\n+            boundregion: bound_region,\n+            is_impl_item: is_impl_item,\n+        });\n+    }\n+\n+    pub fn is_return_type_impl_trait(\n+        &self,\n+        scope_def_id: DefId,\n+    ) -> bool {\n+        let ret_ty = self.type_of(scope_def_id);\n+        match ret_ty.sty {\n+            ty::FnDef(_, _) => {\n+                let sig = ret_ty.fn_sig(*self);\n+                let output = self.erase_late_bound_regions(&sig.output());\n+                return output.is_impl_trait();\n+            }\n+            _ => {}\n+        }\n+        false\n+    }\n+\n+    // Here we check if the bound region is in Impl Item.\n+    pub fn is_bound_region_in_impl_item(\n+        &self,\n+        suitable_region_binding_scope: DefId,\n+    ) -> bool {\n+        let container_id = self.associated_item(suitable_region_binding_scope)\n+            .container\n+            .id();\n+        if self.impl_trait_ref(container_id).is_some() {\n+            // For now, we do not try to target impls of traits. This is\n+            // because this message is going to suggest that the user\n+            // change the fn signature, but they may not be free to do so,\n+            // since the signature must match the trait.\n+            //\n+            // FIXME(#42706) -- in some cases, we could do better here.\n+            return true;\n+        }\n+        false\n+    }\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "3732e7d8fd2fb6fe684b4aba6d10b593fd4a40f6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b21643a85a6a7e17964889122829a89e6da593/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=78b21643a85a6a7e17964889122829a89e6da593", "patch": "@@ -80,7 +80,7 @@ pub use self::sty::TyKind::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, GlobalArenas, AllArenas, tls, keep_local};\n+pub use self::context::{TyCtxt, FreeRegionInfo, GlobalArenas, AllArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables};\n \n pub use self::instance::{Instance, InstanceDef};"}]}