{"sha": "4da8682523ed8527046790f288ee55dd394be52a", "node_id": "C_kwDOAAsO6NoAKDRkYTg2ODI1MjNlZDg1MjcwNDY3OTBmMjg4ZWU1NWRkMzk0YmU1MmE", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-04-23T01:39:25Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-04-23T02:34:33Z"}, "message": "Remove unnecessary const-time x87-related checks", "tree": {"sha": "63859fe4fa07ff3ce6d0923163a76d704ca4be0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63859fe4fa07ff3ce6d0923163a76d704ca4be0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da8682523ed8527046790f288ee55dd394be52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da8682523ed8527046790f288ee55dd394be52a", "html_url": "https://github.com/rust-lang/rust/commit/4da8682523ed8527046790f288ee55dd394be52a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da8682523ed8527046790f288ee55dd394be52a/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb555b828ca93cef1f01d4c7b74015e8fe87dbae", "html_url": "https://github.com/rust-lang/rust/commit/bb555b828ca93cef1f01d4c7b74015e8fe87dbae"}], "stats": {"total": 48, "additions": 16, "deletions": 32}, "files": [{"sha": "e1a46086af060407134011f5bacce82997acd4d4", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4da8682523ed8527046790f288ee55dd394be52a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da8682523ed8527046790f288ee55dd394be52a/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=4da8682523ed8527046790f288ee55dd394be52a", "patch": "@@ -928,19 +928,9 @@ impl f32 {\n                 FpCategory::Subnormal => {\n                     panic!(\"const-eval error: cannot use f32::to_bits on a subnormal number\")\n                 }\n-                FpCategory::Infinite =>\n-                // SAFETY: Infinity per se is fine\n-                unsafe { mem::transmute::<f32, u32>(ct) },\n-                FpCategory::Zero | FpCategory::Normal => {\n+                FpCategory::Infinite | FpCategory::Normal | FpCategory::Zero => {\n                     // SAFETY: We have a normal floating point number. Now we transmute, i.e. do a bitcopy.\n-                    let bits: u32 = unsafe { mem::transmute::<f32, u32>(ct) };\n-                    // Let's doublecheck to make sure it wasn't a weird float by truncating it.\n-                    if bits >> 23 & 0xFF == 0xFF {\n-                        panic!(\n-                            \"const-eval error: an unusually large x87 floating point value should not leak into const eval\"\n-                        )\n-                    };\n-                    bits\n+                    unsafe { mem::transmute::<f32, u32>(ct) }\n                 }\n             }\n         }\n@@ -1021,13 +1011,15 @@ impl f32 {\n         const fn ct_u32_to_f32(ct: u32) -> f32 {\n             match f32::classify_bits(ct) {\n                 FpCategory::Subnormal => {\n-                    panic!(\"const-eval error: cannot use f32::from_bits on a subnormal number\");\n+                    panic!(\"const-eval error: cannot use f32::from_bits on a subnormal number\")\n                 }\n                 FpCategory::Nan => {\n-                    panic!(\"const-eval error: cannot use f32::from_bits on NaN\");\n+                    panic!(\"const-eval error: cannot use f32::from_bits on NaN\")\n+                }\n+                FpCategory::Infinite | FpCategory::Normal | FpCategory::Zero => {\n+                    // SAFETY: It's not a frumious number\n+                    unsafe { mem::transmute::<u32, f32>(ct) }\n                 }\n-                // SAFETY: It's not a frumious number\n-                _ => unsafe { mem::transmute::<u32, f32>(ct) },\n             }\n         }\n         // SAFETY: `u32` is a plain old datatype so we can always... uh..."}, {"sha": "b07f201ca4ad282aa08069d21ed06e25586fc761", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4da8682523ed8527046790f288ee55dd394be52a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da8682523ed8527046790f288ee55dd394be52a/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=4da8682523ed8527046790f288ee55dd394be52a", "patch": "@@ -921,19 +921,9 @@ impl f64 {\n                 FpCategory::Subnormal => {\n                     panic!(\"const-eval error: cannot use f64::to_bits on a subnormal number\")\n                 }\n-                FpCategory::Infinite =>\n-                // SAFETY: Infinity per se is fine\n-                unsafe { mem::transmute::<f64, u64>(ct) },\n-                FpCategory::Zero | FpCategory::Normal => {\n+                FpCategory::Infinite | FpCategory::Normal | FpCategory::Zero => {\n                     // SAFETY: We have a normal floating point number. Now we transmute, i.e. do a bitcopy.\n-                    let bits: u64 = unsafe { mem::transmute::<f64, u64>(ct) };\n-                    // Let's doublecheck to make sure it wasn't a weird float by truncating it.\n-                    if (bits >> 52) & 0x7FF == 0x7FF {\n-                        panic!(\n-                            \"const-eval error: an unusually large x87 floating point value should not leak into const eval\"\n-                        )\n-                    };\n-                    bits\n+                    unsafe { mem::transmute::<f64, u64>(ct) }\n                 }\n             }\n         }\n@@ -1019,13 +1009,15 @@ impl f64 {\n         const fn ct_u64_to_f64(ct: u64) -> f64 {\n             match f64::classify_bits(ct) {\n                 FpCategory::Subnormal => {\n-                    panic!(\"const-eval error: cannot use f64::from_bits on a subnormal number\");\n+                    panic!(\"const-eval error: cannot use f64::from_bits on a subnormal number\")\n                 }\n                 FpCategory::Nan => {\n-                    panic!(\"const-eval error: cannot use f64::from_bits on NaN\");\n+                    panic!(\"const-eval error: cannot use f64::from_bits on NaN\")\n+                }\n+                FpCategory::Infinite | FpCategory::Normal | FpCategory::Zero => {\n+                    // SAFETY: It's not a frumious number\n+                    unsafe { mem::transmute::<u64, f64>(ct) }\n                 }\n-                // SAFETY: It's not a frumious number\n-                _ => unsafe { mem::transmute::<u64, f64>(ct) },\n             }\n         }\n         // SAFETY: `u64` is a plain old datatype so we can always... uh..."}]}