{"sha": "c3cede2257424d3d1879618a784974b967491b9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzY2VkZTIyNTc0MjRkM2QxODc5NjE4YTc4NDk3NGI5Njc0OTFiOWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-14T17:29:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T17:29:49Z"}, "message": "Rollup merge of #35573 - wdv4758h:E0138, r=jonathandturner\n\nUpdate E0138 to new format\n\nPart of #35233\nFix #35510\nr? @jonathandturner\n\n![e0138](https://cloud.githubusercontent.com/assets/2716047/17562415/7200d93c-5f5d-11e6-98ff-e15c29f40e03.png)\n\nQuestion: How can I only underline the function name ? I have observed the debug output and the struct of item, but I can't find the `Span` for function name. Should I modify the struct I get to save function name's position or there is another way to get it ? (I can only find `Span`s for function attributes, inputs, outputs, blocks)", "tree": {"sha": "8bf6235a1ce8d041ddfee4a7af0b3cde6f04ce53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf6235a1ce8d041ddfee4a7af0b3cde6f04ce53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3cede2257424d3d1879618a784974b967491b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3cede2257424d3d1879618a784974b967491b9b", "html_url": "https://github.com/rust-lang/rust/commit/c3cede2257424d3d1879618a784974b967491b9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3cede2257424d3d1879618a784974b967491b9b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c347b93a48c4a0f45b82ac62f90a1296dc5ff7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c347b93a48c4a0f45b82ac62f90a1296dc5ff7a", "html_url": "https://github.com/rust-lang/rust/commit/9c347b93a48c4a0f45b82ac62f90a1296dc5ff7a"}, {"sha": "92f7e85b303b67c2e412275ba663bb811388f9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f7e85b303b67c2e412275ba663bb811388f9a4", "html_url": "https://github.com/rust-lang/rust/commit/92f7e85b303b67c2e412275ba663bb811388f9a4"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "11bde922f47f2815047425593dc93e0caf220b41", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3cede2257424d3d1879618a784974b967491b9b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cede2257424d3d1879618a784974b967491b9b/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=c3cede2257424d3d1879618a784974b967491b9b", "patch": "@@ -132,8 +132,13 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.id, item.span));\n             } else {\n-                span_err!(ctxt.session, item.span, E0138,\n-                          \"multiple 'start' functions\");\n+                struct_span_err!(\n+                    ctxt.session, item.span, E0138,\n+                    \"multiple 'start' functions\")\n+                    .span_label(ctxt.start_fn.unwrap().1,\n+                                &format!(\"previous `start` function here\"))\n+                    .span_label(item.span, &format!(\"multiple `start` functions\"))\n+                    .emit();\n             }\n         },\n         EntryPointType::None => ()"}, {"sha": "d4630d7c2effbe7bd7ee96ce6f1ca538656f03c0", "filename": "src/test/compile-fail/E0138.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3cede2257424d3d1879618a784974b967491b9b/src%2Ftest%2Fcompile-fail%2FE0138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3cede2257424d3d1879618a784974b967491b9b/src%2Ftest%2Fcompile-fail%2FE0138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0138.rs?ref=c3cede2257424d3d1879618a784974b967491b9b", "patch": "@@ -12,6 +12,9 @@\n \n #[start]\n fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+//~^ NOTE previous `start` function here\n \n #[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {} //~ ERROR E0138\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+//~^ ERROR E0138\n+//~| NOTE multiple `start` functions"}]}