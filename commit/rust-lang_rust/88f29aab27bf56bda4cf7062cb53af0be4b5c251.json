{"sha": "88f29aab27bf56bda4cf7062cb53af0be4b5c251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjI5YWFiMjdiZjU2YmRhNGNmNzA2MmNiNTNhZjBiZTRiNWMyNTE=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-17T04:49:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-16T19:35:13Z"}, "message": "Use attributes for native module ABI and link name\n\nThis patch changes how to specify ABI and link name of a native module.\n\nBefore:\n  native \"cdecl\" mod llvm = \"rustllvm\" {...}\n\nAfter:\n  #[abi = \"cdecl\"]\n  #[link_name = \"rustllvm\"]\n  native mod llvm {...}\n\nThe old optional syntax for ABI and link name is no longer supported.\n\nFixes issue #547", "tree": {"sha": "2699aca1781258a889f68d553935150d665d9e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2699aca1781258a889f68d553935150d665d9e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f29aab27bf56bda4cf7062cb53af0be4b5c251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f29aab27bf56bda4cf7062cb53af0be4b5c251", "html_url": "https://github.com/rust-lang/rust/commit/88f29aab27bf56bda4cf7062cb53af0be4b5c251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f29aab27bf56bda4cf7062cb53af0be4b5c251/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9b66db631478b7f42cdbfae52f96d5e7bb0a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9b66db631478b7f42cdbfae52f96d5e7bb0a1f", "html_url": "https://github.com/rust-lang/rust/commit/7a9b66db631478b7f42cdbfae52f96d5e7bb0a1f"}], "stats": {"total": 296, "additions": 168, "deletions": 128}, "files": [{"sha": "26ca6850e8af5d688f3aece0189af1675a5b30a3", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -45,8 +45,7 @@ fn fold_native_mod(cfg: ast::crate_cfg, nm: ast::native_mod,\n                    fld: fold::ast_fold) -> ast::native_mod {\n     let filter = bind filter_native_item(cfg, _);\n     let filtered_items = vec::filter_map(filter, nm.items);\n-    ret {native_name: nm.native_name,\n-         abi: nm.abi,\n+    ret {abi: nm.abi,\n          view_items: vec::map(fld.fold_view_item, nm.view_items),\n          items: filtered_items};\n }"}, {"sha": "68ba8624268ccd8bea688c2308341cdb8594beaa", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -110,7 +110,9 @@ const LLVMRealULE: uint = 13u;\n const LLVMRealUNE: uint = 14u;\n \n #[link_args = \"-Lrustllvm\"]\n-native \"cdecl\" mod llvm = \"rustllvm\" {\n+#[link_name = \"rustllvm\"]\n+#[abi = \"cdecl\"]\n+native mod llvm {\n \n     type ModuleRef;\n     type ContextRef;"}, {"sha": "f4abe903e13b613fb40490b99a154a197379b4d8", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -54,7 +54,12 @@ fn visit_item(e: env, i: @ast::item) {\n             ret;\n         }\n         let cstore = e.sess.get_cstore();\n-        if !cstore::add_used_library(cstore, m.native_name) { ret; }\n+        let native_name = i.ident;\n+        alt attr::get_meta_item_value_str_by_name(i.attrs, \"link_name\") {\n+          some(nn) { native_name = nn; }\n+          none. { }\n+        }\n+        if !cstore::add_used_library(cstore, native_name) { ret; }\n         for a: ast::attribute in\n             attr::find_attrs_by_name(i.attrs, \"link_args\") {\n "}, {"sha": "b2117810c6db61adf3162952b16885b460e4ee1b", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -432,7 +432,7 @@ tag native_abi {\n }\n \n type native_mod =\n-    {native_name: str,\n+    {// FIXME: Removing abi from AST. Depends on Issue #1179.\n      abi: native_abi,\n      view_items: [@view_item],\n      items: [@native_item]};"}, {"sha": "f9b6d5739c8fea126100e813b2904f80f0b8557a", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -452,8 +452,7 @@ fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n }\n \n fn noop_fold_native_mod(nm: native_mod, fld: ast_fold) -> native_mod {\n-    ret {native_name: nm.native_name,\n-         abi: nm.abi,\n+    ret {abi: nm.abi,\n          view_items: vec::map(fld.fold_view_item, nm.view_items),\n          items: vec::map(fld.fold_native_item, nm.items)}\n }"}, {"sha": "05f508edfd005bf844dc0280652029814a781c65", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 46, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1978,7 +1978,7 @@ fn parse_native_item(p: parser, attrs: [ast::attribute]) ->\n     } else { unexpected(p, p.peek()); }\n }\n \n-fn parse_native_mod_items(p: parser, native_name: str, abi: ast::native_abi,\n+fn parse_native_mod_items(p: parser, abi: ast::native_abi,\n                           first_item_attrs: [ast::attribute]) ->\n    ast::native_mod {\n     // Shouldn't be any view items since we've already parsed an item attr\n@@ -1993,63 +1993,37 @@ fn parse_native_mod_items(p: parser, native_name: str, abi: ast::native_abi,\n         initial_attrs = [];\n         items += [parse_native_item(p, attrs)];\n     }\n-    ret {native_name: native_name,\n-         abi: abi,\n+    ret {abi: abi,\n          view_items: view_items,\n          items: items};\n }\n \n fn parse_item_native_mod(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n-    let abi = ast::native_abi_cdecl;\n-    if !is_word(p, \"mod\") {\n-        let t = parse_str(p);\n-        if str::eq(t, \"rust-intrinsic\") {\n-            abi = ast::native_abi_rust_intrinsic;\n-        } else if str::eq(t, \"cdecl\") {\n-            abi = ast::native_abi_cdecl;\n-        } else if str::eq(t, \"stdcall\") {\n-            abi = ast::native_abi_stdcall;\n-        } else {\n-            p.fatal(\"unsupported abi: \" + t);\n-        }\n-    } else {\n-        abi =\n-            alt attr::get_meta_item_value_str_by_name(attrs, \"abi\") {\n-              none. { ast::native_abi_cdecl }\n-              some(\"rust-intrinsic\") {\n-                ast::native_abi_rust_intrinsic\n-              }\n-              some(\"cdecl\") {\n-                ast::native_abi_cdecl\n-              }\n-              some(\"stdcall\") {\n-                ast::native_abi_stdcall\n-              }\n-              some(t) {\n-                p.fatal(\"unsupported abi: \" + t);\n-              }\n-            };\n-    }\n     expect_word(p, \"mod\");\n     let id = parse_ident(p);\n-    let native_name;\n-    if p.peek() == token::EQ {\n-        expect(p, token::EQ);\n-        native_name = parse_str(p);\n-    } else {\n-        native_name =\n-            alt attr::get_meta_item_value_str_by_name(attrs, \"link_name\") {\n-              none. { id }\n-              some(nn) { nn }\n-            };\n-    }\n     expect(p, token::LBRACE);\n     let more_attrs = parse_inner_attrs_and_next(p);\n     let inner_attrs = more_attrs.inner;\n     let first_item_outer_attrs = more_attrs.next;\n-    let m =\n-        parse_native_mod_items(p, native_name, abi, first_item_outer_attrs);\n+    let abi =\n+        alt attr::get_meta_item_value_str_by_name(\n+                attrs + inner_attrs, \"abi\") {\n+          none. { ast::native_abi_cdecl }\n+          some(\"rust-intrinsic\") {\n+            ast::native_abi_rust_intrinsic\n+          }\n+          some(\"cdecl\") {\n+            ast::native_abi_cdecl\n+          }\n+          some(\"stdcall\") {\n+            ast::native_abi_stdcall\n+          }\n+          some(t) {\n+            p.fatal(\"unsupported abi: \" + t);\n+          }\n+        };\n+    let m = parse_native_mod_items(p, abi, first_item_outer_attrs);\n     let hi = p.get_hi_pos();\n     expect(p, token::RBRACE);\n     ret mk_item(p, lo, hi, id, ast::item_native_mod(m), attrs + inner_attrs);"}, {"sha": "93a4293a5d1595fed8ab94ca7588a093649376be", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -395,24 +395,8 @@ fn print_item(s: ps, &&item: @ast::item) {\n       }\n       ast::item_native_mod(nmod) {\n         head(s, \"native\");\n-        alt nmod.abi {\n-          ast::native_abi_rust_intrinsic. {\n-            word_nbsp(s, \"\\\"rust-intrinsic\\\"\");\n-          }\n-          ast::native_abi_cdecl. {\n-            word_nbsp(s, \"\\\"cdecl\\\"\");\n-          }\n-          ast::native_abi_stdcall. {\n-            word_nbsp(s, \"\\\"stdcall\\\"\");\n-          }\n-        }\n         word_nbsp(s, \"mod\");\n         word_nbsp(s, item.ident);\n-        if !str::eq(nmod.native_name, item.ident) {\n-            word_space(s, \"=\");\n-            print_string(s, nmod.native_name);\n-            nbsp(s);\n-        }\n         bopen(s);\n         print_native_mod(s, nmod, item.attrs);\n         bclose(s, item.span);"}, {"sha": "a01db908821c29a1d0f813f717acaa12006f4f60", "filename": "src/lib/comm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -34,7 +34,8 @@ export recv;\n export chan;\n export port;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     type void;\n     type rust_port;\n \n@@ -48,7 +49,8 @@ native \"cdecl\" mod rustrt {\n     fn rust_port_size(po: *rust_port) -> ctypes::size_t;\n }\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn recv<uniq T>(port: *rustrt::rust_port) -> T;\n }\n "}, {"sha": "a6c039d581a809d8ed95217b636aaf2c826a4628", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -8,7 +8,8 @@\n  * logging.\n  */\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn debug_tydesc(td: *sys::type_desc);\n     fn debug_opaque<T>(td: *sys::type_desc, x: T);\n     fn debug_box<T>(td: *sys::type_desc, x: @T);"}, {"sha": "d5885a3baec1b9d18eb83796d4a67fbf958b2848", "filename": "src/lib/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -7,7 +7,8 @@ File system manipulation\n import os::getcwd;\n import os_fs;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_file_is_dir(path: str::sbuf) -> int;\n }\n "}, {"sha": "78a5384db1377ebf61a8510a05a999daa1df17ea", "filename": "src/lib/io.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,5 +1,6 @@\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_get_stdin() -> os::libc::FILE;\n     fn rust_get_stdout() -> os::libc::FILE;\n     fn rust_get_stderr() -> os::libc::FILE;"}, {"sha": "c8c4aeed84d2ccdec189cc0d46e8a06eac319f5c", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -6,7 +6,9 @@ TODO: Restructure and document\n \n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n-native \"cdecl\" mod libc = \"\" {\n+#[link_name = \"\"]\n+#[abi = \"cdecl\"]\n+native mod libc {\n     fn read(fd: int, buf: *u8, count: uint) -> int;\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n@@ -81,7 +83,8 @@ fn waitpid(pid: int) -> int {\n     ret status;\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_getcwd() -> str;\n }\n "}, {"sha": "db93ac649fb87cd20e8ab2197ec086e5d08a989e", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,5 +1,7 @@\n \n-native \"cdecl\" mod libc = \"\" {\n+#[link_name = \"\"]\n+#[abi = \"cdecl\"]\n+native mod libc {\n     fn read(fd: int, buf: *u8, count: uint) -> int;\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n@@ -74,7 +76,8 @@ fn waitpid(pid: int) -> int {\n     ret status;\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_getcwd() -> str;\n }\n "}, {"sha": "6c6a30a0b8ef9b4522e3aafcccf7fc179b0ac5ff", "filename": "src/lib/math.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmath.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,8 @@\n /* Module: math */\n \n-native \"cdecl\" mod libc = \"\" {\n+#[link_name = \"\"]\n+#[abi = \"cdecl\"]\n+native mod libc {\n     fn sqrt(n: float) -> float;\n     fn sin(n: float) -> float;\n     fn asin(n: float) -> float;"}, {"sha": "fe8dbb4d4f13a8fccd6528382d6ead21b24ada3e", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,4 +1,5 @@\n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_list_files(path: str) -> [str];\n }\n "}, {"sha": "1654f9188a08f0fb9cd1bcd84ad654b5ae01f96a", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -3,7 +3,8 @@ Module: ptr\n \n Unsafe pointer utility functions\n */\n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n     fn ptr_offset<T>(ptr: *T, count: uint) -> *T;\n }"}, {"sha": "ae610ae860840047eaa64ce549798117a3e6543e", "filename": "src/lib/rand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frand.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -3,7 +3,8 @@ Module: rand\n \n Random number generation\n */\n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     type rctx;\n     fn rand_new() -> rctx;\n     fn rand_next(c: rctx) -> u32;"}, {"sha": "915e6c0f32535fd101a8671285a17b88c65f638b", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -12,7 +12,8 @@ export program_output;\n export spawn_process;\n export waitpid;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_run_program(argv: *sbuf, in_fd: int, out_fd: int, err_fd: int) ->\n        int;\n }"}, {"sha": "4184e8b2050e22324a05228b00ac93929b299a5d", "filename": "src/lib/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -16,7 +16,8 @@ export eq, lteq, hash, is_empty, is_not_empty, is_whitespace, byte_len,\n        contains, iter_chars, loop_chars, loop_chars_sub,\n        escape;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n }\n "}, {"sha": "3ebfae52534572ec1f308b3f5ff81f6db7e49a92", "filename": "src/lib/sys.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsys.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -7,7 +7,8 @@ tag type_desc {\n     type_desc(@type_desc);\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     // Explicitly re-export native stuff we want to be made\n     // available outside this crate. Otherwise it's\n     // visible-in-crate, but not re-exported.\n@@ -19,7 +20,8 @@ native \"cdecl\" mod rustrt {\n     fn unsupervise();\n }\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn get_type_desc<T>() -> *type_desc;\n }\n "}, {"sha": "72a73763427c34bf01f92729576d28506d5b043d", "filename": "src/lib/task.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -50,12 +50,15 @@ export spawn;\n export spawn_notify;\n export spawn_joinable;\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     // these must run on the Rust stack so that they can swap stacks etc:\n     fn task_sleep(time_in_us: uint);\n }\n \n-native \"cdecl\" mod rustrt = \"rustrt\" {\n+#[link_name = \"rustrt\"]\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     // these can run on the C stack:\n     fn pin_task();\n     fn unpin_task();"}, {"sha": "db34b391f2ff174923b9fa163a9d0de3547527ad", "filename": "src/lib/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -25,7 +25,8 @@ export default_test_to_task;\n export configure_test_task;\n export joinable;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn sched_threads() -> uint;\n }\n "}, {"sha": "2865666fdc8390c73ef19c074617a84c4d0885c7", "filename": "src/lib/time.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftime.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -4,7 +4,8 @@ Module: time\n \n // FIXME: Document what these functions do\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn get_time(&sec: u32, &usec: u32);\n     fn nano_time(&ns: u64);\n }"}, {"sha": "5038721d26e5464a3a877368081663ed31a3b0be", "filename": "src/lib/unicode.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funicode.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -148,7 +148,9 @@ mod icu {\n     // FIXME: should be -1, change when compiler supports negative\n     // constants\n \n-    native \"cdecl\" mod libicu = \"icuuc\" {\n+    #[link_name = \"icuuc\"]\n+    #[abi = \"cdecl\"]\n+    native mod libicu {\n         fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n     }\n }"}, {"sha": "0162c10ea22b1db4aa8416cf168487b0d96f0dfa", "filename": "src/lib/unsafe.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -4,11 +4,13 @@ Module: unsafe\n Unsafe operations\n */\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn cast<T, U>(src: T) -> U;\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn leak<T>(-thing: T);\n }\n "}, {"sha": "3d51560741b220424345d069bacc46b295aee754", "filename": "src/lib/vec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -6,11 +6,13 @@ import option::{some, none};\n import uint::next_power_of_two;\n import ptr::addr_of;\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn vec_len<T>(&&v: [mutable? T]) -> uint;\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn vec_reserve_shared<T>(t: *sys::type_desc,\n                              &v: [mutable? T],\n                              n: uint);"}, {"sha": "6960b836ca4f0ddef9fa929f8b7caa653bb9ab44", "filename": "src/lib/win32_fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_fs.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,7 @@\n \n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_list_files(path: str) -> [str];\n }\n "}, {"sha": "c7c5f323b11de64da0febc46f09c95c569094809", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,5 +1,7 @@\n \n-native \"cdecl\" mod libc = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod libc {\n     fn read(fd: int, buf: *u8, count: uint) -> int;\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n@@ -39,7 +41,8 @@ type DWORD = u32;\n type HMODULE = uint;\n type LPTSTR = str::sbuf;\n \n-native \"stdcall\" mod kernel32 {\n+#[abi = \"stdcall\"]\n+native mod kernel32 {\n     fn GetEnvironmentVariableA(n: str::sbuf, v: str::sbuf, nsize: uint) ->\n        uint;\n     fn SetEnvironmentVariableA(n: str::sbuf, v: str::sbuf) -> int;\n@@ -83,7 +86,8 @@ fn fclose(file: libc::FILE) {\n     libc::fclose(file)\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn rust_process_wait(handle: int) -> int;\n     fn rust_getcwd() -> str;\n }"}, {"sha": "a560e6e1d7a9fddab73965f7e36412cbf5f8116a", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,7 +1,9 @@\n // based on:\n // http://shootout.alioth.debian.org/u32/benchmark.php?test=nbody&lang=java\n \n-native \"cdecl\" mod llvm = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod llvm {\n     fn sqrt(n: float) -> float;\n }\n "}, {"sha": "6459a423611b0a5c57a93eb26af0c20bda829e92", "filename": "src/test/compile-fail/native-unsafe-fn-called.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn-called.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,7 @@\n // -*- rust -*-\n // error-pattern: safe function calls function marked unsafe\n-native \"cdecl\" mod test {\n+#[abi = \"cdecl\"]\n+native mod test {\n     unsafe fn free();\n }\n "}, {"sha": "3d2c0e1f02b03606c8a1cb66050f0ab16aa56227", "filename": "src/test/compile-fail/native-unsafe-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-unsafe-fn.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,7 +1,8 @@\n // -*- rust -*-\n // error-pattern: unsafe functions can only be called\n \n-native \"cdecl\" mod test {\n+#[abi = \"cdecl\"]\n+native mod test {\n     unsafe fn free();\n }\n "}, {"sha": "dddbf575d8075b6071ba0795091306443cc5c012", "filename": "src/test/run-pass/bind-native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fbind-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fbind-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-native.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -2,7 +2,8 @@\n Can we bind native things?\n */\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn pin_task();\n }\n "}, {"sha": "c627d28e52bc7b711109290c91ee8093b6bc04f6", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -117,7 +117,9 @@ fn test_fn() {\n     assert (h1 >= h2);\n }\n \n-native \"cdecl\" mod native_mod = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod test {\n     fn do_gc();\n     fn unsupervise();\n }"}, {"sha": "d06a6d1b5ea9099fd3828077941f602cda80fff5", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,7 @@\n // xfail-test\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn unsupervise();\n }\n "}, {"sha": "9d1536c0ce79f02b0fda70ed1ee8951fd76712d2", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,7 +1,9 @@\n use std;\n import std::str;\n \n-native \"cdecl\" mod libc = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod libc {\n     fn atol(x: str::sbuf) -> int;\n     fn atoll(x: str::sbuf) -> i64;\n }"}, {"sha": "921f7a2fae78e0545806a9ae8b41570e7860585a", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -4,13 +4,15 @@ const b: bool = false;\n const b: bool = true;\n \n #[cfg(bogus)]\n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     // This symbol doesn't exist and would be a link error if this\n     // module was translated\n     fn bogus();\n }\n \n-native \"cdecl\" mod rustrt { }\n+#[abi = \"cdecl\"]\n+native mod rustrt { }\n \n #[cfg(bogus)]\n type t = int;\n@@ -79,7 +81,8 @@ fn test_in_fn_ctxt() {\n }\n \n mod test_native_items {\n-    native \"cdecl\" mod rustrt {\n+    #[abi = \"cdecl\"]\n+    native mod rustrt {\n         #[cfg(bogus)]\n         fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];\n         fn vec_from_buf_shared<T>(ptr: *T, count: uint) -> [T];"}, {"sha": "af19142682054a33669e17d9e2ce405a9e2e928a", "filename": "src/test/run-pass/import-from-native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fimport-from-native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fimport-from-native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-native.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -3,7 +3,8 @@ mod spam {\n     fn eggs() { }\n }\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     import spam::{ham, eggs};\n     export ham;\n     export eggs;"}, {"sha": "e40d6cbb9cc23b4040cad40e60dbd8e6b726e8be", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -20,7 +20,9 @@ mod a1 {\n //   |   |   |\n mod a2 {\n     //   |   |   |\n-    native \"cdecl\" mod b1 = \"\" {\n+    #[abi = \"cdecl\"]\n+    #[link_name = \"\"]\n+    native mod b1 {\n         //   |   |   |\n         import a1::b2::*;\n         //   | <-/  -/"}, {"sha": "988cea0042fef63dd1af2251e405fbc67313a20f", "filename": "src/test/run-pass/interior-vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,7 @@\n import rusti::vec_len;\n \n-native \"rust-intrinsic\" mod rusti {\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n     fn vec_len<T>(&&v: [T]) -> uint;\n }\n "}, {"sha": "28f1a92bbf8e9cc0a73d335903569e927dd6cb30", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -10,7 +10,8 @@\n use std;\n import std::task;\n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn task_yield();\n }\n "}, {"sha": "42874894ab83a553f4c397ca2b0a7a1d06589a2e", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -29,7 +29,8 @@ mod test_single_attr_outer {\n     mod mod1 { }\n \n     #[attr = \"val\"]\n-    native \"cdecl\" mod rustrt { }\n+    #[abi = \"cdecl\"]\n+    native mod rustrt { }\n \n     #[attr = \"val\"]\n     type t = obj { };\n@@ -55,7 +56,8 @@ mod test_multi_attr_outer {\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n-    native \"cdecl\" mod rustrt { }\n+    #[abi = \"cdecl\"]\n+    native mod rustrt { }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n@@ -83,7 +85,8 @@ mod test_stmt_single_attr_outer {\n         }\n \n         #[attr = \"val\"]\n-        native \"cdecl\" mod rustrt {\n+        #[abi = \"cdecl\"]\n+        native mod rustrt {\n         }\n         */\n \n@@ -116,7 +119,8 @@ mod test_stmt_multi_attr_outer {\n \n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n-        native \"cdecl\" mod rustrt {\n+        #[abi = \"cdecl\"]\n+        native mod rustrt {\n         }\n         */\n \n@@ -182,7 +186,8 @@ mod test_other_forms {\n }\n \n mod test_native_items {\n-    native \"cdecl\" mod rustrt {\n+    #[abi = \"cdecl\"]\n+    native mod rustrt {\n         #[attr];\n \n         #[attr]"}, {"sha": "22c53fda4f396c33078cb873608f0c506bd1f23a", "filename": "src/test/run-pass/native-dupe.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-dupe.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,11 +1,15 @@\n // xfail-fast - Somehow causes check-fast to livelock?? Probably because we're\n // calling pin_task and that's having wierd side-effects.\n \n-native \"cdecl\" mod rustrt1 = \"rustrt\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"rustrt\"]\n+native mod rustrt1 {\n     fn pin_task();\n }\n \n-native \"cdecl\" mod rustrt2 = \"rustrt\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"rustrt\"]\n+native mod rustrt2 {\n     fn pin_task();\n }\n "}, {"sha": "785ec5edda5e3f6f84f06aeaf2504a9e4a3ffc11", "filename": "src/test/run-pass/native-fn-linkname.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-fn-linkname.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -3,7 +3,9 @@ use std;\n import std::vec;\n import std::str;\n \n-native \"cdecl\" mod libc = \"\" {\n+#[link_name = \"\"]\n+#[abi = \"cdecl\"]\n+native mod libc {\n     #[link_name = \"strlen\"]\n     fn my_strlen(str: *u8) -> uint;\n }"}, {"sha": "e8df623d1b870677527dd3da80ab29e43092f086", "filename": "src/test/run-pass/native-opaque-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-opaque-type.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,6 +1,8 @@\n \n \n-native \"cdecl\" mod libc = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod libc {\n     type file_handle;\n }\n "}, {"sha": "07cb455cf0fe080f9a247cc498a306e3ddb08fa8", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -1,17 +1,26 @@\n \n \n-native \"cdecl\" mod rustrt {\n+#[abi = \"cdecl\"]\n+native mod rustrt {\n     fn unsupervise();\n }\n \n-native \"cdecl\" mod bar = \"\" { }\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod bar { }\n \n-native \"cdecl\" mod zed = \"\" { }\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod zed { }\n \n-native \"cdecl\" mod libc = \"\" {\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod libc {\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n }\n \n-native \"cdecl\" mod baz = \"\" { }\n+#[abi = \"cdecl\"]\n+#[link_name = \"\"]\n+native mod baz { }\n \n fn main(args: [str]) { }"}, {"sha": "6c5093a1329964f4dc0b9de4c4b99a115d22ccd7", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f29aab27bf56bda4cf7062cb53af0be4b5c251/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=88f29aab27bf56bda4cf7062cb53af0be4b5c251", "patch": "@@ -5,7 +5,8 @@ type LPVOID = uint;\n type BOOL = u8;\n \n #[cfg(target_os = \"win32\")]\n-native \"stdcall\" mod kernel32 {\n+#[abi = \"stdcall\"]\n+native mod kernel32 {\n        fn GetProcessHeap() -> HANDLE;\n        fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n        fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;"}]}