{"sha": "e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MmVjMjMxNWU1YWRiMWMyOTFjMzcwMmNkMmFjMWY0NmVjZDBmY2Y=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-03T19:26:51Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-03T19:26:52Z"}, "message": "Use correct place for `enum_place`\n\nPR #69562, which fixed a bug that was causing clippy to ICE, passed the\nplace for the *result* of `Rvalue::Discriminant` instead of the\n*operand* to `apply_discriminant_switch_effect`. As a result, no effect\nwas applied at all, and we lost the perf benefits from marking\ninactive enum variants as uninitialized.", "tree": {"sha": "9d92f05fe6bf15126a7d6520637ef200071e5576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d92f05fe6bf15126a7d6520637ef200071e5576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf", "html_url": "https://github.com/rust-lang/rust/commit/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b135c739fb542d2c78e30f3e945ff3e528942190", "url": "https://api.github.com/repos/rust-lang/rust/commits/b135c739fb542d2c78e30f3e945ff3e528942190", "html_url": "https://github.com/rust-lang/rust/commit/b135c739fb542d2c78e30f3e945ff3e528942190"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "8d800f2d0ba055f9be87b0ac5f15bfb4a5898a22", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=e82ec2315e5adb1c291c3702cd2ac1f46ecd0fcf", "patch": "@@ -239,23 +239,26 @@ where\n             }\n \n             SwitchInt { ref targets, ref values, ref discr, .. } => {\n-                // If this is a switch on an enum discriminant, a custom effect may be applied\n-                // along each outgoing edge.\n-                if let Some(place) = discr.place() {\n-                    let enum_def = switch_on_enum_discriminant(self.tcx, self.body, bb_data, place);\n-                    if let Some(enum_def) = enum_def {\n+                let Engine { tcx, body, .. } = *self;\n+                let enum_ = discr\n+                    .place()\n+                    .and_then(|discr| switch_on_enum_discriminant(tcx, body, bb_data, discr));\n+                match enum_ {\n+                    // If this is a switch on an enum discriminant, a custom effect may be applied\n+                    // along each outgoing edge.\n+                    Some((enum_place, enum_def)) => {\n                         self.propagate_bits_into_enum_discriminant_switch_successors(\n-                            in_out, bb, enum_def, place, dirty_list, &*values, &*targets,\n+                            in_out, bb, enum_def, enum_place, dirty_list, &*values, &*targets,\n                         );\n-\n-                        return;\n                     }\n-                }\n \n-                // Otherwise, it's just a normal `SwitchInt`, and every successor sees the same\n-                // exit state.\n-                for target in targets.iter().copied() {\n-                    self.propagate_bits_into_entry_set_for(&in_out, target, dirty_list);\n+                    // Otherwise, it's just a normal `SwitchInt`, and every successor sees the same\n+                    // exit state.\n+                    None => {\n+                        for target in targets.iter().copied() {\n+                            self.propagate_bits_into_entry_set_for(&in_out, target, dirty_list);\n+                        }\n+                    }\n                 }\n             }\n \n@@ -342,22 +345,27 @@ where\n     }\n }\n \n-/// Look at the last statement of a block that ends with  to see if it is an assignment of an enum\n-/// discriminant to the local that determines the target of a `SwitchInt` like so:\n-///   _42 = discriminant(..)\n+/// Inspect a `SwitchInt`-terminated basic block to see if the condition of that `SwitchInt` is\n+/// an enum discriminant.\n+///\n+/// We expect such blocks to have a call to `discriminant` as their last statement like so:\n+///   _42 = discriminant(_1)\n ///   SwitchInt(_42, ..)\n+///\n+/// If the basic block matches this pattern, this function returns the place corresponding to the\n+/// enum (`_1` in the example above) as well as the `AdtDef` of that enum.\n fn switch_on_enum_discriminant(\n     tcx: TyCtxt<'tcx>,\n-    body: &mir::Body<'tcx>,\n-    block: &mir::BasicBlockData<'tcx>,\n+    body: &'mir mir::Body<'tcx>,\n+    block: &'mir mir::BasicBlockData<'tcx>,\n     switch_on: &mir::Place<'tcx>,\n-) -> Option<&'tcx ty::AdtDef> {\n+) -> Option<(&'mir mir::Place<'tcx>, &'tcx ty::AdtDef)> {\n     match block.statements.last().map(|stmt| &stmt.kind) {\n         Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(discriminated))))\n             if lhs == switch_on =>\n         {\n             match &discriminated.ty(body, tcx).ty.kind {\n-                ty::Adt(def, _) => Some(def),\n+                ty::Adt(def, _) => Some((discriminated, def)),\n \n                 // `Rvalue::Discriminant` is also used to get the active yield point for a\n                 // generator, but we do not need edge-specific effects in that case. This may"}]}