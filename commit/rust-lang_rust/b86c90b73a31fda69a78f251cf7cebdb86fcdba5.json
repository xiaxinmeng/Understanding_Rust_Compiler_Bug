{"sha": "b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NmM5MGI3M2EzMWZkYTY5YTc4ZjI1MWNmN2NlYmRiODZmY2RiYTU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-20T21:45:42Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-20T21:45:42Z"}, "message": "Merge pull request #4554 from thestinger/set\n\nadd a Set trait", "tree": {"sha": "c35e008c35f19992997a15707573c24d56c7832d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35e008c35f19992997a15707573c24d56c7832d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "html_url": "https://github.com/rust-lang/rust/commit/b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da555216d4780ebadd91295dd45b12ddfe9ad4f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/da555216d4780ebadd91295dd45b12ddfe9ad4f0", "html_url": "https://github.com/rust-lang/rust/commit/da555216d4780ebadd91295dd45b12ddfe9ad4f0"}, {"sha": "5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae", "html_url": "https://github.com/rust-lang/rust/commit/5320e132d1f60a7787f8290b7d8c7e16fcf9ccae"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "619622ceb95112d6381d03460b3ed78ce0eb5839", "filename": "src/libcore/container.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Container traits\n+\n+pub trait Set<T> {\n+    /// Return true if the set contains a value\n+    pure fn contains(&self, value: &T) -> bool;\n+\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool;\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool;\n+}"}, {"sha": "24623f20c80c1d5a2027729633cf0be4d2836478", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "patch": "@@ -122,6 +122,7 @@ pub mod to_bytes;\n pub mod clone;\n pub mod io;\n pub mod hash;\n+pub mod container;\n \n \n /* Common data structures */"}, {"sha": "5c7b0643d3dec535d918aa72c216028f949d6fb0", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -46,6 +46,8 @@ pub trait SendMap<K:Eq Hash, V: Copy> {\n \n /// Open addressing with linear probing.\n pub mod linear {\n+    use iter::BaseIter;\n+    use container::Set;\n     use cmp::Eq;\n     use cmp;\n     use hash::Hash;\n@@ -442,7 +444,7 @@ pub mod linear {\n         }\n     }\n \n-    impl<K:Hash IterBytes Eq, V: Eq> LinearMap<K, V>: cmp::Eq {\n+    impl<K:Hash IterBytes Eq, V: Eq> LinearMap<K, V>: Eq {\n         pure fn eq(&self, other: &LinearMap<K, V>) -> bool {\n             if self.len() != other.len() { return false; }\n \n@@ -460,6 +462,47 @@ pub mod linear {\n             !self.eq(other)\n         }\n     }\n+\n+    pub struct LinearSet<T: Hash IterBytes Eq> {\n+        priv map: LinearMap<T, ()>\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: BaseIter<T> {\n+        /// Visit all values in order\n+        pure fn each(&self, f: fn(&T) -> bool) { self.map.each_key(f) }\n+        pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: Eq {\n+        pure fn eq(&self, other: &LinearSet<T>) -> bool { self.map == other.map }\n+        pure fn ne(&self, other: &LinearSet<T>) -> bool { self.map != other.map }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T>: Set<T> {\n+        /// Return true if the set contains a value\n+        pure fn contains(&self, value: &T) -> bool {\n+            self.map.contains_key(value)\n+        }\n+\n+        /// Add a value to the set. Return true if the value was not already\n+        /// present in the set.\n+        fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n+\n+        /// Remove a value from the set. Return true if the value was\n+        /// present in the set.\n+        fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+    }\n+\n+    impl <T: Hash IterBytes Eq> LinearSet<T> {\n+        /// Create an empty LinearSet\n+        static fn new() -> LinearSet<T> { LinearSet{map: LinearMap()} }\n+\n+        /// Return the number of elements in the set\n+        pure fn len(&self) -> uint { self.map.len() }\n+\n+        /// Return true if the set contains no elements\n+        pure fn is_empty(&self) -> bool { self.map.is_empty() }\n+    }\n }\n \n #[test]"}, {"sha": "1b20b35bda1fbf7fe68612c021a42e7a47b62128", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86c90b73a31fda69a78f251cf7cebdb86fcdba5/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=b86c90b73a31fda69a78f251cf7cebdb86fcdba5", "patch": "@@ -14,6 +14,7 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::container::Set;\n use core::cmp::{Eq, Ord};\n use core::option::{Option, Some, None};\n use core::prelude::*;\n@@ -197,6 +198,21 @@ impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n+impl <T: Ord> TreeSet<T>: Set<T> {\n+    /// Return true if the set contains a value\n+    pure fn contains(&self, value: &T) -> bool {\n+        self.map.contains_key(value)\n+    }\n+\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+}\n+\n impl <T: Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n@@ -215,19 +231,6 @@ impl <T: Ord> TreeSet<T> {\n         self.map.each_key_reverse(f)\n     }\n \n-    /// Return true if the set contains a value\n-    pure fn contains(&self, value: &T) -> bool {\n-        self.map.contains_key(value)\n-    }\n-\n-    /// Add a value to the set. Return true if the value was not\n-    /// already present in the set.\n-    fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n-\n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n-    fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n-\n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n     pure fn iter(&self) -> TreeSetIterator/&self<T> {"}]}