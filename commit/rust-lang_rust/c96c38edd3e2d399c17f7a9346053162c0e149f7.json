{"sha": "c96c38edd3e2d399c17f7a9346053162c0e149f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NmMzOGVkZDNlMmQzOTljMTdmN2E5MzQ2MDUzMTYyYzBlMTQ5Zjc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T15:11:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T15:11:30Z"}, "message": "Simplify", "tree": {"sha": "b30bb04d16d593e83906546f4c793da79c87f1e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30bb04d16d593e83906546f4c793da79c87f1e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96c38edd3e2d399c17f7a9346053162c0e149f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96c38edd3e2d399c17f7a9346053162c0e149f7", "html_url": "https://github.com/rust-lang/rust/commit/c96c38edd3e2d399c17f7a9346053162c0e149f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96c38edd3e2d399c17f7a9346053162c0e149f7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2", "html_url": "https://github.com/rust-lang/rust/commit/3f1a220f32220cd4a664ca1adac5eb36e9eb33b2"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "870a8d4ffba92635603c78d4d677ab4e60c83760", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c96c38edd3e2d399c17f7a9346053162c0e149f7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96c38edd3e2d399c17f7a9346053162c0e149f7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=c96c38edd3e2d399c17f7a9346053162c0e149f7", "patch": "@@ -5,7 +5,6 @@ use itertools::Itertools;\n use syntax::{\n     ast::{self, make, AstNode, NameOwner},\n     SyntaxKind::{IDENT, WHITESPACE},\n-    TextSize,\n };\n \n use crate::{\n@@ -43,32 +42,23 @@ pub(crate) fn replace_derive_with_manual_impl(\n     ctx: &AssistContext,\n ) -> Option<()> {\n     let attr = ctx.find_node_at_offset::<ast::Attr>()?;\n-\n-    let has_derive = attr\n-        .syntax()\n-        .descendants_with_tokens()\n-        .filter(|t| t.kind() == IDENT)\n-        .find_map(syntax::NodeOrToken::into_token)\n-        .filter(|t| t.text() == \"derive\")\n-        .is_some();\n-    if !has_derive {\n+    let (name, args) = attr.as_simple_call()?;\n+    if name != \"derive\" {\n         return None;\n     }\n \n-    let trait_token = ctx.token_at_offset().find(|t| t.kind() == IDENT && t.text() != \"derive\")?;\n-    let trait_path = make::path_unqualified(make::path_segment(make::name_ref(trait_token.text())));\n+    let trait_token = args.syntax().token_at_offset(ctx.offset()).find(|t| t.kind() == IDENT)?;\n+    let trait_name = trait_token.text();\n \n     let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n-    let annotated_name = adt.name()?;\n-    let insert_pos = adt.syntax().text_range().end();\n \n-    let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n+    let current_module = ctx.sema.scope(adt.syntax()).module()?;\n     let current_crate = current_module.krate();\n \n     let found_traits = items_locator::items_with_name(\n         &ctx.sema,\n         current_crate,\n-        NameToImport::Exact(trait_token.text().to_string()),\n+        NameToImport::Exact(trait_name.to_string()),\n         items_locator::AssocItemSearch::Exclude,\n         Some(items_locator::DEFAULT_QUERY_SEARCH_LIMIT),\n     )\n@@ -86,10 +76,11 @@ pub(crate) fn replace_derive_with_manual_impl(\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {\n-        add_assist(acc, ctx, &attr, &trait_path, Some(trait_), &adt, &annotated_name, insert_pos)?;\n+        add_assist(acc, ctx, &attr, &args, &trait_path, Some(trait_), &adt)?;\n     }\n     if no_traits_found {\n-        add_assist(acc, ctx, &attr, &trait_path, None, &adt, &annotated_name, insert_pos)?;\n+        let trait_path = make::path_unqualified(make::path_segment(make::name_ref(trait_name)));\n+        add_assist(acc, ctx, &attr, &args, &trait_path, None, &adt)?;\n     }\n     Some(())\n }\n@@ -98,24 +89,24 @@ fn add_assist(\n     acc: &mut Assists,\n     ctx: &AssistContext,\n     attr: &ast::Attr,\n+    input: &ast::TokenTree,\n     trait_path: &ast::Path,\n     trait_: Option<hir::Trait>,\n     adt: &ast::Adt,\n-    annotated_name: &ast::Name,\n-    insert_pos: TextSize,\n ) -> Option<()> {\n     let target = attr.syntax().text_range();\n-    let input = attr.token_tree()?;\n-    let label = format!(\"Convert to manual  `impl {} for {}`\", trait_path, annotated_name);\n+    let annotated_name = adt.name()?;\n+    let label = format!(\"Convert to manual `impl {} for {}`\", trait_path, annotated_name);\n     let trait_name = trait_path.segment().and_then(|seg| seg.name_ref())?;\n \n     acc.add(\n         AssistId(\"replace_derive_with_manual_impl\", AssistKind::Refactor),\n         label,\n         target,\n         |builder| {\n+            let insert_pos = adt.syntax().text_range().end();\n             let impl_def_with_items =\n-                impl_def_from_trait(&ctx.sema, annotated_name, trait_, trait_path);\n+                impl_def_from_trait(&ctx.sema, &annotated_name, trait_, trait_path);\n             update_attribute(builder, &input, &trait_name, &attr);\n             let trait_path = format!(\"{}\", trait_path);\n             match (ctx.config.snippet_cap, impl_def_with_items) {"}]}