{"sha": "e47710540560b6a52e9305db5872de07a9e0d8a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzcxMDU0MDU2MGI2YTUyZTkzMDVkYjU4NzJkZTA3YTllMGQ4YTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T20:49:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T20:49:11Z"}, "message": "Auto merge of #80679 - jackh726:predicate-kind-take2, r=lcnr\n\nRemove PredicateKind and instead only use Binder<PredicateAtom>\n\nOriginally brought up in https://github.com/rust-lang/rust/pull/76814#discussion_r546858171\n\nr? `@lcnr`", "tree": {"sha": "943416475554f7df6b20763a9d9ecf0f99cc6e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/943416475554f7df6b20763a9d9ecf0f99cc6e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47710540560b6a52e9305db5872de07a9e0d8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47710540560b6a52e9305db5872de07a9e0d8a4", "html_url": "https://github.com/rust-lang/rust/commit/e47710540560b6a52e9305db5872de07a9e0d8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47710540560b6a52e9305db5872de07a9e0d8a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7449dc96c0dd44dc5b309f24346976fea086e35d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7449dc96c0dd44dc5b309f24346976fea086e35d", "html_url": "https://github.com/rust-lang/rust/commit/7449dc96c0dd44dc5b309f24346976fea086e35d"}, {"sha": "e73b8dcbcaefe225f1c627905d29e6060375a665", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73b8dcbcaefe225f1c627905d29e6060375a665", "html_url": "https://github.com/rust-lang/rust/commit/e73b8dcbcaefe225f1c627905d29e6060375a665"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "a3a38fad9a377534a7a6ad6f117d677466df4172", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n+use rustc_middle::ty::{Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                         &obligation,\n                                     );\n                                     if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n+                                        obligation.predicate.kind().skip_binder()\n                                     {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\","}, {"sha": "f7231bba17504b1e6d443b2e2bcee2ab65480ee4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -1697,7 +1697,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n-                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n+                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {\n                             return;"}, {"sha": "3b71f1b46e2ea1d815d0117df10f7611818555cb", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -115,13 +115,11 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                if let ty::PredicateKind::Atom(ty::PredicateAtom::Trait(pred, _)) = obligation.predicate.kind() {\n-                    if pred.def_id() == sized_trait {\n-                        return None;\n-                    }\n-                    Some(pred)\n-                } else {\n-                    None\n+                match obligation.predicate.kind().no_bound_vars() {\n+                    Some(ty::PredicateKind::Trait(pred, _)) if pred.def_id() != sized_trait => {\n+                        Some(pred)\n+                    },\n+                    _ => None,\n                 }\n             })\n             .collect::<Vec<_>>();"}, {"sha": "c6ae8b9b59837f608bdf9a531b19f6473d6abe0c", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_middle::ty::{GenericPredicates, PredicateAtom, ProjectionPredicate, TraitPredicate};\n+use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -42,7 +42,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateAtom::Trait(poly_trait_pred, _) = pred.skip_binders();\n+            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind().skip_binder();\n             let trait_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n@@ -60,7 +60,7 @@ fn get_projection_pred<'tcx>(\n     pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let ty::PredicateAtom::Projection(proj_pred) = proj_pred.skip_binders() {\n+        if let ty::PredicateKind::Projection(proj_pred) = proj_pred.kind().skip_binder() {\n             let projection_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(proj_pred));\n             if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n                 return Some(projection_pred);"}, {"sha": "4c707c4b90446ecbd804dd5c90b37b4e1118f2f7", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -1470,7 +1470,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n+                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.kind().skip_binder() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}, {"sha": "a482017afeb136339277386cd0f78be46d91c3cf", "filename": "clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47710540560b6a52e9305db5872de07a9e0d8a4/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=e47710540560b6a52e9305db5872de07a9e0d8a4", "patch": "@@ -19,18 +19,18 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>) -> McfResult {\n     loop {\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n-            match predicate.skip_binders() {\n-                ty::PredicateAtom::RegionOutlives(_)\n-                | ty::PredicateAtom::TypeOutlives(_)\n-                | ty::PredicateAtom::WellFormed(_)\n-                | ty::PredicateAtom::Projection(_)\n-                | ty::PredicateAtom::ConstEvaluatable(..)\n-                | ty::PredicateAtom::ConstEquate(..)\n-                | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateAtom::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n-                ty::PredicateAtom::Trait(pred, _) => {\n+            match predicate.kind().skip_binder() {\n+                ty::PredicateKind::RegionOutlives(_)\n+                | ty::PredicateKind::TypeOutlives(_)\n+                | ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::Projection(_)\n+                | ty::PredicateKind::ConstEvaluatable(..)\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n+                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::Trait(pred, _) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }"}]}