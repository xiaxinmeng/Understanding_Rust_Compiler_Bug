{"sha": "295ad30ef452de5331edb5e0ee6f666f632758c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWFkMzBlZjQ1MmRlNTMzMWVkYjVlMGVlNmY2NjZmNjMyNzU4YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T23:02:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T23:02:17Z"}, "message": "Auto merge of #53745 - nikomatsakis:nll-issue-53570, r=pnkfelix\n\ndo not propagate closure requirements if we can prove them locally\n\nFixes #53570\n\ncc @mikhail-m1 -- you're the one who last touched this code\n\nr? @pnkfelix", "tree": {"sha": "bea126ae6fd71aa59cb907ee6d7740bb1f97c1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea126ae6fd71aa59cb907ee6d7740bb1f97c1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295ad30ef452de5331edb5e0ee6f666f632758c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295ad30ef452de5331edb5e0ee6f666f632758c4", "html_url": "https://github.com/rust-lang/rust/commit/295ad30ef452de5331edb5e0ee6f666f632758c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295ad30ef452de5331edb5e0ee6f666f632758c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "html_url": "https://github.com/rust-lang/rust/commit/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a"}, {"sha": "bb8c4c0db9257d1deccd4b31470724ac23e765e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c4c0db9257d1deccd4b31470724ac23e765e7", "html_url": "https://github.com/rust-lang/rust/commit/bb8c4c0db9257d1deccd4b31470724ac23e765e7"}], "stats": {"total": 258, "additions": 178, "deletions": 80}, "files": [{"sha": "7cab0acb4326a6068b87d27cc3f8dff4560a432a", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -276,7 +276,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n     infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     mir_def_id: DefId,\n-    regioncx: &RegionInferenceContext,\n+    regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements>,\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n@@ -299,7 +299,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n             .diagnostic()\n             .span_note_diag(mir.span, \"External requirements\");\n \n-        regioncx.annotate(&mut err);\n+        regioncx.annotate(tcx, &mut err);\n \n         err.note(&format!(\n             \"number of external vids: {}\",\n@@ -319,7 +319,7 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n             .sess\n             .diagnostic()\n             .span_note_diag(mir.span, \"No external requirements\");\n-        regioncx.annotate(&mut err);\n+        regioncx.annotate(tcx, &mut err);\n \n         err.buffer(errors_buffer);\n     }"}, {"sha": "7cde06be0c23b416ac40d5994249de23d253d986", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! As part of the NLL unit tests, you can annotate a function with\n-//! `#[rustc_regions]`, and we will emit information about the region\n-//! inference context and -- in particular -- the external constraints\n-//! that this region imposes on others. The methods in this file\n-//! handle the part about dumping the inference context internal\n-//! state.\n-\n-use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::universal_regions::DefiningTy;\n-use rustc_errors::DiagnosticBuilder;\n-\n-impl<'tcx> RegionInferenceContext<'tcx> {\n-    /// Write out our state into the `.mir` files.\n-    pub(crate) fn annotate(&self, err: &mut DiagnosticBuilder<'_>) {\n-        match self.universal_regions.defining_ty {\n-            DefiningTy::Closure(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with closure substs {:#?}\",\n-                    def_id,\n-                    &substs.substs[..]\n-                ));\n-            }\n-            DefiningTy::Generator(def_id, substs, _) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with generator substs {:#?}\",\n-                    def_id,\n-                    &substs.substs[..]\n-                ));\n-            }\n-            DefiningTy::FnDef(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n-                ));\n-            }\n-            DefiningTy::Const(def_id, substs) => {\n-                err.note(&format!(\n-                    \"defining constant type: {:?} with substs {:#?}\",\n-                    def_id,\n-                    &substs[..]\n-                ));\n-            }\n-        }\n-    }\n-}"}, {"sha": "cb15c88bb3e6fa3b878052935fbee39a5f5a7634", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -29,11 +29,10 @@ use rustc::util::common;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_errors::Diagnostic;\n+use rustc_errors::{DiagnosticBuilder, Diagnostic};\n \n use std::rc::Rc;\n \n-mod annotation;\n mod dump_mir;\n mod error_reporting;\n mod graphviz;\n@@ -359,6 +358,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.universal_regions.to_region_vid(r)\n     }\n \n+    /// Add annotations for `#[rustc_regions]`; see `UniversalRegions::annotate`.\n+    crate fn annotate(&self, tcx: TyCtxt<'_, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+        self.universal_regions.annotate(tcx, err)\n+    }\n+\n     /// Returns true if the region `r` contains the point `p`.\n     ///\n     /// Panics if called before `solve()` executes,\n@@ -686,7 +690,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             test: _,\n         } = type_test;\n \n-\n         let generic_ty = generic_kind.to_ty(tcx);\n         let subject = match self.try_promote_type_test_subject(infcx, generic_ty) {\n             Some(s) => s,\n@@ -698,20 +701,38 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // `ClosureOutlivesRequirement`.\n         let r_scc = self.constraint_sccs.scc(*lower_bound);\n         for ur in self.scc_values.universal_regions_outlived_by(r_scc) {\n+            // Check whether we can already prove that the \"subject\" outlives `ur`.\n+            // If so, we don't have to propagate this requirement to our caller.\n+            //\n+            // To continue the example from the function, if we are trying to promote\n+            // a requirement that `T: 'X`, and we know that `'X = '1 + '2` (i.e., the union\n+            // `'1` and `'2`), then in this loop `ur` will be `'1` (and `'2`). So here\n+            // we check whether `T: '1` is something we *can* prove. If so, no need\n+            // to propagate that requirement.\n+            //\n+            // This is needed because -- particularly in the case\n+            // where `ur` is a local bound -- we are sometimes in a\n+            // position to prove things that our caller cannot.  See\n+            // #53570 for an example.\n+            if self.eval_region_test(mir, ur, &type_test.test) {\n+                continue;\n+            }\n+\n+            debug!(\"try_promote_type_test: ur={:?}\", ur);\n+\n             let non_local_ub = self.universal_region_relations.non_local_upper_bound(ur);\n+            debug!(\"try_promote_type_test: non_local_ub={:?}\", non_local_ub);\n \n             assert!(self.universal_regions.is_universal_region(non_local_ub));\n-            assert!(\n-                !self\n-                .universal_regions\n-                .is_local_free_region(non_local_ub)\n-            );\n+            assert!(!self.universal_regions.is_local_free_region(non_local_ub));\n \n-            propagated_outlives_requirements.push(ClosureOutlivesRequirement {\n+            let requirement = ClosureOutlivesRequirement {\n                 subject,\n                 outlived_free_region: non_local_ub,\n                 blame_span: locations.span(mir),\n-            });\n+            };\n+            debug!(\"try_promote_type_test: pushing {:#?}\", requirement);\n+            propagated_outlives_requirements.push(requirement);\n         }\n         true\n     }\n@@ -917,8 +938,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // now). Therefore, the sup-region outlives the sub-region if,\n         // for each universal region R1 in the sub-region, there\n         // exists some region R2 in the sup-region that outlives R1.\n-        let universal_outlives = self\n-            .scc_values\n+        let universal_outlives = self.scc_values\n             .universal_regions_outlived_by(sub_region_scc)\n             .all(|r1| {\n                 self.scc_values\n@@ -1029,8 +1049,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // (because `fr` includes `end(o)`).\n         for shorter_fr in self.scc_values.universal_regions_outlived_by(longer_fr_scc) {\n             // If it is known that `fr: o`, carry on.\n-            if self\n-                .universal_region_relations\n+            if self.universal_region_relations\n                 .outlives(longer_fr, shorter_fr)\n             {\n                 continue;\n@@ -1046,8 +1065,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n                 // We'll call that `fr-` -- it's ever so slightly smaller than `fr`.\n-                if let Some(fr_minus) = self\n-                    .universal_region_relations\n+                if let Some(fr_minus) = self.universal_region_relations\n                     .non_local_lower_bound(longer_fr)\n                 {\n                     debug!(\"check_universal_region: fr_minus={:?}\", fr_minus);\n@@ -1056,8 +1074,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     // region. (We always will.)  We'll call that\n                     // `shorter_fr+` -- it's ever so slightly larger than\n                     // `fr`.\n-                    let shorter_fr_plus = self\n-                        .universal_region_relations\n+                    let shorter_fr_plus = self.universal_region_relations\n                         .non_local_upper_bound(shorter_fr);\n                     debug!(\n                         \"check_universal_region: shorter_fr_plus={:?}\",\n@@ -1117,8 +1134,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let error_region = match error_element {\n             RegionElement::Location(l) => self.find_sub_region_live_at(longer_fr, l),\n             RegionElement::RootUniversalRegion(r) => r,\n-            RegionElement::SubUniversalRegion(error_ui) => self\n-                .definitions\n+            RegionElement::SubUniversalRegion(error_ui) => self.definitions\n                 .iter_enumerated()\n                 .filter_map(|(r, definition)| match definition.origin {\n                     NLLRegionVariableOrigin::BoundRegion(ui) if error_ui == ui => Some(r),\n@@ -1215,7 +1231,11 @@ impl<'gcx, 'tcx> ClosureRegionRequirementsExt<'gcx, 'tcx> for ClosureRegionRequi\n         // into a vector.  These are the regions that we will be\n         // relating to one another.\n         let closure_mapping = &UniversalRegions::closure_mapping(\n-            tcx, user_closure_ty, self.num_external_vids, tcx.closure_base_def_id(closure_def_id));\n+            tcx,\n+            user_closure_ty,\n+            self.num_external_vids,\n+            tcx.closure_base_def_id(closure_def_id),\n+        );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n \n         // Create the predicates."}, {"sha": "eb6f1a0677b2c6f02045d1e377e7c4d83308eeaa", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -31,6 +31,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use rustc_errors::DiagnosticBuilder;\n use std::iter;\n use syntax::ast;\n \n@@ -310,6 +311,69 @@ impl<'tcx> UniversalRegions<'tcx> {\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         self.indices.to_region_vid(r)\n     }\n+\n+    /// As part of the NLL unit tests, you can annotate a function with\n+    /// `#[rustc_regions]`, and we will emit information about the region\n+    /// inference context and -- in particular -- the external constraints\n+    /// that this region imposes on others. The methods in this file\n+    /// handle the part about dumping the inference context internal\n+    /// state.\n+    crate fn annotate(&self, tcx: TyCtxt<'_, '_, 'tcx>, err: &mut DiagnosticBuilder<'_>) {\n+        match self.defining_ty {\n+            DefiningTy::Closure(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with closure substs {:#?}\",\n+                    def_id,\n+                    &substs.substs[..]\n+                ));\n+\n+                // FIXME: It'd be nice to print the late-bound regions\n+                // here, but unfortunately these wind up stored into\n+                // tests, and the resulting print-outs include def-ids\n+                // and other things that are not stable across tests!\n+                // So we just include the region-vid. Annoying.\n+                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                    err.note(&format!(\n+                        \"late-bound region is {:?}\",\n+                        self.to_region_vid(r),\n+                    ));\n+                });\n+            }\n+            DefiningTy::Generator(def_id, substs, _) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with generator substs {:#?}\",\n+                    def_id,\n+                    &substs.substs[..]\n+                ));\n+\n+                // FIXME: As above, we'd like to print out the region\n+                // `r` but doing so is not stable across architectures\n+                // and so forth.\n+                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                    err.note(&format!(\n+                        \"late-bound region is {:?}\",\n+                        self.to_region_vid(r),\n+                    ));\n+                });\n+            }\n+            DefiningTy::FnDef(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n+                ));\n+            }\n+            DefiningTy::Const(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining constant type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n+                ));\n+            }\n+        }\n+    }\n }\n \n struct UniversalRegionsBuilder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {"}, {"sha": "fa14d496a14419c8e1d221da57f48bb30f5e1526", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -12,6 +12,9 @@ LL | |         },\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region is '_#4r\n+   = note: late-bound region is '_#5r\n+   = note: late-bound region is '_#6r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:56:13"}, {"sha": "1af96b97e73bd755db1ae7a595fc69fc51595712", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region is '_#3r\n+   = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n "}, {"sha": "9de9e21ba43d289b6dab089093ccd93a10f187ec", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -15,6 +15,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n            ]\n+   = note: late-bound region is '_#2r\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n "}, {"sha": "6acb6750055403f342b34e237ca62463869cfaa7", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region is '_#3r\n+   = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n "}, {"sha": "e0902ca1ddbe8bbec3c2e3116a1157d4321b86fa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -14,6 +14,8 @@ LL | |     });\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region is '_#3r\n+   = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n "}, {"sha": "a3f78507d8d0c0bc700defe1d4a475eb25cece2d", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -12,6 +12,7 @@ LL | |         },\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n "}, {"sha": "31cad6ba1b570f23a581a1e44b8e0c53c263f9b2", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -13,6 +13,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n+   = note: late-bound region is '_#2r\n+   = note: late-bound region is '_#3r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9"}, {"sha": "4e21816e8c0c4ff6fccbde302af96ca1c5293a1d", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -13,6 +13,8 @@ LL | |     });\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n+   = note: late-bound region is '_#3r\n+   = note: late-bound region is '_#4r\n \n error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9"}, {"sha": "9617e40ec39d97232eca3503a5954e5dc8046214", "filename": "src/test/ui/nll/issue-53570.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #53570. Here, we need to propagate that `T: 'a`\n+// but in some versions of NLL we were propagating a stronger\n+// requirement that `T: 'static`. This arose because we actually had\n+// to propagate both that `T: 'a` but also `T: 'b` where `'b` is the\n+// higher-ranked lifetime that appears in the type of the closure\n+// parameter `x` -- since `'b` cannot be expressed in the caller's\n+// space, that got promoted th `'static`.\n+//\n+// compile-pass\n+\n+#![feature(nll)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+use std::cell::{RefCell, Ref};\n+\n+trait AnyVec<'a> {\n+}\n+\n+trait GenericVec<T> {\n+    fn unwrap<'a, 'b>(vec: &'b AnyVec<'a>) -> &'b [T] where T: 'a;\n+}\n+\n+struct Scratchpad<'a> {\n+    buffers: RefCell<Box<AnyVec<'a>>>,\n+}\n+\n+impl<'a> Scratchpad<'a> {\n+    fn get<T: GenericVec<T>>(&self) -> Ref<[T]>\n+    where T: 'a\n+    {\n+        Ref::map(self.buffers.borrow(), |x| T::unwrap(x.as_ref()))\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "a91761f3ece2fa12686f8086210bdf7d7e6ba44d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -10,6 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r"}, {"sha": "0064393f271ca39ebf66c1045313e88ba61af743", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -10,6 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n "}, {"sha": "3f8ed324f564a6f21f7447adad744fb75b4a139d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -10,6 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region is '_#3r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:42:1"}, {"sha": "19dcb5f93dac3763e65e578a024a37663223c905", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -11,6 +11,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n+   = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n@@ -212,6 +213,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n "}, {"sha": "106eaa6a3abe940ce871234cdd8448e540d92492", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -36,6 +36,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n+   = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n "}, {"sha": "f0e86a580b20af3a3466411dfdcf6db50662fb5b", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/295ad30ef452de5331edb5e0ee6f666f632758c4/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=295ad30ef452de5331edb5e0ee6f666f632758c4", "patch": "@@ -16,6 +16,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T))\n            ]\n+   = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n@@ -106,6 +107,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n+   = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n    = note: where T: '_#2r\n "}]}