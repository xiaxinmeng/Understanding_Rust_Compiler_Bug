{"sha": "81e791d7b981bfb815d99832d657d48850e8e0aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTc5MWQ3Yjk4MWJmYjgxNWQ5OTgzMmQ2NTdkNDg4NTBlOGUwYWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T00:43:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T00:43:46Z"}, "message": "Add a tag cache for the cases we can't avoid hitting fold; cut rustc compile time by 50%.", "tree": {"sha": "2b4b7e7bf39938f1d34ec31915862e76deeb4c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4b7e7bf39938f1d34ec31915862e76deeb4c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e791d7b981bfb815d99832d657d48850e8e0aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e791d7b981bfb815d99832d657d48850e8e0aa", "html_url": "https://github.com/rust-lang/rust/commit/81e791d7b981bfb815d99832d657d48850e8e0aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e791d7b981bfb815d99832d657d48850e8e0aa/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a6b0935bad25833d2b48352a3f4212c26c9898", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a6b0935bad25833d2b48352a3f4212c26c9898", "html_url": "https://github.com/rust-lang/rust/commit/97a6b0935bad25833d2b48352a3f4212c26c9898"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "3f44872eadf0771d88483884c32c1620cb3ec676", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81e791d7b981bfb815d99832d657d48850e8e0aa/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/81e791d7b981bfb815d99832d657d48850e8e0aa/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=81e791d7b981bfb815d99832d657d48850e8e0aa", "patch": "@@ -869,7 +869,9 @@ let process_crate\n                     (Hashtbl.find cx.ctxt_all_item_names n)\n             end\n             cx.ctxt_node_referenced;\n-      end\n+      end;\n+    (* Post-resolve, we can establish a tag cache. *)\n+    cx.ctxt_tag_cache <- Some (Hashtbl.create 0);\n ;;\n \n (*"}, {"sha": "1e2d11a4c06347da008a58105afe8434d367b514", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81e791d7b981bfb815d99832d657d48850e8e0aa/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/81e791d7b981bfb815d99832d657d48850e8e0aa/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=81e791d7b981bfb815d99832d657d48850e8e0aa", "patch": "@@ -194,6 +194,9 @@ type ctxt =\n       ctxt_type_is_structured_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_type_contains_chan_cache: (Ast.ty,bool) Hashtbl.t;\n       ctxt_n_used_type_parameters_cache: (Ast.ty,int) Hashtbl.t;\n+      mutable ctxt_tag_cache:\n+        ((Ast.ty_tag option * Ast.ty_tag * int,\n+          Ast.ty_tup) Hashtbl.t) option;\n     }\n ;;\n \n@@ -290,6 +293,7 @@ let new_ctxt sess abi crate =\n     ctxt_type_is_structured_cache = Hashtbl.create 0;\n     ctxt_type_contains_chan_cache = Hashtbl.create 0;\n     ctxt_n_used_type_parameters_cache = Hashtbl.create 0;\n+    ctxt_tag_cache = None;\n   }\n ;;\n \n@@ -797,13 +801,18 @@ let get_nth_tag_tup_full\n     (ttag:Ast.ty_tag)\n     (i:int)\n     : Ast.ty_tup =\n-  let tinfo = Hashtbl.find cx.ctxt_all_tag_info ttag.Ast.tag_id in\n-  let (_, node_id, ttup) = Hashtbl.find tinfo.tag_nums i in\n-  let ctor = get_item cx node_id in\n-  let params = Array.map (fun p -> p.node) ctor.Ast.decl_params in\n-    Array.map\n-      (fun ty -> rebuilder src_tag ty params ttag.Ast.tag_args)\n-      ttup\n+  let calculate _ =\n+    let tinfo = Hashtbl.find cx.ctxt_all_tag_info ttag.Ast.tag_id in\n+    let (_, node_id, ttup) = Hashtbl.find tinfo.tag_nums i in\n+    let ctor = get_item cx node_id in\n+    let params = Array.map (fun p -> p.node) ctor.Ast.decl_params in\n+      Array.map\n+        (fun ty -> rebuilder src_tag ty params ttag.Ast.tag_args)\n+        ttup\n+  in\n+    match cx.ctxt_tag_cache with\n+        None -> calculate()\n+      | Some cache -> htab_search_or_add cache (src_tag,ttag,i) calculate\n ;;\n \n let rec fold_ty_full"}]}