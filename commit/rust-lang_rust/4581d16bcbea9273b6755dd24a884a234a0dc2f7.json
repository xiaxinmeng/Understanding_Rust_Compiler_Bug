{"sha": "4581d16bcbea9273b6755dd24a884a234a0dc2f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODFkMTZiY2JlYTkyNzNiNjc1NWRkMjRhODg0YTIzNGEwZGMyZjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-19T19:40:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:58Z"}, "message": "Move the query system to rustc_query_impl.", "tree": {"sha": "97f40bc48c86c2d766202a526774cb54647327fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97f40bc48c86c2d766202a526774cb54647327fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4581d16bcbea9273b6755dd24a884a234a0dc2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4581d16bcbea9273b6755dd24a884a234a0dc2f7", "html_url": "https://github.com/rust-lang/rust/commit/4581d16bcbea9273b6755dd24a884a234a0dc2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4581d16bcbea9273b6755dd24a884a234a0dc2f7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f749a683731421c31591ea09f2623ef498c47a", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f749a683731421c31591ea09f2623ef498c47a", "html_url": "https://github.com/rust-lang/rust/commit/71f749a683731421c31591ea09f2623ef498c47a"}], "stats": {"total": 253, "additions": 170, "deletions": 83}, "files": [{"sha": "0576a55a4472ea3b544a98793d65d68bf61f7d5d", "filename": "Cargo.lock", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -3901,6 +3901,7 @@ dependencies = [\n  \"rustc_passes\",\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n+ \"rustc_query_impl\",\n  \"rustc_resolve\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n@@ -4167,6 +4168,29 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_query_impl\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"measureme\",\n+ \"rustc-rayon-core\",\n+ \"rustc_ast\",\n+ \"rustc_attr\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_macros\",\n+ \"rustc_middle\",\n+ \"rustc_query_system\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_query_system\"\n version = \"0.0.0\""}, {"sha": "cfe98a630c1beb8dcb460c898768562753d371c8", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -41,6 +41,7 @@ rustc_lint = { path = \"../rustc_lint\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_plugin_impl = { path = \"../rustc_plugin_impl\" }\n rustc_privacy = { path = \"../rustc_privacy\" }\n+rustc_query_impl = { path = \"../rustc_query_impl\" }\n rustc_resolve = { path = \"../rustc_resolve\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }"}, {"sha": "6358855ac322e2ae68d0f615b8376937e3c7016f", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -21,14 +21,14 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc_middle::ty::query;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n+use rustc_query_impl::Queries as TcxQueries;\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType, PpMode, PpSourceMode};\n use rustc_session::lint;\n@@ -762,7 +762,7 @@ pub fn create_global_ctxt<'tcx>(\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n-    queries: &'tcx OnceCell<query::Queries<'tcx>>,\n+    queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n@@ -791,7 +791,7 @@ pub fn create_global_ctxt<'tcx>(\n         let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n         providers[LOCAL_CRATE] = local_providers;\n-        queries.get_or_init(|| query::Queries::new(providers, extern_providers))\n+        queries.get_or_init(|| TcxQueries::new(providers, extern_providers))\n     };\n \n     let gcx = sess.time(\"setup_global_ctxt\", || {\n@@ -805,7 +805,7 @@ pub fn create_global_ctxt<'tcx>(\n                 defs,\n                 dep_graph,\n                 query_result_on_disk_cache,\n-                queries,\n+                queries.as_dyn(),\n                 &crate_name,\n                 &outputs,\n             )"}, {"sha": "9c38d2b91ab31b5569d89af76849ebb448e733e4", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -13,8 +13,8 @@ use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::query;\n use rustc_middle::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc_query_impl::Queries as TcxQueries;\n use rustc_serialize::json;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n@@ -72,7 +72,7 @@ impl<T> Default for Query<T> {\n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n     gcx: OnceCell<GlobalCtxt<'tcx>>,\n-    queries: OnceCell<query::Queries<'tcx>>,\n+    queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n     hir_arena: WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n@@ -429,11 +429,11 @@ impl Compiler {\n             {\n                 let _prof_timer =\n                     queries.session().prof.generic_activity(\"self_profile_alloc_query_strings\");\n-                gcx.enter(query::alloc_self_profile_query_strings);\n+                gcx.enter(rustc_query_impl::alloc_self_profile_query_strings);\n             }\n \n             if self.session().opts.debugging_opts.query_stats {\n-                gcx.enter(query::print_stats);\n+                gcx.enter(rustc_query_impl::print_stats);\n             }\n         }\n "}, {"sha": "3e67525567f97a7a2dff52053fd1825b9f57a5d5", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -495,6 +495,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     }\n \n     TokenStream::from(quote! {\n+        #[macro_export]\n         macro_rules! rustc_query_append {\n             ([$($macro:tt)*][$($other:tt)*]) => {\n                 $($macro)* {\n@@ -514,11 +515,13 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 );\n             }\n         }\n+        #[macro_export]\n         macro_rules! rustc_cached_queries {\n             ($($macro:tt)*) => {\n                 $($macro)*(#cached_queries);\n             }\n         }\n+        #[macro_export]\n         macro_rules! rustc_query_description {\n             () => { #query_description_stream }\n         }"}, {"sha": "d316d595b1a44345d3a03240fbd0c07b2744979c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -966,7 +966,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// Do not access this directly. It is only meant to be used by\n     /// `DepGraph::try_mark_green()` and the query infrastructure.\n     /// This is `None` if we are not incremental compilation mode\n-    pub(crate) on_disk_cache: Option<OnDiskCache<'tcx>>,\n+    pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n \n     pub queries: &'tcx dyn query::QueryEngine<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,"}, {"sha": "018d269bfd1de3bbee5be7d51bd875415198615f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -100,8 +100,6 @@ pub use self::list::List;\n \n pub use self::trait_def::TraitDef;\n \n-pub use self::query::queries;\n-\n pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt};\n \n pub mod _match;"}, {"sha": "0bc14f1e27c0d9cda7b5877df69246762fa8b7c3", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -31,13 +31,12 @@ use crate::traits::{self, ImplSource};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Diagnostic, ErrorReported, Handler, Level};\n+use rustc_errors::{ErrorReported, Handler};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n@@ -59,34 +58,12 @@ use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;\n \n-#[macro_use]\n-mod plumbing;\n-pub use plumbing::QueryCtxt;\n-use plumbing::QueryStruct;\n-pub(crate) use rustc_query_system::query::CycleError;\n+pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n \n-mod stats;\n-pub use self::stats::print_stats;\n-\n-pub use rustc_query_system::query::{QueryInfo, QueryJob, QueryJobId};\n-\n-mod keys;\n-use self::keys::Key;\n-\n-mod values;\n-use self::values::Value;\n-\n-use rustc_query_system::query::QueryAccessors;\n-pub use rustc_query_system::query::QueryConfig;\n-pub(crate) use rustc_query_system::query::QueryDescription;\n-\n-mod on_disk_cache;\n+pub mod on_disk_cache;\n pub use self::on_disk_cache::OnDiskCache;\n \n-mod profiling_support;\n-pub use self::profiling_support::alloc_self_profile_query_strings;\n-\n #[derive(Copy, Clone)]\n pub struct TyCtxtAt<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n@@ -131,6 +108,18 @@ macro_rules! query_helper_param_ty {\n     ($K:ty) => { $K };\n }\n \n+macro_rules! query_storage {\n+    ([][$K:ty, $V:ty]) => {\n+        <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n+    };\n+    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+        <$ty as CacheSelector<$K, $V>>::Cache\n+    };\n+    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n+        query_storage!([$($($modifiers)*)*][$($args)*])\n+    };\n+}\n+\n macro_rules! define_callbacks {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -169,7 +158,7 @@ macro_rules! define_callbacks {\n \n         #[derive(Default)]\n         pub struct QueryCaches<$tcx> {\n-            $($(#[$attr])* $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n+            $($(#[$attr])* pub $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n         }\n \n         impl TyCtxtEnsure<$tcx> {\n@@ -288,7 +277,6 @@ macro_rules! define_callbacks {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { [define_queries!][<'tcx>] }\n rustc_query_append! { [define_callbacks!][<'tcx>] }\n \n mod sealed {"}, {"sha": "d0cd8a48f99b31255fa677f96ab930be941186fc", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -502,7 +502,7 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n-    crate fn try_load_query_result<'tcx, T>(\n+    pub fn try_load_query_result<'tcx, T>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         dep_node_index: SerializedDepNodeIndex,\n@@ -665,7 +665,7 @@ impl<'sess> OnDiskCache<'sess> {\n /// A decoder that can read from the incremental compilation cache. It is similar to the one\n /// we use for crate metadata decoding in that it can rebase spans and eventually\n /// will also handle things that contain `Ty` instances.\n-crate struct CacheDecoder<'a, 'tcx> {\n+pub struct CacheDecoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     opaque: opaque::Decoder<'a>,\n     source_map: &'a SourceMap,"}, {"sha": "c88b766a55a3eef22589bdf61bf13126dbf907f9", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -0,0 +1,27 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_query_impl\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+measureme = \"9.0.0\"\n+rustc-rayon-core = \"0.3.0\"\n+tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_attr = { path = \"../rustc_attr\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_feature = { path = \"../rustc_feature\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n+rustc_span = { path = \"../rustc_span\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }"}, {"sha": "8ec07b9fdeb7844820f565350d72f2b102ea6496", "filename": "compiler/rustc_query_impl/src/README.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2FREADME.md?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "previous_filename": "compiler/rustc_middle/src/ty/query/README.md"}, {"sha": "1ae5bf12cabac1b325f1271685819683c35adc9a", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -1,11 +1,11 @@\n //! Defines the set of legal keys that can be used in queries.\n \n-use crate::infer::canonical::Canonical;\n-use crate::mir;\n-use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_middle::infer::canonical::Canonical;\n+use rustc_middle::mir;\n+use rustc_middle::ty::fast_reject::SimplifiedType;\n+use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n ", "previous_filename": "compiler/rustc_middle/src/ty/query/keys.rs"}, {"sha": "43dfe6892b1a9f6c946738eb97490b779ea76bf1", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -0,0 +1,65 @@\n+//! Support for serializing the dep-graph and reloading it.\n+\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(in_band_lifetimes)]\n+#![feature(exhaustive_patterns)]\n+#![feature(nll)]\n+#![feature(min_specialization)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(once_cell)]\n+#![feature(rustc_attrs)]\n+#![feature(never_type)]\n+#![recursion_limit = \"256\"]\n+\n+#[macro_use]\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate tracing;\n+\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_errors::{Diagnostic, Handler, Level};\n+use rustc_hir::def_id::CrateNum;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::dep_graph;\n+use rustc_middle::ich::StableHashingContext;\n+use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n+use rustc_middle::ty::query::{Providers, QueryEngine};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_serialize::opaque;\n+use rustc_span::{Span, DUMMY_SP};\n+use std::mem;\n+\n+#[macro_use]\n+mod plumbing;\n+pub use plumbing::QueryCtxt;\n+use plumbing::QueryStruct;\n+use rustc_query_system::query::*;\n+\n+mod stats;\n+pub use self::stats::print_stats;\n+\n+mod keys;\n+use keys::Key;\n+\n+mod values;\n+use self::values::Value;\n+\n+use rustc_query_system::query::QueryAccessors;\n+pub use rustc_query_system::query::QueryConfig;\n+pub(crate) use rustc_query_system::query::QueryDescription;\n+\n+use rustc_middle::ty::query::on_disk_cache;\n+\n+mod profiling_support;\n+pub use self::profiling_support::alloc_self_profile_query_strings;\n+\n+rustc_query_append! { [define_queries!][<'tcx>] }\n+\n+impl<'tcx> Queries<'tcx> {\n+    // Force codegen in the dyn-trait transformation in this crate.\n+    pub fn as_dyn(&'tcx self) -> &'tcx dyn QueryEngine<'tcx> {\n+        self\n+    }\n+}"}, {"sha": "466c1f79f48c0e9b88bd161acba2648ba5ed7a53", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "renamed", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -2,10 +2,11 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepKind, DepNode, DepNodeExt, DepNodeIndex, SerializedDepNodeIndex};\n-use crate::ty::query::{on_disk_cache, queries, Query};\n-use crate::ty::tls::{self, ImplicitCtxt};\n-use crate::ty::{self, TyCtxt};\n+use super::{queries, Query};\n+use rustc_middle::dep_graph::{DepKind, DepNode, DepNodeExt, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::ty::query::on_disk_cache;\n+use rustc_middle::ty::tls::{self, ImplicitCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n use rustc_query_system::query::{CycleError, QueryJobId, QueryJobInfo};\n use rustc_query_system::query::{QueryContext, QueryDescription};\n@@ -33,8 +34,8 @@ impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n }\n \n impl HasDepContext for QueryCtxt<'tcx> {\n-    type DepKind = crate::dep_graph::DepKind;\n-    type StableHashingContext = crate::ich::StableHashingContext<'tcx>;\n+    type DepKind = rustc_middle::dep_graph::DepKind;\n+    type StableHashingContext = rustc_middle::ich::StableHashingContext<'tcx>;\n     type DepContext = TyCtxt<'tcx>;\n \n     #[inline]\n@@ -251,7 +252,7 @@ impl<'tcx> QueryCtxt<'tcx> {\n         macro_rules! encode_queries {\n             ($($query:ident,)*) => {\n                 $(\n-                    on_disk_cache::encode_query_results::<_, ty::query::queries::$query<'_>>(\n+                    on_disk_cache::encode_query_results::<_, super::queries::$query<'_>>(\n                         self,\n                         encoder,\n                         query_result_index\n@@ -363,18 +364,6 @@ macro_rules! is_eval_always {\n     };\n }\n \n-macro_rules! query_storage {\n-    ([][$K:ty, $V:ty]) => {\n-        <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n-    };\n-    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n-        <$ty as CacheSelector<$K, $V>>::Cache\n-    };\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        query_storage!([$($($modifiers)*)*][$($args)*])\n-    };\n-}\n-\n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n@@ -392,13 +381,6 @@ macro_rules! define_queries {\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n-        use std::mem;\n-        use crate::{\n-            rustc_data_structures::stable_hasher::HashStable,\n-            rustc_data_structures::stable_hasher::StableHasher,\n-            ich::StableHashingContext\n-        };\n-\n         define_queries_struct! {\n             tcx: $tcx,\n             input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n@@ -407,7 +389,7 @@ macro_rules! define_queries {\n         #[allow(nonstandard_style)]\n         #[derive(Clone, Debug)]\n         pub enum Query<$tcx> {\n-            $($(#[$attr])* $name($($K)*)),*\n+            $($(#[$attr])* $name(query_keys::$name<$tcx>)),*\n         }\n \n         impl<$tcx> Query<$tcx> {\n@@ -465,8 +447,8 @@ macro_rules! define_queries {\n         }\n \n         $(impl<$tcx> QueryConfig for queries::$name<$tcx> {\n-            type Key = $($K)*;\n-            type Value = $V;\n+            type Key = query_keys::$name<$tcx>;\n+            type Value = query_values::$name<$tcx>;\n             type Stored = query_stored::$name<$tcx>;\n             const NAME: &'static str = stringify!($name);\n         }\n@@ -520,8 +502,8 @@ macro_rules! define_queries {\n         #[allow(non_upper_case_globals)]\n         pub mod query_callbacks {\n             use super::*;\n-            use crate::dep_graph::DepNode;\n-            use crate::ty::query::{queries, query_keys};\n+            use rustc_middle::dep_graph::DepNode;\n+            use rustc_middle::ty::query::query_keys;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::{force_query, QueryDescription};\n ", "previous_filename": "compiler/rustc_middle/src/ty/query/plumbing.rs"}, {"sha": "244858897317ae311bda84078fdc05af2f753a57", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -1,10 +1,9 @@\n-use crate::ty::context::TyCtxt;\n-use crate::ty::WithOptConstParam;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n+use rustc_middle::ty::{TyCtxt, WithOptConstParam};\n use rustc_query_system::query::{QueryCache, QueryCacheStore};\n use std::fmt::Debug;\n use std::io::Write;", "previous_filename": "compiler/rustc_middle/src/ty/query/profiling_support.rs"}, {"sha": "4d52483c3b8ec553265f4f50ce726081b5d94ae2", "filename": "compiler/rustc_query_impl/src/stats.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fstats.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -1,6 +1,6 @@\n-use crate::ty::query::query_storage;\n-use crate::ty::TyCtxt;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_middle::ty::query::query_storage;\n+use rustc_middle::ty::TyCtxt;\n use rustc_query_system::query::{QueryCache, QueryCacheStore};\n \n use std::any::type_name;", "previous_filename": "compiler/rustc_middle/src/ty/query/stats.rs"}, {"sha": "003867beeb7e66f457762f6cd0f0eb32a264655d", "filename": "compiler/rustc_query_impl/src/values.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4581d16bcbea9273b6755dd24a884a234a0dc2f7/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fvalues.rs?ref=4581d16bcbea9273b6755dd24a884a234a0dc2f7", "patch": "@@ -1,5 +1,5 @@\n-use crate::ty::query::QueryCtxt;\n-use crate::ty::{self, AdtSizedConstraint, Ty, TyS};\n+use super::QueryCtxt;\n+use rustc_middle::ty::{self, AdtSizedConstraint, Ty, TyS};\n \n pub(super) trait Value<'tcx>: Sized {\n     fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self;", "previous_filename": "compiler/rustc_middle/src/ty/query/values.rs"}]}