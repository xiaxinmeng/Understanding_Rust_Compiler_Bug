{"sha": "5b30da10b64cf9b3567554e651bb6a9d62ad554b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzBkYTEwYjY0Y2Y5YjM1Njc1NTRlNjUxYmI2YTlkNjJhZDU1NGI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T17:06:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T11:31:41Z"}, "message": "Merge hir::GeneratorMovability into ast::Movability.", "tree": {"sha": "f762556911f4d6a102d225138f47789ebc8157b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f762556911f4d6a102d225138f47789ebc8157b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b30da10b64cf9b3567554e651bb6a9d62ad554b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b30da10b64cf9b3567554e651bb6a9d62ad554b", "html_url": "https://github.com/rust-lang/rust/commit/5b30da10b64cf9b3567554e651bb6a9d62ad554b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b30da10b64cf9b3567554e651bb6a9d62ad554b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03cbc313ddc16d7aba6c21c197a52ee4d2e85e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03cbc313ddc16d7aba6c21c197a52ee4d2e85e9", "html_url": "https://github.com/rust-lang/rust/commit/f03cbc313ddc16d7aba6c21c197a52ee4d2e85e9"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "6c92a997b1f98cd4d2b5c6d69cbc384025e017f4", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -494,7 +494,7 @@ impl LoweringContext<'_> {\n             decl,\n             body_id,\n             span,\n-            Some(hir::GeneratorMovability::Static)\n+            Some(hir::Movability::Static)\n         );\n         let generator = hir::Expr {\n             hir_id: self.lower_node_id(closure_node_id),\n@@ -725,7 +725,7 @@ impl LoweringContext<'_> {\n         fn_decl_span: Span,\n         generator_kind: Option<hir::GeneratorKind>,\n         movability: Movability,\n-    ) -> Option<hir::GeneratorMovability> {\n+    ) -> Option<hir::Movability> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) =>  {\n                 if !decl.inputs.is_empty() {\n@@ -736,10 +736,7 @@ impl LoweringContext<'_> {\n                         \"generators cannot have explicit parameters\"\n                     );\n                 }\n-                Some(match movability {\n-                    Movability::Movable => hir::GeneratorMovability::Movable,\n-                    Movability::Static => hir::GeneratorMovability::Static,\n-                })\n+                Some(movability)\n             },\n             Some(hir::GeneratorKind::Async(_)) => {\n                 bug!(\"non-`async` closure body turned `async` during lowering\");"}, {"sha": "297022600f9ee1650a1ff1d387335f4eea9222d6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use syntax::source_map::Spanned;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n-pub use syntax::ast::{Mutability, Constness, Unsafety};\n+pub use syntax::ast::{Mutability, Constness, Unsafety, Movability};\n use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::symbol::{Symbol, kw};\n use syntax::tokenstream::TokenStream;\n@@ -1628,8 +1628,8 @@ pub enum ExprKind {\n     /// The `Span` is the argument block `|...|`.\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n-    /// `Option<GeneratorMovability>`.\n-    Closure(CaptureClause, P<FnDecl>, BodyId, Span, Option<GeneratorMovability>),\n+    /// `Option<Movability>`.\n+    Closure(CaptureClause, P<FnDecl>, BodyId, Span, Option<Movability>),\n     /// A block (e.g., `'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n \n@@ -1802,17 +1802,6 @@ pub struct Destination {\n     pub target_id: Result<HirId, LoopIdError>,\n }\n \n-/// Whether a generator contains self-references, causing it to be `!Unpin`.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n-         RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GeneratorMovability {\n-    /// May contain self-references, `!Unpin`.\n-    Static,\n-\n-    /// Must not contain self-references, `Unpin`.\n-    Movable,\n-}\n-\n /// The yield kind that caused an `ExprKind::Yield`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum YieldSource {"}, {"sha": "92970afe9880ef4f9205e5b839ca42a04e91ce80", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -168,6 +168,7 @@ impl_stable_hash_for!(enum ::syntax::ast::Defaultness { Default, Final });\n impl_stable_hash_for!(struct ::syntax::ast::Lifetime { id, ident });\n impl_stable_hash_for!(enum ::syntax::ast::StrStyle { Cooked, Raw(pounds) });\n impl_stable_hash_for!(enum ::syntax::ast::AttrStyle { Outer, Inner });\n+impl_stable_hash_for!(enum ::syntax::ast::Movability { Static, Movable });\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "a3ddfec765f3fca09f7abd4f27822167f2a44bd3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -2161,7 +2161,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "04b2597af22415265cbd68f3caec6e036d720e49", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -2195,11 +2195,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if self.tcx().lang_items().unpin_trait() == Some(def_id) =>\n                 {\n                     match movability {\n-                        hir::GeneratorMovability::Static => {\n+                        hir::Movability::Static => {\n                             // Immovable generators are never `Unpin`, so\n                             // suppress the normal auto-impl candidate for it.\n                         }\n-                        hir::GeneratorMovability::Movable => {\n+                        hir::Movability::Movable => {\n                             // Movable generators are always `Unpin`, so add an\n                             // unconditional builtin candidate.\n                             candidates.vec.push(BuiltinCandidate {"}, {"sha": "04e0f6f4b56d71856434c6e71f905b07f306d4fd", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -2516,7 +2516,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_generator(self,\n                         id: DefId,\n                         generator_substs: SubstsRef<'tcx>,\n-                        movability: hir::GeneratorMovability)\n+                        movability: hir::Movability)\n                         -> Ty<'tcx> {\n         self.mk_ty(Generator(id, generator_substs, movability))\n     }"}, {"sha": "fdd3a1faaa975c6884fafd2f4bf1f12e914ed15b", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -607,10 +607,9 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Generator(did, substs, movability) => {\n                 let upvar_tys = substs.as_generator().upvar_tys(did, self.tcx());\n                 let witness = substs.as_generator().witness(did, self.tcx());\n-                if movability == hir::GeneratorMovability::Movable {\n-                    p!(write(\"[generator\"));\n-                } else {\n-                    p!(write(\"[static generator\"));\n+                match movability {\n+                    hir::Movability::Movable => p!(write(\"[generator\")),\n+                    hir::Movability::Static  => p!(write(\"[static generator\")),\n                 }\n \n                 // FIXME(eddyb) should use `def_span`."}, {"sha": "51cf7550c30f7c404d88edbf33b2731946514d55", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -162,7 +162,7 @@ pub enum TyKind<'tcx> {\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// A type representin the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors."}, {"sha": "f932a6bf1558f56a683c9a53caf786cd7f47cc4c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -235,7 +235,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let movable_generator = match tcx.hir().get(id) {\n         Node::Expr(&hir::Expr {\n-            kind: hir::ExprKind::Closure(.., Some(hir::GeneratorMovability::Static)),\n+            kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),\n             ..\n         }) => false,\n         _ => true,"}, {"sha": "fbedac45ddf3c9ba7dc655a86b4f6c0c726b96e9", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -90,7 +90,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n     /// The MIR is a fn item with the given `DefId` and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query."}, {"sha": "b43042f2b17457b0a9b773c9a29d51f9de2185de", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -257,7 +257,7 @@ pub enum ExprKind<'tcx> {\n         closure_id: DefId,\n         substs: UpvarSubsts<'tcx>,\n         upvars: Vec<ExprRef<'tcx>>,\n-        movability: Option<hir::GeneratorMovability>,\n+        movability: Option<hir::Movability>,\n     },\n     Literal {\n         literal: &'tcx Const<'tcx>,"}, {"sha": "37c239001a505f429a486a662fd11598a9078429", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -1192,7 +1192,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n                 (substs.upvar_tys(def_id, tcx).collect(),\n                  substs.witness(def_id, tcx),\n                  substs.discr_ty(tcx),\n-                 movability == hir::GeneratorMovability::Movable)\n+                 movability == hir::Movability::Movable)\n             }\n             _ => bug!(),\n         };"}, {"sha": "60525ba6b39c44f81f08f3e714d3674a1f14a3d5", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir::{self, Node, Destination, GeneratorMovability};\n+use rustc::hir::{self, Node, Destination, Movability};\n use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n@@ -59,7 +59,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n             hir::ExprKind::Closure(_, ref function_decl, b, span, movability) => {\n-                let cx = if let Some(GeneratorMovability::Static) = movability {\n+                let cx = if let Some(Movability::Static) = movability {\n                     AsyncClosure(span)\n                 } else {\n                     Closure(span)"}, {"sha": "96ba4d497cbf570c3319e875e8c8c5297cc37768", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -76,6 +76,6 @@ crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(\n         def_id,\n         InternalSubsts::bound_vars_for_item(tcx, def_id),\n-        hir::GeneratorMovability::Movable\n+        hir::Movability::Movable\n     )\n }"}, {"sha": "7ab2e1f528ba9d67380d1a4ad6c93435acaf86aa", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -39,7 +39,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         _capture: hir::CaptureClause,\n         decl: &'tcx hir::FnDecl,\n         body_id: hir::BodyId,\n-        gen: Option<hir::GeneratorMovability>,\n+        gen: Option<hir::Movability>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n         debug!(\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         opt_kind: Option<ty::ClosureKind>,\n         decl: &'tcx hir::FnDecl,\n         body: &'tcx hir::Body,\n-        gen: Option<hir::GeneratorMovability>,\n+        gen: Option<hir::Movability>,\n         expected_sig: Option<ExpectedSig<'tcx>>,\n     ) -> Ty<'tcx> {\n         debug!("}, {"sha": "72b5018589cf8367d62e274a26e92f31da0ba2fd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -1090,7 +1090,7 @@ struct GeneratorTypes<'tcx> {\n     interior: Ty<'tcx>,\n \n     /// Indicates if the generator is movable or static (immovable).\n-    movability: hir::GeneratorMovability,\n+    movability: hir::Movability,\n }\n \n /// Helper used for fns and closures. Does the grungy work of checking a function\n@@ -1106,7 +1106,7 @@ fn check_fn<'a, 'tcx>(\n     decl: &'tcx hir::FnDecl,\n     fn_id: hir::HirId,\n     body: &'tcx hir::Body,\n-    can_be_generator: Option<hir::GeneratorMovability>,\n+    can_be_generator: Option<hir::Movability>,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     let mut fn_sig = fn_sig.clone();\n "}, {"sha": "2ef3603271e4df35455293b1380c3256a8889dad", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b30da10b64cf9b3567554e651bb6a9d62ad554b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5b30da10b64cf9b3567554e651bb6a9d62ad554b", "patch": "@@ -1339,10 +1339,14 @@ pub enum CaptureBy {\n     Ref,\n }\n \n-/// The movability of a generator / closure literal.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Copy)]\n+/// The movability of a generator / closure literal:\n+/// whether a generator contains self-references, causing it to be `!Unpin`.\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n+         RustcEncodable, RustcDecodable, Debug, Copy)]\n pub enum Movability {\n+    /// May contain self-references, `!Unpin`.\n     Static,\n+    /// Must not contain self-references, `Unpin`.\n     Movable,\n }\n "}]}