{"sha": "5610205363eb56b2fd7ce6daeaa3b20a659398a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTAyMDUzNjNlYjU2YjJmZDdjZTZkYWVhYTNiMjBhNjU5Mzk4YTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T23:20:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T00:23:48Z"}, "message": "rustc: Move core injection to its own module", "tree": {"sha": "f23c090f818a34e744807d563b69b2b9ec5b9be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23c090f818a34e744807d563b69b2b9ec5b9be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5610205363eb56b2fd7ce6daeaa3b20a659398a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5610205363eb56b2fd7ce6daeaa3b20a659398a5", "html_url": "https://github.com/rust-lang/rust/commit/5610205363eb56b2fd7ce6daeaa3b20a659398a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5610205363eb56b2fd7ce6daeaa3b20a659398a5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "335302f08dbdffd218cbc9fcbfb650cfa273889b", "url": "https://api.github.com/repos/rust-lang/rust/commits/335302f08dbdffd218cbc9fcbfb650cfa273889b", "html_url": "https://github.com/rust-lang/rust/commit/335302f08dbdffd218cbc9fcbfb650cfa273889b"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "c75e9db8a7af3809bc6dbb4c4ef2edcf6dd6758f", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=5610205363eb56b2fd7ce6daeaa3b20a659398a5", "patch": "@@ -95,27 +95,6 @@ fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {\n     ret rv;\n }\n \n-fn inject_libcore_reference(sess: session,\n-                            crate: @ast::crate) -> @ast::crate {\n-\n-    fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n-        ret @{node: x,\n-              span: {lo: 0u, hi: 0u,\n-                     expanded_from: codemap::os_none}};\n-    }\n-\n-    let n1 = sess.next_node_id();\n-    let n2 = sess.next_node_id();\n-\n-    let vi1 = spanned(ast::view_item_use(\"core\", [], n1));\n-    let vi2 = spanned(ast::view_item_import_glob(@[\"core\"], n2));\n-\n-    let vis = [vi1, vi2] + crate.node.module.view_items;\n-\n-    ret @{node: {module: { view_items: vis with crate.node.module }\n-                 with crate.node} with *crate }\n-}\n-\n enum compile_upto {\n     cu_parse,\n     cu_expand,\n@@ -147,9 +126,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n              bind syntax::ext::expand::expand_crate(sess, crate));\n \n     if upto == cu_expand { ret {crate: crate, tcx: none}; }\n-    if sess.opts.libcore {\n-        crate = inject_libcore_reference(sess, crate);\n-    }\n+\n+    crate = front::core_inject::maybe_inject_libcore_ref(sess, crate);\n \n     let ast_map =\n         time(time_passes, \"ast indexing\","}, {"sha": "8e88bd5006805ba4a6f00e6e5c745509baac776d", "filename": "src/comp/front/core_inject.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcore_inject.rs?ref=5610205363eb56b2fd7ce6daeaa3b20a659398a5", "patch": "@@ -0,0 +1,35 @@\n+import driver::session::session;\n+import syntax::ast;\n+import syntax::codemap;\n+\n+export maybe_inject_libcore_ref;\n+\n+fn maybe_inject_libcore_ref(sess: session,\n+                            crate: @ast::crate) -> @ast::crate {\n+    if sess.opts.libcore {\n+        inject_libcore_ref(sess, crate)\n+    } else {\n+        crate\n+    }\n+}\n+\n+fn inject_libcore_ref(sess: session,\n+                      crate: @ast::crate) -> @ast::crate {\n+\n+    fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n+        ret @{node: x,\n+              span: {lo: 0u, hi: 0u,\n+                     expanded_from: codemap::os_none}};\n+    }\n+\n+    let n1 = sess.next_node_id();\n+    let n2 = sess.next_node_id();\n+\n+    let vi1 = spanned(ast::view_item_use(\"core\", [], n1));\n+    let vi2 = spanned(ast::view_item_import_glob(@[\"core\"], n2));\n+\n+    let vis = [vi1, vi2] + crate.node.module.view_items;\n+\n+    ret @{node: {module: { view_items: vis with crate.node.module }\n+                 with crate.node} with *crate }\n+}"}, {"sha": "6a11dcce79dc4964cd01cf7e3cc12746c7573228", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=5610205363eb56b2fd7ce6daeaa3b20a659398a5", "patch": "@@ -94,6 +94,7 @@ mod front {\n     mod attr;\n     mod config;\n     mod test;\n+    mod core_inject;\n }\n \n mod back {"}, {"sha": "f39aa2eff2dfcf24b3845b70003df8016102ab11", "filename": "src/test/compile-fail/no-core-attribute.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610205363eb56b2fd7ce6daeaa3b20a659398a5/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-core-attribute.rs?ref=5610205363eb56b2fd7ce6daeaa3b20a659398a5", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern: whatever\n+#[no_core];\n+\n+fn main() {\n+    log(debug, core::int::max_value);\n+}\n\\ No newline at end of file"}]}