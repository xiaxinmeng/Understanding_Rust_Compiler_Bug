{"sha": "ad70c748c35958f8afdc70cf67054dd1968e4b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzBjNzQ4YzM1OTU4ZjhhZmRjNzBjZjY3MDU0ZGQxOTY4ZTRiNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-19T15:58:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-20T10:17:03Z"}, "message": "Apply explicit self transformation before we enter check_fn", "tree": {"sha": "256a5a9a391fe8a717bda0532b5d1405a99c284f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256a5a9a391fe8a717bda0532b5d1405a99c284f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad70c748c35958f8afdc70cf67054dd1968e4b78", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad70c748c35958f8afdc70cf67054dd1968e4b78", "html_url": "https://github.com/rust-lang/rust/commit/ad70c748c35958f8afdc70cf67054dd1968e4b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad70c748c35958f8afdc70cf67054dd1968e4b78/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00f97b9fb00160ffce41ea5c27627b4729b43f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/00f97b9fb00160ffce41ea5c27627b4729b43f0f", "html_url": "https://github.com/rust-lang/rust/commit/00f97b9fb00160ffce41ea5c27627b4729b43f0f"}], "stats": {"total": 71, "additions": 21, "deletions": 50}, "files": [{"sha": "472e042d128412353c94187812b4785a2fabd64a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ad70c748c35958f8afdc70cf67054dd1968e4b78", "patch": "@@ -144,8 +144,7 @@ pub mod method;\n pub struct SelfInfo {\n     self_ty: ty::t,\n     self_id: ast::node_id,\n-    def_id: ast::def_id,\n-    explicit_self: ast::self_ty\n+    span: span\n }\n \n /// Fields that are part of a `FnCtxt` which are inherited by\n@@ -339,25 +338,6 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n         }\n     };\n \n-    // Update the SelfInfo to contain an accurate self type (taking\n-    // into account explicit self).\n-    let self_info = do self_info.chain_ref |self_info| {\n-        // If the self type is sty_static, we don't have a self ty.\n-        if self_info.explicit_self.node == ast::sty_static {\n-            None\n-        } else  {\n-            let in_scope_regions = fcx.in_scope_regions;\n-            let self_region = in_scope_regions.find(ty::br_self);\n-            let ty = method::transform_self_type_for_method(\n-                fcx.tcx(),\n-                self_region,\n-                self_info.self_ty,\n-                self_info.explicit_self.node,\n-                TransformTypeNormally);\n-            Some(SelfInfo { self_ty: ty,.. *self_info })\n-        }\n-    };\n-\n     gather_locals(fcx, decl, body, arg_tys, self_info);\n     check_block(fcx, body);\n \n@@ -495,20 +475,25 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n \n pub fn check_method(ccx: @mut CrateCtxt,\n                     method: @ast::method,\n-                    self_ty: ty::t,\n-                    self_impl_def_id: ast::def_id) {\n-    let self_info = SelfInfo {\n-        self_ty: self_ty,\n-        self_id: method.self_id,\n-        def_id: self_impl_def_id,\n-        explicit_self: method.self_ty\n+                    self_ty: ty::t)\n+{\n+    let self_info = if method.self_ty.node == ast::sty_static {None} else {\n+        let ty = method::transform_self_type_for_method(\n+            ccx.tcx,\n+            Some(ty::re_bound(ty::br_self)),\n+            self_ty,\n+            method.self_ty.node,\n+            TransformTypeNormally);\n+        Some(SelfInfo {self_ty: ty, self_id: method.self_id,\n+                       span: method.self_ty.span})\n     };\n+\n     check_bare_fn(\n         ccx,\n         &method.decl,\n         &method.body,\n         method.id,\n-        Some(self_info)\n+        self_info\n     );\n }\n \n@@ -545,11 +530,7 @@ pub fn check_struct(ccx: @mut CrateCtxt,\n         let class_t = SelfInfo {\n             self_ty: self_ty,\n             self_id: dtor.node.self_id,\n-            def_id: local_def(id),\n-            explicit_self: spanned {\n-                node: ast::sty_by_ref,\n-                span: codemap::dummy_sp()\n-            }\n+            span: dtor.span,\n         };\n         // typecheck the dtor\n         let dtor_dec = ast_util::dtor_dec();\n@@ -589,7 +570,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n                *ccx.tcx.sess.str_of(it.ident), it.id, rp);\n         let self_ty = ccx.to_ty(&rscope::type_rscope(rp), ty);\n         for ms.each |m| {\n-            check_method(ccx, *m, self_ty, local_def(it.id));\n+            check_method(ccx, *m, self_ty);\n         }\n       }\n       ast::item_trait(_, _, ref trait_methods) => {\n@@ -601,7 +582,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n               }\n               provided(m) => {\n                 let self_ty = ty::mk_self(ccx.tcx, local_def(it.id));\n-                check_method(ccx, m, self_ty, local_def(it.id));\n+                check_method(ccx, m, self_ty);\n               }\n             }\n         }"}, {"sha": "c78a91b95e4bb74ed06120ca988d11337eef01a5", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=ad70c748c35958f8afdc70cf67054dd1968e4b78", "patch": "@@ -40,18 +40,8 @@ pub fn replace_bound_regions_in_fn_sig(\n \n     let mut all_tys = ty::tys_in_fn_sig(fn_sig);\n \n-    match self_info {\n-      Some(SelfInfo {\n-            explicit_self: codemap::spanned {\n-                node: ast::sty_region(_, m),\n-                // FIXME(#4846) ------^ Use this lifetime instead of self\n-                _}, _}) => {\n-        let region = ty::re_bound(ty::br_self);\n-        let ty = ty::mk_rptr(tcx, region,\n-                             ty::mt { ty: ty::mk_nil(tcx), mutbl: m });\n-        all_tys.push(ty);\n-      }\n-      _ => {}\n+    for self_info.each |self_info| {\n+        all_tys.push(self_info.self_ty);\n     }\n \n     for self_ty.each |t| { all_tys.push(*t) }"}, {"sha": "18f232379169f6bacf7c03aa1874e670d087b76b", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad70c748c35958f8afdc70cf67054dd1968e4b78/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=ad70c748c35958f8afdc70cf67054dd1968e4b78", "patch": "@@ -283,8 +283,8 @@ pub fn resolve_type_vars_in_fn(fcx: @mut FnCtxt,\n     let visit = mk_visitor();\n     (visit.visit_block)(blk, wbcx, visit);\n     for self_info.each |self_info| {\n-        if self_info.explicit_self.node == ast::sty_static { break; }\n-        resolve_type_vars_for_node(wbcx, self_info.explicit_self.span,\n+        resolve_type_vars_for_node(wbcx,\n+                                   self_info.span,\n                                    self_info.self_id);\n     }\n     for decl.inputs.each |arg| {"}]}