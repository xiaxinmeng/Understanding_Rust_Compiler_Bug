{"sha": "3e6abf0c35da7e6906033ba6020af45f0dcab28d", "node_id": "C_kwDOAAsO6NoAKDNlNmFiZjBjMzVkYTdlNjkwNjAzM2JhNjAyMGFmNDVmMGRjYWIyOGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-03T00:09:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T00:09:14Z"}, "message": "Rollup merge of #94505 - cuviper:mono-item-sort-local, r=michaelwoerister,davidtwco\n\nRestore the local filter on mono item sorting\n\nIn `CodegenUnit::items_in_deterministic_order`, there's a comment that\nonly local HirIds should be taken into account, but #90408 removed the\n`as_local` call that sets others to None. Restoring that check fixes the\ns390x hangs seen in [RHBZ 2058803].\n\n[RHBZ 2058803]: https://bugzilla.redhat.com/show_bug.cgi?id=2058803", "tree": {"sha": "68fbdd2ef71f78099564f1435f57b2ab66008e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68fbdd2ef71f78099564f1435f57b2ab66008e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6abf0c35da7e6906033ba6020af45f0dcab28d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIAcqCRBK7hj4Ov3rIwAAS28IAJXbkAeKlfsyf8IJCc75+hIx\nUwp91HXGo52IegGTGs9hufuEsPniwjGuZxUyQik3CFzXELsqTcWSxvZ9sUS90zpa\nx87521cojkT1gSMjOvHKI8cRe6bL+eXfFbw/IOB3FCtEd0qN+hMaAdCGdNxCcGft\nq/SMETDg4y8IFboucuNhDz++LS6RP3MrqoqtGmD2DCpu6Hor+Qrt4+viCWPQLikC\nwU2nk8Xd16GTX9yelKFzUxqnSqvsej1ZMqb2AER76ic6zFmgUv2ALL137dTCxoWD\nkLGOOAVCoMrWk3bUW0ouec78HhbVOwGbVF0M7Ia8QblFRZ9tGjI7yMY9DxCgbyQ=\n=i2r8\n-----END PGP SIGNATURE-----\n", "payload": "tree 68fbdd2ef71f78099564f1435f57b2ab66008e21\nparent 293fa7a32bb8b55f6332f4563725a29bca08c385\nparent 6a838e41bb9d8c24a621cb69efab4c99948fdcf1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646266154 +0100\ncommitter GitHub <noreply@github.com> 1646266154 +0100\n\nRollup merge of #94505 - cuviper:mono-item-sort-local, r=michaelwoerister,davidtwco\n\nRestore the local filter on mono item sorting\n\nIn `CodegenUnit::items_in_deterministic_order`, there's a comment that\nonly local HirIds should be taken into account, but #90408 removed the\n`as_local` call that sets others to None. Restoring that check fixes the\ns390x hangs seen in [RHBZ 2058803].\n\n[RHBZ 2058803]: https://bugzilla.redhat.com/show_bug.cgi?id=2058803\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6abf0c35da7e6906033ba6020af45f0dcab28d", "html_url": "https://github.com/rust-lang/rust/commit/3e6abf0c35da7e6906033ba6020af45f0dcab28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6abf0c35da7e6906033ba6020af45f0dcab28d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293fa7a32bb8b55f6332f4563725a29bca08c385", "url": "https://api.github.com/repos/rust-lang/rust/commits/293fa7a32bb8b55f6332f4563725a29bca08c385", "html_url": "https://github.com/rust-lang/rust/commit/293fa7a32bb8b55f6332f4563725a29bca08c385"}, {"sha": "6a838e41bb9d8c24a621cb69efab4c99948fdcf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a838e41bb9d8c24a621cb69efab4c99948fdcf1", "html_url": "https://github.com/rust-lang/rust/commit/6a838e41bb9d8c24a621cb69efab4c99948fdcf1"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "13c325a14e4023ac0ef7237421c715968875c912", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e6abf0c35da7e6906033ba6020af45f0dcab28d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6abf0c35da7e6906033ba6020af45f0dcab28d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=3e6abf0c35da7e6906033ba6020af45f0dcab28d", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::ItemId;\n+use rustc_index::vec::Idx;\n use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n@@ -380,7 +381,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             // instances into account. The others don't matter for\n                             // the codegen tests and can even make item order\n                             // unstable.\n-                            InstanceDef::Item(def) => Some(def.did.index.as_usize()),\n+                            InstanceDef::Item(def) => def.did.as_local().map(Idx::index),\n                             InstanceDef::VtableShim(..)\n                             | InstanceDef::ReifyShim(..)\n                             | InstanceDef::Intrinsic(..)\n@@ -391,10 +392,8 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             | InstanceDef::CloneShim(..) => None,\n                         }\n                     }\n-                    MonoItem::Static(def_id) => Some(def_id.index.as_usize()),\n-                    MonoItem::GlobalAsm(item_id) => {\n-                        Some(item_id.def_id.to_def_id().index.as_usize())\n-                    }\n+                    MonoItem::Static(def_id) => def_id.as_local().map(Idx::index),\n+                    MonoItem::GlobalAsm(item_id) => Some(item_id.def_id.index()),\n                 },\n                 item.symbol_name(tcx),\n             )"}, {"sha": "b29f8b4a029d08ff0cf75a4668584d3f05d1318b", "filename": "src/test/codegen/debuginfo-generic-closure-env-names.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e6abf0c35da7e6906033ba6020af45f0dcab28d/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6abf0c35da7e6906033ba6020af45f0dcab28d/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs?ref=3e6abf0c35da7e6906033ba6020af45f0dcab28d", "patch": "@@ -3,7 +3,7 @@\n // of the enclosing functions don't get lost.\n //\n // Unfortunately, the order that debuginfo gets emitted into LLVM IR becomes a bit hard\n-// to predict once async fns are involved.\n+// to predict once async fns are involved, so DAG allows any order.\n //\n // Note that the test does not check async-fns when targeting MSVC because debuginfo for\n // those does not follow the enum-fallback encoding yet and thus is incomplete.\n@@ -27,24 +27,24 @@\n // CHECK: ![[generic_async_block_NAMESPACE:[0-9]+]] = !DINamespace(name: \"generic_async_block\"\n \n // function_containing_closure<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n-// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// MSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n \n // generic_async_function<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_function_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_function_NAMESPACE]]\n \n // generic_async_function<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<u32>\", scope: ![[generic_async_function_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<u32>\", scope: ![[generic_async_function_NAMESPACE]]\n \n // generic_async_block<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_block_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_block_NAMESPACE]]\n \n // generic_async_block<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<u32>\", scope: ![[generic_async_block_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<u32>\", scope: ![[generic_async_block_NAMESPACE]]\n \n // function_containing_closure<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n-// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// NONMSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// MSVC-DAG: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n \n \n #![crate_type = \"lib\"]"}]}