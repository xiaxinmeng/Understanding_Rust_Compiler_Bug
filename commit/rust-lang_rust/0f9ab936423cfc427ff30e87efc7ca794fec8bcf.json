{"sha": "0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOWFiOTM2NDIzY2ZjNDI3ZmYzMGU4N2VmYzdjYTc5NGZlYzhiY2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-12T01:54:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-20T03:39:39Z"}, "message": "std: Restore dynamic borrow tracking", "tree": {"sha": "01a0efa5b80b7440f4eca606e506ea197687a9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a0efa5b80b7440f4eca606e506ea197687a9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "html_url": "https://github.com/rust-lang/rust/commit/0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7", "html_url": "https://github.com/rust-lang/rust/commit/2ec9b8ce2f08dd9b931bd084f83fd3a4d0c3e8c7"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "6a6ba12bae301bf9825f4b3afc75bdf9aefd7c17", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "patch": "@@ -71,7 +71,6 @@ pub unsafe fn annihilate() {\n     use io::WriterUtil;\n     use io;\n     use libc;\n-    use rt::borrowck;\n     use sys;\n     use managed;\n \n@@ -81,10 +80,6 @@ pub unsafe fn annihilate() {\n         n_bytes_freed: 0\n     };\n \n-    // Quick hack: we need to free this list upon task exit, and this\n-    // is a convenient place to do it.\n-    borrowck::clear_task_borrow_list();\n-\n     // Pass 1: Make all boxes immortal.\n     //\n     // In this pass, nothing gets freed, so it does not matter whether"}, {"sha": "cbac43f27c73b865aa0b1802a09e61eef0c63264", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cell::Cell;\n use c_str::ToCStr;\n use cast::transmute;\n use libc::{c_char, size_t, STDERR_FILENO};\n use io;\n use io::{Writer, WriterUtil};\n use option::{Option, None, Some};\n use uint;\n+use rt::env;\n+use rt::local::Local;\n+use rt::task::Task;\n use str;\n use str::{OwnedStr, StrSlice};\n use sys;\n@@ -26,22 +30,31 @@ pub static MUT_BIT: uint = 1 << (uint::bits - 2);\n static ALL_BITS: uint = FROZEN_BIT | MUT_BIT;\n \n #[deriving(Eq)]\n-struct BorrowRecord {\n+pub struct BorrowRecord {\n     box: *mut raw::Box<()>,\n     file: *c_char,\n     line: size_t\n }\n \n fn try_take_task_borrow_list() -> Option<~[BorrowRecord]> {\n-    // XXX\n-    None\n+    do Local::borrow::<Task, Option<~[BorrowRecord]>> |task| {\n+        task.borrow_list.take()\n+    }\n }\n \n-fn swap_task_borrow_list(_f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n-    // XXX\n+fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n+    let borrows = match try_take_task_borrow_list() {\n+        Some(l) => l,\n+        None => ~[]\n+    };\n+    let borrows = f(borrows);\n+    let borrows = Cell::new(borrows);\n+    do Local::borrow::<Task, ()> |task| {\n+        task.borrow_list = Some(borrows.take());\n+    }\n }\n \n-pub unsafe fn clear_task_borrow_list() {\n+pub fn clear_task_borrow_list() {\n     // pub because it is used by the box annihilator.\n     let _ = try_take_task_borrow_list();\n }\n@@ -89,8 +102,7 @@ unsafe fn debug_borrow<T>(tag: &'static str,\n     //! A useful debugging function that prints a pointer + tag + newline\n     //! without allocating memory.\n \n-    // XXX\n-    if false {\n+    if ENABLE_DEBUG && env::debug_borrow() {\n         debug_borrow_slow(tag, p, old_bits, new_bits, filename, line);\n     }\n "}, {"sha": "5b8406551204270782e291798d0436af7e4ebc9d", "filename": "src/libstd/rt/env.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fenv.rs?ref=0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "patch": "@@ -18,6 +18,7 @@ use os;\n // They are expected to be initialized once then left alone.\n \n static mut MIN_STACK: uint = 2000000;\n+static mut DEBUG_BORROW: bool = false;\n \n pub fn init() {\n     unsafe {\n@@ -28,9 +29,17 @@ pub fn init() {\n             },\n             None => ()\n         }\n+        match os::getenv(\"RUST_DEBUG_BORROW\") {\n+            Some(_) => DEBUG_BORROW = true,\n+            None => ()\n+        }\n     }\n }\n \n pub fn min_stack() -> uint {\n     unsafe { MIN_STACK }\n }\n+\n+pub fn debug_borrow() -> bool {\n+    unsafe { DEBUG_BORROW }\n+}"}, {"sha": "95d60c11df6ed6b4c8186e78a1a0ff24c27fc35c", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ab936423cfc427ff30e87efc7ca794fec8bcf/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=0f9ab936423cfc427ff30e87efc7ca794fec8bcf", "patch": "@@ -20,6 +20,8 @@ use libc::{c_void, uintptr_t};\n use ptr;\n use prelude::*;\n use option::{Option, Some, None};\n+use rt::borrowck;\n+use rt::borrowck::BorrowRecord;\n use rt::env;\n use rt::kill::Death;\n use rt::local::Local;\n@@ -51,7 +53,9 @@ pub struct Task {\n     name: Option<~str>,\n     coroutine: Option<Coroutine>,\n     sched: Option<~Scheduler>,\n-    task_type: TaskType\n+    task_type: TaskType,\n+    // Dynamic borrowck debugging info\n+    borrow_list: Option<~[BorrowRecord]>\n }\n \n pub enum TaskType {\n@@ -135,7 +139,8 @@ impl Task {\n             coroutine: Some(Coroutine::empty()),\n             name: None,\n             sched: None,\n-            task_type: SchedTask\n+            task_type: SchedTask,\n+            borrow_list: None\n         }\n     }\n \n@@ -168,7 +173,8 @@ impl Task {\n             name: None,\n             coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n-            task_type: GreenTask(Some(~home))\n+            task_type: GreenTask(Some(~home)),\n+            borrow_list: None\n         }\n     }\n \n@@ -190,7 +196,8 @@ impl Task {\n             name: None,\n             coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n-            task_type: GreenTask(Some(~home))\n+            task_type: GreenTask(Some(~home)),\n+            borrow_list: None\n         }\n     }\n \n@@ -253,6 +260,9 @@ impl Task {\n             }\n         }\n \n+        // Cleanup the dynamic borrowck debugging info\n+        borrowck::clear_task_borrow_list();\n+\n         // NB. We pass the taskgroup into death so that it can be dropped while\n         // the unkillable counter is set. This is necessary for when the\n         // taskgroup destruction code drops references on KillHandles, which"}]}