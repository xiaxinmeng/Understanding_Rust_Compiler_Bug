{"sha": "0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2ZiMTg0ZWQxY2YyNjllYzA0NTMxYzI3NTBkOWNjZTRjMDM0YmQ=", "commit": {"author": {"name": "Olaf Buddenhagen", "email": "antrik@users.sf.net", "date": "2015-12-26T17:31:02Z"}, "committer": {"name": "Olaf Buddenhagen", "email": "antrik@users.sf.net", "date": "2016-01-14T08:57:27Z"}, "message": "std::sync::mpsc: Add fmt::Debug stubs\n\nMinimal fix for https://github.com/rust-lang/rust/issues/30563\n\nThis covers all the public structs I think; except for Iter and\nIntoIter, which I don't know if or how they should be handled.", "tree": {"sha": "97fc5154ccf13352f455df7a03208c76e612261e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97fc5154ccf13352f455df7a03208c76e612261e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "html_url": "https://github.com/rust-lang/rust/commit/0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3fb184ed1cf269ec04531c2750d9cce4c034bd/comments", "author": {"login": "antrik", "id": 19555, "node_id": "MDQ6VXNlcjE5NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/19555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antrik", "html_url": "https://github.com/antrik", "followers_url": "https://api.github.com/users/antrik/followers", "following_url": "https://api.github.com/users/antrik/following{/other_user}", "gists_url": "https://api.github.com/users/antrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/antrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antrik/subscriptions", "organizations_url": "https://api.github.com/users/antrik/orgs", "repos_url": "https://api.github.com/users/antrik/repos", "events_url": "https://api.github.com/users/antrik/events{/privacy}", "received_events_url": "https://api.github.com/users/antrik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antrik", "id": 19555, "node_id": "MDQ6VXNlcjE5NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/19555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antrik", "html_url": "https://github.com/antrik", "followers_url": "https://api.github.com/users/antrik/followers", "following_url": "https://api.github.com/users/antrik/following{/other_user}", "gists_url": "https://api.github.com/users/antrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/antrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antrik/subscriptions", "organizations_url": "https://api.github.com/users/antrik/orgs", "repos_url": "https://api.github.com/users/antrik/repos", "events_url": "https://api.github.com/users/antrik/events{/privacy}", "received_events_url": "https://api.github.com/users/antrik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f550ebc299d5eadc073160cd3acb8de6c5d857", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f550ebc299d5eadc073160cd3acb8de6c5d857", "html_url": "https://github.com/rust-lang/rust/commit/e1f550ebc299d5eadc073160cd3acb8de6c5d857"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "e2c900f3af0f1c35afa6b4be56b53d1533725358", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e3fb184ed1cf269ec04531c2750d9cce4c034bd/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3fb184ed1cf269ec04531c2750d9cce4c034bd/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "patch": "@@ -635,6 +635,13 @@ impl<T> Drop for Sender<T> {\n     }\n }\n \n+#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+impl<T> fmt::Debug for Sender<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Sender {{ .. }}\")\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // SyncSender\n ////////////////////////////////////////////////////////////////////////////////\n@@ -693,6 +700,13 @@ impl<T> Drop for SyncSender<T> {\n     }\n }\n \n+#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+impl<T> fmt::Debug for SyncSender<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"SyncSender {{ .. }}\")\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Receiver\n ////////////////////////////////////////////////////////////////////////////////\n@@ -987,6 +1001,13 @@ impl<T> Drop for Receiver<T> {\n     }\n }\n \n+#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+impl<T> fmt::Debug for Receiver<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Receiver {{ .. }}\")\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> fmt::Debug for SendError<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -2199,4 +2220,22 @@ mod sync_tests {\n             repro()\n         }\n     }\n+\n+    #[test]\n+    fn fmt_debug_sender() {\n+        let (tx, _) = channel::<i32>();\n+        assert_eq!(format!(\"{:?}\", tx), \"Sender { .. }\");\n+    }\n+\n+    #[test]\n+    fn fmt_debug_recv() {\n+        let (_, rx) = channel::<i32>();\n+        assert_eq!(format!(\"{:?}\", rx), \"Receiver { .. }\");\n+    }\n+\n+    #[test]\n+    fn fmt_debug_sync_sender() {\n+        let (tx, _) = sync_channel::<i32>(1);\n+        assert_eq!(format!(\"{:?}\", tx), \"SyncSender { .. }\");\n+    }\n }"}, {"sha": "d743cbb18909f005d557f38d9906a7557182b24f", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e3fb184ed1cf269ec04531c2750d9cce4c034bd/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3fb184ed1cf269ec04531c2750d9cce4c034bd/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=0e3fb184ed1cf269ec04531c2750d9cce4c034bd", "patch": "@@ -58,6 +58,8 @@\n             issue = \"27800\")]\n \n \n+use fmt;\n+\n use core::cell::{Cell, UnsafeCell};\n use core::marker;\n use core::ptr;\n@@ -350,6 +352,20 @@ impl Iterator for Packets {\n     }\n }\n \n+#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+impl fmt::Debug for Select {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Select {{ .. }}\")\n+    }\n+}\n+\n+#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Handle {{ .. }}\")\n+    }\n+}\n+\n #[cfg(test)]\n #[allow(unused_imports)]\n mod tests {\n@@ -762,4 +778,18 @@ mod tests {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn fmt_debug_select() {\n+        let sel = Select::new();\n+        assert_eq!(format!(\"{:?}\", sel), \"Select { .. }\");\n+    }\n+\n+    #[test]\n+    fn fmt_debug_handle() {\n+        let (_, rx) = channel::<i32>();\n+        let sel = Select::new();\n+        let mut handle = sel.handle(&rx);\n+        assert_eq!(format!(\"{:?}\", handle), \"Handle { .. }\");\n+    }\n }"}]}