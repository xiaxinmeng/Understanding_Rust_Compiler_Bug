{"sha": "ce80b23e09eb571802faff2f15ca3876b5bc1044", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODBiMjNlMDllYjU3MTgwMmZhZmYyZjE1Y2EzODc2YjViYzEwNDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-07T15:33:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-07T15:33:27Z"}, "message": "Update CONTRIBUTING.md", "tree": {"sha": "4c375712134740cd64d9dd8c4d5d8627eb41cb0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c375712134740cd64d9dd8c4d5d8627eb41cb0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce80b23e09eb571802faff2f15ca3876b5bc1044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce80b23e09eb571802faff2f15ca3876b5bc1044", "html_url": "https://github.com/rust-lang/rust/commit/ce80b23e09eb571802faff2f15ca3876b5bc1044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce80b23e09eb571802faff2f15ca3876b5bc1044/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "681a3031b5128e6cf42e6195c51bd3fd671c5731", "url": "https://api.github.com/repos/rust-lang/rust/commits/681a3031b5128e6cf42e6195c51bd3fd671c5731", "html_url": "https://github.com/rust-lang/rust/commit/681a3031b5128e6cf42e6195c51bd3fd671c5731"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "e100f09ffe26b315578f2316e978960ac78e97f7", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ce80b23e09eb571802faff2f15ca3876b5bc1044/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce80b23e09eb571802faff2f15ca3876b5bc1044/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=ce80b23e09eb571802faff2f15ca3876b5bc1044", "patch": "@@ -4,7 +4,16 @@ Hello fellow Rustacean! Great to see your interest in compiler internals and lin\n \n ## Getting started\n \n-All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth or @llogiq.\n+High level approach:\n+\n+1. Find something to fix/improve\n+2. Change code (likely some file in `clippy_lints/src/`)\n+3. Run `cargo test` in the root directory and wiggle code until it passes\n+4. Open a PR (also can be done between 2. and 3. if you run into problems)\n+\n+### Finding something to fix/improve\n+\n+All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n \n Some issues are easier than others. The [E-easy](https://github.com/Manishearth/rust-clippy/labels/E-easy)\n label can be used to find the easy issues. If you want to work on an issue, please leave a comment\n@@ -16,7 +25,8 @@ matching of the syntax tree structure, and are generally easier than\n and resolved paths.\n \n Issues marked [E-medium](https://github.com/Manishearth/rust-clippy/labels/E-medium) are generally\n-pretty easy too, though it's recommended you work on an E-easy issue first.\n+pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n+as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n \n [Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n@@ -35,16 +45,14 @@ T-middle issues can be more involved and require verifying types. The\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n+### Writing code\n+\n Compiling clippy can take almost a minute or more depending on your machine.\n You can set the environment flag `CARGO_INCREMENTAL=1` to cut down that time to\n almost a third on average, depending on the influence your change has.\n \n-Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected.\n-Of course there's little sense in writing the output yourself or copying it around.\n-Therefore you can simply run `tests/ui/update-all-references.sh` and check whether\n-the output looks as you expect with `git diff`. Commit all `*.stderr` files, too.\n+Please document your lint with a doc comment akin to the following:\n \n-Also please document your lint with a doc comment akin to the following:\n ```rust\n /// **What it does:** Checks for ... (describe what the lint matches).\n ///\n@@ -58,7 +66,12 @@ Also please document your lint with a doc comment akin to the following:\n /// ```\n ```\n \n-Our `util/update_wiki.py` script can then add your lint docs to the wiki.\n+### Running test suite\n+\n+Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected.\n+Of course there's little sense in writing the output yourself or copying it around.\n+Therefore you can simply run `tests/ui/update-all-references.sh` and check whether\n+the output looks as you expect with `git diff`. Commit all `*.stderr` files, too.\n \n ## Contributions\n "}]}