{"sha": "537f8d6f863ec049a24821f03f5dc8105358cc97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzN2Y4ZDZmODYzZWMwNDlhMjQ4MjFmMDNmNWRjODEwNTM1OGNjOTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-28T11:15:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-28T11:15:42Z"}, "message": "Rollup merge of #48560 - bdrewery:freebsd-struct-abi, r=estebank\n\nFix FreeBSD struct returning ABI.\n\nFreeBSD has had a patch similar to this for a while. See https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=223047.\n\nThis reworks 6774e7a to be more specific about what `compute_abi_info` is checking for per target.", "tree": {"sha": "5c77af5f82958f0684f8e5afd2ad721bb00ba716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c77af5f82958f0684f8e5afd2ad721bb00ba716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537f8d6f863ec049a24821f03f5dc8105358cc97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJalo9eCRBK7hj4Ov3rIwAAdHIIAJ09hFxuna/Rc+4B0Y5wSau1\nLYitVklVTJfwNGDFOdsOA6tmKRrmoCBcAV+rQPWikFDgY3rkU60PDn+fJSFVLkEa\nGtmDUzeWLztu6Tq94yBS6w0hc83X2J2sNSSBcurW+mVOPkN+XyIR4G/irpSwBYO/\nNZTYJTmGxJj0//6s0bE9L1CfJxY5EK+2LVp4lB1NlvKf28H1K6HggE0nQ+JQmnlL\niVeKgyIor+ICqzZrQhdXWa0ybffY3hlD368l0afAkytoQFy0apivWioeT/rs4idp\nIGphL+fCBYOcU1tlZhlltguuTVVaJ8msOSdMrLBOIr7T59A4wQkH18Pdmaj/k6M=\n=nQr4\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c77af5f82958f0684f8e5afd2ad721bb00ba716\nparent 4b4cd470219207b52846b1d6bdd84db8f36a6a47\nparent 279e5b0a48cd9883a6e43571a9de25de06bdde22\nauthor kennytm <kennytm@gmail.com> 1519816542 +0800\ncommitter GitHub <noreply@github.com> 1519816542 +0800\n\nRollup merge of #48560 - bdrewery:freebsd-struct-abi, r=estebank\n\nFix FreeBSD struct returning ABI.\n\nFreeBSD has had a patch similar to this for a while. See https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=223047.\n\nThis reworks 6774e7a to be more specific about what `compute_abi_info` is checking for per target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537f8d6f863ec049a24821f03f5dc8105358cc97", "html_url": "https://github.com/rust-lang/rust/commit/537f8d6f863ec049a24821f03f5dc8105358cc97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537f8d6f863ec049a24821f03f5dc8105358cc97/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4cd470219207b52846b1d6bdd84db8f36a6a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4cd470219207b52846b1d6bdd84db8f36a6a47", "html_url": "https://github.com/rust-lang/rust/commit/4b4cd470219207b52846b1d6bdd84db8f36a6a47"}, {"sha": "279e5b0a48cd9883a6e43571a9de25de06bdde22", "url": "https://api.github.com/repos/rust-lang/rust/commits/279e5b0a48cd9883a6e43571a9de25de06bdde22", "html_url": "https://github.com/rust-lang/rust/commit/279e5b0a48cd9883a6e43571a9de25de06bdde22"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "72173b62594e9658cd77fa4802f6d154d4ccd44d", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -46,6 +46,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: LinkArgs::new(),\n         exe_allocation_crate: super::maybe_jemalloc(),\n         has_elf_tls: version >= (10, 7),\n+        abi_return_struct_as_int: true,\n         .. Default::default()\n     }\n }"}, {"sha": "291b22768998c556f3f98deb1a1fab37088f7463", "filename": "src/librustc_back/target/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Ffreebsd_base.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -36,6 +36,7 @@ pub fn opts() -> TargetOptions {\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,\n         exe_allocation_crate: super::maybe_jemalloc(),\n+        abi_return_struct_as_int: true,\n         .. Default::default()\n     }\n }"}, {"sha": "be69127d8f2ab5dec12179f3ce901a16381a9862", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -346,9 +346,8 @@ pub struct TargetOptions {\n     pub staticlib_suffix: String,\n     /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n     pub target_family: Option<String>,\n-    /// Whether the target toolchain is like OpenBSD's.\n-    /// Only useful for compiling against OpenBSD, for configuring abi when returning a struct.\n-    pub is_like_openbsd: bool,\n+    /// Whether the target toolchain's ABI supports returning small structs as an integer.\n+    pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n     /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n@@ -504,7 +503,7 @@ impl Default for TargetOptions {\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n-            is_like_openbsd: false,\n+            abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n             is_like_windows: false,\n@@ -759,7 +758,7 @@ impl Target {\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n         key!(target_family, optional);\n-        key!(is_like_openbsd, bool);\n+        key!(abi_return_struct_as_int, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n         key!(is_like_windows, bool);\n@@ -957,7 +956,7 @@ impl ToJson for Target {\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n         target_option_val!(target_family);\n-        target_option_val!(is_like_openbsd);\n+        target_option_val!(abi_return_struct_as_int);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n         target_option_val!(is_like_windows);"}, {"sha": "311e260ee3f34a113f0a5e005e679f6d499da36c", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -31,7 +31,7 @@ pub fn opts() -> TargetOptions {\n         target_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        is_like_openbsd: true,\n+        abi_return_struct_as_int: true,\n         pre_link_args: args,\n         position_independent_executables: true,\n         eliminate_frame_pointer: false, // FIXME 43575"}, {"sha": "30038400f6c81ca13785d2aed11334f610e5902f", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -101,6 +101,7 @@ pub fn opts() -> TargetOptions {\n             \"rsend.o\".to_string()\n         ],\n         custom_unwind_resume: true,\n+        abi_return_struct_as_int: true,\n \n         .. Default::default()\n     }"}, {"sha": "e0bf36ee4077e392346cdc87a585f452862735eb", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -34,6 +34,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args: args,\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n+        abi_return_struct_as_int: true,\n \n         .. Default::default()\n     }"}, {"sha": "b14558448067cc9e67ac6a7a3919bfa12785a43f", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/537f8d6f863ec049a24821f03f5dc8105358cc97/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=537f8d6f863ec049a24821f03f5dc8105358cc97", "patch": "@@ -52,8 +52,7 @@ pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = &cx.sess().target.target;\n-            if t.options.is_like_osx || t.options.is_like_windows\n-                || t.options.is_like_openbsd {\n+            if t.options.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n                 if !t.options.is_like_msvc && is_single_fp_element(cx, fty.ret.layout) {"}]}