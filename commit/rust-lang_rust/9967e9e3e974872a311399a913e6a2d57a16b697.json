{"sha": "9967e9e3e974872a311399a913e6a2d57a16b697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NjdlOWUzZTk3NDg3MmEzMTEzOTlhOTEzZTZhMmQ1N2ExNmI2OTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-06T21:17:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-17T21:12:48Z"}, "message": "Support generic lifetime arguments in method calls", "tree": {"sha": "9b6ace0340cf565e05dcc2d76ca1e1be42970942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6ace0340cf565e05dcc2d76ca1e1be42970942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9967e9e3e974872a311399a913e6a2d57a16b697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9967e9e3e974872a311399a913e6a2d57a16b697", "html_url": "https://github.com/rust-lang/rust/commit/9967e9e3e974872a311399a913e6a2d57a16b697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9967e9e3e974872a311399a913e6a2d57a16b697/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028569ab1b339bcc00814e1c7fb71a5cea5ccb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f", "html_url": "https://github.com/rust-lang/rust/commit/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f"}], "stats": {"total": 225, "additions": 53, "deletions": 172}, "files": [{"sha": "99a49dbd7d732122c8a458ef8cac9804d5488005", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -127,18 +127,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ExprKind::MethodCall(ref segment, ..) => {\n                 if let Some(ref params) = segment.parameters {\n-                    match **params {\n-                        PathParameters::AngleBracketed(ref param_data) => {\n-                            if !param_data.bindings.is_empty() {\n-                                let binding_span = param_data.bindings[0].span;\n-                                self.err_handler().span_err(binding_span,\n-                                    \"type bindings cannot be used in method calls\");\n-                            }\n-                        }\n-                        PathParameters::Parenthesized(..) => {\n-                            self.err_handler().span_err(expr.span,\n-                                \"parenthesized parameters cannot be used on method calls\");\n-                        }\n+                    if let PathParameters::Parenthesized(..) = **params {\n+                        self.err_handler().span_err(expr.span,\n+                            \"parenthesized parameters cannot be used on method calls\");\n                     }\n                 }\n             }"}, {"sha": "a647a8bf6f86c9aee24d33b1ea85af4bb7eddeab", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -10,6 +10,7 @@\n \n use super::{probe, MethodCallee};\n \n+use astconv::AstConv;\n use check::{FnCtxt, LvalueOp, callee};\n use hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n@@ -282,60 +283,33 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                  segment: &hir::PathSegment,\n                                  substs: &Substs<'tcx>)\n                                  -> &'tcx Substs<'tcx> {\n-        let supplied_method_types = match segment.parameters {\n-            hir::AngleBracketedParameters(ref data) => &data.types,\n-            _ => bug!(\"unexpected generic arguments: {:?}\", segment.parameters),\n-        };\n-\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n-        let num_supplied_types = supplied_method_types.len();\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n-        let num_method_types = method_generics.types.len();\n-\n-        if num_supplied_types > 0 && num_supplied_types != num_method_types {\n-            if num_method_types == 0 {\n-                struct_span_err!(self.tcx.sess,\n-                                 self.span,\n-                                 E0035,\n-                                 \"does not take type parameters\")\n-                    .span_label(self.span, \"called with unneeded type parameters\")\n-                    .emit();\n-            } else {\n-                struct_span_err!(self.tcx.sess,\n-                                 self.span,\n-                                 E0036,\n-                                 \"incorrect number of type parameters given for this method: \\\n-                                  expected {}, found {}\",\n-                                 num_method_types,\n-                                 num_supplied_types)\n-                    .span_label(self.span,\n-                                format!(\"Passed {} type argument{}, expected {}\",\n-                                         num_supplied_types,\n-                                         if num_supplied_types != 1 { \"s\" } else { \"\" },\n-                                         num_method_types))\n-                    .emit();\n-            }\n-        }\n+        let mut fn_segment = Some((segment, method_generics));\n+        self.fcx.check_path_parameter_count(self.span, &mut fn_segment);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method.\n-        //\n-        // FIXME -- permit users to manually specify lifetimes\n-        let supplied_start = substs.len() + method_generics.regions.len();\n+        let (supplied_types, supplied_lifetimes) = match segment.parameters {\n+            hir::AngleBracketedParameters(ref data) => (&data.types, &data.lifetimes),\n+            _ => bug!(\"unexpected generic arguments: {:?}\", segment.parameters),\n+        };\n         Substs::for_item(self.tcx, pick.item.def_id, |def, _| {\n             let i = def.index as usize;\n             if i < substs.len() {\n                 substs.region_at(i)\n+            } else if let Some(lifetime) = supplied_lifetimes.get(i - substs.len()) {\n+                AstConv::ast_region_to_region(self.fcx, lifetime, Some(def))\n             } else {\n                 self.region_var_for_def(self.span, def)\n             }\n         }, |def, cur_substs| {\n             let i = def.index as usize;\n             if i < substs.len() {\n                 substs.type_at(i)\n-            } else if let Some(ast_ty) = supplied_method_types.get(i - supplied_start) {\n+            } else if let Some(ast_ty) = supplied_types.get(i - substs.len()) {\n                 self.to_ty(ast_ty)\n             } else {\n                 self.type_var_for_def(self.span, def, cur_substs)"}, {"sha": "1e26a734e7640d8e90765077522e6dba4ffade1d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 86, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -332,92 +332,6 @@ fn main() {\n ```\n \"##,\n \n-E0035: r##\"\n-You tried to give a type parameter where it wasn't needed. Erroneous code\n-example:\n-\n-```compile_fail,E0035\n-struct Test;\n-\n-impl Test {\n-    fn method(&self) {}\n-}\n-\n-fn main() {\n-    let x = Test;\n-\n-    x.method::<i32>(); // Error: Test::method doesn't need type parameter!\n-}\n-```\n-\n-To fix this error, just remove the type parameter:\n-\n-```\n-struct Test;\n-\n-impl Test {\n-    fn method(&self) {}\n-}\n-\n-fn main() {\n-    let x = Test;\n-\n-    x.method(); // OK, we're good!\n-}\n-```\n-\"##,\n-\n-E0036: r##\"\n-This error occurrs when you pass too many or not enough type parameters to\n-a method. Erroneous code example:\n-\n-```compile_fail,E0036\n-struct Test;\n-\n-impl Test {\n-    fn method<T>(&self, v: &[T]) -> usize {\n-        v.len()\n-    }\n-}\n-\n-fn main() {\n-    let x = Test;\n-    let v = &[0];\n-\n-    x.method::<i32, i32>(v); // error: only one type parameter is expected!\n-}\n-```\n-\n-To fix it, just specify a correct number of type parameters:\n-\n-```\n-struct Test;\n-\n-impl Test {\n-    fn method<T>(&self, v: &[T]) -> usize {\n-        v.len()\n-    }\n-}\n-\n-fn main() {\n-    let x = Test;\n-    let v = &[0];\n-\n-    x.method::<i32>(v); // OK, we're good!\n-}\n-```\n-\n-Please note on the last example that we could have called `method` like this:\n-\n-```\n-# struct Test;\n-# impl Test { fn method<T>(&self, v: &[T]) -> usize { v.len() } }\n-# let x = Test;\n-# let v = &[0];\n-x.method(v);\n-```\n-\"##,\n-\n E0040: r##\"\n It is not allowed to manually call destructors in Rust. It is also not\n necessary to do this since `drop` is called automatically whenever a value goes\n@@ -4681,6 +4595,8 @@ error, just declare a function.\n }\n \n register_diagnostics! {\n+//  E0035, merged into E0087/E0089\n+//  E0036, merged into E0087/E0089\n //  E0068,\n //  E0085,\n //  E0086,"}, {"sha": "ecb6dac66f218f138ec68d2d1029091438669ffe", "filename": "src/test/compile-fail/E0036.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f/src%2Ftest%2Fcompile-fail%2FE0036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028569ab1b339bcc00814e1c7fb71a5cea5ccb0f/src%2Ftest%2Fcompile-fail%2FE0036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0036.rs?ref=028569ab1b339bcc00814e1c7fb71a5cea5ccb0f", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct Test;\n-\n-impl Test {\n-    fn method<T>(&self, v: &[T]) -> usize {\n-        v.len()\n-    }\n-}\n-\n-fn main() {\n-    let x = Test;\n-    let v = &[0];\n-    x.method::<i32, i32>(v); //~ ERROR E0036\n-                             //~| NOTE Passed 2 type arguments, expected 1\n-}"}, {"sha": "4910bfaf4f60d7c98830968b0dc08881c8fd08bc", "filename": "src/test/compile-fail/method-call-lifetime-args-unresolved.rs", "status": "renamed", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-unresolved.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,14 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Test;\n-\n-impl Test {\n-    fn method(&self) {}\n-}\n-\n fn main() {\n-    let x = Test;\n-    x.method::<i32>(); //~ ERROR E0035\n-                       //~| NOTE called with unneeded type parameters\n+    0.clone::<'a>(); //~ ERROR use of undeclared lifetime name `'a`\n }", "previous_filename": "src/test/compile-fail/E0035.rs"}, {"sha": "75c469ecd3268373b8df288897c699f8ab424abf", "filename": "src/test/compile-fail/method-call-lifetime-args.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n+    fn life_and_type<'a, T>(&self) -> &'a T { loop {} }\n+}\n+\n+fn main() {\n+    S.late(&0, &0); // OK\n+    S.late::<'static>(&0, &0);\n+    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter\n+    S.late::<'static, 'static, 'static>(&0, &0);\n+    //~^ ERROR expected at most 0 lifetime parameters, found 3 lifetime parameter\n+    S.early(); // OK\n+    S.early::<'static>();\n+    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    S.early::<'static, 'static, 'static>();\n+    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    let _: &u8 = S.life_and_type::<'static>();\n+    S.life_and_type::<u8>();\n+    S.life_and_type::<'static, u8>();\n+}"}, {"sha": "3ae878ed1cbc0659929d47885f8daaa90ce154ab", "filename": "src/test/compile-fail/method-call-type-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    0.clone::<T = u8>(); //~ ERROR type bindings cannot be used in method calls\n+    0.clone::<T = u8>(); //~ ERROR unexpected binding of associated item\n }"}, {"sha": "b08aab6da852a71c6dfd3db0dce616c0d737a18b", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9967e9e3e974872a311399a913e6a2d57a16b697/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=9967e9e3e974872a311399a913e6a2d57a16b697", "patch": "@@ -15,9 +15,8 @@ impl bar for i32 { fn dup(&self) -> i32 { *self } fn blah<X>(&self) {} }\n impl bar for u32 { fn dup(&self) -> u32 { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10.dup::<i32>(); //~ ERROR does not take type parameters\n-    10.blah::<i32, i32>();\n-    //~^ ERROR incorrect number of type parameters given for this method: expected 1, found 2\n+    10.dup::<i32>(); //~ ERROR expected at most 0 type parameters, found 1 type parameter\n+    10.blah::<i32, i32>(); //~ ERROR expected at most 1 type parameter, found 2 type parameters\n     (box 10 as Box<bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038"}]}