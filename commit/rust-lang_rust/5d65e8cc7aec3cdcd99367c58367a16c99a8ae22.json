{"sha": "5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNjVlOGNjN2FlYzNjZGNkOTkzNjdjNTgzNjdhMTZjOTlhOGFlMjI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-07T05:03:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-14T00:52:03Z"}, "message": "Reduce the size of `hir::Expr`.\n\nFrom 104 bytes to 72 bytes on x86-64. This slightly reduces instruction\ncounts.\n\nAlso add an assertion about the size.", "tree": {"sha": "e13b976d2c856cf2ac16fd89d884305bf533bcd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e13b976d2c856cf2ac16fd89d884305bf533bcd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "html_url": "https://github.com/rust-lang/rust/commit/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54494727855cd14229f5d456591ed2a2f027c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54494727855cd14229f5d456591ed2a2f027c46", "html_url": "https://github.com/rust-lang/rust/commit/e54494727855cd14229f5d456591ed2a2f027c46"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "84487c40f874508f4d6ad469d941139d1109266f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "patch": "@@ -3859,15 +3859,15 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprKind::Call(f, args.iter().map(|x| self.lower_expr(x)).collect())\n             }\n             ExprKind::MethodCall(ref seg, ref args) => {\n-                let hir_seg = self.lower_path_segment(\n+                let hir_seg = P(self.lower_path_segment(\n                     e.span,\n                     seg,\n                     ParamMode::Optional,\n                     0,\n                     ParenthesizedGenericArgs::Err,\n                     ImplTraitContext::disallowed(),\n                     None,\n-                );\n+                ));\n                 let args = args.iter().map(|x| self.lower_expr(x)).collect();\n                 hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n             }\n@@ -4148,7 +4148,7 @@ impl<'a> LoweringContext<'a> {\n                     node: if is_unit {\n                         hir::ExprKind::Path(struct_path)\n                     } else {\n-                        hir::ExprKind::Struct(struct_path, fields, None)\n+                        hir::ExprKind::Struct(P(struct_path), fields, None)\n                     },\n                     span: e.span,\n                     attrs: e.attrs.clone(),\n@@ -4220,13 +4220,13 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprKind::InlineAsm(P(hir_asm), outputs, inputs)\n             }\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => hir::ExprKind::Struct(\n-                self.lower_qpath(\n+                P(self.lower_qpath(\n                     e.id,\n                     &None,\n                     path,\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n-                ),\n+                )),\n                 fields.iter().map(|x| self.lower_field(x)).collect(),\n                 maybe_expr.as_ref().map(|x| P(self.lower_expr(x))),\n             ),"}, {"sha": "e389b918d3c35b348c87de2d6403393bcf129d92", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "patch": "@@ -1319,6 +1319,10 @@ pub struct Expr {\n     pub hir_id: HirId,\n }\n \n+// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 72);\n+\n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.node {\n@@ -1438,7 +1442,7 @@ pub enum ExprKind {\n     /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n-    MethodCall(PathSegment, Span, HirVec<Expr>),\n+    MethodCall(P<PathSegment>, Span, HirVec<Expr>),\n     /// A tuple (e.g., `(a, b, c ,d)`).\n     Tup(HirVec<Expr>),\n     /// A binary operation (e.g., `a + b`, `a * b`).\n@@ -1506,7 +1510,7 @@ pub enum ExprKind {\n     ///\n     /// For example, `Foo {x: 1, y: 2}`, or\n     /// `Foo {x: 1, .. base}`, where `base` is the `Option<Expr>`.\n-    Struct(QPath, HirVec<Field>, Option<P<Expr>>),\n+    Struct(P<QPath>, HirVec<Field>, Option<P<Expr>>),\n \n     /// An array literal constructed from one repeated element.\n     ///"}, {"sha": "8ab9a8e8dda86484356ea118ca322675e466888b", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "patch": "@@ -614,11 +614,16 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     Some(def) if def != HirDef::Err => def,\n                     _ => self.get_path_def(self.tcx.hir().get_parent_node(id)),\n                 }\n-            },\n+            }\n+\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Struct(ref qpath, ..),\n                 ..\n-            }) |\n+            }) => {\n+                let hir_id = self.tcx.hir().node_to_hir_id(id);\n+                self.tables.qpath_def(qpath, hir_id)\n+            }\n+\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Path(ref qpath),\n                 .."}, {"sha": "f6a0fd5caccdb2bb035ede154598da47f335deda", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d65e8cc7aec3cdcd99367c58367a16c99a8ae22/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5d65e8cc7aec3cdcd99367c58367a16c99a8ae22", "patch": "@@ -430,7 +430,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match expr.node {\n             // All built-in range literals but `..=` and `..` desugar to Structs\n-            ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n+            ExprKind::Struct(ref qpath, _, _) => {\n+                if let QPath::Resolved(None, ref path) = **qpath {\n+                    return is_range_path(&path) && span_is_range_literal(&expr.span);\n+                }\n+            }\n             // `..` desugars to its struct path\n             ExprKind::Path(QPath::Resolved(None, ref path)) => {\n                 return is_range_path(&path) && span_is_range_literal(&expr.span);"}]}