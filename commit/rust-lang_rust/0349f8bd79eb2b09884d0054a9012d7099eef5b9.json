{"sha": "0349f8bd79eb2b09884d0054a9012d7099eef5b9", "node_id": "C_kwDOAAsO6NoAKDAzNDlmOGJkNzllYjJiMDk4ODRkMDA1NGE5MDEyZDcwOTllZWY1Yjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-02T15:36:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-02T15:39:13Z"}, "message": "Use a yes/no enum instead of a bool.\n\nThe bool's meaning wasn't obvious to me at some call sites.", "tree": {"sha": "0ab21595c21f75de20c5a20a2debf0b47db37da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab21595c21f75de20c5a20a2debf0b47db37da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0349f8bd79eb2b09884d0054a9012d7099eef5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0349f8bd79eb2b09884d0054a9012d7099eef5b9", "html_url": "https://github.com/rust-lang/rust/commit/0349f8bd79eb2b09884d0054a9012d7099eef5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0349f8bd79eb2b09884d0054a9012d7099eef5b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542898328637b31412d91b882ce0dc4b85ad54e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/542898328637b31412d91b882ce0dc4b85ad54e6", "html_url": "https://github.com/rust-lang/rust/commit/542898328637b31412d91b882ce0dc4b85ad54e6"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "baaab33d71f50feff18adcdf53f8b340e97c9ac4", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0349f8bd79eb2b09884d0054a9012d7099eef5b9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0349f8bd79eb2b09884d0054a9012d7099eef5b9/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=0349f8bd79eb2b09884d0054a9012d7099eef5b9", "patch": "@@ -1179,7 +1179,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.generic_const_exprs) {\n+                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n                                 // this and then enforce the self type to be concrete later on.\n@@ -1267,7 +1267,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial || features.generic_const_exprs) {\n+                            if !(trivial == HasGenericParams::Yes || features.generic_const_exprs) {\n                                 if let Some(span) = finalize {\n                                     self.report_error(\n                                         span,"}, {"sha": "8b065fb036b0f0c36a2c7a2c6d186fcce7ffd664", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0349f8bd79eb2b09884d0054a9012d7099eef5b9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0349f8bd79eb2b09884d0054a9012d7099eef5b9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=0349f8bd79eb2b09884d0054a9012d7099eef5b9", "patch": "@@ -94,6 +94,12 @@ crate enum HasGenericParams {\n     No,\n }\n \n+impl HasGenericParams {\n+    fn force_yes_if(self, b: bool) -> Self {\n+        if b { Self::Yes } else { self }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n crate enum ConstantItemKind {\n     Const,\n@@ -125,9 +131,9 @@ crate enum RibKind<'a> {\n \n     /// We're in a constant item. Can't refer to dynamic stuff.\n     ///\n-    /// The `bool` indicates if this constant may reference generic parameters\n-    /// and is used to only allow generic parameters to be used in trivial constant expressions.\n-    ConstantItemRibKind(bool, Option<(Ident, ConstantItemKind)>),\n+    /// The item may reference generic parameters in trivial constant expressions.\n+    /// All other constants aren't allowed to use generic params at all.\n+    ConstantItemRibKind(HasGenericParams, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -826,19 +832,24 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // Note that we might not be inside of an repeat expression here,\n                             // but considering that `IsRepeatExpr` is only relevant for\n                             // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(IsRepeatExpr::No, true, None, |this| {\n-                                this.smart_resolve_path(\n-                                    ty.id,\n-                                    qself.as_ref(),\n-                                    path,\n-                                    PathSource::Expr(None),\n-                                );\n-\n-                                if let Some(ref qself) = *qself {\n-                                    this.visit_ty(&qself.ty);\n-                                }\n-                                this.visit_path(path, ty.id);\n-                            });\n+                            self.with_constant_rib(\n+                                IsRepeatExpr::No,\n+                                HasGenericParams::Yes,\n+                                None,\n+                                |this| {\n+                                    this.smart_resolve_path(\n+                                        ty.id,\n+                                        qself.as_ref(),\n+                                        path,\n+                                        PathSource::Expr(None),\n+                                    );\n+\n+                                    if let Some(ref qself) = *qself {\n+                                        this.visit_ty(&qself.ty);\n+                                    }\n+                                    this.visit_path(path, ty.id);\n+                                },\n+                            );\n \n                             self.diagnostic_metadata.currently_processing_generics = prev;\n                             return;\n@@ -1688,7 +1699,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // not used as part of the type system, this is far less surprising.\n                                                     this.with_constant_rib(\n                                                         IsRepeatExpr::No,\n-                                                        true,\n+                                                        HasGenericParams::Yes,\n                                                         None,\n                                                         |this| this.visit_expr(expr),\n                                                     );\n@@ -1767,7 +1778,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         // so it doesn't matter whether this is a trivial constant.\n                         this.with_constant_rib(\n                             IsRepeatExpr::No,\n-                            true,\n+                            HasGenericParams::Yes,\n                             Some((item.ident, constant_item_kind)),\n                             |this| this.visit_expr(expr),\n                         );\n@@ -1913,20 +1924,23 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     // Note that we intentionally still forbid `[0; N + 1]` during\n     // name resolution so that we don't extend the future\n     // compat lint to new cases.\n+    #[instrument(level = \"debug\", skip(self, f))]\n     fn with_constant_rib(\n         &mut self,\n         is_repeat: IsRepeatExpr,\n-        is_trivial: bool,\n+        may_use_generics: HasGenericParams,\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n-        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial, item), |this| {\n+        self.with_rib(ValueNS, ConstantItemRibKind(may_use_generics, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial, item),\n+                ConstantItemRibKind(\n+                    may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n+                    item,\n+                ),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(is_trivial, item), f);\n+                    this.with_label_rib(ConstantItemRibKind(may_use_generics, item), f);\n                 },\n             )\n         });\n@@ -2068,7 +2082,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                         // not used as part of the type system, this is far less surprising.\n                                                         this.with_constant_rib(\n                                                             IsRepeatExpr::No,\n-                                                            true,\n+                                                            HasGenericParams::Yes,\n                                                             None,\n                                                             |this| {\n                                                                 visit::walk_assoc_item(\n@@ -3081,7 +3095,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"resolve_anon_const {:?} is_repeat: {:?}\", constant, is_repeat);\n         self.with_constant_rib(\n             is_repeat,\n-            constant.value.is_potential_trivial_const_param(),\n+            if constant.value.is_potential_trivial_const_param() {\n+                HasGenericParams::Yes\n+            } else {\n+                HasGenericParams::No\n+            },\n             None,\n             |this| visit::walk_anon_const(this, constant),\n         );\n@@ -3184,7 +3202,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     if const_args.contains(&idx) {\n                         self.with_constant_rib(\n                             IsRepeatExpr::No,\n-                            argument.is_potential_trivial_const_param(),\n+                            if argument.is_potential_trivial_const_param() {\n+                                HasGenericParams::Yes\n+                            } else {\n+                                HasGenericParams::No\n+                            },\n                             None,\n                             |this| {\n                                 this.resolve_expr(argument, None);"}]}