{"sha": "1329dd4e287c137ec0a90abeec0272275b2b2c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjlkZDRlMjg3YzEzN2VjMGE5MGFiZWVjMDI3MjI3NWIyYjJjOGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T12:18:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T12:18:43Z"}, "message": "Avoid clones", "tree": {"sha": "d924f7bcc28b9c46d1643d54c5a2f109d19b2977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d924f7bcc28b9c46d1643d54c5a2f109d19b2977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1329dd4e287c137ec0a90abeec0272275b2b2c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1329dd4e287c137ec0a90abeec0272275b2b2c8d", "html_url": "https://github.com/rust-lang/rust/commit/1329dd4e287c137ec0a90abeec0272275b2b2c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1329dd4e287c137ec0a90abeec0272275b2b2c8d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80be61ed78e8410e013cb94879435d54a4907c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/80be61ed78e8410e013cb94879435d54a4907c30", "html_url": "https://github.com/rust-lang/rust/commit/80be61ed78e8410e013cb94879435d54a4907c30"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b250170456c61f59b518a63d063f0089aa3f92f4", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=1329dd4e287c137ec0a90abeec0272275b2b2c8d", "patch": "@@ -51,7 +51,7 @@ pub fn run_server(\n pub fn handle_shutdown(req: RawRequest, sender: &Sender<RawMessage>) -> Option<RawRequest> {\n     match req.cast::<Shutdown>() {\n         Ok((id, ())) => {\n-            let resp = RawResponse::ok::<Shutdown>(id, ());\n+            let resp = RawResponse::ok::<Shutdown>(id, &());\n             sender.send(RawMessage::Response(resp));\n             None\n         }\n@@ -72,7 +72,7 @@ fn initialize(\n         msg =>\n             bail!(\"expected initialize request, got {:?}\", msg),\n     };\n-    let resp = RawResponse::ok::<Initialize>(id, InitializeResult { capabilities: caps });\n+    let resp = RawResponse::ok::<Initialize>(id, &InitializeResult { capabilities: caps });\n     sender.send(RawMessage::Response(resp));\n     match receiver.recv() {\n         Some(RawMessage::Notification(n)) => {"}, {"sha": "7fcac6f6d38272317b9c3480002cb212284fb940", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=1329dd4e287c137ec0a90abeec0272275b2b2c8d", "patch": "@@ -88,15 +88,15 @@ impl RawMessage {\n }\n \n impl RawRequest {\n-    pub fn new<R>(id: u64, params: R::Params) -> RawRequest\n+    pub fn new<R>(id: u64, params: &R::Params) -> RawRequest\n     where\n         R: Request,\n         R::Params: Serialize,\n     {\n         RawRequest {\n             id: id,\n             method: R::METHOD.to_string(),\n-            params: to_value(&params).unwrap(),\n+            params: to_value(params).unwrap(),\n         }\n     }\n     pub fn cast<R>(self) -> ::std::result::Result<(u64, R::Params), RawRequest>\n@@ -114,7 +114,7 @@ impl RawRequest {\n }\n \n impl RawResponse {\n-    pub fn ok<R>(id: u64, result: R::Result) -> RawResponse\n+    pub fn ok<R>(id: u64, result: &R::Result) -> RawResponse\n     where R: Request,\n           R::Result: Serialize,\n     {\n@@ -135,14 +135,14 @@ impl RawResponse {\n }\n \n impl RawNotification {\n-    pub fn new<N>(params: N::Params) -> RawNotification\n+    pub fn new<N>(params: &N::Params) -> RawNotification\n     where\n         N: Notification,\n         N::Params: Serialize,\n     {\n         RawNotification {\n             method: N::METHOD.to_string(),\n-            params: to_value(&params).unwrap(),\n+            params: to_value(params).unwrap(),\n         }\n     }\n     pub fn cast<N>(self) -> ::std::result::Result<N::Params, RawNotification>"}, {"sha": "bb1d638e0f05c14e1dc81dcae648519258072936", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=1329dd4e287c137ec0a90abeec0272275b2b2c8d", "patch": "@@ -130,7 +130,7 @@ fn main_loop_inner(\n             Event::Ws(ws) => {\n                 match ws {\n                     Ok(ws) => {\n-                        let not = RawNotification::new::<req::DidReloadWorkspace>(vec![ws.clone()]);\n+                        let not = RawNotification::new::<req::DidReloadWorkspace>(&vec![ws.clone()]);\n                         msg_sender.send(RawMessage::Notification(not));\n                         state.set_workspaces(vec![ws]);\n                         state_changed = true;\n@@ -288,7 +288,7 @@ fn on_notification(\n             let file_id = state.remove_mem_file(path.as_path())?;\n             subs.remove_sub(file_id);\n             let params = req::PublishDiagnosticsParams { uri, diagnostics: Vec::new() };\n-            let not = RawNotification::new::<req::PublishDiagnostics>(params);\n+            let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n             msg_sender.send(RawMessage::Notification(not));\n             return Ok(())\n         }\n@@ -326,7 +326,7 @@ impl<'a> PoolDispatcher<'a> {\n                 let sender = self.sender.clone();\n                 self.pool.execute(move || {\n                     let resp = match f(world, params, token) {\n-                        Ok(resp) => RawResponse::ok::<R>(id, resp),\n+                        Ok(resp) => RawResponse::ok::<R>(id, &resp),\n                         Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string()),\n                     };\n                     let task = Task::Respond(resp);\n@@ -363,7 +363,7 @@ fn update_file_notifications_on_threadpool(\n                     error!(\"failed to compute diagnostics: {:?}\", e)\n                 }\n                 Ok(params) => {\n-                    let not = RawNotification::new::<req::PublishDiagnostics>(params);\n+                    let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n                     sender.send(Task::Notify(not));\n                 }\n             }\n@@ -372,7 +372,7 @@ fn update_file_notifications_on_threadpool(\n                     error!(\"failed to compute decorations: {:?}\", e)\n                 }\n                 Ok(params) => {\n-                    let not = RawNotification::new::<req::PublishDecorations>(params);\n+                    let not = RawNotification::new::<req::PublishDecorations>(&params);\n                     sender.send(Task::Notify(not))\n                 }\n             }"}, {"sha": "76cbd56ea3fdb02a37ff1b7b6c9ec3c2302bd48a", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1329dd4e287c137ec0a90abeec0272275b2b2c8d/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=1329dd4e287c137ec0a90abeec0272275b2b2c8d", "patch": "@@ -83,7 +83,7 @@ impl Server {\n         };\n         for (path, text) in files {\n             res.send_notification(RawNotification::new::<DidOpenTextDocument>(\n-                DidOpenTextDocumentParams {\n+                &DidOpenTextDocumentParams {\n                     text_document: TextDocumentItem {\n                         uri: Url::from_file_path(path).unwrap(),\n                         language_id: \"rust\".to_string(),\n@@ -149,7 +149,7 @@ impl Server {\n         R: Request,\n         R::Params: Serialize,\n     {\n-        let r = RawRequest::new::<R>(id, params);\n+        let r = RawRequest::new::<R>(id, &params);\n         self.sender.as_ref()\n             .unwrap()\n             .send(RawMessage::Request(r));"}]}