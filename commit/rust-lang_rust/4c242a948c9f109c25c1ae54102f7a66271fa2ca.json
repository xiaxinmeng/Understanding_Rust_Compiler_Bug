{"sha": "4c242a948c9f109c25c1ae54102f7a66271fa2ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjQyYTk0OGM5ZjEwOWMyNWMxYWU1NDEwMmY3YTY2MjcxZmEyY2E=", "commit": {"author": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T14:21:15Z"}, "committer": {"name": "Cedric", "email": "cedric.brancourt@gmail.com", "date": "2019-06-08T14:21:15Z"}, "message": "cast vec to slices", "tree": {"sha": "762bc92a158b6ef0e3093115e7bcb625133e6a30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762bc92a158b6ef0e3093115e7bcb625133e6a30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c242a948c9f109c25c1ae54102f7a66271fa2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c242a948c9f109c25c1ae54102f7a66271fa2ca", "html_url": "https://github.com/rust-lang/rust/commit/4c242a948c9f109c25c1ae54102f7a66271fa2ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c242a948c9f109c25c1ae54102f7a66271fa2ca/comments", "author": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Electron-libre", "id": 5979, "node_id": "MDQ6VXNlcjU5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Electron-libre", "html_url": "https://github.com/Electron-libre", "followers_url": "https://api.github.com/users/Electron-libre/followers", "following_url": "https://api.github.com/users/Electron-libre/following{/other_user}", "gists_url": "https://api.github.com/users/Electron-libre/gists{/gist_id}", "starred_url": "https://api.github.com/users/Electron-libre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Electron-libre/subscriptions", "organizations_url": "https://api.github.com/users/Electron-libre/orgs", "repos_url": "https://api.github.com/users/Electron-libre/repos", "events_url": "https://api.github.com/users/Electron-libre/events{/privacy}", "received_events_url": "https://api.github.com/users/Electron-libre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd442a1fcfba98be5454c2ca6f56bce098e458ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd442a1fcfba98be5454c2ca6f56bce098e458ed", "html_url": "https://github.com/rust-lang/rust/commit/dd442a1fcfba98be5454c2ca6f56bce098e458ed"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ebe5e70d1a7a42b87434dd1cf3cb64e07b518bd6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c242a948c9f109c25c1ae54102f7a66271fa2ca/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c242a948c9f109c25c1ae54102f7a66271fa2ca/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4c242a948c9f109c25c1ae54102f7a66271fa2ca", "patch": "@@ -425,23 +425,23 @@ mod tests {\n             let tts: &[TokenTree] = &tts[..];\n \n             match tts {\n-                &[\n+                [\n                     TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }),\n                     TokenTree::Token(Token { kind: token::Not, .. }),\n                     TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }),\n-                    TokenTree::Delimited(_, macro_delim, ref macro_tts)\n+                    TokenTree::Delimited(_, macro_delim,  macro_tts)\n                 ]\n                 if name_macro_rules == sym::macro_rules && name_zip.as_str() == \"zip\" => {\n                     let tts = &macro_tts.trees().collect::<Vec<_>>();\n-                    match tts {\n+                    match &tts[..] {\n                         [\n                             TokenTree::Delimited(_, first_delim, first_tts),\n                             TokenTree::Token(Token { kind: token::FatArrow, .. }),\n                             TokenTree::Delimited(_, second_delim, second_tts),\n                         ]\n                         if macro_delim == token::Paren => {\n                             let tts = &first_tts.trees().collect::<Vec<_>>();\n-                            match tts {\n+                            match &tts[..] {\n                                 [\n                                     TokenTree::Token(Token { kind: token::Dollar, .. }),\n                                     TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n@@ -450,7 +450,7 @@ mod tests {\n                                 _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                             }\n                             let tts = &second_tts.trees().collect::<Vec<_>>();\n-                            match tts {\n+                            match &tts[..] {\n                                 [\n                                     TokenTree::Token(Token { kind: token::Dollar, .. }),\n                                     TokenTree::Token(Token { kind: token::Ident(name, false), .. }),"}]}