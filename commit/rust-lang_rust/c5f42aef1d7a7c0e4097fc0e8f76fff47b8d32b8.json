{"sha": "c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZjQyYWVmMWQ3YTdjMGU0MDk3ZmMwZThmNzZmZmY0N2I4ZDMyYjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-28T10:36:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Run dead stack_store removal after stack_store to stack_load forwarding", "tree": {"sha": "20cac096ca8bcb27d771e23eb4c64095b1805997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cac096ca8bcb27d771e23eb4c64095b1805997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8", "html_url": "https://github.com/rust-lang/rust/commit/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d35db53196f5170374482700a71ffee51186c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d35db53196f5170374482700a71ffee51186c10", "html_url": "https://github.com/rust-lang/rust/commit/7d35db53196f5170374482700a71ffee51186c10"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "edf507b9760ba70650edb9df470e5078ffd248ae", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=c5f42aef1d7a7c0e4097fc0e8f76fff47b8d32b8", "patch": "@@ -84,58 +84,55 @@ pub(super) fn optimize_function(\n             continue;\n         }\n \n-        let is_loaded = users.stack_load.is_empty().not();\n-        let is_stored = users.stack_store.is_empty().not();\n-        match (is_loaded, is_stored) {\n-            (true, true) => {\n-                for load in users.stack_load.clone().drain() {\n-                    let load_ebb = func.layout.inst_ebb(load).unwrap();\n-                    let loaded_value = func.dfg.inst_results(load)[0];\n-                    let loaded_type = func.dfg.value_type(loaded_value);\n-\n-                    let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n-                        match spatial_overlap(func, load, store) {\n-                            SpatialOverlap::No => false, // Can never be the source of the loaded value.\n-                            SpatialOverlap::Partial | SpatialOverlap::Full => true,\n-                        }\n-                    }).filter(|&store| {\n-                        if load_ebb == func.layout.inst_ebb(store).unwrap() {\n-                            func.layout.cmp(store, load) == std::cmp::Ordering::Less\n-                        } else {\n-                            true // FIXME\n-                        }\n-                    }).collect::<Vec<Inst>>();\n-                    for &store in &potential_stores {\n-                        println!(\"Potential store -> load forwarding {} -> {} ({:?})\", func.dfg.display_inst(store, None), func.dfg.display_inst(load, None), spatial_overlap(func, load, store));\n-                    }\n-                    match *potential_stores {\n-                        [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n-                        [store] if spatial_overlap(func, load, store) == SpatialOverlap::Full => {\n-                            let store_ebb = func.layout.inst_ebb(store).unwrap();\n-                            let stored_value = func.dfg.inst_args(store)[0];\n-                            let stored_type = func.dfg.value_type(stored_value);\n-                            if stored_type == loaded_type && store_ebb == load_ebb {\n-                                println!(\"Store to load forward {} -> {}\", store, load);\n-                                func.dfg.detach_results(load);\n-                                func.dfg.replace(load).nop();\n-                                func.dfg.change_to_alias(loaded_value, stored_value);\n-                            }\n-                        }\n-                        _ => {} // FIXME implement this\n-                    }\n+        for load in users.stack_load.clone().drain() {\n+            let load_ebb = func.layout.inst_ebb(load).unwrap();\n+            let loaded_value = func.dfg.inst_results(load)[0];\n+            let loaded_type = func.dfg.value_type(loaded_value);\n+\n+            let potential_stores = users.stack_store.iter().cloned().filter(|&store| {\n+                match spatial_overlap(func, load, store) {\n+                    SpatialOverlap::No => false, // Can never be the source of the loaded value.\n+                    SpatialOverlap::Partial | SpatialOverlap::Full => true,\n+                }\n+            }).filter(|&store| {\n+                if load_ebb == func.layout.inst_ebb(store).unwrap() {\n+                    func.layout.cmp(store, load) == std::cmp::Ordering::Less\n+                } else {\n+                    true // FIXME\n                 }\n+            }).collect::<Vec<Inst>>();\n+            for &store in &potential_stores {\n+                println!(\"Potential store -> load forwarding {} -> {} ({:?})\", func.dfg.display_inst(store, None), func.dfg.display_inst(load, None), spatial_overlap(func, load, store));\n             }\n-            (true, false) => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n-            (false, _) => {\n-                // Never loaded; can safely remove all stores and the stack slot.\n-                for user in users.stack_store.drain() {\n-                    println!(\"[{}] Remove dead stack store {} of {}\", name, user, stack_slot.0);\n-                    func.dfg.replace(user).nop();\n+            match *potential_stores {\n+                [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n+                [store] if spatial_overlap(func, load, store) == SpatialOverlap::Full => {\n+                    let store_ebb = func.layout.inst_ebb(store).unwrap();\n+                    let stored_value = func.dfg.inst_args(store)[0];\n+                    let stored_type = func.dfg.value_type(stored_value);\n+                    if stored_type == loaded_type && store_ebb == load_ebb {\n+                        println!(\"Store to load forward {} -> {}\", store, load);\n+                        func.dfg.detach_results(load);\n+                        func.dfg.replace(load).nop();\n+                        func.dfg.change_to_alias(loaded_value, stored_value);\n+                        users.stack_load.remove(&load);\n+                    }\n                 }\n+                _ => {} // FIXME implement this\n+            }\n+        }\n \n-                // FIXME make stack_slot zero sized.\n+        if users.stack_load.is_empty() {\n+            // Never loaded; can safely remove all stores and the stack slot.\n+            for user in users.stack_store.drain() {\n+                println!(\"[{}] Remove dead stack store {} of {}\", name, user, stack_slot.0);\n+                func.dfg.replace(user).nop();\n             }\n         }\n+\n+        if users.stack_store.is_empty() && users.stack_load.is_empty() {\n+            // FIXME make stack_slot zero sized.\n+        }\n     }\n \n     println!();"}]}