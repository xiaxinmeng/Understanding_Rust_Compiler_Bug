{"sha": "3a37ed4412f571a079e9d365c226af23dfe9d224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzdlZDQ0MTJmNTcxYTA3OWU5ZDM2NWMyMjZhZjIzZGZlOWQyMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T17:46:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T17:46:32Z"}, "message": "auto merge of #15806 : treeman/rust/std-doc, r=alexcrichton\n\nUsed `HashMap` and `HashSet` as the base of most examples. Could change it up with different containers, but I don't think it's a big deal.", "tree": {"sha": "f48e9830acac7ba44eceec27da67ca7685e32291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48e9830acac7ba44eceec27da67ca7685e32291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a37ed4412f571a079e9d365c226af23dfe9d224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a37ed4412f571a079e9d365c226af23dfe9d224", "html_url": "https://github.com/rust-lang/rust/commit/3a37ed4412f571a079e9d365c226af23dfe9d224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a37ed4412f571a079e9d365c226af23dfe9d224/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df997e53afa442cd571100e40c1a22c12a956e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/df997e53afa442cd571100e40c1a22c12a956e40", "html_url": "https://github.com/rust-lang/rust/commit/df997e53afa442cd571100e40c1a22c12a956e40"}, {"sha": "41729b83bc3bf93cfb9cf727b64f5c3a2b35cefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/41729b83bc3bf93cfb9cf727b64f5c3a2b35cefe", "html_url": "https://github.com/rust-lang/rust/commit/41729b83bc3bf93cfb9cf727b64f5c3a2b35cefe"}], "stats": {"total": 209, "additions": 203, "deletions": 6}, "files": [{"sha": "d3c0c8856bd47d5b653c7dcff6d418316501d1ff", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 179, "deletions": 6, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3a37ed4412f571a079e9d365c226af23dfe9d224", "patch": "@@ -73,16 +73,46 @@ mod deque;\n /// A trait to represent mutable containers\n pub trait Mutable: Collection {\n     /// Clear the container, removing all values.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut v = vec![1i, 2, 3];\n+    /// v.clear();\n+    /// assert!(v.is_empty());\n+    /// ```\n     fn clear(&mut self);\n }\n \n /// A map is a key-value store where values may be looked up by their keys. This\n /// trait provides basic operations to operate on these stores.\n pub trait Map<K, V>: Collection {\n-    /// Return a reference to the value corresponding to the key\n+    /// Return a reference to the value corresponding to the key.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1i);\n+    /// assert_eq!(map.find(&\"a\"), Some(&1i));\n+    /// assert_eq!(map.find(&\"b\"), None);\n+    /// ```\n     fn find<'a>(&'a self, key: &K) -> Option<&'a V>;\n \n-    /// Return true if the map contains a value for the specified key\n+    /// Return true if the map contains a value for the specified key.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1i);\n+    /// assert_eq!(map.contains_key(&\"a\"), true);\n+    /// assert_eq!(map.contains_key(&\"b\"), false);\n+    /// ```\n     #[inline]\n     fn contains_key(&self, key: &K) -> bool {\n         self.find(key).is_some()\n@@ -94,45 +124,164 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// assert_eq!(map.insert(\"key\", 2i), true);\n+    /// assert_eq!(map.insert(\"key\", 9i), false);\n+    /// assert_eq!(map.get(&\"key\"), &9i);\n+    /// ```\n     #[inline]\n     fn insert(&mut self, key: K, value: V) -> bool {\n         self.swap(key, value).is_none()\n     }\n \n     /// Remove a key-value pair from the map. Return true if the key\n     /// was present in the map, otherwise false.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// assert_eq!(map.remove(&\"key\"), false);\n+    /// map.insert(\"key\", 2i);\n+    /// assert_eq!(map.remove(&\"key\"), true);\n+    /// ```\n     #[inline]\n     fn remove(&mut self, key: &K) -> bool {\n         self.pop(key).is_some()\n     }\n \n     /// Insert a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise None is returned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// assert_eq!(map.swap(\"a\", 37i), None);\n+    /// assert_eq!(map.is_empty(), false);\n+    ///\n+    /// map.insert(\"a\", 1i);\n+    /// assert_eq!(map.swap(\"a\", 37i), Some(1i));\n+    /// assert_eq!(map.get(&\"a\"), &37i);\n+    /// ```\n     fn swap(&mut self, k: K, v: V) -> Option<V>;\n \n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, int> = HashMap::new();\n+    /// map.insert(\"a\", 1i);\n+    /// assert_eq!(map.pop(&\"a\"), Some(1i));\n+    /// assert_eq!(map.pop(&\"a\"), None);\n+    /// ```\n     fn pop(&mut self, k: &K) -> Option<V>;\n \n-    /// Return a mutable reference to the value corresponding to the key\n+    /// Return a mutable reference to the value corresponding to the key.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map = HashMap::new();\n+    /// map.insert(\"a\", 1i);\n+    /// match map.find_mut(&\"a\") {\n+    ///     Some(x) => *x = 7i,\n+    ///     None => (),\n+    /// }\n+    /// assert_eq!(map.get(&\"a\"), &7i);\n+    /// ```\n     fn find_mut<'a>(&'a mut self, key: &K) -> Option<&'a mut V>;\n }\n \n /// A set is a group of objects which are each distinct from one another. This\n /// trait represents actions which can be performed on sets to iterate over\n /// them.\n pub trait Set<T>: Collection {\n-    /// Return true if the set contains a value\n+    /// Return true if the set contains a value.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let set: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// assert_eq!(set.contains(&1), true);\n+    /// assert_eq!(set.contains(&4), false);\n+    /// ```\n     fn contains(&self, value: &T) -> bool;\n \n     /// Return true if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// let mut b: HashSet<int> = HashSet::new();\n+    ///\n+    /// assert_eq!(a.is_disjoint(&b), true);\n+    /// b.insert(4);\n+    /// assert_eq!(a.is_disjoint(&b), true);\n+    /// b.insert(1);\n+    /// assert_eq!(a.is_disjoint(&b), false);\n+    /// ```\n     fn is_disjoint(&self, other: &Self) -> bool;\n \n-    /// Return true if the set is a subset of another\n+    /// Return true if the set is a subset of another.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let sup: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n+    /// let mut set: HashSet<int> = HashSet::new();\n+    ///\n+    /// assert_eq!(set.is_subset(&sup), true);\n+    /// set.insert(2);\n+    /// assert_eq!(set.is_subset(&sup), true);\n+    /// set.insert(4);\n+    /// assert_eq!(set.is_subset(&sup), false);\n+    /// ```\n     fn is_subset(&self, other: &Self) -> bool;\n \n-    /// Return true if the set is a superset of another\n+    /// Return true if the set is a superset of another.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let sub: HashSet<int> = [1i, 2].iter().map(|&x| x).collect();\n+    /// let mut set: HashSet<int> = HashSet::new();\n+    ///\n+    /// assert_eq!(set.is_superset(&sub), false);\n+    ///\n+    /// set.insert(0);\n+    /// set.insert(1);\n+    /// assert_eq!(set.is_superset(&sub), false);\n+    ///\n+    /// set.insert(2);\n+    /// assert_eq!(set.is_superset(&sub), true);\n+    /// ```\n     fn is_superset(&self, other: &Self) -> bool {\n         other.is_subset(self)\n     }\n@@ -145,10 +294,34 @@ pub trait Set<T>: Collection {\n pub trait MutableSet<T>: Set<T> + Mutable {\n     /// Add a value to the set. Return true if the value was not already\n     /// present in the set.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::new();\n+    ///\n+    /// assert_eq!(set.insert(2i), true);\n+    /// assert_eq!(set.insert(2i), false);\n+    /// assert_eq!(set.len(), 1);\n+    /// ```\n     fn insert(&mut self, value: T) -> bool;\n \n     /// Remove a value from the set. Return true if the value was\n     /// present in the set.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::new();\n+    ///\n+    /// set.insert(2i);\n+    /// assert_eq!(set.remove(&2), true);\n+    /// assert_eq!(set.remove(&2), false);\n+    /// ```\n     fn remove(&mut self, value: &T) -> bool;\n }\n "}, {"sha": "7d87e03c134102724ea3d2956729bf6b2114314b", "filename": "src/libcore/collections.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcore%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcore%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcollections.rs?ref=3a37ed4412f571a079e9d365c226af23dfe9d224", "patch": "@@ -14,9 +14,23 @@\n /// knowledge known is the number of elements contained within.\n pub trait Collection {\n     /// Return the number of elements in the container\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let a = [1i, 2, 3];\n+    /// assert_eq!(a.len(), 3);\n+    /// ```\n     fn len(&self) -> uint;\n \n     /// Return true if the container contains no elements\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let s = String::new();\n+    /// assert!(s.is_empty());\n+    /// ```\n     #[inline]\n     fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "4de2384d23dc30b1f57ed2aea5b56ab98dc5d73b", "filename": "src/libcore/default.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37ed4412f571a079e9d365c226af23dfe9d224/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=3a37ed4412f571a079e9d365c226af23dfe9d224", "patch": "@@ -15,6 +15,16 @@\n /// A trait that types which have a useful default value should implement.\n pub trait Default {\n     /// Return the \"default value\" for a type.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::default::Default;\n+    ///\n+    /// let i: i8 = Default::default();\n+    /// let (x, y): (Option<String>, f64) = Default::default();\n+    /// let (a, b, (c, d)): (int, uint, (bool, bool)) = Default::default();\n+    /// ```\n     fn default() -> Self;\n }\n "}]}