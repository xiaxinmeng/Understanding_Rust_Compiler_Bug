{"sha": "96ea142c89ad34c00d803d91ee0b08689599c65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZWExNDJjODlhZDM0YzAwZDgwM2Q5MWVlMGIwODY4OTU5OWM2NWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T18:42:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T08:03:16Z"}, "message": "make alloc_extra machine hook a bit nicer", "tree": {"sha": "2d8ad2b9059fcf93c35424915a9bc0657486b95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d8ad2b9059fcf93c35424915a9bc0657486b95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ea142c89ad34c00d803d91ee0b08689599c65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ea142c89ad34c00d803d91ee0b08689599c65d", "html_url": "https://github.com/rust-lang/rust/commit/96ea142c89ad34c00d803d91ee0b08689599c65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ea142c89ad34c00d803d91ee0b08689599c65d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8743dbe51ca28f1d77cc310178f75af072e97be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8743dbe51ca28f1d77cc310178f75af072e97be", "html_url": "https://github.com/rust-lang/rust/commit/c8743dbe51ca28f1d77cc310178f75af072e97be"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "ef6e34c3dd0afc539df991d2330b4f4990cc9364", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=96ea142c89ad34c00d803d91ee0b08689599c65d", "patch": "@@ -457,14 +457,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         _memory_extra: &(),\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n+    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n         // We do not use a tag so we can just cheaply forward the allocation\n-        (alloc, ())\n+        alloc\n     }\n \n     #[inline(always)]"}, {"sha": "16ebf2a34a0bf37a660137415b9f6464fe1652ed", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=96ea142c89ad34c00d803d91ee0b08689599c65d", "patch": "@@ -250,6 +250,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.force_bits(scalar, size)\n     }\n \n+    /// Call this to turn untagged \"global\" pointers (obtained via `tcx`) into\n+    /// the *canonical* machine pointer to the allocation. This represents a *direct*\n+    /// access to that memory, as opposed to access through a pointer that was created\n+    /// by the program. Must never be used for derived (program-created) pointers!\n     #[inline(always)]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n         self.memory.tag_static_base_pointer(ptr)"}, {"sha": "0bdb21720342049d3283a76a111ab7d3ec22ff46", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=96ea142c89ad34c00d803d91ee0b08689599c65d", "patch": "@@ -240,15 +240,12 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// allocation (because a copy had to be done to add tags or metadata), machine memory will\n     /// cache the result. (This relies on `AllocMap::get_or` being able to add the\n     /// owned allocation to the map even when the map is shared.)\n-    ///\n-    /// For static allocations, the tag returned must be the same as the one returned by\n-    /// `tag_static_base_pointer`.\n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         memory_extra: &Self::MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-    ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n+    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>;\n \n     /// Return the \"base\" tag for the given static allocation: the one that is used for direct\n     /// accesses to this static/const/fn allocation."}, {"sha": "8aaaa2c22fe7718cbd43fb9e2654f489aa0fb5b7", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=96ea142c89ad34c00d803d91ee0b08689599c65d", "patch": "@@ -143,6 +143,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Call this to turn untagged \"global\" pointers (obtained via `tcx`) into\n+    /// the *canonical* machine pointer to the allocation. This represents a *direct*\n+    /// access to that memory, as opposed to access through a pointer that was created\n+    /// by the program. Must never be used for derived (program-created) pointers!\n     #[inline]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n         ptr.with_tag(M::tag_static_base_pointer(&self.extra, ptr.alloc_id))\n@@ -191,9 +195,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        let (alloc, tag) = M::tag_allocation(&self.extra, id, Cow::Owned(alloc), Some(kind));\n+        let alloc = M::init_allocation_extra(&self.extra, id, Cow::Owned(alloc), Some(kind));\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n-        Pointer::from(id).with_tag(tag)\n+        self.tag_static_base_pointer(Pointer::from(id))\n     }\n \n     pub fn reallocate(\n@@ -473,14 +477,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 }\n             }\n         };\n-        // We got tcx memory. Let the machine figure out whether and how to\n-        // turn that into memory with the right pointer tag.\n-        Ok(M::tag_allocation(\n+        // We got tcx memory. Let the machine initialize its \"extra\" stuff.\n+        Ok(M::init_allocation_extra(\n             memory_extra,\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             alloc,\n             M::STATIC_KIND.map(MemoryKind::Machine),\n-        ).0)\n+        ))\n     }\n \n     /// Gives raw access to the `Allocation`, without bounds or alignment checks."}, {"sha": "aa3897efb9e78ce54ca4733aedb63778850e3485", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea142c89ad34c00d803d91ee0b08689599c65d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=96ea142c89ad34c00d803d91ee0b08689599c65d", "patch": "@@ -191,14 +191,14 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n \n     #[inline(always)]\n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         _memory_extra: &(),\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-    ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n+    ) -> Cow<'b, Allocation<Self::PointerTag>> {\n         // We do not use a tag so we can just cheaply forward the allocation\n-        (alloc, ())\n+        alloc\n     }\n \n     #[inline(always)]"}]}