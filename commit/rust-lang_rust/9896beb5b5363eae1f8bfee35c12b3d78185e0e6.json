{"sha": "9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTZiZWI1YjUzNjNlYWUxZjhiZmVlMzVjMTJiM2Q3ODE4NWUwZTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-23T17:43:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-28T23:54:47Z"}, "message": "Implement an unused_result lint\n\nI attempted to implement the lint in two steps. My first attempt was a\ndefault-warn lint about *all* unused results. While this attempt did indeed find\nmany possible bugs, I felt that the false-positive rate was too high to be\nturned on by default for all of Rust.\n\nMy second attempt was to make unused-result a default-allow lint, but allow\ncertain types to opt-in to the notion of \"you must use this\". For example, the\nResult type is now flagged with #[must_use]. This lint about \"must use\" types is\nwarn by default (it's different from unused-result).\n\nThe unused_must_use lint had a 100% hit rate in the compiler, but there's not\nthat many places that return Result right now. I believe that this lint is a\ncrucial step towards moving away from conditions for I/O (because all I/O will\nreturn Result by default). I'm worried that this lint is a little too specific\nto Result itself, but I believe that the false positive rate for the\nunused_result lint is too high to make it useful when turned on by default.", "tree": {"sha": "32fa24c142539a38429e2c4b062a06afade1639d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32fa24c142539a38429e2c4b062a06afade1639d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "html_url": "https://github.com/rust-lang/rust/commit/9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9896beb5b5363eae1f8bfee35c12b3d78185e0e6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edfb546e4b2b0aa6dbb6316709b80e034539d09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edfb546e4b2b0aa6dbb6316709b80e034539d09d", "html_url": "https://github.com/rust-lang/rust/commit/edfb546e4b2b0aa6dbb6316709b80e034539d09d"}], "stats": {"total": 120, "additions": 113, "deletions": 7}, "files": [{"sha": "42858416147e0cda89d604cdb114906e9f4ab983", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9896beb5b5363eae1f8bfee35c12b3d78185e0e6/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9896beb5b5363eae1f8bfee35c12b3d78185e0e6/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "patch": "@@ -105,6 +105,9 @@ pub enum Lint {\n     Experimental,\n     Unstable,\n \n+    UnusedMustUse,\n+    UnusedResult,\n+\n     Warnings,\n }\n \n@@ -356,12 +359,26 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"unknown features found in crate-level #[feature] directives\",\n         default: deny,\n     }),\n-     (\"unknown_crate_type\",\n-     LintSpec {\n-         lint: UnknownCrateType,\n-         desc: \"unknown crate type found in #[crate_type] directive\",\n-         default: deny,\n-     }),\n+    (\"unknown_crate_type\",\n+    LintSpec {\n+        lint: UnknownCrateType,\n+        desc: \"unknown crate type found in #[crate_type] directive\",\n+        default: deny,\n+    }),\n+\n+    (\"unused_must_use\",\n+    LintSpec {\n+        lint: UnusedMustUse,\n+        desc: \"unused result of an type flagged as #[must_use]\",\n+        default: warn,\n+    }),\n+\n+    (\"unused_result\",\n+    LintSpec {\n+        lint: UnusedResult,\n+        desc: \"unused result of an expression in a statement\",\n+        default: allow,\n+    }),\n ];\n \n /*\n@@ -934,7 +951,7 @@ static other_attrs: &'static [&'static str] = &[\n     \"crate_map\", \"cfg\", \"doc\", \"export_name\", \"link_section\", \"no_freeze\",\n     \"no_mangle\", \"no_send\", \"static_assert\", \"unsafe_no_drop_flag\", \"packed\",\n     \"simd\", \"repr\", \"deriving\", \"unsafe_destructor\", \"link\", \"phase\",\n-    \"macro_export\",\n+    \"macro_export\", \"must_use\",\n \n     //mod-level\n     \"path\", \"link_name\", \"link_args\", \"nolink\", \"macro_escape\", \"no_implicit_prelude\",\n@@ -1016,6 +1033,54 @@ fn check_path_statement(cx: &Context, s: &ast::Stmt) {\n     }\n }\n \n+fn check_unused_result(cx: &Context, s: &ast::Stmt) {\n+    let expr = match s.node {\n+        ast::StmtSemi(expr, _) => expr,\n+        _ => return\n+    };\n+    let t = ty::expr_ty(cx.tcx, expr);\n+    match ty::get(t).sty {\n+        ty::ty_nil | ty::ty_bot | ty::ty_bool => return,\n+        _ => {}\n+    }\n+    match expr.node {\n+        ast::ExprRet(..) => return,\n+        _ => {}\n+    }\n+\n+    let t = ty::expr_ty(cx.tcx, expr);\n+    let mut warned = false;\n+    match ty::get(t).sty {\n+        ty::ty_struct(did, _) |\n+        ty::ty_enum(did, _) => {\n+            if ast_util::is_local(did) {\n+                match cx.tcx.items.get(did.node) {\n+                    ast_map::NodeItem(it, _) => {\n+                        if attr::contains_name(it.attrs, \"must_use\") {\n+                            cx.span_lint(UnusedMustUse, s.span,\n+                                         \"unused result which must be used\");\n+                            warned = true;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            } else {\n+                csearch::get_item_attrs(cx.tcx.sess.cstore, did, |attrs| {\n+                    if attr::contains_name(attrs, \"must_use\") {\n+                        cx.span_lint(UnusedMustUse, s.span,\n+                                     \"unused result which must be used\");\n+                        warned = true;\n+                    }\n+                });\n+            }\n+        }\n+        _ => {}\n+    }\n+    if !warned {\n+        cx.span_lint(UnusedResult, s.span, \"unused result\");\n+    }\n+}\n+\n fn check_item_non_camel_case_types(cx: &Context, it: &ast::Item) {\n     fn is_camel_case(cx: ty::ctxt, ident: ast::Ident) -> bool {\n         let ident = cx.sess.str_of(ident);\n@@ -1478,6 +1543,7 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_stmt(&mut self, s: &ast::Stmt, _: ()) {\n         check_path_statement(self, s);\n+        check_unused_result(self, s);\n \n         visit::walk_stmt(self, s, ());\n     }"}, {"sha": "eaf4d7d94c454b65b99566839d51bb35e49eeea8", "filename": "src/test/compile-fail/unused-result.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9896beb5b5363eae1f8bfee35c12b3d78185e0e6/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9896beb5b5363eae1f8bfee35c12b3d78185e0e6/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-result.rs?ref=9896beb5b5363eae1f8bfee35c12b3d78185e0e6", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unused_result, unused_must_use)];\n+#[allow(dead_code)];\n+\n+#[must_use]\n+enum MustUse { Test }\n+\n+fn foo<T>() -> T { fail!() }\n+\n+fn bar() -> int { return foo::<int>(); }\n+fn baz() -> MustUse { return foo::<MustUse>(); }\n+\n+#[allow(unused_result)]\n+fn test() {\n+    foo::<int>();\n+    foo::<MustUse>(); //~ ERROR: unused result which must be used\n+}\n+\n+#[allow(unused_result, unused_must_use)]\n+fn test2() {\n+    foo::<int>();\n+    foo::<MustUse>();\n+}\n+\n+fn main() {\n+    foo::<int>(); //~ ERROR: unused result\n+    foo::<MustUse>(); //~ ERROR: unused result which must be used\n+\n+    let _ = foo::<int>();\n+    let _ = foo::<MustUse>();\n+}"}]}