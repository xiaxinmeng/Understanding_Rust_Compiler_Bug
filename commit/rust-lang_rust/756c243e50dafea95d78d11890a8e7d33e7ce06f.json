{"sha": "756c243e50dafea95d78d11890a8e7d33e7ce06f", "node_id": "C_kwDOAAsO6NoAKDc1NmMyNDNlNTBkYWZlYTk1ZDc4ZDExODkwYThlN2QzM2U3Y2UwNmY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-12T10:04:55Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-05-12T10:04:55Z"}, "message": "Pass arguments to the interpreted program via `run-dep`", "tree": {"sha": "a05e71e622df98ccfdd761a36b391f89fb64727b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05e71e622df98ccfdd761a36b391f89fb64727b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756c243e50dafea95d78d11890a8e7d33e7ce06f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756c243e50dafea95d78d11890a8e7d33e7ce06f", "html_url": "https://github.com/rust-lang/rust/commit/756c243e50dafea95d78d11890a8e7d33e7ce06f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756c243e50dafea95d78d11890a8e7d33e7ce06f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9642e40076b0bf9480d8a090de64ed8dd4e4a8b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9642e40076b0bf9480d8a090de64ed8dd4e4a8b5", "html_url": "https://github.com/rust-lang/rust/commit/9642e40076b0bf9480d8a090de64ed8dd4e4a8b5"}], "stats": {"total": 89, "additions": 42, "deletions": 47}, "files": [{"sha": "737423a2cd16421e826d93905846b6b1387e0d1f", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=756c243e50dafea95d78d11890a8e7d33e7ce06f", "patch": "@@ -820,9 +820,9 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n+checksum = \"191a442639ea102fa62671026047e51d574bfda44b7fdf32151d7314624c1cd2\"\n dependencies = [\n  \"bstr\",\n  \"cargo-platform\","}, {"sha": "5987b0df8d660fa432c889996a71232f991a2f68", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=756c243e50dafea95d78d11890a8e7d33e7ce06f", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.9\"\n+ui_test = \"0.10\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "435771c2f398039e08966ae8809fd126700bd824", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 39, "deletions": 44, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756c243e50dafea95d78d11890a8e7d33e7ce06f/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=756c243e50dafea95d78d11890a8e7d33e7ce06f", "patch": "@@ -1,6 +1,6 @@\n use colored::*;\n use regex::bytes::Regex;\n-use std::io::Write;\n+use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n use ui_test::status_emitter::StatusEmitter;\n@@ -46,13 +46,7 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n     so_file_path\n }\n \n-fn test_config(\n-    args: impl Iterator<Item = String>,\n-    target: &str,\n-    path: &str,\n-    mode: Mode,\n-    with_dependencies: bool,\n-) -> Config {\n+fn test_config(target: &str, path: &str, mode: Mode, with_dependencies: bool) -> Config {\n     // Miri is rustc-like, so we create a default builder for rustc and modify it\n     let mut program = CommandBuilder::rustc();\n     program.program = miri_path();\n@@ -110,9 +104,29 @@ fn test_config(\n         ..Config::default()\n     };\n \n+    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n+\n+    if with_dependencies && use_std {\n+        config.dependencies_crate_manifest_path =\n+            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n+        config.dependency_builder.args = vec![\n+            \"run\".into(),\n+            \"--manifest-path\".into(),\n+            \"cargo-miri/Cargo.toml\".into(),\n+            \"--\".into(),\n+            \"miri\".into(),\n+            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n+        ];\n+    }\n+    config\n+}\n+\n+fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+    let mut config = test_config(target, path, mode, with_dependencies);\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n-    config.path_filter.extend(args.filter(|arg| {\n+    config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n         if after_dashdash {\n             // Just propagate everything.\n             return true;\n@@ -133,26 +147,6 @@ fn test_config(\n         }\n     }));\n \n-    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n-\n-    if with_dependencies && use_std {\n-        config.dependencies_crate_manifest_path =\n-            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n-        config.dependency_builder.args = vec![\n-            \"run\".into(),\n-            \"--manifest-path\".into(),\n-            \"cargo-miri/Cargo.toml\".into(),\n-            \"--\".into(),\n-            \"miri\".into(),\n-            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n-        ];\n-    }\n-    config\n-}\n-\n-fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n-    let config = test_config(std::env::args().skip(1), target, path, mode, with_dependencies);\n-\n     eprintln!(\"   Compiler: {}\", config.program.display());\n     ui_test::run_tests_generic(\n         config,\n@@ -241,9 +235,12 @@ fn main() -> Result<()> {\n \n     let target = get_target();\n \n-    if let Some(first) = std::env::args().nth(1) {\n+    let mut args = std::env::args_os();\n+\n+    // Skip the program name and check whether this is a `./miri run-dep` invocation\n+    if let Some(first) = args.nth(1) {\n         if first == \"--miri-run-dep-mode\" {\n-            return run_dep_mode(target);\n+            return run_dep_mode(target, args);\n         }\n     }\n \n@@ -269,19 +266,17 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn run_dep_mode(target: String) -> Result<()> {\n-    let files = std::env::args().skip(2);\n-    for path in files {\n-        let mut config = test_config(std::iter::empty(), &target, &path, Mode::Yolo, true);\n-        config.program.args.remove(0); // remove the `--error-format=json` argument\n-        config.program.args.push(\"--color\".into());\n-        config.program.args.push(\"always\".into());\n-        let output = ui_test::run_file(config, Path::new(&path))?;\n-        std::io::stderr().write_all(&output.stderr)?;\n-        std::io::stdout().write_all(&output.stdout)?;\n-        std::process::exit(output.status.code().unwrap());\n-    }\n-    Ok(())\n+fn run_dep_mode(target: String, mut args: impl Iterator<Item = OsString>) -> Result<()> {\n+    let path = args.next().expect(\"./miri run-dep must be followed by a file name\");\n+    let mut config = test_config(&target, \"\", Mode::Yolo, true);\n+    config.program.args.remove(0); // remove the `--error-format=json` argument\n+    config.program.args.push(\"--color\".into());\n+    config.program.args.push(\"always\".into());\n+    let mut cmd = ui_test::test_command(config, Path::new(&path))?;\n+    cmd.arg(\"--\");\n+    cmd.args(args);\n+    println!(\"{cmd:?}\");\n+    if cmd.spawn()?.wait()?.success() { Ok(()) } else { std::process::exit(1) }\n }\n \n /// This is a custom renderer for `ui_test` output that does not emit github actions"}]}