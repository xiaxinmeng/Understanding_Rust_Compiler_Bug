{"sha": "3e5b15571632467f203c3f93d0b56f41d0fb64f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNWIxNTU3MTYzMjQ2N2YyMDNjM2Y5M2QwYjU2ZjQxZDBmYjY0ZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-09T13:06:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-09T13:15:02Z"}, "message": "fix: avoid pathological macro expansions\n\nToday, rust-analyzer (and rustc, and bat, and IntelliJ) fail badly on\nsome kinds of maliciously constructed code, like a deep sequence of\nnested parenthesis.\n\n\"Who writes 100k nested parenthesis\" you'd ask?\n\nWell, in a language with macros, a run-away macro expansion might do\nthat (see the added tests)! Such expansion can be broad, rather than\ndeep, so it bypasses recursion check at the macro-expansion layer, but\ntriggers deep recursion in parser.\n\nIn the ideal world, the parser would just handle deeply nested structs\ngracefully. We'll get there some day, but at the moment, let's try to be\nsimple, and just avoid expanding macros with unbalanced parenthesis in\nthe first place.\n\ncloses #9358", "tree": {"sha": "5e854c8c367f3539dbd0c0d2c97c0861e657374e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e854c8c367f3539dbd0c0d2c97c0861e657374e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5b15571632467f203c3f93d0b56f41d0fb64f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5b15571632467f203c3f93d0b56f41d0fb64f5", "html_url": "https://github.com/rust-lang/rust/commit/3e5b15571632467f203c3f93d0b56f41d0fb64f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5b15571632467f203c3f93d0b56f41d0fb64f5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa6be71a53fd55d8e0a15254b329aab6a5bcb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa6be71a53fd55d8e0a15254b329aab6a5bcb9a", "html_url": "https://github.com/rust-lang/rust/commit/9aa6be71a53fd55d8e0a15254b329aab6a5bcb9a"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "61180fcb9a89162ad1ef9470d6560e080e62e9ab", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -508,6 +508,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"base_db\",\n  \"cfg\",\n+ \"cov-mark\",\n  \"either\",\n  \"expect-test\",\n  \"la-arena\","}, {"sha": "763dff5a2142ce17f4b8ffea9e849d8b08b39f41", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+\n use crate::nameres::proc_macro::{ProcMacroDef, ProcMacroKind};\n \n #[test]\n@@ -1021,3 +1022,20 @@ pub mod prelude {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn issue9358_bad_macro_stack_overflow() {\n+    cov_mark::check!(issue9358_bad_macro_stack_overflow);\n+    check(\n+        r#\"\n+macro_rules! m {\n+  ($cond:expr) => { m!($cond, stringify!($cond)) };\n+  ($cond:expr, $($arg:tt)*) => { $cond };\n+}\n+m!(\n+\"#,\n+        expect![[r#\"\n+            crate\n+        \"#]],\n+    )\n+}"}, {"sha": "4645970266cc8f10b16ee5ae2962654cbde50e4a", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -9,6 +9,7 @@ edition = \"2018\"\n doctest = false\n \n [dependencies]\n+cov-mark = \"2.0.0-pre.1\"\n log = \"0.4.8\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\""}, {"sha": "a9bf6db476f3f92ea57313a6bd33d9931e9d3594", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use base_db::{salsa, SourceDatabase};\n use limit::Limit;\n use mbe::{ExpandError, ExpandResult};\n-use parser::FragmentKind;\n+use parser::{FragmentKind, T};\n use syntax::{\n     algo::diff,\n     ast::{self, NameOwner},\n@@ -273,6 +273,23 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n     let arg = process_macro_input(db, arg, id);\n+    if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n+        let first = arg.first_child_or_token().map_or(T![.], |it| it.kind());\n+        let last = arg.last_child_or_token().map_or(T![.], |it| it.kind());\n+        let well_formed_tt =\n+            matches!((first, last), (T!['('], T![')']) | (T!['['], T![']']) | (T!['{'], T!['}']));\n+        if !well_formed_tt {\n+            // Don't expand malformed (unbalanced) macro invocations. This is\n+            // less than ideal, but trying to expand unbalanced  macro calls\n+            // sometimes produces pathological, deeply nested code which breaks\n+            // all kinds of things.\n+            //\n+            // Some day, we'll have explicit recursion counters for all\n+            // recursive things, at which point this code might be removed.\n+            cov_mark::hit!(issue9358_bad_macro_stack_overflow);\n+            return None;\n+        }\n+    }\n     Some(arg.green().into())\n }\n "}, {"sha": "9a42dd7b2751415b11d7aaadaf90ee16b7e31d61", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -308,27 +308,7 @@ fn quux(x: i32) {\n     m!(x$0\n }\n \"#,\n-        expect![[r#\"\n-            kw unsafe\n-            kw match\n-            kw while\n-            kw while let\n-            kw loop\n-            kw if\n-            kw if let\n-            kw for\n-            kw true\n-            kw false\n-            kw return\n-            kw self\n-            kw super\n-            kw crate\n-            lc y         i32\n-            bt u32\n-            lc x         i32\n-            fn quux(\u2026)   fn(i32)\n-            ma m!(\u2026)     macro_rules! m\n-        \"#]],\n+        expect![[r#\"\"#]],\n     );\n }\n "}, {"sha": "0b0c1111c4663c33a35c18a1c289b5e1eb15916d", "filename": "crates/ide_ssr/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5b15571632467f203c3f93d0b56f41d0fb64f5/crates%2Fide_ssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ftests.rs?ref=3e5b15571632467f203c3f93d0b56f41d0fb64f5", "patch": "@@ -921,13 +921,13 @@ fn preserves_whitespace_within_macro_expansion() {\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(1   *   2 + 3 + 4}\n+            fn f() {macro1!(1   *   2 + 3 + 4)}\n             \"#,\n         expect![[r#\"\n             macro_rules! macro1 {\n                 ($a:expr) => {$a}\n             }\n-            fn f() {macro1!(4 - (3 - 1   *   2)}\n+            fn f() {macro1!(4 - (3 - 1   *   2))}\n             \"#]],\n     )\n }"}]}