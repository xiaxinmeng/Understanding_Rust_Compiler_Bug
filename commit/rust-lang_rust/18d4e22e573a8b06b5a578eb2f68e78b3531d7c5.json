{"sha": "18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "node_id": "C_kwDOAAsO6NoAKDE4ZDRlMjJlNTczYThiMDZiNWE1NzhlYjJmNjhlNzhiMzUzMWQ3YzU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-05T03:46:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T03:46:26Z"}, "message": "Rollup merge of #110954 - cjgillot:const-prop-ref, r=wesleywiser\n\nReject borrows of projections in ConstProp.\n\nFixes https://github.com/rust-lang/rust/issues/110947", "tree": {"sha": "a10ed3ec1b31fefb004ff03b75c227dc36eceede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10ed3ec1b31fefb004ff03b75c227dc36eceede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVHwSCRBK7hj4Ov3rIwAAltMIAKr0mrVU4/23zvBq7YIBPmBx\nO9Lf04zfyFqNbm3tgG7nEkExdn0zTgfC9a1V/5kGRUdQKGVsAVGzJLgaOo+vT5F6\naogfY/cWjpTwsxSyp7ZqQh2yF8OJWJyuJb/HEqEWx8to7a+sZ4P1qLnajdkb8SoH\n7WIPmI8jebNlBGTrXLnatjuMZXp9VPM5jRT0fnPWj2J/EMP+gTJejl2kPsYuifi5\nPtGQvDc4zksrhQNGZVvps2LJcvCmBBnd9YWmF40l6lNUb0XvG/JstkguHgutQBH+\nt0rg03rbQP5F0JEr5maroISUmGO9bmnlklKC2++rl3H5c7HGcG7AKOWsErTHGEM=\n=E6aZ\n-----END PGP SIGNATURE-----\n", "payload": "tree a10ed3ec1b31fefb004ff03b75c227dc36eceede\nparent d98e174497529883c266037a53bb03936c90bb5a\nparent 1ffe9059c31d17ea1b22099b0f64de0232ebadd5\nauthor Yuki Okushi <jtitor@2k36.org> 1683258386 +0900\ncommitter GitHub <noreply@github.com> 1683258386 +0900\n\nRollup merge of #110954 - cjgillot:const-prop-ref, r=wesleywiser\n\nReject borrows of projections in ConstProp.\n\nFixes https://github.com/rust-lang/rust/issues/110947\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "html_url": "https://github.com/rust-lang/rust/commit/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98e174497529883c266037a53bb03936c90bb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98e174497529883c266037a53bb03936c90bb5a", "html_url": "https://github.com/rust-lang/rust/commit/d98e174497529883c266037a53bb03936c90bb5a"}, {"sha": "1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "html_url": "https://github.com/rust-lang/rust/commit/1ffe9059c31d17ea1b22099b0f64de0232ebadd5"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "7f995c69a4879cbbf47780f9e0c4902ae7c6f11f", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "patch": "@@ -714,13 +714,22 @@ impl CanConstProp {\n     }\n }\n \n-impl Visitor<'_> for CanConstProp {\n+impl<'tcx> Visitor<'tcx> for CanConstProp {\n+    fn visit_place(&mut self, place: &Place<'tcx>, mut context: PlaceContext, loc: Location) {\n+        use rustc_middle::mir::visit::PlaceContext::*;\n+\n+        // Dereferencing just read the addess of `place.local`.\n+        if place.projection.first() == Some(&PlaceElem::Deref) {\n+            context = NonMutatingUse(NonMutatingUseContext::Copy);\n+        }\n+\n+        self.visit_local(place.local, context, loc);\n+        self.visit_projection(place.as_ref(), context, loc);\n+    }\n+\n     fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n-            // Projections are fine, because `&mut foo.x` will be caught by\n-            // `MutatingUseContext::Borrow` elsewhere.\n-            MutatingUse(MutatingUseContext::Projection)\n             // These are just stores, where the storing is not propagatable, but there may be later\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n@@ -751,7 +760,6 @@ impl Visitor<'_> for CanConstProp {\n             NonMutatingUse(NonMutatingUseContext::Copy)\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n-            | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonMutatingUse(NonMutatingUseContext::PlaceMention)\n             | NonUse(_) => {}\n \n@@ -771,6 +779,8 @@ impl Visitor<'_> for CanConstProp {\n                 trace!(\"local {:?} can't be propagated because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n+            MutatingUse(MutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::Projection) => bug!(\"visit_place should not pass {context:?} for {local:?}\"),\n         }\n     }\n }"}, {"sha": "d50b12044ceb27d332433d28b2dc4c9d37dde23c", "filename": "tests/mir-opt/const_prop/address_of_pair.fn0.ConstProp.diff", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff?ref=18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "patch": "@@ -0,0 +1,46 @@\n+- // MIR for `fn0` before ConstProp\n++ // MIR for `fn0` after ConstProp\n+  \n+  fn fn0() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/address_of_pair.rs:+0:17: +0:21\n+      let mut _1: !;                       // in scope 0 at $DIR/address_of_pair.rs:+0:22: +9:2\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+      let _4: ();                          // in scope 0 at $DIR/address_of_pair.rs:+4:5: +6:6\n+      let mut _6: bool;                    // in scope 0 at $DIR/address_of_pair.rs:+7:16: +7:22\n+      scope 1 {\n+          debug pair => _2;                // in scope 1 at $DIR/address_of_pair.rs:+1:9: +1:17\n+          let _3: *mut bool;               // in scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          scope 2 {\n+              debug ptr => _3;             // in scope 2 at $DIR/address_of_pair.rs:+2:9: +2:12\n+              let _5: bool;                // in scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              scope 3 {\n+              }\n+              scope 4 {\n+                  debug ret => _5;         // in scope 4 at $DIR/address_of_pair.rs:+7:9: +7:12\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n+          _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n+          StorageLive(_3);                 // scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n+          _3 = &raw mut (_2.1: bool);      // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+          _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n+          StorageLive(_4);                 // scope 2 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          (*_3) = const true;              // scope 3 at $DIR/address_of_pair.rs:+5:9: +5:20\n+          _4 = const ();                   // scope 3 at $DIR/address_of_pair.rs:+4:5: +6:6\n+          StorageDead(_4);                 // scope 2 at $DIR/address_of_pair.rs:+6:5: +6:6\n+          StorageLive(_5);                 // scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n+          StorageLive(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+          _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+          _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n+          StorageDead(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:21: +7:22\n+          _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n+          StorageDead(_5);                 // scope 2 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_3);                 // scope 1 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          StorageDead(_2);                 // scope 0 at $DIR/address_of_pair.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/address_of_pair.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "43dc9bae625347336da5b3724d1d0be813b5e877", "filename": "tests/mir-opt/const_prop/address_of_pair.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.rs?ref=18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "patch": "@@ -0,0 +1,17 @@\n+// unit-test: ConstProp\n+\n+// EMIT_MIR address_of_pair.fn0.ConstProp.diff\n+pub fn fn0() -> bool {\n+    let mut pair = (1, false);\n+    let ptr = core::ptr::addr_of_mut!(pair.1);\n+    pair = (1, false);\n+    unsafe {\n+        *ptr = true;\n+    }\n+    let ret = !pair.1;\n+    return ret;\n+}\n+\n+pub fn main() {\n+    println!(\"{}\", fn0());\n+}"}, {"sha": "a5f52d08957c8fb2bcd507b8edea6d68b488c534", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "patch": "@@ -19,8 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22"}, {"sha": "42ddc2a56208a82e57a2eb289186c65e4ee82012", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/18d4e22e573a8b06b5a578eb2f68e78b3531d7c5/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=18d4e22e573a8b06b5a578eb2f68e78b3531d7c5", "patch": "@@ -16,8 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18"}]}