{"sha": "458ac89894bce025553aeda1a9a991e1ca3c05ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OGFjODk4OTRiY2UwMjU1NTNhZWRhMWE5YTk5MWUxY2EzYzA1ZWQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-24T15:05:53Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-01T20:37:23Z"}, "message": "Back out copy-glue\n\nThis wasn't a good idea after all.", "tree": {"sha": "df495ce3f657180d7ec2a87326cf2e86bd533a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df495ce3f657180d7ec2a87326cf2e86bd533a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/458ac89894bce025553aeda1a9a991e1ca3c05ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/458ac89894bce025553aeda1a9a991e1ca3c05ed", "html_url": "https://github.com/rust-lang/rust/commit/458ac89894bce025553aeda1a9a991e1ca3c05ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/458ac89894bce025553aeda1a9a991e1ca3c05ed/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3dcc0689b87c32fe7142c49846be75ef516a81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3dcc0689b87c32fe7142c49846be75ef516a81", "html_url": "https://github.com/rust-lang/rust/commit/ad3dcc0689b87c32fe7142c49846be75ef516a81"}], "stats": {"total": 93, "additions": 4, "deletions": 89}, "files": [{"sha": "df72ba5b1c279f3858e0bed201455c9a6c01c2fc", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=458ac89894bce025553aeda1a9a991e1ca3c05ed", "patch": "@@ -52,7 +52,7 @@ const tydesc_field_align: int = 2;\n const tydesc_field_take_glue: int = 3;\n const tydesc_field_drop_glue: int = 4;\n const tydesc_field_free_glue: int = 5;\n-const tydesc_field_copy_glue: int = 6;\n+const tydesc_field_unused: int = 6;\n const tydesc_field_sever_glue: int = 7;\n const tydesc_field_mark_glue: int = 8;\n const tydesc_field_is_stateful: int = 9;"}, {"sha": "c7078b8490413914ba953df03440080b4c47654c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=458ac89894bce025553aeda1a9a991e1ca3c05ed", "patch": "@@ -1149,7 +1149,6 @@ fn declare_tydesc(cx: &@local_ctxt, sp: &span, t: ty::t, ty_params: &[uint])\n           mutable drop_glue: none::<ValueRef>,\n           mutable free_glue: none::<ValueRef>,\n           mutable cmp_glue: none::<ValueRef>,\n-          mutable copy_glue: none::<ValueRef>,\n           ty_params: ty_params};\n     log ~\"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n     ret info;\n@@ -1245,7 +1244,6 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     for each pair: @{key: ty::t, val: @tydesc_info} in ccx.tydescs.items() {\n         let glue_fn_ty = T_ptr(T_glue_fn(*ccx));\n         let cmp_fn_ty = T_ptr(T_cmp_glue_fn(*ccx));\n-        let copy_fn_ty = T_ptr(T_copy_glue_fn(*ccx));\n         let ti = pair.val;\n         let take_glue =\n             alt { ti.take_glue } {\n@@ -1267,11 +1265,6 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n               none. { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n-        let copy_glue =\n-            alt { ti.copy_glue } {\n-              none. { ccx.stats.n_null_glues += 1u; C_null(copy_fn_ty) }\n-              some(v) { ccx.stats.n_real_glues += 1u; v }\n-            };\n \n         let shape = shape::shape_of(ccx, pair.key);\n         let shape_tables =\n@@ -1286,7 +1279,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n                             take_glue, // take_glue\n                             drop_glue, // drop_glue\n                             free_glue, // free_glue\n-                            copy_glue, // copy_glue\n+                            C_null(T_ptr(T_i8())), // unused\n                             C_null(glue_fn_ty), // sever_glue\n                             C_null(glue_fn_ty), // mark_glue\n                             C_null(glue_fn_ty), // is_stateful\n@@ -1304,14 +1297,6 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     }\n }\n \n-// NOTE this is currently just a complicated way to do memmove. I'm working on\n-// a representation of ivecs that will need pointers into itself, which must\n-// be adjusted when copying. Will flesh this out when the time comes.\n-fn make_copy_glue(cx: &@block_ctxt, src: ValueRef, dst: ValueRef, t: ty::t) {\n-    let bcx = memmove_ty(cx, dst, src, t).bcx;\n-    build_return(bcx);\n-}\n-\n fn make_take_glue(cx: &@block_ctxt, v: ValueRef, t: ty::t) {\n     let bcx = cx;\n     // NB: v is an *alias* of type t here, not a direct value.\n@@ -1878,7 +1863,6 @@ fn lazily_emit_all_tydesc_glue(cx: &@block_ctxt,\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, static_ti);\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, static_ti);\n }\n \n fn lazily_emit_all_generic_info_tydesc_glues(cx: &@block_ctxt,\n@@ -1958,20 +1942,6 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n               }\n             }\n-        } else if field == abi::tydesc_field_copy_glue {\n-            alt { ti.copy_glue } {\n-              some(_) {}\n-              none. {\n-                let lcx = cx.fcx.lcx;\n-                let glue_fn =\n-                    declare_generic_glue(lcx, ti.ty, T_copy_glue_fn(*lcx.ccx),\n-                                         ~\"copy\");\n-                ti.copy_glue = some(glue_fn);\n-                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n-                                  copy_helper(make_copy_glue),\n-                                  ti.ty_params, ~\"copy\");\n-              }\n-            }\n         }\n       }\n     }\n@@ -2060,47 +2030,6 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n     ret rslt(r.bcx, Load(r.bcx, llcmpresultptr));\n }\n \n-fn call_copy_glue(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t,\n-                  take: bool) -> @block_ctxt {\n-    // You can't call this on immediate types. Those are simply copied with\n-    // Load/Store.\n-    assert !type_is_immediate(bcx_ccx(cx), t);\n-    let srcptr = BitCast(cx, src, T_ptr(T_i8()));\n-    let dstptr = BitCast(cx, dst, T_ptr(T_i8()));\n-    let ti = none;\n-    let {bcx, val: lltydesc} =\n-        get_tydesc(cx, t, false, tps_normal, ti).result;\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, ti);\n-    let lltydescs = GEP\n-        (bcx, lltydesc, [C_int(0), C_int(abi::tydesc_field_first_param)]);\n-    lltydescs = Load(bcx, lltydescs);\n-\n-    let llfn = alt ti {\n-      none. {\n-        Load(bcx, GEP\n-            (bcx, lltydesc, [C_int(0), C_int(abi::tydesc_field_copy_glue)]))\n-      }\n-      some(sti) { option::get(sti.copy_glue) }\n-    };\n-    Call(bcx, llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n-                          C_null(T_ptr(T_nil())), lltydescs, srcptr, dstptr]);\n-    if take {\n-        lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n-        llfn = alt ti {\n-          none. {\n-            Load(bcx, GEP(bcx, lltydesc,\n-                                    [C_int(0),\n-                                     C_int(abi::tydesc_field_take_glue)]))\n-          }\n-          some(sti) { option::get(sti.take_glue) }\n-        };\n-        Call(bcx, llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n-                              C_null(T_ptr(T_nil())), lltydescs, dstptr]);\n-    }\n-    ret bcx;\n-}\n-\n-\n // Compares two values. Performs the simple scalar comparison if the types are\n // scalar and calls to comparison glue otherwise.\n fn compare(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,"}, {"sha": "1e60daec47025f335f97a043e12a349649efee55", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=458ac89894bce025553aeda1a9a991e1ca3c05ed", "patch": "@@ -87,7 +87,6 @@ type tydesc_info =\n      mutable drop_glue: option::t<ValueRef>,\n      mutable free_glue: option::t<ValueRef>,\n      mutable cmp_glue: option::t<ValueRef>,\n-     mutable copy_glue: option::t<ValueRef>,\n      ty_params: [uint]};\n \n /*\n@@ -620,14 +619,6 @@ fn T_cmp_glue_fn(cx: &crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n-fn T_copy_glue_fn(cx: &crate_ctxt) -> TypeRef {\n-    let s = ~\"copy_glue_fn\";\n-    if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n-    let t = T_tydesc_field(cx, abi::tydesc_field_copy_glue);\n-    cx.tn.associate(s, t);\n-    ret t;\n-}\n-\n fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let tydesc = T_named_struct(~\"tydesc\");\n     let tydescpp = T_ptr(T_ptr(tydesc));\n@@ -638,13 +629,10 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let cmp_glue_fn_ty =\n         T_ptr(T_fn([T_ptr(T_i1()), taskptr_type, T_ptr(tydesc), tydescpp,\n                     pvoid, pvoid, T_i8()], T_void()));\n-    let copy_glue_fn_ty =\n-        T_ptr(T_fn([T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n-                    pvoid, pvoid], T_void()));\n \n     let elems =\n         [tydescpp, T_int(), T_int(), glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         copy_glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n+         T_ptr(T_i8()), glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n          T_ptr(T_i8()), T_ptr(T_i8()), T_int(), T_int()];\n     set_struct_body(tydesc, elems);\n     ret tydesc;"}, {"sha": "4a5d208915df550a02c56f8d0a9cb9c441c66222", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/458ac89894bce025553aeda1a9a991e1ca3c05ed/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=458ac89894bce025553aeda1a9a991e1ca3c05ed", "patch": "@@ -257,8 +257,6 @@ struct rust_timer {\n \n typedef void CDECL (glue_fn)(void *, rust_task *, void *,\n                              const type_desc **, void *);\n-typedef void CDECL (copy_glue_fn)(void *, rust_task *, void *,\n-                                  const type_desc **, void *, void *);\n typedef void CDECL (cmp_glue_fn)(void *, rust_task *, void *,\n                                  const type_desc **,\n                                  void *, void *, int8_t);\n@@ -277,7 +275,7 @@ struct type_desc {\n     glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n-    copy_glue_fn *copy_glue;\n+    void *unused;\n     glue_fn *sever_glue;    // For GC.\n     glue_fn *mark_glue;     // For GC.\n     uintptr_t is_stateful;"}]}