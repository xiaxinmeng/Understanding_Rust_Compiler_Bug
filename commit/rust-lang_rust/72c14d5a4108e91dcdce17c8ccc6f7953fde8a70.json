{"sha": "72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYzE0ZDVhNDEwOGU5MWRjZGNlMTdjOGNjYzZmNzk1M2ZkZThhNzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T19:21:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-02T22:13:41Z"}, "message": "Eliminate const_refcount. Issue #855", "tree": {"sha": "099f4e7f99b10f0033784b0b0265a1dc9a298d7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099f4e7f99b10f0033784b0b0265a1dc9a298d7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "html_url": "https://github.com/rust-lang/rust/commit/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ee0fca6722bc8b78032605c2f6243340f6b04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ee0fca6722bc8b78032605c2f6243340f6b04e", "html_url": "https://github.com/rust-lang/rust/commit/99ee0fca6722bc8b78032605c2f6243340f6b04e"}], "stats": {"total": 49, "additions": 7, "deletions": 42}, "files": [{"sha": "e71ed2eeff96a07eec1ce5644b3daecab7ca3e38", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -4,10 +4,6 @@\n // FIXME: Most of these should be uints.\n const rc_base_field_refcnt: int = 0;\n \n-\n-// FIXME: import from std::dbg when imported consts work.\n-const const_refcount: uint = 0x7bad_face_u;\n-\n const task_field_refcnt: int = 0;\n \n const task_field_stk: int = 2;"}, {"sha": "e03b23bf43c10aa069a7a0aac41f099b893699c0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -1318,16 +1318,9 @@ fn incr_refcnt_of_boxed(cx: &@block_ctxt, box_ptr: ValueRef) -> @block_ctxt {\n     let rc_ptr =\n         GEP(cx, box_ptr, [C_int(0), C_int(abi::box_rc_field_refcnt)]);\n     let rc = Load(cx, rc_ptr);\n-    let rc_adj_cx = new_sub_block_ctxt(cx, ~\"rc++\");\n-    let next_cx = new_sub_block_ctxt(cx, ~\"next\");\n-    let const_test =\n-        ICmp(cx, lib::llvm::LLVMIntEQ, C_int(abi::const_refcount as int),\n-                      rc);\n-    CondBr(cx, const_test, next_cx.llbb, rc_adj_cx.llbb);\n-    rc = Add(rc_adj_cx, rc, C_int(1));\n-    Store(rc_adj_cx, rc, rc_ptr);\n-    Br(rc_adj_cx, next_cx.llbb);\n-    ret next_cx;\n+    rc = Add(cx, rc, C_int(1));\n+    Store(cx, rc, rc_ptr);\n+    ret cx;\n }\n \n fn make_free_glue(bcx: &@block_ctxt, v0: ValueRef, t: ty::t) {\n@@ -1466,23 +1459,18 @@ fn trans_res_drop(cx: @block_ctxt, rs: ValueRef, did: &ast::def_id,\n fn decr_refcnt_maybe_free(cx: &@block_ctxt, box_ptr_alias: ValueRef,\n                           full_alias: ValueRef, t: ty::t) -> @block_ctxt {\n     let ccx = bcx_ccx(cx);\n-    let load_rc_cx = new_sub_block_ctxt(cx, ~\"load rc\");\n     let rc_adj_cx = new_sub_block_ctxt(cx, ~\"rc--\");\n     let free_cx = new_sub_block_ctxt(cx, ~\"free\");\n     let next_cx = new_sub_block_ctxt(cx, ~\"next\");\n     let box_ptr = Load(cx, box_ptr_alias);\n     let llbox_ty = T_opaque_obj_ptr(*ccx);\n     box_ptr = PointerCast(cx, box_ptr, llbox_ty);\n     let null_test = IsNull(cx, box_ptr);\n-    CondBr(cx, null_test, next_cx.llbb, load_rc_cx.llbb);\n+    CondBr(cx, null_test, next_cx.llbb, rc_adj_cx.llbb);\n     let rc_ptr =\n-        GEP(load_rc_cx, box_ptr,\n+        GEP(rc_adj_cx, box_ptr,\n                              [C_int(0), C_int(abi::box_rc_field_refcnt)]);\n-    let rc = Load(load_rc_cx, rc_ptr);\n-    let const_test =\n-        ICmp(load_rc_cx, lib::llvm::LLVMIntEQ,\n-                              C_int(abi::const_refcount as int), rc);\n-    CondBr(load_rc_cx, const_test, next_cx.llbb, rc_adj_cx.llbb);\n+    let rc = Load(rc_adj_cx, rc_ptr);\n     rc = Sub(rc_adj_cx, rc, C_int(1));\n     Store(rc_adj_cx, rc, rc_ptr);\n     let zero_test = ICmp(rc_adj_cx, lib::llvm::LLVMIntEQ, C_int(0), rc);"}, {"sha": "6858b30419a66f40390c99dd16c857f4bdd041d6", "filename": "src/lib/dbg.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Flib%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Flib%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fdbg.rs?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -8,9 +8,6 @@\n  * logging.\n  */\n \n-// FIXME: handle 64-bit case.\n-const const_refcount: uint = 0x7bad_face_u;\n-\n native \"rust\" mod rustrt {\n     fn debug_tydesc<T>();\n     fn debug_opaque<T>(x: &T);"}, {"sha": "0ed30a8cbf63db9c8a762a92fb679d53c61b15e3", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -90,9 +90,6 @@ leak(rust_task *task, type_desc *t, void *thing) {\n extern \"C\" CDECL intptr_t\n refcount(rust_task *task, type_desc *t, intptr_t *v) {\n \n-    if (*v == CONST_REFCOUNT)\n-        return CONST_REFCOUNT;\n-\n     // Passed-in value has refcount 1 too high\n     // because it was ref'ed while making the call.\n     return (*v) - 1;\n@@ -249,9 +246,7 @@ debug_box(rust_task *task, type_desc *t, rust_box *box)\n     LOG(task, stdlib, \"debug_box(0x%\" PRIxPTR \")\", box);\n     debug_tydesc_helper(task, t);\n     LOG(task, stdlib, \"  refcount %\" PRIdPTR,\n-        box->ref_count == CONST_REFCOUNT\n-        ? CONST_REFCOUNT\n-        : box->ref_count - 1);  // -1 because we ref'ed for this call\n+        box->ref_count - 1);  // -1 because we ref'ed for this call\n     for (uintptr_t i = 0; i < t->size; ++i) {\n         LOG(task, stdlib, \"  byte %\" PRIdPTR \": 0x%\" PRIx8, i, box->data[i]);\n     }"}, {"sha": "d2c8574280b0e55b4e549d2abff15befea0a110c", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -95,13 +95,6 @@ struct chan_handle {\n \n static size_t const TIME_SLICE_IN_MS = 10;\n \n-// Since every refcounted object is > 4 bytes, any refcount with any of the\n-// top two bits set is invalid. We reserve a particular bit pattern in this\n-// set for indicating objects that are \"constant\" as far as the memory model\n-// knows.\n-\n-static intptr_t const CONST_REFCOUNT = 0x7badface;\n-\n // This accounts for logging buffers.\n \n static size_t const BUF_BYTES = 2048;"}, {"sha": "1447b48d515d51ea5a08209581e2800a33b889bd", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72c14d5a4108e91dcdce17c8ccc6f7953fde8a70/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=72c14d5a4108e91dcdce17c8ccc6f7953fde8a70", "patch": "@@ -5,10 +5,6 @@ use std;\n \n import std::dbg;\n \n-// FIXME: import std::dbg.const_refcount. Currently\n-// cross-crate const references don't work.\n-const const_refcount: uint = 0x7bad_face_u;\n-\n tag t { make_t(@int); clam; }\n \n fn foo(s: @int) {"}]}