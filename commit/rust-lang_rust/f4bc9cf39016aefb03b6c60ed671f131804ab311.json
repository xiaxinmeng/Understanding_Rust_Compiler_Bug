{"sha": "f4bc9cf39016aefb03b6c60ed671f131804ab311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YmM5Y2YzOTAxNmFlZmIwM2I2YzYwZWQ2NzFmMTMxODA0YWIzMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T08:53:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T08:53:59Z"}, "message": "Auto merge of #7409 - xFrednet:5394-vs-code-tasks, r=giraffate,flip1995\n\nAdded `cargo dev setup vscode-tasks` for simplicity\n\nThis PR adds a setup command to `clippy dev` that installs tasks into the Clippy vscode workspace. These might be useful as they be used via shortcuts and are accessible over the GUI. The available tasks are:\n* `cargo check` (standard Linux shortcut `[ctrl] + [shift] + b`)\n* `cargo dev fmt`\n* `cargo uitest` (with a comment how to add the `TESTNAME` environment value)\n* `cargo test`\n* `cargo dev bless`\n\n---\n\nchangelog: none\n\nonly internal changes again. cc #5394\n\nr? `@flip1995` This should be pretty much the same as the other `cargo dev setup` commands. Would you mind reviewing this? :upside_down_face:", "tree": {"sha": "5f882aea5d0babd49f2f364a30cb9561aa2a0191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f882aea5d0babd49f2f364a30cb9561aa2a0191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bc9cf39016aefb03b6c60ed671f131804ab311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bc9cf39016aefb03b6c60ed671f131804ab311", "html_url": "https://github.com/rust-lang/rust/commit/f4bc9cf39016aefb03b6c60ed671f131804ab311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bc9cf39016aefb03b6c60ed671f131804ab311/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba", "html_url": "https://github.com/rust-lang/rust/commit/e405c68b3c1265daa9a091ed9b4b5c5a38c0c0ba"}, {"sha": "e40019134be9762d31c1653f00385740e8e98d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40019134be9762d31c1653f00385740e8e98d93", "html_url": "https://github.com/rust-lang/rust/commit/e40019134be9762d31c1653f00385740e8e98d93"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "ff324ff6ee6fff5b6a38edc9aaefc6ee09df0f34", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=f4bc9cf39016aefb03b6c60ed671f131804ab311", "patch": "@@ -43,11 +43,13 @@ fn main() {\n                     .expect(\"this field is mandatory and therefore always valid\"),\n             ),\n             (\"git-hook\", Some(matches)) => setup::git_hook::install_hook(matches.is_present(\"force-override\")),\n+            (\"vscode-tasks\", Some(matches)) => setup::vscode::install_tasks(matches.is_present(\"force-override\")),\n             _ => {},\n         },\n         (\"remove\", Some(sub_command)) => match sub_command.subcommand() {\n             (\"git-hook\", Some(_)) => setup::git_hook::remove_hook(),\n             (\"intellij\", Some(_)) => setup::intellij::remove_rustc_src(),\n+            (\"vscode-tasks\", Some(_)) => setup::vscode::remove_tasks(),\n             _ => {},\n         },\n         (\"serve\", Some(matches)) => {\n@@ -181,13 +183,25 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                                 .help(\"Forces the override of an existing git pre-commit hook\")\n                                 .required(false),\n                         ),\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"vscode-tasks\")\n+                        .about(\"Add several tasks to vscode for formatting, validation and testing\")\n+                        .arg(\n+                            Arg::with_name(\"force-override\")\n+                                .long(\"force-override\")\n+                                .short(\"f\")\n+                                .help(\"Forces the override of existing vscode tasks\")\n+                                .required(false),\n+                        ),\n                 ),\n         )\n         .subcommand(\n             SubCommand::with_name(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n                 .setting(AppSettings::ArgRequiredElseHelp)\n                 .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n+                .subcommand(SubCommand::with_name(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n                 .subcommand(\n                     SubCommand::with_name(\"intellij\")\n                         .about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),"}, {"sha": "3fbb77d59235c32604ec8079fcb1c57081a73521", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=f4bc9cf39016aefb03b6c60ed671f131804ab311", "patch": "@@ -1,6 +1,8 @@\n use std::fs;\n use std::path::Path;\n \n+use super::verify_inside_clippy_dir;\n+\n /// Rusts setup uses `git rev-parse --git-common-dir` to get the root directory of the repo.\n /// I've decided against this for the sake of simplicity and to make sure that it doesn't install\n /// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n@@ -36,6 +38,10 @@ pub fn install_hook(force_override: bool) {\n }\n \n fn check_precondition(force_override: bool) -> bool {\n+    if !verify_inside_clippy_dir() {\n+        return false;\n+    }\n+\n     // Make sure that we can find the git repository\n     let git_path = Path::new(REPO_GIT_DIR);\n     if !git_path.exists() || !git_path.is_dir() {"}, {"sha": "a1e4dd103b88bfa708948c44ba7cd8a48ec1a346", "filename": "clippy_dev/src/setup/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs?ref=f4bc9cf39016aefb03b6c60ed671f131804ab311", "patch": "@@ -1,2 +1,23 @@\n pub mod git_hook;\n pub mod intellij;\n+pub mod vscode;\n+\n+use std::path::Path;\n+\n+const CLIPPY_DEV_DIR: &str = \"clippy_dev\";\n+\n+/// This function verifies that the tool is being executed in the clippy directory.\n+/// This is useful to ensure that setups only modify Clippys resources. The verification\n+/// is done by checking that `clippy_dev` is a sub directory of the current directory.\n+///\n+/// It will print an error message and return `false` if the directory could not be\n+/// verified.\n+fn verify_inside_clippy_dir() -> bool {\n+    let path = Path::new(CLIPPY_DEV_DIR);\n+    if path.exists() && path.is_dir() {\n+        true\n+    } else {\n+        eprintln!(\"error: unable to verify that the working directory is clippys directory\");\n+        false\n+    }\n+}"}, {"sha": "d59001b2c66afc49b6cfc7c8fa230f2bc7b50446", "filename": "clippy_dev/src/setup/vscode.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bc9cf39016aefb03b6c60ed671f131804ab311/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs?ref=f4bc9cf39016aefb03b6c60ed671f131804ab311", "patch": "@@ -0,0 +1,104 @@\n+use std::fs;\n+use std::path::Path;\n+\n+use super::verify_inside_clippy_dir;\n+\n+const VSCODE_DIR: &str = \".vscode\";\n+const TASK_SOURCE_FILE: &str = \"util/etc/vscode-tasks.json\";\n+const TASK_TARGET_FILE: &str = \".vscode/tasks.json\";\n+\n+pub fn install_tasks(force_override: bool) {\n+    if !check_install_precondition(force_override) {\n+        return;\n+    }\n+\n+    match fs::copy(TASK_SOURCE_FILE, TASK_TARGET_FILE) {\n+        Ok(_) => {\n+            println!(\"info: the task file can be removed with `cargo dev remove vscode-tasks`\");\n+            println!(\"vscode tasks successfully installed\");\n+        },\n+        Err(err) => eprintln!(\n+            \"error: unable to copy `{}` to `{}` ({})\",\n+            TASK_SOURCE_FILE, TASK_TARGET_FILE, err\n+        ),\n+    }\n+}\n+\n+fn check_install_precondition(force_override: bool) -> bool {\n+    if !verify_inside_clippy_dir() {\n+        return false;\n+    }\n+\n+    let vs_dir_path = Path::new(VSCODE_DIR);\n+    if vs_dir_path.exists() {\n+        // verify the target will be valid\n+        if !vs_dir_path.is_dir() {\n+            eprintln!(\"error: the `.vscode` path exists but seems to be a file\");\n+            return false;\n+        }\n+\n+        // make sure that we don't override any existing tasks by accident\n+        let path = Path::new(TASK_TARGET_FILE);\n+        if path.exists() {\n+            if force_override {\n+                return delete_vs_task_file(path);\n+            }\n+\n+            eprintln!(\n+                \"error: there is already a `task.json` file inside the `{}` directory\",\n+                VSCODE_DIR\n+            );\n+            println!(\"info: use the `--force-override` flag to override the existing `task.json` file\");\n+            return false;\n+        }\n+    } else {\n+        match fs::create_dir(vs_dir_path) {\n+            Ok(_) => {\n+                println!(\"info: created `{}` directory for clippy\", VSCODE_DIR);\n+            },\n+            Err(err) => {\n+                eprintln!(\n+                    \"error: the task target directory `{}` could not be created ({})\",\n+                    VSCODE_DIR, err\n+                );\n+            },\n+        }\n+    }\n+\n+    true\n+}\n+\n+pub fn remove_tasks() {\n+    let path = Path::new(TASK_TARGET_FILE);\n+    if path.exists() {\n+        if delete_vs_task_file(path) {\n+            try_delete_vs_directory_if_empty();\n+            println!(\"vscode tasks successfully removed\");\n+        }\n+    } else {\n+        println!(\"no vscode tasks were found\");\n+    }\n+}\n+\n+fn delete_vs_task_file(path: &Path) -> bool {\n+    if let Err(err) = fs::remove_file(path) {\n+        eprintln!(\"error: unable to delete the existing `tasks.json` file ({})\", err);\n+        return false;\n+    }\n+\n+    true\n+}\n+\n+/// This function will try to delete the `.vscode` directory if it's empty.\n+/// It may fail silently.\n+fn try_delete_vs_directory_if_empty() {\n+    let path = Path::new(VSCODE_DIR);\n+    if path.read_dir().map_or(false, |mut iter| iter.next().is_none()) {\n+        // The directory is empty. We just try to delete it but allow a silence\n+        // fail as an empty `.vscode` directory is still valid\n+        let _silence_result = fs::remove_dir(path);\n+    } else {\n+        // The directory is not empty or could not be read. Either way don't take\n+        // any further actions\n+    }\n+}"}, {"sha": "a4bb26b9f900587151545521e862ec67db9701b2", "filename": "util/etc/vscode-tasks.json", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f4bc9cf39016aefb03b6c60ed671f131804ab311/util%2Fetc%2Fvscode-tasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/f4bc9cf39016aefb03b6c60ed671f131804ab311/util%2Fetc%2Fvscode-tasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fetc%2Fvscode-tasks.json?ref=f4bc9cf39016aefb03b6c60ed671f131804ab311", "patch": "@@ -0,0 +1,57 @@\n+{\n+    \"version\": \"2.0.0\",\n+    \"tasks\": [\n+        {\n+            \"label\": \"cargo check\",\n+            \"type\": \"shell\",\n+            \"command\": \"cargo check\",\n+            \"problemMatcher\": [],\n+            \"group\": {\n+                \"kind\": \"build\",\n+                \"isDefault\": true,\n+            },\n+        },\n+        {\n+            \"label\": \"cargo dev fmt\",\n+            \"type\": \"shell\",\n+            \"command\": \"cargo dev fmt\",\n+            \"problemMatcher\": [],\n+            \"group\": \"none\",\n+        },\n+        {\n+            \"label\": \"cargo uitest\",\n+            \"type\": \"shell\",\n+            \"command\": \"cargo uitest\",\n+            \"options\": {\n+                \"env\": {\n+                    \"RUST_BACKTRACE\": \"1\",\n+                    // This task will usually execute all UI tests inside `tests/ui` you can\n+                    // optionally uncomment the line below and only run a specific test.\n+                    //\n+                    // See: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md#testing\n+                    //\n+                    // \"TESTNAME\": \"<TODO>\",\n+                },\n+            },\n+            \"problemMatcher\": [],\n+            \"group\": {\n+                \"kind\": \"test\",\n+                \"isDefault\": true,\n+            }\n+        },\n+        {\n+            \"label\": \"cargo test\",\n+            \"type\": \"shell\",\n+            \"command\": \"cargo test\",\n+            \"problemMatcher\": [],\n+            \"group\": \"test\",\n+        },\n+        {\n+            \"label\": \"cargo dev bless\",\n+            \"type\": \"shell\",\n+            \"command\": \"cargo dev bless\",\n+            \"problemMatcher\": [],\n+            \"group\": \"none\",\n+        },\n+    ],\n+}"}]}