{"sha": "32955c30cd745ec1f9191590de0e8314b77a40a0", "node_id": "C_kwDOAAsO6NoAKDMyOTU1YzMwY2Q3NDVlYzFmOTE5MTU5MGRlMGU4MzE0Yjc3YTQwYTA", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-31T10:26:08Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-01-31T12:05:23Z"}, "message": "Add method to get generic parameters in a type", "tree": {"sha": "22793b3a5649264533939ad18e8dfb3855bab4a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22793b3a5649264533939ad18e8dfb3855bab4a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32955c30cd745ec1f9191590de0e8314b77a40a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPZBAMACgkQ4laYqTBY\nYXF9HQ//dALqqPnezzoddhdk/4li2nLcOwrVvQyqXUNHQcmy2CMGsWlumBpCuytU\nQVFeLDwSAGph7COdv/LjZUGnJ5nnYuh4XpciBLqS6oXwPiIsN1q8ikeFwueuk6DZ\nDbF93MuJz8LZZ9YoX6WAWx/3aJDhGRLaFFUYM9+VqGkrmvD45XR+mmhKfCtZfjDg\nm1CwlHJkLA0bju/Qpm3Pkif9G+aBZEvHcjFdb6v2KxVyPlVaeC8iNvGovaj2vBWO\nWBh6l6fiwo13BXXHLaTB1buWcVBiH7g4dbZ0pzaE46A3USck/23MTnVvDx/ilM/M\neV3nc2mHBUNDBFH+thimLgYFIF/ma/UyLnGQnlSCiE3uR3Df+4AvHPNFd1sQF7V3\nlaN4rcqKlZzPoKp2s56Xemdf1FdoMrYi5aaC0fSQpEkr52LGhCc/l6mAW14WRyXo\ngROtbD5vstXQ6m4d4JlDae/WPLSor2LlTbDWbS5VNxL2d1H7Wo2Z191nyKyV3nKU\nHzCkXbyGYqeAlzWihrfZpe9RDNb6aUvBtNXOtibTwXYUrHv289uOK7OaNwOWpeSX\ng2pa4Tk7x64/06IwVo3baohsJYHA8Gan+YwkbBMEeuhZMAL4AJwoETrfQcfn2PLG\nndBpBXAZr8kEEp54bR8AgfNtZxxy97/7IzjO5veI0TCw7NqczqA=\n=GGQR\n-----END PGP SIGNATURE-----", "payload": "tree 22793b3a5649264533939ad18e8dfb3855bab4a9\nparent 0df70d37fc60195a85eab7f650f221fe74d64a33\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1675160768 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1675166723 +0900\n\nAdd method to get generic parameters in a type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32955c30cd745ec1f9191590de0e8314b77a40a0", "html_url": "https://github.com/rust-lang/rust/commit/32955c30cd745ec1f9191590de0e8314b77a40a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32955c30cd745ec1f9191590de0e8314b77a40a0/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df70d37fc60195a85eab7f650f221fe74d64a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df70d37fc60195a85eab7f650f221fe74d64a33", "html_url": "https://github.com/rust-lang/rust/commit/0df70d37fc60195a85eab7f650f221fe74d64a33"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "cbeb61067dfbe742f28f812d554e842a45e2f9ae", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/32955c30cd745ec1f9191590de0e8314b77a40a0/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32955c30cd745ec1f9191590de0e8314b77a40a0/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=32955c30cd745ec1f9191590de0e8314b77a40a0", "patch": "@@ -39,11 +39,13 @@ use std::sync::Arc;\n use chalk_ir::{\n     fold::{Shift, TypeFoldable},\n     interner::HasInterner,\n-    NoSolution,\n+    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n+    NoSolution, TyData,\n };\n use hir_def::{expr::ExprId, type_ref::Rawness, TypeOrConstParamId};\n use hir_expand::name;\n use itertools::Either;\n+use rustc_hash::FxHashSet;\n use traits::FnTrait;\n use utils::Generics;\n \n@@ -562,3 +564,68 @@ pub fn callable_sig_from_fnonce(\n \n     Some(CallableSig::from_params_and_return(params, ret_ty, false, Safety::Safe))\n }\n+\n+struct PlaceholderCollector<'db> {\n+    db: &'db dyn HirDatabase,\n+    placeholders: FxHashSet<TypeOrConstParamId>,\n+}\n+\n+impl PlaceholderCollector<'_> {\n+    fn collect(&mut self, idx: PlaceholderIndex) {\n+        let id = from_placeholder_idx(self.db, idx);\n+        self.placeholders.insert(id);\n+    }\n+}\n+\n+impl TypeVisitor<Interner> for PlaceholderCollector<'_> {\n+    type BreakTy = ();\n+\n+    fn as_dyn(&mut self) -> &mut dyn TypeVisitor<Interner, BreakTy = Self::BreakTy> {\n+        self\n+    }\n+\n+    fn interner(&self) -> Interner {\n+        Interner\n+    }\n+\n+    fn visit_ty(\n+        &mut self,\n+        ty: &Ty,\n+        outer_binder: DebruijnIndex,\n+    ) -> std::ops::ControlFlow<Self::BreakTy> {\n+        let has_placeholder_bits = TypeFlags::HAS_TY_PLACEHOLDER | TypeFlags::HAS_CT_PLACEHOLDER;\n+        let TyData { kind, flags } = ty.data(Interner);\n+\n+        if let TyKind::Placeholder(idx) = kind {\n+            self.collect(*idx);\n+        } else if flags.intersects(has_placeholder_bits) {\n+            return ty.super_visit_with(self, outer_binder);\n+        } else {\n+            // Fast path: don't visit inner types (e.g. generic arguments) when `flags` indicate\n+            // that there are no placeholders.\n+        }\n+\n+        std::ops::ControlFlow::Continue(())\n+    }\n+\n+    fn visit_const(\n+        &mut self,\n+        constant: &chalk_ir::Const<Interner>,\n+        _outer_binder: DebruijnIndex,\n+    ) -> std::ops::ControlFlow<Self::BreakTy> {\n+        if let chalk_ir::ConstValue::Placeholder(idx) = constant.data(Interner).value {\n+            self.collect(idx);\n+        }\n+        std::ops::ControlFlow::Continue(())\n+    }\n+}\n+\n+/// Returns unique placeholders for types and consts contained in `value`.\n+pub fn collect_placeholders<T>(value: &T, db: &dyn HirDatabase) -> Vec<TypeOrConstParamId>\n+where\n+    T: ?Sized + TypeVisitable<Interner>,\n+{\n+    let mut collector = PlaceholderCollector { db, placeholders: FxHashSet::default() };\n+    value.visit_with(&mut collector, DebruijnIndex::INNERMOST);\n+    collector.placeholders.into_iter().collect()\n+}"}, {"sha": "24faa127e4f0a7efd574d135de3e9c67ac476230", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32955c30cd745ec1f9191590de0e8314b77a40a0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32955c30cd745ec1f9191590de0e8314b77a40a0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=32955c30cd745ec1f9191590de0e8314b77a40a0", "patch": "@@ -3599,6 +3599,14 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    /// Returns unique `GenericParam`s contained in this type.\n+    pub fn generic_params(&self, db: &dyn HirDatabase) -> FxHashSet<GenericParam> {\n+        hir_ty::collect_placeholders(&self.ty, db)\n+            .into_iter()\n+            .map(|id| TypeOrConstParam { id }.split(db).either_into())\n+            .collect()\n+    }\n }\n \n #[derive(Debug)]"}]}