{"sha": "b46e3eec7aec546d8c4e212cc4e27ec870071e74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NmUzZWVjN2FlYzU0NmQ4YzRlMjEyY2M0ZTI3ZWM4NzAwNzFlNzQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-02-21T22:59:29Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-02-21T22:59:29Z"}, "message": "Implement BufRead for Take", "tree": {"sha": "19b08a763cdcdb95f1818310cff8f0f930c1f77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b08a763cdcdb95f1818310cff8f0f930c1f77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b46e3eec7aec546d8c4e212cc4e27ec870071e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b46e3eec7aec546d8c4e212cc4e27ec870071e74", "html_url": "https://github.com/rust-lang/rust/commit/b46e3eec7aec546d8c4e212cc4e27ec870071e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b46e3eec7aec546d8c4e212cc4e27ec870071e74/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03753ba5a21fe0e4bfc34e9691d4b13f24c90af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03753ba5a21fe0e4bfc34e9691d4b13f24c90af4", "html_url": "https://github.com/rust-lang/rust/commit/03753ba5a21fe0e4bfc34e9691d4b13f24c90af4"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "d0d97c44ce553d0b01787f1b2dfe3802a28829e2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b46e3eec7aec546d8c4e212cc4e27ec870071e74/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b46e3eec7aec546d8c4e212cc4e27ec870071e74/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b46e3eec7aec546d8c4e212cc4e27ec870071e74", "patch": "@@ -681,6 +681,21 @@ impl<T: Read> Read for Take<T> {\n     }\n }\n \n+impl<T: BufRead> BufRead for Take<T> {\n+    fn fill_buf(&mut self) -> Result<&[u8]> {\n+        let buf = try!(self.inner.fill_buf());\n+        let cap = cmp::min(buf.len() as u64, self.limit) as usize;\n+        Ok(&buf[..cap])\n+    }\n+\n+    fn consume(&mut self, amt: usize) {\n+        // Don't let callers reset the limit by passing an overlarge value\n+        let amt = cmp::min(amt as u64, self.limit) as usize;\n+        self.limit -= amt as u64;\n+        self.inner.consume(amt);\n+    }\n+}\n+\n /// An adaptor which will emit all read data to a specified writer as well.\n ///\n /// For more information see `ReadExt::tee`"}]}