{"sha": "7bce50c01af576ca0132d9eddcd0ac85e82c9092", "node_id": "C_kwDOAAsO6NoAKDdiY2U1MGMwMWFmNTc2Y2EwMTMyZDllZGRjZDBhYzg1ZTgyYzkwOTI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-25T16:51:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Register member constraints on the final merged hidden type\n\nPreviously we did this per hidden type candiate, which didn't always have all the information available.", "tree": {"sha": "2835676b5857aa24e8be56598964828dc8c8370a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2835676b5857aa24e8be56598964828dc8c8370a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bce50c01af576ca0132d9eddcd0ac85e82c9092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bce50c01af576ca0132d9eddcd0ac85e82c9092", "html_url": "https://github.com/rust-lang/rust/commit/7bce50c01af576ca0132d9eddcd0ac85e82c9092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bce50c01af576ca0132d9eddcd0ac85e82c9092/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9110911353aaee4980c78bcabcb9e5d2aac4c7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9110911353aaee4980c78bcabcb9e5d2aac4c7dd", "html_url": "https://github.com/rust-lang/rust/commit/9110911353aaee4980c78bcabcb9e5d2aac4c7dd"}], "stats": {"total": 158, "additions": 62, "deletions": 96}, "files": [{"sha": "3667d6bd6400936d017403a1d1da129383db58f9", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -203,9 +203,16 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                             ConstraintCategory::OpaqueType,\n                             CustomTypeOp::new(\n                                 |infcx| {\n-                                    Ok(decl\n+                                    let res = decl\n                                         .hidden_type(infcx, &cause, param_env)\n-                                        .map_err(|e| e.0)?)\n+                                        .map_err(|e| e.0)?;\n+                                    infcx.register_member_constraints(\n+                                        param_env,\n+                                        opaque_type_key,\n+                                        res.value.ty,\n+                                        res.value.span,\n+                                    );\n+                                    Ok(res)\n                                 },\n                                 || \"opaque_type_map\".to_string(),\n                             ),"}, {"sha": "aba1dd2bc548cc65beb4899134124dd4e93e3152", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -1,5 +1,5 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n-use rustc_infer::infer::NllRegionVariableOrigin;\n+use rustc_infer::infer::{InferOk, NllRegionVariableOrigin};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n@@ -136,7 +136,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         true\n     }\n \n-    fn constrain_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n+    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n         let param_env = self.param_env();\n         let span = self.span();\n         let def_id = self.type_checker.body.source.def_id().expect_local();\n@@ -148,39 +148,18 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n                 self.category,\n                 CustomTypeOp::new(\n                     |infcx| {\n-                        let (concrete_ty, opaque_type_key) =\n-                            match (a.kind(), b.kind(), a_is_expected) {\n-                                (ty::Opaque(..), ty::Opaque(..), true) => {\n-                                    (b, a.expect_opaque_type())\n-                                }\n-                                (ty::Opaque(..), ty::Opaque(..), false) => {\n-                                    (a, b.expect_opaque_type())\n-                                }\n-                                (ty::Opaque(..), _, _) => (b, a.expect_opaque_type()),\n-                                (_, ty::Opaque(..), _) => (a, b.expect_opaque_type()),\n-                                _ => span_bug!(\n-                                    span,\n-                                    \"no opaque types in constrain_opaque_type {:?}, {:?}\",\n-                                    a,\n-                                    b\n-                                ),\n-                            };\n-                        let mut result = self.type_checker.infcx.constrain_opaque_type(\n-                            param_env,\n-                            opaque_type_key,\n-                            concrete_ty,\n-                            span,\n-                        )?;\n-                        result.obligations.push(infcx.opaque_ty_obligation(\n-                            a,\n-                            b,\n-                            a_is_expected,\n-                            param_env,\n-                            cause,\n-                        ));\n-                        Ok(result)\n+                        Ok(InferOk {\n+                            value: (),\n+                            obligations: vec![infcx.opaque_ty_obligation(\n+                                a,\n+                                b,\n+                                a_is_expected,\n+                                param_env,\n+                                cause,\n+                            )],\n+                        })\n                     },\n-                    || \"constrain_opaque_type\".to_string(),\n+                    || \"register_opaque_type\".to_string(),\n                 ),\n             )\n             .unwrap();"}, {"sha": "20ccad26e89103f2d2409b65b431714a752703bb", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -723,7 +723,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         true\n     }\n \n-    fn constrain_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n+    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool) {\n         self.obligations.push(self.infcx.opaque_ty_obligation(\n             a,\n             b,"}, {"sha": "3a288516664e380ad1371902797a273d161b3601", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -90,7 +90,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n         info: ty::VarianceDiagInfo<'tcx>,\n     );\n \n-    fn constrain_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool);\n+    fn register_opaque_type(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected: bool);\n \n     fn const_equate(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);\n \n@@ -591,7 +591,7 @@ where\n                     (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n                     _ => unreachable!(),\n                 };\n-                self.delegate.constrain_opaque_type(a, b, true);\n+                self.delegate.register_opaque_type(a, b, true);\n                 trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n                 Ok(a)\n             }"}, {"sha": "dc0ebf23058fd0a6bc39b92cbd0023cf6150cdc0", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::infer::{InferCtxt, InferOk, InferResult};\n+use crate::infer::{InferCtxt, InferOk};\n use crate::traits::{self, PredicateObligation, PredicateObligations};\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n@@ -379,13 +379,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// - `free_region_relations` -- something that can be used to relate\n     ///   the free regions (`'a`) that appear in the impl trait.\n     #[instrument(level = \"debug\", skip(self))]\n-    pub fn constrain_opaque_type(\n+    pub fn register_member_constraints(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         concrete_ty: Ty<'tcx>,\n         span: Span,\n-    ) -> InferResult<'tcx, ()> {\n+    ) {\n         let def_id = opaque_type_key.def_id;\n \n         let tcx = self.tcx;\n@@ -445,7 +445,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 )\n             },\n         });\n-        Ok(InferOk { value: (), obligations: vec![] })\n     }\n \n     pub fn opaque_ty_obligation("}, {"sha": "d3a28c6d3aa35e8947f0014a6b8b5f2bda0bba5c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// purpose of this function is to do that translation.\n     ///\n     /// (*) C1 and C2 were introduced in the comments on\n-    /// `constrain_opaque_type`. Read that comment for more context.\n+    /// `register_member_constraints`. Read that comment for more context.\n     ///\n     /// # Parameters\n     ///"}, {"sha": "cdb141c0e3ea2802c7efd1d6a3a368d832b5e64e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -14,16 +14,21 @@ LL | | }\n    = help: consider adding the following bound: `'a: 'b`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:16:65\n+  --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                                                 ^^^^^^^^^^^^^^\n+LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+   |  ____________________________________--__________________________________________^\n+   | |                                    |\n+   | |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n+LL | |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^\n    |\n-note: hidden type `(&'a u8, &'<empty> u8)` captures lifetime smaller than the function body\n-  --> $DIR/ret-impl-trait-one.rs:16:65\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                                                 ^^^^^^^^^^^^^^\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                                                ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2eb3a07059f7bf97d52310280da2d46bf2bbf14b", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -11,16 +11,21 @@ LL | | }\n    | |_^ ...but data from `a` is returned here\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-one.rs:16:65\n+  --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                                                 ^^^^^^^^^^^^^^\n+LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n+   |  ____________________________________--__________________________________________^\n+   | |                                    |\n+   | |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n+LL | |\n+LL | |     (a, b)\n+LL | | }\n+   | |_^\n    |\n-note: hidden type `(&'a u8, &'<empty> u8)` captures lifetime smaller than the function body\n-  --> $DIR/ret-impl-trait-one.rs:16:65\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n-LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |                                                                 ^^^^^^^^^^^^^^\n+LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n+   |                                                                                ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "47e05bce0f8de747a9f1baa6c588917459f0bf8b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -27,7 +27,6 @@ where\n     // ```\n     if condition() { a } else { b }\n     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n }\n \n fn condition() -> bool {"}, {"sha": "0e195558badbdcba9bf83e894474d1554acd8bac", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -12,20 +12,6 @@ help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n    |                                                                                             ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:28:33\n-   |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n-...\n-LL |     if condition() { a } else { b }\n-   |                                 ^\n-   |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n-   |                                                                                             ++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "321cb8c92a1774eb825e44c5d681cf48d24a5481", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -30,7 +30,6 @@ fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n     // We are forced to pick that '0 = 'e, because only 'e is outlived by *both* 'a and 'b.\n     if condition() { a } else { b }\n     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n }\n \n fn condition() -> bool {"}, {"sha": "032e88c6d9c139e284af91885eb998532bf4257e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -12,20 +12,6 @@ help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n    |                                                                                 ++++\n \n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:31:33\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n-...\n-LL |     if condition() { a } else { b }\n-   |                                 ^\n-   |\n-help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n-   |\n-LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n-   |                                                                                 ++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0700`."}, {"sha": "570a08cb58768ff9c1fc6ded908cade51d391b22", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7bce50c01af576ca0132d9eddcd0ac85e82c9092/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=7bce50c01af576ca0132d9eddcd0ac85e82c9092", "patch": "@@ -1,14 +1,15 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                                     ^^^^^^^^^^\n+   |                          -                     ^^^^^^^^\n+   |                          |\n+   |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n    |\n-note: hidden type `Pin<&'<empty> Foo>` captures lifetime smaller than the function body\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                                     ^^^^^^^^^^\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                                ++++\n \n error: aborting due to previous error\n "}]}