{"sha": "deba5ddd0776108c51a69844d0ffe3f96886dd52", "node_id": "C_kwDOAAsO6NoAKGRlYmE1ZGRkMDc3NjEwOGM1MWE2OTg0NGQwZmZlM2Y5Njg4NmRkNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-10T03:26:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-10T03:26:29Z"}, "message": "Auto merge of #106656 - JohnTitor:rollup-rk2qltg, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #105034 (Add example for iterator_flatten)\n - #105708 (Enable atomic cas for bpf targets)\n - #106175 (Fix bad import suggestion with nested `use` tree)\n - #106204 (No need to take opaques in `check_type_bounds`)\n - #106387 (Revert \"bootstrap: Get rid of `tail_args` in `stream_cargo`\")\n - #106636 (Accept old spelling of Fuchsia target triples)\n - #106639 (update Miri)\n - #106640 (update test for inductive canonical cycles)\n - #106647 (rustdoc: merge common CSS for `a`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fd0f493b3efc585f9779903c7451d10a016a958b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0f493b3efc585f9779903c7451d10a016a958b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deba5ddd0776108c51a69844d0ffe3f96886dd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deba5ddd0776108c51a69844d0ffe3f96886dd52", "html_url": "https://github.com/rust-lang/rust/commit/deba5ddd0776108c51a69844d0ffe3f96886dd52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deba5ddd0776108c51a69844d0ffe3f96886dd52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53924d8c7046aee91c7f83bf4c9c788c2406a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53924d8c7046aee91c7f83bf4c9c788c2406a7d", "html_url": "https://github.com/rust-lang/rust/commit/d53924d8c7046aee91c7f83bf4c9c788c2406a7d"}, {"sha": "ed840a6c3b953c54e221951910bb33b351bec145", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed840a6c3b953c54e221951910bb33b351bec145", "html_url": "https://github.com/rust-lang/rust/commit/ed840a6c3b953c54e221951910bb33b351bec145"}], "stats": {"total": 730, "additions": 553, "deletions": 177}, "files": [{"sha": "4fe14c7af2faaa84fef3d08f130c1ee0a43f33e6", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -318,7 +318,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n \n         // This is still required for many(half of the tests in ui/type-alias-impl-trait)\n         // tests to pass\n-        let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+        let _ = infcx.take_opaque_types();\n \n         if errors.is_empty() {\n             definition_ty"}, {"sha": "7a3db191f0c66eef0436ae8844e9ca6e5e33c3cb", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -209,7 +209,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     );\n \n     translate_outlives_facts(&mut checker);\n-    let opaque_type_values = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let opaque_type_values = infcx.take_opaque_types();\n \n     let opaque_type_values = opaque_type_values\n         .into_iter()"}, {"sha": "f5f3d5de6b5a2f15088c28e0399ac5a3ca324d8e", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -58,6 +58,6 @@ pub fn is_subtype<'tcx>(\n     // even if they're constrained in our current function.\n     //\n     // It seems very unlikely that this hides any bugs.\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n     errors.is_empty()\n }"}, {"sha": "43795cfba3fd81edc85efcd69526445e26c82a54", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -475,7 +475,7 @@ fn check_opaque_meets_bounds<'tcx>(\n         }\n     }\n     // Clean up after ourselves\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n }\n \n fn is_enum_of_nonnullable_ptr<'tcx>("}, {"sha": "7af89934d1420eea5e4461e267710b54f589204d", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -424,7 +424,7 @@ fn compare_asyncness<'tcx>(\n             ty::Alias(ty::Opaque, ..) => {\n                 // allow both `async fn foo()` and `fn foo() -> impl Future`\n             }\n-            ty::Error(rustc_errors::ErrorGuaranteed { .. }) => {\n+            ty::Error(_) => {\n                 // We don't know if it's ok, but at least it's already an error.\n             }\n             _ => {\n@@ -1972,22 +1972,6 @@ pub(super) fn check_type_bounds<'tcx>(\n         &outlives_environment,\n     )?;\n \n-    let constraints = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n-    for (key, value) in constraints {\n-        infcx\n-            .err_ctxt()\n-            .report_mismatched_types(\n-                &ObligationCause::misc(\n-                    value.hidden_type.span,\n-                    tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local()),\n-                ),\n-                tcx.mk_opaque(key.def_id.to_def_id(), key.substs),\n-                value.hidden_type.ty,\n-                TypeError::Mismatch,\n-            )\n-            .emit();\n-    }\n-\n     Ok(())\n }\n "}, {"sha": "8c24b6006444a8dc26d21d57b009768b05a0ad82", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -534,8 +534,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_opaque_types(&mut self) {\n-        let opaque_types =\n-            self.fcx.infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+        let opaque_types = self.fcx.infcx.take_opaque_types();\n         for (opaque_type_key, decl) in opaque_types {\n             let hidden_type = self.resolve(decl.hidden_type, &decl.hidden_type.span);\n             let opaque_type_key = self.resolve(opaque_type_key, &decl.hidden_type.span);"}, {"sha": "3d49182f0b8172d1edd7bb371b743ef0989e8243", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -156,10 +156,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// As the new solver does canonicalization slightly differently, this is also used there\n     /// for now. This should hopefully change fairly soon.\n     pub fn take_opaque_types_for_query_response(&self) -> Vec<(Ty<'tcx>, Ty<'tcx>)> {\n-        self.inner\n-            .borrow_mut()\n-            .opaque_type_storage\n-            .take_opaque_types()\n+        std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n             .into_iter()\n             .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n             .collect()"}, {"sha": "6bef3f000a5ac54fb4a16c34a2cdd5cfa5049ed0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1338,6 +1338,12 @@ impl<'tcx> InferCtxt<'tcx> {\n         var_infos\n     }\n \n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    pub fn take_opaque_types(&self) -> opaque_types::OpaqueTypeMap<'tcx> {\n+        debug_assert_ne!(self.defining_use_anchor, DefiningAnchor::Error);\n+        std::mem::take(&mut self.inner.borrow_mut().opaque_type_storage.opaque_types)\n+    }\n+\n     pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {\n         self.resolve_vars_if_possible(t).to_string()\n     }"}, {"sha": "ae4b85c8799ef130b252ffe50a210834c6bcfd58", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -29,11 +29,6 @@ impl<'tcx> OpaqueTypeStorage<'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\", ret)]\n-    pub fn take_opaque_types(&mut self) -> OpaqueTypeMap<'tcx> {\n-        std::mem::take(&mut self.opaque_types)\n-    }\n-\n     #[inline]\n     pub(crate) fn with_log<'a>(\n         &'a mut self,"}, {"sha": "7d62d67d64f078256ed63ba4d1f211858fca1b09", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -161,6 +161,7 @@ impl<'a> Resolver<'a> {\n                     found_use,\n                     DiagnosticMode::Normal,\n                     path,\n+                    \"\",\n                 );\n                 err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n@@ -690,6 +691,7 @@ impl<'a> Resolver<'a> {\n                         FoundUse::Yes,\n                         DiagnosticMode::Pattern,\n                         vec![],\n+                        \"\",\n                     );\n                 }\n                 err\n@@ -1344,6 +1346,7 @@ impl<'a> Resolver<'a> {\n             FoundUse::Yes,\n             DiagnosticMode::Normal,\n             vec![],\n+            \"\",\n         );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n@@ -2309,7 +2312,7 @@ enum FoundUse {\n }\n \n /// Whether a binding is part of a pattern or a use statement. Used for diagnostics.\n-enum DiagnosticMode {\n+pub(crate) enum DiagnosticMode {\n     Normal,\n     /// The binding is part of a pattern\n     Pattern,\n@@ -2324,6 +2327,8 @@ pub(crate) fn import_candidates(\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n     candidates: &[ImportSuggestion],\n+    mode: DiagnosticMode,\n+    append: &str,\n ) {\n     show_candidates(\n         session,\n@@ -2333,8 +2338,9 @@ pub(crate) fn import_candidates(\n         candidates,\n         Instead::Yes,\n         FoundUse::Yes,\n-        DiagnosticMode::Import,\n+        mode,\n         vec![],\n+        append,\n     );\n }\n \n@@ -2352,6 +2358,7 @@ fn show_candidates(\n     found_use: FoundUse,\n     mode: DiagnosticMode,\n     path: Vec<Segment>,\n+    append: &str,\n ) {\n     if candidates.is_empty() {\n         return;\n@@ -2416,7 +2423,7 @@ fn show_candidates(\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n+                candidate.0 = format!(\"{add_use}{}{append};\\n{additional_newline}\", &candidate.0);\n             }\n \n             err.span_suggestions("}, {"sha": "00f65ac37b6a8eaaa0105b5fd422184229679c2c", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1,6 +1,6 @@\n //! A bunch of methods and structures more or less related to resolving imports.\n \n-use crate::diagnostics::{import_candidates, Suggestion};\n+use crate::diagnostics::{import_candidates, DiagnosticMode, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n@@ -402,7 +402,7 @@ struct UnresolvedImportError {\n     label: Option<String>,\n     note: Option<String>,\n     suggestion: Option<Suggestion>,\n-    candidate: Option<Vec<ImportSuggestion>>,\n+    candidates: Option<Vec<ImportSuggestion>>,\n }\n \n pub struct ImportResolver<'a, 'b> {\n@@ -475,12 +475,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     errors = vec![];\n                 }\n                 if seen_spans.insert(err.span) {\n-                    let path = import_path_to_string(\n-                        &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n-                        &import.kind,\n-                        err.span,\n-                    );\n-                    errors.push((path, err));\n+                    errors.push((import, err));\n                     prev_root_id = import.root_id;\n                 }\n             } else if is_indeterminate {\n@@ -494,10 +489,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: None,\n                     note: None,\n                     suggestion: None,\n-                    candidate: None,\n+                    candidates: None,\n                 };\n+                // FIXME: there should be a better way of doing this than\n+                // formatting this as a string then checking for `::`\n                 if path.contains(\"::\") {\n-                    errors.push((path, err))\n+                    errors.push((import, err))\n                 }\n             }\n         }\n@@ -507,7 +504,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n     }\n \n-    fn throw_unresolved_import_error(&self, errors: Vec<(String, UnresolvedImportError)>) {\n+    fn throw_unresolved_import_error(&self, errors: Vec<(&Import<'_>, UnresolvedImportError)>) {\n         if errors.is_empty() {\n             return;\n         }\n@@ -516,7 +513,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         const MAX_LABEL_COUNT: usize = 10;\n \n         let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n-        let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n+        let paths = errors\n+            .iter()\n+            .map(|(import, err)| {\n+                let path = import_path_to_string(\n+                    &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),\n+                    &import.kind,\n+                    err.span,\n+                );\n+                format!(\"`{path}`\")\n+            })\n+            .collect::<Vec<_>>();\n         let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n@@ -525,7 +532,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             diag.note(note);\n         }\n \n-        for (_, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n+        for (import, err) in errors.into_iter().take(MAX_LABEL_COUNT) {\n             if let Some(label) = err.label {\n                 diag.span_label(err.span, label);\n             }\n@@ -538,14 +545,36 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n \n-            if let Some(candidate) = &err.candidate {\n-                import_candidates(\n-                    self.r.session,\n-                    &self.r.untracked.source_span,\n-                    &mut diag,\n-                    Some(err.span),\n-                    &candidate,\n-                )\n+            if let Some(candidates) = &err.candidates {\n+                match &import.kind {\n+                    ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n+                        self.r.session,\n+                        &self.r.untracked.source_span,\n+                        &mut diag,\n+                        Some(err.span),\n+                        &candidates,\n+                        DiagnosticMode::Import,\n+                        (source != target)\n+                            .then(|| format!(\" as {target}\"))\n+                            .as_deref()\n+                            .unwrap_or(\"\"),\n+                    ),\n+                    ImportKind::Single { nested: true, source, target, .. } => {\n+                        import_candidates(\n+                            self.r.session,\n+                            &self.r.untracked.source_span,\n+                            &mut diag,\n+                            None,\n+                            &candidates,\n+                            DiagnosticMode::Normal,\n+                            (source != target)\n+                                .then(|| format!(\" as {target}\"))\n+                                .as_deref()\n+                                .unwrap_or(\"\"),\n+                        );\n+                    }\n+                    _ => {}\n+                }\n             }\n         }\n \n@@ -707,14 +736,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 String::from(\"a similar path exists\"),\n                                 Applicability::MaybeIncorrect,\n                             )),\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n                             note: None,\n                             suggestion,\n-                            candidate: None,\n+                            candidates: None,\n                         },\n                     };\n                     return Some(err);\n@@ -761,7 +790,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 )),\n                                 note: None,\n                                 suggestion: None,\n-                                candidate: None,\n+                                candidates: None,\n                             });\n                         }\n                     }\n@@ -873,7 +902,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 let resolutions = resolutions.as_ref().into_iter().flat_map(|r| r.iter());\n                 let names = resolutions\n                     .filter_map(|(BindingKey { ident: i, .. }, resolution)| {\n-                        if *i == ident {\n+                        if i.name == ident.name {\n                             return None;\n                         } // Never suggest the same name\n                         match *resolution.borrow() {\n@@ -943,7 +972,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: Some(label),\n                     note,\n                     suggestion,\n-                    candidate: if !parent_suggestion.is_empty() {\n+                    candidates: if !parent_suggestion.is_empty() {\n                         Some(parent_suggestion)\n                     } else {\n                         None"}, {"sha": "ddecbb1a8c4a46350588fc91f5a10474dabceacb", "filename": "compiler/rustc_target/src/spec/aarch64_fuchsia.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_fuchsia.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1 @@\n+pub use crate::spec::aarch64_unknown_fuchsia::target;"}, {"sha": "2b00cda44b511372a33ba51c89c95eb721fcd249", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -6,7 +6,7 @@ pub fn opts(endian: Endian) -> TargetOptions {\n         allow_asm: true,\n         endian,\n         linker_flavor: LinkerFlavor::Bpf,\n-        atomic_cas: false,\n+        atomic_cas: true,\n         dynamic_linking: true,\n         no_builtins: true,\n         panic_strategy: PanicStrategy::Abort,\n@@ -19,6 +19,10 @@ pub fn opts(endian: Endian) -> TargetOptions {\n         obj_is_bitcode: true,\n         requires_lto: false,\n         singlethread: true,\n+        // When targeting the `v3` cpu in llvm, 32-bit atomics are also supported.\n+        // But making this value change based on the target cpu can be mostly confusing\n+        // and would require a bit of a refactor.\n+        min_atomic_width: Some(64),\n         max_atomic_width: Some(64),\n         ..Default::default()\n     }"}, {"sha": "1e80b8b759db4e008a3cf831dd1117eab2f6e2b6", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -981,7 +981,7 @@ impl fmt::Display for StackProtector {\n }\n \n macro_rules! supported_targets {\n-    ( $(($triple:literal, $module:ident ),)+ ) => {\n+    ( $(($triple:literal, $module:ident),)+ ) => {\n         $(mod $module;)+\n \n         /// List of supported targets\n@@ -1109,7 +1109,11 @@ supported_targets! {\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n+    // FIXME(#106649): Remove aarch64-fuchsia in favor of aarch64-unknown-fuchsia\n+    (\"aarch64-fuchsia\", aarch64_fuchsia),\n     (\"aarch64-unknown-fuchsia\", aarch64_unknown_fuchsia),\n+    // FIXME(#106649): Remove x86_64-fuchsia in favor of x86_64-unknown-fuchsia\n+    (\"x86_64-fuchsia\", x86_64_fuchsia),\n     (\"x86_64-unknown-fuchsia\", x86_64_unknown_fuchsia),\n \n     (\"avr-unknown-gnu-atmega328\", avr_unknown_gnu_atmega328),"}, {"sha": "96fed09756667cb0cbcd85fa1c636dd29c0a5bda", "filename": "compiler/rustc_target/src/spec/x86_64_fuchsia.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fuchsia.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1 @@\n+pub use crate::spec::x86_64_unknown_fuchsia::target;"}, {"sha": "37b40a2f75adc108a77765070c011073a69da460", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -450,9 +450,6 @@ pub fn impossible_predicates<'tcx>(\n     }\n     let errors = ocx.select_all_or_error();\n \n-    // Clean up after ourselves\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n-\n     let result = !errors.is_empty();\n     debug!(\"impossible_predicates = {:?}\", result);\n     result"}, {"sha": "f127ef8343f91e5a262beed9bd805e6a582a237b", "filename": "compiler/rustc_traits/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fcodegen.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -82,7 +82,7 @@ pub fn codegen_select_candidate<'tcx>(\n     // Opaque types may have gotten their hidden types constrained, but we can ignore them safely\n     // as they will get constrained elsewhere, too.\n     // (ouz-a) This is required for `type-alias-impl-trait/assoc-projection-ice.rs` to pass\n-    let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n+    let _ = infcx.take_opaque_types();\n \n     Ok(&*tcx.arena.alloc(impl_source))\n }"}, {"sha": "99aaf798e411fb01dbea3c1c5b0286e014fe03d2", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1514,6 +1514,18 @@ pub trait Iterator {\n     /// assert_eq!(merged, \"alphabetagamma\");\n     /// ```\n     ///\n+    /// Flattening works on any `IntoIterator` type, including `Option` and `Result`:\n+    ///\n+    /// ```\n+    /// let options = vec![Some(123), Some(321), None, Some(231)];\n+    /// let flattened_options: Vec<_> = options.into_iter().flatten().collect();\n+    /// assert_eq!(flattened_options, vec![123, 321, 231]);\n+    ///\n+    /// let results = vec![Ok(123), Ok(321), Err(456), Ok(231)];\n+    /// let flattened_results: Vec<_> = results.into_iter().flatten().collect();\n+    /// assert_eq!(flattened_results, vec![123, 321, 231]);\n+    /// ```\n+    ///\n     /// Flattening only removes one level of nesting at a time:\n     ///\n     /// ```"}, {"sha": "2771bd2264ce2b55c9a06c928097ea7da119149a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -99,13 +99,20 @@ impl Step for Std {\n             cargo_subcommand(builder.kind),\n         );\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} library artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &libstd_stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &libstd_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         // We skip populating the sysroot in non-zero stage because that'll lead\n         // to rlib/rmeta conflicts if std gets built during this session.\n@@ -149,7 +156,6 @@ impl Step for Std {\n         for krate in builder.in_tree_crates(\"test\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} library test/bench/example targets ({} -> {})\",\n@@ -158,6 +164,7 @@ impl Step for Std {\n         run_cargo(\n             builder,\n             cargo,\n+            args(builder),\n             &libstd_test_stamp(builder, compiler, target),\n             vec![],\n             true,\n@@ -226,13 +233,20 @@ impl Step for Rustc {\n         for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} compiler artifacts ({} -> {})\",\n             builder.top_stage, &compiler.host, target\n         ));\n-        run_cargo(builder, cargo, &librustc_stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &librustc_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n@@ -279,7 +293,6 @@ impl Step for CodegenBackend {\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n         rustc_cargo_env(builder, &mut cargo, target);\n-        cargo.args(args(builder));\n \n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n@@ -289,6 +302,7 @@ impl Step for CodegenBackend {\n         run_cargo(\n             builder,\n             cargo,\n+            args(builder),\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n@@ -345,13 +359,19 @@ impl Step for RustAnalyzer {\n             cargo.arg(\"--benches\");\n         }\n \n-        cargo.args(args(builder));\n-\n         builder.info(&format!(\n             \"Checking stage{} {} artifacts ({} -> {})\",\n             compiler.stage, \"rust-analyzer\", &compiler.host.triple, target.triple\n         ));\n-        run_cargo(builder, cargo, &stamp(builder, compiler, target), vec![], true, false);\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+            false,\n+        );\n \n         /// Cargo's output path in a given stage, compiled by a particular\n         /// compiler for the specified target.\n@@ -405,8 +425,6 @@ macro_rules! tool_check_step {\n                     cargo.arg(\"--all-targets\");\n                 }\n \n-                cargo.args(args(builder));\n-\n                 // Enable internal lints for clippy and rustdoc\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n                 // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n@@ -422,6 +440,7 @@ macro_rules! tool_check_step {\n                 run_cargo(\n                     builder,\n                     cargo,\n+                    args(builder),\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,"}, {"sha": "6b211d3ec6e890f74e67b7ed5c9960cb065b8ac4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -144,6 +144,7 @@ impl Step for Std {\n         run_cargo(\n             builder,\n             cargo,\n+            vec![],\n             &libstd_stamp(builder, compiler, target),\n             target_deps,\n             false,\n@@ -738,6 +739,7 @@ impl Step for Rustc {\n         run_cargo(\n             builder,\n             cargo,\n+            vec![],\n             &librustc_stamp(builder, compiler, target),\n             vec![],\n             false,\n@@ -998,7 +1000,7 @@ impl Step for CodegenBackend {\n             \"Building stage{} codegen backend {} ({} -> {})\",\n             compiler.stage, backend, &compiler.host, target\n         ));\n-        let files = run_cargo(builder, cargo, &tmp_stamp, vec![], false, false);\n+        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, vec![], false, false);\n         if builder.config.dry_run() {\n             return;\n         }\n@@ -1422,6 +1424,7 @@ pub fn add_to_sysroot(\n pub fn run_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n+    tail_args: Vec<String>,\n     stamp: &Path,\n     additional_target_deps: Vec<(PathBuf, DependencyType)>,\n     is_check: bool,\n@@ -1448,7 +1451,7 @@ pub fn run_cargo(\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let (filenames, crate_types) = match msg {\n             CargoMessage::CompilerArtifact {\n                 filenames,\n@@ -1585,6 +1588,7 @@ pub fn run_cargo(\n pub fn stream_cargo(\n     builder: &Builder<'_>,\n     cargo: Cargo,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n     let mut cargo = Command::from(cargo);\n@@ -1604,6 +1608,10 @@ pub fn stream_cargo(\n     }\n     cargo.arg(\"--message-format\").arg(message_format).stdout(Stdio::piped());\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,"}, {"sha": "24b033cc0dc5eb4f6e63104efc065a507d35a114", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -72,7 +72,7 @@ impl Step for ToolBuild {\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 \"rls\" | \"cargo\" | \"clippy-driver\" | \"miri\" | \"rustfmt\" => {}"}, {"sha": "16057048259bfdc41b8ba853554fd14e828c4cab", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -124,6 +124,7 @@ target | std | notes\n -------|:---:|-------\n `aarch64-apple-ios` | \u2713 | ARM64 iOS\n [`aarch64-apple-ios-sim`](platform-support/aarch64-apple-ios-sim.md) | \u2713 | Apple iOS Simulator on ARM64\n+`aarch64-fuchsia` | \u2713 | Alias for `aarch64-unknown-fuchsia`\n `aarch64-unknown-fuchsia` | \u2713 | ARM64 Fuchsia\n [`aarch64-linux-android`](platform-support/android.md) | \u2713 | ARM64 Android\n `aarch64-unknown-none-softfloat` | * | Bare ARM64, softfloat\n@@ -177,6 +178,7 @@ target | std | notes\n `wasm32-wasi` | \u2713 | WebAssembly with WASI\n `x86_64-apple-ios` | \u2713 | 64-bit x86 iOS\n [`x86_64-fortanix-unknown-sgx`](platform-support/x86_64-fortanix-unknown-sgx.md) | \u2713 | [Fortanix ABI] for 64-bit Intel SGX\n+`x86_64-fuchsia` | \u2713 | Alias for `x86_64-unknown-fuchsia`\n `x86_64-unknown-fuchsia` | \u2713 | 64-bit Fuchsia\n [`x86_64-linux-android`](platform-support/android.md) | \u2713 | 64-bit x86 Android\n `x86_64-pc-solaris` | \u2713 | 64-bit Solaris 10/11, illumos"}, {"sha": "8ec4631f7d0876efc350805b0ccb37829cf29adf", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -253,6 +253,7 @@ h1 a,\n \n a {\n \tcolor: var(--link-color);\n+\ttext-decoration: none;\n }\n \n ol, ul {\n@@ -662,10 +663,6 @@ nav.sub {\n \tmargin: 0 0 15px 0;\n }\n \n-a {\n-\ttext-decoration: none;\n-}\n-\n .small-section-header {\n \t/* fields use <span> tags, but should get their own lines */\n \tdisplay: block;"}, {"sha": "f1f4caee3619744a870e51ed89d51770f5500521", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -2,10 +2,7 @@ error[E0432]: unresolved import `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:20:9\n    |\n LL |     use my_core;\n-   |         ^^^^^^^\n-   |         |\n-   |         no `my_core` in the root\n-   |         help: a similar name exists in the module: `my_core`\n+   |         ^^^^^^^ no `my_core` in the root\n \n error[E0432]: unresolved import `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:7:13"}, {"sha": "2e95480ad412e5d227718d0131377c12f0b66a7e", "filename": "src/test/ui/imports/bad-import-in-nested.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1,27 @@\n+// edition: 2021\n+\n+#![allow(unused)]\n+\n+mod A {\n+    pub(crate) type AA = ();\n+    pub(crate) type BB = ();\n+\n+    mod A2 {\n+        use super::{super::C::D::AA, AA as _};\n+        //~^ ERROR unresolved import\n+    }\n+}\n+\n+mod C {\n+    pub mod D {}\n+}\n+\n+mod B {\n+    use crate::C::{self, AA};\n+    //~^ ERROR unresolved import\n+\n+    use crate::{A, C::BB};\n+    //~^ ERROR unresolved import\n+}\n+\n+fn main() {}"}, {"sha": "855b1e637e97f5c892796597fae452c54fadc21d", "filename": "src/test/ui/imports/bad-import-in-nested.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1,30 @@\n+error[E0432]: unresolved import `super::super::C::D::AA`\n+  --> $DIR/bad-import-in-nested.rs:10:21\n+   |\n+LL |         use super::{super::C::D::AA, AA as _};\n+   |                     ^^^^^^^^^^^^^^^ no `AA` in `C::D`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n+error[E0432]: unresolved import `crate::C::AA`\n+  --> $DIR/bad-import-in-nested.rs:20:26\n+   |\n+LL |     use crate::C::{self, AA};\n+   |                          ^^ no `AA` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::AA\n+\n+error[E0432]: unresolved import `crate::C::BB`\n+  --> $DIR/bad-import-in-nested.rs:23:20\n+   |\n+LL |     use crate::{A, C::BB};\n+   |                    ^^^^^ no `BB` in `C`\n+   |\n+   = note: consider importing this type alias instead:\n+           crate::A::BB\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "ffe56916f92f018f8e5dfe945c5152a798b4d47f", "filename": "src/test/ui/imports/bad-import-with-rename.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1,16 @@\n+mod A {\n+    pub type B = ();\n+    pub type B2 = ();\n+}\n+\n+mod C {\n+    use crate::D::B as _;\n+    //~^ ERROR unresolved import `crate::D::B`\n+\n+    use crate::D::B2;\n+    //~^ ERROR unresolved import `crate::D::B2`\n+}\n+\n+mod D {}\n+\n+fn main() {}"}, {"sha": "cace2a7a51c8eca5529630fd7788f7415af90c71", "filename": "src/test/ui/imports/bad-import-with-rename.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fbad-import-with-rename.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -0,0 +1,25 @@\n+error[E0432]: unresolved import `crate::D::B`\n+  --> $DIR/bad-import-with-rename.rs:7:9\n+   |\n+LL |     use crate::D::B as _;\n+   |         ^^^^^^^^^^^^^^^^ no `B` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B as _;\n+   |         ~~~~~~~~~~\n+\n+error[E0432]: unresolved import `crate::D::B2`\n+  --> $DIR/bad-import-with-rename.rs:10:9\n+   |\n+LL |     use crate::D::B2;\n+   |         ^^^^^^^^^^^^ no `B2` in `D`\n+   |\n+help: consider importing this type alias instead\n+   |\n+LL |     use A::B2;\n+   |         ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0432`."}, {"sha": "a45c5bd45880fde209a40cb74048715bf0a58c05", "filename": "src/test/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -2,25 +2,18 @@ error[E0432]: unresolved import `main`\n   --> $DIR/inaccessible-test-modules.rs:5:5\n    |\n LL | use main as x;\n-   |     ----^^^^^\n-   |     |\n-   |     no `main` in the root\n-   |     help: a similar name exists in the module: `main`\n+   |     ^^^^^^^^^ no `main` in the root\n \n error[E0432]: unresolved import `test`\n   --> $DIR/inaccessible-test-modules.rs:6:5\n    |\n LL | use test as y;\n    |     ^^^^^^^^^ no `test` in the root\n    |\n-help: a similar name exists in the module\n-   |\n-LL | use test as y;\n-   |     ~~~~\n help: consider importing this module instead\n    |\n-LL | use test::test;\n-   |     ~~~~~~~~~~~\n+LL | use test::test as y;\n+   |     ~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5449f5f00d52a8699d7132f7b7e86ce3bf5f8cc7", "filename": "src/test/ui/traits/solver-cycles/inductive-canonical-cycle.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1,28 +1,69 @@\n-// known-bug\n+// check-pass\n+\n+// This test checks that we're correctly dealing with inductive cycles\n+// with canonical inference variables.\n \n-// This should compile but fails with the current solver.\n-//\n-// This checks that the new solver uses `Ambiguous` when hitting the\n-// inductive cycle here when proving `exists<^0, ^1> (): Trait<^0, ^1>`\n-// which requires proving `Trait<?1, ?0>` but that has the same\n-// canonical representation.\n trait Trait<T, U> {}\n \n-impl<T, U> Trait<T, U> for ()\n+trait IsNotU32 {}\n+impl IsNotU32 for i32 {}\n+impl<T: IsNotU32, U> Trait<T, U> for () // impl 1\n where\n-    (): Trait<U, T>,\n-    T: OtherTrait,\n+    (): Trait<U, T>\n {}\n \n-trait OtherTrait {}\n-impl OtherTrait for u32 {}\n+impl<T> Trait<u32, T> for () {} // impl 2\n+\n+// If we now check whether `(): Trait<?0, ?1>` holds this has to\n+// result in ambiguity as both `for<T> (): Trait<u32, T>` and `(): Trait<i32, u32>`\n+// applies. The remainder of this test asserts that.\n+\n+// If we were to error on inductive cycles with canonical inference variables\n+// this would be wrong:\n \n-fn require_trait<T, U>()\n+// (): Trait<?0, ?1>\n+//  - impl 1\n+//      - ?0: IsNotU32 // ambig\n+//      - (): Trait<?1, ?0> // canonical cycle -> err\n+//      - ERR\n+//  - impl 2\n+//      - OK ?0 == u32\n+//\n+// Result: OK ?0 == u32.\n+\n+// (): Trait<i32, u32>\n+//  - impl 1\n+//      - i32: IsNotU32 // ok\n+//      - (): Trait<u32, i32>\n+//          - impl 1\n+//              - u32: IsNotU32 // err\n+//              - ERR\n+//          - impl 2\n+//              - OK\n+//      - OK\n+//  - impl 2 (trivial ERR)\n+//\n+// Result OK\n+\n+// This would mean that `(): Trait<?0, ?1>` is not complete,\n+// which is unsound if we're in coherence.\n+\n+fn implements_trait<T, U>() -> (T, U)\n where\n-    (): Trait<T, U>\n-{}\n+    (): Trait<T, U>,\n+{\n+    todo!()\n+}\n+\n+// A hack to only constrain the infer vars after first checking\n+// the `(): Trait<_, _>`.\n+trait Constrain<T> {}\n+impl<T> Constrain<T> for  T {}\n+fn constrain<T: Constrain<U>, U>(_: U) {}\n \n fn main() {\n-    require_trait::<_, _>();\n-    //~^ ERROR overflow evaluating\n+    let (x, y) = implements_trait::<_, _>();\n+\n+    constrain::<i32, _>(x);\n+    constrain::<u32, _>(y);\n }"}, {"sha": "e4b84e07822d28c784896071f43f19244aff4da6", "filename": "src/test/ui/traits/solver-cycles/inductive-canonical-cycle.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d53924d8c7046aee91c7f83bf4c9c788c2406a7d/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d53924d8c7046aee91c7f83bf4c9c788c2406a7d/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsolver-cycles%2Finductive-canonical-cycle.stderr?ref=d53924d8c7046aee91c7f83bf4c9c788c2406a7d", "patch": "@@ -1,26 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `_: Sized`\n-  --> $DIR/inductive-canonical-cycle.rs:26:5\n-   |\n-LL |     require_trait::<_, _>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`inductive_canonical_cycle`)\n-note: required for `()` to implement `Trait<_, _>`\n-  --> $DIR/inductive-canonical-cycle.rs:11:12\n-   |\n-LL | impl<T, U> Trait<T, U> for ()\n-   |            ^^^^^^^^^^^     ^^\n-   = note: 128 redundant requirements hidden\n-   = note: required for `()` to implement `Trait<_, _>`\n-note: required by a bound in `require_trait`\n-  --> $DIR/inductive-canonical-cycle.rs:22:9\n-   |\n-LL | fn require_trait<T, U>()\n-   |    ------------- required by a bound in this\n-LL | where\n-LL |     (): Trait<T, U>\n-   |         ^^^^^^^^^^^ required by this bound in `require_trait`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "37f66d0033f068e640bfbb15a5d023c66e22c6ff", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -185,7 +185,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     // explicitly do this even if RUSTC_STAGE is set, since for these builds we do *not* want the\n     // bootstrap `rustc` thing in our way! Instead, we have MIRI_HOST_SYSROOT to use for host\n     // builds.\n-    cmd.env(\"RUSTC\", &fs::canonicalize(find_miri()).unwrap());\n+    cmd.env(\"RUSTC\", fs::canonicalize(find_miri()).unwrap());\n     cmd.env(\"MIRI_BE_RUSTC\", \"target\"); // we better remember to *unset* this in the other phases!\n \n     // Set rustdoc to us as well, so we can run doctests."}, {"sha": "e01bfbc74d98acaccc77489e6d823024732fab4d", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -108,7 +108,8 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n     MIRI_TEST_TARGET=aarch64-linux-android run_tests_minimal hello integer vec panic/panic\n-    MIRI_TEST_TARGET=wasm32-wasi run_tests_minimal no_std integer\n+    MIRI_TEST_TARGET=wasm32-wasi run_tests_minimal no_std integer strings\n+    MIRI_TEST_TARGET=wasm32-unknown-unknown run_tests_minimal no_std integer strings\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n     MIRI_TEST_TARGET=tests/avr.json MIRI_NO_STD=1 run_tests_minimal no_std # JSON target file\n     ;;"}, {"sha": "cf6d9c2808048547170f649926b6ef8cd24cda7b", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1 +1 @@\n-4f4d0586ad20c66a16d547581ca379beafece93a\n+c54c8cbac882e149e04a9e1f2d146fd548ae30ae"}, {"sha": "2cc8f03546602a880a7225ffcb6e938738cb8360", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -88,11 +88,7 @@ impl fmt::Display for InvalidationCause {\n         match self {\n             InvalidationCause::Access(kind) => write!(f, \"{kind}\"),\n             InvalidationCause::Retag(perm, kind) =>\n-                if *kind == RetagCause::FnEntry {\n-                    write!(f, \"{perm:?} FnEntry retag\")\n-                } else {\n-                    write!(f, \"{perm:?} retag\")\n-                },\n+                write!(f, \"{perm:?} {retag}\", retag = kind.summary()),\n         }\n     }\n }\n@@ -193,7 +189,7 @@ struct RetagOp {\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum RetagCause {\n     Normal,\n-    FnReturn,\n+    FnReturnPlace,\n     FnEntry,\n     TwoPhase,\n }\n@@ -495,8 +491,8 @@ impl RetagCause {\n     fn summary(&self) -> String {\n         match self {\n             RetagCause::Normal => \"retag\",\n-            RetagCause::FnEntry => \"FnEntry retag\",\n-            RetagCause::FnReturn => \"FnReturn retag\",\n+            RetagCause::FnEntry => \"function-entry retag\",\n+            RetagCause::FnReturnPlace => \"return-place retag\",\n             RetagCause::TwoPhase => \"two-phase retag\",\n         }\n         .to_string()"}, {"sha": "ec555ba2895c8468b82bcaae0008fcfb34b13ad0", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -998,7 +998,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             access: Some(AccessKind::Write),\n             protector: Some(ProtectorKind::StrongProtector),\n         };\n-        let val = this.sb_retag_reference(&val, new_perm, RetagCause::FnReturn)?;\n+        let val = this.sb_retag_reference(&val, new_perm, RetagCause::FnReturnPlace)?;\n         // And use reborrowed pointer for return place.\n         let return_place = this.ref_to_mplace(&val)?;\n         this.frame_mut().return_place = return_place.into();"}, {"sha": "527d31d1f0ae8acc199671562b425742a8a0eb15", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -943,7 +943,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         link_name: Symbol,\n     ) -> InterpResult<'tcx, ()> {\n         self.check_abi(abi, exp_abi)?;\n-        if let Some((body, _)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+        if let Some((body, instance)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+            // If compiler-builtins is providing the symbol, then don't treat it as a clash.\n+            // We'll use our built-in implementation in `emulate_foreign_item_by_name` for increased\n+            // performance. Note that this means we won't catch any undefined behavior in\n+            // compiler-builtins when running other crates, but Miri can still be run on\n+            // compiler-builtins itself (or any crate that uses it as a normal dependency)\n+            if self.eval_context_ref().tcx.is_compiler_builtins(instance.def_id().krate) {\n+                return Ok(());\n+            }\n+\n             throw_machine_stop!(TerminationInfo::SymbolShimClashing {\n                 link_name,\n                 span: body.span.data(),"}, {"sha": "62198061827adb3f1ab3fd1527586102705cdc69", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -219,7 +219,6 @@ mod tests {\n     /// Query the map at every offset in the range and collect the results.\n     fn to_vec<T: Copy>(map: &RangeMap<T>, offset: u64, len: u64) -> Vec<T> {\n         (offset..offset + len)\n-            .into_iter()\n             .map(|i| {\n                 map.iter(Size::from_bytes(i), Size::from_bytes(1)).next().map(|(_, &t)| t).unwrap()\n             })"}, {"sha": "ce24b23ca327333b95eb2c6cf0e9493599a06637", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -166,7 +166,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n                 Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?,\n+                    this.write_os_str_to_wide_str(\n+                        &var, buf_ptr, buf_size, /*truncate*/ false,\n+                    )?,\n                 ))\n             }\n             None => {\n@@ -366,7 +368,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         match env::current_dir() {\n             Ok(cwd) =>\n                 return Ok(Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_path_to_wide_str(&cwd, buf, size)?,\n+                    this.write_path_to_wide_str(&cwd, buf, size, /*truncate*/ false)?,\n                 ))),\n             Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }"}, {"sha": "f010d4251f4799efd2007251d3a74bb3da21f0da", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -101,17 +101,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         self.eval_context_mut().write_c_str(bytes, ptr, size)\n     }\n \n-    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n-    /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n-    /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n-    /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does include the null terminator. Length is measured in units of\n-    /// `u16.`\n+    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what the\n+    /// Windows APIs usually handle.\n+    ///\n+    /// If `truncate == false` (the usual mode of operation), this function returns `Ok((false,\n+    /// length))` without trying to write if `size` is not large enough to fit the contents of\n+    /// `os_string` plus a null terminator. It returns `Ok((true, length))` if the writing process\n+    /// was successful. The string length returned does include the null terminator. Length is\n+    /// measured in units of `u16.`\n+    ///\n+    /// If `truncate == true`, then in case `size` is not large enough it *will* write the first\n+    /// `size.saturating_sub(1)` many items, followed by a null terminator (if `size > 0`).\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n         fn os_str_to_u16vec<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, Vec<u16>> {\n@@ -129,7 +135,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let u16_vec = os_str_to_u16vec(os_str)?;\n-        self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)\n+        let (written, size_needed) = self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)?;\n+        if truncate && !written && size > 0 {\n+            // Write the truncated part that fits.\n+            let truncated_data = &u16_vec[..size.saturating_sub(1).try_into().unwrap()];\n+            let (written, written_len) =\n+                self.eval_context_mut().write_wide_str(truncated_data, ptr, size)?;\n+            assert!(written && written_len == size);\n+        }\n+        Ok((written, size_needed))\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n@@ -143,7 +157,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) = self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -158,7 +173,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) =\n+            self.write_os_str_to_wide_str(os_str, arg_place.ptr, size, /*truncate*/ false).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -212,11 +229,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         path: &Path,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n         let os_str =\n             this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n-        this.write_os_str_to_wide_str(&os_str, ptr, size)\n+        this.write_os_str_to_wide_str(&os_str, ptr, size, truncate)\n     }\n \n     /// Allocate enough memory to store a Path as a null-terminated sequence of bytes,\n@@ -232,6 +250,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.alloc_os_str_as_c_str(&os_str, memkind)\n     }\n \n+    /// Allocate enough memory to store a Path as a null-terminated sequence of `u16`s,\n+    /// adjusting path separators if needed.\n+    fn alloc_path_as_wide_str(\n+        &mut self,\n+        path: &Path,\n+        memkind: MemoryKind<MiriMemoryKind>,\n+    ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n+        let this = self.eval_context_mut();\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        this.alloc_os_str_as_wide_str(&os_str, memkind)\n+    }\n+\n     #[allow(clippy::get_first)]\n     fn convert_path<'a>(\n         &self,"}, {"sha": "f310d16e86198fcae581464bdf0be90253caa106", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -381,6 +381,46 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n                 this.write_scalar(Scalar::from_u32(1), dest)?;\n             }\n+            \"GetModuleFileNameW\" => {\n+                let [handle, filename, size] =\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`GetModuleFileNameW`\")?;\n+\n+                let handle = this.read_machine_usize(handle)?;\n+                let filename = this.read_pointer(filename)?;\n+                let size = this.read_scalar(size)?.to_u32()?;\n+\n+                if handle != 0 {\n+                    throw_unsup_format!(\"`GetModuleFileNameW` only supports the NULL handle\");\n+                }\n+\n+                // Using the host current_exe is a bit off, but consistent with Linux\n+                // (where stdlib reads /proc/self/exe).\n+                // Unfortunately this Windows function has a crazy behavior so we can't just use\n+                // `write_path_to_wide_str`...\n+                let path = std::env::current_exe().unwrap();\n+                let (all_written, size_needed) = this.write_path_to_wide_str(\n+                    &path,\n+                    filename,\n+                    size.into(),\n+                    /*truncate*/ true,\n+                )?;\n+\n+                if all_written {\n+                    // If the function succeeds, the return value is the length of the string that\n+                    // is copied to the buffer, in characters, not including the terminating null\n+                    // character.\n+                    this.write_int(size_needed.checked_sub(1).unwrap(), dest)?;\n+                } else {\n+                    // If the buffer is too small to hold the module name, the string is truncated\n+                    // to nSize characters including the terminating null character, the function\n+                    // returns nSize, and the function sets the last error to\n+                    // ERROR_INSUFFICIENT_BUFFER.\n+                    this.write_int(size, dest)?;\n+                    let insufficient_buffer = this.eval_windows(\"c\", \"ERROR_INSUFFICIENT_BUFFER\");\n+                    this.set_last_error(insufficient_buffer)?;\n+                }\n+            }\n \n             // Threading\n             \"CreateThread\" => {"}, {"sha": "a84ed85976367794549d7ba0544c91bb404830ae", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -14,6 +14,12 @@ version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"bumpalo\"\n+version = \"3.11.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba\"\n+\n [[package]]\n name = \"bytes\"\n version = \"1.3.0\"\n@@ -44,8 +50,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n dependencies = [\n  \"cfg-if\",\n+ \"js-sys\",\n  \"libc\",\n  \"wasi 0.11.0+wasi-snapshot-preview1\",\n+ \"wasm-bindgen\",\n ]\n \n [[package]]\n@@ -57,6 +65,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"js-sys\"\n+version = \"0.3.60\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"49409df3e3bf0856b916e2ceaca09ee28e6871cf7d9ce97a692cacfdb2a25a47\"\n+dependencies = [\n+ \"wasm-bindgen\",\n+]\n+\n [[package]]\n name = \"libc\"\n version = \"0.2.139\"\n@@ -123,6 +140,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f61fba1741ea2b3d6a1e3178721804bb716a68a6aeba1149b5d52e3d464ea66\"\n+\n [[package]]\n name = \"page_size\"\n version = \"0.5.0\"\n@@ -269,9 +292,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.23.0\"\n+version = \"1.23.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eab6d665857cc6ca78d6e80303a02cea7a7851e85dfbd77cbdc09bd129f1ef46\"\n+checksum = \"38a54aca0c15d014013256222ba0ebed095673f89345dd79119d912eb561b7a8\"\n dependencies = [\n  \"autocfg\",\n  \"bytes\",\n@@ -316,6 +339,60 @@ version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n+[[package]]\n+name = \"wasm-bindgen\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eaf9f5aceeec8be17c128b2e93e031fb8a4d469bb9c4ae2d7dc1888b26887268\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-backend\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c8ffb332579b0557b52d268b91feab8df3615f265d5270fec2a8c95b17c1142\"\n+dependencies = [\n+ \"bumpalo\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"052be0f94026e6cbc75cdefc9bae13fd6052cdcaf532fa6c45e7ae33a1e6c810\"\n+dependencies = [\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro-support\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-shared\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1c38c045535d93ec4f0b4defec448e4291638ee608530863b1e2ba115d4fff7f\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "f5ab6acf008c5feefdee242bb95af65a01e97f95", "filename": "src/tools/miri/test_dependencies/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -13,11 +13,11 @@ libc = \"0.2\"\n num_cpus = \"1.10.1\"\n \n getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n-getrandom = { version = \"0.2\" }\n+getrandom = { version = \"0.2\", features = [\"js\"] }\n rand = { version = \"0.8\", features = [\"small_rng\"] }\n \n [target.'cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))'.dependencies]\n page_size = \"0.5\"\n-tokio = { version = \"1.0\", features = [\"full\"] }\n+tokio = { version = \"1.23\", features = [\"full\"] }\n \n [workspace]"}, {"sha": "ae54d0248dc3d5689138062084612fa6317a4fcc", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -5,7 +5,7 @@ LL | pub fn safe(_x: &mut i32, _y: &i32) {}\n    |                           ^^\n    |                           |\n    |                           trying to retag from <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                           this error occurs as part of FnEntry retag at ALLOC[0x0..0x4]\n+   |                           this error occurs as part of function-entry retag at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     safe_raw(xraw, xshr);\n    |                    ^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique function-entry retag inside this call\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "236c8fb0187de7b3a0ad90807f243bcf44a8bf45", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let z = &mut x as *mut i32;\n    |             ^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique function-entry retag inside this call\n   --> $DIR/fnentry_invalidation.rs:LL:CC\n    |\n LL |     x.do_bad();"}, {"sha": "45c2197050a1bd16e0a0bb161cf136e54402ae14", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0xc]\n    |\n LL |     let ptr = t.sli.as_ptr();\n    |               ^^^^^^^^^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique function-entry retag inside this call\n   --> $DIR/fnentry_invalidation2.rs:LL:CC\n    |\n LL |     let _ = t.sli.as_mut_ptr();"}, {"sha": "7ccafec60372d5fbd249d45e06a48abcc25e2d68", "filename": "src/tools/miri/tests/pass/concurrency/tls_lib_drop.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -186,8 +186,65 @@ fn join_orders_after_tls_destructors() {\n     }\n }\n \n+fn dtors_in_dtors_in_dtors() {\n+    use std::cell::UnsafeCell;\n+    use std::sync::{Arc, Condvar, Mutex};\n+\n+    #[derive(Clone, Default)]\n+    struct Signal(Arc<(Mutex<bool>, Condvar)>);\n+\n+    impl Signal {\n+        fn notify(&self) {\n+            let (set, cvar) = &*self.0;\n+            *set.lock().unwrap() = true;\n+            cvar.notify_one();\n+        }\n+\n+        fn wait(&self) {\n+            let (set, cvar) = &*self.0;\n+            let mut set = set.lock().unwrap();\n+            while !*set {\n+                set = cvar.wait(set).unwrap();\n+            }\n+        }\n+    }\n+\n+    struct NotifyOnDrop(Signal);\n+\n+    impl Drop for NotifyOnDrop {\n+        fn drop(&mut self) {\n+            let NotifyOnDrop(ref f) = *self;\n+            f.notify();\n+        }\n+    }\n+\n+    struct S1(Signal);\n+    thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n+\n+    impl Drop for S1 {\n+        fn drop(&mut self) {\n+            let S1(ref signal) = *self;\n+            unsafe {\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n+            }\n+        }\n+    }\n+\n+    let signal = Signal::default();\n+    let signal2 = signal.clone();\n+    let _t = thread::spawn(move || unsafe {\n+        let mut signal = Some(signal2);\n+        K1.with(|s| *s.get() = Some(S1(signal.take().unwrap())));\n+    });\n+    // Note that this test will deadlock if TLS destructors aren't run (this\n+    // requires the destructor to be run to pass the test).\n+    signal.wait();\n+}\n+\n fn main() {\n     check_destructors();\n     check_blocking();\n     join_orders_after_tls_destructors();\n+    dtors_in_dtors_in_dtors();\n }"}, {"sha": "898a42b72d134819f25b46e0b80bda1ad6c42c88", "filename": "src/tools/miri/tests/pass/shims/env/current_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deba5ddd0776108c51a69844d0ffe3f96886dd52/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs?ref=deba5ddd0776108c51a69844d0ffe3f96886dd52", "patch": "@@ -1,4 +1,3 @@\n-//@ignore-target-windows: current_exe not supported on Windows\n //@only-on-host: the Linux std implementation opens /proc/self/exe, which doesn't work cross-target\n //@compile-flags: -Zmiri-disable-isolation\n use std::env;"}]}