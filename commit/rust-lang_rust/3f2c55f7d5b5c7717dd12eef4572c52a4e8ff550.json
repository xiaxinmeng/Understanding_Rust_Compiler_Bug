{"sha": "3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMmM1NWY3ZDViNWM3NzE3ZGQxMmVlZjQ1NzJjNTJhNGU4ZmY1NTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T17:15:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:22:00Z"}, "message": "rustc: Use realpath() for sysroot/rpath\n\nWhen calculating the sysroot, it's more accurate to use realpath() rather than\njust one readlink() to account for any intermediate symlinks that the rustc\nbinary resolves itself to.\n\nFor rpath, realpath() is necessary because the rpath must dictate a relative\nrpath from the destination back to the originally linked library, which works\nmore robustly if there are no symlinks involved.\n\nConcretely, any binary generated on OSX into $TMPDIR requires an absolute rpath\nbecause the temporary directory is behind a symlink with one layer of\nindirection. This symlink causes all relative rpaths to fail to resolve.\n\ncc #11734\ncc #11857", "tree": {"sha": "5d33313d67b78e779affbc42ce0b988226242209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d33313d67b78e779affbc42ce0b988226242209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "html_url": "https://github.com/rust-lang/rust/commit/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a6b6ef8b4a2852c98585496146ca9d3da37b1b", "html_url": "https://github.com/rust-lang/rust/commit/25a6b6ef8b4a2852c98585496146ca9d3da37b1b"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "e455c4ad23ce00851f86f07354c7e2e840c6be24", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "patch": "@@ -12,9 +12,10 @@\n use driver::session::Session;\n use metadata::cstore;\n use metadata::filesearch;\n+use util::fs;\n \n use collections::HashSet;\n-use std::{os, slice};\n+use std::os;\n use syntax::abi;\n \n fn not_win32(os: abi::Os) -> bool {\n@@ -121,9 +122,9 @@ pub fn get_rpath_relative_to_output(os: abi::Os,\n         abi::OsWin32 => unreachable!()\n     };\n \n-    let mut lib = os::make_absolute(lib);\n+    let mut lib = fs::realpath(&os::make_absolute(lib)).unwrap();\n     lib.pop();\n-    let mut output = os::make_absolute(output);\n+    let mut output = fs::realpath(&os::make_absolute(output)).unwrap();\n     output.pop();\n     let relative = lib.path_relative_from(&output);\n     let relative = relative.expect(\"could not create rpath relative to output\");"}, {"sha": "f4ea386a2ecad753ca230d56ad9bffba906ff127", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=3f2c55f7d5b5c7717dd12eef4572c52a4e8ff550", "patch": "@@ -15,6 +15,8 @@ use std::os;\n use std::io::fs;\n use collections::HashSet;\n \n+use myfs = util::fs;\n+\n pub enum FileMatch { FileMatches, FileDoesntMatch }\n \n // A module for searching for libraries\n@@ -156,17 +158,10 @@ fn make_rustpkg_target_lib_path(sysroot: &Path,\n pub fn get_or_default_sysroot() -> Path {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: Option<Path>) -> Option<Path> {\n-        path.and_then(|mut path|\n-            match fs::readlink(&path) {\n-                Ok(canon) => {\n-                    if canon.is_absolute() {\n-                        Some(canon)\n-                    } else {\n-                        path.pop();\n-                        Some(path.join(canon))\n-                    }\n-                },\n-                Err(..) => Some(path),\n+        path.and_then(|path|\n+            match myfs::realpath(&path) {\n+                Ok(canon) => Some(canon),\n+                Err(e) => fail!(\"failed to get realpath: {}\", e),\n             })\n     }\n "}]}