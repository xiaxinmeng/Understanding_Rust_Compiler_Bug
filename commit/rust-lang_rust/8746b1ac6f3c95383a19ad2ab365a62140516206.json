{"sha": "8746b1ac6f3c95383a19ad2ab365a62140516206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDZiMWFjNmYzYzk1MzgzYTE5YWQyYWIzNjVhNjIxNDA1MTYyMDY=", "commit": {"author": {"name": "Tim Ringenbach", "email": "tim.ringenbach@gmail.com", "date": "2015-05-28T18:04:17Z"}, "committer": {"name": "Tim Ringenbach", "email": "tim.ringenbach@gmail.com", "date": "2015-05-29T18:29:42Z"}, "message": "Improve mem::forget documentation\n\nThis adds an example from mem::swap, and provides some suggested uses of this\nfunction.\n\nChange wording on comment on forget line to be more specific as to why we\nneed to call forget.\n\nThis breaks the examples up into three pieces. The last piece isn't\ncompiling for some reason.", "tree": {"sha": "567da376ec234d52d1219288398514573d372f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567da376ec234d52d1219288398514573d372f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8746b1ac6f3c95383a19ad2ab365a62140516206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8746b1ac6f3c95383a19ad2ab365a62140516206", "html_url": "https://github.com/rust-lang/rust/commit/8746b1ac6f3c95383a19ad2ab365a62140516206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8746b1ac6f3c95383a19ad2ab365a62140516206/comments", "author": {"login": "tringenbach", "id": 381141, "node_id": "MDQ6VXNlcjM4MTE0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tringenbach", "html_url": "https://github.com/tringenbach", "followers_url": "https://api.github.com/users/tringenbach/followers", "following_url": "https://api.github.com/users/tringenbach/following{/other_user}", "gists_url": "https://api.github.com/users/tringenbach/gists{/gist_id}", "starred_url": "https://api.github.com/users/tringenbach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tringenbach/subscriptions", "organizations_url": "https://api.github.com/users/tringenbach/orgs", "repos_url": "https://api.github.com/users/tringenbach/repos", "events_url": "https://api.github.com/users/tringenbach/events{/privacy}", "received_events_url": "https://api.github.com/users/tringenbach/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tringenbach", "id": 381141, "node_id": "MDQ6VXNlcjM4MTE0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tringenbach", "html_url": "https://github.com/tringenbach", "followers_url": "https://api.github.com/users/tringenbach/followers", "following_url": "https://api.github.com/users/tringenbach/following{/other_user}", "gists_url": "https://api.github.com/users/tringenbach/gists{/gist_id}", "starred_url": "https://api.github.com/users/tringenbach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tringenbach/subscriptions", "organizations_url": "https://api.github.com/users/tringenbach/orgs", "repos_url": "https://api.github.com/users/tringenbach/repos", "events_url": "https://api.github.com/users/tringenbach/events{/privacy}", "received_events_url": "https://api.github.com/users/tringenbach/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c303944a7c6767cd5cb708d25ffa27851fa994c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c303944a7c6767cd5cb708d25ffa27851fa994c", "html_url": "https://github.com/rust-lang/rust/commit/9c303944a7c6767cd5cb708d25ffa27851fa994c"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "26c6e899df1ce81d5b6817726b2762c3dc75a478", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8746b1ac6f3c95383a19ad2ab365a62140516206/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8746b1ac6f3c95383a19ad2ab365a62140516206/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8746b1ac6f3c95383a19ad2ab365a62140516206", "patch": "@@ -52,20 +52,61 @@ pub use intrinsics::transmute;\n /// * `mpsc::{Sender, Receiver}` cycles (they use `Arc` internally)\n /// * Panicking destructors are likely to leak local resources\n ///\n+/// # When To Use\n+///\n+/// There's only a few reasons to use this function. They mainly come\n+/// up in unsafe code or FFI code.\n+///\n+/// * You have an uninitialized value, perhaps for performance reasons, and\n+///   need to prevent the destructor from running on it.\n+/// * You have two copies of a value (like `std::mem::swap`), but need the\n+///   destructor to only run once to prevent a double free.\n+/// * Transferring resources across FFI boundries.\n+///\n /// # Example\n ///\n-/// ```rust,no_run\n+/// Leak some heap memory by never deallocating it.\n+///\n+/// ```rust\n /// use std::mem;\n-/// use std::fs::File;\n ///\n-/// // Leak some heap memory by never deallocating it\n /// let heap_memory = Box::new(3);\n /// mem::forget(heap_memory);\n+/// ```\n+///\n+/// Leak an I/O object, never closing the file.\n+///\n+/// ```rust,no_run\n+/// use std::mem;\n+/// use std::fs::File;\n ///\n-/// // Leak an I/O object, never closing the file\n /// let file = File::open(\"foo.txt\").unwrap();\n /// mem::forget(file);\n /// ```\n+///\n+/// The swap function uses forget to good effect.\n+///\n+/// ```rust\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// fn swap<T>(x: &mut T, y: &mut T) {\n+///     unsafe {\n+///         // Give ourselves some scratch space to work with\n+///         let mut t: T = mem::uninitialized();\n+///\n+///         // Perform the swap, `&mut` pointers never alias\n+///         ptr::copy_nonoverlapping(&*x, &mut t, 1);\n+///         ptr::copy_nonoverlapping(&*y, x, 1);\n+///         ptr::copy_nonoverlapping(&t, y, 1);\n+///\n+///         // y and t now point to the same thing, but we need to completely\n+///         // forget `t` because we do not want to run the destructor for `T`\n+///         // on its value, which is still owned somewhere outside this function.\n+///         mem::forget(t);\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn forget<T>(t: T) {\n     unsafe { intrinsics::forget(t) }\n@@ -267,8 +308,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n         ptr::copy_nonoverlapping(&*y, x, 1);\n         ptr::copy_nonoverlapping(&t, y, 1);\n \n-        // y and t now point to the same thing, but we need to completely forget `t`\n-        // because it's no longer relevant.\n+        // y and t now point to the same thing, but we need to completely\n+        // forget `t` because we do not want to run the destructor for `T`\n+        // on its value, which is still owned somewhere outside this function.\n         forget(t);\n     }\n }"}]}