{"sha": "2b03ed19f665fa599f3710e4ecd6ca28c945e664", "node_id": "C_kwDOAAsO6NoAKDJiMDNlZDE5ZjY2NWZhNTk5ZjM3MTBlNGVjZDZjYTI4Yzk0NWU2NjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-08T13:57:20Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-08T13:57:20Z"}, "message": "Make `Atomic*::from_mut` return `&mut Atomic*`", "tree": {"sha": "5877219c78e7cb70944e99185905c1cc48e3c74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5877219c78e7cb70944e99185905c1cc48e3c74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b03ed19f665fa599f3710e4ecd6ca28c945e664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b03ed19f665fa599f3710e4ecd6ca28c945e664", "html_url": "https://github.com/rust-lang/rust/commit/2b03ed19f665fa599f3710e4ecd6ca28c945e664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b03ed19f665fa599f3710e4ecd6ca28c945e664/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84abaf3f7dc2b7c2b453deb18890d00d28ebd844", "url": "https://api.github.com/repos/rust-lang/rust/commits/84abaf3f7dc2b7c2b453deb18890d00d28ebd844", "html_url": "https://github.com/rust-lang/rust/commit/84abaf3f7dc2b7c2b453deb18890d00d28ebd844"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "27243d8ca703060aea8362fd75fc301a02150200", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b03ed19f665fa599f3710e4ecd6ca28c945e664/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b03ed19f665fa599f3710e4ecd6ca28c945e664/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=2b03ed19f665fa599f3710e4ecd6ca28c945e664", "patch": "@@ -333,10 +333,10 @@ impl AtomicBool {\n     #[inline]\n     #[cfg(target_has_atomic_equal_alignment = \"8\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut bool) -> &Self {\n+    pub fn from_mut(v: &mut bool) -> &mut Self {\n         // SAFETY: the mutable reference guarantees unique ownership, and\n         // alignment of both `bool` and `Self` is 1.\n-        unsafe { &*(v as *mut bool as *mut Self) }\n+        unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n     /// Consumes the atomic and returns the contained value.\n@@ -934,14 +934,14 @@ impl<T> AtomicPtr<T> {\n     #[inline]\n     #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n     #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-    pub fn from_mut(v: &mut *mut T) -> &Self {\n+    pub fn from_mut(v: &mut *mut T) -> &mut Self {\n         use crate::mem::align_of;\n         let [] = [(); align_of::<AtomicPtr<()>>() - align_of::<*mut ()>()];\n         // SAFETY:\n         //  - the mutable reference guarantees unique ownership.\n         //  - the alignment of `*mut T` and `Self` is the same on all platforms\n         //    supported by rust, as verified above.\n-        unsafe { &*(v as *mut *mut T as *mut Self) }\n+        unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n     /// Consumes the atomic and returns the contained value.\n@@ -1447,14 +1447,14 @@ macro_rules! atomic_int {\n             #[inline]\n             #[$cfg_align]\n             #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n-            pub fn from_mut(v: &mut $int_type) -> &Self {\n+            pub fn from_mut(v: &mut $int_type) -> &mut Self {\n                 use crate::mem::align_of;\n                 let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n                 // SAFETY:\n                 //  - the mutable reference guarantees unique ownership.\n                 //  - the alignment of `$int_type` and `Self` is the\n                 //    same, as promised by $cfg_align and verified above.\n-                unsafe { &*(v as *mut $int_type as *mut Self) }\n+                unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n             /// Consumes the atomic and returns the contained value."}]}