{"sha": "35316972ff2e7ea02a4583141d3ac69b79610067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzE2OTcyZmYyZTdlYTAyYTQ1ODMxNDFkM2FjNjliNzk2MTAwNjc=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-23T11:14:35Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-11-23T11:17:43Z"}, "message": "Remove type parameters from ExprField and ExprTupField", "tree": {"sha": "0cbf393272f214705891aea92023bf2d5a6fb0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cbf393272f214705891aea92023bf2d5a6fb0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35316972ff2e7ea02a4583141d3ac69b79610067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35316972ff2e7ea02a4583141d3ac69b79610067", "html_url": "https://github.com/rust-lang/rust/commit/35316972ff2e7ea02a4583141d3ac69b79610067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35316972ff2e7ea02a4583141d3ac69b79610067/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a857b4472142b6d0bf65e9185c4c2619e722fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a857b4472142b6d0bf65e9185c4c2619e722fb0", "html_url": "https://github.com/rust-lang/rust/commit/9a857b4472142b6d0bf65e9185c4c2619e722fb0"}], "stats": {"total": 379, "additions": 125, "deletions": 254}, "files": [{"sha": "9fe7a21243f186a8819045cc806353bbe5da856e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -37,22 +37,18 @@ use util::ppaux::{ty_to_string};\n use util::nodemap::{FnvHashMap, NodeSet};\n use lint::{Context, LintPass, LintArray};\n \n-use std::cmp;\n+use std::{cmp, slice};\n use std::collections::hash_map::{Occupied, Vacant};\n use std::num::SignedInt;\n-use std::slice;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n-use syntax::abi;\n-use syntax::ast_map;\n-use syntax::ast_util::is_shift_binop;\n-use syntax::attr::AttrMetaMethods;\n-use syntax::attr;\n+use syntax::{abi, ast, ast_map};\n+use syntax::ast_util::{mod, is_shift_binop};\n+use syntax::attr::{mod, AttrMetaMethods};\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token;\n-use syntax::{ast, ast_util, visit};\n use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n use syntax::ptr::P;\n-use syntax::visit::Visitor;\n+use syntax::visit::{mod, Visitor};\n \n declare_lint!(WHILE_TRUE, Warn,\n               \"suggest using `loop { }` instead of `while true { }`\")\n@@ -1112,8 +1108,8 @@ impl UnusedParens {\n                 }\n                 ast::ExprUnary(_, ref x) |\n                 ast::ExprCast(ref x, _) |\n-                ast::ExprField(ref x, _, _) |\n-                ast::ExprTupField(ref x, _, _) |\n+                ast::ExprField(ref x, _) |\n+                ast::ExprTupField(ref x, _) |\n                 ast::ExprIndex(ref x, _) => {\n                     // &X { y: 1 }, X { y: 1 }.y\n                     contains_exterior_struct_lit(&**x)"}, {"sha": "61c56cf9ecc51f69af58dd58890367995a42c6c2", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -475,8 +475,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             ast::ExprCast(ref e, _) |\n             ast::ExprUnary(_, ref e) |\n             ast::ExprParen(ref e) |\n-            ast::ExprField(ref e, _, _) |\n-            ast::ExprTupField(ref e, _, _) => {\n+            ast::ExprField(ref e, _) |\n+            ast::ExprTupField(ref e, _) => {\n                 self.straightline(expr, pred, Some(&**e).into_iter())\n             }\n "}, {"sha": "98ac7e413ca7c63213e2a1c9aae7c7f035a03ad3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -15,19 +15,16 @@ pub use self::const_val::*;\n pub use self::constness::*;\n \n use metadata::csearch;\n-use middle::astencode;\n-use middle::def;\n+use middle::{astencode, def};\n use middle::pat_util::def_to_path;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv;\n-use middle::typeck::check;\n-use util::nodemap::{DefIdMap};\n+use middle::typeck::{astconv, check};\n+use util::nodemap::DefIdMap;\n \n use syntax::ast::{mod, Expr};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n-use syntax::visit::Visitor;\n-use syntax::visit;\n+use syntax::visit::{mod, Visitor};\n use syntax::{ast_map, ast_util, codemap};\n \n use std::rc::Rc;\n@@ -234,9 +231,9 @@ impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ExprField(ref base, _, _) => self.classify(&**base),\n+            ast::ExprField(ref base, _) => self.classify(&**base),\n \n-            ast::ExprTupField(ref base, _, _) => self.classify(&**base),\n+            ast::ExprTupField(ref base, _) => self.classify(&**base),\n \n             ast::ExprIndex(ref base, ref idx) =>\n                 join(self.classify(&**base), self.classify(&**idx)),"}, {"sha": "cf2e9a65859cd93a2c3839516c0b0f692c7c5554", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -12,20 +12,14 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use middle::def;\n-use middle::pat_util;\n-use middle::privacy;\n-use middle::ty;\n-use middle::typeck;\n+use middle::{def, pat_util, privacy, ty, typeck};\n use lint;\n use util::nodemap::NodeSet;\n \n use std::collections::HashSet;\n-use syntax::ast;\n-use syntax::ast_map;\n+use syntax::{ast, ast_map, codemap};\n use syntax::ast_util::{local_def, is_local, PostExpansionMethod};\n use syntax::attr::{mod, AttrMetaMethods};\n-use syntax::codemap;\n use syntax::visit::{mod, Visitor};\n \n // Any local node that may call something in its body block should be\n@@ -277,10 +271,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n             ast::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id, expr.span);\n             }\n-            ast::ExprField(ref lhs, ref ident, _) => {\n+            ast::ExprField(ref lhs, ref ident) => {\n                 self.handle_field_access(&**lhs, &ident.node);\n             }\n-            ast::ExprTupField(ref lhs, idx, _) => {\n+            ast::ExprTupField(ref lhs, idx) => {\n                 self.handle_tup_field_access(&**lhs, idx.node);\n             }\n             _ => ()"}, {"sha": "fa0f59f68604918db8bcec542bebc63e4cb40792", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -20,11 +20,9 @@ pub use self::ConsumeMode::*;\n pub use self::MoveReason::*;\n use self::OverloadedCallType::*;\n \n+use middle::{def, region, pat_util};\n use middle::mem_categorization as mc;\n-use middle::def;\n use middle::mem_categorization::Typer;\n-use middle::region;\n-use middle::pat_util;\n use middle::ty::{mod, Ty};\n use middle::typeck::{MethodCall, MethodObject, MethodTraitObject};\n use middle::typeck::{MethodOrigin, MethodParam, MethodTypeParam};\n@@ -331,11 +329,11 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 }\n             }\n \n-            ast::ExprField(ref base, _, _) => {         // base.f\n+            ast::ExprField(ref base, _) => {         // base.f\n                 self.select_from_expr(&**base);\n             }\n \n-            ast::ExprTupField(ref base, _, _) => {         // base.<n>\n+            ast::ExprTupField(ref base, _) => {         // base.<n>\n                 self.select_from_expr(&**base);\n             }\n "}, {"sha": "15d9e87a9d5a34678475a3ef7dd5c4de7ee78aeb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -113,24 +113,19 @@ use self::VarKind::*;\n \n use middle::def::*;\n use middle::mem_categorization::Typer;\n-use middle::pat_util;\n-use middle::typeck;\n-use middle::ty;\n+use middle::{pat_util, typeck, ty};\n use lint;\n use util::nodemap::NodeMap;\n \n-use std::fmt;\n-use std::io;\n+use std::{fmt, io, uint};\n use std::rc::Rc;\n-use std::uint;\n use syntax::ast::{mod, NodeId, Expr};\n use syntax::codemap::{BytePos, original_sp, Span};\n-use syntax::parse::token::special_idents;\n-use syntax::parse::token;\n+use syntax::parse::token::{mod, special_idents};\n use syntax::print::pprust::{expr_to_string, block_to_string};\n use syntax::ptr::P;\n-use syntax::{visit, ast_util};\n-use syntax::visit::{Visitor, FnKind};\n+use syntax::ast_util;\n+use syntax::visit::{mod, Visitor, FnKind};\n \n /// For use with `propagate_through_loop`.\n enum LoopKind<'a> {\n@@ -967,11 +962,11 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.access_path(expr, succ, ACC_READ | ACC_USE)\n           }\n \n-          ast::ExprField(ref e, _, _) => {\n+          ast::ExprField(ref e, _) => {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n-          ast::ExprTupField(ref e, _, _) => {\n+          ast::ExprTupField(ref e, _) => {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n@@ -1295,8 +1290,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         match expr.node {\n             ast::ExprPath(_) => succ,\n-            ast::ExprField(ref e, _, _) => self.propagate_through_expr(&**e, succ),\n-            ast::ExprTupField(ref e, _, _) => self.propagate_through_expr(&**e, succ),\n+            ast::ExprField(ref e, _) => self.propagate_through_expr(&**e, succ),\n+            ast::ExprTupField(ref e, _) => self.propagate_through_expr(&**e, succ),\n             _ => self.propagate_through_expr(expr, succ)\n         }\n     }"}, {"sha": "e9986e47e4a211d9494f5e57e35647a916ee0581", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -477,7 +477,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             Ok(self.cat_deref(expr, base_cmt, 0, false))\n           }\n \n-          ast::ExprField(ref base, f_name, _) => {\n+          ast::ExprField(ref base, f_name) => {\n             let base_cmt = if_ok!(self.cat_expr(&**base));\n             debug!(\"cat_expr(cat_field): id={} expr={} base={}\",\n                    expr.id,\n@@ -486,7 +486,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             Ok(self.cat_field(expr, base_cmt, f_name.node.name, expr_ty))\n           }\n \n-          ast::ExprTupField(ref base, idx, _) => {\n+          ast::ExprTupField(ref base, idx) => {\n             let base_cmt = if_ok!(self.cat_expr(&**base));\n             Ok(self.cat_tup_field(expr, base_cmt, idx.node, expr_ty))\n           }"}, {"sha": "66c782877f9cac248b4a81b6049a84030d21d94e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -17,20 +17,17 @@ use self::FieldName::*;\n use std::mem::replace;\n \n use metadata::csearch;\n-use middle::def;\n-use middle::resolve;\n+use middle::{def, resolve};\n use middle::ty::{mod, Ty};\n use middle::typeck::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n use middle::typeck::{MethodStatic, MethodStaticUnboxedClosure, MethodObject, MethodTraitObject};\n use util::nodemap::{NodeMap, NodeSet};\n \n-use syntax::ast;\n-use syntax::ast_map;\n+use syntax::{ast, ast_map};\n use syntax::ast_util::{is_local, local_def, PostExpansionMethod};\n use syntax::codemap::Span;\n use syntax::parse::token;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{mod, Visitor};\n \n type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a resolve::ExportMap2);\n \n@@ -836,20 +833,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &ast::Expr) {\n         match expr.node {\n-            ast::ExprField(ref base, ident, _) => {\n-                match ty::expr_ty_adjusted(self.tcx, &**base).sty {\n-                    ty::ty_struct(id, _) => {\n-                        self.check_field(expr.span, id, NamedField(ident.node));\n-                    }\n-                    _ => {}\n+            ast::ExprField(ref base, ident) => {\n+                if let ty::ty_struct(id, _) = ty::expr_ty_adjusted(self.tcx, &**base).sty {\n+                    self.check_field(expr.span, id, NamedField(ident.node));\n                 }\n             }\n-            ast::ExprTupField(ref base, idx, _) => {\n-                match ty::expr_ty_adjusted(self.tcx, &**base).sty {\n-                    ty::ty_struct(id, _) => {\n-                        self.check_field(expr.span, id, UnnamedField(idx.node));\n-                    }\n-                    _ => {}\n+            ast::ExprTupField(ref base, idx) => {\n+                if let ty::ty_struct(id, _) = ty::expr_ty_adjusted(self.tcx, &**base).sty {\n+                    self.check_field(expr.span, id, UnnamedField(idx.node));\n                 }\n             }\n             ast::ExprMethodCall(ident, _, _) => {"}, {"sha": "c5511f995bc689397e7d5e5c74e51f02e0ae58de", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -22,8 +22,7 @@ Most of the documentation on regions can be found in\n \n \n use session::Session;\n-use middle::ty::{FreeRegion};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, FreeRegion};\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n use util::common::can_reach;\n \n@@ -33,7 +32,6 @@ use syntax::codemap::Span;\n use syntax::{ast, visit};\n use syntax::ast::{Block, Item, FnDecl, NodeId, Arm, Pat, Stmt, Expr, Local};\n use syntax::ast_util::{stmt_id};\n-use syntax::ptr::P;\n use syntax::visit::{Visitor, FnKind};\n \n /// CodeExtent represents a statically-describable extent that can be\n@@ -824,11 +822,10 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &ast::Local) {\n             match expr.node {\n                 ast::ExprAddrOf(_, ref subexpr) |\n                 ast::ExprUnary(ast::UnDeref, ref subexpr) |\n-                ast::ExprField(ref subexpr, _, _) |\n-                ast::ExprTupField(ref subexpr, _, _) |\n+                ast::ExprField(ref subexpr, _) |\n+                ast::ExprTupField(ref subexpr, _) |\n                 ast::ExprIndex(ref subexpr, _) |\n                 ast::ExprParen(ref subexpr) => {\n-                    let subexpr: &'a P<Expr> = subexpr; // FIXME(#11586)\n                     expr = &**subexpr;\n                 }\n                 _ => {"}, {"sha": "68a31c83ea4842dd3d65cbf760bdf9a1677df519", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -71,17 +71,13 @@ use syntax::ast::{Variant, ViewItem, ViewItemExternCrate};\n use syntax::ast::{ViewItemUse, ViewPathGlob, ViewPathList, ViewPathSimple};\n use syntax::ast::{Visibility};\n use syntax::ast;\n-use syntax::ast_util::{PostExpansionMethod, local_def, walk_pat};\n-use syntax::ast_util;\n+use syntax::ast_util::{mod, PostExpansionMethod, local_def, walk_pat};\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::mtwt;\n-use syntax::parse::token::special_names;\n-use syntax::parse::token::special_idents;\n-use syntax::parse::token;\n+use syntax::parse::token::{mod, special_names, special_idents};\n use syntax::codemap::{Span, DUMMY_SP, Pos};\n use syntax::owned_slice::OwnedSlice;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{mod, Visitor};\n \n use std::collections::{HashMap, HashSet};\n use std::collections::hash_map::{Occupied, Vacant};\n@@ -5959,7 +5955,7 @@ impl<'a> Resolver<'a> {\n \n     fn record_candidate_traits_for_expr_if_necessary(&mut self, expr: &Expr) {\n         match expr.node {\n-            ExprField(_, ident, _) => {\n+            ExprField(_, ident) => {\n                 // FIXME(#6890): Even though you can't treat a method like a\n                 // field, we need to add any trait methods we find that match\n                 // the field name so that we can do some nice error reporting"}, {"sha": "5bcd96e66efc2da544ba00a13ba8f09b09c858d9", "filename": "src/librustc/middle/typeck/check/method/confirm.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -10,16 +10,13 @@\n \n use super::probe;\n \n-use middle::subst;\n-use middle::subst::Subst;\n+use middle::subst::{mod, Subst};\n use middle::traits;\n use middle::ty::{mod, Ty};\n-use middle::typeck::check;\n-use middle::typeck::check::{FnCtxt, NoPreference, PreferMutLvalue};\n+use middle::typeck::check::{mod, FnCtxt, NoPreference, PreferMutLvalue};\n use middle::typeck::{MethodCall, MethodCallee, MethodObject, MethodOrigin,\n                      MethodParam, MethodStatic, MethodTraitObject, MethodTypeParam};\n-use middle::typeck::infer;\n-use middle::typeck::infer::InferCtxt;\n+use middle::typeck::infer::{mod, InferCtxt};\n use middle::ty_fold::HigherRankedFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -510,8 +507,8 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             let last = exprs[exprs.len() - 1];\n             match last.node {\n                 ast::ExprParen(ref expr) |\n-                ast::ExprField(ref expr, _, _) |\n-                ast::ExprTupField(ref expr, _, _) |\n+                ast::ExprField(ref expr, _) |\n+                ast::ExprTupField(ref expr, _) |\n                 ast::ExprSlice(ref expr, _, _, _) |\n                 ast::ExprIndex(ref expr, _) |\n                 ast::ExprUnary(ast::UnDeref, ref expr) => exprs.push(&**expr),"}, {"sha": "d38c5bc0ca9cf0c737f9619fad63f411feff7e6e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -83,62 +83,41 @@ use self::IsBinopAssignment::*;\n use self::TupleArgumentsFlag::*;\n \n use session::Session;\n-use middle::const_eval;\n-use middle::def;\n+use middle::{const_eval, def, traits};\n use middle::lang_items::IteratorItem;\n-use middle::mem_categorization::McResult;\n-use middle::mem_categorization;\n-use middle::pat_util::pat_id_map;\n-use middle::pat_util;\n+use middle::mem_categorization::{mod, McResult};\n+use middle::pat_util::{mod, pat_id_map};\n use middle::region::CodeExtent;\n-use middle::subst;\n-use middle::subst::{Subst, Substs, VecPerParamSpace, ParamSpace};\n-use middle::traits;\n-use middle::ty::{FnSig, VariantInfo};\n-use middle::ty::{Polytype};\n+use middle::subst::{mod, Subst, Substs, VecPerParamSpace, ParamSpace};\n+use middle::ty::{FnSig, VariantInfo, Polytype};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{mod, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::astconv::AstConv;\n-use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n-use middle::typeck::astconv;\n+use middle::typeck::astconv::{mod, ast_region_to_region, ast_ty_to_ty, AstConv};\n use middle::typeck::check::_match::pat_ctxt;\n-use middle::typeck::CrateCtxt;\n-use middle::typeck::infer;\n use middle::typeck::rscope::RegionScope;\n-use middle::typeck::{lookup_def_ccx};\n-use middle::typeck::no_params;\n-use middle::typeck::{require_same_types};\n-use middle::typeck::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n-use middle::typeck::{TypeAndSubsts};\n-use middle::typeck;\n+use middle::typeck::{mod, CrateCtxt, infer, lookup_def_ccx, no_params, require_same_types};\n+use middle::typeck::{MethodCall, MethodCallee, MethodMap, ObjectCastMap, TypeAndSubsts};\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n-use util::ppaux;\n-use util::ppaux::{UserString, Repr};\n+use util::ppaux::{mod, UserString, Repr};\n use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n use std::cell::{Cell, Ref, RefCell};\n use std::collections::hash_map::{Occupied, Vacant};\n use std::mem::replace;\n use std::rc::Rc;\n-use syntax::abi;\n-use syntax::ast::{ProvidedMethod, RequiredMethod, TypeTraitItem};\n-use syntax::ast;\n-use syntax::ast_util::{local_def, PostExpansionMethod};\n-use syntax::ast_util;\n-use syntax::attr;\n-use syntax::codemap::Span;\n-use syntax::codemap;\n+use syntax::{mod, abi, attr};\n+use syntax::ast::{mod, ProvidedMethod, RequiredMethod, TypeTraitItem};\n+use syntax::ast_util::{mod, local_def, PostExpansionMethod};\n+use syntax::codemap::{mod, Span};\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n-use syntax;\n+use syntax::visit::{mod, Visitor};\n \n pub mod _match;\n pub mod vtable;\n@@ -4405,10 +4384,10 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n         fcx.require_expr_have_sized_type(expr, traits::StructInitializerSized);\n       }\n-      ast::ExprField(ref base, ref field, _) => {\n+      ast::ExprField(ref base, ref field) => {\n         check_field(fcx, expr, lvalue_pref, &**base, field);\n       }\n-      ast::ExprTupField(ref base, idx, _) => {\n+      ast::ExprTupField(ref base, idx) => {\n         check_tup_field(fcx, expr, lvalue_pref, &**base, idx);\n       }\n       ast::ExprIndex(ref base, ref idx) => {"}, {"sha": "549d636e8cb564ac0ee977841f368e38faf2e7b9", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -278,8 +278,8 @@ mod svh_visitor {\n             ExprBlock(..)            => SawExprBlock,\n             ExprAssign(..)           => SawExprAssign,\n             ExprAssignOp(op, _, _)   => SawExprAssignOp(op),\n-            ExprField(_, id, _)      => SawExprField(content(id.node)),\n-            ExprTupField(_, id, _)   => SawExprTupField(id.node),\n+            ExprField(_, id)         => SawExprField(content(id.node)),\n+            ExprTupField(_, id)      => SawExprTupField(id.node),\n             ExprIndex(..)            => SawExprIndex,\n             ExprSlice(..)            => SawExprSlice,\n             ExprPath(..)             => SawExprPath,"}, {"sha": "ec228c8aa15d1f62b6b2a87bf81c240d2f9a3a57", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -30,34 +30,26 @@\n use driver::driver::CrateAnalysis;\n use session::Session;\n \n-use middle::def;\n+use middle::{def, typeck};\n use middle::ty::{mod, Ty};\n-use middle::typeck;\n \n use std::cell::Cell;\n-use std::io;\n-use std::io::File;\n-use std::io::fs;\n+use std::io::{mod, File, fs};\n use std::os;\n \n-use syntax::ast;\n-use syntax::ast_util;\n-use syntax::ast_util::PostExpansionMethod;\n-use syntax::ast::{NodeId,DefId};\n+use syntax::ast_util::{mod, PostExpansionMethod};\n+use syntax::ast::{mod, NodeId, DefId};\n use syntax::ast_map::NodeItem;\n use syntax::attr;\n use syntax::codemap::*;\n-use syntax::parse::token;\n-use syntax::parse::token::{get_ident,keywords};\n+use syntax::parse::token::{mod, get_ident, keywords};\n use syntax::owned_slice::OwnedSlice;\n-use syntax::visit;\n-use syntax::visit::Visitor;\n+use syntax::visit::{mod, Visitor};\n use syntax::print::pprust::{path_to_string,ty_to_string};\n use syntax::ptr::P;\n \n use self::span_utils::SpanUtils;\n-use self::recorder::Recorder;\n-use self::recorder::FmtStrs;\n+use self::recorder::{Recorder, FmtStrs};\n \n use util::ppaux;\n \n@@ -1293,7 +1285,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n             ast::ExprStruct(ref path, ref fields, ref base) =>\n                 self.process_struct_lit(ex, path, fields, base),\n             ast::ExprMethodCall(_, _, ref args) => self.process_method_call(ex, args),\n-            ast::ExprField(ref sub_ex, ident, _) => {\n+            ast::ExprField(ref sub_ex, ident) => {\n                 if generated_code(sub_ex.span) {\n                     return\n                 }\n@@ -1319,7 +1311,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                             \"Expected struct type, but not ty_struct\"),\n                 }\n             },\n-            ast::ExprTupField(ref sub_ex, idx, _) => {\n+            ast::ExprTupField(ref sub_ex, idx) => {\n                 if generated_code(sub_ex.span) {\n                     return\n                 }"}, {"sha": "c7cdf93704949b59cd566c18f0b0caaea48d72fe", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -13,22 +13,14 @@ use back::abi;\n use llvm;\n use llvm::{ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, True, False};\n use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n-    RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n+           RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n use metadata::csearch;\n-use middle::const_eval;\n-use middle::def;\n-use trans::adt;\n-use trans::base;\n-use trans::base::push_ctxt;\n-use trans::closure;\n+use middle::{const_eval, def};\n+use trans::{adt, closure, consts, debuginfo, expr, inline, machine};\n+use trans::base::{mod, push_ctxt};\n use trans::common::*;\n-use trans::consts;\n-use trans::expr;\n-use trans::inline;\n-use trans::machine;\n use trans::type_::Type;\n use trans::type_of;\n-use trans::debuginfo;\n use middle::ty::{mod, Ty};\n use util::ppaux::{Repr, ty_to_string};\n \n@@ -418,15 +410,15 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr) -> ValueRef {\n               }\n             }\n           }\n-          ast::ExprField(ref base, field, _) => {\n+          ast::ExprField(ref base, field) => {\n               let (bv, bt) = const_expr(cx, &**base);\n               let brepr = adt::represent_type(cx, bt);\n               expr::with_field_tys(cx.tcx(), bt, None, |discr, field_tys| {\n                   let ix = ty::field_idx_strict(cx.tcx(), field.node.name, field_tys);\n                   adt::const_get_field(cx, &*brepr, bv, discr, ix)\n               })\n           }\n-          ast::ExprTupField(ref base, idx, _) => {\n+          ast::ExprTupField(ref base, idx) => {\n               let (bv, bt) = const_expr(cx, &**base);\n               let brepr = adt::represent_type(cx, bt);\n               expr::with_field_tys(cx.tcx(), bt, None, |discr, _| {"}, {"sha": "a3472e194cf588ee0c524b944f8a3c5f3e56d035", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -197,13 +197,10 @@ use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::*;\n use metadata::csearch;\n use middle::subst::{mod, Subst, Substs};\n-use trans::adt;\n+use trans::{mod, adt, machine, type_of};\n use trans::common::*;\n-use trans::machine;\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n-use trans::type_of;\n use trans::type_::Type;\n-use trans;\n use middle::ty::{mod, Ty};\n use middle::pat_util;\n use session::config::{mod, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n@@ -219,8 +216,7 @@ use syntax::util::interner::Interner;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap, ast_util, ast_map};\n use syntax::ast_util::PostExpansionMethod;\n-use syntax::parse::token;\n-use syntax::parse::token::special_idents;\n+use syntax::parse::token::{mod, special_idents};\n \n static DW_LANG_RUST: c_uint = 0x9000;\n \n@@ -3456,8 +3452,8 @@ fn populate_scope_map(cx: &CrateContext,\n \n             ast::ExprCast(ref sub_exp, _)     |\n             ast::ExprAddrOf(_, ref sub_exp)  |\n-            ast::ExprField(ref sub_exp, _, _) |\n-            ast::ExprTupField(ref sub_exp, _, _) |\n+            ast::ExprField(ref sub_exp, _) |\n+            ast::ExprTupField(ref sub_exp, _) |\n             ast::ExprParen(ref sub_exp) =>\n                 walk_expr(cx, &**sub_exp, scope_stack, scope_map),\n "}, {"sha": "9e004b137bbe8130d05d5caeaab248128d906539", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -38,47 +38,26 @@ pub use self::Dest::*;\n use self::lazy_binop_ty::*;\n \n use back::abi;\n-use llvm;\n-use llvm::{ValueRef};\n+use llvm::{mod, ValueRef};\n use middle::def;\n use middle::mem_categorization::Typer;\n-use middle::subst;\n-use middle::subst::Subst;\n-use trans::_match;\n-use trans::adt;\n-use trans::asm;\n+use middle::subst::{mod, Subst};\n+use trans::{_match, adt, asm, base, callee, closure, consts, controlflow};\n+use trans::{debuginfo, glue, machine, meth, inline, tvec, type_of};\n use trans::base::*;\n-use trans::base;\n use trans::build::*;\n-use trans::callee;\n-use trans::cleanup;\n-use trans::cleanup::CleanupMethods;\n-use trans::closure;\n+use trans::cleanup::{mod, CleanupMethods};\n use trans::common::*;\n-use trans::consts;\n-use trans::controlflow;\n use trans::datum::*;\n-use trans::debuginfo;\n-use trans::glue;\n-use trans::machine;\n-use trans::meth;\n-use trans::inline;\n-use trans::tvec;\n-use trans::type_of;\n-use middle::ty::{struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe};\n-use middle::ty::{AutoPtr};\n-use middle::ty::{mod, Ty};\n-use middle::typeck;\n-use middle::typeck::MethodCall;\n+use middle::ty::{mod, struct_fields, tup_fields};\n+use middle::ty::{AdjustDerefRef, AdjustAddEnv, AutoUnsafe, AutoPtr, Ty};\n+use middle::typeck::{mod, MethodCall};\n use util::common::indenter;\n use util::ppaux::Repr;\n use trans::machine::{llsize_of, llsize_of_alloc};\n use trans::type_::Type;\n \n-use syntax::ast;\n-use syntax::ast_util;\n-use syntax::codemap;\n+use syntax::{ast, ast_util, codemap};\n use syntax::print::pprust::{expr_to_string};\n use syntax::ptr::P;\n use std::rc::Rc;\n@@ -599,10 +578,10 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprPath(_) => {\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n-        ast::ExprField(ref base, ident, _) => {\n+        ast::ExprField(ref base, ident) => {\n             trans_rec_field(bcx, &**base, ident.node)\n         }\n-        ast::ExprTupField(ref base, idx, _) => {\n+        ast::ExprTupField(ref base, idx) => {\n             trans_rec_tup_field(bcx, &**base, idx.node)\n         }\n         ast::ExprIndex(ref base, ref idx) => {"}, {"sha": "3d33774aa55e1d922f5dde98082affd89dc9ef3a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -673,8 +673,8 @@ pub enum Expr_ {\n \n     ExprAssign(P<Expr>, P<Expr>),\n     ExprAssignOp(BinOp, P<Expr>, P<Expr>),\n-    ExprField(P<Expr>, SpannedIdent, Vec<P<Ty>>),\n-    ExprTupField(P<Expr>, Spanned<uint>, Vec<P<Ty>>),\n+    ExprField(P<Expr>, SpannedIdent),\n+    ExprTupField(P<Expr>, Spanned<uint>),\n     ExprIndex(P<Expr>, P<Expr>),\n     ExprSlice(P<Expr>, Option<P<Expr>>, Option<P<Expr>>, Mutability),\n "}, {"sha": "2c7f9e889f8b2d4f4aaaeab233ea6a5409bc441e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -577,7 +577,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         };\n \n         let id = Spanned { node: ident, span: field_span };\n-        self.expr(sp, ast::ExprField(expr, id, Vec::new()))\n+        self.expr(sp, ast::ExprField(expr, id))\n     }\n     fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>, idx: uint) -> P<ast::Expr> {\n         let field_span = Span {\n@@ -587,7 +587,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         };\n \n         let id = Spanned { node: idx, span: field_span };\n-        self.expr(sp, ast::ExprTupField(expr, id, Vec::new()))\n+        self.expr(sp, ast::ExprTupField(expr, id))\n     }\n     fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprAddrOf(ast::MutImmutable, e))"}, {"sha": "6941c0e9c180053c4bc845603bcfc1c3d6b9c359", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -1345,15 +1345,13 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                             folder.fold_expr(el),\n                             folder.fold_expr(er))\n             }\n-            ExprField(el, ident, tys) => {\n+            ExprField(el, ident) => {\n                 ExprField(folder.fold_expr(el),\n-                          respan(ident.span, folder.fold_ident(ident.node)),\n-                          tys.move_map(|x| folder.fold_ty(x)))\n+                          respan(ident.span, folder.fold_ident(ident.node)))\n             }\n-            ExprTupField(el, ident, tys) => {\n+            ExprTupField(el, ident) => {\n                 ExprTupField(folder.fold_expr(el),\n-                             respan(ident.span, folder.fold_uint(ident.node)),\n-                             tys.move_map(|x| folder.fold_ty(x)))\n+                             respan(ident.span, folder.fold_uint(ident.node)))\n             }\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))"}, {"sha": "a9306c71240ef14eaa972318f9ec7e9579eabcac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -71,22 +71,18 @@ use ext::tt::macro_parser;\n use parse;\n use parse::attr::ParserAttr;\n use parse::classify;\n-use parse::common::{SeqSep, seq_sep_none};\n-use parse::common::{seq_sep_trailing_allowed};\n-use parse::lexer::Reader;\n-use parse::lexer::TokenAndSpan;\n+use parse::common::{SeqSep, seq_sep_none, seq_sep_trailing_allowed};\n+use parse::lexer::{Reader, TokenAndSpan};\n use parse::obsolete::*;\n-use parse::token::{MatchNt, SubstNt, InternedString};\n+use parse::token::{mod, MatchNt, SubstNt, InternedString};\n use parse::token::{keywords, special_idents};\n-use parse::token;\n use parse::{new_sub_parser_from_file, ParseSess};\n use print::pprust;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n use std::collections::HashSet;\n use std::io::fs::PathExtensions;\n-use std::mem::replace;\n use std::mem;\n use std::num::Float;\n use std::rc::Rc;\n@@ -912,7 +908,7 @@ impl<'a> Parser<'a> {\n                 tok: token::Underscore,\n                 sp: self.span,\n             };\n-            replace(&mut self.buffer[buffer_start], placeholder)\n+            mem::replace(&mut self.buffer[buffer_start], placeholder)\n         };\n         self.span = next.sp;\n         self.token = next.tok;\n@@ -921,7 +917,7 @@ impl<'a> Parser<'a> {\n \n     /// Advance the parser by one token and return the bumped token.\n     pub fn bump_and_get(&mut self) -> token::Token {\n-        let old_token = replace(&mut self.token, token::Underscore);\n+        let old_token = mem::replace(&mut self.token, token::Underscore);\n         self.bump();\n         old_token\n     }\n@@ -2100,14 +2096,12 @@ impl<'a> Parser<'a> {\n         ExprSlice(expr, start, end, mutbl)\n     }\n \n-    pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent,\n-                    tys: Vec<P<Ty>>) -> ast::Expr_ {\n-        ExprField(expr, ident, tys)\n+    pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ {\n+        ExprField(expr, ident)\n     }\n \n-    pub fn mk_tup_field(&mut self, expr: P<Expr>, idx: codemap::Spanned<uint>,\n-                    tys: Vec<P<Ty>>) -> ast::Expr_ {\n-        ExprTupField(expr, idx, tys)\n+    pub fn mk_tup_field(&mut self, expr: P<Expr>, idx: codemap::Spanned<uint>) -> ast::Expr_ {\n+        ExprTupField(expr, idx)\n     }\n \n     pub fn mk_assign_op(&mut self, binop: ast::BinOp,\n@@ -2462,7 +2456,7 @@ impl<'a> Parser<'a> {\n                             }\n \n                             let id = spanned(dot, hi, i);\n-                            let field = self.mk_field(e, id, tys);\n+                            let field = self.mk_field(e, id);\n                             e = self.mk_expr(lo, hi, field);\n                         }\n                     }\n@@ -2481,7 +2475,7 @@ impl<'a> Parser<'a> {\n                     match index {\n                         Some(n) => {\n                             let id = spanned(dot, hi, n);\n-                            let field = self.mk_tup_field(e, id, Vec::new());\n+                            let field = self.mk_tup_field(e, id);\n                             e = self.mk_expr(lo, hi, field);\n                         }\n                         None => {"}, {"sha": "2b80be0bf2a7f4d6f2afde007f9ede07c123cb13", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -1734,29 +1734,15 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_expr(&**rhs));\n             }\n-            ast::ExprField(ref expr, id, ref tys) => {\n+            ast::ExprField(ref expr, id) => {\n                 try!(self.print_expr(&**expr));\n                 try!(word(&mut self.s, \".\"));\n                 try!(self.print_ident(id.node));\n-                if tys.len() > 0u {\n-                    try!(word(&mut self.s, \"::<\"));\n-                    try!(self.commasep(\n-                        Inconsistent, tys.as_slice(),\n-                        |s, ty| s.print_type(&**ty)));\n-                    try!(word(&mut self.s, \">\"));\n-                }\n             }\n-            ast::ExprTupField(ref expr, id, ref tys) => {\n+            ast::ExprTupField(ref expr, id) => {\n                 try!(self.print_expr(&**expr));\n                 try!(word(&mut self.s, \".\"));\n                 try!(self.print_uint(id.node));\n-                if tys.len() > 0u {\n-                    try!(word(&mut self.s, \"::<\"));\n-                    try!(self.commasep(\n-                        Inconsistent, tys.as_slice(),\n-                        |s, ty| s.print_type(&**ty)));\n-                    try!(word(&mut self.s, \">\"));\n-                }\n             }\n             ast::ExprIndex(ref expr, ref index) => {\n                 try!(self.print_expr(&**expr));"}, {"sha": "3f87dbc0740ec6b648b31786c43a43a46c229725", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35316972ff2e7ea02a4583141d3ac69b79610067/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=35316972ff2e7ea02a4583141d3ac69b79610067", "patch": "@@ -838,17 +838,11 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(&**right_expression);\n             visitor.visit_expr(&**left_expression)\n         }\n-        ExprField(ref subexpression, _, ref types) => {\n+        ExprField(ref subexpression, _) => {\n             visitor.visit_expr(&**subexpression);\n-            for typ in types.iter() {\n-                visitor.visit_ty(&**typ)\n-            }\n         }\n-        ExprTupField(ref subexpression, _, ref types) => {\n+        ExprTupField(ref subexpression, _) => {\n             visitor.visit_expr(&**subexpression);\n-            for typ in types.iter() {\n-                visitor.visit_ty(&**typ)\n-            }\n         }\n         ExprIndex(ref main_expression, ref index_expression) => {\n             visitor.visit_expr(&**main_expression);"}]}