{"sha": "63427afb69c57ce085cfda7e3a26189967c44632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNDI3YWZiNjljNTdjZTA4NWNmZGE3ZTNhMjYxODk5NjdjNDQ2MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-09T16:59:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-09T16:59:10Z"}, "message": "Merge #9825\n\n9825: Generate default impl when converting #[derive(Default)] to manual impl r=Veykril a=yoshuawuyts\n\nSimilar to https://github.com/rust-analyzer/rust-analyzer/pull/9814, but for `#[derive(Default)]`. Thanks!\r\n\r\n## Follow-up steps\r\nI've added the tests inside `handlers/replace_derive_with_manual_impl.rs` again, but I'm planning a follow-up PR to extract these to `utils/` so we can share them between assists - and maybe even add another assist just for the purpose of testing these impls (e.g. `generate_default_trait_body`).\r\n\r\nThe step after _that_ is likely to fill out the remaining traits, so we can make it so whenever RA auto-completes a trait which also can be derived, we provide a default function body.\r\n\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "9fa3665fd0e36e0637ce083d3df524d7dc05e821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa3665fd0e36e0637ce083d3df524d7dc05e821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63427afb69c57ce085cfda7e3a26189967c44632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhEV7eCRBK7hj4Ov3rIwAAlXYIABC72jJs7BlZg5tPkV3vXoam\n6RuHY9ff8CTcUEnzsNLf2wByiQh3h6GWgCdN/MASE7Of6bvpLjzobTLKjkrlfFu3\nA9YVxn1ZcOxEYUJiM9CQGvRnEV0NVaz5TIHjoPLChZXKTS7hOO6+KLenku1VZ9ex\ns+0DFUTveQKBUp0oYQpOs8BCzHTCpeFB9I5v374Ofm+DdWKgvM7xL9bUQbIPWK10\nSKf6GnQUsm7yqO7KM3oEsL90BalMdPzi+KASvTOvFSNTn0S6bO+WBkfumVh9uXw4\nBT1HJh3Z3YRZ1m1JldIB8eZsK0Y93GxvQzGnzyU+4U8hFDXD9NtvteHPfpvIyjI=\n=BCTH\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fa3665fd0e36e0637ce083d3df524d7dc05e821\nparent b2b24255c870afc1b4d7e19aa1be022d4366b760\nparent 13749e782e307fbd52c1f85112982c93bfd0f2e7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628528350 +0000\ncommitter GitHub <noreply@github.com> 1628528350 +0000\n\nMerge #9825\n\n9825: Generate default impl when converting #[derive(Default)] to manual impl r=Veykril a=yoshuawuyts\n\nSimilar to https://github.com/rust-analyzer/rust-analyzer/pull/9814, but for `#[derive(Default)]`. Thanks!\r\n\r\n## Follow-up steps\r\nI've added the tests inside `handlers/replace_derive_with_manual_impl.rs` again, but I'm planning a follow-up PR to extract these to `utils/` so we can share them between assists - and maybe even add another assist just for the purpose of testing these impls (e.g. `generate_default_trait_body`).\r\n\r\nThe step after _that_ is likely to fill out the remaining traits, so we can make it so whenever RA auto-completes a trait which also can be derived, we provide a default function body.\r\n\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63427afb69c57ce085cfda7e3a26189967c44632", "html_url": "https://github.com/rust-lang/rust/commit/63427afb69c57ce085cfda7e3a26189967c44632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63427afb69c57ce085cfda7e3a26189967c44632/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b24255c870afc1b4d7e19aa1be022d4366b760", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b24255c870afc1b4d7e19aa1be022d4366b760", "html_url": "https://github.com/rust-lang/rust/commit/b2b24255c870afc1b4d7e19aa1be022d4366b760"}, {"sha": "13749e782e307fbd52c1f85112982c93bfd0f2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/13749e782e307fbd52c1f85112982c93bfd0f2e7", "html_url": "https://github.com/rust-lang/rust/commit/13749e782e307fbd52c1f85112982c93bfd0f2e7"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "bcabca64b324249bd930d2076f2019c35401cb70", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 113, "deletions": 4, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/63427afb69c57ce085cfda7e3a26189967c44632/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63427afb69c57ce085cfda7e3a26189967c44632/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=63427afb69c57ce085cfda7e3a26189967c44632", "patch": "@@ -169,7 +169,7 @@ fn impl_def_from_trait(\n \n     // Generate a default `impl` function body for the derived trait.\n     if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-        let _ = gen_default_impl(func, trait_path, adt, annotated_name);\n+        let _ = gen_trait_body_impl(func, trait_path, adt, annotated_name);\n     };\n \n     Some((impl_def, first_assoc_item))\n@@ -180,23 +180,24 @@ fn impl_def_from_trait(\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n /// as `todo!` instead.\n-fn gen_default_impl(\n+fn gen_trait_body_impl(\n     func: &ast::Fn,\n     trait_path: &ast::Path,\n     adt: &ast::Adt,\n     annotated_name: &ast::Name,\n ) -> Option<()> {\n     match trait_path.segment()?.name_ref()?.text().as_str() {\n         \"Debug\" => gen_debug_impl(adt, func, annotated_name),\n-        _ => Some(()),\n+        \"Default\" => gen_default_impl(adt, func),\n+        _ => None,\n     }\n }\n \n /// Generate a `Debug` impl based on the fields and members of the target type.\n fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) -> Option<()> {\n     match adt {\n         // `Debug` cannot be derived for unions, so no default impl can be provided.\n-        ast::Adt::Union(_) => Some(()),\n+        ast::Adt::Union(_) => None,\n \n         // => match self { Self::Variant => write!(f, \"Variant\") }\n         ast::Adt::Enum(enum_) => {\n@@ -276,6 +277,50 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) ->\n     }\n }\n \n+/// Generate a `Debug` impl based on the fields and members of the target type.\n+fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_default_call() -> ast::Expr {\n+        let trait_name = make::ext::ident_path(\"Default\");\n+        let method_name = make::ext::ident_path(\"default\");\n+        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+        make::expr_call(fn_name, make::arg_list(None))\n+    }\n+    match adt {\n+        // `Debug` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => None,\n+        // Deriving `Debug` for enums is not stable yet.\n+        ast::Adt::Enum(_) => None,\n+        ast::Adt::Struct(strukt) => {\n+            let expr = match strukt.field_list() {\n+                Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                    let mut fields = vec![];\n+                    for field in field_list.fields() {\n+                        let method_call = gen_default_call();\n+                        let name_ref = make::name_ref(&field.name()?.to_string());\n+                        let field = make::record_expr_field(name_ref, Some(method_call));\n+                        fields.push(field);\n+                    }\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(fields);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n+                Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                    let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n+                    let fields = field_list.fields().map(|_| gen_default_call());\n+                    make::expr_call(struct_name, make::arg_list(fields))\n+                }\n+                None => {\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(None);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n+            };\n+            let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n+            ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+            Some(())\n+        }\n+    }\n+}\n fn update_attribute(\n     builder: &mut AssistBuilder,\n     input: &ast::TokenTree,\n@@ -405,6 +450,70 @@ impl core::fmt::Debug for Foo {\n         }\n     }\n }\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_record_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo {\n+    foo: usize,\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    foo: usize,\n+}\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self { foo: Default::default() }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo(usize);\n+\"#,\n+            r#\"\n+struct Foo(usize);\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_empty_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo;\n+\"#,\n+            r#\"\n+struct Foo;\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self {  }\n+    }\n+}\n \"#,\n         )\n     }"}]}