{"sha": "bef72447e75b7e37f43d3a82ce40e419c7f747d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjcyNDQ3ZTc1YjdlMzdmNDNkM2E4MmNlNDBlNDE5YzdmNzQ3ZDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-03T21:03:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-03T21:28:30Z"}, "message": "core: Add a scheduler mode, osmain, to spawn onto the main scheduler", "tree": {"sha": "92e5355f9320194ca9cb512b1079f73ca89de2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e5355f9320194ca9cb512b1079f73ca89de2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef72447e75b7e37f43d3a82ce40e419c7f747d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef72447e75b7e37f43d3a82ce40e419c7f747d2", "html_url": "https://github.com/rust-lang/rust/commit/bef72447e75b7e37f43d3a82ce40e419c7f747d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef72447e75b7e37f43d3a82ce40e419c7f747d2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1858882a49bf0666d4ffb3f45989ac9dbe9c843", "html_url": "https://github.com/rust-lang/rust/commit/e1858882a49bf0666d4ffb3f45989ac9dbe9c843"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "cdf50aa4837098f45d609de0c30375f3706b2c50", "filename": "src/libcore/task.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=bef72447e75b7e37f43d3a82ce40e419c7f747d2", "patch": "@@ -88,6 +88,13 @@ enum sched_mode {\n     thread_per_task,\n     #[doc = \"Tasks are distributed among a fixed number of OS threads\"]\n     manual_threads(uint),\n+    #[doc = \"\n+    Tasks are scheduled on the main OS thread\n+\n+    The main OS thread is the thread used to launch the runtime which,\n+    in most cases, is the process's initial thread as created by the OS.\n+    \"]\n+    osmain\n }\n \n #[doc = \"\n@@ -107,7 +114,7 @@ Scheduler configuration options\n \"]\n type sched_opts = {\n     mode: sched_mode,\n-    native_stack_size: option<uint>,\n+    native_stack_size: option<uint>\n };\n \n #[doc = \"\n@@ -525,9 +532,14 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n             }\n             threads\n           }\n+          osmain { 0u /* Won't be used */ }\n         };\n \n-        let sched_id = rustrt::rust_new_sched(num_threads);\n+        let sched_id = if opts.mode != osmain {\n+            rustrt::rust_new_sched(num_threads)\n+        } else {\n+            rustrt::rust_osmain_sched_id()\n+        };\n         rustrt::rust_new_task_in_sched(sched_id)\n     }\n \n@@ -553,6 +565,7 @@ native mod rustrt {\n \n     fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     fn unsupervise();\n+    fn rust_osmain_sched_id() -> sched_id;\n }\n \n \n@@ -897,3 +910,23 @@ fn test_avoid_copying_the_body_unsupervise() {\n         }\n     }\n }\n+\n+#[test]\n+fn test_osmain() {\n+    let builder = task_builder();\n+    let opts = {\n+        sched: some({\n+            mode: osmain,\n+            native_stack_size: none\n+        })\n+        with get_opts(builder)\n+    };\n+    set_opts(builder, opts);\n+\n+    let po = comm::port();\n+    let ch = comm::chan(po);\n+    run(builder) {||\n+        comm::send(ch, ());\n+    }\n+    comm::recv(po);\n+}"}, {"sha": "f13fd4a110b6ef4e6af70a3fee23efe9a15f8afa", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=bef72447e75b7e37f43d3a82ce40e419c7f747d2", "patch": "@@ -646,6 +646,12 @@ rust_dbg_call(dbg_callback cb, void *data) {\n     return cb(data);\n }\n \n+extern \"C\" CDECL rust_sched_id\n+rust_osmain_sched_id() {\n+    rust_task *task = rust_sched_loop::get_task();\n+    return task->kernel->osmain_sched_id();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "927da963dad66d132209428b5913f500d154d785", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=bef72447e75b7e37f43d3a82ce40e419c7f747d2", "patch": "@@ -93,6 +93,8 @@ class rust_kernel {\n     void release_port_id(rust_port_id tid);\n \n     void set_exit_status(int code);\n+\n+    rust_sched_id osmain_sched_id() { return osmain_scheduler; }\n };\n \n #endif /* RUST_KERNEL_H */"}, {"sha": "c8219e922be5823e67bccd6a9bcf655fdbb7790f", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=bef72447e75b7e37f43d3a82ce40e419c7f747d2", "patch": "@@ -96,3 +96,4 @@ rust_dbg_lock_unlock\n rust_dbg_lock_wait\n rust_dbg_lock_signal\n rust_dbg_call\n+rust_osmain_sched_id"}, {"sha": "4112ee561f7042f128d2d7615ffcccefceb40d3a", "filename": "src/test/run-pass/osmain.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Ftest%2Frun-pass%2Fosmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef72447e75b7e37f43d3a82ce40e419c7f747d2/src%2Ftest%2Frun-pass%2Fosmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fosmain.rs?ref=bef72447e75b7e37f43d3a82ce40e419c7f747d2", "patch": "@@ -0,0 +1,46 @@\n+// Jump back and forth between the OS main thread and a new scheduler.\n+// The OS main scheduler should continue to be available and not terminate\n+// while it is not in use.\n+\n+fn main() {\n+    run(10);\n+}\n+\n+fn run(i: int) {\n+\n+    log(debug, i);\n+\n+    if i == 0 {\n+        ret;\n+    }\n+\n+    let builder = task::task_builder();\n+    let opts = {\n+        sched: some({\n+            mode: task::osmain,\n+            native_stack_size: none\n+        })\n+        with task::get_opts(builder)\n+    };\n+    task::set_opts(builder, opts);\n+    task::unsupervise(builder);\n+    task::run(builder) {||\n+        task::yield();\n+        let builder = task::task_builder();\n+        let opts = {\n+            sched: some({\n+                mode: task::single_threaded,\n+                native_stack_size: none\n+            })\n+            with task::get_opts(builder)\n+        };\n+        task::set_opts(builder, opts);\n+        task::unsupervise(builder);\n+        task::run(builder) {||\n+            task::yield();\n+            run(i - 1);\n+            task::yield();\n+        }\n+        task::yield();\n+    }\n+}"}]}