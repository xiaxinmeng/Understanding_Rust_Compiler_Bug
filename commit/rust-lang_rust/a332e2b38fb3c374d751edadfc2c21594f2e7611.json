{"sha": "a332e2b38fb3c374d751edadfc2c21594f2e7611", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzJlMmIzOGZiM2MzNzRkNzUxZWRhZGZjMmMyMTU5NGYyZTc2MTE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-07T22:05:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-08T18:02:53Z"}, "message": "Account for gaps in def path table during decoding\n\nWhen encoding a proc-macro crate, there may be gaps in the table (since\nwe only encode the crate root and proc-macro items). Account for this by\nchecking if the entry is present, rather than using `unwrap()`", "tree": {"sha": "25714ffe6bc43feea69425eaac9ac81bc495d12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25714ffe6bc43feea69425eaac9ac81bc495d12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a332e2b38fb3c374d751edadfc2c21594f2e7611", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/Pv80ACgkQtAh+UQ6Y\nsWR9Jg/9Gnl/OXmxrQz5WfVGl4wjUrOuxRB8iMbKlpxLVfNyc284wamDFVU/xvZY\nl8okoZ6tWC9v98wGhQw5gmYbFEgx7lg9X04QiFy6B+xWMBaNb1IuKkAqf1QWDkfW\nJELc6teBuEAR/jD5wzlineCmmchIIrQ35J+NTu3J9Lla27nOREkYAj0rvpwDEN0n\nXkEd5a/UUhaLXXJqApQfGyBa2XawUIEdNiwv15hcwn1IukkHepf4K/4lAZ+LyM92\naeBtiv+xmDRwBIjDAZs4v67/pT2hRxqL9Cz33AFVTRJ8RWPmrY3PIo7tG84ysSvp\nFg+oPEfpMGWNOB8EM7T+6mPfyFQojo2VBgwP7/qAW7rtk5ZBCI/3v/2vh0YF2yGn\nYrjBtlv+WdGtgWqOzs4CS4XTsW0wecIQkITS/VDOjUWyNLXhmJfAipW9+xn6pB7a\nTNheKLj2AJmoizsN5VzHv8fLkQ4RfcyqNjiXbeh78DMkF8amc0DbjdeFD4YUofbc\nySm6z7GoOmZ4JyvTQEThRxTFkd+h51cdYnQ4fcvqeYLmTPs+P4FKbT/aOVNXwlkI\nLKzBkMb17GRNmDEeZY8JuSElebh7t7YmimNNCXHAQaSBWlvbxAWa6M+2B+xIkk5x\nFEw1PCDpZc/TLMfeWza/48WhiUQaeGle4IFcDRPZUqmxqCjsNiM=\n=KwrQ\n-----END PGP SIGNATURE-----", "payload": "tree 25714ffe6bc43feea69425eaac9ac81bc495d12c\nparent afa995b2dd1e194845f2082707e6045d539230a5\nauthor Aaron Hill <aa1ronham@gmail.com> 1607378728 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1607450573 -0500\n\nAccount for gaps in def path table during decoding\n\nWhen encoding a proc-macro crate, there may be gaps in the table (since\nwe only encode the crate root and proc-macro items). Account for this by\nchecking if the entry is present, rather than using `unwrap()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a332e2b38fb3c374d751edadfc2c21594f2e7611", "html_url": "https://github.com/rust-lang/rust/commit/a332e2b38fb3c374d751edadfc2c21594f2e7611", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a332e2b38fb3c374d751edadfc2c21594f2e7611/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa995b2dd1e194845f2082707e6045d539230a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa995b2dd1e194845f2082707e6045d539230a5", "html_url": "https://github.com/rust-lang/rust/commit/afa995b2dd1e194845f2082707e6045d539230a5"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "43f7b2a992838746c54e886e741fb175470d1f4c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a332e2b38fb3c374d751edadfc2c21594f2e7611/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a332e2b38fb3c374d751edadfc2c21594f2e7611/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a332e2b38fb3c374d751edadfc2c21594f2e7611", "patch": "@@ -1553,6 +1553,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             return Some(DefId { krate, index: def_index_guess });\n         }\n \n+        let is_proc_macro = self.is_proc_macro_crate();\n+\n         // Slow path: We need to find out the new `DefIndex` of the provided\n         // `DefPathHash`, if its still exists. This requires decoding every `DefPathHash`\n         // stored in this crate.\n@@ -1561,9 +1563,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             let mut map = FxHashMap::with_capacity_and_hasher(end_id as usize, Default::default());\n             for i in 0..end_id {\n                 let def_index = DefIndex::from_u32(i);\n-                let hash =\n-                    self.root.tables.def_path_hashes.get(self, def_index).unwrap().decode(self);\n-                map.insert(hash, def_index);\n+                // There may be gaps in the encoded table if we're decoding a proc-macro crate\n+                if let Some(hash) = self.root.tables.def_path_hashes.get(self, def_index) {\n+                    map.insert(hash.decode(self), def_index);\n+                } else if !is_proc_macro {\n+                    panic!(\"Missing def_path_hashes entry for {:?}\", def_index);\n+                }\n             }\n             map\n         });"}]}