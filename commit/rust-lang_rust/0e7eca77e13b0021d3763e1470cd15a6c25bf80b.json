{"sha": "0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "node_id": "C_kwDOAAsO6NoAKDBlN2VjYTc3ZTEzYjAwMjFkMzc2M2UxNDcwY2QxNWE2YzI1YmY4MGI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-23T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-23T17:07:06Z"}, "message": "Fix precise field capture of univariant enums\n\nWhen constructing a MIR from a THIR field expression, introduce an\nadditional downcast projection before accessing a field of an enum.\n\nWhen rebasing a place builder on top of a captured place, account for\nthe fact that a single HIR enum field projection corresponds to two MIR\nprojection elements: a downcast element and a field element.", "tree": {"sha": "bbbe18fd1e79d32a436306f87d48bff43809a5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbe18fd1e79d32a436306f87d48bff43809a5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "html_url": "https://github.com/rust-lang/rust/commit/0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653463731a7f01f519cf85f444869def27f00395", "url": "https://api.github.com/repos/rust-lang/rust/commits/653463731a7f01f519cf85f444869def27f00395", "html_url": "https://github.com/rust-lang/rust/commit/653463731a7f01f519cf85f444869def27f00395"}], "stats": {"total": 106, "additions": 85, "deletions": 21}, "files": [{"sha": "c3b79917dda91348001162b2c8f7d5716f1ae6a6", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "patch": "@@ -317,9 +317,11 @@ pub enum ExprKind<'tcx> {\n         lhs: ExprId,\n         rhs: ExprId,\n     },\n-    /// Access to a struct or tuple field.\n+    /// Access to a field of a struct, a tuple, an union, or an enum.\n     Field {\n         lhs: ExprId,\n+        /// Variant containing the field.\n+        variant_index: VariantIdx,\n         /// This can be a named (`.foo`) or unnamed (`.0`) field.\n         name: Field,\n     },"}, {"sha": "8c8ebb0a6b87a133036680492b1e3f6eeaa87b42", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "patch": "@@ -80,7 +80,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[rhs]);\n         }\n-        Field { lhs, name: _ } => visitor.visit_expr(&visitor.thir()[lhs]),\n+        Field { lhs, variant_index: _, name: _ } => visitor.visit_expr(&visitor.thir()[lhs]),\n         Index { lhs, index } => {\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[index]);"}, {"sha": "438a68e71f054f7cced777c03c19ad753df8bd71", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "patch": "@@ -5,6 +5,7 @@ use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n+use rustc_middle::hir::place::Projection as HirProjection;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n@@ -268,20 +269,52 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n                 ty::UpvarCapture::ByValue => upvar_resolved_place_builder,\n             };\n \n-            let next_projection = capture.place.projections.len();\n-            let mut curr_projections = from_builder.projection;\n-\n             // We used some of the projections to build the capture itself,\n             // now we apply the remaining to the upvar resolved place.\n-            upvar_resolved_place_builder\n-                .projection\n-                .extend(curr_projections.drain(next_projection..));\n+            let remaining_projections = strip_prefix(\n+                capture.place.base_ty,\n+                from_builder.projection,\n+                &capture.place.projections,\n+            );\n+            upvar_resolved_place_builder.projection.extend(remaining_projections);\n \n             Ok(upvar_resolved_place_builder)\n         }\n     }\n }\n \n+/// Returns projections remaining after stripping an initial prefix of HIR\n+/// projections.\n+///\n+/// Supports only HIR projection kinds that represent a path that might be\n+/// captured by a closure or a generator, i.e., an `Index` or a `Subslice`\n+/// projection kinds are unsupported.\n+fn strip_prefix<'tcx>(\n+    mut base_ty: Ty<'tcx>,\n+    projections: Vec<PlaceElem<'tcx>>,\n+    prefix_projections: &[HirProjection<'tcx>],\n+) -> impl Iterator<Item = PlaceElem<'tcx>> {\n+    let mut iter = projections.into_iter();\n+    for projection in prefix_projections {\n+        match projection.kind {\n+            HirProjectionKind::Deref => {\n+                assert!(matches!(iter.next(), Some(ProjectionElem::Deref)));\n+            }\n+            HirProjectionKind::Field(..) => {\n+                if base_ty.is_enum() {\n+                    assert!(matches!(iter.next(), Some(ProjectionElem::Downcast(..))));\n+                }\n+                assert!(matches!(iter.next(), Some(ProjectionElem::Field(..))));\n+            }\n+            HirProjectionKind::Index | HirProjectionKind::Subslice => {\n+                bug!(\"unexpected projection kind: {:?}\", projection);\n+            }\n+        }\n+        base_ty = projection.ty;\n+    }\n+    iter\n+}\n+\n impl<'tcx> PlaceBuilder<'tcx> {\n     pub(crate) fn into_place<'a>(\n         self,\n@@ -438,11 +471,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.expr_as_place(block, &this.thir[value], mutability, fake_borrow_temps)\n                 })\n             }\n-            ExprKind::Field { lhs, name } => {\n-                let place_builder = unpack!(\n-                    block =\n-                        this.expr_as_place(block, &this.thir[lhs], mutability, fake_borrow_temps,)\n-                );\n+            ExprKind::Field { lhs, variant_index, name } => {\n+                let lhs = &this.thir[lhs];\n+                let mut place_builder =\n+                    unpack!(block = this.expr_as_place(block, lhs, mutability, fake_borrow_temps,));\n+                if let ty::Adt(adt_def, _) = lhs.ty.kind() {\n+                    if adt_def.is_enum() {\n+                        place_builder = place_builder.downcast(*adt_def, variant_index);\n+                    }\n+                }\n                 block.and(place_builder.field(name, expr.ty))\n             }\n             ExprKind::Deref { arg } => {"}, {"sha": "bd9f599fff0a15efb1b8f32e7ec98b9e8da8f571", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "patch": "@@ -591,6 +591,7 @@ impl<'tcx> Cx<'tcx> {\n             }\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n+                variant_index: VariantIdx::new(0),\n                 name: Field::new(tcx.field_index(expr.hir_id, self.typeck_results)),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n@@ -994,14 +995,11 @@ impl<'tcx> Cx<'tcx> {\n                 HirProjectionKind::Deref => {\n                     ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }\n                 }\n-                HirProjectionKind::Field(field, ..) => {\n-                    // Variant index will always be 0, because for multi-variant\n-                    // enums, we capture the enum entirely.\n-                    ExprKind::Field {\n-                        lhs: self.thir.exprs.push(captured_place_expr),\n-                        name: Field::new(field as usize),\n-                    }\n-                }\n+                HirProjectionKind::Field(field, variant_index) => ExprKind::Field {\n+                    lhs: self.thir.exprs.push(captured_place_expr),\n+                    variant_index,\n+                    name: Field::new(field as usize),\n+                },\n                 HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                     // We don't capture these projections, so we can ignore them here\n                     continue;"}, {"sha": "bbe3aa31a98df99f8e199fb949de1e02b521b2c5", "filename": "src/test/ui/closures/2229_closure_analysis/capture-enum-field.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e7eca77e13b0021d3763e1470cd15a6c25bf80b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-enum-field.rs?ref=0e7eca77e13b0021d3763e1470cd15a6c25bf80b", "patch": "@@ -0,0 +1,27 @@\n+// edition:2021\n+// run-pass\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum Color {\n+    RGB(u8, u8, u8),\n+}\n+\n+fn main() {\n+    let mut color = Color::RGB(0, 0, 0);\n+    let mut red = |v| {\n+        let Color::RGB(ref mut r, _, _) = color;\n+        *r = v;\n+    };\n+    let mut green = |v| {\n+        let Color::RGB(_, ref mut g, _) = color;\n+        *g = v;\n+    };\n+    let mut blue = |v| {\n+        let Color::RGB(_, _, ref mut b) = color;\n+        *b = v;\n+    };\n+    red(1);\n+    green(2);\n+    blue(3);\n+    assert_eq!(Color::RGB(1, 2, 3), color);\n+}"}]}