{"sha": "5c8f50952bb50e0e37b16ca4cd14c08c8e56a449", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOGY1MDk1MmJiNTBlMGUzN2IxNmNhNGNkMTRjMDhjOGU1NmE0NDk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-20T12:35:15Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-22T13:10:07Z"}, "message": "Add checks to ensure that explanations have code examples using the error code and also that 'compile_fail' isn't mispelled", "tree": {"sha": "550d46dca9c68f245858cc1aee04a1e0900e91d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/550d46dca9c68f245858cc1aee04a1e0900e91d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449", "html_url": "https://github.com/rust-lang/rust/commit/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d", "html_url": "https://github.com/rust-lang/rust/commit/2dc5b602eee35d70e8e6e506a7ea07b6c7e0197d"}], "stats": {"total": 89, "additions": 74, "deletions": 15}, "files": [{"sha": "243d41598f86c739dba3941f668a42e75e47f9f1", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 74, "deletions": 15, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8f50952bb50e0e37b16ca4cd14c08c8e56a449/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=5c8f50952bb50e0e37b16ca4cd14c08c8e56a449", "patch": "@@ -15,21 +15,57 @@ const WHITELIST: &[&str] = &[\n     \"E0727\", \"E0729\",\n ];\n \n+// Some error codes don't have any tests apparently...\n+const IGNORE_EXPLANATION_CHECK: &[&str] =\n+    &[\"E0570\", \"E0601\", \"E0602\", \"E0639\", \"E0729\", \"E0749\", \"E0750\", \"E0751\"];\n+\n fn check_error_code_explanation(\n     f: &str,\n     error_codes: &mut HashMap<String, bool>,\n     err_code: String,\n-) {\n+) -> bool {\n+    let mut invalid_compile_fail_format = false;\n+    let mut found_error_code = false;\n+\n     for line in f.lines() {\n         let s = line.trim();\n-        if s.starts_with(\"```\") && s.contains(\"compile_fail\") && s.contains('E') {\n-            error_codes.insert(err_code, true);\n-            return;\n+        if s.starts_with(\"```\") {\n+            if s.contains(\"compile_fail\") && s.contains('E') {\n+                if !found_error_code {\n+                    error_codes.insert(err_code.clone(), true);\n+                    found_error_code = true;\n+                }\n+            } else if s.contains(\"compile-fail\") {\n+                invalid_compile_fail_format = true;\n+            }\n         } else if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n-            error_codes.get_mut(&err_code).map(|x| *x = true);\n-            return;\n+            if !found_error_code {\n+                error_codes.get_mut(&err_code).map(|x| *x = true);\n+                found_error_code = true;\n+            }\n         }\n     }\n+    invalid_compile_fail_format\n+}\n+\n+fn check_if_error_code_is_test_in_explanation(f: &str, err_code: &String) -> bool {\n+    let mut can_be_ignored = false;\n+\n+    for line in f.lines() {\n+        let s = line.trim();\n+        if s.starts_with(\"#### Note: this error code is no longer emitted by the compiler\") {\n+            return true;\n+        }\n+        if s.starts_with(\"```\") {\n+            if s.contains(\"compile_fail\") && s.contains(err_code) {\n+                return true;\n+            } else if s.contains(\"(\") {\n+                // It's very likely that we can't actually make it fail compilation...\n+                can_be_ignored = true;\n+            }\n+        }\n+    }\n+    can_be_ignored\n }\n \n macro_rules! some_or_continue {\n@@ -41,7 +77,12 @@ macro_rules! some_or_continue {\n     };\n }\n \n-fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>, path: &Path) {\n+fn extract_error_codes(\n+    f: &str,\n+    error_codes: &mut HashMap<String, bool>,\n+    path: &Path,\n+    errors: &mut Vec<String>,\n+) {\n     let mut reached_no_explanation = false;\n \n     for line in f.lines() {\n@@ -55,10 +96,26 @@ fn extract_error_codes(f: &str, error_codes: &mut HashMap<String, bool>, path: &\n                 // Now we extract the tests from the markdown file!\n                 let md = some_or_continue!(s.splitn(2, \"include_str!(\\\"\").nth(1));\n                 let md_file_name = some_or_continue!(md.splitn(2, \"\\\")\").next());\n-                let path = some_or_continue!(path.parent()).join(md_file_name);\n+                let path = some_or_continue!(path.parent())\n+                    .join(md_file_name)\n+                    .canonicalize()\n+                    .expect(\"failed to canonicalize error explanation file path\");\n                 match read_to_string(&path) {\n                     Ok(content) => {\n-                        check_error_code_explanation(&content, error_codes, err_code);\n+                        if !IGNORE_EXPLANATION_CHECK.contains(&err_code.as_str())\n+                            && !check_if_error_code_is_test_in_explanation(&content, &err_code)\n+                        {\n+                            errors.push(format!(\n+                                \"`{}` doesn't use its own error code in compile_fail example\",\n+                                path.display(),\n+                            ));\n+                        }\n+                        if check_error_code_explanation(&content, error_codes, err_code) {\n+                            errors.push(format!(\n+                                \"`{}` uses invalid tag `compile-fail` instead of `compile_fail`\",\n+                                path.display(),\n+                            ));\n+                        }\n                     }\n                     Err(e) => {\n                         eprintln!(\"Couldn't read `{}`: {}\", path.display(), e);\n@@ -94,22 +151,24 @@ fn extract_error_codes_from_tests(f: &str, error_codes: &mut HashMap<String, boo\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n+    let mut errors = Vec::new();\n     println!(\"Checking which error codes lack tests...\");\n     let mut error_codes: HashMap<String, bool> = HashMap::new();\n     super::walk(path, &mut |path| super::filter_dirs(path), &mut |entry, contents| {\n         let file_name = entry.file_name();\n         if file_name == \"error_codes.rs\" {\n-            extract_error_codes(contents, &mut error_codes, entry.path());\n+            extract_error_codes(contents, &mut error_codes, entry.path(), &mut errors);\n         } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n             extract_error_codes_from_tests(contents, &mut error_codes);\n         }\n     });\n-    println!(\"Found {} error codes\", error_codes.len());\n+    if errors.is_empty() {\n+        println!(\"Found {} error codes\", error_codes.len());\n \n-    let mut errors = Vec::new();\n-    for (err_code, nb) in &error_codes {\n-        if !*nb && !WHITELIST.contains(&err_code.as_str()) {\n-            errors.push(format!(\"Error code {} needs to have at least one UI test!\", err_code));\n+        for (err_code, nb) in &error_codes {\n+            if !*nb && !WHITELIST.contains(&err_code.as_str()) {\n+                errors.push(format!(\"Error code {} needs to have at least one UI test!\", err_code));\n+            }\n         }\n     }\n     errors.sort();"}]}