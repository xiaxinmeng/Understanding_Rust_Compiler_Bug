{"sha": "a34749c28908997f8c58a646c9238c3dd8ea1103", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNDc0OWMyODkwODk5N2Y4YzU4YTY0NmM5MjM4YzNkZDhlYTExMDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T02:59:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:36:00Z"}, "message": "libsyntax: Stop parsing newtype enums", "tree": {"sha": "edfc29040f43e0334300e980453f18b4680864f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfc29040f43e0334300e980453f18b4680864f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34749c28908997f8c58a646c9238c3dd8ea1103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34749c28908997f8c58a646c9238c3dd8ea1103", "html_url": "https://github.com/rust-lang/rust/commit/a34749c28908997f8c58a646c9238c3dd8ea1103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34749c28908997f8c58a646c9238c3dd8ea1103/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07", "html_url": "https://github.com/rust-lang/rust/commit/1fcb0443cf2a5575691b70e7ef80e9720bc4bc07"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "ef858a2d5ebd19c45402b77df9febcb0621547ee", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34749c28908997f8c58a646c9238c3dd8ea1103/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34749c28908997f8c58a646c9238c3dd8ea1103/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=a34749c28908997f8c58a646c9238c3dd8ea1103", "patch": "@@ -54,6 +54,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteAssertion,\n     ObsoletePostFnTySigil,\n     ObsoleteBareFnType,\n+    ObsoleteNewtypeEnum,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -171,6 +172,10 @@ pub impl Parser {\n                 \"bare function type\",\n                 \"use `&fn` or `extern fn` instead\"\n             ),\n+            ObsoleteNewtypeEnum => (\n+                \"newtype enum\",\n+                \"instead of `enum Foo = int`, write `struct Foo(int)`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "99c1c2cb1feec9123acd32eb2c2182618868af2d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a34749c28908997f8c58a646c9238c3dd8ea1103/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34749c28908997f8c58a646c9238c3dd8ea1103/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a34749c28908997f8c58a646c9238c3dd8ea1103", "patch": "@@ -76,11 +76,8 @@ use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n-<<<<<<< HEAD\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n-=======\n-use parse::obsolete::{ObsoleteAssertion, ObsoleteBareFnType};\n->>>>>>> libsyntax: Stop parsing bare functions in preparation for switching them over\n+use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -651,14 +648,9 @@ pub impl Parser {\n         } else if self.eat_keyword(&~\"extern\") {\n             self.parse_ty_bare_fn()\n         } else if self.token_is_closure_keyword(&copy *self.token) {\n-<<<<<<< HEAD\n-            // self.warn(fmt!(\"Old-school closure keyword\"));\n-            self.parse_ty_closure(ast::BorrowedSigil, None)\n-=======\n-            let result = self.parse_ty_closure(None, None);\n+            let result = self.parse_ty_closure(ast::BorrowedSigil, None);\n             self.obsolete(*self.last_span, ObsoleteBareFnType);\n             result\n->>>>>>> libsyntax: Stop parsing bare functions in preparation for switching them over\n         } else if *self.token == token::MOD_SEP\n             || is_ident_or_path(&*self.token) {\n             let path = self.parse_path_with_tps(colons_before_params);\n@@ -3798,6 +3790,8 @@ pub impl Parser {\n                 vis: public,\n             });\n \n+            self.obsolete(*self.last_span, ObsoleteNewtypeEnum);\n+\n             return (\n                 id,\n                 item_enum("}]}