{"sha": "3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "node_id": "C_kwDOAAsO6NoAKDNjMGYzYjA0YjUyMTM0Yjg3MGJhZjJjYThjZWRjNTA2N2NjNWNiN2U", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-06T23:10:10Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:21Z"}, "message": "Only assume Stacked Borrows if -Zunsound-mir-opts is given", "tree": {"sha": "8ccd6cb6e2ec74e25ede887804d07a02d8dc801c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ccd6cb6e2ec74e25ede887804d07a02d8dc801c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "html_url": "https://github.com/rust-lang/rust/commit/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "111324e17cd5d6c1181ea592051583a88bbe0f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/111324e17cd5d6c1181ea592051583a88bbe0f18", "html_url": "https://github.com/rust-lang/rust/commit/111324e17cd5d6c1181ea592051583a88bbe0f18"}], "stats": {"total": 223, "additions": 137, "deletions": 86}, "files": [{"sha": "d87eb28970e4197ead01829b5bb2388fad002092", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -1320,6 +1320,15 @@ impl PlaceContext {\n         )\n     }\n \n+    /// Returns `true` if this place context represents an address-of.\n+    pub fn is_address_of(&self) -> bool {\n+        matches!(\n+            self,\n+            PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n+                | PlaceContext::MutatingUse(MutatingUseContext::AddressOf)\n+        )\n+    }\n+\n     /// Returns `true` if this place context represents a storage live or storage dead marker.\n     #[inline]\n     pub fn is_storage_marker(&self) -> bool {"}, {"sha": "9ae87418bc8b9ebe36a5b44d9eb179e61431c1cd", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -70,6 +70,7 @@ use std::fmt::{Debug, Formatter};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::tcx::PlaceTy;\n+use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n@@ -567,7 +568,17 @@ impl Map {\n         filter: impl FnMut(Ty<'tcx>) -> bool,\n     ) -> Self {\n         let mut map = Self::new();\n-        map.register_with_filter(tcx, body, 3, filter);\n+\n+        // If `-Zunsound-mir-opts` is given, tracking through references, and tracking of places\n+        // that have their reference taken is allowed. This would be \"unsound\" in the sense that\n+        // the correctness relies on an aliasing model similar to Stacked Borrows (which is\n+        // not yet guaranteed).\n+        if tcx.sess.opts.unstable_opts.unsound_mir_opts {\n+            map.register_with_filter(tcx, body, 3, filter, &[]);\n+        } else {\n+            map.register_with_filter(tcx, body, 0, filter, &escaped_places(body));\n+        }\n+\n         map\n     }\n \n@@ -577,6 +588,7 @@ impl Map {\n         body: &Body<'tcx>,\n         max_derefs: u32,\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n+        exclude: &[Place<'tcx>],\n     ) {\n         let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         let mut projection = Vec::new();\n@@ -589,6 +601,7 @@ impl Map {\n                 decl.ty,\n                 &mut filter,\n                 param_env,\n+                exclude,\n             );\n         }\n     }\n@@ -602,11 +615,18 @@ impl Map {\n         ty: Ty<'tcx>,\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n         param_env: ty::ParamEnv<'tcx>,\n+        exclude: &[Place<'tcx>],\n     ) {\n+        // This check could be improved.\n+        if exclude.contains(&Place { local, projection: tcx.intern_place_elems(projection) }) {\n+            return;\n+        }\n+\n         if filter(ty) {\n             // This might fail if `ty` is not scalar.\n             let _ = self.register_with_ty(local, projection, ty);\n         }\n+\n         if max_derefs > 0 {\n             if let Some(ty::TypeAndMut { ty: deref_ty, .. }) = ty.builtin_deref(false) {\n                 // References can only be tracked if the target is `!Freeze`.\n@@ -620,6 +640,7 @@ impl Map {\n                         deref_ty,\n                         filter,\n                         param_env,\n+                        exclude,\n                     );\n                     projection.pop();\n                 }\n@@ -632,7 +653,7 @@ impl Map {\n             }\n             projection.push(PlaceElem::Field(field, ty));\n             self.register_with_filter_rec(\n-                tcx, max_derefs, local, projection, ty, filter, param_env,\n+                tcx, max_derefs, local, projection, ty, filter, param_env, exclude,\n             );\n             projection.pop();\n         });\n@@ -751,6 +772,25 @@ impl PlaceInfo {\n     }\n }\n \n+/// Returns all places, that have their reference or address taken.\n+fn escaped_places<'tcx>(body: &Body<'tcx>) -> Vec<Place<'tcx>> {\n+    struct Collector<'tcx> {\n+        result: Vec<Place<'tcx>>,\n+    }\n+\n+    impl<'tcx> Visitor<'tcx> for Collector<'tcx> {\n+        fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n+            if context.is_borrow() || context.is_address_of() {\n+                self.result.push(*place);\n+            }\n+        }\n+    }\n+\n+    let mut collector = Collector { result: Vec::new() };\n+    collector.visit_body(body);\n+    collector.result\n+}\n+\n struct Children<'a> {\n     map: &'a Map,\n     next: Option<PlaceIndex>,"}, {"sha": "23c360ed87489c5b576dd8ab51b0e1c30a1cdef2", "filename": "src/test/mir-opt/dataflow-const-prop/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fcast.rs?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR cast.main.DataflowConstProp.diff\n fn main() {"}, {"sha": "1a5ded8cc0df6243032da17d86c9c56146f1af09", "filename": "src/test/mir-opt/dataflow-const-prop/if.main.DataflowConstProp.diff", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.main.DataflowConstProp.diff?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -3,118 +3,118 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/if.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/if.rs:+2:9: +2:10\n-      let mut _3: bool;                    // in scope 0 at $DIR/if.rs:+3:16: +3:24\n-      let mut _4: i32;                     // in scope 0 at $DIR/if.rs:+3:16: +3:19\n-      let mut _5: &i32;                    // in scope 0 at $DIR/if.rs:+3:17: +3:19\n-      let mut _7: i32;                     // in scope 0 at $DIR/if.rs:+4:13: +4:14\n-      let mut _9: bool;                    // in scope 0 at $DIR/if.rs:+6:16: +6:24\n-      let mut _10: i32;                    // in scope 0 at $DIR/if.rs:+6:16: +6:19\n-      let mut _11: &i32;                   // in scope 0 at $DIR/if.rs:+6:17: +6:19\n-      let mut _12: i32;                    // in scope 0 at $DIR/if.rs:+6:38: +6:39\n-      let mut _14: i32;                    // in scope 0 at $DIR/if.rs:+7:13: +7:14\n+      let _1: i32;                         // in scope 0 at $DIR/if.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/if.rs:+2:16: +2:24\n+      let mut _4: i32;                     // in scope 0 at $DIR/if.rs:+2:16: +2:19\n+      let mut _5: &i32;                    // in scope 0 at $DIR/if.rs:+2:17: +2:19\n+      let mut _7: i32;                     // in scope 0 at $DIR/if.rs:+3:13: +3:14\n+      let mut _9: bool;                    // in scope 0 at $DIR/if.rs:+5:16: +5:24\n+      let mut _10: i32;                    // in scope 0 at $DIR/if.rs:+5:16: +5:19\n+      let mut _11: &i32;                   // in scope 0 at $DIR/if.rs:+5:17: +5:19\n+      let mut _12: i32;                    // in scope 0 at $DIR/if.rs:+5:38: +5:39\n+      let mut _14: i32;                    // in scope 0 at $DIR/if.rs:+6:13: +6:14\n       scope 1 {\n-          debug a => _1;                   // in scope 1 at $DIR/if.rs:+2:9: +2:10\n-          let _2: i32;                     // in scope 1 at $DIR/if.rs:+3:9: +3:10\n+          debug a => _1;                   // in scope 1 at $DIR/if.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/if.rs:+2:9: +2:10\n           scope 2 {\n-              debug b => _2;               // in scope 2 at $DIR/if.rs:+3:9: +3:10\n-              let _6: i32;                 // in scope 2 at $DIR/if.rs:+4:9: +4:10\n+              debug b => _2;               // in scope 2 at $DIR/if.rs:+2:9: +2:10\n+              let _6: i32;                 // in scope 2 at $DIR/if.rs:+3:9: +3:10\n               scope 3 {\n-                  debug c => _6;           // in scope 3 at $DIR/if.rs:+4:9: +4:10\n-                  let _8: i32;             // in scope 3 at $DIR/if.rs:+6:9: +6:10\n+                  debug c => _6;           // in scope 3 at $DIR/if.rs:+3:9: +3:10\n+                  let _8: i32;             // in scope 3 at $DIR/if.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug d => _8;       // in scope 4 at $DIR/if.rs:+6:9: +6:10\n-                      let _13: i32;        // in scope 4 at $DIR/if.rs:+7:9: +7:10\n+                      debug d => _8;       // in scope 4 at $DIR/if.rs:+5:9: +5:10\n+                      let _13: i32;        // in scope 4 at $DIR/if.rs:+6:9: +6:10\n                       scope 5 {\n-                          debug e => _13;  // in scope 5 at $DIR/if.rs:+7:9: +7:10\n+                          debug e => _13;  // in scope 5 at $DIR/if.rs:+6:9: +6:10\n                       }\n                   }\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/if.rs:+2:9: +2:10\n-          _1 = const 1_i32;                // scope 0 at $DIR/if.rs:+2:13: +2:14\n-          StorageLive(_2);                 // scope 1 at $DIR/if.rs:+3:9: +3:10\n-          StorageLive(_3);                 // scope 1 at $DIR/if.rs:+3:16: +3:24\n-          StorageLive(_4);                 // scope 1 at $DIR/if.rs:+3:16: +3:19\n-          StorageLive(_5);                 // scope 1 at $DIR/if.rs:+3:17: +3:19\n-          _5 = &_1;                        // scope 1 at $DIR/if.rs:+3:17: +3:19\n--         _4 = (*_5);                      // scope 1 at $DIR/if.rs:+3:16: +3:19\n--         _3 = Eq(move _4, const 1_i32);   // scope 1 at $DIR/if.rs:+3:16: +3:24\n-+         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+3:16: +3:19\n-+         _3 = const true;                 // scope 1 at $DIR/if.rs:+3:16: +3:24\n-          StorageDead(_5);                 // scope 1 at $DIR/if.rs:+3:23: +3:24\n-          StorageDead(_4);                 // scope 1 at $DIR/if.rs:+3:23: +3:24\n--         switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+3:16: +3:24\n-+         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+3:16: +3:24\n+          StorageLive(_1);                 // scope 0 at $DIR/if.rs:+1:9: +1:10\n+          _1 = const 1_i32;                // scope 0 at $DIR/if.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 1 at $DIR/if.rs:+2:9: +2:10\n+          StorageLive(_3);                 // scope 1 at $DIR/if.rs:+2:16: +2:24\n+          StorageLive(_4);                 // scope 1 at $DIR/if.rs:+2:16: +2:19\n+          StorageLive(_5);                 // scope 1 at $DIR/if.rs:+2:17: +2:19\n+          _5 = &_1;                        // scope 1 at $DIR/if.rs:+2:17: +2:19\n+-         _4 = (*_5);                      // scope 1 at $DIR/if.rs:+2:16: +2:19\n+-         _3 = Eq(move _4, const 1_i32);   // scope 1 at $DIR/if.rs:+2:16: +2:24\n++         _4 = const 1_i32;                // scope 1 at $DIR/if.rs:+2:16: +2:19\n++         _3 = const true;                 // scope 1 at $DIR/if.rs:+2:16: +2:24\n+          StorageDead(_5);                 // scope 1 at $DIR/if.rs:+2:23: +2:24\n+          StorageDead(_4);                 // scope 1 at $DIR/if.rs:+2:23: +2:24\n+-         switchInt(move _3) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:24\n++         switchInt(const true) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if.rs:+2:16: +2:24\n       }\n   \n       bb1: {\n-          _2 = const 2_i32;                // scope 1 at $DIR/if.rs:+3:27: +3:28\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+3:13: +3:41\n+          _2 = const 2_i32;                // scope 1 at $DIR/if.rs:+2:27: +2:28\n+          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:41\n       }\n   \n       bb2: {\n-          _2 = const 3_i32;                // scope 1 at $DIR/if.rs:+3:38: +3:39\n-          goto -> bb3;                     // scope 1 at $DIR/if.rs:+3:13: +3:41\n+          _2 = const 3_i32;                // scope 1 at $DIR/if.rs:+2:38: +2:39\n+          goto -> bb3;                     // scope 1 at $DIR/if.rs:+2:13: +2:41\n       }\n   \n       bb3: {\n-          StorageDead(_3);                 // scope 1 at $DIR/if.rs:+3:40: +3:41\n-          StorageLive(_6);                 // scope 2 at $DIR/if.rs:+4:9: +4:10\n-          StorageLive(_7);                 // scope 2 at $DIR/if.rs:+4:13: +4:14\n--         _7 = _2;                         // scope 2 at $DIR/if.rs:+4:13: +4:14\n--         _6 = Add(move _7, const 1_i32);  // scope 2 at $DIR/if.rs:+4:13: +4:18\n-+         _7 = const 2_i32;                // scope 2 at $DIR/if.rs:+4:13: +4:14\n-+         _6 = const 3_i32;                // scope 2 at $DIR/if.rs:+4:13: +4:18\n-          StorageDead(_7);                 // scope 2 at $DIR/if.rs:+4:17: +4:18\n-          StorageLive(_8);                 // scope 3 at $DIR/if.rs:+6:9: +6:10\n-          StorageLive(_9);                 // scope 3 at $DIR/if.rs:+6:16: +6:24\n-          StorageLive(_10);                // scope 3 at $DIR/if.rs:+6:16: +6:19\n-          StorageLive(_11);                // scope 3 at $DIR/if.rs:+6:17: +6:19\n-          _11 = &_1;                       // scope 3 at $DIR/if.rs:+6:17: +6:19\n--         _10 = (*_11);                    // scope 3 at $DIR/if.rs:+6:16: +6:19\n--         _9 = Eq(move _10, const 1_i32);  // scope 3 at $DIR/if.rs:+6:16: +6:24\n-+         _10 = const 1_i32;               // scope 3 at $DIR/if.rs:+6:16: +6:19\n-+         _9 = const true;                 // scope 3 at $DIR/if.rs:+6:16: +6:24\n-          StorageDead(_11);                // scope 3 at $DIR/if.rs:+6:23: +6:24\n-          StorageDead(_10);                // scope 3 at $DIR/if.rs:+6:23: +6:24\n--         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+6:16: +6:24\n-+         switchInt(const true) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+6:16: +6:24\n+          StorageDead(_3);                 // scope 1 at $DIR/if.rs:+2:40: +2:41\n+          StorageLive(_6);                 // scope 2 at $DIR/if.rs:+3:9: +3:10\n+          StorageLive(_7);                 // scope 2 at $DIR/if.rs:+3:13: +3:14\n+-         _7 = _2;                         // scope 2 at $DIR/if.rs:+3:13: +3:14\n+-         _6 = Add(move _7, const 1_i32);  // scope 2 at $DIR/if.rs:+3:13: +3:18\n++         _7 = const 2_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:14\n++         _6 = const 3_i32;                // scope 2 at $DIR/if.rs:+3:13: +3:18\n+          StorageDead(_7);                 // scope 2 at $DIR/if.rs:+3:17: +3:18\n+          StorageLive(_8);                 // scope 3 at $DIR/if.rs:+5:9: +5:10\n+          StorageLive(_9);                 // scope 3 at $DIR/if.rs:+5:16: +5:24\n+          StorageLive(_10);                // scope 3 at $DIR/if.rs:+5:16: +5:19\n+          StorageLive(_11);                // scope 3 at $DIR/if.rs:+5:17: +5:19\n+          _11 = &_1;                       // scope 3 at $DIR/if.rs:+5:17: +5:19\n+-         _10 = (*_11);                    // scope 3 at $DIR/if.rs:+5:16: +5:19\n+-         _9 = Eq(move _10, const 1_i32);  // scope 3 at $DIR/if.rs:+5:16: +5:24\n++         _10 = const 1_i32;               // scope 3 at $DIR/if.rs:+5:16: +5:19\n++         _9 = const true;                 // scope 3 at $DIR/if.rs:+5:16: +5:24\n+          StorageDead(_11);                // scope 3 at $DIR/if.rs:+5:23: +5:24\n+          StorageDead(_10);                // scope 3 at $DIR/if.rs:+5:23: +5:24\n+-         switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:24\n++         switchInt(const true) -> [false: bb5, otherwise: bb4]; // scope 3 at $DIR/if.rs:+5:16: +5:24\n       }\n   \n       bb4: {\n--         _8 = _1;                         // scope 3 at $DIR/if.rs:+6:27: +6:28\n-+         _8 = const 1_i32;                // scope 3 at $DIR/if.rs:+6:27: +6:28\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+6:13: +6:45\n+-         _8 = _1;                         // scope 3 at $DIR/if.rs:+5:27: +5:28\n++         _8 = const 1_i32;                // scope 3 at $DIR/if.rs:+5:27: +5:28\n+          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:45\n       }\n   \n       bb5: {\n-          StorageLive(_12);                // scope 3 at $DIR/if.rs:+6:38: +6:39\n-          _12 = _1;                        // scope 3 at $DIR/if.rs:+6:38: +6:39\n-          _8 = Add(move _12, const 1_i32); // scope 3 at $DIR/if.rs:+6:38: +6:43\n-          StorageDead(_12);                // scope 3 at $DIR/if.rs:+6:42: +6:43\n-          goto -> bb6;                     // scope 3 at $DIR/if.rs:+6:13: +6:45\n+          StorageLive(_12);                // scope 3 at $DIR/if.rs:+5:38: +5:39\n+          _12 = _1;                        // scope 3 at $DIR/if.rs:+5:38: +5:39\n+          _8 = Add(move _12, const 1_i32); // scope 3 at $DIR/if.rs:+5:38: +5:43\n+          StorageDead(_12);                // scope 3 at $DIR/if.rs:+5:42: +5:43\n+          goto -> bb6;                     // scope 3 at $DIR/if.rs:+5:13: +5:45\n       }\n   \n       bb6: {\n-          StorageDead(_9);                 // scope 3 at $DIR/if.rs:+6:44: +6:45\n-          StorageLive(_13);                // scope 4 at $DIR/if.rs:+7:9: +7:10\n-          StorageLive(_14);                // scope 4 at $DIR/if.rs:+7:13: +7:14\n--         _14 = _8;                        // scope 4 at $DIR/if.rs:+7:13: +7:14\n--         _13 = Add(move _14, const 1_i32); // scope 4 at $DIR/if.rs:+7:13: +7:18\n-+         _14 = const 1_i32;               // scope 4 at $DIR/if.rs:+7:13: +7:14\n-+         _13 = const 2_i32;               // scope 4 at $DIR/if.rs:+7:13: +7:18\n-          StorageDead(_14);                // scope 4 at $DIR/if.rs:+7:17: +7:18\n-          _0 = const ();                   // scope 0 at $DIR/if.rs:+0:11: +8:2\n-          StorageDead(_13);                // scope 4 at $DIR/if.rs:+8:1: +8:2\n-          StorageDead(_8);                 // scope 3 at $DIR/if.rs:+8:1: +8:2\n-          StorageDead(_6);                 // scope 2 at $DIR/if.rs:+8:1: +8:2\n-          StorageDead(_2);                 // scope 1 at $DIR/if.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/if.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/if.rs:+8:2: +8:2\n+          StorageDead(_9);                 // scope 3 at $DIR/if.rs:+5:44: +5:45\n+          StorageLive(_13);                // scope 4 at $DIR/if.rs:+6:9: +6:10\n+          StorageLive(_14);                // scope 4 at $DIR/if.rs:+6:13: +6:14\n+-         _14 = _8;                        // scope 4 at $DIR/if.rs:+6:13: +6:14\n+-         _13 = Add(move _14, const 1_i32); // scope 4 at $DIR/if.rs:+6:13: +6:18\n++         _14 = const 1_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:14\n++         _13 = const 2_i32;               // scope 4 at $DIR/if.rs:+6:13: +6:18\n+          StorageDead(_14);                // scope 4 at $DIR/if.rs:+6:17: +6:18\n+          _0 = const ();                   // scope 0 at $DIR/if.rs:+0:11: +7:2\n+          StorageDead(_13);                // scope 4 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_8);                 // scope 3 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_6);                 // scope 2 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/if.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/if.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/if.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "cc41da2dc9a2c9481b78d807040a88b9048bf439", "filename": "src/test/mir-opt/dataflow-const-prop/if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fif.rs?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -1,8 +1,8 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR if.main.DataflowConstProp.diff\n fn main() {\n-    // This does not work (yet). Needs perhaps additional state to track unreachability.\n     let a = 1;\n     let b = if *&a == 1 { 2 } else { 3 };\n     let c = b + 1;"}, {"sha": "f500c827786f86c010742e96b1dd3d1db4d56ac4", "filename": "src/test/mir-opt/dataflow-const-prop/ref.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.main.DataflowConstProp.diff?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -37,7 +37,7 @@\n           StorageLive(_6);                 // scope 2 at $DIR/ref.rs:+3:16: +3:34\n           _6 = id() -> bb1;                // scope 2 at $DIR/ref.rs:+3:16: +3:34\n                                            // mir::Constant\n-                                           // + span: $DIR/ref.rs:7:16: 7:32\n+                                           // + span: $DIR/ref.rs:8:16: 8:32\n                                            // + literal: Const { ty: fn() -> u32 {id}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6c0e3063b0ab6494d48c767df2aed000565c1488", "filename": "src/test/mir-opt/dataflow-const-prop/ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref.rs?ref=3c0f3b04b52134b870baf2ca8cedc5067cc5cb7e", "patch": "@@ -1,4 +1,5 @@\n // unit-test: DataflowConstProp\n+// compile-flags: -Zunsound-mir-opts\n \n // EMIT_MIR ref.main.DataflowConstProp.diff\n fn main() {"}]}