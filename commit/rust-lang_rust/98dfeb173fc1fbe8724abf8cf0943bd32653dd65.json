{"sha": "98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZGZlYjE3M2ZjMWZiZTg3MjRhYmY4Y2YwOTQzYmQzMjY1M2RkNjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-19T00:40:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-20T03:23:23Z"}, "message": "core: clean up tests (mostly unused unsafe blocks)", "tree": {"sha": "01c687d6e306aa53acb698aaf33328bdd8a38927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01c687d6e306aa53acb698aaf33328bdd8a38927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "html_url": "https://github.com/rust-lang/rust/commit/98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15", "html_url": "https://github.com/rust-lang/rust/commit/c97bee26967bfb5a7dccbb1ae1572a6c4da38f15"}], "stats": {"total": 74, "additions": 31, "deletions": 43}, "files": [{"sha": "2656115dca2582ec8c5b9094eb0e635bad44d73c", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -112,8 +112,6 @@ pub mod streamp {\n \n     #[allow(non_camel_case_types)]\n     pub mod server {\n-        priv use core::kinds::Owned;\n-\n         #[allow(non_camel_case_types)]\n         pub type Open<T> = ::core::pipes::RecvPacket<super::Open<T>>;\n     }\n@@ -388,8 +386,6 @@ pub mod oneshot {\n \n     #[allow(non_camel_case_types)]\n     pub mod server {\n-        priv use core::kinds::Owned;\n-\n         #[allow(non_camel_case_types)]\n         pub type Oneshot<T> =\n             ::core::pipes::RecvPacketBuffered<super::Oneshot<T>,"}, {"sha": "77fbadf0bb7bb169ef9f85c6b96e79c468e656f1", "filename": "src/libcore/rt/sched/local_sched.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Flocal_sched.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -66,18 +66,16 @@ pub fn borrow(f: &fn(&mut Scheduler)) {\n /// Because this leaves the Scheduler in thread-local storage it is possible\n /// For the Scheduler pointer to be aliased\n pub unsafe fn unsafe_borrow() -> &mut Scheduler {\n-    unsafe {\n-        let key = tls_key();\n-        let mut void_sched: *mut c_void = tls::get(key);\n-        assert!(void_sched.is_not_null());\n-        {\n-            let void_sched_ptr = &mut void_sched;\n-            let sched: &mut ~Scheduler = {\n-                transmute::<&mut *mut c_void, &mut ~Scheduler>(void_sched_ptr)\n-            };\n-            let sched: &mut Scheduler = &mut **sched;\n-            return sched;\n-        }\n+    let key = tls_key();\n+    let mut void_sched: *mut c_void = tls::get(key);\n+    assert!(void_sched.is_not_null());\n+    {\n+        let void_sched_ptr = &mut void_sched;\n+        let sched: &mut ~Scheduler = {\n+            transmute::<&mut *mut c_void, &mut ~Scheduler>(void_sched_ptr)\n+        };\n+        let sched: &mut Scheduler = &mut **sched;\n+        return sched;\n     }\n }\n "}, {"sha": "b4a08c1492894d91d9559552ec12467fac1d14b5", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -388,7 +388,7 @@ fn connect_read() {\n                 vec_to_uv_buf(vec::from_elem(size, 0))\n             };\n             do stream_watcher.read_start(alloc)\n-                |stream_watcher, nread, buf, status| {\n+                |stream_watcher, _nread, buf, status| {\n \n                 let buf = vec_from_uv_buf(buf);\n                 rtdebug!(\"read cb!\");"}, {"sha": "21e75354e740c77087549fa4d483305be27958eb", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -64,9 +64,7 @@ fn test_simple_deep() {\n         if i == 0 { return }\n \n         for walk_stack |_frame| {\n-            unsafe {\n-                breakpoint();\n-            }\n+            breakpoint();\n         }\n         run(i - 1);\n     }"}, {"sha": "d72b4a71e2a6e0bbe010396c19ce8ea759f9bc8e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -3346,15 +3346,15 @@ mod tests {\n     #[test]\n     fn test_shift_byte() {\n         let mut s = ~\"ABC\";\n-        let b = unsafe { raw::shift_byte(&mut s) };\n+        let b = raw::shift_byte(&mut s);\n         assert!((s == ~\"BC\"));\n         assert!((b == 65u8));\n     }\n \n     #[test]\n     fn test_pop_byte() {\n         let mut s = ~\"ABC\";\n-        let b = unsafe { raw::pop_byte(&mut s) };\n+        let b = raw::pop_byte(&mut s);\n         assert!((s == ~\"AB\"));\n         assert!((b == 67u8));\n     }"}, {"sha": "6050aca6dc1f5fc83e13f90b8c8bab90c78f2f84", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dfeb173fc1fbe8724abf8cf0943bd32653dd65/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=98dfeb173fc1fbe8724abf8cf0943bd32653dd65", "patch": "@@ -150,32 +150,28 @@ fn test_tls_modify() {\n \n #[test]\n fn test_tls_crust_automorestack_memorial_bug() {\n-    unsafe {\n-        // This might result in a stack-canary clobber if the runtime fails to\n-        // set sp_limit to 0 when calling the cleanup extern - it might\n-        // automatically jump over to the rust stack, which causes next_c_sp\n-        // to get recorded as something within a rust stack segment. Then a\n-        // subsequent upcall (esp. for logging, think vsnprintf) would run on\n-        // a stack smaller than 1 MB.\n-        fn my_key(_x: @~str) { }\n-        do task::spawn {\n-            unsafe { local_data_set(my_key, @~\"hax\"); }\n-        }\n+    // This might result in a stack-canary clobber if the runtime fails to\n+    // set sp_limit to 0 when calling the cleanup extern - it might\n+    // automatically jump over to the rust stack, which causes next_c_sp\n+    // to get recorded as something within a rust stack segment. Then a\n+    // subsequent upcall (esp. for logging, think vsnprintf) would run on\n+    // a stack smaller than 1 MB.\n+    fn my_key(_x: @~str) { }\n+    do task::spawn {\n+        unsafe { local_data_set(my_key, @~\"hax\"); }\n     }\n }\n \n #[test]\n fn test_tls_multiple_types() {\n-    unsafe {\n-        fn str_key(_x: @~str) { }\n-        fn box_key(_x: @@()) { }\n-        fn int_key(_x: @int) { }\n-        do task::spawn {\n-            unsafe {\n-                local_data_set(str_key, @~\"string data\");\n-                local_data_set(box_key, @@());\n-                local_data_set(int_key, @42);\n-            }\n+    fn str_key(_x: @~str) { }\n+    fn box_key(_x: @@()) { }\n+    fn int_key(_x: @int) { }\n+    do task::spawn {\n+        unsafe {\n+            local_data_set(str_key, @~\"string data\");\n+            local_data_set(box_key, @@());\n+            local_data_set(int_key, @42);\n         }\n     }\n }"}]}