{"sha": "cd92bca49d947db62586a59bfeaed4254080e3e5", "node_id": "C_kwDOAAsO6NoAKGNkOTJiY2E0OWQ5NDdkYjYyNTg2YTU5YmZlYWVkNDI1NDA4MGUzZTU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-01-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-01-17T00:00:00Z"}, "message": "Omit needless funclet partitioning", "tree": {"sha": "79fad5137cec8edf0ec07ccc4a111063600afd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fad5137cec8edf0ec07ccc4a111063600afd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd92bca49d947db62586a59bfeaed4254080e3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd92bca49d947db62586a59bfeaed4254080e3e5", "html_url": "https://github.com/rust-lang/rust/commit/cd92bca49d947db62586a59bfeaed4254080e3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd92bca49d947db62586a59bfeaed4254080e3e5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "ebb15376c69fff6c88c78a78b6fb7fa05def0871", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/cd92bca49d947db62586a59bfeaed4254080e3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd92bca49d947db62586a59bfeaed4254080e3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=cd92bca49d947db62586a59bfeaed4254080e3e5", "patch": "@@ -39,7 +39,6 @@ enum MergingSucc {\n struct TerminatorCodegenHelper<'tcx> {\n     bb: mir::BasicBlock,\n     terminator: &'tcx mir::Terminator<'tcx>,\n-    funclet_bb: Option<mir::BasicBlock>,\n }\n \n impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n@@ -49,28 +48,24 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         &self,\n         fx: &'b mut FunctionCx<'a, 'tcx, Bx>,\n     ) -> Option<&'b Bx::Funclet> {\n-        let funclet_bb = self.funclet_bb?;\n-        if base::wants_msvc_seh(fx.cx.tcx().sess) {\n-            // If `landing_pad_for` hasn't been called yet to create the `Funclet`,\n-            // it has to be now. This may not seem necessary, as RPO should lead\n-            // to all the unwind edges being visited (and so to `landing_pad_for`\n-            // getting called for them), before building any of the blocks inside\n-            // the funclet itself - however, if MIR contains edges that end up not\n-            // being needed in the LLVM IR after monomorphization, the funclet may\n-            // be unreachable, and we don't have yet a way to skip building it in\n-            // such an eventuality (which may be a better solution than this).\n-            if fx.funclets[funclet_bb].is_none() {\n-                fx.landing_pad_for(funclet_bb);\n-            }\n-\n-            Some(\n-                fx.funclets[funclet_bb]\n-                    .as_ref()\n-                    .expect(\"landing_pad_for didn't also create funclets entry\"),\n-            )\n-        } else {\n-            None\n+        let cleanup_kinds = (&fx.cleanup_kinds).as_ref()?;\n+        let funclet_bb = cleanup_kinds[self.bb].funclet_bb(self.bb)?;\n+        // If `landing_pad_for` hasn't been called yet to create the `Funclet`,\n+        // it has to be now. This may not seem necessary, as RPO should lead\n+        // to all the unwind edges being visited (and so to `landing_pad_for`\n+        // getting called for them), before building any of the blocks inside\n+        // the funclet itself - however, if MIR contains edges that end up not\n+        // being needed in the LLVM IR after monomorphization, the funclet may\n+        // be unreachable, and we don't have yet a way to skip building it in\n+        // such an eventuality (which may be a better solution than this).\n+        if fx.funclets[funclet_bb].is_none() {\n+            fx.landing_pad_for(funclet_bb);\n         }\n+        Some(\n+            fx.funclets[funclet_bb]\n+                .as_ref()\n+                .expect(\"landing_pad_for didn't also create funclets entry\"),\n+        )\n     }\n \n     /// Get a basic block (creating it if necessary), possibly with cleanup\n@@ -104,23 +99,24 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         fx: &mut FunctionCx<'a, 'tcx, Bx>,\n         target: mir::BasicBlock,\n     ) -> (bool, bool) {\n-        let target_funclet = fx.cleanup_kinds[target].funclet_bb(target);\n-        let (needs_landing_pad, is_cleanupret) = match (self.funclet_bb, target_funclet) {\n-            (None, None) => (false, false),\n-            (None, Some(_)) => (true, false),\n-            (Some(_), None) => {\n-                let span = self.terminator.source_info.span;\n-                span_bug!(span, \"{:?} - jump out of cleanup?\", self.terminator);\n-            }\n-            (Some(f), Some(t_f)) => {\n-                if f == t_f || !base::wants_msvc_seh(fx.cx.tcx().sess) {\n-                    (false, false)\n-                } else {\n-                    (true, true)\n+        if let Some(ref cleanup_kinds) = fx.cleanup_kinds {\n+            let funclet_bb = cleanup_kinds[self.bb].funclet_bb(self.bb);\n+            let target_funclet = cleanup_kinds[target].funclet_bb(target);\n+            let (needs_landing_pad, is_cleanupret) = match (funclet_bb, target_funclet) {\n+                (None, None) => (false, false),\n+                (None, Some(_)) => (true, false),\n+                (Some(f), Some(t_f)) => (f != t_f, f != t_f),\n+                (Some(_), None) => {\n+                    let span = self.terminator.source_info.span;\n+                    span_bug!(span, \"{:?} - jump out of cleanup?\", self.terminator);\n                 }\n-            }\n-        };\n-        (needs_landing_pad, is_cleanupret)\n+            };\n+            (needs_landing_pad, is_cleanupret)\n+        } else {\n+            let needs_landing_pad = !fx.mir[self.bb].is_cleanup && fx.mir[target].is_cleanup;\n+            let is_cleanupret = false;\n+            (needs_landing_pad, is_cleanupret)\n+        }\n     }\n \n     fn funclet_br<Bx: BuilderMethods<'a, 'tcx>>(\n@@ -1253,9 +1249,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> MergingSucc {\n         debug!(\"codegen_terminator: {:?}\", terminator);\n \n-        // Create the cleanup bundle, if needed.\n-        let funclet_bb = self.cleanup_kinds[bb].funclet_bb(bb);\n-        let helper = TerminatorCodegenHelper { bb, terminator, funclet_bb };\n+        let helper = TerminatorCodegenHelper { bb, terminator };\n \n         let mergeable_succ = || {\n             // Note: any call to `switch_to_block` will invalidate a `true` value"}, {"sha": "bb265b8289ed977364b8126ffbba2459eec18f2d", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd92bca49d947db62586a59bfeaed4254080e3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd92bca49d947db62586a59bfeaed4254080e3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=cd92bca49d947db62586a59bfeaed4254080e3e5", "patch": "@@ -1,3 +1,4 @@\n+use crate::base;\n use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -58,7 +59,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     cached_llbbs: IndexVec<mir::BasicBlock, CachedLlbb<Bx::BasicBlock>>,\n \n     /// The funclet status of each basic block\n-    cleanup_kinds: IndexVec<mir::BasicBlock, analyze::CleanupKind>,\n+    cleanup_kinds: Option<IndexVec<mir::BasicBlock, analyze::CleanupKind>>,\n \n     /// When targeting MSVC, this stores the cleanup info for each funclet BB.\n     /// This is initialized at the same time as the `landing_pads` entry for the\n@@ -166,7 +167,9 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         start_bx.set_personality_fn(cx.eh_personality());\n     }\n \n-    let cleanup_kinds = analyze::cleanup_kinds(&mir);\n+    let cleanup_kinds =\n+        if base::wants_msvc_seh(cx.tcx().sess) { Some(analyze::cleanup_kinds(&mir)) } else { None };\n+\n     let cached_llbbs: IndexVec<mir::BasicBlock, CachedLlbb<Bx::BasicBlock>> =\n         mir.basic_blocks\n             .indices()"}]}