{"sha": "8edbbacbcac3fe88995f02e08789ca458667b6b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZGJiYWNiY2FjM2ZlODg5OTVmMDJlMDg3ODljYTQ1ODY2N2I2YjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T21:37:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-10T18:33:31Z"}, "message": "syntax: Remove `SyntaxExtension::DeclMacro`\n\nIt's a less powerful duplicate of `SyntaxExtension::NormalTT`", "tree": {"sha": "b8b62be192a1d4376e021199263a9b1846e03c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b62be192a1d4376e021199263a9b1846e03c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8edbbacbcac3fe88995f02e08789ca458667b6b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8edbbacbcac3fe88995f02e08789ca458667b6b4", "html_url": "https://github.com/rust-lang/rust/commit/8edbbacbcac3fe88995f02e08789ca458667b6b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8edbbacbcac3fe88995f02e08789ca458667b6b4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb925a91f4fafb9056d181dd620937992ad6c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb925a91f4fafb9056d181dd620937992ad6c1b", "html_url": "https://github.com/rust-lang/rust/commit/edb925a91f4fafb9056d181dd620937992ad6c1b"}], "stats": {"total": 183, "additions": 79, "deletions": 104}, "files": [{"sha": "f4b4bcb043c42ee3f3dd7677e4ee9f942d842800", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -6,6 +6,7 @@ use rustc::util::nodemap::FxHashMap;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::MacroExpanderFn;\n+use syntax::ext::hygiene::Transparency;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -84,33 +85,14 @@ impl<'a> Registry<'a> {\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n-    pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n+    pub fn register_syntax_extension(&mut self, name: ast::Name, mut extension: SyntaxExtension) {\n         if name == sym::macro_rules {\n             panic!(\"user-defined macros may not be named `macro_rules`\");\n         }\n-        self.syntax_exts.push((name, match extension {\n-            NormalTT {\n-                expander,\n-                def_info: _,\n-                allow_internal_unstable,\n-                allow_internal_unsafe,\n-                local_inner_macros,\n-                unstable_feature,\n-                edition,\n-            } => {\n-                let nid = ast::CRATE_NODE_ID;\n-                NormalTT {\n-                    expander,\n-                    def_info: Some((nid, self.krate_span)),\n-                    allow_internal_unstable,\n-                    allow_internal_unsafe,\n-                    local_inner_macros,\n-                    unstable_feature,\n-                    edition,\n-                }\n-            }\n-            _ => extension,\n-        }));\n+        if let NormalTT { def_info: ref mut def_info @ None, .. } = extension {\n+            *def_info = Some((ast::CRATE_NODE_ID, self.krate_span));\n+        }\n+        self.syntax_exts.push((name, extension));\n     }\n \n     /// Register a macro of the usual kind.\n@@ -122,6 +104,7 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), NormalTT {\n             expander: Box::new(expander),\n             def_info: None,\n+            transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,"}, {"sha": "b5af7bb74a644e4046224b977b15fc6b74f356c4", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -242,8 +242,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn check_unused_macros(&self) {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n-                SyntaxExtension::NormalTT { def_info, .. } |\n-                SyntaxExtension::DeclMacro { def_info, .. } => def_info,\n+                SyntaxExtension::NormalTT { def_info, .. } => def_info,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {"}, {"sha": "1e824e6fdfba0da05170f50645f4a7a85684800e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -433,7 +433,7 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n             if let Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), _) = res {\n                 // skip proc-macro stubs, they'll cause `get_macro` to crash\n             } else {\n-                if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(res) {\n+                if let SyntaxExtension::NormalTT { .. } = *resolver.get_macro(res) {\n                     return Some(res.map_id(|_| panic!(\"unexpected id\")));\n                 }\n             }"}, {"sha": "7ac92224f76fb166733b0613175e4c348178f66d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -579,6 +579,7 @@ pub enum SyntaxExtension {\n     NormalTT {\n         expander: Box<dyn TTMacroExpander + sync::Sync + sync::Send>,\n         def_info: Option<(ast::NodeId, Span)>,\n+        transparency: Transparency,\n         /// Whether the contents of the macro can\n         /// directly use `#[unstable]` things.\n         ///\n@@ -605,21 +606,12 @@ pub enum SyntaxExtension {\n \n     /// An attribute-like procedural macro that derives a builtin trait.\n     BuiltinDerive(Box<dyn MultiItemModifier + sync::Sync + sync::Send>),\n-\n-    /// A declarative macro, e.g., `macro m() {}`.\n-    DeclMacro {\n-        expander: Box<dyn TTMacroExpander + sync::Sync + sync::Send>,\n-        def_info: Option<(ast::NodeId, Span)>,\n-        is_transparent: bool,\n-        edition: Edition,\n-    }\n }\n \n impl SyntaxExtension {\n     /// Returns which kind of macro calls this syntax extension.\n     pub fn kind(&self) -> MacroKind {\n         match *self {\n-            SyntaxExtension::DeclMacro { .. } |\n             SyntaxExtension::NormalTT { .. } |\n             SyntaxExtension::ProcMacro { .. } =>\n                 MacroKind::Bang,\n@@ -635,19 +627,19 @@ impl SyntaxExtension {\n \n     pub fn default_transparency(&self) -> Transparency {\n         match *self {\n+            SyntaxExtension::NormalTT { transparency, .. } => transparency,\n             SyntaxExtension::ProcMacro { .. } |\n             SyntaxExtension::AttrProcMacro(..) |\n             SyntaxExtension::ProcMacroDerive(..) |\n-            SyntaxExtension::DeclMacro { is_transparent: false, .. } => Transparency::Opaque,\n-            SyntaxExtension::DeclMacro { is_transparent: true, .. } => Transparency::Transparent,\n-            _ => Transparency::SemiTransparent,\n+            SyntaxExtension::NonMacroAttr { .. } => Transparency::Opaque,\n+            SyntaxExtension::MultiModifier(..) |\n+            SyntaxExtension::BuiltinDerive(..) => Transparency::SemiTransparent,\n         }\n     }\n \n     pub fn edition(&self, default_edition: Edition) -> Edition {\n         match *self {\n             SyntaxExtension::NormalTT { edition, .. } |\n-            SyntaxExtension::DeclMacro { edition, .. } |\n             SyntaxExtension::ProcMacro { edition, .. } |\n             SyntaxExtension::AttrProcMacro(.., edition) |\n             SyntaxExtension::ProcMacroDerive(.., edition) => edition,"}, {"sha": "a68103de90f1aa8900cf857719b013fc0213a64a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -747,16 +747,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         let opt_expanded = match *ext {\n-            DeclMacro { ref expander, def_info, edition, .. } => {\n-                if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n-                                                                    None, false, false, None,\n-                                                                    edition) {\n-                    dummy_span\n-                } else {\n-                    kind.make_from(expander.expand(self.cx, span, mac.node.stream(), None))\n-                }\n-            }\n-\n             NormalTT {\n                 ref expander,\n                 def_info,\n@@ -765,6 +755,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 local_inner_macros,\n                 unstable_feature,\n                 edition,\n+                ..\n             } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n                                                                     allow_internal_unstable.clone(),"}, {"sha": "bbf733cfbfe95e96ea0a2ea7ebea95567167c814", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 55, "deletions": 54, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -3,6 +3,7 @@ use crate::edition::Edition;\n use crate::ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use crate::ext::base::{NormalTT, TTMacroExpander};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n+use crate::ext::hygiene::Transparency;\n use crate::ext::tt::macro_parser::{Success, Error, Failure};\n use crate::ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use crate::ext::tt::macro_parser::{parse, parse_failure_msg};\n@@ -374,65 +375,65 @@ pub fn compile(\n         valid,\n     });\n \n-    if body.legacy {\n-        let allow_internal_unstable = attr::find_by_name(&def.attrs, sym::allow_internal_unstable)\n-            .map(|attr| attr\n-                .meta_item_list()\n-                .map(|list| list.iter()\n-                    .filter_map(|it| {\n-                        let name = it.ident().map(|ident| ident.name);\n-                        if name.is_none() {\n-                            sess.span_diagnostic.span_err(it.span(),\n-                                \"allow internal unstable expects feature names\")\n-                        }\n-                        name\n-                    })\n-                    .collect::<Vec<Symbol>>().into()\n-                )\n-                .unwrap_or_else(|| {\n-                    sess.span_diagnostic.span_warn(\n-                        attr.span, \"allow_internal_unstable expects list of feature names. In the \\\n-                        future this will become a hard error. Please use `allow_internal_unstable(\\\n-                        foo, bar)` to only allow the `foo` and `bar` features\",\n-                    );\n-                    vec![sym::allow_internal_unstable_backcompat_hack].into()\n+    let transparency = if attr::contains_name(&def.attrs, sym::rustc_transparent_macro) {\n+        Transparency::Transparent\n+    } else if body.legacy {\n+        Transparency::SemiTransparent\n+    } else {\n+        Transparency::Opaque\n+    };\n+\n+    let allow_internal_unstable = attr::find_by_name(&def.attrs, sym::allow_internal_unstable)\n+        .map(|attr| attr\n+            .meta_item_list()\n+            .map(|list| list.iter()\n+                .filter_map(|it| {\n+                    let name = it.ident().map(|ident| ident.name);\n+                    if name.is_none() {\n+                        sess.span_diagnostic.span_err(it.span(),\n+                            \"allow internal unstable expects feature names\")\n+                    }\n+                    name\n                 })\n-            );\n-        let allow_internal_unsafe = attr::contains_name(&def.attrs, sym::allow_internal_unsafe);\n-        let mut local_inner_macros = false;\n-        if let Some(macro_export) = attr::find_by_name(&def.attrs, sym::macro_export) {\n-            if let Some(l) = macro_export.meta_item_list() {\n-                local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n-            }\n-        }\n+                .collect::<Vec<Symbol>>().into()\n+            )\n+            .unwrap_or_else(|| {\n+                sess.span_diagnostic.span_warn(\n+                    attr.span, \"allow_internal_unstable expects list of feature names. In the \\\n+                    future this will become a hard error. Please use `allow_internal_unstable(\\\n+                    foo, bar)` to only allow the `foo` and `bar` features\",\n+                );\n+                vec![sym::allow_internal_unstable_backcompat_hack].into()\n+            })\n+        );\n \n-        let unstable_feature = attr::find_stability(&sess,\n-                                                    &def.attrs, def.span).and_then(|stability| {\n-            if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n-                Some((stability.feature, issue))\n-            } else {\n-                None\n-            }\n-        });\n-\n-        NormalTT {\n-            expander,\n-            def_info: Some((def.id, def.span)),\n-            allow_internal_unstable,\n-            allow_internal_unsafe,\n-            local_inner_macros,\n-            unstable_feature,\n-            edition,\n+    let allow_internal_unsafe = attr::contains_name(&def.attrs, sym::allow_internal_unsafe);\n+\n+    let mut local_inner_macros = false;\n+    if let Some(macro_export) = attr::find_by_name(&def.attrs, sym::macro_export) {\n+        if let Some(l) = macro_export.meta_item_list() {\n+            local_inner_macros = attr::list_contains_name(&l, sym::local_inner_macros);\n         }\n-    } else {\n-        let is_transparent = attr::contains_name(&def.attrs, sym::rustc_transparent_macro);\n+    }\n \n-        SyntaxExtension::DeclMacro {\n-            expander,\n-            def_info: Some((def.id, def.span)),\n-            is_transparent,\n-            edition,\n+    let unstable_feature = attr::find_stability(&sess,\n+                                                &def.attrs, def.span).and_then(|stability| {\n+        if let attr::StabilityLevel::Unstable { issue, .. } = stability.level {\n+            Some((stability.feature, issue))\n+        } else {\n+            None\n         }\n+    });\n+\n+    NormalTT {\n+        expander,\n+        def_info: Some((def.id, def.span)),\n+        transparency,\n+        allow_internal_unstable,\n+        allow_internal_unsafe,\n+        local_inner_macros,\n+        unstable_feature,\n+        edition,\n     }\n }\n "}, {"sha": "7d6abd14a4a007d608f3b1534dc22ba8fcd433c8", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -42,6 +42,7 @@ pub mod proc_macro_impl;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension, MultiModifier};\n+use syntax::ext::hygiene::Transparency;\n use syntax::edition::Edition;\n use syntax::symbol::{sym, Symbol};\n \n@@ -59,6 +60,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                      NormalTT {\n                         expander: Box::new($f as MacroExpanderFn),\n                         def_info: None,\n+                        transparency: Transparency::SemiTransparent,\n                         allow_internal_unstable: None,\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n@@ -102,6 +104,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                 expander: Box::new(format::expand_format_args),\n                 def_info: None,\n+                transparency: Transparency::SemiTransparent,\n                 allow_internal_unstable: Some(vec![sym::fmt_internals].into()),\n                 allow_internal_unsafe: false,\n                 local_inner_macros: false,\n@@ -112,6 +115,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                  expander: Box::new(format::expand_format_args_nl),\n                  def_info: None,\n+                 transparency: Transparency::SemiTransparent,\n                  allow_internal_unstable: Some(vec![sym::fmt_internals].into()),\n                  allow_internal_unsafe: false,\n                  local_inner_macros: false,"}, {"sha": "cf12b80848436be298fd7e586c5346206d545203", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -13,6 +13,7 @@ use syntax::ast;\n use syntax::ext::hygiene;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n+use syntax::ext::hygiene::Transparency;\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n@@ -43,6 +44,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         NormalTT {\n             expander: Box::new(Expander { args: args, }),\n             def_info: None,\n+            transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,"}, {"sha": "93cc97d45830b2a9ae9a651c535eb272fb4be198", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbacbcac3fe88995f02e08789ca458667b6b4/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=8edbbacbcac3fe88995f02e08789ca458667b6b4", "patch": "@@ -1,6 +1,9 @@\n error: no rules expected the token `enum E { }`\n   --> $DIR/nonterminal-matching.rs:19:10\n    |\n+LL |     macro n(a $nt_item b) {\n+   |     --------------------- when calling this macro\n+...\n LL |     n!(a $nt_item b);\n    |          ^^^^^^^^ no rules expected this token in macro call\n ..."}]}