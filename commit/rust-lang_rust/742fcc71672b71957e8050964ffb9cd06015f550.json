{"sha": "742fcc71672b71957e8050964ffb9cd06015f550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmZjYzcxNjcyYjcxOTU3ZTgwNTA5NjRmZmI5Y2QwNjAxNWY1NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-01T15:24:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-01T15:24:26Z"}, "message": "Auto merge of #57586 - Aaron1011:feature/pub-priv-dep, r=petrochenkov\n\nImplement public/private dependency feature\n\nImplements https://github.com/rust-lang/rust/issues/44663\n\nThe core implementation is done - however, there are a few issues that still need to be resolved:\n\n- [x] The `EXTERNAL_PRIVATE_DEPENDENCY` lint currently does notthing when the `public_private_dependencies` is not enabled. Should mentioning the lint (in an `allow` or `deny` attribute) be an error if the feature is not enabled? (Resolved- the feature was removed)\n- [x] Crates with the name `core` and `std` are always marked public, without the need to explcitily specify them on the command line. Is this what we want to do? Do we want to allow`no_std`/`no_core` crates to explicitly control this in some way? (Resolved - private crates are now explicitly specified)\n- [x] Should I add additional UI tests? (Resolved - added more tests)\n- [x] Does it make sense to be able to allow/deny the `EXTERNAL_PRIVATE_DEPENDENCY` on an individual item? (Resolved - this is implemented)", "tree": {"sha": "156a18d407fdb005553eed05e61af2329734fc4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156a18d407fdb005553eed05e61af2329734fc4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742fcc71672b71957e8050964ffb9cd06015f550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742fcc71672b71957e8050964ffb9cd06015f550", "html_url": "https://github.com/rust-lang/rust/commit/742fcc71672b71957e8050964ffb9cd06015f550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742fcc71672b71957e8050964ffb9cd06015f550/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a86879515ed1677196f4d3585ec7a5935d2712", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a86879515ed1677196f4d3585ec7a5935d2712", "html_url": "https://github.com/rust-lang/rust/commit/c9a86879515ed1677196f4d3585ec7a5935d2712"}, {"sha": "369faaeaffa1b960f8260a1905b1fc34f33a23f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/369faaeaffa1b960f8260a1905b1fc34f33a23f6", "html_url": "https://github.com/rust-lang/rust/commit/369faaeaffa1b960f8260a1905b1fc34f33a23f6"}], "stats": {"total": 185, "additions": 183, "deletions": 2}, "files": [{"sha": "1ac2dfe25c395fbda0659cc57740bdef531a3b1e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -2878,6 +2878,7 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "3fe544d690640d62c0ffbaf9e12c07b58a9ee535", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -125,6 +125,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n+declare_lint! {\n+    pub EXPORTED_PRIVATE_DEPENDENCIES,\n+    Warn,\n+    \"public interface leaks type from a private dependency\"\n+}\n+\n declare_lint! {\n     pub PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n     Deny,\n@@ -405,6 +411,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n+            EXPORTED_PRIVATE_DEPENDENCIES,\n             PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n             INVALID_TYPE_PARAM_DEFAULT,\n             CONST_ERR,"}, {"sha": "86f676fbf888a2ad0ae260fc3875ed7776596c70", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -411,6 +411,10 @@ top_level_options!(\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [UNTRACKED],\n \n         edition: Edition [TRACKED],\n+\n+        // The list of crates to consider private when\n+        // checking leaked private dependency types in public interfaces\n+        extern_private: Vec<String> [TRACKED],\n     }\n );\n \n@@ -606,6 +610,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n+            extern_private: Vec::new()\n         }\n     }\n }\n@@ -1724,6 +1729,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME=PATH\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"extern-private\",\n+            \"Specify where an extern rust library is located, marking it as a private dependency\",\n+            \"NAME=PATH\",\n+        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -1905,6 +1916,7 @@ pub fn build_session_options_and_crate_config(\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n+\n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n     let mut debugging_opts = build_debugging_options(matches, error_format);\n@@ -2218,8 +2230,18 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if matches.opt_present(\"extern-private\") && !debugging_opts.unstable_options {\n+        early_error(\n+            ErrorOutputType::default(),\n+            \"'--extern-private' is unstable and only \\\n+            available for nightly builds of rustc.\"\n+        )\n+    }\n+\n+    let extern_private = matches.opt_strs(\"extern-private\");\n+\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n-    for arg in &matches.opt_strs(\"extern\") {\n+    for arg in matches.opt_strs(\"extern\").into_iter().chain(matches.opt_strs(\"extern-private\")) {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().unwrap_or_else(||\n             early_error(error_format, \"--extern value must not be empty\"));\n@@ -2287,6 +2309,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n+            extern_private\n         },\n         cfg,\n     )\n@@ -2460,6 +2483,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n+    impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);"}, {"sha": "dfc4e5b5db45d2bcfe39b2ddf52ebee4c5182c7d", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -13,4 +13,5 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+log = \"0.4\""}, {"sha": "1bdc22b37d73b804409a27052d716ad0d8696057", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -9,6 +9,7 @@\n \n #[macro_use] extern crate rustc;\n #[macro_use] extern crate syntax;\n+#[macro_use] extern crate log;\n extern crate rustc_typeck;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n@@ -1451,13 +1452,15 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    item_id: ast::NodeId,\n     item_def_id: DefId,\n     span: Span,\n     /// The visitor checks that each component type is at least this visible.\n     required_visibility: ty::Visibility,\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n+    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1492,6 +1495,16 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     }\n \n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n+        if self.leaks_private_dep(def_id) {\n+            self.tcx.lint_node(lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,\n+                               self.item_id,\n+                               self.span,\n+                               &format!(\"{} `{}` from private dependency '{}' in public \\\n+                                         interface\", kind, descr,\n+                                         self.tcx.crate_name(def_id.krate)));\n+\n+        }\n+\n         let node_id = match self.tcx.hir().as_local_node_id(def_id) {\n             Some(node_id) => node_id,\n             None => return false,\n@@ -1514,9 +1527,23 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                 self.tcx.lint_node(lint::builtin::PRIVATE_IN_PUBLIC, node_id, self.span,\n                                    &format!(\"{} (error {})\", msg, err_code));\n             }\n+\n         }\n+\n         false\n     }\n+\n+    /// An item is 'leaked' from a private dependency if all\n+    /// of the following are true:\n+    /// 1. It's contained within a public type\n+    /// 2. It comes from a private crate\n+    fn leaks_private_dep(&self, item_id: DefId) -> bool {\n+        let ret = self.required_visibility == ty::Visibility::Public &&\n+            self.private_crates.contains(&item_id.krate);\n+\n+        debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n+        return ret;\n+    }\n }\n \n impl<'a, 'tcx> DefIdVisitor<'a, 'tcx> for SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1530,6 +1557,7 @@ struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a NodeSet,\n+    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1560,12 +1588,14 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n \n         SearchInterfaceForPrivateItemsVisitor {\n             tcx: self.tcx,\n+            item_id,\n             item_def_id: self.tcx.hir().local_def_id(item_id),\n             span: self.tcx.hir().span(item_id),\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n             in_assoc_ty: false,\n+            private_crates: self.private_crates.clone()\n         }\n     }\n \n@@ -1690,6 +1720,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Lrc<AccessLevels> {\n fn check_mod_privacy<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n+\n     // Check privacy of names not checked in previous compilation stages.\n     let mut visitor = NamePrivacyVisitor {\n         tcx,\n@@ -1725,6 +1756,12 @@ fn privacy_access_levels<'tcx>(\n         tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n     }\n \n+    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n+        .flat_map(|c| {\n+            tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n+        }).collect();\n+\n+\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n@@ -1767,6 +1804,7 @@ fn privacy_access_levels<'tcx>(\n             tcx,\n             has_pub_restricted,\n             old_error_set: &visitor.old_error_set,\n+            private_crates\n         };\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }"}, {"sha": "3ebafd953addfacc20162221d1900dd4b04235b0", "filename": "src/test/ui/feature-gates/auxiliary/pub_dep.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fpub_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fpub_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fpub_dep.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1 @@\n+pub struct PubType;"}, {"sha": "b8fb4b8dc19da8022dfad013f6b5654e137fa8ee", "filename": "src/test/ui/feature-gates/feature-gate-public_private_dependencies.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-public_private_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-public_private_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-public_private_dependencies.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1,20 @@\n+// This test is different from other feature gate tests.\n+// Instead of checking that an error occurs without the feature gate,\n+// it checks that *no* errors/warnings occurs without the feature gate.\n+// This is due to the fact that 'public_private_dependencies' just enables\n+// a lint, so disabling it shouldn't cause any code to stop compiling.\n+\n+// run-pass\n+// aux-build:pub_dep.rs\n+\n+// Without ![feature(public_private_dependencies)],\n+// this should do nothing/\n+#![deny(exported_private_dependencies)]\n+\n+extern crate pub_dep;\n+\n+pub struct Foo {\n+    pub field: pub_dep::PubType\n+}\n+\n+fn main() {}"}, {"sha": "e7afeb84fb4f4801d0e6e6ecc19e1b360bc02ee4", "filename": "src/test/ui/privacy/pub-priv-dep/auxiliary/priv_dep.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpriv_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpriv_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpriv_dep.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1,2 @@\n+pub struct OtherType;\n+pub trait OtherTrait {}"}, {"sha": "3ebafd953addfacc20162221d1900dd4b04235b0", "filename": "src/test/ui/privacy/pub-priv-dep/auxiliary/pub_dep.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpub_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpub_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fauxiliary%2Fpub_dep.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1 @@\n+pub struct PubType;"}, {"sha": "9ebc96017fe9c659328db839c5e890ffe4722b4c", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1,46 @@\n+ // aux-build:priv_dep.rs\n+ // aux-build:pub_dep.rs\n+ // compile-flags: --extern-private priv_dep\n+#![deny(exported_private_dependencies)]\n+\n+// This crate is a private dependency\n+extern crate priv_dep;\n+// This crate is a public dependenct\n+extern crate pub_dep;\n+\n+use priv_dep::{OtherType, OtherTrait};\n+use pub_dep::PubType;\n+\n+// Type from private dependency used in private\n+// type - this is fine\n+struct PrivateType {\n+    field: OtherType\n+}\n+\n+pub struct PublicType {\n+    pub field: OtherType,\n+    //~^ ERROR type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n+    priv_field: OtherType, // Private field - this is fine\n+    pub other_field: PubType // Type from public dependency - this is fine\n+}\n+\n+impl PublicType {\n+    pub fn pub_fn(param: OtherType) {}\n+    //~^ ERROR type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n+\n+    fn priv_fn(param: OtherType) {}\n+}\n+\n+pub trait MyPubTrait {\n+    type Foo: OtherTrait;\n+}\n+//~^^^ ERROR trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n+\n+pub struct AllowedPrivType {\n+    #[allow(exported_private_dependencies)]\n+    pub allowed: OtherType\n+}\n+\n+\n+\n+fn main() {}"}, {"sha": "b31efdbd781dc20168516c2f5be695a31eaed762", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1,28 @@\n+error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n+  --> $DIR/pub-priv1.rs:21:5\n+   |\n+LL |     pub field: OtherType,\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/pub-priv1.rs:4:9\n+   |\n+LL | #![deny(exported_private_dependencies)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n+  --> $DIR/pub-priv1.rs:28:5\n+   |\n+LL |     pub fn pub_fn(param: OtherType) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n+  --> $DIR/pub-priv1.rs:34:1\n+   |\n+LL | / pub trait MyPubTrait {\n+LL | |     type Foo: OtherTrait;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e25aa93a02e605da455100732a58ecffed68e98b", "filename": "src/test/ui/privacy/pub-priv-dep/std-pub.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fstd-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742fcc71672b71957e8050964ffb9cd06015f550/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fstd-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fstd-pub.rs?ref=742fcc71672b71957e8050964ffb9cd06015f550", "patch": "@@ -0,0 +1,12 @@\n+// The 'std' crates should always be implicitly public,\n+// without having to pass any compiler arguments\n+\n+// run-pass\n+\n+#![deny(exported_private_dependencies)]\n+\n+pub struct PublicType {\n+    pub field: Option<u8>\n+}\n+\n+fn main() {}"}]}