{"sha": "f39559fef0ffb8420d2dcaf7cd229cc2f422bf38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTU1OWZlZjBmZmI4NDIwZDJkY2FmN2NkMjI5Y2MyZjQyMmJmMzg=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:46:45Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:48:18Z"}, "message": "Use accessors instead of destucting", "tree": {"sha": "8733b97d6f16321d92aa90bc4072ba0d49eaaea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8733b97d6f16321d92aa90bc4072ba0d49eaaea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38", "html_url": "https://github.com/rust-lang/rust/commit/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d9fedf9e61a6bc59e3ace276532533a23d7045", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d9fedf9e61a6bc59e3ace276532533a23d7045", "html_url": "https://github.com/rust-lang/rust/commit/d8d9fedf9e61a6bc59e3ace276532533a23d7045"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "731ce2343886018f0ff0d8aff775e9db70ec2a87", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39559fef0ffb8420d2dcaf7cd229cc2f422bf38/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f39559fef0ffb8420d2dcaf7cd229cc2f422bf38", "patch": "@@ -1211,7 +1211,7 @@ fn format_tuple_struct(\n     result.push_str(&header_str);\n \n     let body_lo = if fields.is_empty() {\n-        let lo = get_bytepos_after_visibility(context, vis, span, \")\");\n+        let lo = get_bytepos_after_visibility(context, struct_parts.vis, span, \")\");\n         context.codemap.span_after(mk_sp(lo, span.hi()), \"(\")\n     } else {\n         fields[0].span.lo()\n@@ -1552,34 +1552,24 @@ fn rewrite_static(\n     static_parts: &StaticParts,\n     offset: Indent,\n ) -> Option<String> {\n-    let StaticParts {\n-        prefix,\n-        vis,\n-        ident,\n-        ty,\n-        mutability,\n-        expr_opt,\n-        span,\n-    } = *static_parts;\n     let colon = colon_spaces(\n         context.config.space_before_type_annotation(),\n         context.config.space_after_type_annotation_colon(),\n     );\n     let prefix = format!(\n         \"{}{} {}{}{}\",\n-        format_visibility(vis),\n-        prefix,\n-        format_mutability(mutability),\n-        ident,\n+        format_visibility(static_parts.vis),\n+        static_parts.prefix,\n+        format_mutability(static_parts.mutability),\n+        static_parts.ident,\n         colon,\n     );\n     // 2 = \" =\".len()\n-    let ty_str = ty.rewrite(\n-        context,\n-        Shape::indented(offset.block_only(), context.config).offset_left(prefix.len() + 2)?,\n-    )?;\n+    let ty_shape =\n+        Shape::indented(offset.block_only(), context.config).offset_left(prefix.len() + 2)?;\n+    let ty_str = static_parts.ty.rewrite(context, ty_shape)?;\n \n-    if let Some(expr) = expr_opt {\n+    if let Some(expr) = static_parts.expr_opt {\n         let lhs = format!(\"{}{} =\", prefix, ty_str);\n         // 1 = ;\n         let remaining_width = context.budget(offset.block_indent + 1);\n@@ -1588,7 +1578,9 @@ fn rewrite_static(\n             lhs,\n             expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n-        ).and_then(|res| recover_comment_removed(res, span, context))\n+        ).and_then(|res| {\n+            recover_comment_removed(res, static_parts.span, context)\n+        })\n             .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))"}]}