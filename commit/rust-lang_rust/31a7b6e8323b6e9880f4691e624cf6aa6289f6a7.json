{"sha": "31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTdiNmU4MzIzYjZlOTg4MGY0NjkxZTYyNGNmNmFhNjI4OWY2YTc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-06T03:05:18Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-03T13:29:21Z"}, "message": "Refactor RenderedLink into its own type", "tree": {"sha": "a29f69acf9dab94e94ccc6fa81187d013ff47258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a29f69acf9dab94e94ccc6fa81187d013ff47258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "html_url": "https://github.com/rust-lang/rust/commit/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5495e215559e503e7ad6d3321bb3786184fc22b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5495e215559e503e7ad6d3321bb3786184fc22b", "html_url": "https://github.com/rust-lang/rust/commit/d5495e215559e503e7ad6d3321bb3786184fc22b"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "d79553a8be8de95801b9f18595dacca5c656ae86", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "patch": "@@ -118,7 +118,7 @@ impl Item {\n         self.attrs.collapsed_doc_value()\n     }\n \n-    pub fn links(&self) -> Vec<(String, String)> {\n+    pub fn links(&self) -> Vec<RenderedLink> {\n         self.attrs.links(&self.def_id.krate)\n     }\n \n@@ -441,6 +441,13 @@ pub struct ItemLink {\n     pub(crate) fragment: Option<String>,\n }\n \n+pub struct RenderedLink {\n+    /// The text the link was original written as\n+    pub(crate) original_text: String,\n+    /// The URL to put in the `href`\n+    pub(crate) href: String,\n+}\n+\n impl Attributes {\n     /// Extracts the content from an attribute `#[doc(cfg(content))]`.\n     pub fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n@@ -617,7 +624,7 @@ impl Attributes {\n     /// Gets links as a vector\n     ///\n     /// Cache must be populated before call\n-    pub fn links(&self, krate: &CrateNum) -> Vec<(String, String)> {\n+    pub fn links(&self, krate: &CrateNum) -> Vec<RenderedLink> {\n         use crate::html::format::href;\n         use crate::html::render::CURRENT_DEPTH;\n \n@@ -631,7 +638,7 @@ impl Attributes {\n                                 href.push_str(\"#\");\n                                 href.push_str(fragment);\n                             }\n-                            Some((s.clone(), href))\n+                            Some(RenderedLink { original_text: s.clone(), href })\n                         } else {\n                             None\n                         }\n@@ -651,16 +658,16 @@ impl Attributes {\n                             };\n                             // This is a primitive so the url is done \"by hand\".\n                             let tail = fragment.find('#').unwrap_or_else(|| fragment.len());\n-                            Some((\n-                                s.clone(),\n-                                format!(\n+                            Some(RenderedLink {\n+                                original_text: s.clone(),\n+                                href: format!(\n                                     \"{}{}std/primitive.{}.html{}\",\n                                     url,\n                                     if !url.ends_with('/') { \"/\" } else { \"\" },\n                                     &fragment[..tail],\n                                     &fragment[tail..]\n                                 ),\n-                            ))\n+                            })\n                         } else {\n                             panic!(\"This isn't a primitive?!\");\n                         }"}, {"sha": "e6484cd1c2c050bfa727e0e61a41a638feac0090", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "patch": "@@ -34,6 +34,7 @@ use std::fmt::Write;\n use std::ops::Range;\n use std::str;\n \n+use crate::clean::RenderedLink;\n use crate::doctest;\n use crate::html::highlight;\n use crate::html::toc::TocBuilder;\n@@ -52,7 +53,7 @@ fn opts() -> Options {\n pub struct Markdown<'a>(\n     pub &'a str,\n     /// A list of link replacements.\n-    pub &'a [(String, String)],\n+    pub &'a [RenderedLink],\n     /// The current list of used header IDs.\n     pub &'a mut IdMap,\n     /// Whether to allow the use of explicit error codes in doctest lang strings.\n@@ -78,7 +79,7 @@ pub struct MarkdownHtml<'a>(\n     pub &'a Option<Playground>,\n );\n /// A tuple struct like `Markdown` that renders only the first paragraph.\n-pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [(String, String)]);\n+pub struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [RenderedLink]);\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ErrorCodes {\n@@ -339,11 +340,11 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n /// Make headings links with anchor IDs and build up TOC.\n struct LinkReplacer<'a, 'b, I: Iterator<Item = Event<'a>>> {\n     inner: I,\n-    links: &'b [(String, String)],\n+    links: &'b [RenderedLink],\n }\n \n impl<'a, 'b, I: Iterator<Item = Event<'a>>> LinkReplacer<'a, 'b, I> {\n-    fn new(iter: I, links: &'b [(String, String)]) -> Self {\n+    fn new(iter: I, links: &'b [RenderedLink]) -> Self {\n         LinkReplacer { inner: iter, links }\n     }\n }\n@@ -354,8 +355,8 @@ impl<'a, 'b, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, 'b, I>\n     fn next(&mut self) -> Option<Self::Item> {\n         let event = self.inner.next();\n         if let Some(Event::Start(Tag::Link(kind, dest, text))) = event {\n-            if let Some(&(_, ref replace)) = self.links.iter().find(|link| link.0 == *dest) {\n-                Some(Event::Start(Tag::Link(kind, replace.to_owned().into(), text)))\n+            if let Some(link) = self.links.iter().find(|link| link.original_text == *dest) {\n+                Some(Event::Start(Tag::Link(kind, link.href.clone().into(), text)))\n             } else {\n                 Some(Event::Start(Tag::Link(kind, dest, text)))\n             }\n@@ -855,8 +856,8 @@ impl Markdown<'_> {\n             return String::new();\n         }\n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n-                Some((replace.clone(), s.to_owned()))\n+            if let Some(link) = links.iter().find(|link| &*link.original_text == s) {\n+                Some((link.original_text.clone(), link.href.clone()))\n             } else {\n                 None\n             }\n@@ -933,8 +934,8 @@ impl MarkdownSummaryLine<'_> {\n         }\n \n         let replacer = |_: &str, s: &str| {\n-            if let Some(&(_, ref replace)) = links.iter().find(|link| &*link.0 == s) {\n-                Some((replace.clone(), s.to_owned()))\n+            if let Some(rendered_link) = links.iter().find(|link| &*link.original_text == s) {\n+                Some((rendered_link.original_text.clone(), rendered_link.href.clone()))\n             } else {\n                 None\n             }"}, {"sha": "9dc85881482f5a8f5e7ae274004462474246f4c6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a7b6e8323b6e9880f4691e624cf6aa6289f6a7/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=31a7b6e8323b6e9880f4691e624cf6aa6289f6a7", "patch": "@@ -63,7 +63,7 @@ use rustc_span::symbol::{sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n-use crate::clean::{self, AttributesExt, Deprecation, GetDefId, SelfTy, TypeKind};\n+use crate::clean::{self, AttributesExt, Deprecation, GetDefId, RenderedLink, SelfTy, TypeKind};\n use crate::config::RenderInfo;\n use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n@@ -1780,7 +1780,7 @@ fn render_markdown(\n     w: &mut Buffer,\n     cx: &Context,\n     md_text: &str,\n-    links: Vec<(String, String)>,\n+    links: Vec<RenderedLink>,\n     prefix: &str,\n     is_hidden: bool,\n ) {"}]}