{"sha": "044a986015da3ef8117ce10361adc458d6a7f28a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NGE5ODYwMTVkYTNlZjgxMTdjZTEwMzYxYWRjNDU4ZDZhN2YyOGE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-23T17:05:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T20:32:28Z"}, "message": "Update test.", "tree": {"sha": "59c92c829de73c07181af3ec0e6a103840930b96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c92c829de73c07181af3ec0e6a103840930b96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044a986015da3ef8117ce10361adc458d6a7f28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044a986015da3ef8117ce10361adc458d6a7f28a", "html_url": "https://github.com/rust-lang/rust/commit/044a986015da3ef8117ce10361adc458d6a7f28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044a986015da3ef8117ce10361adc458d6a7f28a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032f68d625e08b0a5485d3da7ad2487a519103be", "url": "https://api.github.com/repos/rust-lang/rust/commits/032f68d625e08b0a5485d3da7ad2487a519103be", "html_url": "https://github.com/rust-lang/rust/commit/032f68d625e08b0a5485d3da7ad2487a519103be"}], "stats": {"total": 131, "additions": 53, "deletions": 78}, "files": [{"sha": "dd7751677579c2404e936fcfb08dc87c27438f6e", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 53, "deletions": 78, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/044a986015da3ef8117ce10361adc458d6a7f28a/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044a986015da3ef8117ce10361adc458d6a7f28a/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=044a986015da3ef8117ce10361adc458d6a7f28a", "patch": "@@ -13,189 +13,166 @@\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n #![feature(link_args)]\n-#![crate_type=\"rlib\"]\n-\n+#![crate_type = \"rlib\"]\n \n // Change function name --------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_function_name1(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_function_name2(c: i64) -> i32;\n }\n \n-\n-\n // Change parameter name -------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_parameter_name(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_parameter_name(d: i64) -> i32;\n }\n \n-\n-\n // Change parameter type -------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_parameter_type(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_parameter_type(c: i32) -> i32;\n }\n \n-\n-\n // Change return type ----------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_return_type(c: i32) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_return_type(c: i32) -> i8;\n }\n \n-\n-\n // Add parameter ---------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_parameter(c: i32) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n }\n \n-\n-\n // Add return type -------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_return_type(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_return_type(c: i32) -> i32;\n }\n \n-\n-\n // Make function variadic ------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn make_function_variadic(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn make_function_variadic(c: i32, ...);\n }\n \n-\n-\n // Change calling convention ---------------------------------------------------\n #[cfg(cfail1)]\n extern \"C\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n extern \"rust-call\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n-\n-\n // Make function public --------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     fn make_function_public(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn make_function_public(c: i32);\n }\n \n-\n-\n // Add function ----------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_function1(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_function1(c: i32);\n     pub fn add_function2();\n }\n \n-\n-\n // Change link-args ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link_args = \"-foo -bar\"]\n-extern {\n+extern \"C\" {\n     pub fn change_link_args(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n #[link_args = \"-foo -bar -baz\"]\n-extern {\n+extern \"C\" {\n     pub fn change_link_args(c: i32);\n }\n \n-\n-\n // Change link-name ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link(name = \"foo\")]\n-extern {\n+extern \"C\" {\n     pub fn change_link_name(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n #[link(name = \"bar\")]\n-extern {\n+extern \"C\" {\n     pub fn change_link_name(c: i32);\n }\n \n@@ -209,25 +186,23 @@ mod indirectly_change_parameter_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg=\"cfail2\")]\n-    #[rustc_clean(cfg=\"cfail3\")]\n-    extern {\n+    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail3\")]\n+    extern \"C\" {\n         pub fn indirectly_change_parameter_type(c: c_int);\n     }\n }\n \n-\n-\n // Indirectly change return type --------------------------------------------\n mod indirectly_change_return_type {\n     #[cfg(cfail1)]\n     use super::c_i32 as c_int;\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg=\"cfail2\")]\n-    #[rustc_clean(cfg=\"cfail3\")]\n-    extern {\n+    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail3\")]\n+    extern \"C\" {\n         pub fn indirectly_change_return_type() -> c_int;\n     }\n }"}]}