{"sha": "f9a57469612ba457fb7865aef944bf05d7664516", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YTU3NDY5NjEyYmE0NTdmYjc4NjVhZWY5NDRiZjA1ZDc2NjQ1MTY=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-07T19:32:37Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-11T19:27:52Z"}, "message": "parse extended terminfo format", "tree": {"sha": "2372f3077834d4b9ae40338a7c271efcf904c71d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2372f3077834d4b9ae40338a7c271efcf904c71d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9a57469612ba457fb7865aef944bf05d7664516", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl4aIboWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdDw7B/0fk+Ba/bOjvwhsEyymrtugRkyp\nHh1WGIZzC/hClaHmhr0Q8VNUBU+sSRAJQTsodxcVVzi/gq1PPooM+fxzKfWffiks\nV2FO0MIEbOqdctU/ZlLT/I+k8C+i2xi8gHYoyrn5D9MOiQ9i0eL9DZJJXT1nESo0\n2mL8MOFjeIkBHOzanTb7xiopLgUOHXo1qUDkUGqCt2Woa6aY1hO1HsQzyFYQbHi+\nUyeqKVkdofMkBcOYUHuWXX7Ck3NfnPvCb2quwkSva/aszQmonxkrJHJFlFvVSG72\n3UZfLdPidZKWjBUSg3wyc8f3JDmTBJGiG9wclACQIq74RvVDV2KJpKBrvGZZ\n=UHPj\n-----END PGP SIGNATURE-----", "payload": "tree 2372f3077834d4b9ae40338a7c271efcf904c71d\nparent bfd04876b93ad5c013d90bc46937e28b6ee1a3f4\nauthor Andy Russell <arussell123@gmail.com> 1578425557 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1578770872 -0500\n\nparse extended terminfo format\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a57469612ba457fb7865aef944bf05d7664516", "html_url": "https://github.com/rust-lang/rust/commit/f9a57469612ba457fb7865aef944bf05d7664516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9a57469612ba457fb7865aef944bf05d7664516/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd04876b93ad5c013d90bc46937e28b6ee1a3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd04876b93ad5c013d90bc46937e28b6ee1a3f4", "html_url": "https://github.com/rust-lang/rust/commit/bfd04876b93ad5c013d90bc46937e28b6ee1a3f4"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "2116b433fce3f8c50d44897bf74b2b9e7c675276", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=f9a57469612ba457fb7865aef944bf05d7664516", "patch": "@@ -91,7 +91,7 @@ pub fn stderr() -> Option<Box<StderrTerminal>> {\n #[allow(missing_docs)]\n pub mod color {\n     /// Number for a terminal color\n-    pub type Color = u16;\n+    pub type Color = u32;\n \n     pub const BLACK: Color = 0;\n     pub const RED: Color = 1;"}, {"sha": "918875e792a662aa46c0330a02f5d08a20d30590", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=f9a57469612ba457fb7865aef944bf05d7664516", "patch": "@@ -24,7 +24,7 @@ pub struct TermInfo {\n     /// Map of capability name to boolean value\n     pub bools: HashMap<String, bool>,\n     /// Map of capability name to numeric value\n-    pub numbers: HashMap<String, u16>,\n+    pub numbers: HashMap<String, u32>,\n     /// Map of capability name to raw (unexpanded) string\n     pub strings: HashMap<String, Vec<u8>>,\n }\n@@ -129,7 +129,7 @@ fn cap_for_attr(attr: Attr) -> &'static str {\n /// A Terminal that knows how many colors it supports, with a reference to its\n /// parsed Terminfo database record.\n pub struct TerminfoTerminal<T> {\n-    num_colors: u16,\n+    num_colors: u32,\n     out: T,\n     ti: TermInfo,\n }"}, {"sha": "fbc5aebdb2c6ca4c5b8d1585b2417e0e01b2909e", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=f9a57469612ba457fb7865aef944bf05d7664516", "patch": "@@ -159,16 +159,16 @@ pub static stringnames: &[&str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n \n fn read_le_u16(r: &mut dyn io::Read) -> io::Result<u16> {\n     let mut b = [0; 2];\n-    let mut amt = 0;\n-    while amt < b.len() {\n-        match r.read(&mut b[amt..])? {\n-            0 => return Err(io::Error::new(io::ErrorKind::Other, \"end of file\")),\n-            n => amt += n,\n-        }\n-    }\n+    r.read_exact(&mut b)?;\n     Ok((b[0] as u16) | ((b[1] as u16) << 8))\n }\n \n+fn read_le_u32(r: &mut dyn io::Read) -> io::Result<u32> {\n+    let mut b = [0; 4];\n+    r.read_exact(&mut b)?;\n+    Ok((b[0] as u32) | ((b[1] as u32) << 8) | ((b[2] as u32) << 16) | ((b[3] as u32) << 24))\n+}\n+\n fn read_byte(r: &mut dyn io::Read) -> io::Result<u8> {\n     match r.bytes().next() {\n         Some(s) => s,\n@@ -194,9 +194,12 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n \n     // Check magic number\n     let magic = t!(read_le_u16(file));\n-    if magic != 0x011A {\n-        return Err(format!(\"invalid magic number: expected {:x}, found {:x}\", 0x011A, magic));\n-    }\n+\n+    let extended = match magic {\n+        0o0432 => false,\n+        0o01036 => true,\n+        _ => return Err(format!(\"invalid magic number, found {:o}\", magic)),\n+    };\n \n     // According to the spec, these fields must be >= -1 where -1 means that the feature is not\n     // supported. Using 0 instead of -1 works because we skip sections with length 0.\n@@ -258,11 +261,15 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n         t!(read_byte(file)); // compensate for padding\n     }\n \n-    let numbers_map: HashMap<String, u16> = t! {\n-        (0..numbers_count).filter_map(|i| match read_le_u16(file) {\n-            Ok(0xFFFF) => None,\n-            Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n-            Err(e) => Some(Err(e))\n+    let numbers_map: HashMap<String, u32> = t! {\n+        (0..numbers_count).filter_map(|i| {\n+            let number = if extended { read_le_u32(file) } else { read_le_u16(file).map(Into::into) };\n+\n+            match number {\n+                Ok(0xFFFF) => None,\n+                Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n+                Err(e) => Some(Err(e))\n+            }\n         }).collect()\n     };\n \n@@ -318,7 +325,7 @@ pub fn msys_terminfo() -> TermInfo {\n     strings.insert(\"setab\".to_string(), b\"\\x1B[4%p1%dm\".to_vec());\n \n     let mut numbers = HashMap::new();\n-    numbers.insert(\"colors\".to_string(), 8u16);\n+    numbers.insert(\"colors\".to_string(), 8);\n \n     TermInfo {\n         names: vec![\"cygwin\".to_string()], // msys is a fork of an older cygwin version"}, {"sha": "c24cf9518aa2539e9e829d9c6e6e081f5942634e", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9a57469612ba457fb7865aef944bf05d7664516/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=f9a57469612ba457fb7865aef944bf05d7664516", "patch": "@@ -89,7 +89,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n         _ => unreachable!(),\n     };\n \n-    color | (bits & 0x8) // copy the hi-intensity bit\n+    color | (u32::from(bits) & 0x8) // copy the hi-intensity bit\n }\n \n impl<T: Write + Send + 'static> WinConsole<T> {"}]}