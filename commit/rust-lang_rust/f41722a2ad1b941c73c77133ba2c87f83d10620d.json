{"sha": "f41722a2ad1b941c73c77133ba2c87f83d10620d", "node_id": "C_kwDOAAsO6NoAKGY0MTcyMmEyYWQxYjk0MWM3M2M3NzEzM2JhMmM4N2Y4M2QxMDYyMGQ", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-02-14T22:04:21Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-02-16T21:57:03Z"}, "message": "Use a `Field` in `ConstraintCategory::ClosureUpvar`", "tree": {"sha": "30d6b5655206fa3179d3390b8265342895bb1969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d6b5655206fa3179d3390b8265342895bb1969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41722a2ad1b941c73c77133ba2c87f83d10620d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41722a2ad1b941c73c77133ba2c87f83d10620d", "html_url": "https://github.com/rust-lang/rust/commit/f41722a2ad1b941c73c77133ba2c87f83d10620d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41722a2ad1b941c73c77133ba2c87f83d10620d/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55697574915ca58c3fcd7b1c854c1c93e002dc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/55697574915ca58c3fcd7b1c854c1c93e002dc85", "html_url": "https://github.com/rust-lang/rust/commit/55697574915ca58c3fcd7b1c854c1c93e002dc85"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "e6a323d676e14c0c349b8cbec1d0afcb0e8b296d", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=f41722a2ad1b941c73c77133ba2c87f83d10620d", "patch": "@@ -5,6 +5,7 @@ use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n };\n+use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, RegionVid, Ty};\n@@ -421,17 +422,26 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         diag.span_label(*span, message);\n \n-        // FIXME(project-rfc-2229#48): This should store a captured_place not a hir id\n-        if let ReturnConstraint::ClosureUpvar(upvar) = kind {\n+        if let ReturnConstraint::ClosureUpvar(upvar_field) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n                 DefiningTy::Closure(def_id, _) => def_id,\n                 ty => bug!(\"unexpected DefiningTy {:?}\", ty),\n             };\n \n-            let upvar_def_span = self.infcx.tcx.hir().span(upvar);\n-            let upvar_span = self.infcx.tcx.upvars_mentioned(def_id).unwrap()[&upvar].span;\n-            diag.span_label(upvar_def_span, \"variable defined here\");\n-            diag.span_label(upvar_span, \"variable captured here\");\n+            let captured_place = &self.upvars[upvar_field.index()].place;\n+            let defined_hir = match captured_place.place.base {\n+                PlaceBase::Local(hirid) => Some(hirid),\n+                PlaceBase::Upvar(upvar) => Some(upvar.var_path.hir_id),\n+                _ => None,\n+            };\n+\n+            if defined_hir.is_some() {\n+                let upvars_map = self.infcx.tcx.upvars_mentioned(def_id).unwrap();\n+                let upvar_def_span = self.infcx.tcx.hir().span(defined_hir.unwrap());\n+                let upvar_span = upvars_map.get(&defined_hir.unwrap()).unwrap().span;\n+                diag.span_label(upvar_def_span, \"variable defined here\");\n+                diag.span_label(upvar_span, \"variable captured here\");\n+            }\n         }\n \n         if let Some(fr_span) = self.give_region_a_name(*outlived_fr).unwrap().span() {"}, {"sha": "a58240900969e5ee8b04291bbbb9173d7a9a849b", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f41722a2ad1b941c73c77133ba2c87f83d10620d", "patch": "@@ -2530,9 +2530,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             body,\n         );\n         let category = if let Some(field) = field {\n-            let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();\n-            // FIXME(project-rfc-2229#8): Use Place for better diagnostics\n-            ConstraintCategory::ClosureUpvar(var_hir_id)\n+            ConstraintCategory::ClosureUpvar(field)\n         } else {\n             ConstraintCategory::Boring\n         };"}, {"sha": "fbd5a2d08a5dcd8bee27eedfcf231928863af097", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41722a2ad1b941c73c77133ba2c87f83d10620d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=f41722a2ad1b941c73c77133ba2c87f83d10620d", "patch": "@@ -341,7 +341,7 @@ pub enum ConstraintCategory {\n     /// like `Foo { field: my_val }`)\n     Usage,\n     OpaqueType,\n-    ClosureUpvar(hir::HirId),\n+    ClosureUpvar(Field),\n \n     /// A constraint from a user-written predicate\n     /// with the provided span, written on the item\n@@ -363,7 +363,7 @@ pub enum ConstraintCategory {\n #[derive(TyEncodable, TyDecodable, HashStable)]\n pub enum ReturnConstraint {\n     Normal,\n-    ClosureUpvar(hir::HirId),\n+    ClosureUpvar(Field),\n }\n \n /// The subject of a `ClosureOutlivesRequirement` -- that is, the thing"}]}