{"sha": "f411c18a734a0c4d020ac578ccc3b5b8a7814f8f", "node_id": "C_kwDOAAsO6NoAKGY0MTFjMThhNzM0YTBjNGQwMjBhYzU3OGNjYzNiNWI4YTc4MTRmOGY", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-18T08:41:26Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-18T08:46:42Z"}, "message": "check macro_backtrace only", "tree": {"sha": "efe6f1ed6079b03d25277f6ea2da769e98bda884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe6f1ed6079b03d25277f6ea2da769e98bda884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f", "html_url": "https://github.com/rust-lang/rust/commit/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697c75ef4b39f1560bf087841aebc8799b5c64d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/697c75ef4b39f1560bf087841aebc8799b5c64d6", "html_url": "https://github.com/rust-lang/rust/commit/697c75ef4b39f1560bf087841aebc8799b5c64d6"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "673744d90b8af7131239754a3011d1ceec3ac2f0", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f411c18a734a0c4d020ac578ccc3b5b8a7814f8f/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=f411c18a734a0c4d020ac578ccc3b5b8a7814f8f", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use core::iter;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, QPath, Stmt, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, HirId, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::walk_chain;\n@@ -389,13 +389,11 @@ fn contains_acceptable_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n }\n \n fn acceptable_macro(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Call(call_expr, _)  = expr.kind\n-        && let ExprKind::Path(QPath::Resolved(None, path)) = call_expr.kind\n-        && macro_backtrace(path.span).last().map_or(false, |macro_call|\n-            matches!(\n-                &cx.tcx.get_diagnostic_name(macro_call.def_id),\n-                Some(sym::todo_macro | sym::unimplemented_macro)\n-            )\n+    if macro_backtrace(expr.span).last().map_or(false, |macro_call|\n+        matches!(\n+            &cx.tcx.get_diagnostic_name(macro_call.def_id),\n+            Some(sym::todo_macro | sym::unimplemented_macro)\n+        )\n     ) {\n         return true;\n     }"}]}