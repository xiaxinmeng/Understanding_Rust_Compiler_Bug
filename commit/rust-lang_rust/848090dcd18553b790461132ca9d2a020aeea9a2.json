{"sha": "848090dcd18553b790461132ca9d2a020aeea9a2", "node_id": "C_kwDOAAsO6NoAKDg0ODA5MGRjZDE4NTUzYjc5MDQ2MTEzMmNhOWQyYTAyMGFlZWE5YTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T21:20:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-22T21:20:35Z"}, "message": "Auto merge of #98017 - RalfJung:dereferenceable, r=nikic\n\ndo not mark interior mutable shared refs as dereferenceable\n\nMy proposed solution to https://github.com/rust-lang/rust/issues/55005.", "tree": {"sha": "2c6acb0b99c5ff5d01f0342c601a6fe07289fd9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6acb0b99c5ff5d01f0342c601a6fe07289fd9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848090dcd18553b790461132ca9d2a020aeea9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848090dcd18553b790461132ca9d2a020aeea9a2", "html_url": "https://github.com/rust-lang/rust/commit/848090dcd18553b790461132ca9d2a020aeea9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848090dcd18553b790461132ca9d2a020aeea9a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffa77332c630b43cb92f6256b8e404198820fa03", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa77332c630b43cb92f6256b8e404198820fa03", "html_url": "https://github.com/rust-lang/rust/commit/ffa77332c630b43cb92f6256b8e404198820fa03"}, {"sha": "35c6dec921d3bac70fb488db193580176f603aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c6dec921d3bac70fb488db193580176f603aa1", "html_url": "https://github.com/rust-lang/rust/commit/35c6dec921d3bac70fb488db193580176f603aa1"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "dde55dd96554befc42d94ef9db4aab84e46530b2", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/848090dcd18553b790461132ca9d2a020aeea9a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848090dcd18553b790461132ca9d2a020aeea9a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=848090dcd18553b790461132ca9d2a020aeea9a2", "patch": "@@ -2618,14 +2618,14 @@ where\n                     // Use conservative pointer kind if not optimizing. This saves us the\n                     // Freeze/Unpin queries, and can save time in the codegen backend (noalias\n                     // attributes in LLVM have compile-time cost even in unoptimized builds).\n-                    PointerKind::Shared\n+                    PointerKind::SharedMutable\n                 } else {\n                     match mt {\n                         hir::Mutability::Not => {\n                             if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n                                 PointerKind::Frozen\n                             } else {\n-                                PointerKind::Shared\n+                                PointerKind::SharedMutable\n                             }\n                         }\n                         hir::Mutability::Mut => {\n@@ -2636,7 +2636,7 @@ where\n                             if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n                                 PointerKind::UniqueBorrowed\n                             } else {\n-                                PointerKind::Shared\n+                                PointerKind::UniqueBorrowedPinned\n                             }\n                         }\n                     }\n@@ -3255,10 +3255,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                     // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable\n                     // for the entire duration of the function as they can be deallocated\n-                    // at any time. Set their valid size to 0.\n+                    // at any time. Same for shared mutable references. If LLVM had a\n+                    // way to say \"dereferenceable on entry\" we could use it here.\n                     attrs.pointee_size = match kind {\n-                        PointerKind::UniqueOwned => Size::ZERO,\n-                        _ => pointee.size,\n+                        PointerKind::UniqueBorrowed\n+                        | PointerKind::UniqueBorrowedPinned\n+                        | PointerKind::Frozen => pointee.size,\n+                        PointerKind::SharedMutable | PointerKind::UniqueOwned => Size::ZERO,\n                     };\n \n                     // `Box`, `&T`, and `&mut T` cannot be undef.\n@@ -3285,7 +3288,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // or not to actually emit the attribute. It can also be controlled with the\n                     // `-Zmutable-noalias` debugging option.\n                     let no_alias = match kind {\n-                        PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n+                        PointerKind::SharedMutable\n+                        | PointerKind::UniqueBorrowed\n+                        | PointerKind::UniqueBorrowedPinned => false,\n                         PointerKind::UniqueOwned => noalias_for_box,\n                         PointerKind::Frozen => !is_return,\n                     };"}, {"sha": "b35502d9ee42b70e7a0364e226e5b2be71d859e4", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/848090dcd18553b790461132ca9d2a020aeea9a2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848090dcd18553b790461132ca9d2a020aeea9a2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=848090dcd18553b790461132ca9d2a020aeea9a2", "patch": "@@ -1350,15 +1350,19 @@ impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n-    Shared,\n+    SharedMutable,\n \n-    /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.\n+    /// `&T` where `T` contains no `UnsafeCell`, is `dereferenceable`, `noalias` and `readonly`.\n     Frozen,\n \n-    /// `&mut T` which is `noalias` but not `readonly`.\n+    /// `&mut T` which is `dereferenceable` and `noalias` but not `readonly`.\n     UniqueBorrowed,\n \n-    /// `Box<T>`, unlike `UniqueBorrowed`, it also has `noalias` on returns.\n+    /// `&mut !Unpin`, which is `dereferenceable` but neither `noalias` nor `readonly`.\n+    UniqueBorrowedPinned,\n+\n+    /// `Box<T>`, which is `noalias` (even on return types, unlike the above) but neither `readonly`\n+    /// nor `dereferenceable`.\n     UniqueOwned,\n }\n "}, {"sha": "fb4454c94cb3356c66d1fe052364cc0168d3c9c1", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/848090dcd18553b790461132ca9d2a020aeea9a2/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848090dcd18553b790461132ca9d2a020aeea9a2/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=848090dcd18553b790461132ca9d2a020aeea9a2", "patch": "@@ -1766,15 +1766,24 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n ///\n-/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T`\n-/// reference) that is accessible by safe code (for example, because you returned it),\n-/// then you must not access the data in any way that contradicts that reference for the\n-/// remainder of `'a`. For example, this means that if you take the `*mut T` from an\n-/// `UnsafeCell<T>` and cast it to an `&T`, then the data in `T` must remain immutable\n-/// (modulo any `UnsafeCell` data found within `T`, of course) until that reference's\n-/// lifetime expires. Similarly, if you create a `&mut T` reference that is released to\n-/// safe code, then you must not access the data within the `UnsafeCell` until that\n-/// reference expires.\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference), then\n+/// you must not access the data in any way that contradicts that reference for the remainder of\n+/// `'a`. For example, this means that if you take the `*mut T` from an `UnsafeCell<T>` and cast it\n+/// to an `&T`, then the data in `T` must remain immutable (modulo any `UnsafeCell` data found\n+/// within `T`, of course) until that reference's lifetime expires. Similarly, if you create a `&mut\n+/// T` reference that is released to safe code, then you must not access the data within the\n+/// `UnsafeCell` until that reference expires.\n+///\n+/// - For both `&T` without `UnsafeCell<_>` and `&mut T`, you must also not deallocate the data\n+/// until the reference expires. As a special exception, given an `&T`, any part of it that is\n+/// inside an `UnsafeCell<_>` may be deallocated during the lifetime of the reference, after the\n+/// last time the reference is used (dereferenced or reborrowed). Since you cannot deallocate a part\n+/// of what a reference points to, this means the memory an `&T` points to can be deallocted only if\n+/// *every part of it* (including padding) is inside an `UnsafeCell`.\n+///\n+///     However, whenever a `&UnsafeCell<T>` is constructed or dereferenced, it must still point to\n+/// live memory and the compiler is allowed to insert spurious reads if it can prove that this\n+/// memory has not yet been deallocated.\n ///\n /// - At all times, you must avoid data races. If multiple threads have access to\n /// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other"}, {"sha": "dda139be6fcae4f6d09143fb677ebd059e9514a7", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/848090dcd18553b790461132ca9d2a020aeea9a2/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848090dcd18553b790461132ca9d2a020aeea9a2/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=848090dcd18553b790461132ca9d2a020aeea9a2", "patch": "@@ -5,6 +5,7 @@\n \n use std::mem::MaybeUninit;\n use std::num::NonZeroU64;\n+use std::marker::PhantomPinned;\n \n pub struct S {\n   _field: [i32; 8],\n@@ -14,6 +15,11 @@ pub struct UnsafeInner {\n   _field: std::cell::UnsafeCell<i16>,\n }\n \n+pub struct NotUnpin {\n+  _field: i32,\n+  _marker: PhantomPinned,\n+}\n+\n pub enum MyBool {\n   True,\n   False,\n@@ -91,7 +97,7 @@ pub fn static_borrow(_: &'static i32) {\n pub fn named_borrow<'r>(_: &'r i32) {\n }\n \n-// CHECK: @unsafe_borrow({{i16\\*|ptr}} noundef align 2 dereferenceable(2) %_1)\n+// CHECK: @unsafe_borrow({{i16\\*|ptr}} noundef nonnull align 2 %_1)\n // unsafe interior means this isn't actually readonly and there may be aliases ...\n #[no_mangle]\n pub fn unsafe_borrow(_: &UnsafeInner) {\n@@ -109,6 +115,18 @@ pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n pub fn mutable_borrow(_: &mut i32) {\n }\n \n+#[no_mangle]\n+// CHECK: @mutable_notunpin_borrow({{i32\\*|ptr}} noundef align 4 dereferenceable(4) %_1)\n+// This one is *not* `noalias` because it might be self-referential.\n+pub fn mutable_notunpin_borrow(_: &mut NotUnpin) {\n+}\n+\n+// CHECK: @notunpin_borrow({{i32\\*|ptr}} noalias noundef readonly align 4 dereferenceable(4) %_1)\n+// But `&NotUnpin` behaves perfectly normal.\n+#[no_mangle]\n+pub fn notunpin_borrow(_: &NotUnpin) {\n+}\n+\n // CHECK: @indirect_struct({{%S\\*|ptr}} noalias nocapture noundef dereferenceable(32) %_1)\n #[no_mangle]\n pub fn indirect_struct(_: S) {"}]}