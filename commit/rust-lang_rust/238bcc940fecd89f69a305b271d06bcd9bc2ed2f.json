{"sha": "238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "node_id": "C_kwDOAAsO6NoAKDIzOGJjYzk0MGZlY2Q4OWY2OWEzMDViMjcxZDA2YmNkOWJjMmVkMmY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-16T20:08:54Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-08-16T20:09:37Z"}, "message": "rustdoc: box ItemKind::Trait\n\nThis reduces the memory consumption of ItemKind.", "tree": {"sha": "869ed93d5ad5b808a75ea7ce6673d6fa7e19ecb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869ed93d5ad5b808a75ea7ce6673d6fa7e19ecb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "html_url": "https://github.com/rust-lang/rust/commit/238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aa4aa70ddd11ebc56667dbb3907c93a5a0176c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2aa4aa70ddd11ebc56667dbb3907c93a5a0176c2", "html_url": "https://github.com/rust-lang/rust/commit/2aa4aa70ddd11ebc56667dbb3907c93a5a0176c2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "a7048e788b65abb5aa9e939167439208c077cf1a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "patch": "@@ -62,7 +62,7 @@ pub(crate) fn try_inline(\n         Res::Def(DefKind::Trait, did) => {\n             record_extern_fqn(cx, did, ItemType::Trait);\n             build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n-            clean::TraitItem(build_external_trait(cx, did))\n+            clean::TraitItem(Box::new(build_external_trait(cx, did)))\n         }\n         Res::Def(DefKind::Fn, did) => {\n             record_extern_fqn(cx, did, ItemType::Function);"}, {"sha": "5507ffb871b6ea25818b11098fb0648867aeb313", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "patch": "@@ -1951,12 +1951,12 @@ fn clean_maybe_renamed_item<'tcx>(\n                     .map(|ti| clean_trait_item(cx.tcx.hir().trait_item(ti.id), cx))\n                     .collect();\n \n-                TraitItem(Trait {\n+                TraitItem(Box::new(Trait {\n                     def_id,\n                     items,\n                     generics: clean_generics(generics, cx),\n                     bounds: bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect(),\n-                })\n+                }))\n             }\n             ItemKind::ExternCrate(orig_name) => {\n                 return clean_extern_crate(item, name, orig_name, cx);"}, {"sha": "61cfd7ea40d71d441ecf415d8557c4dcc9ede761", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "patch": "@@ -727,7 +727,7 @@ pub(crate) enum ItemKind {\n     OpaqueTyItem(OpaqueTy),\n     StaticItem(Static),\n     ConstantItem(Constant),\n-    TraitItem(Trait),\n+    TraitItem(Box<Trait>),\n     TraitAliasItem(TraitAlias),\n     ImplItem(Box<Impl>),\n     /// A required method in a trait declaration meaning it's only a function signature.\n@@ -2497,7 +2497,7 @@ mod size_asserts {\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);\n     static_assert_size!(Item, 56);\n-    static_assert_size!(ItemKind, 112);\n+    static_assert_size!(ItemKind, 96);\n     static_assert_size!(PathSegment, 40);\n     static_assert_size!(Type, 56);\n }"}, {"sha": "86392610d2c28cb36fbb0608d1fd325443791f20", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         if let clean::TraitItem(ref t) = *item.kind {\n             self.cache.traits.entry(item.item_id.expect_def_id()).or_insert_with(|| {\n                 clean::TraitWithExtraInfo {\n-                    trait_: t.clone(),\n+                    trait_: *t.clone(),\n                     is_notable: item.attrs.has_doc_flag(sym::notable_trait),\n                 }\n             });"}, {"sha": "c4e8b6f5f8449d103513ac647a2ba0aae06883df", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238bcc940fecd89f69a305b271d06bcd9bc2ed2f/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=238bcc940fecd89f69a305b271d06bcd9bc2ed2f", "patch": "@@ -248,7 +248,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         VariantItem(v) => ItemEnum::Variant(v.into_tcx(tcx)),\n         FunctionItem(f) => ItemEnum::Function(from_function(f, header.unwrap(), tcx)),\n         ForeignFunctionItem(f) => ItemEnum::Function(from_function(f, header.unwrap(), tcx)),\n-        TraitItem(t) => ItemEnum::Trait(t.into_tcx(tcx)),\n+        TraitItem(t) => ItemEnum::Trait((*t).into_tcx(tcx)),\n         TraitAliasItem(t) => ItemEnum::TraitAlias(t.into_tcx(tcx)),\n         MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true, header.unwrap(), tcx)),\n         TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false, header.unwrap(), tcx)),"}]}