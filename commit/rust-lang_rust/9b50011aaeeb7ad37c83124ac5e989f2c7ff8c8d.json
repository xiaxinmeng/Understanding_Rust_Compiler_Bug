{"sha": "9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTAwMTFhYWVlYjdhZDM3YzgzMTI0YWM1ZTk4OWYyYzdmZjhjOGQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-12T19:58:37Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-15T22:48:10Z"}, "message": "Parse type inferred lambda-block expressions.", "tree": {"sha": "5e64cd6fc7444c9a728476e5ec85e44d375bcd0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e64cd6fc7444c9a728476e5ec85e44d375bcd0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "html_url": "https://github.com/rust-lang/rust/commit/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814bf41d898cd0410873f6c05c03a2b34366bfde", "url": "https://api.github.com/repos/rust-lang/rust/commits/814bf41d898cd0410873f6c05c03a2b34366bfde", "html_url": "https://github.com/rust-lang/rust/commit/814bf41d898cd0410873f6c05c03a2b34366bfde"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "8b7621b9018aab933a4ab4f383782a05782c94d1", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9b50011aaeeb7ad37c83124ac5e989f2c7ff8c8d", "patch": "@@ -600,16 +600,28 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n     ret parse_ty_postfix(t, p, colons_before_params);\n }\n \n-fn parse_arg(p: &parser) -> ast::arg {\n-    let m: ast::mode = ast::val;\n-    let i: ast::ident = parse_value_ident(p);\n-    expect(p, token::COLON);\n+fn parse_arg_mode(p: &parser) -> ast::mode {\n     if eat(p, token::BINOP(token::AND)) {\n-        m = ast::alias(eat_word(p, \"mutable\"));\n+        ast::alias(eat_word(p, \"mutable\"))\n     } else if eat(p, token::BINOP(token::MINUS)) {\n-        m = ast::move;\n+        ast::move\n+    } else {\n+        ast::val\n     }\n-    let t: @ast::ty = parse_ty(p, false);\n+}\n+\n+fn parse_arg(p: &parser) -> ast::arg {\n+    let i = parse_value_ident(p);\n+    expect(p, token::COLON);\n+    let m = parse_arg_mode(p);\n+    let t = parse_ty(p, false);\n+    ret {mode: m, ty: t, ident: i, id: p.get_id()};\n+}\n+\n+fn parse_fn_block_arg(p: &parser) -> ast::arg {\n+    let m = parse_arg_mode(p);\n+    let i = parse_value_ident(p);\n+    let t = @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_infer);\n     ret {mode: m, ty: t, ident: i, id: p.get_id()};\n }\n \n@@ -808,6 +820,8 @@ fn parse_bottom_expr(p: &parser) -> @ast::expr {\n             hi = p.get_hi_pos();\n             expect(p, token::RBRACE);\n             ex = ast::expr_rec(fields, base);\n+        } else if p.peek() == token::BINOP(token::OR) {\n+            ret parse_fn_block_expr(p);\n         } else {\n             let blk = parse_block_tail(p, lo);\n             ret mk_expr(p, blk.span.lo, blk.span.hi, ast::expr_block(blk));\n@@ -1314,6 +1328,14 @@ fn parse_fn_expr(p: &parser, proto: ast::proto) -> @ast::expr {\n     ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn));\n }\n \n+fn parse_fn_block_expr(p: &parser) -> @ast::expr {\n+    let lo = p.get_last_lo_pos();\n+    let decl = parse_fn_block_decl(p);\n+    let body = parse_block_tail(p, lo);\n+    let _fn = {decl: decl, proto: ast::proto_block, body: body};\n+    ret mk_expr(p, lo, body.span.hi, ast::expr_fn(_fn));\n+}\n+\n fn parse_else_expr(p: &parser) -> @ast::expr {\n     if eat_word(p, \"if\") {\n         ret parse_if_expr(p);\n@@ -1794,6 +1816,18 @@ fn parse_fn_decl(p: &parser, purity: ast::purity, il: ast::inlineness)\n     }\n }\n \n+fn parse_fn_block_decl(p: &parser) -> ast::fn_decl {\n+    let inputs: ast::spanned[[ast::arg]] =\n+        parse_seq(token::BINOP(token::OR), token::BINOP(token::OR),\n+                  some(token::COMMA), parse_fn_block_arg, p);\n+    ret {inputs: inputs.node,\n+         output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_infer),\n+         purity: ast::impure_fn,\n+         il: ast::il_normal,\n+         cf: ast::return,\n+         constraints: ~[]};\n+}\n+\n fn parse_fn(p: &parser, proto: ast::proto, purity: ast::purity,\n             il: ast::inlineness) -> ast::_fn {\n     let decl = parse_fn_decl(p, purity, il);"}]}