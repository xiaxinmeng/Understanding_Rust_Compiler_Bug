{"sha": "6d941616f925298124eabe3ca10e48ec10bb33a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOTQxNjE2ZjkyNTI5ODEyNGVhYmUzY2ExMGU0OGVjMTBiYjMzYTk=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-06T09:19:18Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:24Z"}, "message": "move filter_flat_map to its own module", "tree": {"sha": "5a05941c8242604864822e20b989496193547a63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a05941c8242604864822e20b989496193547a63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d941616f925298124eabe3ca10e48ec10bb33a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d941616f925298124eabe3ca10e48ec10bb33a9", "html_url": "https://github.com/rust-lang/rust/commit/6d941616f925298124eabe3ca10e48ec10bb33a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d941616f925298124eabe3ca10e48ec10bb33a9/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2baf043c374396dea3354eb8bc56af7539bf30b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2baf043c374396dea3354eb8bc56af7539bf30b4", "html_url": "https://github.com/rust-lang/rust/commit/2baf043c374396dea3354eb8bc56af7539bf30b4"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "8da867fce515cde5d051ce25b10043bb05f584d5", "filename": "clippy_lints/src/methods/filter_flat_map.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d941616f925298124eabe3ca10e48ec10bb33a9/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d941616f925298124eabe3ca10e48ec10bb33a9/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs?ref=6d941616f925298124eabe3ca10e48ec10bb33a9", "patch": "@@ -0,0 +1,21 @@\n+use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+use super::FILTER_MAP;\n+\n+/// lint use of `filter().flat_map()` for `Iterators`\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    _filter_args: &'tcx [hir::Expr<'_>],\n+    _map_args: &'tcx [hir::Expr<'_>],\n+) {\n+    // lint if caller of `.filter().flat_map()` is an Iterator\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n+        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n+                    and filtering by returning `iter::empty()`\";\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n+    }\n+}"}, {"sha": "3251a49da099bb3f8f9f6c72db9606a7735f3f73", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d941616f925298124eabe3ca10e48ec10bb33a9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d941616f925298124eabe3ca10e48ec10bb33a9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6d941616f925298124eabe3ca10e48ec10bb33a9", "patch": "@@ -3,6 +3,7 @@ mod bytes_nth;\n mod clone_on_ref_ptr;\n mod expect_used;\n mod filetype_is_file;\n+mod filter_flat_map;\n mod filter_map;\n mod filter_map_identity;\n mod filter_map_map;\n@@ -1705,7 +1706,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"map\", \"filter_map\"] => filter_map_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"next\", \"filter_map\"] => filter_map_next::check(cx, expr, arg_lists[1], self.msrv.as_ref()),\n             [\"map\", \"find\"] => filter_map::check(cx, expr, true),\n-            [\"flat_map\", \"filter\"] => lint_filter_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"flat_map\", \"filter\"] => filter_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => lint_filter_map_flat_map(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n@@ -2753,22 +2754,6 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n     );\n }\n \n-/// lint use of `filter().flat_map()` for `Iterators`\n-fn lint_filter_flat_map<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n-    // lint if caller of `.filter().flat_map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n-        let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n-                    and filtering by returning `iter::empty()`\";\n-        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);\n-    }\n-}\n-\n /// lint use of `filter_map().flat_map()` for `Iterators`\n fn lint_filter_map_flat_map<'tcx>(\n     cx: &LateContext<'tcx>,"}]}