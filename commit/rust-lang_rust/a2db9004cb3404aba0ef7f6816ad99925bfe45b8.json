{"sha": "a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "node_id": "C_kwDOAAsO6NoAKGEyZGI5MDA0Y2IzNDA0YWJhMGVmN2Y2ODE2YWQ5OTkyNWJmZTQ1Yjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-19T09:45:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-19T09:45:52Z"}, "message": "Rollup merge of #92028 - petrochenkov:psimd, r=Mark-Simulacrum\n\nSync portable-simd to fix libcore build for AVX-512 enabled targets\n\nFixes https://github.com/rust-lang/rust/pull/91484#issuecomment-989933534\ncc ``@workingjubilee``", "tree": {"sha": "7cd0e5b034b57d70d74ba6cdef95755dc8656caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd0e5b034b57d70d74ba6cdef95755dc8656caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvv9QCRBK7hj4Ov3rIwAAPCUIAAIPSSefIREtpfL792R5yF04\nEMGf9ttmamQ3TZ5I0Xi06iKvH6S+qD1aoUGSUvTqU23fIxNCcekbZyQc86F3z/F3\n7mOMK5mOjGRnU8afisx+iVX/0d4S6nx1llW/gzH9q6ezc1zZra2Npmo0xtEzOAhZ\np+mMQSfb4EoYcKViHPf0X5jTPktlgtFNKjC4ZLb+gaE8VwHazS7qtBFO8Om8fUWY\nbmnmU0jyJOG2O99Gdqi82DD58+xZtVzB5NZFbDCYtUT8vbv5Zsl1EG7FC12FkuGb\nNiz+ba48CiQu0pBDXKkqUsnYA4AXO7h0xF6GlQrTlMvDvpDHa3S0GavpUMbNHZY=\n=hxXC\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cd0e5b034b57d70d74ba6cdef95755dc8656caa\nparent 4d5ffc487084446261e7d49a7425fc5ff305c857\nparent 23c172ff0f2855446bb9242e3de69fbf67c99693\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639907152 +0100\ncommitter GitHub <noreply@github.com> 1639907152 +0100\n\nRollup merge of #92028 - petrochenkov:psimd, r=Mark-Simulacrum\n\nSync portable-simd to fix libcore build for AVX-512 enabled targets\n\nFixes https://github.com/rust-lang/rust/pull/91484#issuecomment-989933534\ncc ``@workingjubilee``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "html_url": "https://github.com/rust-lang/rust/commit/a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d5ffc487084446261e7d49a7425fc5ff305c857", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5ffc487084446261e7d49a7425fc5ff305c857", "html_url": "https://github.com/rust-lang/rust/commit/4d5ffc487084446261e7d49a7425fc5ff305c857"}, {"sha": "23c172ff0f2855446bb9242e3de69fbf67c99693", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c172ff0f2855446bb9242e3de69fbf67c99693", "html_url": "https://github.com/rust-lang/rust/commit/23c172ff0f2855446bb9242e3de69fbf67c99693"}], "stats": {"total": 87, "additions": 25, "deletions": 62}, "files": [{"sha": "b4217dc87ba9c209e3e07c57fe7120dc20bcb922", "filename": "library/portable-simd/crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "patch": "@@ -105,18 +105,14 @@ where\n     #[must_use = \"method returns a new vector and does not mutate the original value\"]\n     pub fn to_int(self) -> Simd<T, LANES> {\n         unsafe {\n-            crate::intrinsics::simd_select_bitmask(\n-                self.0,\n-                Simd::splat(T::TRUE),\n-                Simd::splat(T::FALSE),\n-            )\n+            intrinsics::simd_select_bitmask(self.0, Simd::splat(T::TRUE), Simd::splat(T::FALSE))\n         }\n     }\n \n     #[inline]\n     #[must_use = \"method returns a new mask and does not mutate the original value\"]\n     pub unsafe fn from_int_unchecked(value: Simd<T, LANES>) -> Self {\n-        unsafe { Self(crate::intrinsics::simd_bitmask(value), PhantomData) }\n+        unsafe { Self(intrinsics::simd_bitmask(value), PhantomData) }\n     }\n \n     #[cfg(feature = \"generic_const_exprs\")]"}, {"sha": "e5bb784bb910f4b40da0746f3f7ad7604d25b285", "filename": "library/portable-simd/crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "patch": "@@ -115,7 +115,7 @@ where\n     pub fn to_bitmask(self) -> [u8; LaneCount::<LANES>::BITMASK_LEN] {\n         unsafe {\n             let mut bitmask: [u8; LaneCount::<LANES>::BITMASK_LEN] =\n-                crate::intrinsics::simd_bitmask(self.0);\n+                intrinsics::simd_bitmask(self.0);\n \n             // There is a bug where LLVM appears to implement this operation with the wrong\n             // bit order.\n@@ -144,7 +144,7 @@ where\n                 }\n             }\n \n-            Self::from_int_unchecked(crate::intrinsics::simd_select_bitmask(\n+            Self::from_int_unchecked(intrinsics::simd_select_bitmask(\n                 bitmask,\n                 Self::splat(true).to_int(),\n                 Self::splat(false).to_int(),"}, {"sha": "85026265956a2092545c00a1e3ffa24e543aa672", "filename": "library/portable-simd/crates/core_simd/src/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fmod.rs?ref=a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "patch": "@@ -27,7 +27,6 @@ pub mod simd {\n \n     pub use crate::core_simd::lane_count::{LaneCount, SupportedLaneCount};\n     pub use crate::core_simd::masks::*;\n-    pub use crate::core_simd::select::Select;\n     pub use crate::core_simd::swizzle::*;\n     pub use crate::core_simd::vector::*;\n }"}, {"sha": "8d521057fbd3ed7a9da2bc540af546f7d2cf9ee2", "filename": "library/portable-simd/crates/core_simd/src/select.rs", "status": "modified", "additions": 21, "deletions": 53, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2db9004cb3404aba0ef7f6816ad99925bfe45b8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=a2db9004cb3404aba0ef7f6816ad99925bfe45b8", "patch": "@@ -1,54 +1,6 @@\n use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Mask, MaskElement, Simd, SimdElement, SupportedLaneCount};\n \n-mod sealed {\n-    pub trait Sealed<Mask> {\n-        fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n-    }\n-}\n-use sealed::Sealed;\n-\n-/// Supporting trait for vector `select` function\n-pub trait Select<Mask>: Sealed<Mask> {}\n-\n-impl<T, const LANES: usize> Sealed<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Mask<T::Mask, LANES>, true_values: Self, false_values: Self) -> Self {\n-        unsafe { intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Mask<T::Mask, LANES>> for Simd<T, LANES>\n-where\n-    T: SimdElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n-impl<T, const LANES: usize> Sealed<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-    #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n-        mask & true_values | !mask & false_values\n-    }\n-}\n-\n-impl<T, const LANES: usize> Select<Self> for Mask<T, LANES>\n-where\n-    T: MaskElement,\n-    LaneCount<LANES>: SupportedLaneCount,\n-{\n-}\n-\n impl<T, const LANES: usize> Mask<T, LANES>\n where\n     T: MaskElement,\n@@ -69,21 +21,37 @@ where\n     /// let c = mask.select(a, b);\n     /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n     /// ```\n+    #[inline]\n+    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n+    pub fn select<U>(\n+        self,\n+        true_values: Simd<U, LANES>,\n+        false_values: Simd<U, LANES>,\n+    ) -> Simd<U, LANES>\n+    where\n+        U: SimdElement<Mask = T>,\n+    {\n+        unsafe { intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+    }\n+\n+    /// Choose lanes from two masks.\n+    ///\n+    /// For each lane in the mask, choose the corresponding lane from `true_values` if\n+    /// that lane mask is true, and `false_values` if that lane mask is false.\n     ///\n-    /// `select` can also be used on masks:\n     /// ```\n     /// # #![feature(portable_simd)]\n     /// # #[cfg(feature = \"std\")] use core_simd::Mask;\n     /// # #[cfg(not(feature = \"std\"))] use core::simd::Mask;\n     /// let a = Mask::<i32, 4>::from_array([true, true, false, false]);\n     /// let b = Mask::<i32, 4>::from_array([false, false, true, true]);\n     /// let mask = Mask::<i32, 4>::from_array([true, false, false, true]);\n-    /// let c = mask.select(a, b);\n+    /// let c = mask.select_mask(a, b);\n     /// assert_eq!(c.to_array(), [true, false, true, false]);\n     /// ```\n     #[inline]\n-    #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n-    pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-        S::select(self, true_values, false_values)\n+    #[must_use = \"method returns a new mask and does not mutate the original inputs\"]\n+    pub fn select_mask(self, true_values: Self, false_values: Self) -> Self {\n+        self & true_values | !self & false_values\n     }\n }"}]}