{"sha": "d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZmRmMGFiMjMxZWI2MGQ0YTM4ODk0NGE2YTQ0YWRiODE4YWE5ZmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-17T21:30:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-17T21:30:29Z"}, "message": "Teach copy_ty to finish via memcpy of tydesc-provided size.", "tree": {"sha": "f69b641c63b21c2730ca2ba77a8f64a8fcf60351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69b641c63b21c2730ca2ba77a8f64a8fcf60351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "html_url": "https://github.com/rust-lang/rust/commit/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b281533d4bdd93744562cf1d39ebc090621151", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b281533d4bdd93744562cf1d39ebc090621151", "html_url": "https://github.com/rust-lang/rust/commit/57b281533d4bdd93744562cf1d39ebc090621151"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "8b4add889b325af67401236709896d1076487d9a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fdf0ab231eb60d4a388944a6a44adb818aa9fc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d1fdf0ab231eb60d4a388944a6a44adb818aa9fc", "patch": "@@ -1240,14 +1240,13 @@ fn drop_ty(@block_ctxt cx,\n fn build_memcpy(@block_ctxt cx,\n                 ValueRef dst,\n                 ValueRef src,\n-                TypeRef llty) -> result {\n+                ValueRef n_bytes) -> result {\n     // FIXME: switch to the 64-bit variant when on such a platform.\n     check (cx.fcx.ccx.intrinsics.contains_key(\"llvm.memcpy.p0i8.p0i8.i32\"));\n     auto memcpy = cx.fcx.ccx.intrinsics.get(\"llvm.memcpy.p0i8.p0i8.i32\");\n     auto src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     auto dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n-    auto size = cx.build.IntCast(lib.llvm.llvm.LLVMSizeOf(llty),\n-                                 T_i32());\n+    auto size = cx.build.IntCast(n_bytes, T_i32());\n     auto align = cx.build.IntCast(C_int(1), T_i32());\n \n     // FIXME: align seems like it should be\n@@ -1260,6 +1259,20 @@ fn build_memcpy(@block_ctxt cx,\n                                   size, align, volatile)));\n }\n \n+fn memcpy_ty(@block_ctxt cx,\n+             ValueRef dst,\n+             ValueRef src,\n+             @ty.t t) -> result {\n+    if (ty.type_has_dynamic_size(t)) {\n+        auto llszptr = field_of_tydesc(cx, t, abi.tydesc_field_size);\n+        auto llsz = cx.build.Load(llszptr);\n+        ret build_memcpy(cx, dst, src, llsz);\n+\n+    } else {\n+        ret res(cx, cx.build.Store(cx.build.Load(src), dst));\n+    }\n+}\n+\n fn copy_ty(@block_ctxt cx,\n            bool is_init,\n            ValueRef dst,\n@@ -1278,15 +1291,13 @@ fn copy_ty(@block_ctxt cx,\n         }\n         ret res(r.bcx, r.bcx.build.Store(src, dst));\n \n-    } else if (ty.type_is_structural(t)) {\n+    } else if (ty.type_is_structural(t) ||\n+               ty.type_has_dynamic_size(t)) {\n         auto r = incr_all_refcnts(cx, src, t);\n         if (! is_init) {\n             r = drop_ty(r.bcx, dst, t);\n         }\n-        // In this one surprising case, we do a load/store on\n-        // structure types. This results in a memcpy. Usually\n-        // we talk about structures by pointers in this file.\n-        ret res(r.bcx, r.bcx.build.Store(r.bcx.build.Load(src), dst));\n+        ret memcpy_ty(r.bcx, dst, src, t);\n     }\n \n     cx.fcx.ccx.sess.bug(\"unexpected type in trans.copy_ty: \" +\n@@ -2598,16 +2609,18 @@ impure fn trans_ret(@block_ctxt cx, &option.t[@ast.expr] e) -> result {\n \n     alt (e) {\n         case (some[@ast.expr](?ex)) {\n-            if (ty.type_is_nil(ty.expr_ty(ex))) {\n+            auto t = ty.expr_ty(ex);\n+\n+            if (ty.type_is_nil(t)) {\n                 r.bcx.build.RetVoid();\n                 r.val = C_nil();\n                 ret r;  // FIXME: early return needed due to typestate bug\n             }\n \n             alt (cx.fcx.llretptr) {\n                 case (some[ValueRef](?llptr)) {\n-                    // FIXME: Generic return: Needs to use tydesc.\n-                    // r.bcx.build.Store(r.val, llptr);\n+                    // Generic return via tydesc + retptr.\n+                    r = copy_ty(r.bcx, true, llptr, r.val, t);\n                     r.bcx.build.RetVoid();\n                 }\n                 case (none[ValueRef]) {"}]}