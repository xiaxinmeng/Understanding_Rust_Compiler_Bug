{"sha": "74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YzNiYmFjYzliMzUyMDU3ZjJmYzdhYjY5YmQxM2U1MzAyMmJlYjA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-03T13:58:18Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Make completion resolve async", "tree": {"sha": "32f3407cfb6851539e7ebf6b1c4d77a78c364efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f3407cfb6851539e7ebf6b1c4d77a78c364efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "html_url": "https://github.com/rust-lang/rust/commit/74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "html_url": "https://github.com/rust-lang/rust/commit/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2"}], "stats": {"total": 169, "additions": 116, "deletions": 53}, "files": [{"sha": "dd25ca75c2fbe07c07c8c1886e4f93f2993e8a1d", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -4,10 +4,10 @@ use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n use ide_db::helpers::{\n-    insert_use::{self, ImportScope, MergeBehaviour},\n+    insert_use::{self, ImportScope, ImportScopePtr, MergeBehaviour},\n     mod_path_to_ast,\n };\n-use syntax::{algo, TextRange};\n+use syntax::{algo, SyntaxNode, TextRange};\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -275,7 +275,32 @@ pub struct ImportEdit {\n     pub merge_behaviour: Option<MergeBehaviour>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct ImportEditPtr {\n+    pub import_path: ModPath,\n+    pub import_scope: ImportScopePtr,\n+    pub merge_behaviour: Option<MergeBehaviour>,\n+}\n+\n+impl ImportEditPtr {\n+    pub fn into_import_edit(self, root: &SyntaxNode) -> Option<ImportEdit> {\n+        Some(ImportEdit {\n+            import_path: self.import_path,\n+            import_scope: self.import_scope.into_scope(root)?,\n+            merge_behaviour: self.merge_behaviour,\n+        })\n+    }\n+}\n+\n impl ImportEdit {\n+    pub fn get_edit_ptr(&self) -> ImportEditPtr {\n+        ImportEditPtr {\n+            import_path: self.import_path.clone(),\n+            import_scope: self.import_scope.get_ptr(),\n+            merge_behaviour: self.merge_behaviour,\n+        }\n+    }\n+\n     /// Attempts to insert the import to the given scope, producing a text edit.\n     /// May return no edit in edge cases, such as scope already containing the import.\n     pub fn to_text_edit(&self) -> Option<TextEdit> {"}, {"sha": "c277cd466d90f0b5b016eba34d0d1ce5602c83fc", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -18,7 +18,10 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n \n pub use crate::{\n     config::{CompletionConfig, CompletionResolveCapability},\n-    item::{CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, InsertTextFormat},\n+    item::{\n+        CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, ImportEditPtr,\n+        InsertTextFormat,\n+    },\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "c52e53d2750c8cd44b3b811154076e8062eae52d", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n };\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionResolveCapability,\n-    CompletionScore, ImportEdit, InsertTextFormat,\n+    CompletionScore, ImportEdit, ImportEditPtr, InsertTextFormat,\n };\n pub use ide_db::{\n     call_info::CallInfo,"}, {"sha": "0dae9a541ba200b23a6b698c9a7ba8878359b1e2", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n         edit::{AstNodeEdit, IndentLevel},\n         make, AstNode, PathSegmentKind, VisibilityOwner,\n     },\n-    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken,\n+    AstToken, InsertPosition, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxNodePtr, SyntaxToken,\n };\n use test_utils::mark;\n \n@@ -21,6 +21,36 @@ pub enum ImportScope {\n     Module(ast::ItemList),\n }\n \n+impl ImportScope {\n+    pub fn get_ptr(&self) -> ImportScopePtr {\n+        match self {\n+            ImportScope::File(file) => ImportScopePtr::File(SyntaxNodePtr::new(file.syntax())),\n+            ImportScope::Module(module) => {\n+                ImportScopePtr::Module(SyntaxNodePtr::new(module.syntax()))\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub enum ImportScopePtr {\n+    File(SyntaxNodePtr),\n+    Module(SyntaxNodePtr),\n+}\n+\n+impl ImportScopePtr {\n+    pub fn into_scope(self, root: &SyntaxNode) -> Option<ImportScope> {\n+        Some(match self {\n+            ImportScopePtr::File(file_ptr) => {\n+                ImportScope::File(ast::SourceFile::cast(file_ptr.to_node(root))?)\n+            }\n+            ImportScopePtr::Module(module_ptr) => {\n+                ImportScope::File(ast::SourceFile::cast(module_ptr.to_node(root))?)\n+            }\n+        })\n+    }\n+}\n+\n impl ImportScope {\n     pub fn from(syntax: SyntaxNode) -> Option<Self> {\n         if let Some(module) = ast::Module::cast(syntax.clone()) {"}, {"sha": "0fe69b99667ae2adb690e7d449b8de955205ae84", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Change, FileId, ImportEdit};\n+use ide::{Analysis, AnalysisHost, Change, FileId, ImportEditPtr};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -51,11 +51,6 @@ pub(crate) struct Handle<H, C> {\n pub(crate) type ReqHandler = fn(&mut GlobalState, lsp_server::Response);\n pub(crate) type ReqQueue = lsp_server::ReqQueue<(String, Instant), ReqHandler>;\n \n-pub(crate) struct CompletionResolveData {\n-    pub(crate) file_id: FileId,\n-    pub(crate) import_edit: ImportEdit,\n-}\n-\n /// `GlobalState` is the primary mutable state of the language server\n ///\n /// The most interesting components are `vfs`, which stores a consistent\n@@ -74,7 +69,7 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n-    pub(crate) completion_resolve_data: FxHashMap<usize, CompletionResolveData>,\n+    pub(crate) completion_resolve_data: Arc<FxHashMap<usize, ImportEditPtr>>,\n     pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n@@ -96,6 +91,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) completion_resolve_data: Arc<FxHashMap<usize, ImportEditPtr>>,\n }\n \n impl GlobalState {\n@@ -127,7 +123,7 @@ impl GlobalState {\n             config,\n             analysis_host,\n             diagnostics: Default::default(),\n-            completion_resolve_data: FxHashMap::default(),\n+            completion_resolve_data: Arc::new(FxHashMap::default()),\n             mem_docs: FxHashMap::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n@@ -198,6 +194,7 @@ impl GlobalState {\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n             mem_docs: self.mem_docs.clone(),\n             semantic_tokens_cache: Arc::clone(&self.semantic_tokens_cache),\n+            completion_resolve_data: Arc::clone(&self.completion_resolve_data),\n         }\n     }\n "}, {"sha": "1ea1e1f438a38c775e7d03206eba9769cffcbb9d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -5,11 +5,13 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc,\n };\n \n use ide::{\n-    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, ImportEdit, LineIndex,\n-    NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n+    CompletionResolveCapability, FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData,\n+    ImportEdit, LineIndex, NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n+    TextEdit,\n };\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n@@ -34,7 +36,7 @@ use crate::{\n     cargo_target_spec::CargoTargetSpec,\n     config::RustfmtConfig,\n     from_json, from_proto,\n-    global_state::{CompletionResolveData, GlobalState, GlobalStateSnapshot},\n+    global_state::{GlobalState, GlobalStateSnapshot},\n     line_endings::LineEndings,\n     lsp_ext::{self, InlayHint, InlayHintsParams},\n     to_proto, LspError, Result,\n@@ -542,6 +544,7 @@ pub(crate) fn handle_completion(\n ) -> Result<Option<lsp_types::CompletionResponse>> {\n     let _p = profile::span(\"handle_completion\");\n     let snap = global_state.snapshot();\n+    let text_document_url = params.text_document_position.text_document.uri.clone();\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n     let completion_triggered_after_single_colon = {\n         let mut res = false;\n@@ -582,18 +585,15 @@ pub(crate) fn handle_completion(\n \n             if snap.config.completion.resolve_additional_edits_lazily() {\n                 if let Some(import_edit) = item.import_to_add() {\n-                    completion_resolve_data.insert(\n-                        item_index,\n-                        CompletionResolveData {\n-                            file_id: position.file_id,\n-                            import_edit: import_edit.clone(),\n-                        },\n-                    );\n-\n-                    let item_id = serde_json::to_value(&item_index)\n-                        .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n+                    completion_resolve_data.insert(item_index, import_edit.get_edit_ptr());\n+\n+                    let data = serde_json::to_value(&CompletionData {\n+                        document_url: text_document_url.clone(),\n+                        import_id: item_index,\n+                    })\n+                    .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n                     for new_item in &mut new_completion_items {\n-                        new_item.data = Some(item_id.clone());\n+                        new_item.data = Some(data.clone());\n                     }\n                 }\n             }\n@@ -602,50 +602,54 @@ pub(crate) fn handle_completion(\n         })\n         .collect();\n \n-    global_state.completion_resolve_data = completion_resolve_data;\n+    global_state.completion_resolve_data = Arc::new(completion_resolve_data);\n \n     let completion_list = lsp_types::CompletionList { is_incomplete: true, items };\n     Ok(Some(completion_list.into()))\n }\n \n pub(crate) fn handle_completion_resolve(\n-    global_state: &mut GlobalState,\n+    snap: GlobalStateSnapshot,\n     mut original_completion: lsp_types::CompletionItem,\n ) -> Result<lsp_types::CompletionItem> {\n     let _p = profile::span(\"handle_resolve_completion\");\n \n-    let active_resolve_caps = &global_state.config.completion.active_resolve_capabilities;\n-    if active_resolve_caps.is_empty() {\n+    // FIXME resolve the other capabilities also?\n+    if !snap\n+        .config\n+        .completion\n+        .active_resolve_capabilities\n+        .contains(&CompletionResolveCapability::AdditionalTextEdits)\n+    {\n         return Ok(original_completion);\n     }\n \n-    let server_completion_data = match original_completion\n+    let (import_edit_ptr, document_url) = match original_completion\n         .data\n         .as_ref()\n-        .map(|data| serde_json::from_value::<usize>(data.clone()))\n+        .map(|data| serde_json::from_value::<CompletionData>(data.clone()))\n         .transpose()?\n-        .and_then(|server_completion_id| {\n-            global_state.completion_resolve_data.get(&server_completion_id)\n+        .and_then(|data| {\n+            let import_edit_ptr = snap.completion_resolve_data.get(&data.import_id).cloned();\n+            Some((import_edit_ptr, data.document_url))\n         }) {\n         Some(data) => data,\n         None => return Ok(original_completion),\n     };\n \n-    let snap = &global_state.snapshot();\n-    for supported_completion_resolve_cap in active_resolve_caps {\n-        match supported_completion_resolve_cap {\n-            // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n-            ide::CompletionResolveCapability::AdditionalTextEdits => {\n-                append_import_edits(\n-                    &mut original_completion,\n-                    &server_completion_data.import_edit,\n-                    snap.analysis.file_line_index(server_completion_data.file_id)?.as_ref(),\n-                    snap.file_line_endings(server_completion_data.file_id),\n-                );\n-            }\n-            // FIXME resolve the other capabilities also?\n-            _ => {}\n-        }\n+    let file_id = from_proto::file_id(&snap, &document_url)?;\n+    let root = snap.analysis.parse(file_id)?;\n+\n+    if let Some(import_to_add) =\n+        import_edit_ptr.and_then(|import_edit| import_edit.into_import_edit(root.syntax()))\n+    {\n+        // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n+        append_import_edits(\n+            &mut original_completion,\n+            &import_to_add,\n+            snap.analysis.file_line_index(file_id)?.as_ref(),\n+            snap.file_line_endings(file_id),\n+        );\n     }\n \n     Ok(original_completion)\n@@ -1609,6 +1613,12 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n     }\n }\n \n+#[derive(Debug, Serialize, Deserialize)]\n+struct CompletionData {\n+    document_url: Url,\n+    import_id: usize,\n+}\n+\n fn append_import_edits(\n     completion: &mut lsp_types::CompletionItem,\n     import_to_add: &ImportEdit,"}, {"sha": "aad37fde15d3db19b07ba18dddbcc3f21ef0f2f4", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74c3bbacc9b352057f2fc7ab69bd13e53022beb0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=74c3bbacc9b352057f2fc7ab69bd13e53022beb0", "patch": "@@ -437,9 +437,7 @@ impl GlobalState {\n             })?\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n             .on_sync::<lsp_types::request::Completion>(handlers::handle_completion)?\n-            .on_sync::<lsp_types::request::ResolveCompletionItem>(\n-                handlers::handle_completion_resolve,\n-            )?\n+            .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_completion_resolve)\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)"}]}