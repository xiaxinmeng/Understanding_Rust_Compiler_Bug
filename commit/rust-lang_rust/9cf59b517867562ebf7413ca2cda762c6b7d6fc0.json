{"sha": "9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjU5YjUxNzg2NzU2MmViZjc0MTNjYTJjZGE3NjJjNmI3ZDZmYzA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T21:22:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-01T22:00:28Z"}, "message": "Remove some unnecessary renamings of constants.", "tree": {"sha": "c34dca26fbfe5ab75cea2e07d72bb0365e94ad7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34dca26fbfe5ab75cea2e07d72bb0365e94ad7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "html_url": "https://github.com/rust-lang/rust/commit/9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf59b517867562ebf7413ca2cda762c6b7d6fc0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d541a60abd7941fb19996c0327a1229d4bcbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d541a60abd7941fb19996c0327a1229d4bcbbe", "html_url": "https://github.com/rust-lang/rust/commit/e6d541a60abd7941fb19996c0327a1229d4bcbbe"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "6150017f957b220954327cdb550dc632a7981509", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cf59b517867562ebf7413ca2cda762c6b7d6fc0/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf59b517867562ebf7413ca2cda762c6b7d6fc0/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=9cf59b517867562ebf7413ca2cda762c6b7d6fc0", "patch": "@@ -31,10 +31,6 @@ use syntax::symbol::{Symbol, sym};\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n-const MODULE: Symbol = sym::module;\n-const CFG: Symbol = sym::cfg;\n-const KIND: Symbol = sym::kind;\n-\n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n@@ -71,7 +67,7 @@ impl AssertModuleSource<'tcx> {\n         } else if attr.check_name(ATTR_PARTITION_CODEGENED) {\n             (CguReuse::No, ComparisonKind::Exact)\n         } else if attr.check_name(ATTR_EXPECTED_CGU_REUSE) {\n-            match &self.field(attr, KIND).as_str()[..] {\n+            match &self.field(attr, sym::kind).as_str()[..] {\n                 \"no\" => (CguReuse::No, ComparisonKind::Exact),\n                 \"pre-lto\" => (CguReuse::PreLto, ComparisonKind::Exact),\n                 \"post-lto\" => (CguReuse::PostLto, ComparisonKind::Exact),\n@@ -98,7 +94,7 @@ impl AssertModuleSource<'tcx> {\n             return;\n         }\n \n-        let user_path = self.field(attr, MODULE).as_str().to_string();\n+        let user_path = self.field(attr, sym::module).as_str().to_string();\n         let crate_name = self.tcx.crate_name(LOCAL_CRATE).as_str().to_string();\n \n         if !user_path.starts_with(&crate_name) {\n@@ -125,7 +121,7 @@ impl AssertModuleSource<'tcx> {\n                                                        cgu_path_components,\n                                                        cgu_special_suffix);\n \n-        debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, MODULE), cgu_name);\n+        debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n         if !self.available_cgus.contains(&cgu_name) {\n             self.tcx.sess.span_err(attr.span,\n@@ -169,7 +165,7 @@ impl AssertModuleSource<'tcx> {\n     /// cfg flag called `foo`.\n     fn check_config(&self, attr: &ast::Attribute) -> bool {\n         let config = &self.tcx.sess.parse_sess.config;\n-        let value = self.field(attr, CFG);\n+        let value = self.field(attr, sym::cfg);\n         debug!(\"check_config(config={:?}, value={:?})\", config, value);\n         if config.iter().any(|&(name, _)| name == value) {\n             debug!(\"check_config: matched\");"}]}