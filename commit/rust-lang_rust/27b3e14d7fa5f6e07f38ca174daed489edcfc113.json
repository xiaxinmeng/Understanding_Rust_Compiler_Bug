{"sha": "27b3e14d7fa5f6e07f38ca174daed489edcfc113", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YjNlMTRkN2ZhNWY2ZTA3ZjM4Y2ExNzRkYWVkNDg5ZWRjZmMxMTM=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T09:45:24Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-22T08:56:10Z"}, "message": "Cleanup write_run_finish().", "tree": {"sha": "b8c296a3a317e616e239467bec4f5c92ed95ded1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c296a3a317e616e239467bec4f5c92ed95ded1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b3e14d7fa5f6e07f38ca174daed489edcfc113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b3e14d7fa5f6e07f38ca174daed489edcfc113", "html_url": "https://github.com/rust-lang/rust/commit/27b3e14d7fa5f6e07f38ca174daed489edcfc113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b3e14d7fa5f6e07f38ca174daed489edcfc113/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2056a7e3e52b2aec41662cfd960e0eafe8494c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2056a7e3e52b2aec41662cfd960e0eafe8494c", "html_url": "https://github.com/rust-lang/rust/commit/5d2056a7e3e52b2aec41662cfd960e0eafe8494c"}], "stats": {"total": 28, "additions": 4, "deletions": 24}, "files": [{"sha": "86a92f0ac8f62ec274cdfab64dab8d0b8c064a52", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27b3e14d7fa5f6e07f38ca174daed489edcfc113/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b3e14d7fa5f6e07f38ca174daed489edcfc113/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=27b3e14d7fa5f6e07f38ca174daed489edcfc113", "patch": "@@ -624,34 +624,14 @@ impl<T: Writer> ConsoleTestState<T> {\n         Ok(())\n     }\n \n-    pub fn write_run_finish(&mut self,\n-                            ratchet_metrics: &Option<Path>,\n-                            ratchet_pct: Option<f64>) -> io::IoResult<bool> {\n+    pub fn write_run_finish(&mut self) -> io::IoResult<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n-        let ratchet_success = match *ratchet_metrics {\n-            None => true,\n-            Some(ref pth) => {\n-                try!(self.write_plain(format!(\"\\nusing metrics ratchet: {:?}\\n\",\n-                                              pth.display()).as_slice()));\n-                match ratchet_pct {\n-                    None => (),\n-                    Some(pct) =>\n-                        try!(self.write_plain(format!(\"with noise-tolerance \\\n-                                                         forced to: {}%\\n\",\n-                                                        pct).as_slice()))\n-                }\n-                true\n-            }\n-        };\n-\n-        let test_success = self.failed == 0u;\n-        if !test_success {\n+        let success = self.failed == 0u;\n+        if !success {\n             try!(self.write_failures());\n         }\n \n-        let success = ratchet_success && test_success;\n-\n         try!(self.write_plain(\"\\ntest result: \"));\n         if success {\n             // There's no parallelism at this point so it's safe to use color\n@@ -745,7 +725,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn> ) -> io::IoR\n         None => {}\n     }\n     try!(run_tests(opts, tests, |x| callback(&x, &mut st)));\n-    return st.write_run_finish(&None, None);\n+    return st.write_run_finish();\n }\n \n #[test]"}]}