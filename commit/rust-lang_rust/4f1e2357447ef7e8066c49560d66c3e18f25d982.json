{"sha": "4f1e2357447ef7e8066c49560d66c3e18f25d982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMWUyMzU3NDQ3ZWY3ZTgwNjZjNDk1NjBkNjZjM2UxOGYyNWQ5ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T20:27:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-27T20:27:40Z"}, "message": "Auto merge of #52336 - ishitatsuyuki:dyn-rollup, r=Mark-Simulacrum\n\nRollup of bare_trait_objects PRs\n\nAll deny attributes were moved into bootstrap so they can be disabled with a line of config.\n\nWarnings for external tools are allowed and it's up to the tool's maintainer to keep it warnings free.\n\nr? @Mark-Simulacrum\ncc @ljedrz @kennytm", "tree": {"sha": "5f064512f997d836e71e05fed4d41f3e8ebd2ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f064512f997d836e71e05fed4d41f3e8ebd2ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f1e2357447ef7e8066c49560d66c3e18f25d982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1e2357447ef7e8066c49560d66c3e18f25d982", "html_url": "https://github.com/rust-lang/rust/commit/4f1e2357447ef7e8066c49560d66c3e18f25d982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f1e2357447ef7e8066c49560d66c3e18f25d982/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53", "html_url": "https://github.com/rust-lang/rust/commit/43e6e2ef6abd28d564fc7a5c0e2b1b8b766adb53"}, {"sha": "62f73dc87c34a99360ba4aacdffe6c8bc320d763", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f73dc87c34a99360ba4aacdffe6c8bc320d763", "html_url": "https://github.com/rust-lang/rust/commit/62f73dc87c34a99360ba4aacdffe6c8bc320d763"}], "stats": {"total": 660, "additions": 315, "deletions": 345}, "files": [{"sha": "7192cae8956e40b5157ac0ea5a34414f99e6d296", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -296,8 +296,10 @@ fn main() {\n         cmd.arg(\"--color=always\");\n     }\n \n-    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() {\n+    if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() && env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none()\n+    {\n         cmd.arg(\"-Dwarnings\");\n+        cmd.arg(\"-Dbare_trait_objects\");\n     }\n \n     if verbose > 1 {"}, {"sha": "8838cdeed8687c1a488fc938a1eabdf47807844c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -12,7 +12,7 @@\n \n use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n use builder::{RunConfig, Builder, ShouldRun, Step};\n-use tool::{self, prepare_tool_cargo};\n+use tool::{self, prepare_tool_cargo, SourceType};\n use {Compiler, Mode};\n use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n@@ -222,7 +222,8 @@ impl Step for Rustdoc {\n                                            Mode::ToolRustc,\n                                            target,\n                                            \"check\",\n-                                           \"src/tools/rustdoc\");\n+                                           \"src/tools/rustdoc\",\n+                                           SourceType::InTree);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);"}, {"sha": "fd3730ffc78de984c8063640c951812aba36fc2c", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -28,7 +28,7 @@ use build_helper::up_to_date;\n \n use util::symlink_dir;\n use builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n-use tool::{self, prepare_tool_cargo, Tool};\n+use tool::{self, prepare_tool_cargo, Tool, SourceType};\n use compile;\n use cache::{INTERNER, Interned};\n use config::Config;\n@@ -814,6 +814,7 @@ impl Step for Rustdoc {\n             target,\n             \"doc\",\n             \"src/tools/rustdoc\",\n+            SourceType::InTree,\n         );\n \n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");"}, {"sha": "7c69197885cf2eaac1f2256809bc35bed9cd0594", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -30,7 +30,7 @@ use compile;\n use dist;\n use flags::Subcommand;\n use native;\n-use tool::{self, Tool};\n+use tool::{self, Tool, SourceType};\n use toolstate::ToolState;\n use util::{self, dylib_path, dylib_path_var};\n use Crate as CargoCrate;\n@@ -222,17 +222,18 @@ impl Step for Cargo {\n             compiler,\n             target: self.host,\n         });\n-        let mut cargo = builder.cargo(compiler, Mode::ToolRustc, self.host, \"test\");\n-        cargo\n-            .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"src/tools/cargo/Cargo.toml\"));\n+        let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 self.host,\n+                                                 \"test\",\n+                                                 \"src/tools/cargo\",\n+                                                 SourceType::Submodule);\n+\n         if !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }\n \n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n         cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n@@ -286,10 +287,8 @@ impl Step for Rls {\n                                                  Mode::ToolRustc,\n                                                  host,\n                                                  \"test\",\n-                                                 \"src/tools/rls\");\n-\n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+                                                 \"src/tools/rls\",\n+                                                 SourceType::Submodule);\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n@@ -341,10 +340,9 @@ impl Step for Rustfmt {\n                                                  Mode::ToolRustc,\n                                                  host,\n                                                  \"test\",\n-                                                 \"src/tools/rustfmt\");\n+                                                 \"src/tools/rustfmt\",\n+                                                 SourceType::Submodule);\n \n-        // Don't build tests dynamically, just a pain to work with\n-        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         cargo.env(\"RUSTFMT_TEST_DIR\", dir);\n@@ -392,13 +390,14 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let Some(miri) = miri {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n-            cargo\n-                .arg(\"--manifest-path\")\n-                .arg(builder.src.join(\"src/tools/miri/Cargo.toml\"));\n+            let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/miri\",\n+                                                 SourceType::Submodule);\n \n-            // Don't build tests dynamically, just a pain to work with\n-            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n             // miri tests need to know about the stage sysroot\n             cargo.env(\"MIRI_SYSROOT\", builder.sysroot(compiler));\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n@@ -450,13 +449,14 @@ impl Step for Clippy {\n             extra_features: Vec::new(),\n         });\n         if let Some(clippy) = clippy {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"test\");\n-            cargo\n-                .arg(\"--manifest-path\")\n-                .arg(builder.src.join(\"src/tools/clippy/Cargo.toml\"));\n+            let mut cargo = tool::prepare_tool_cargo(builder,\n+                                                 compiler,\n+                                                 Mode::ToolRustc,\n+                                                 host,\n+                                                 \"test\",\n+                                                 \"src/tools/clippy\",\n+                                                 SourceType::Submodule);\n \n-            // Don't build tests dynamically, just a pain to work with\n-            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n             // clippy tests need to know about the stage sysroot\n             cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n             cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n@@ -1739,7 +1739,8 @@ impl Step for CrateRustdoc {\n                                                  Mode::ToolRustc,\n                                                  target,\n                                                  test_kind.subcommand(),\n-                                                 \"src/tools/rustdoc\");\n+                                                 \"src/tools/rustdoc\",\n+                                                 SourceType::InTree);\n         if test_kind.subcommand() == \"test\" && !builder.fail_fast {\n             cargo.arg(\"--no-fail-fast\");\n         }"}, {"sha": "5e68b797b3d54fe4a80b7e8a5724e410e29e6a12", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -75,14 +75,21 @@ impl Step for CleanTools {\n     }\n }\n \n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n+pub enum SourceType {\n+    InTree,\n+    Submodule,\n+}\n+\n #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n struct ToolBuild {\n     compiler: Compiler,\n     target: Interned<String>,\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n-    is_ext_tool: bool,\n+    is_optional_tool: bool,\n+    source_type: SourceType,\n     extra_features: Vec<String>,\n }\n \n@@ -102,7 +109,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n-        let is_ext_tool = self.is_ext_tool;\n+        let is_optional_tool = self.is_optional_tool;\n \n         match self.mode {\n             Mode::ToolRustc => {\n@@ -115,7 +122,15 @@ impl Step for ToolBuild {\n             _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(builder, compiler, self.mode, target, \"build\", path);\n+        let mut cargo = prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            self.mode,\n+            target,\n+            \"build\",\n+            path,\n+            self.source_type,\n+        );\n         cargo.arg(\"--features\").arg(self.extra_features.join(\" \"));\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n@@ -216,7 +231,7 @@ impl Step for ToolBuild {\n         });\n \n         if !is_expected {\n-            if !is_ext_tool {\n+            if !is_optional_tool {\n                 exit(1);\n             } else {\n                 return None;\n@@ -238,6 +253,7 @@ pub fn prepare_tool_cargo(\n     target: Interned<String>,\n     command: &'static str,\n     path: &'static str,\n+    source_type: SourceType,\n ) -> Command {\n     let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n@@ -247,6 +263,10 @@ pub fn prepare_tool_cargo(\n     // stages and such and it's just easier if they're not dynamically linked.\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n \n+    if source_type == SourceType::Submodule {\n+        cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n+    }\n+\n     if let Some(dir) = builder.openssl_install_dir(target) {\n         cargo.env(\"OPENSSL_STATIC\", \"1\");\n         cargo.env(\"OPENSSL_DIR\", dir);\n@@ -274,7 +294,8 @@ pub fn prepare_tool_cargo(\n }\n \n macro_rules! tool {\n-    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr $(,llvm_tools = $llvm:expr)*;)+) => {\n+    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr\n+        $(,llvm_tools = $llvm:expr)* $(,is_external_tool = $external:expr)*;)+) => {\n         #[derive(Copy, PartialEq, Eq, Clone)]\n         pub enum Tool {\n             $(\n@@ -351,7 +372,12 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n-                    is_ext_tool: false,\n+                    is_optional_tool: false,\n+                    source_type: if false $(|| $external)* {\n+                        SourceType::Submodule\n+                    } else {\n+                        SourceType::InTree\n+                    },\n                     extra_features: Vec::new(),\n                 }).expect(\"expected to build -- essential tool\")\n             }\n@@ -370,7 +396,8 @@ tool!(\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolBootstrap, llvm_tools = true;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolBootstrap;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolBootstrap;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolBootstrap,\n+        is_external_tool = true;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolBootstrap;\n );\n \n@@ -401,7 +428,8 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::ToolStd,\n             path: \"src/tools/remote-test-server\",\n-            is_ext_tool: false,\n+            is_optional_tool: false,\n+            source_type: SourceType::InTree,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -449,12 +477,15 @@ impl Step for Rustdoc {\n             target: builder.config.build,\n         });\n \n-        let mut cargo = prepare_tool_cargo(builder,\n-                                           build_compiler,\n-                                           Mode::ToolRustc,\n-                                           target,\n-                                           \"build\",\n-                                           \"src/tools/rustdoc\");\n+        let mut cargo = prepare_tool_cargo(\n+            builder,\n+            build_compiler,\n+            Mode::ToolRustc,\n+            target,\n+            \"build\",\n+            \"src/tools/rustdoc\",\n+            SourceType::InTree,\n+        );\n \n         // Most tools don't get debuginfo, but rustdoc should.\n         cargo.env(\"RUSTC_DEBUGINFO\", builder.config.rust_debuginfo.to_string())\n@@ -525,7 +556,8 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::ToolRustc,\n             path: \"src/tools/cargo\",\n-            is_ext_tool: false,\n+            is_optional_tool: false,\n+            source_type: SourceType::Submodule,\n             extra_features: Vec::new(),\n         }).expect(\"expected to build -- essential tool\")\n     }\n@@ -574,7 +606,8 @@ macro_rules! tool_extended {\n                     mode: Mode::ToolRustc,\n                     path: $path,\n                     extra_features: $sel.extra_features,\n-                    is_ext_tool: true,\n+                    is_optional_tool: true,\n+                    source_type: SourceType::Submodule,\n                 })\n             }\n         }"}, {"sha": "1cbb8e49bfa15e0579ebeb0e3b37aa0d0bda10db", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};"}, {"sha": "ef619527e064a34d2f8f387881619570393cde5d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -72,7 +72,6 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![needs_allocator]\n-#![deny(bare_trait_objects)]\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(test, allow(deprecated))] // rand"}, {"sha": "d90c22a3b18924496c9967a8e699ac6bc69684fc", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -18,7 +18,7 @@ fn uninhabited() {\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n \n-    let mut a: Weak<Any> = a;  // Unsizing\n+    let mut a: Weak<dyn Any> = a;  // Unsizing\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n }\n@@ -39,7 +39,7 @@ fn slice() {\n #[test]\n fn trait_object() {\n     let a: Arc<u32> = Arc::new(4);\n-    let a: Arc<Any> = a;  // Unsizing\n+    let a: Arc<dyn Any> = a;  // Unsizing\n \n     // Exercise is_dangling() with a DST\n     let mut a = Arc::downgrade(&a);\n@@ -49,7 +49,7 @@ fn trait_object() {\n     let mut b = Weak::<u32>::new();\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n-    let mut b: Weak<Any> = b;  // Unsizing\n+    let mut b: Weak<dyn Any> = b;  // Unsizing\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }"}, {"sha": "0330bda5e3238527c16071d92ebe585888e80311", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -40,7 +40,7 @@ fn test_hash() {\n }\n \n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)\n-    where F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut FnMut(&i32) -> bool) -> bool\n+    where F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut dyn FnMut(&i32) -> bool) -> bool\n {\n     let mut set_a = BTreeSet::new();\n     let mut set_b = BTreeSet::new();"}, {"sha": "91bc778ad4c1ec6b3cb5f6778689e6b748a8e301", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -63,7 +63,7 @@ fn test_boxed_hasher() {\n     5u32.hash(&mut hasher_1);\n     assert_eq!(ordinary_hash, hasher_1.finish());\n \n-    let mut hasher_2 = Box::new(DefaultHasher::new()) as Box<Hasher>;\n+    let mut hasher_2 = Box::new(DefaultHasher::new()) as Box<dyn Hasher>;\n     5u32.hash(&mut hasher_2);\n     assert_eq!(ordinary_hash, hasher_2.finish());\n }"}, {"sha": "9ec7c831444d18d02881e2b11a103da0332cc930", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -18,7 +18,7 @@ fn uninhabited() {\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n \n-    let mut a: Weak<Any> = a;  // Unsizing\n+    let mut a: Weak<dyn Any> = a;  // Unsizing\n     a = a.clone();\n     assert!(a.upgrade().is_none());\n }\n@@ -39,7 +39,7 @@ fn slice() {\n #[test]\n fn trait_object() {\n     let a: Rc<u32> = Rc::new(4);\n-    let a: Rc<Any> = a;  // Unsizing\n+    let a: Rc<dyn Any> = a;  // Unsizing\n \n     // Exercise is_dangling() with a DST\n     let mut a = Rc::downgrade(&a);\n@@ -49,7 +49,7 @@ fn trait_object() {\n     let mut b = Weak::<u32>::new();\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n-    let mut b: Weak<Any> = b;  // Unsizing\n+    let mut b: Weak<dyn Any> = b;  // Unsizing\n     b = b.clone();\n     assert!(b.upgrade().is_none());\n }"}, {"sha": "b3b20715511a7627662d6eac5550f62f6db4508e", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -10,7 +10,6 @@\n \n #![no_std]\n #![allow(unused_attributes)]\n-#![deny(bare_trait_objects)]\n #![unstable(feature = \"alloc_jemalloc\",\n             reason = \"implementation detail of std, does not provide any public API\",\n             issue = \"0\")]"}, {"sha": "64348e05de7db16967708aded5d286e613cd75b1", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -10,7 +10,6 @@\n \n #![no_std]\n #![allow(unused_attributes)]\n-#![deny(bare_trait_objects)]\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\","}, {"sha": "0f4a5d16e1759aa1a4a0f957930fc5b02235c757", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -30,7 +30,6 @@\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]\n-#![deny(bare_trait_objects)]\n \n extern crate alloc;\n extern crate rustc_data_structures;"}, {"sha": "6b26093439e4f509925d0be5eff19329f554b6b8", "filename": "src/libcore/any.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -120,7 +120,7 @@ impl<T: 'static + ?Sized > Any for T {\n ///////////////////////////////////////////////////////////////////////////////\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Debug for Any {\n+impl fmt::Debug for dyn Any {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n@@ -130,20 +130,20 @@ impl fmt::Debug for Any {\n // hence used with `unwrap`. May eventually no longer be needed if\n // dispatch works with upcasting.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl fmt::Debug for Any + Send {\n+impl fmt::Debug for dyn Any + Send {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n-impl fmt::Debug for Any + Send + Sync {\n+impl fmt::Debug for dyn Any + Send + Sync {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n-impl Any {\n+impl dyn Any {\n     /// Returns `true` if the boxed type is the same as `T`.\n     ///\n     /// # Examples\n@@ -203,7 +203,7 @@ impl Any {\n     pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&*(self as *const Any as *const T))\n+                Some(&*(self as *const dyn Any as *const T))\n             }\n         } else {\n             None\n@@ -240,15 +240,15 @@ impl Any {\n     pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&mut *(self as *mut Any as *mut T))\n+                Some(&mut *(self as *mut dyn Any as *mut T))\n             }\n         } else {\n             None\n         }\n     }\n }\n \n-impl Any+Send {\n+impl dyn Any+Send {\n     /// Forwards to the method defined on the type `Any`.\n     ///\n     /// # Examples\n@@ -332,7 +332,7 @@ impl Any+Send {\n     }\n }\n \n-impl Any+Send+Sync {\n+impl dyn Any+Send+Sync {\n     /// Forwards to the method defined on the type `Any`.\n     ///\n     /// # Examples"}, {"sha": "137e9fe2c1533e251a09e54c6c0a86879c7d4332", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -1532,7 +1532,7 @@ impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n #[allow(unused)]\n fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n-    let _: UnsafeCell<&Send> = a;\n-    let _: Cell<&Send> = b;\n-    let _: RefCell<&Send> = c;\n+    let _: UnsafeCell<&dyn Send> = a;\n+    let _: Cell<&dyn Send> = b;\n+    let _: RefCell<&dyn Send> = c;\n }"}, {"sha": "3c5f934d4d8c795ce9b5842a18b62032422c961f", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -11,7 +11,7 @@\n use fmt;\n \n struct PadAdapter<'a> {\n-    buf: &'a mut (fmt::Write + 'a),\n+    buf: &'a mut (dyn fmt::Write + 'a),\n     on_newline: bool,\n }\n \n@@ -107,7 +107,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>,\n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n+    pub fn field(&mut self, name: &str, value: &dyn fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -204,7 +204,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn field(&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n+    pub fn field(&mut self, value: &dyn fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.fields > 0 {\n                 (\",\", \" \")\n@@ -258,7 +258,7 @@ struct DebugInner<'a, 'b: 'a> {\n }\n \n impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n-    fn entry(&mut self, entry: &fmt::Debug) {\n+    fn entry(&mut self, entry: &dyn fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut slot = None;\n@@ -340,7 +340,7 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n@@ -411,7 +411,7 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n     /// Adds a new entry to the list output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b> {\n+    pub fn entry(&mut self, entry: &dyn fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n@@ -482,7 +482,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n-    pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n+    pub fn entry(&mut self, key: &dyn fmt::Debug, value: &dyn fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut slot = None;"}, {"sha": "928f95e3ba2ea2a65c7cc2fa1aab225d2588dbec", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -255,7 +255,7 @@ pub struct Formatter<'a> {\n     width: Option<usize>,\n     precision: Option<usize>,\n \n-    buf: &'a mut (Write+'a),\n+    buf: &'a mut (dyn Write+'a),\n     curarg: slice::Iter<'a, ArgumentV1<'a>>,\n     args: &'a [ArgumentV1<'a>],\n }\n@@ -272,7 +272,7 @@ struct Void {\n     ///\n     /// It was added after #45197 showed that one could share a `!Sync`\n     /// object across threads by passing it into `format_args!`.\n-    _oibit_remover: PhantomData<*mut Fn()>,\n+    _oibit_remover: PhantomData<*mut dyn Fn()>,\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n@@ -1020,7 +1020,7 @@ pub trait UpperExp {\n ///\n /// [`write!`]: ../../std/macro.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn write(output: &mut Write, args: Arguments) -> Result {\n+pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n         width: None,\n@@ -1062,7 +1062,7 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n \n impl<'a> Formatter<'a> {\n     fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n-        where 'b: 'c, F: FnOnce(&'b mut (Write+'b)) -> &'c mut (Write+'c)\n+        where 'b: 'c, F: FnOnce(&'b mut (dyn Write+'b)) -> &'c mut (dyn Write+'c)\n     {\n         Formatter {\n             // We want to change this\n@@ -1342,7 +1342,7 @@ impl<'a> Formatter<'a> {\n     }\n \n     fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n-        fn write_bytes(buf: &mut Write, s: &[u8]) -> Result {\n+        fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n "}, {"sha": "48c6eb94144296ec7c4785171ec7223337b638b7", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -18,7 +18,7 @@ use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhi\n use super::{Zip, Sum, Product};\n use super::{ChainState, FromIterator, ZipImpl};\n \n-fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n+fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n \n /// An interface for dealing with iterators.\n ///"}, {"sha": "17cac5aa0a05fd1e5a4eed9ca078f29c9a6533dd", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -43,7 +43,7 @@ use fmt;\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n-    payload: &'a (Any + Send),\n+    payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n     location: Location<'a>,\n }\n@@ -64,7 +64,7 @@ impl<'a> PanicInfo<'a> {\n \n     #[doc(hidden)]\n     #[inline]\n-    pub fn set_payload(&mut self, info: &'a (Any + Send)) {\n+    pub fn set_payload(&mut self, info: &'a (dyn Any + Send)) {\n         self.payload = info;\n     }\n \n@@ -86,7 +86,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn payload(&self) -> &(Any + Send) {\n+    pub fn payload(&self) -> &(dyn Any + Send) {\n         self.payload\n     }\n \n@@ -270,6 +270,6 @@ impl<'a> fmt::Display for Location<'a> {\n #[unstable(feature = \"std_internals\", issue = \"0\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n-    fn box_me_up(&mut self) -> *mut (Any + Send);\n-    fn get(&mut self) -> &(Any + Send);\n+    fn box_me_up(&mut self) -> *mut (dyn Any + Send);\n+    fn get(&mut self) -> &(dyn Any + Send);\n }"}, {"sha": "1fc975cb178819d9584c8c3604ea36fab5b93a08", "filename": "src/libcore/task/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftask%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftask%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fcontext.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,7 +21,7 @@ use super::{Executor, Waker, LocalWaker};\n /// when performing a single `poll` step on a task.\n pub struct Context<'a> {\n     local_waker: &'a LocalWaker,\n-    executor: &'a mut Executor,\n+    executor: &'a mut dyn Executor,\n }\n \n impl<'a> fmt::Debug for Context<'a> {\n@@ -34,7 +34,7 @@ impl<'a> fmt::Debug for Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new task `Context` with the provided `local_waker`, `waker`, and `executor`.\n     #[inline]\n-    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut Executor) -> Context<'a> {\n+    pub fn new(local_waker: &'a LocalWaker, executor: &'a mut dyn Executor) -> Context<'a> {\n         Context {\n             local_waker,\n             executor,\n@@ -58,7 +58,7 @@ impl<'a> Context<'a> {\n     /// This method is useful primarily if you want to explicitly handle\n     /// spawn failures.\n     #[inline]\n-    pub fn executor(&mut self) -> &mut Executor {\n+    pub fn executor(&mut self) -> &mut dyn Executor {\n         self.executor\n     }\n "}, {"sha": "321b432d3f4307b7c29681caddda75b5453bf2c3", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -23,7 +23,7 @@ use ptr::NonNull;\n /// trait, allowing notifications to get routed through it.\n #[repr(transparent)]\n pub struct Waker {\n-    inner: NonNull<UnsafeWake>,\n+    inner: NonNull<dyn UnsafeWake>,\n }\n \n impl Unpin for Waker {}\n@@ -41,7 +41,7 @@ impl Waker {\n     /// use the `Waker::from` function instead which works with the safe\n     /// `Arc` type and the safe `Wake` trait.\n     #[inline]\n-    pub unsafe fn new(inner: NonNull<UnsafeWake>) -> Self {\n+    pub unsafe fn new(inner: NonNull<dyn UnsafeWake>) -> Self {\n         Waker { inner: inner }\n     }\n \n@@ -98,7 +98,7 @@ impl Drop for Waker {\n /// behavior.\n #[repr(transparent)]\n pub struct LocalWaker {\n-    inner: NonNull<UnsafeWake>,\n+    inner: NonNull<dyn UnsafeWake>,\n }\n \n impl Unpin for LocalWaker {}\n@@ -119,7 +119,7 @@ impl LocalWaker {\n     /// For this function to be used safely, it must be sound to call `inner.wake_local()`\n     /// on the current thread.\n     #[inline]\n-    pub unsafe fn new(inner: NonNull<UnsafeWake>) -> Self {\n+    pub unsafe fn new(inner: NonNull<dyn UnsafeWake>) -> Self {\n         LocalWaker { inner: inner }\n     }\n "}, {"sha": "a80bf93953039fe91afeee3f4d451ef23314ca2a", "filename": "src/libcore/tests/any.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fany.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -17,7 +17,7 @@ static TEST: &'static str = \"Test\";\n \n #[test]\n fn any_referenced() {\n-    let (a, b, c) = (&5 as &Any, &TEST as &Any, &Test as &Any);\n+    let (a, b, c) = (&5 as &dyn Any, &TEST as &dyn Any, &Test as &dyn Any);\n \n     assert!(a.is::<i32>());\n     assert!(!b.is::<i32>());\n@@ -34,7 +34,11 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) = (box 5_usize as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n+    let (a, b, c) = (\n+        box 5_usize as Box<dyn Any>,\n+        box TEST as Box<dyn Any>,\n+        box Test as Box<dyn Any>,\n+    );\n \n     assert!(a.is::<usize>());\n     assert!(!b.is::<usize>());\n@@ -51,7 +55,7 @@ fn any_owning() {\n \n #[test]\n fn any_downcast_ref() {\n-    let a = &5_usize as &Any;\n+    let a = &5_usize as &dyn Any;\n \n     match a.downcast_ref::<usize>() {\n         Some(&5) => {}\n@@ -69,9 +73,9 @@ fn any_downcast_mut() {\n     let mut a = 5_usize;\n     let mut b: Box<_> = box 7_usize;\n \n-    let a_r = &mut a as &mut Any;\n+    let a_r = &mut a as &mut dyn Any;\n     let tmp: &mut usize = &mut *b;\n-    let b_r = tmp as &mut Any;\n+    let b_r = tmp as &mut dyn Any;\n \n     match a_r.downcast_mut::<usize>() {\n         Some(x) => {\n@@ -113,7 +117,7 @@ fn any_downcast_mut() {\n #[test]\n fn any_fixed_vec() {\n     let test = [0_usize; 8];\n-    let test = &test as &Any;\n+    let test = &test as &dyn Any;\n     assert!(test.is::<[usize; 8]>());\n     assert!(!test.is::<[usize; 10]>());\n }"}, {"sha": "85c9d41b65b591d255ccc2666fb3c352c4bce548", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -128,7 +128,7 @@ fn test_custom_state() {\n fn test_indirect_hasher() {\n     let mut hasher = MyHasher { hash: 0 };\n     {\n-        let mut indirect_hasher: &mut Hasher = &mut hasher;\n+        let mut indirect_hasher: &mut dyn Hasher = &mut hasher;\n         5u32.hash(&mut indirect_hasher);\n     }\n     assert_eq!(hasher.hash, 5);"}, {"sha": "9f3cba26a62db894e11bf72ae7204dda47fe4a65", "filename": "src/libcore/tests/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fintrinsics.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -22,7 +22,7 @@ fn test_typeid_sized_types() {\n #[test]\n fn test_typeid_unsized_types() {\n     trait Z {}\n-    struct X(str); struct Y(Z + 'static);\n+    struct X(str); struct Y(dyn Z + 'static);\n \n     assert_eq!(TypeId::of::<X>(), TypeId::of::<X>());\n     assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());"}, {"sha": "714f2babbdff685ff73af76cb22f4a6a8dbab795", "filename": "src/libcore/tests/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fmem.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -109,11 +109,11 @@ fn test_transmute() {\n     trait Foo { fn dummy(&self) { } }\n     impl Foo for isize {}\n \n-    let a = box 100isize as Box<Foo>;\n+    let a = box 100isize as Box<dyn Foo>;\n     unsafe {\n         let x: ::core::raw::TraitObject = transmute(a);\n         assert!(*(x.data as *const isize) == 100);\n-        let _x: Box<Foo> = transmute(x);\n+        let _x: Box<dyn Foo> = transmute(x);\n     }\n \n     unsafe {"}, {"sha": "324ebf435651d79e2145de8aa1a369b6b4e0a0e4", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -240,7 +240,7 @@ fn test_collect() {\n     assert!(v == None);\n \n     // test that it does not take more elements than it needs\n-    let mut functions: [Box<Fn() -> Option<()>>; 3] =\n+    let mut functions: [Box<dyn Fn() -> Option<()>>; 3] =\n         [box || Some(()), box || None, box || panic!()];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();"}, {"sha": "92160910d8f705ab3e0908851ad455147776a82e", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -84,16 +84,16 @@ fn test_is_null() {\n     assert!(nms.is_null());\n \n     // Pointers to unsized types -- trait objects\n-    let ci: *const ToString = &3;\n+    let ci: *const dyn ToString = &3;\n     assert!(!ci.is_null());\n \n-    let mi: *mut ToString = &mut 3;\n+    let mi: *mut dyn ToString = &mut 3;\n     assert!(!mi.is_null());\n \n-    let nci: *const ToString = null::<isize>();\n+    let nci: *const dyn ToString = null::<isize>();\n     assert!(nci.is_null());\n \n-    let nmi: *mut ToString = null_mut::<isize>();\n+    let nmi: *mut dyn ToString = null_mut::<isize>();\n     assert!(nmi.is_null());\n }\n \n@@ -140,16 +140,16 @@ fn test_as_ref() {\n         assert_eq!(nms.as_ref(), None);\n \n         // Pointers to unsized types -- trait objects\n-        let ci: *const ToString = &3;\n+        let ci: *const dyn ToString = &3;\n         assert!(ci.as_ref().is_some());\n \n-        let mi: *mut ToString = &mut 3;\n+        let mi: *mut dyn ToString = &mut 3;\n         assert!(mi.as_ref().is_some());\n \n-        let nci: *const ToString = null::<isize>();\n+        let nci: *const dyn ToString = null::<isize>();\n         assert!(nci.as_ref().is_none());\n \n-        let nmi: *mut ToString = null_mut::<isize>();\n+        let nmi: *mut dyn ToString = null_mut::<isize>();\n         assert!(nmi.as_ref().is_none());\n     }\n }\n@@ -182,10 +182,10 @@ fn test_as_mut() {\n         assert_eq!(nms.as_mut(), None);\n \n         // Pointers to unsized types -- trait objects\n-        let mi: *mut ToString = &mut 3;\n+        let mi: *mut dyn ToString = &mut 3;\n         assert!(mi.as_mut().is_some());\n \n-        let nmi: *mut ToString = null_mut::<isize>();\n+        let nmi: *mut dyn ToString = null_mut::<isize>();\n         assert!(nmi.as_mut().is_none());\n     }\n }"}, {"sha": "0616252c82c89cf35d26e4a6e46f4eb4835ef458", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -81,7 +81,7 @@ fn test_collect() {\n     assert!(v == Err(2));\n \n     // test that it does not take more elements than it needs\n-    let mut functions: [Box<Fn() -> Result<(), isize>>; 3] =\n+    let mut functions: [Box<dyn Fn() -> Result<(), isize>>; 3] =\n         [box || Ok(()), box || Err(1), box || panic!()];\n \n     let v: Result<Vec<()>, isize> = functions.iter_mut().map(|f| (*f)()).collect();"}, {"sha": "3aa09a91e076595178880c623878197b647823c5", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "158d0101515860af76c7562e987267a7818a2102", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -283,8 +283,6 @@\n //!\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "392bf17968fbdfc28f648b7b9f94f2c5d16e403f", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,7 +21,6 @@\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n #![panic_runtime]\n #![allow(unused_features)]\n-#![deny(bare_trait_objects)]\n \n #![feature(core_intrinsics)]\n #![feature(libc)]"}, {"sha": "5c320bb369e709b63024f43b7f00bf846abf29e4", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -22,7 +22,6 @@\n //! More documentation about each implementation can be found in the respective\n //! module.\n \n-#![deny(bare_trait_objects)]\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "bf6e4a3aaa40585cf8b668908b449ae94ca56a65", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -22,7 +22,6 @@\n //! See [the book](../book/first-edition/procedural-macros.html) for more.\n \n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n-#![deny(bare_trait_objects)]\n #![deny(missing_docs)]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","}, {"sha": "6d0d6d115b7163528e3e0a54737ce114124ffe32", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -15,5 +15,4 @@\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n #![allow(unused_features)]\n-#![deny(bare_trait_objects)]\n #![feature(staged_api)]"}, {"sha": "b6cb336648bc7c43542ba442dad4fa29b719841f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -36,8 +36,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "b217d3665a24542306a6dceb838acbf80f7ab428", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n #![feature(rustc_private)]\n \n #[macro_use] extern crate log;"}, {"sha": "08438805a703e759f5823ab6b4a1a7b830dc616b", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -40,8 +40,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "a5a20af0e4e4ae880558ce2a5bbd653984987c65", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -13,7 +13,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n-#![deny(bare_trait_objects)]\n \n #![feature(from_ref)]\n #![feature(quote)]"}, {"sha": "90f96c9687bc146de2642a2a90e0f729c9ac8875", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -23,7 +23,6 @@\n #![feature(custom_attribute)]\n #![feature(fs_read_write)]\n #![allow(unused_attributes)]\n-#![deny(bare_trait_objects)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(range_contains)]"}, {"sha": "f59cf5832fcb4eb7a423364ca8d9059626332c0e", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -20,7 +20,6 @@\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![deny(bare_trait_objects)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n "}, {"sha": "a9e582e510e7850c1248581908af5593882cb24d", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -16,8 +16,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "9e818641dec71b20aa6a17fdf5a0dbd3035868c7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "67d2aa4d770b98af31163b07224e2a91144f2571", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "3839c133a6eb22692d99b1bd8b4597257299c184", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -10,8 +10,6 @@\n \n //! Support for serializing the dep-graph and reloading it.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "78a8c494f48c53e5d4f09c85199608a5921d6c76", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -19,8 +19,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "741758cb954ba4b38e644c4644ddf57f2546e9cb", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -12,7 +12,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n-#![deny(bare_trait_objects)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\","}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "5cba0387d17bb6ba4ff46ae92076c47a6954051e", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "54730ecd75fbd0b8af86a47817fe80d5b04ab5c1", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n */\n \n-#![deny(bare_trait_objects)]\n-\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(from_ref)]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "41f1e7829658ab097353ca1a3fa7b26061d9226b", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "b57debdd99486bda802323fe72cbc624d136d530", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(bad_style)]\n-#![deny(bare_trait_objects)]\n \n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],"}, {"sha": "348aa6a7cef4c7678c85c7e43dde9ca7ea9aef43", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -60,8 +60,6 @@\n //! See the [`plugin` feature](../unstable-book/language-features/plugin.html) of\n //! the Unstable Book for more examples.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "405952065dacb6f9401254a327ace54e86cd2765", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "8130c4e83265604126d22d00f05c761fe9e70d97", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "a250d4a3598c51f07c95035d24f96f6e4524a7cb", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -13,7 +13,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![deny(bare_trait_objects)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "8f4911574398ba84d2f6874f334e371d8e93666f", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,8 +21,6 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "d17cf35f1816ae2eba259d647d775c7c70df132d", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -11,8 +11,6 @@\n //! New recursive solver modeled on Chalk's recursive solver. Most of\n //! the guts are broken up into modules; see the comments in those modules.\n \n-#![deny(bare_trait_objects)]\n-\n #![feature(crate_in_paths)]\n #![feature(crate_visibility_modifier)]\n #![feature(extern_prelude)]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![feature(sanitizer_runtime)]"}, {"sha": "6bf1ec8f697a25f8be88738f6ddfa60ab5a1622d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -70,7 +70,6 @@ This API is completely unstable and subject to change.\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n-#![deny(bare_trait_objects)]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "c601f138d0a21fa556e0d71eb7fb9f79218ebd15", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -375,7 +375,7 @@ impl fmt::Debug for Item {\n \n         let fake = MAX_DEF_ID.with(|m| m.borrow().get(&self.def_id.krate)\n                                    .map(|id| self.def_id >= *id).unwrap_or(false));\n-        let def_id: &fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n+        let def_id: &dyn fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n             .field(\"source\", &self.source)"}, {"sha": "4b8dbaf421138f4dd65fcb18f22b6178caaf508f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -55,7 +55,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     /// The stack of module NodeIds up till this point\n     pub mod_ids: RefCell<Vec<NodeId>>,\n     pub crate_name: Option<String>,\n-    pub cstore: Rc<CrateStore>,\n+    pub cstore: Rc<dyn CrateStore>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing"}, {"sha": "6cf9b143373a8ad26bf09a2f4b07771b8796ff67", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -395,7 +395,7 @@ impl Class {\n \n fn write_header(class: Option<&str>,\n                 id: Option<&str>,\n-                out: &mut Write)\n+                out: &mut dyn Write)\n                 -> io::Result<()> {\n     write!(out, \"<pre \")?;\n     if let Some(id) = id {\n@@ -404,6 +404,6 @@ fn write_header(class: Option<&str>,\n     write!(out, \"class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n }\n \n-fn write_footer(out: &mut Write) -> io::Result<()> {\n+fn write_footer(out: &mut dyn Write) -> io::Result<()> {\n     write!(out, \"</pre>\\n\")\n }"}, {"sha": "af7c0a04215c12f6356698aaef3029192f965ab5", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -32,7 +32,7 @@ pub struct Page<'a> {\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n-    dst: &mut io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n+    dst: &mut dyn io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n     css_file_extension: bool, themes: &[PathBuf])\n     -> io::Result<()>\n {\n@@ -194,7 +194,7 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     )\n }\n \n-pub fn redirect(dst: &mut io::Write, url: &str) -> io::Result<()> {\n+pub fn redirect(dst: &mut dyn io::Write, url: &str) -> io::Result<()> {\n     // <script> triggers a redirect before refresh, so this is fine.\n     write!(dst,\n r##\"<!DOCTYPE html>"}, {"sha": "f137f4acf448655428628abd07ec23b06c222a2d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -1822,7 +1822,7 @@ impl Context {\n     }\n \n     fn render_item(&self,\n-                   writer: &mut io::Write,\n+                   writer: &mut dyn io::Write,\n                    it: &clean::Item,\n                    pushname: bool)\n                    -> io::Result<()> {"}, {"sha": "2966b9e9819b4771724bf3731f6fd9fa7194ad37", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -249,7 +249,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         }\n         fn flush(&mut self) -> io::Result<()> { Ok(()) }\n     }\n-    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n+    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<dyn Write+Send>);\n     impl Drop for Bomb {\n         fn drop(&mut self) {\n             let _ = self.1.write_all(&self.0.lock().unwrap());"}, {"sha": "a5f4b32b329e7c22a51c791035a9cb05d168076d", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n Core encoding and decoding interfaces.\n */\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "29534696abc5be232de994c97448fe71c6e3b398", "filename": "src/libstd/error.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -138,7 +138,7 @@ pub trait Error: Debug + Display {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn cause(&self) -> Option<&Error> { None }\n+    fn cause(&self) -> Option<&dyn Error> { None }\n \n     /// Get the `TypeId` of `self`\n     #[doc(hidden)]\n@@ -151,22 +151,22 @@ pub trait Error: Debug + Display {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + 'a> From<E> for Box<Error + 'a> {\n-    fn from(err: E) -> Box<Error + 'a> {\n+impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n+    fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: E) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl From<String> for Box<Error + Send + Sync> {\n-    fn from(err: String) -> Box<Error + Send + Sync> {\n+impl From<String> for Box<dyn Error + Send + Sync> {\n+    fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n \n@@ -185,38 +185,38 @@ impl From<String> for Box<Error + Send + Sync> {\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl From<String> for Box<Error> {\n-    fn from(str_err: String) -> Box<Error> {\n-        let err1: Box<Error + Send + Sync> = From::from(str_err);\n-        let err2: Box<Error> = err1;\n+impl From<String> for Box<dyn Error> {\n+    fn from(str_err: String) -> Box<dyn Error> {\n+        let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n+        let err2: Box<dyn Error> = err1;\n         err2\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: &'b str) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n-impl<'a> From<&'a str> for Box<Error> {\n-    fn from(err: &'a str) -> Box<Error> {\n+impl<'a> From<&'a str> for Box<dyn Error> {\n+    fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a, 'b> From<Cow<'b, str>> for Box<Error + Send + Sync + 'a> {\n-    fn from(err: Cow<'b, str>) -> Box<Error + Send + Sync + 'a> {\n+impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n+    fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n-impl<'a> From<Cow<'a, str>> for Box<Error> {\n-    fn from(err: Cow<'a, str>) -> Box<Error> {\n+impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n+    fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n@@ -327,7 +327,7 @@ impl<T: Error> Error for Box<T> {\n         Error::description(&**self)\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         Error::cause(&**self)\n     }\n }\n@@ -368,7 +368,7 @@ impl Error for char::ParseCharError {\n }\n \n // copied from any.rs\n-impl Error + 'static {\n+impl dyn Error + 'static {\n     /// Returns true if the boxed type is the same as `T`\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n@@ -390,7 +390,7 @@ impl Error + 'static {\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&*(self as *const Error as *const T))\n+                Some(&*(self as *const dyn Error as *const T))\n             }\n         } else {\n             None\n@@ -404,68 +404,68 @@ impl Error + 'static {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n-                Some(&mut *(self as *mut Error as *mut T))\n+                Some(&mut *(self as *mut dyn Error as *mut T))\n             }\n         } else {\n             None\n         }\n     }\n }\n \n-impl Error + 'static + Send {\n+impl dyn Error + 'static + Send {\n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n-        <Error + 'static>::is::<T>(self)\n+        <dyn Error + 'static>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <Error + 'static>::downcast_ref::<T>(self)\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <Error + 'static>::downcast_mut::<T>(self)\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n }\n \n-impl Error + 'static + Send + Sync {\n+impl dyn Error + 'static + Send + Sync {\n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n-        <Error + 'static>::is::<T>(self)\n+        <dyn Error + 'static>::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {\n-        <Error + 'static>::downcast_ref::<T>(self)\n+        <dyn Error + 'static>::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n-        <Error + 'static>::downcast_mut::<T>(self)\n+        <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n }\n \n-impl Error {\n+impl dyn Error {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n-    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<Error>> {\n+    pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {\n         if self.is::<T>() {\n             unsafe {\n-                let raw: *mut Error = Box::into_raw(self);\n+                let raw: *mut dyn Error = Box::into_raw(self);\n                 Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n@@ -474,30 +474,30 @@ impl Error {\n     }\n }\n \n-impl Error + Send {\n+impl dyn Error + Send {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Error + 'static>(self: Box<Self>)\n-                                        -> Result<Box<T>, Box<Error + Send>> {\n-        let err: Box<Error> = self;\n-        <Error>::downcast(err).map_err(|s| unsafe {\n+                                        -> Result<Box<T>, Box<dyn Error + Send>> {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n             // reapply the Send marker\n-            transmute::<Box<Error>, Box<Error + Send>>(s)\n+            transmute::<Box<dyn Error>, Box<dyn Error + Send>>(s)\n         })\n     }\n }\n \n-impl Error + Send + Sync {\n+impl dyn Error + Send + Sync {\n     #[inline]\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     /// Attempt to downcast the box to a concrete type.\n     pub fn downcast<T: Error + 'static>(self: Box<Self>)\n                                         -> Result<Box<T>, Box<Self>> {\n-        let err: Box<Error> = self;\n-        <Error>::downcast(err).map_err(|s| unsafe {\n+        let err: Box<dyn Error> = self;\n+        <dyn Error>::downcast(err).map_err(|s| unsafe {\n             // reapply the Send+Sync marker\n-            transmute::<Box<Error>, Box<Error + Send + Sync>>(s)\n+            transmute::<Box<dyn Error>, Box<dyn Error + Send + Sync>>(s)\n         })\n     }\n }\n@@ -533,13 +533,13 @@ mod tests {\n     #[test]\n     fn downcasting() {\n         let mut a = A;\n-        let a = &mut a as &mut (Error + 'static);\n+        let a = &mut a as &mut (dyn Error + 'static);\n         assert_eq!(a.downcast_ref::<A>(), Some(&A));\n         assert_eq!(a.downcast_ref::<B>(), None);\n         assert_eq!(a.downcast_mut::<A>(), Some(&mut A));\n         assert_eq!(a.downcast_mut::<B>(), None);\n \n-        let a: Box<Error> = Box::new(A);\n+        let a: Box<dyn Error> = Box::new(A);\n         match a.downcast::<B>() {\n             Ok(..) => panic!(\"expected error\"),\n             Err(e) => assert_eq!(*e.downcast::<A>().unwrap(), A),"}, {"sha": "754e2bbc4122b7f127b679fbaf3e5bda488ac6a3", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -891,7 +891,7 @@ impl Error for IntoStringError {\n         \"C string contained non-utf8 bytes\"\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         Some(&self.error)\n     }\n }"}, {"sha": "02a3ce8b9c4d475a0dcdb366fcdcd44a9344521b", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -83,7 +83,7 @@ enum Repr {\n #[derive(Debug)]\n struct Custom {\n     kind: ErrorKind,\n-    error: Box<error::Error+Send+Sync>,\n+    error: Box<dyn error::Error+Send+Sync>,\n }\n \n /// A list specifying general categories of I/O error.\n@@ -250,12 +250,12 @@ impl Error {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<E>(kind: ErrorKind, error: E) -> Error\n-        where E: Into<Box<error::Error+Send+Sync>>\n+        where E: Into<Box<dyn error::Error+Send+Sync>>\n     {\n         Self::_new(kind, error.into())\n     }\n \n-    fn _new(kind: ErrorKind, error: Box<error::Error+Send+Sync>) -> Error {\n+    fn _new(kind: ErrorKind, error: Box<dyn error::Error+Send+Sync>) -> Error {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n                 kind,\n@@ -373,7 +373,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn get_ref(&self) -> Option<&(error::Error+Send+Sync+'static)> {\n+    pub fn get_ref(&self) -> Option<&(dyn error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -444,7 +444,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn get_mut(&mut self) -> Option<&mut (error::Error+Send+Sync+'static)> {\n+    pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error+Send+Sync+'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -478,7 +478,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n-    pub fn into_inner(self) -> Option<Box<error::Error+Send+Sync>> {\n+    pub fn into_inner(self) -> Option<Box<dyn error::Error+Send+Sync>> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,\n@@ -551,7 +551,7 @@ impl error::Error for Error {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         match self.repr {\n             Repr::Os(..) => None,\n             Repr::Simple(..) => None,"}, {"sha": "8530487484827e5d8d404151a26bcb769eecde4c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -1972,7 +1972,7 @@ impl<T: BufRead> BufRead for Take<T> {\n     }\n }\n \n-fn read_one_byte(reader: &mut Read) -> Option<Result<u8>> {\n+fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {\n     let mut buf = [0];\n     loop {\n         return match reader.read(&mut buf) {\n@@ -2081,7 +2081,7 @@ impl std_error::Error for CharsError {\n             CharsError::Other(ref e) => std_error::Error::description(e),\n         }\n     }\n-    fn cause(&self) -> Option<&std_error::Error> {\n+    fn cause(&self) -> Option<&dyn std_error::Error> {\n         match *self {\n             CharsError::NotUtf8 => None,\n             CharsError::Other(ref e) => e.cause(),"}, {"sha": "fffe8fc559b8192b63c12f7208d23bac9dbf0a89", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,7 +21,7 @@ use thread::LocalKey;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n-    static LOCAL_STDOUT: RefCell<Option<Box<Write + Send>>> = {\n+    static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {\n         RefCell::new(None)\n     }\n }\n@@ -624,7 +624,7 @@ impl<'a> fmt::Debug for StderrLock<'a> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n+pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use panicking::LOCAL_STDERR;\n     use mem;\n     LOCAL_STDERR.with(move |slot| {\n@@ -648,7 +648,7 @@ pub fn set_panic(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n                      with a more general mechanism\",\n            issue = \"0\")]\n #[doc(hidden)]\n-pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n+pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use mem;\n     LOCAL_STDOUT.with(move |slot| {\n         mem::replace(&mut *slot.borrow_mut(), sink)\n@@ -670,7 +670,7 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n     args: fmt::Arguments,\n-    local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n+    local_s: &'static LocalKey<RefCell<Option<Box<dyn Write+Send>>>>,\n     global_s: fn() -> T,\n     label: &str,\n )"}, {"sha": "33f741dbc38f22716aa2762b959be5108c9d7c4a", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -223,7 +223,7 @@ mod tests {\n         assert_eq!(copy(&mut r, &mut w).unwrap(), 4);\n \n         let mut r = repeat(0).take(1 << 17);\n-        assert_eq!(copy(&mut r as &mut Read, &mut w as &mut Write).unwrap(), 1 << 17);\n+        assert_eq!(copy(&mut r as &mut dyn Read, &mut w as &mut dyn Write).unwrap(), 1 << 17);\n     }\n \n     #[test]"}, {"sha": "cf3e5354a3188829309008437541ee13822178a5", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -58,7 +58,7 @@ impl<'a> Parser<'a> {\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T> + 'static>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<dyn FnMut(&mut Parser) -> Option<T> + 'static>])\n                -> Option<T> {\n         for pf in parsers {\n             if let Some(r) = self.read_atomically(|p: &mut Parser| pf(p)) {"}, {"sha": "75c7a3d92809440c48817897331a5909bbf39b45", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -927,7 +927,7 @@ mod tests {\n     use time::{Instant, Duration};\n     use thread;\n \n-    fn each_ip(f: &mut FnMut(SocketAddr)) {\n+    fn each_ip(f: &mut dyn FnMut(SocketAddr)) {\n         f(next_test_ip4());\n         f(next_test_ip6());\n     }"}, {"sha": "0ebe3284b4f0a9de5a8c33d653c77b78341f0f8d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -826,7 +826,7 @@ mod tests {\n     use time::{Instant, Duration};\n     use thread;\n \n-    fn each_ip(f: &mut FnMut(SocketAddr, SocketAddr)) {\n+    fn each_ip(f: &mut dyn FnMut(SocketAddr, SocketAddr)) {\n         f(next_test_ip4(), next_test_ip4());\n         f(next_test_ip6(), next_test_ip6());\n     }"}, {"sha": "b8c1c4f9e68e7602ad5ab3b78679abf3f84e7988", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -421,6 +421,6 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n /// }\n /// ```\n #[stable(feature = \"resume_unwind\", since = \"1.9.0\")]\n-pub fn resume_unwind(payload: Box<Any + Send>) -> ! {\n+pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {\n     panicking::update_count_then_panic(payload)\n }"}, {"sha": "283fd36af41ff4976ca69b7896856a157492077b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -36,7 +36,7 @@ use sys_common::util;\n use thread;\n \n thread_local! {\n-    pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n+    pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {\n         RefCell::new(None)\n     }\n }\n@@ -64,7 +64,7 @@ extern {\n #[derive(Copy, Clone)]\n enum Hook {\n     Default,\n-    Custom(*mut (Fn(&PanicInfo) + 'static + Sync + Send)),\n+    Custom(*mut (dyn Fn(&PanicInfo) + 'static + Sync + Send)),\n }\n \n static HOOK_LOCK: RWLock = RWLock::new();\n@@ -104,7 +104,7 @@ static mut HOOK: Hook = Hook::Default;\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n+pub fn set_hook(hook: Box<dyn Fn(&PanicInfo) + 'static + Sync + Send>) {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -149,7 +149,7 @@ pub fn set_hook(hook: Box<Fn(&PanicInfo) + 'static + Sync + Send>) {\n /// panic!(\"Normal panic\");\n /// ```\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n+pub fn take_hook() -> Box<dyn Fn(&PanicInfo) + 'static + Sync + Send> {\n     if thread::panicking() {\n         panic!(\"cannot modify the panic hook from a panicking thread\");\n     }\n@@ -197,7 +197,7 @@ fn default_hook(info: &PanicInfo) {\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n \n-    let write = |err: &mut ::io::Write| {\n+    let write = |err: &mut dyn (::io::Write)| {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n@@ -248,7 +248,7 @@ pub fn update_panic_count(amt: isize) -> usize {\n pub use realstd::rt::update_panic_count;\n \n /// Invoke a closure, capturing the cause of an unwinding panic if one occurs.\n-pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<Any + Send>> {\n+pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {\n     #[allow(unions_with_drop_fields)]\n     union Data<F, R> {\n         f: F,\n@@ -369,12 +369,12 @@ fn continue_panic_fmt(info: &PanicInfo) -> ! {\n     }\n \n     unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             let contents = mem::replace(self.fill(), String::new());\n             Box::into_raw(Box::new(contents))\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             self.fill()\n         }\n     }\n@@ -419,15 +419,15 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n     }\n \n     unsafe impl<A: Send + 'static> BoxMeUp for PanicPayload<A> {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             let data = match self.inner.take() {\n-                Some(a) => Box::new(a) as Box<Any + Send>,\n+                Some(a) => Box::new(a) as Box<dyn Any + Send>,\n                 None => Box::new(()),\n             };\n             Box::into_raw(data)\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             match self.inner {\n                 Some(ref a) => a,\n                 None => &(),\n@@ -441,7 +441,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// Executes the primary logic for a panic, including checking for recursive\n /// panics, panic hooks, and finally dispatching to the panic runtime to either\n /// abort or unwind.\n-fn rust_panic_with_hook(payload: &mut BoxMeUp,\n+fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n                         file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n@@ -496,17 +496,17 @@ fn rust_panic_with_hook(payload: &mut BoxMeUp,\n }\n \n /// Shim around rust_panic. Called by resume_unwind.\n-pub fn update_count_then_panic(msg: Box<Any + Send>) -> ! {\n+pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n     update_panic_count(1);\n \n-    struct RewrapBox(Box<Any + Send>);\n+    struct RewrapBox(Box<dyn Any + Send>);\n \n     unsafe impl BoxMeUp for RewrapBox {\n-        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+        fn box_me_up(&mut self) -> *mut (dyn Any + Send) {\n             Box::into_raw(mem::replace(&mut self.0, Box::new(())))\n         }\n \n-        fn get(&mut self) -> &(Any + Send) {\n+        fn get(&mut self) -> &(dyn Any + Send) {\n             &*self.0\n         }\n     }\n@@ -517,9 +517,9 @@ pub fn update_count_then_panic(msg: Box<Any + Send>) -> ! {\n /// A private no-mangle function on which to slap yer breakpoints.\n #[no_mangle]\n #[allow(private_no_mangle_fns)] // yes we get it, but we like breakpoints\n-pub fn rust_panic(mut msg: &mut BoxMeUp) -> ! {\n+pub fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n     let code = unsafe {\n-        let obj = &mut msg as *mut &mut BoxMeUp;\n+        let obj = &mut msg as *mut &mut dyn BoxMeUp;\n         __rust_start_panic(obj as usize)\n     };\n     rtabort!(\"failed to initiate panic, error {}\", code)"}, {"sha": "39692836866baab6e7873920c7159ed3bb605be3", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -813,13 +813,13 @@ impl fmt::Debug for Output {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n \n         let stdout_utf8 = str::from_utf8(&self.stdout);\n-        let stdout_debug: &fmt::Debug = match stdout_utf8 {\n+        let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {\n             Ok(ref str) => str,\n             Err(_) => &self.stdout\n         };\n \n         let stderr_utf8 = str::from_utf8(&self.stderr);\n-        let stderr_debug: &fmt::Debug = match stderr_utf8 {\n+        let stderr_debug: &dyn fmt::Debug = match stderr_utf8 {\n             Ok(ref str) => str,\n             Err(_) => &self.stderr\n         };"}, {"sha": "9e957bd87d79e3ac4daa224a43847b63b8709150", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -29,7 +29,7 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work.\n #[cfg(not(test))]\n-fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n+fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n                        argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n     use sys;"}, {"sha": "02a96b01cca28e82ba75d962d6922baa44b3dfca", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -1638,7 +1638,7 @@ impl<T: Send> error::Error for SendError<T> {\n         \"sending on a closed channel\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1681,7 +1681,7 @@ impl<T: Send> error::Error for TrySendError<T> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1709,7 +1709,7 @@ impl error::Error for RecvError {\n         \"receiving on a closed channel\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1742,7 +1742,7 @@ impl error::Error for TryRecvError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }\n@@ -1783,7 +1783,7 @@ impl error::Error for RecvTimeoutError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         None\n     }\n }"}, {"sha": "a7a284cfb7994a766b1d3781c9d5b34e22effdec", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -93,7 +93,7 @@ pub struct Handle<'rx, T:Send+'rx> {\n     next: *mut Handle<'static, ()>,\n     prev: *mut Handle<'static, ()>,\n     added: bool,\n-    packet: &'rx (Packet+'rx),\n+    packet: &'rx (dyn Packet+'rx),\n \n     // due to our fun transmutes, we be sure to place this at the end. (nothing\n     // previous relies on T)"}, {"sha": "10282ecb6588370d35aabf305e49173508d6f12d", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -309,7 +309,7 @@ impl Once {\n     #[cold]\n     fn call_inner(&self,\n                   ignore_poisoning: bool,\n-                  init: &mut FnMut(bool)) {\n+                  init: &mut dyn FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n \n         'outer: loop {"}, {"sha": "8cca47efd22d19bb4e152f79da603410926e1a58", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -32,7 +32,7 @@ unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>) -> io::Result<Thread> {\n+    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>) -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();\n         let mut attr: libc::pthread_attr_t = mem::zeroed();"}, {"sha": "02bc467541ecad6ec4f7c1a158c77b83cf1d19ba", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -51,7 +51,7 @@ pub struct Command {\n     uid: Option<u32>,\n     gid: Option<u32>,\n     saw_nul: bool,\n-    closures: Vec<Box<FnMut() -> io::Result<()> + Send + Sync>>,\n+    closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n     stderr: Option<Stdio>,\n@@ -122,7 +122,7 @@ impl Command {\n     }\n \n     pub fn before_exec(&mut self,\n-                       f: Box<FnMut() -> io::Result<()> + Send + Sync>) {\n+                       f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n         self.closures.push(f);\n     }\n "}, {"sha": "f4177087d77a1e24cd68dc06f0f5e52fa6332583", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -28,7 +28,7 @@ unsafe impl Send for Thread {}\n unsafe impl Sync for Thread {}\n \n impl Thread {\n-    pub unsafe fn new<'a>(_stack: usize, p: Box<FnBox() + 'a>) -> io::Result<Thread> {\n+    pub unsafe fn new<'a>(_stack: usize, p: Box<dyn FnBox() + 'a>) -> io::Result<Thread> {\n         let p = box p;\n \n         let id = cvt(syscall::clone(syscall::CLONE_VM | syscall::CLONE_FS | syscall::CLONE_FILES))?;"}, {"sha": "77f125f3c5b569b2b9597592f09a53a116149cd9", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -52,7 +52,7 @@ pub struct Command {\n     uid: Option<uid_t>,\n     gid: Option<gid_t>,\n     saw_nul: bool,\n-    closures: Vec<Box<FnMut() -> io::Result<()> + Send + Sync>>,\n+    closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,\n     stdin: Option<Stdio>,\n     stdout: Option<Stdio>,\n     stderr: Option<Stdio>,\n@@ -155,12 +155,12 @@ impl Command {\n         self.gid\n     }\n \n-    pub fn get_closures(&mut self) -> &mut Vec<Box<FnMut() -> io::Result<()> + Send + Sync>> {\n+    pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {\n         &mut self.closures\n     }\n \n     pub fn before_exec(&mut self,\n-                       f: Box<FnMut() -> io::Result<()> + Send + Sync>) {\n+                       f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {\n         self.closures.push(f);\n     }\n "}, {"sha": "e26306c045d310aa6b9cd99d685ed6b1c6594623", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -49,7 +49,7 @@ unsafe fn pthread_attr_setstacksize(_attr: *mut libc::pthread_attr_t,\n }\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>)\n+    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)\n                           -> io::Result<Thread> {\n         let p = box p;\n         let mut native: libc::pthread_t = mem::zeroed();"}, {"sha": "8173a62421117d4bb11b034a1bcee3978458a84c", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -19,7 +19,7 @@ pub struct Thread(Void);\n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n-    pub unsafe fn new<'a>(_stack: usize, _p: Box<FnBox() + 'a>)\n+    pub unsafe fn new<'a>(_stack: usize, _p: Box<dyn FnBox() + 'a>)\n         -> io::Result<Thread>\n     {\n         unsupported()"}, {"sha": "44ec872b2446b956d85677a5e5d28f60a4a2bc44", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -28,7 +28,7 @@ pub struct Thread {\n }\n \n impl Thread {\n-    pub unsafe fn new<'a>(stack: usize, p: Box<FnBox() + 'a>)\n+    pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)\n                           -> io::Result<Thread> {\n         let p = box p;\n "}, {"sha": "b28a4d2f8be016f21bcc2f58b2457eea0c921b10", "filename": "src/libstd/sys_common/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fat_exit_imp.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -17,7 +17,7 @@ use ptr;\n use mem;\n use sys_common::mutex::Mutex;\n \n-type Queue = Vec<Box<FnBox()>>;\n+type Queue = Vec<Box<dyn FnBox()>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -68,7 +68,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Box<FnBox()>) -> bool {\n+pub fn push(f: Box<dyn FnBox()>) -> bool {\n     unsafe {\n         let _guard = LOCK.lock();\n         if init() {"}, {"sha": "77371782977b1c6f580d97cee6a5a4c3d4cbb860", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -49,7 +49,7 @@ pub struct Frame {\n const MAX_NB_FRAMES: usize = 100;\n \n /// Prints the current backtrace.\n-pub fn print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n+pub fn print(w: &mut dyn Write, format: PrintFormat) -> io::Result<()> {\n     static LOCK: Mutex = Mutex::new();\n \n     // Use a lock to prevent mixed output in multithreading context.\n@@ -62,7 +62,7 @@ pub fn print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     }\n }\n \n-fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n+fn _print(w: &mut dyn Write, format: PrintFormat) -> io::Result<()> {\n     let mut frames = [Frame {\n         exact_position: ptr::null(),\n         symbol_addr: ptr::null(),\n@@ -176,7 +176,7 @@ pub fn log_enabled() -> Option<PrintFormat> {\n ///\n /// These output functions should now be used everywhere to ensure consistency.\n /// You may want to also use `output_fileline`.\n-fn output(w: &mut Write, idx: usize, frame: Frame,\n+fn output(w: &mut dyn Write, idx: usize, frame: Frame,\n               s: Option<&str>, format: PrintFormat) -> io::Result<()> {\n     // Remove the `17: 0x0 - <unknown>` line.\n     if format == PrintFormat::Short && frame.exact_position == ptr::null() {\n@@ -201,7 +201,7 @@ fn output(w: &mut Write, idx: usize, frame: Frame,\n ///\n /// See also `output`.\n #[allow(dead_code)]\n-fn output_fileline(w: &mut Write,\n+fn output_fileline(w: &mut dyn Write,\n                    file: &[u8],\n                    line: u32,\n                    format: PrintFormat) -> io::Result<()> {\n@@ -253,7 +253,7 @@ fn output_fileline(w: &mut Write,\n // Note that this demangler isn't quite as fancy as it could be. We have lots\n // of other information in our symbols like hashes, version, type information,\n // etc. Additionally, this doesn't handle glue symbols at all.\n-pub fn demangle(writer: &mut Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n+pub fn demangle(writer: &mut dyn Write, mut s: &str, format: PrintFormat) -> io::Result<()> {\n     // During ThinLTO LLVM may import and rename internal symbols, so strip out\n     // those endings first as they're one of the last manglings applied to\n     // symbol names."}, {"sha": "1625efe4a2ae7142a06023a31b1058991a2bcdd8", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -251,7 +251,7 @@ impl<T> Error for TryLockError<T> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         match *self {\n             TryLockError::Poisoned(ref p) => Some(p),\n             _ => None"}, {"sha": "86a5e2b86942a4e6b7740ab158371942fb37a768", "filename": "src/libstd/sys_common/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,7 +21,7 @@ pub unsafe fn start_thread(main: *mut u8) {\n     let _handler = stack_overflow::Handler::new();\n \n     // Finally, let's run some code.\n-    Box::from_raw(main as *mut Box<FnBox()>)()\n+    Box::from_raw(main as *mut Box<dyn FnBox()>)()\n }\n \n pub fn min_stack() -> usize {"}, {"sha": "f7052e4834a8800d9b224c3aa469da5955f3bf19", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -1175,7 +1175,7 @@ impl fmt::Debug for Thread {\n ///\n /// [`Result`]: ../../std/result/enum.Result.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type Result<T> = ::result::Result<T, Box<Any + Send + 'static>>;\n+pub type Result<T> = ::result::Result<T, Box<dyn Any + Send + 'static>>;\n \n // This packet is used to communicate the return value between the child thread\n // and the parent thread. Memory is shared through the `Arc` within and there's\n@@ -1438,7 +1438,7 @@ mod tests {\n         rx.recv().unwrap();\n     }\n \n-    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<Fn() + Send>) {\n+    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<dyn Fn() + Send>) {\n         let (tx, rx) = channel();\n \n         let x: Box<_> = box 1;\n@@ -1485,7 +1485,7 @@ mod tests {\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n         const GENERATIONS: u32 = 16;\n-        fn child_no(x: u32) -> Box<Fn() + Send> {\n+        fn child_no(x: u32) -> Box<dyn Fn() + Send> {\n             return Box::new(move|| {\n                 if x < GENERATIONS {\n                     thread::spawn(move|| child_no(x+1)());\n@@ -1531,10 +1531,10 @@ mod tests {\n     #[test]\n     fn test_try_panic_message_any() {\n         match thread::spawn(move|| {\n-            panic!(box 413u16 as Box<Any + Send>);\n+            panic!(box 413u16 as Box<dyn Any + Send>);\n         }).join() {\n             Err(e) => {\n-                type T = Box<Any + Send>;\n+                type T = Box<dyn Any + Send>;\n                 assert!(e.is::<T>());\n                 let any = e.downcast::<T>().unwrap();\n                 assert!(any.is::<u16>());"}, {"sha": "60de94821bba0ba7b87a9a634ab74c36a4d5fa22", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\","}, {"sha": "f0d33835cd0fbf730754419dee276b3dcaeb0940", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -10,8 +10,6 @@\n \n //! Syntax extensions in the Rust compiler.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "61af70af47d85a42287a303669ffbcdf77977156", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -14,8 +14,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![deny(bare_trait_objects)]\n-\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "cf92ce27ee58732700940a0c940dda19efac3244", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -66,9 +66,9 @@ pub mod terminfo;\n mod win;\n \n /// Alias for stdout terminals.\n-pub type StdoutTerminal = Terminal<Output = Stdout> + Send;\n+pub type StdoutTerminal = dyn Terminal<Output = Stdout> + Send;\n /// Alias for stderr terminals.\n-pub type StderrTerminal = Terminal<Output = Stderr> + Send;\n+pub type StderrTerminal = dyn Terminal<Output = Stderr> + Send;\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be"}, {"sha": "51e0fa315f43538a78fe573d88ec306570ad248a", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -58,7 +58,7 @@ impl error::Error for Error {\n         \"failed to create TermInfo\"\n     }\n \n-    fn cause(&self) -> Option<&error::Error> {\n+    fn cause(&self) -> Option<&dyn error::Error> {\n         use self::Error::*;\n         match self {\n             &IoError(ref e) => Some(e),"}, {"sha": "d5e5df547334c28bfa544ea4e9708113c1cb729f", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -164,7 +164,7 @@ pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tb\n     \"OTG3\", \"OTG1\", \"OTG4\", \"OTGR\", \"OTGL\", \"OTGU\", \"OTGD\", \"OTGH\", \"OTGV\", \"OTGC\", \"meml\", \"memu\",\n     \"box1\"];\n \n-fn read_le_u16(r: &mut io::Read) -> io::Result<u16> {\n+fn read_le_u16(r: &mut dyn io::Read) -> io::Result<u16> {\n     let mut b = [0; 2];\n     let mut amt = 0;\n     while amt < b.len() {\n@@ -176,7 +176,7 @@ fn read_le_u16(r: &mut io::Read) -> io::Result<u16> {\n     Ok((b[0] as u16) | ((b[1] as u16) << 8))\n }\n \n-fn read_byte(r: &mut io::Read) -> io::Result<u8> {\n+fn read_byte(r: &mut dyn io::Read) -> io::Result<u8> {\n     match r.bytes().next() {\n         Some(s) => s,\n         None => Err(io::Error::new(io::ErrorKind::Other, \"end of file\")),\n@@ -185,7 +185,7 @@ fn read_byte(r: &mut io::Read) -> io::Result<u8> {\n \n /// Parse a compiled terminfo entry, using long capability names if `longnames`\n /// is true\n-pub fn parse(file: &mut io::Read, longnames: bool) -> Result<TermInfo, String> {\n+pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, String> {\n     macro_rules! t( ($e:expr) => (\n         match $e {\n             Ok(e) => e,"}, {"sha": "76206e2c10d11b4dd208cf42c66e411558c5208b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -27,8 +27,6 @@\n // this crate, which relies on this attribute (rather than the value of `--crate-name` passed by\n // cargo) to detect this crate.\n \n-#![deny(bare_trait_objects)]\n-\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "2b3c19c067ed4258de5a3da04fc6ae1b754a2168", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(bare_trait_objects)]\n-\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n "}, {"sha": "d77261f49597291024685a535ab2a2dee54f896c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -416,7 +416,7 @@ impl TestProps {\n     }\n }\n \n-fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n+fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }"}, {"sha": "f056a041c13440c2ec748cbfa97975d96622745b", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -21,7 +21,7 @@ mod imp {\n     pub fn read2(\n         out_pipe: ChildStdout,\n         err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         let mut buffer = Vec::new();\n         out_pipe.read_to_end(&mut buffer)?;\n@@ -45,7 +45,7 @@ mod imp {\n     pub fn read2(\n         mut out_pipe: ChildStdout,\n         mut err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         unsafe {\n             libc::fcntl(out_pipe.as_raw_fd(), libc::F_SETFL, libc::O_NONBLOCK);\n@@ -133,7 +133,7 @@ mod imp {\n     pub fn read2(\n         out_pipe: ChildStdout,\n         err_pipe: ChildStderr,\n-        data: &mut FnMut(bool, &mut Vec<u8>, bool),\n+        data: &mut dyn FnMut(bool, &mut Vec<u8>, bool),\n     ) -> io::Result<()> {\n         let mut out = Vec::new();\n         let mut err = Vec::new();"}, {"sha": "e72f90554d3c504bcc144b01f6cda4387912ac36", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -44,18 +44,18 @@ impl OutputFormat {\n }\n \n trait Formatter {\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>>;\n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>>;\n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>>;\n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>>;\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>>;\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n }\n \n struct HTMLFormatter;\n struct MarkdownFormatter;\n \n impl Formatter for HTMLFormatter {\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, r##\"<!DOCTYPE html>\n <html>\n <head>\n@@ -75,13 +75,13 @@ impl Formatter for HTMLFormatter {\n         Ok(())\n     }\n \n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, \"<h1>Rust Compiler Error Index</h1>\\n\")?;\n         Ok(())\n     }\n \n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>> {\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>> {\n         // Enclose each error in a div so they can be shown/hidden en masse.\n         let desc_desc = match info.description {\n             Some(_) => \"error-described\",\n@@ -108,7 +108,7 @@ impl Formatter for HTMLFormatter {\n         Ok(())\n     }\n \n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, r##\"<script>\n function onEach(arr, func) {{\n     if (arr && arr.length > 0 && func) {{\n@@ -174,31 +174,31 @@ onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {{\n \n impl Formatter for MarkdownFormatter {\n     #[allow(unused_variables)]\n-    fn header(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn header(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         Ok(())\n     }\n \n-    fn title(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn title(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         write!(output, \"# Rust Compiler Error Index\\n\")?;\n         Ok(())\n     }\n \n-    fn error_code_block(&self, output: &mut Write, info: &ErrorMetadata,\n-                        err_code: &str) -> Result<(), Box<Error>> {\n+    fn error_code_block(&self, output: &mut dyn Write, info: &ErrorMetadata,\n+                        err_code: &str) -> Result<(), Box<dyn Error>> {\n         Ok(match info.description {\n             Some(ref desc) => write!(output, \"## {}\\n{}\\n\", err_code, desc)?,\n             None => (),\n         })\n     }\n \n     #[allow(unused_variables)]\n-    fn footer(&self, output: &mut Write) -> Result<(), Box<Error>> {\n+    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n         Ok(())\n     }\n }\n \n /// Load all the metadata files from `metadata_dir` into an in-memory map.\n-fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>> {\n+fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<dyn Error>> {\n     let mut all_errors = BTreeMap::new();\n \n     for entry in read_dir(metadata_dir)? {\n@@ -219,7 +219,7 @@ fn load_all_errors(metadata_dir: &Path) -> Result<ErrorMetadataMap, Box<Error>>\n \n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Path,\n-                                   formatter: T) -> Result<(), Box<Error>> {\n+                                   formatter: T) -> Result<(), Box<dyn Error>> {\n     let mut output_file = File::create(output_path)?;\n \n     formatter.header(&mut output_file)?;\n@@ -232,7 +232,7 @@ fn render_error_page<T: Formatter>(err_map: &ErrorMetadataMap, output_path: &Pat\n     formatter.footer(&mut output_file)\n }\n \n-fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<Error>> {\n+fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n     let build_arch = env::var(\"CFG_BUILD\")?;\n     let metadata_dir = get_metadata_dir(&build_arch);\n     let err_map = load_all_errors(&metadata_dir)?;"}, {"sha": "011bf551140a010c9a634d5fac94d81bb70d18ee", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -177,7 +177,7 @@ fn start_qemu_emulator(target: &str,\n         _ => panic!(\"cannot start emulator for: {}\"< target),\n     }\n \n-    fn add_files(w: &mut Write, root: &Path, cur: &Path) {\n+    fn add_files(w: &mut dyn Write, root: &Path, cur: &Path) {\n         for entry in t!(cur.read_dir()) {\n             let entry = t!(entry);\n             let path = entry.path();\n@@ -297,7 +297,7 @@ fn run(files: String, args: Vec<String>) {\n     }\n }\n \n-fn send(path: &Path, dst: &mut Write) {\n+fn send(path: &Path, dst: &mut dyn Write) {\n     t!(dst.write_all(path.file_name().unwrap().to_str().unwrap().as_bytes()));\n     t!(dst.write_all(&[0]));\n     let mut file = t!(File::open(&path));"}, {"sha": "5116f6662ff4dc416b15294b88d2bb9ffa39a114", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -270,7 +270,7 @@ fn recv<B: BufRead>(dir: &Path, io: &mut B) -> PathBuf {\n     return dst\n }\n \n-fn my_copy(src: &mut Read, which: u8, dst: &Mutex<Write>) {\n+fn my_copy(src: &mut dyn Read, which: u8, dst: &Mutex<dyn Write>) {\n     let mut b = [0; 1024];\n     loop {\n         let n = t!(src.read(&mut b));\n@@ -290,7 +290,7 @@ fn my_copy(src: &mut Read, which: u8, dst: &Mutex<Write>) {\n     }\n }\n \n-fn read_u32(r: &mut Read) -> u32 {\n+fn read_u32(r: &mut dyn Read) -> u32 {\n     let mut len = [0; 4];\n     t!(r.read_exact(&mut len));\n     ((len[0] as u32) << 24) |"}, {"sha": "f68ba0b095bd0b72d253efc6de6680fb41cb9996", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -334,7 +334,7 @@ fn get_and_check_lib_features(base_src_path: &Path,\n }\n \n fn map_lib_features(base_src_path: &Path,\n-                    mf: &mut FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n+                    mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n     let mut contents = String::new();\n     super::walk(base_src_path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),"}, {"sha": "bb041b39785ec661446824adc649c169dac191b1", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f1e2357447ef7e8066c49560d66c3e18f25d982/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=4f1e2357447ef7e8066c49560d66c3e18f25d982", "patch": "@@ -82,13 +82,13 @@ fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-fn walk_many(paths: &[&Path], skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+fn walk_many(paths: &[&Path], skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&Path)) {\n     for path in paths {\n         walk(path, skip, f);\n     }\n }\n \n-fn walk(path: &Path, skip: &mut FnMut(&Path) -> bool, f: &mut FnMut(&Path)) {\n+fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&Path)) {\n     for entry in t!(fs::read_dir(path), path) {\n         let entry = t!(entry);\n         let kind = t!(entry.file_type());"}]}