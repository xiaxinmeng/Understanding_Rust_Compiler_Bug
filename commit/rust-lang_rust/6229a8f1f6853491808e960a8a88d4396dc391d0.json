{"sha": "6229a8f1f6853491808e960a8a88d4396dc391d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjlhOGYxZjY4NTM0OTE4MDhlOTYwYThhODhkNDM5NmRjMzkxZDA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-13T15:18:10Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:52:36Z"}, "message": "Elaborate some more on what mutability field means what", "tree": {"sha": "2da7d6d5ee8c5014ec3a8667bc92f796503df3af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da7d6d5ee8c5014ec3a8667bc92f796503df3af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6229a8f1f6853491808e960a8a88d4396dc391d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6229a8f1f6853491808e960a8a88d4396dc391d0", "html_url": "https://github.com/rust-lang/rust/commit/6229a8f1f6853491808e960a8a88d4396dc391d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6229a8f1f6853491808e960a8a88d4396dc391d0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521d38adb5610ac0b8da63469630f44691827a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/521d38adb5610ac0b8da63469630f44691827a3f", "html_url": "https://github.com/rust-lang/rust/commit/521d38adb5610ac0b8da63469630f44691827a3f"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "6ce97ed99ab718c581d1fd9422267b7e5b078989", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6229a8f1f6853491808e960a8a88d4396dc391d0/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6229a8f1f6853491808e960a8a88d4396dc391d0/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=6229a8f1f6853491808e960a8a88d4396dc391d0", "patch": "@@ -181,6 +181,8 @@ for\n                     (InternMode::Const, hir::Mutability::MutMutable) =>\n                         bug!(\"const qualif failed to prevent mutable references\"),\n                 }\n+                // Compute the mutability with which we'll start visiting the allocation. This is\n+                // what gets changed when we encounter an `UnsafeCell`\n                 let mutability = match (self.mutability, mutability) {\n                     // The only way a mutable reference actually works as a mutable reference is\n                     // by being in a `static mut` directly or behind another mutable reference.\n@@ -190,6 +192,7 @@ for\n                     (Mutability::Mutable, hir::Mutability::MutMutable) => Mutability::Mutable,\n                     _ => Mutability::Immutable,\n                 };\n+                // Compute the mutability of the allocation\n                 let intern_mutability = intern_mutability(\n                     self.ecx.tcx.tcx,\n                     self.param_env,\n@@ -244,6 +247,7 @@ pub fn intern_const_alloc_recursive(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> InterpResult<'tcx> {\n     let tcx = ecx.tcx;\n+    // this `mutability` is the mutability of the place, ignoring the type\n     let (mutability, base_intern_mode) = match tcx.static_mutability(def_id) {\n         Some(hir::Mutability::MutImmutable) => (Mutability::Immutable, InternMode::Static),\n         None => (Mutability::Immutable, InternMode::ConstBase),\n@@ -255,6 +259,10 @@ pub fn intern_const_alloc_recursive(\n     let mut ref_tracking = RefTracking::new((ret, mutability, base_intern_mode));\n     let leftover_relocations = &mut FxHashSet::default();\n \n+    // This mutability is the combination of the place mutability and the type mutability. If either\n+    // is mutable, `alloc_mutability` is mutable. This exists because the entire allocation needs\n+    // to be mutable if it contains an `UnsafeCell` anywhere. The other `mutability` exists so that\n+    // the visitor does not treat everything outside the `UnsafeCell` as mutable.\n     let alloc_mutability = intern_mutability(\n         tcx.tcx, param_env, ret.layout.ty, tcx.span, mutability,\n     );"}]}