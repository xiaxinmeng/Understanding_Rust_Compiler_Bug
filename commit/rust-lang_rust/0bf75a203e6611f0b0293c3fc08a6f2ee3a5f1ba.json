{"sha": "0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjc1YTIwM2U2NjExZjBiMDI5M2MzZmMwOGE2ZjJlZTNhNWYxYmE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-18T07:22:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-18T13:28:47Z"}, "message": "collect crate meta info and ext crate names", "tree": {"sha": "158b96caa1d2590f84238a10650fa3aba14a8bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158b96caa1d2590f84238a10650fa3aba14a8bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "html_url": "https://github.com/rust-lang/rust/commit/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0984d1db2e523d4c012b59dbcc87d53021f67cd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0984d1db2e523d4c012b59dbcc87d53021f67cd2", "html_url": "https://github.com/rust-lang/rust/commit/0984d1db2e523d4c012b59dbcc87d53021f67cd2"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "afa2a9bbcd931eafc52bd20f8a6d9a1c500688c7", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "patch": "@@ -128,8 +128,9 @@ impure fn main(vec[str] args) {\n \n     auto crate_cache = common.new_int_hash[session.crate_metadata]();\n     auto target_crate_num = 0;\n+    let vec[@front.ast.meta_item] md = vec();\n     auto sess = session.session(target_crate_num, target_cfg, crate_cache,\n-                                front.codemap.new_codemap());\n+                                md, front.codemap.new_codemap());\n \n     let option.t[str] input_file = none[str];\n     let option.t[str] output_file = none[str];"}, {"sha": "9cbbc94c6d461c6a3e78c51271161584732dc70e", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "patch": "@@ -23,11 +23,13 @@ type cfg = rec(os os,\n                ty_mach uint_type,\n                ty_mach float_type);\n \n-type crate_metadata = vec[u8];\n+type crate_metadata = rec(str name,\n+                          vec[u8] data);\n \n-obj session(ast.crate_num cnum, cfg targ,\n-            map.hashmap[int, crate_metadata] crates,\n-            codemap.codemap cm) {\n+state obj session(ast.crate_num cnum, cfg targ,\n+                  map.hashmap[int, crate_metadata] crates,\n+                  mutable vec[@ast.meta_item] metadata,\n+                  codemap.codemap cm) {\n \n     fn get_targ_cfg() -> cfg {\n         ret targ;\n@@ -53,6 +55,13 @@ obj session(ast.crate_num cnum, cfg targ,\n         fail;\n     }\n \n+    fn add_metadata(vec[@ast.meta_item] data) {\n+        metadata = metadata + data;\n+    }\n+    fn get_metadata() -> vec[@ast.meta_item] {\n+        ret metadata;\n+    }\n+\n     fn span_warn(span sp, str msg) {\n         auto lo = codemap.lookup_pos(cm, sp.lo);\n         auto hi = codemap.lookup_pos(cm, sp.hi);"}, {"sha": "55b40cce2fda0812dd497c3a9ce6f1952f60a323", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "patch": "@@ -400,7 +400,7 @@ fn load_crate(session.session sess,\n         auto path = fs.connect(library_search_path, filename);\n         alt (get_metadata_section(path)) {\n             case (option.some[vec[u8]](?cvec)) {\n-                sess.set_external_crate(cnum, cvec);\n+                sess.set_external_crate(cnum, rec(name=ident, data=cvec));\n                 ret;\n             }\n             case (_) {}\n@@ -470,7 +470,7 @@ fn kind_has_type_params(u8 kind_ch) -> bool {\n \n fn lookup_def(session.session sess, int cnum, vec[ast.ident] path)\n         -> option.t[ast.def] {\n-    auto data = sess.get_external_crate(cnum);\n+    auto data = sess.get_external_crate(cnum).data;\n \n     auto did;\n     alt (resolve_path(path, data)) {\n@@ -513,7 +513,7 @@ fn lookup_def(session.session sess, int cnum, vec[ast.ident] path)\n fn get_type(session.session sess, ast.def_id def)\n         -> ty.ty_param_count_and_ty {\n     auto external_crate_id = def._0;\n-    auto data = sess.get_external_crate(external_crate_id);\n+    auto data = sess.get_external_crate(external_crate_id).data;\n     auto item = lookup_item(def._1, data);\n     auto t = item_type(item, external_crate_id);\n \n@@ -531,15 +531,15 @@ fn get_type(session.session sess, ast.def_id def)\n \n fn get_symbol(session.session sess, ast.def_id def) -> str {\n     auto external_crate_id = def._0;\n-    auto data = sess.get_external_crate(external_crate_id);\n+    auto data = sess.get_external_crate(external_crate_id).data;\n     auto item = lookup_item(def._1, data);\n     ret item_symbol(item);\n }\n \n fn get_tag_variants(session.session sess, ast.def_id def)\n         -> vec[trans.variant_info] {\n     auto external_crate_id = def._0;\n-    auto data = sess.get_external_crate(external_crate_id);\n+    auto data = sess.get_external_crate(external_crate_id).data;\n     auto items = ebml.get_doc(ebml.new_doc(data), metadata.tag_items);\n     auto item = find_item(def._1, items);\n "}, {"sha": "8306bcf01e0ff3d39818c50c113f8acd9ecf9ca0", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=0bf75a203e6611f0b0293c3fc08a6f2ee3a5f1ba", "patch": "@@ -419,7 +419,10 @@ impure fn eval_crate_directive(ctx cx,\n             ast.index_view_item(index, vi);\n         }\n \n-        case (ast.cdir_meta(?mi)) {}\n+        case (ast.cdir_meta(?mi)) {\n+            cx.sess.add_metadata(mi);\n+        }\n+\n         case (ast.cdir_syntax(?pth)) {}\n         case (ast.cdir_auth(?pth, ?eff)) {}\n     }"}]}