{"sha": "bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "node_id": "C_kwDOAAsO6NoAKGJjYjIxMzExZWFlN2YyYzEzY2EwMTJiM2IzMDg4YjBkM2I0MTdjNmQ", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-27T19:13:05Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T14:06:25Z"}, "message": "Accepting review suggestions", "tree": {"sha": "c22a0e38a926b09d6eca55fd1462925351aa9fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c22a0e38a926b09d6eca55fd1462925351aa9fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "html_url": "https://github.com/rust-lang/rust/commit/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "800b3b6323cb8f738db2c2419c917159efc9f9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/800b3b6323cb8f738db2c2419c917159efc9f9df", "html_url": "https://github.com/rust-lang/rust/commit/800b3b6323cb8f738db2c2419c917159efc9f9df"}], "stats": {"total": 68, "additions": 40, "deletions": 28}, "files": [{"sha": "76ad847b133c5c65f2bb8f4fd88b9ea630080662", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "patch": "@@ -58,43 +58,42 @@ pub(crate) fn fetch_dependency_list(\n         .into_iter()\n         .filter_map(|it| {\n             let root_file_path = state.file_id_to_file_path(it.root_file_id);\n-            crate_path(it.name.as_ref(), root_file_path).map(|path| CrateInfoResult {\n+            crate_path(root_file_path).and_then(to_url).map(|path| CrateInfoResult {\n                 name: it.name,\n                 version: it.version,\n-                path: path.to_string(),\n+                path,\n             })\n         })\n         .collect();\n     Ok(FetchDependencyListResult { crates: crate_infos })\n }\n \n-/// Searches for the directory of a Rust crate with a given name in the directory tree\n-/// of the root file of that crate.\n+/// Searches for the directory of a Rust crate given this crate's root file path.\n ///\n /// # Arguments\n ///\n-/// * `crate_name`: The name of the crate to search for. This should be a `Some` value if\n-///   a crate name has been specified, or `None` if no crate name has been specified.\n /// * `root_file_path`: The path to the root file of the crate.\n ///\n /// # Returns\n ///\n /// An `Option` value representing the path to the directory of the crate with the given\n /// name, if such a crate is found. If no crate with the given name is found, this function\n /// returns `None`.\n-fn crate_path(crate_name: Option<&String>, root_file_path: VfsPath) -> Option<VfsPath> {\n-    crate_name.and_then(|crate_name| {\n-        let mut root_path = root_file_path;\n-        while let Some(path) = root_path.parent() {\n-            if let Some((name, _)) = path.name_and_extension() {\n-                if name.starts_with(crate_name.as_str()) {\n-                    return Some(path);\n-                }\n-            } else {\n-                break;\n-            }\n-            root_path = path;\n+fn crate_path(root_file_path: VfsPath) -> Option<VfsPath> {\n+    let mut current_dir = root_file_path.parent();\n+    while let Some(path) = current_dir {\n+        let cargo_toml_path = path.join(\"../Cargo.toml\")?;\n+        if fs::metadata(cargo_toml_path.as_path()?).is_ok() {\n+            let crate_path = cargo_toml_path.parent()?;\n+            return Some(crate_path);\n         }\n-        None\n-    })\n+        current_dir = path.parent();\n+    }\n+    None\n+}\n+\n+fn to_url(path: VfsPath) -> Option<Url> {\n+    let path = path.as_path()?;\n+    let str_path = path.as_os_str().to_str()?;\n+    Url::from_file_path(str_path).ok()\n }\n\\ No newline at end of file"}, {"sha": "69e7d824680fe3e1bb5b5c98d27e4b2c9e91dd6a", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "patch": "@@ -4,11 +4,11 @@ use std::{collections::HashMap, path::PathBuf};\n \n use ide_db::line_index::WideEncoding;\n use lsp_types::request::Request;\n-use lsp_types::PositionEncodingKind;\n use lsp_types::{\n     notification::Notification, CodeActionKind, DocumentOnTypeFormattingParams,\n     PartialResultParams, Position, Range, TextDocumentIdentifier, WorkDoneProgressParams,\n };\n+use lsp_types::{PositionEncodingKind, Url};\n use serde::{Deserialize, Serialize};\n \n use crate::line_index::PositionEncoding;\n@@ -32,7 +32,7 @@ pub struct AnalyzerStatusParams {\n pub struct CrateInfoResult {\n     pub name: Option<String>,\n     pub version: Option<String>,\n-    pub path: String,\n+    pub path: Url,\n }\n pub enum FetchDependencyList {}\n "}, {"sha": "98ccd50dc0406ca1bf54662acd93084f870a07bb", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "patch": "@@ -276,6 +276,9 @@ export function openCargoToml(ctx: CtxInit): Cmd {\n \n export function revealDependency(ctx: CtxInit): Cmd {\n     return async (editor: RustEditor) => {\n+        if (!ctx.dependencies?.isInitialized()) {\n+            return;\n+        }\n         const documentPath = editor.document.uri.fsPath;\n         const dep = ctx.dependencies?.getDependency(documentPath);\n         if (dep) {"}, {"sha": "74fbacbb3cd7833a2e3423049ba8d6a1442abb3b", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "patch": "@@ -32,6 +32,10 @@ export class RustDependenciesProvider\n         return filePath.toLowerCase() in this.dependenciesMap;\n     }\n \n+    isInitialized(): boolean {\n+        return Object.keys(this.dependenciesMap).length !== 0;\n+    }\n+\n     refresh(): void {\n         this.dependenciesMap = {};\n         this._onDidChangeTreeData.fire();\n@@ -89,7 +93,12 @@ export class RustDependenciesProvider\n     }\n \n     private toDep(moduleName: string, version: string, path: string): Dependency {\n-        return new Dependency(moduleName, version, path, vscode.TreeItemCollapsibleState.Collapsed);\n+        return new Dependency(\n+            moduleName,\n+            version,\n+            vscode.Uri.parse(path).fsPath,\n+            vscode.TreeItemCollapsibleState.Collapsed\n+        );\n     }\n }\n \n@@ -101,9 +110,9 @@ export class Dependency extends vscode.TreeItem {\n         public readonly collapsibleState: vscode.TreeItemCollapsibleState\n     ) {\n         super(label, collapsibleState);\n-        this.id = this.dependencyPath.toLowerCase();\n-        this.description = this.version;\n         this.resourceUri = vscode.Uri.file(dependencyPath);\n+        this.id = this.resourceUri.fsPath.toLowerCase();\n+        this.description = this.version;\n         if (this.version) {\n             this.tooltip = `${this.label}-${this.version}`;\n         } else {\n@@ -120,13 +129,13 @@ export class DependencyFile extends vscode.TreeItem {\n         public readonly collapsibleState: vscode.TreeItemCollapsibleState\n     ) {\n         super(vscode.Uri.file(dependencyPath), collapsibleState);\n-        this.id = this.dependencyPath.toLowerCase();\n-        const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n+        this.id = this.resourceUri!.fsPath.toLowerCase();\n+        const isDir = fs.lstatSync(this.resourceUri!.fsPath).isDirectory();\n         if (!isDir) {\n             this.command = {\n                 command: \"vscode.open\",\n                 title: \"Open File\",\n-                arguments: [vscode.Uri.file(this.dependencyPath)],\n+                arguments: [this.resourceUri],\n             };\n         }\n     }"}, {"sha": "0d75392c92b10ba482d678f600217a985a92b13c", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bcb21311eae7f2c13ca012b3b3088b0d3b417c6d/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=bcb21311eae7f2c13ca012b3b3088b0d3b417c6d", "patch": "@@ -2,6 +2,7 @@\n  * This file mirrors `crates/rust-analyzer/src/lsp_ext.rs` declarations.\n  */\n \n+import { Uri } from \"vscode\";\n import * as lc from \"vscode-languageclient\";\n \n // rust-analyzer overrides"}]}