{"sha": "49abd8748357012e5db10bf11077384f727e2177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YWJkODc0ODM1NzAxMmU1ZGIxMGJmMTEwNzczODRmNzI3ZTIxNzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-06T10:22:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-03-06T10:29:48Z"}, "message": "make bounds on higher-kinded lifetimes a hard error in ast_validation\n\nAlso move the check for not having type parameters into ast_validation.\n\nI was not sure what to do with compile-fail/issue-23046.rs: The issue looks like\nmaybe the bounds actually played a role in triggering the ICE, but that seems\nunlikely given that the compiler seems to entirely ignore them.  However, I\ncouldn't find a testcase without the bounds, so I figured the best I could do is\nto just remove the bounds and make sure at least that keeps working.", "tree": {"sha": "21efac585e6effe851d9b05497d0aca78bb22f5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21efac585e6effe851d9b05497d0aca78bb22f5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49abd8748357012e5db10bf11077384f727e2177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49abd8748357012e5db10bf11077384f727e2177", "html_url": "https://github.com/rust-lang/rust/commit/49abd8748357012e5db10bf11077384f727e2177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49abd8748357012e5db10bf11077384f727e2177/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b5be0e9530a4de106b581074c3707e6a938329", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b5be0e9530a4de106b581074c3707e6a938329", "html_url": "https://github.com/rust-lang/rust/commit/30b5be0e9530a4de106b581074c3707e6a938329"}], "stats": {"total": 321, "additions": 160, "deletions": 161}, "files": [{"sha": "b653cfecf949686ee753b4c7308f259773730a62", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 22, "deletions": 69, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -1404,79 +1404,32 @@ impl LintPass for IgnoredGenericBounds {\n     }\n }\n \n-impl IgnoredGenericBounds {\n-    fn ensure_no_param_bounds(\n-        cx: &EarlyContext,\n-        generics: &Vec<ast::GenericParam>,\n-        thing: &'static str,\n-    ) {\n-        for param in generics.iter() {\n-            match param {\n-                &ast::GenericParam::Lifetime(ref lifetime) => {\n-                    if !lifetime.bounds.is_empty() {\n-                        let spans : Vec<_> = lifetime.bounds.iter().map(|b| b.span).collect();\n-                        cx.span_lint(\n-                            IGNORED_GENERIC_BOUNDS,\n-                            spans,\n-                            format!(\"bounds on generic lifetime parameters are ignored in {}\",\n-                                thing).as_ref()\n-                        );\n-                    }\n-                }\n-                &ast::GenericParam::Type(ref ty) => {\n-                    if !ty.bounds.is_empty() {\n-                        let spans : Vec<_> = ty.bounds.iter().map(|b| b.span()).collect();\n-                        cx.span_lint(\n-                            IGNORED_GENERIC_BOUNDS,\n-                            spans,\n-                            format!(\"bounds on generic type parameters are ignored in {}\", thing)\n-                                .as_ref()\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n impl EarlyLintPass for IgnoredGenericBounds {\n     fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        match item.node {\n-            ast::ItemKind::Ty(_, ref generics) => {\n-                if !generics.where_clause.predicates.is_empty() {\n-                    let spans : Vec<_> = generics.where_clause.predicates.iter()\n-                        .map(|pred| pred.span()).collect();\n-                    cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n-                        \"where clauses are ignored in type aliases\");\n-                }\n-                IgnoredGenericBounds::ensure_no_param_bounds(cx, &generics.params,\n-                    \"type aliases\");\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn check_where_predicate(&mut self, cx: &EarlyContext, p: &ast::WherePredicate) {\n-        if let &ast::WherePredicate::BoundPredicate(ref bound_predicate) = p {\n-            // A type binding, eg `for<'c> Foo: Send+Clone+'c`\n-            IgnoredGenericBounds::ensure_no_param_bounds(cx,\n-                &bound_predicate.bound_generic_params, \"higher-ranked trait bounds (i.e., `for`)\");\n+        let type_alias_generics = match item.node {\n+            ast::ItemKind::Ty(_, ref generics) => generics,\n+            _ => return,\n+        };\n+        // There must not be a where clause\n+        if !type_alias_generics.where_clause.predicates.is_empty() {\n+            let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n+                .map(|pred| pred.span()).collect();\n+            cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n+                \"where clauses are ignored in type aliases\");\n         }\n-    }\n-\n-    fn check_poly_trait_ref(&mut self, cx: &EarlyContext, t: &ast::PolyTraitRef,\n-                            _: &ast::TraitBoundModifier) {\n-        IgnoredGenericBounds::ensure_no_param_bounds(cx, &t.bound_generic_params,\n-            \"higher-ranked trait bounds (i.e., `for`)\");\n-    }\n-\n-    fn check_ty(&mut self, cx: &EarlyContext, ty: &ast::Ty) {\n-        match ty.node {\n-            ast::TyKind::BareFn(ref fn_ty) => {\n-                IgnoredGenericBounds::ensure_no_param_bounds(cx, &fn_ty.generic_params,\n-                    \"higher-ranked function types (i.e., `for`)\");\n+        // The parameters must not have bounds\n+        for param in type_alias_generics.params.iter() {\n+            let spans : Vec<_> = match param {\n+                &ast::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n+                &ast::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n+            };\n+            if !spans.is_empty() {\n+                cx.span_lint(\n+                    IGNORED_GENERIC_BOUNDS,\n+                    spans,\n+                    \"bounds on generic parameters are ignored in type aliases\",\n+                );\n             }\n-            _ => {}\n         }\n     }\n }"}, {"sha": "55d00f92e4dac0b1d235fa3bb9f72b6996e5a927", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -136,6 +136,33 @@ impl<'a> AstValidator<'a> {\n                                                          in patterns\")\n         }\n     }\n+\n+    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n+        // Check: Only lifetime parameters\n+        let non_lifetime_param_spans : Vec<_> = params.iter()\n+            .filter_map(|param| match *param {\n+                GenericParam::Lifetime(_) => None,\n+                GenericParam::Type(ref t) => Some(t.span),\n+            }).collect();\n+        if !non_lifetime_param_spans.is_empty() {\n+            self.err_handler().span_err(non_lifetime_param_spans,\n+                \"only lifetime parameters can be used in this context\");\n+        }\n+\n+        // Check: No bounds on lifetime parameters\n+        for param in params.iter() {\n+            match *param {\n+                GenericParam::Lifetime(ref l) => {\n+                    if !l.bounds.is_empty() {\n+                        let spans : Vec<_> = l.bounds.iter().map(|b| b.span).collect();\n+                        self.err_handler().span_err(spans,\n+                            \"lifetime bounds cannot be used in this context\");\n+                    }\n+                }\n+                GenericParam::Type(_) => {}\n+            }\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -157,6 +184,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     struct_span_err!(self.session, span, E0561,\n                                      \"patterns aren't allowed in function pointer types\").emit();\n                 });\n+                self.check_late_bound_lifetime_defs(&bfty.generic_params);\n             }\n             TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n@@ -417,6 +445,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         visit::walk_pat(self, pat)\n     }\n+\n+    fn visit_where_predicate(&mut self, p: &'a WherePredicate) {\n+        if let &WherePredicate::BoundPredicate(ref bound_predicate) = p {\n+            // A type binding, eg `for<'c> Foo: Send+Clone+'c`\n+            self.check_late_bound_lifetime_defs(&bound_predicate.bound_generic_params);\n+        }\n+        visit::walk_where_predicate(self, p);\n+    }\n+\n+    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n+        self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n+        visit::walk_poly_trait_ref(self, t, m);\n+    }\n }\n \n // Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`."}, {"sha": "ba8ccc2256f20038c9fd00f5ee8708d61dbae7fc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -5484,18 +5484,8 @@ impl<'a> Parser<'a> {\n             self.expect_lt()?;\n             let params = self.parse_generic_params()?;\n             self.expect_gt()?;\n-\n-            let first_non_lifetime_param_span = params.iter()\n-                .filter_map(|param| match *param {\n-                    ast::GenericParam::Lifetime(_) => None,\n-                    ast::GenericParam::Type(ref t) => Some(t.span),\n-                })\n-                .next();\n-\n-            if let Some(span) = first_non_lifetime_param_span {\n-                self.span_err(span, \"only lifetime parameters can be used in this context\");\n-            }\n-\n+            // We rely on AST validation to rule out invalid cases: There must not be type\n+            // parameters, and the lifetime parameters must not have bounds.\n             Ok(params)\n         } else {\n             Ok(Vec::new())"}, {"sha": "5bfaa6c54fa9f2c117f8950da76486c9ffc026f8", "filename": "src/test/compile-fail/bounds-lifetime.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type A = for<'b, 'a: 'b> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type B = for<'b, 'a: 'b,> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type C = for<'b, 'a: 'b +> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type D = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n+type E = for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n+\n+fn main() {}"}, {"sha": "670706b7a9adf8af4ec82139d1a24a31a899e450", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -8,19 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(ignored_generic_bounds)]\n-\n pub enum Expr<'var, VAR> {\n     Let(Box<Expr<'var, VAR>>,\n-        Box<for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n+        Box<for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n }\n \n pub fn add<'var, VAR>\n                       (a: Expr<'var, VAR>, b: Expr<'var, VAR>) -> Expr<'var, VAR> {\n     loop {}\n }\n \n-pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n+pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n                        (a: Expr<'var, VAR>, b: F) -> Expr<'var, VAR> {\n     loop {}\n }"}, {"sha": "cc9eed7e65426238667185a8a693556d2183b4e4", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARNING bounds on generic type parameters are ignored\n+    //~^ WARNING bounds on generic parameters are ignored\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error"}, {"sha": "88db205310ce156027f2f7de63456197f14450d2", "filename": "src/test/parse-fail/bounds-lifetime.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n-type A = for<'a: 'b + 'c> fn(); // OK\n-type A = for<'a: 'b,> fn(); // OK\n type A = for<'a:> fn(); // OK\n type A = for<'a:,> fn(); // OK\n type A = for<'a> fn(); // OK\n type A = for<> fn(); // OK\n-type A = for<'a: 'b +> fn(); // OK\n-\n-type A = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n+type A = for<'a: 'b + 'c> fn(); // OK (rejected later by ast_validation)\n+type A = for<'a: 'b,> fn(); // OK(rejected later by ast_validation)\n+type A = for<'a: 'b +> fn(); // OK (rejected later by ast_validation)\n+type A = for<'a, T> fn(); // OK (rejected later by ast_validation)\n type A = for<,> fn(); //~ ERROR expected one of `>`, identifier, or lifetime, found `,`\n \n fn main() {}"}, {"sha": "0ebe7fde0a63f36f16e730ec2228e01941dc02b2", "filename": "src/test/parse-fail/bounds-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fparse-fail%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fparse-fail%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-type.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -15,7 +15,7 @@ struct S<\n     T: Tr + 'a, // OK\n     T: 'a, // OK\n     T:, // OK\n-    T: ?for<'a: 'b + 'c> Trait, // OK\n+    T: ?for<'a> Trait, // OK\n     T: Tr +, // OK\n     T: ?'a, //~ ERROR `?` may only modify trait bounds, not lifetime bounds\n >;"}, {"sha": "fcad23926fc0caf45b2a085f3e3194ac2129badf", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -69,8 +69,8 @@ fn foo(x: &impl Debug) -> &impl Debug { x }\n fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> &'a impl Debug { x }\n fn foo_explicit_arg<T: Debug>(x: &T) -> &impl Debug { x }\n \n-fn mixed_lifetimes<'a>() -> impl for<'b: 'a> Fn(&'b u32) { |_| () }\n-fn mixed_as_static() -> impl Fn(&'static u32) { mixed_lifetimes() }\n+fn mixed_lifetimes<'a>() -> impl for<'b> Fn(&'b &'a u32) { |_| () }\n+fn mixed_as_static() -> impl Fn(&'static &'static u32) { mixed_lifetimes() }\n \n trait MultiRegionTrait<'a, 'b>: Debug {}\n "}, {"sha": "94bcdec945035033d8ca36a9ca977bc02c504b95", "filename": "src/test/ui/param-bounds-ignored.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// must-compile-successfully\n #![allow(dead_code, non_camel_case_types)]\n \n use std::rc::Rc;\n \n type SVec<T: Send+Send> = Vec<T>;\n-//~^ WARN bounds on generic type parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-//~^ WARN bounds on generic lifetime parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n type WVec<'b, T: 'b+'b> = Vec<T>;\n-//~^ WARN bounds on generic type parameters are ignored in type aliases\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n //~^ WARN where clauses are ignored in type aliases\n \n@@ -40,16 +39,16 @@ fn foo<'a>(y: &'a i32) {\n fn bar1<'a, 'b>(\n     x: &'a i32,\n     y: &'b i32,\n-    f: for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked function types\n+    f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n+    //~^ ERROR lifetime bounds cannot be used in this context\n {\n     // If the bound in f's type would matter, the call below would (have to)\n     // be rejected.\n     f(x, y);\n }\n \n fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+    //~^ ERROR lifetime bounds cannot be used in this context\n     x: &'a i32,\n     y: &'b i32,\n     f: F)\n@@ -64,7 +63,7 @@ fn bar3<'a, 'b, F>(\n     y: &'b i32,\n     f: F)\n     where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+    //~^ ERROR lifetime bounds cannot be used in this context\n {\n     // If the bound in f's type would matter, the call below would (have to)\n     // be rejected.\n@@ -76,29 +75,29 @@ fn bar4<'a, 'b, F>(\n     y: &'b i32,\n     f: F)\n     where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+    //~^ ERROR lifetime bounds cannot be used in this context\n {\n     // If the bound in f's type would matter, the call below would (have to)\n     // be rejected.\n     f(x, y);\n }\n \n struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n-//~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+//~^ ERROR lifetime bounds cannot be used in this context\n struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n-//~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+//~^ ERROR lifetime bounds cannot be used in this context\n struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n-//~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+//~^ ERROR lifetime bounds cannot be used in this context\n \n struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n-//~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked function types\n+//~^ ERROR lifetime bounds cannot be used in this context\n \n type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n-//~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+//~^ ERROR lifetime bounds cannot be used in this context\n \n fn main() {\n     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked function types\n+    //~^ ERROR lifetime bounds cannot be used in this context\n     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n-    //~^ WARN bounds on generic lifetime parameters are ignored in higher-ranked trait bounds\n+    //~^ ERROR lifetime bounds cannot be used in this context\n }"}, {"sha": "657fec54f9608ac415c0ccf8bbf58eac196d5eae", "filename": "src/test/ui/param-bounds-ignored.stderr", "status": "modified", "additions": 52, "deletions": 50, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49abd8748357012e5db10bf11077384f727e2177/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr?ref=49abd8748357012e5db10bf11077384f727e2177", "patch": "@@ -1,92 +1,94 @@\n-warning: bounds on generic type parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:16:14\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:42:22\n    |\n-LL | type SVec<T: Send+Send> = Vec<T>;\n-   |              ^^^^ ^^^^\n-   |\n-   = note: #[warn(ignored_generic_bounds)] on by default\n-\n-warning: bounds on generic lifetime parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:18:19\n-   |\n-LL | type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n-   |                   ^^ ^^\n-\n-warning: bounds on generic type parameters are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:20:18\n-   |\n-LL | type WVec<'b, T: 'b+'b> = Vec<T>;\n-   |                  ^^ ^^\n-\n-warning: where clauses are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:22:25\n-   |\n-LL | type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n-   |                         ^^^^^  ^^^^^\n+LL |     f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n+   |                      ^^^ ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked function types (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:43:22\n-   |\n-LL |     f: for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n-   |                      ^^^\n-\n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:51:34\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:50:34\n    |\n LL | fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n    |                                  ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:66:28\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:65:28\n    |\n LL |     where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                            ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:78:25\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:77:25\n    |\n LL |     where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n    |                         ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:86:28\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:85:28\n    |\n LL | struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n    |                            ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:88:40\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:87:40\n    |\n LL | struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                        ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:90:37\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:89:37\n    |\n LL | struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n    |                                     ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked function types (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:93:29\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:92:29\n    |\n LL | struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n    |                             ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:96:29\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:95:29\n    |\n LL | type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n    |                             ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked function types (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:100:34\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:99:34\n    |\n LL |     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n    |                                  ^^^\n \n-warning: bounds on generic lifetime parameters are ignored in higher-ranked trait bounds (i.e., `for`)\n-  --> $DIR/param-bounds-ignored.rs:102:38\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:101:38\n    |\n LL |     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n    |                                      ^^^\n \n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:15:14\n+   |\n+LL | type SVec<T: Send+Send> = Vec<T>;\n+   |              ^^^^ ^^^^\n+   |\n+   = note: #[warn(ignored_generic_bounds)] on by default\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:17:19\n+   |\n+LL | type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n+   |                   ^^ ^^\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:19:18\n+   |\n+LL | type WVec<'b, T: 'b+'b> = Vec<T>;\n+   |                  ^^ ^^\n+\n+warning: where clauses are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:21:25\n+   |\n+LL | type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n+   |                         ^^^^^  ^^^^^\n+\n+error: aborting due to 11 previous errors\n+"}]}