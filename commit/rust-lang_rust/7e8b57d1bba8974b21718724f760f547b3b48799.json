{"sha": "7e8b57d1bba8974b21718724f760f547b3b48799", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOGI1N2QxYmJhODk3NGIyMTcxODcyNGY3NjBmNTQ3YjNiNDg3OTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-10T23:43:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-11T00:04:41Z"}, "message": "Only name LLVM values / blocks / types when saving temporaries.", "tree": {"sha": "fca7f4566ad6d6ac48151a5e2d3cf88d67784a89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca7f4566ad6d6ac48151a5e2d3cf88d67784a89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e8b57d1bba8974b21718724f760f547b3b48799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e8b57d1bba8974b21718724f760f547b3b48799", "html_url": "https://github.com/rust-lang/rust/commit/7e8b57d1bba8974b21718724f760f547b3b48799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e8b57d1bba8974b21718724f760f547b3b48799/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c70ddb1627dd859a5140e4f2975cd43db9c38ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c70ddb1627dd859a5140e4f2975cd43db9c38ae", "html_url": "https://github.com/rust-lang/rust/commit/4c70ddb1627dd859a5140e4f2975cd43db9c38ae"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "853b9965dbd3923f151e78e40f154600d347f4e5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e8b57d1bba8974b21718724f760f547b3b48799/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8b57d1bba8974b21718724f760f547b3b48799/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7e8b57d1bba8974b21718724f760f547b3b48799", "patch": "@@ -832,8 +832,11 @@ fn type_of_inner(@crate_ctxt cx, ty.t t) -> TypeRef {\n     }\n \n     assert (llty as int != 0);\n-    llvm.LLVMAddTypeName(cx.llmod, Str.buf(ty.ty_to_short_str(cx.tcx, t)),\n-                         llty);\n+    if (cx.sess.get_opts().save_temps) {\n+        llvm.LLVMAddTypeName(cx.llmod,\n+                             Str.buf(ty.ty_to_short_str(cx.tcx, t)),\n+                             llty);\n+    }\n     cx.lltypes.insert(t, llty);\n     ret llty;\n }\n@@ -2146,6 +2149,12 @@ fn decr_refcnt_and_if_zero(@block_ctxt cx,\n \n // Structural comparison: a rather involved form of glue.\n \n+fn maybe_name_value(&@crate_ctxt cx, ValueRef v, str s) {\n+    if (cx.sess.get_opts().save_temps) {\n+        llvm.LLVMSetValueName(v, Str.buf(s));\n+    }\n+}\n+\n fn make_cmp_glue(@block_ctxt cx,\n                  ValueRef lhs0,\n                  ValueRef rhs0,\n@@ -2197,7 +2206,7 @@ fn make_cmp_glue(@block_ctxt cx,\n          */\n \n         auto flag = alloca(scx, T_i1());\n-        llvm.LLVMSetValueName(flag, Str.buf(\"flag\"));\n+        maybe_name_value(cx.fcx.lcx.ccx, flag, \"flag\");\n \n         auto r;\n         if (ty.type_is_sequence(cx.fcx.lcx.ccx.tcx, t)) {\n@@ -2822,7 +2831,7 @@ fn maybe_call_dtor(@block_ctxt cx, ValueRef v) -> @block_ctxt {\n     auto self_t = llvm.LLVMGetElementType(val_ty(v));\n     dtor_ptr = cx.build.BitCast(dtor_ptr,\n                                 T_ptr(T_dtor(cx.fcx.lcx.ccx, self_t)));\n-    \n+\n     auto dtor_cx = new_sub_block_ctxt(cx, \"dtor\");\n     auto after_cx = new_sub_block_ctxt(cx, \"after_dtor\");\n     auto test = cx.build.ICmp(lib.llvm.LLVMIntNE, dtor_ptr,\n@@ -3967,7 +3976,7 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat,\n                 auto rslt = alloc_ty(cx, t);\n                 auto dst = rslt.val;\n                 auto bcx = rslt.bcx;\n-                llvm.LLVMSetValueName(dst, Str.buf(id));\n+                maybe_name_value(cx.fcx.lcx.ccx, dst, id);\n                 bcx.fcx.lllocals.insert(def_id, dst);\n                 bcx.cleanups +=\n                     vec(clean(bind drop_slot(_, dst, t)));\n@@ -4314,10 +4323,10 @@ fn trans_index(@block_ctxt cx, &ast.span sp, @ast.expr base,\n     auto unit_ty = node_ann_type(cx.fcx.lcx.ccx, ann);\n     auto unit_sz = size_of(bcx, unit_ty);\n     bcx = unit_sz.bcx;\n-    llvm.LLVMSetValueName(unit_sz.val, Str.buf(\"unit_sz\"));\n+    maybe_name_value(cx.fcx.lcx.ccx, unit_sz.val, \"unit_sz\");\n \n     auto scaled_ix = bcx.build.Mul(ix_val, unit_sz.val);\n-    llvm.LLVMSetValueName(scaled_ix, Str.buf(\"scaled_ix\"));\n+    maybe_name_value(cx.fcx.lcx.ccx, scaled_ix, \"scaled_ix\");\n \n     auto lim = bcx.build.GEP(v, vec(C_int(0), C_int(abi.vec_elt_fill)));\n     lim = bcx.build.Load(lim);\n@@ -5834,10 +5843,11 @@ fn new_block_ctxt(@fn_ctxt cx, block_parent parent,\n                   block_kind kind,\n                   str name) -> @block_ctxt {\n     let vec[cleanup] cleanups = vec();\n-    let BasicBlockRef llbb =\n-        llvm.LLVMAppendBasicBlock(cx.llfn,\n-                                  Str.buf(cx.lcx.ccx.names.next(name)));\n-\n+    auto s = Str.buf(\"\");\n+    if (cx.lcx.ccx.sess.get_opts().save_temps) {\n+        s = Str.buf(cx.lcx.ccx.names.next(name));\n+    }\n+    let BasicBlockRef llbb = llvm.LLVMAppendBasicBlock(cx.llfn, s);\n     ret @rec(llbb=llbb,\n              build=new_builder(llbb),\n              parent=parent,\n@@ -7478,14 +7488,14 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n         vec(bcx.fcx.lltaskptr, lldst_vec,\n             vec_fill_adjusted(bcx, llsrc_vec, llskipnull),\n             llcopy_dst_ptr, llvec_tydesc));\n-    llvm.LLVMSetValueName(llnew_vec, Str.buf(\"llnew_vec\"));\n+    maybe_name_value(bcx.fcx.lcx.ccx, llnew_vec, \"llnew_vec\");\n \n     auto copy_dst_cx = new_sub_block_ctxt(bcx, \"copy new <- dst\");\n     auto copy_src_cx = new_sub_block_ctxt(bcx, \"copy new <- src\");\n \n     auto pp0 = alloca(bcx, T_ptr(T_i8()));\n     bcx.build.Store(vec_p1_adjusted(bcx, llnew_vec, llskipnull), pp0);\n-    llvm.LLVMSetValueName(pp0, Str.buf(\"pp0\"));\n+    maybe_name_value(bcx.fcx.lcx.ccx, pp0, \"pp0\");\n \n     bcx.build.CondBr(bcx.build.TruncOrBitCast\n                      (bcx.build.Load(llcopy_dst_ptr),\n@@ -7501,19 +7511,19 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n                  ValueRef n_bytes) -> result {\n \n         auto src_lim = cx.build.GEP(src, vec(n_bytes));\n-        llvm.LLVMSetValueName(src_lim, Str.buf(\"src_lim\"));\n+        maybe_name_value(cx.fcx.lcx.ccx, src_lim, \"src_lim\");\n \n         auto elt_llsz =\n             cx.build.Load(cx.build.GEP(elt_tydesc,\n                                        vec(C_int(0),\n                                            C_int(abi.tydesc_field_size))));\n-        llvm.LLVMSetValueName(elt_llsz, Str.buf(\"elt_llsz\"));\n+        maybe_name_value(cx.fcx.lcx.ccx, elt_llsz, \"elt_llsz\");\n \n         auto elt_llalign =\n             cx.build.Load(cx.build.GEP(elt_tydesc,\n                                        vec(C_int(0),\n                                            C_int(abi.tydesc_field_align))));\n-        llvm.LLVMSetValueName(elt_llsz, Str.buf(\"elt_llalign\"));\n+        maybe_name_value(cx.fcx.lcx.ccx, elt_llsz, \"elt_llalign\");\n \n \n         fn take_one(ValueRef elt_tydesc,\n@@ -7535,7 +7545,7 @@ fn trans_vec_append_glue(@local_ctxt cx) {\n     // Copy any dst elements in, omitting null if doing str.\n \n     auto n_bytes = vec_fill_adjusted(copy_dst_cx, lldst_vec, llskipnull);\n-    llvm.LLVMSetValueName(n_bytes, Str.buf(\"n_bytes\"));\n+    maybe_name_value(copy_dst_cx.fcx.lcx.ccx, n_bytes, \"n_bytes\");\n \n     copy_dst_cx = copy_elts(copy_dst_cx,\n                             llelt_tydesc,"}]}