{"sha": "9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGZkMDY4M2Y3ZTM2NjUxY2YxMWRhMWQ2M2U4ZDdlMzI2ZmYxMTc=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-08T09:03:45Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-08T09:03:45Z"}, "message": "Fix `or_fun_call` bad suggestion\n\nCloses #4514", "tree": {"sha": "9535e936568631a5b6b640a35974fde72ed62eed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9535e936568631a5b6b640a35974fde72ed62eed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "html_url": "https://github.com/rust-lang/rust/commit/9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/comments", "author": null, "committer": null, "parents": [{"sha": "f30bf69ec7af4366e64916f32566f3a894edd593", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30bf69ec7af4366e64916f32566f3a894edd593", "html_url": "https://github.com/rust-lang/rust/commit/f30bf69ec7af4366e64916f32566f3a894edd593"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "cccba0327bb7d603d3facef2a6726b663c30030b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "patch": "@@ -1377,6 +1377,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n \n             let mut finder = FunCallFinder { cx: &cx, found: false };\n             if { finder.visit_expr(&arg); finder.found };\n+            if !contains_return(&arg);\n \n             let self_ty = cx.tables.expr_ty(self_expr);\n \n@@ -2190,28 +2191,6 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &\n     const LINT_MSG: &str = \"using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\";\n     const NO_OP_MSG: &str = \"using `Option.and_then(Some)`, which is a no-op\";\n \n-    // Searches an return expressions in `y` in `_.and_then(|x| Some(y))`, which we don't lint\n-    struct RetCallFinder {\n-        found: bool,\n-    }\n-\n-    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n-        fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n-            if self.found {\n-                return;\n-            }\n-            if let hir::ExprKind::Ret(..) = &expr.node {\n-                self.found = true;\n-            } else {\n-                intravisit::walk_expr(self, expr);\n-            }\n-        }\n-\n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-    }\n-\n     let ty = cx.tables.expr_ty(&args[0]);\n     if !match_type(cx, ty, &paths::OPTION) {\n         return;\n@@ -2229,9 +2208,7 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &\n                 then {\n                     let inner_expr = &some_args[0];\n \n-                    let mut finder = RetCallFinder { found: false };\n-                    finder.visit_expr(inner_expr);\n-                    if finder.found {\n+                    if contains_return(inner_expr) {\n                         return;\n                     }\n \n@@ -2988,3 +2965,31 @@ fn is_bool(ty: &hir::Ty) -> bool {\n         false\n     }\n }\n+\n+// Returns `true` if `expr` contains a return expression\n+fn contains_return(expr: &hir::Expr) -> bool {\n+    struct RetCallFinder {\n+        found: bool,\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n+        fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+            if self.found {\n+                return;\n+            }\n+            if let hir::ExprKind::Ret(..) = &expr.node {\n+                self.found = true;\n+            } else {\n+                intravisit::walk_expr(self, expr);\n+            }\n+        }\n+\n+        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+    }\n+\n+    let mut visitor = RetCallFinder{ found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}"}, {"sha": "6d9ad16989a2574398fffc0ebd6a164ed638a985", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "patch": "@@ -99,4 +99,16 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n+\n+// Issue 4514 - early return\n+fn f() -> Option<()> {\n+    let a = Some(1);\n+    let b = 1i32;\n+\n+    let _ = a.unwrap_or(b.checked_mul(3)?.min(240));\n+\n+    Some(())\n+}\n+\n+\n fn main() {}"}, {"sha": "78bcf896ec1dc1e2a93501bf8e14d53a3cd0bcdb", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdfd0683f7e36651cf11da1d63e8d7e326ff117/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=9bdfd0683f7e36651cf11da1d63e8d7e326ff117", "patch": "@@ -99,4 +99,16 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n+\n+// Issue 4514 - early return\n+fn f() -> Option<()> {\n+    let a = Some(1);\n+    let b = 1i32;\n+\n+    let _ = a.unwrap_or(b.checked_mul(3)?.min(240));\n+\n+    Some(())\n+}\n+\n+\n fn main() {}"}]}