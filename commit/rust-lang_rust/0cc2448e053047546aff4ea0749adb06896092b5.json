{"sha": "0cc2448e053047546aff4ea0749adb06896092b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYzI0NDhlMDUzMDQ3NTQ2YWZmNGVhMDc0OWFkYjA2ODk2MDkyYjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-20T23:33:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-05T08:46:15Z"}, "message": "Replace PlaceBack Debug implementation with derive", "tree": {"sha": "a0c8f6abd811e2205cea13745e153a7bf6ae8038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c8f6abd811e2205cea13745e153a7bf6ae8038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cc2448e053047546aff4ea0749adb06896092b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc2448e053047546aff4ea0749adb06896092b5", "html_url": "https://github.com/rust-lang/rust/commit/0cc2448e053047546aff4ea0749adb06896092b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cc2448e053047546aff4ea0749adb06896092b5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668af801cfe80e6cae350b2587f99bbe869ec96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/668af801cfe80e6cae350b2587f99bbe869ec96e", "html_url": "https://github.com/rust-lang/rust/commit/668af801cfe80e6cae350b2587f99bbe869ec96e"}], "stats": {"total": 153, "additions": 59, "deletions": 94}, "files": [{"sha": "fa1c2b7d2aaf9aa77f76fca0e4316d0046f6c5b8", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -228,7 +228,7 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n     sift: bool,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\")\n@@ -977,10 +977,10 @@ pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BinaryHeap::Iter\")\n+        f.debug_tuple(\"Iter\")\n          .field(&self.iter.as_slice())\n          .finish()\n     }\n@@ -1034,10 +1034,10 @@ pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BinaryHeap::IntoIter\")\n+        f.debug_tuple(\"IntoIter\")\n          .field(&self.iter.as_slice())\n          .finish()\n     }\n@@ -1078,19 +1078,11 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n+#[derive(Debug)]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BinaryHeap::Drain\")\n-         .field(&self.iter)\n-         .finish()\n-    }\n-}\n-\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<'a, T: 'a> Iterator for Drain<'a, T> {\n     type Item = T;\n@@ -1236,11 +1228,13 @@ where T: Clone + Ord {\n     place: vec::PlaceBack<'a, T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n impl<'a, T: Clone + Ord + fmt::Debug> fmt::Debug for BinaryHeapPlace<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"BinaryHeapPlace\")\n-         .field(&self)\n+         .field(&self.place)\n          .finish()\n     }\n }"}, {"sha": "e1fabe2cc496b2fb18c63fcd6984aec9ddd8279b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -270,7 +270,7 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     length: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n@@ -279,18 +279,12 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n \n /// A mutable iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for IterMut<'a, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(&format!(\"BTreeMap::IterMut({:?})\", self.range))\n-    }\n-}\n-\n /// An owning iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n@@ -299,7 +293,7 @@ pub struct IntoIter<K, V> {\n     length: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let range = Range {\n@@ -316,7 +310,7 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.inner.clone()).finish()\n@@ -329,7 +323,7 @@ pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.inner.clone()).finish()\n@@ -338,24 +332,18 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V>\n \n /// A mutable iterator over a BTreeMap's values.\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n+#[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for ValuesMut<'a, K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(&format!(\"BTreeMap::ValuesMut({:?})\", self.inner))\n-    }\n-}\n-\n /// An iterator over a sub-range of BTreeMap's entries.\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n@@ -371,7 +359,7 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n     _marker: PhantomData<&'a mut (K, V)>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let range = Range {"}, {"sha": "bfffa0b8efa1cb074168f78c6217055e5371caed", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -85,10 +85,10 @@ pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BTreeSet::Iter\")\n+        f.debug_tuple(\"Iter\")\n          .field(&self.iter.clone())\n          .finish()\n     }\n@@ -101,34 +101,22 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(&format!(\"BTreeSet::IntoIter({:?})\", self.iter))\n-    }\n-}\n-\n /// An iterator over a sub-range of `BTreeSet`'s items.\n ///\n /// This structure is created by the [`range`] method on [`BTreeSet`].\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n+#[derive(Debug)]\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Range<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(&format!(\"BTreeSet::Range({:?})\", self.iter))\n-    }\n-}\n-\n /// A lazy iterator producing elements in the set difference (in-order).\n ///\n /// This structure is created by the [`difference`] method on [`BTreeSet`].\n@@ -141,10 +129,10 @@ pub struct Difference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BTreeSet::Difference\")\n+        f.debug_tuple(\"Difference\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -163,10 +151,10 @@ pub struct SymmetricDifference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BTreeSet::SymmetricDifference\")\n+        f.debug_tuple(\"SymmetricDifference\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -184,10 +172,10 @@ pub struct Intersection<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BTreeSet::Intersection\")\n+        f.debug_tuple(\"Intersection\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -205,10 +193,10 @@ pub struct Union<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"BTreeSet::Union\")\n+        f.debug_tuple(\"Union\")\n          .field(&self.clone())\n          .finish()\n     }"}, {"sha": "9bbb10136437c866cd089172783ed14d2fdf07d8", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -220,10 +220,9 @@ pub struct Iter<E> {\n     marker: marker::PhantomData<E>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n impl<E: fmt::Debug> fmt::Debug for Iter<E> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"EnumSet::Iter\")\n+        f.debug_tuple(\"Iter\")\n          .field(&self.clone())\n          .finish()\n     }"}, {"sha": "d4f77d625b361d4633f2a538486d02d1fc3dd218", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -65,10 +65,10 @@ pub struct Iter<'a, T: 'a> {\n     marker: PhantomData<&'a Node<T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"LinkedList::Iter\")\n+        f.debug_tuple(\"Iter\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -91,10 +91,10 @@ pub struct IterMut<'a, T: 'a> {\n     len: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"LinkedList::IterMut\")\n+        f.debug_tuple(\"IterMut\")\n          .field(self.clone())\n          .finish()\n     }\n@@ -107,10 +107,10 @@ pub struct IntoIter<T> {\n     list: LinkedList<T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"LinkedList::IntoIter\")\n+        f.debug_tuple(\"IntoIter\")\n          .field(self.clone())\n          .finish()\n     }\n@@ -1104,10 +1104,12 @@ pub struct FrontPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for FrontPlace<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"LinkedList::FrontPlace\")\n+        f.debug_tuple(\"FrontPlace\")\n          .field(self.clone())\n          .finish()\n     }\n@@ -1157,10 +1159,12 @@ pub struct BackPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for BackPlace<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"LinkedList::BackPlace\")\n+        f.debug_tuple(\"BackPlace\")\n          .field(self.clone())\n          .finish()\n     }"}, {"sha": "da5e8d03ea83efb2457b2cba0d437f679a4e6fe3", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -123,7 +123,7 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a> fmt::Debug for EncodeUtf16<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"EncodeUtf16 { .. }\")"}, {"sha": "15a533d6d87cb95591c327eec0913a18e47f5c8c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -1979,10 +1979,10 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a> fmt::Debug for Drain<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"String::Drain { .. }\")\n+        f.pad(\"Drain { .. }\")\n     }\n }\n "}, {"sha": "97ce404a11f7191a672cabc01089dcc82e77747f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -2092,10 +2092,10 @@ pub struct Drain<'a, T: 'a> {\n     vec: Shared<Vec<T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"Vec::Drain\")\n+        f.debug_tuple(\"Drain\")\n          .field(&self.iter.as_slice())\n          .finish()\n     }\n@@ -2167,19 +2167,11 @@ impl<'a, T> FusedIterator for Drain<'a, T> {}\n #[unstable(feature = \"collection_placement\",\n            reason = \"struct name and placement protocol are subject to change\",\n            issue = \"30172\")]\n+#[derive(Debug)]\n pub struct PlaceBack<'a, T: 'a> {\n     vec: &'a mut Vec<T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for PlaceBack<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"Vec::PlaceBack\")\n-         .field(&self.vec.as_slice())\n-         .finish()\n-    }\n-}\n-\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "a88a70888c50c013efbc49fd6136a41cf2fffff3", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cc2448e053047546aff4ea0749adb06896092b5/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=0cc2448e053047546aff4ea0749adb06896092b5", "patch": "@@ -1866,10 +1866,10 @@ pub struct Iter<'a, T: 'a> {\n     head: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"VecDeque::Iter\")\n+        f.debug_tuple(\"Iter\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -1947,10 +1947,10 @@ pub struct IterMut<'a, T: 'a> {\n     head: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"VecDeque::IterMut\")\n+        f.debug_tuple(\"IterMut\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -2022,10 +2022,10 @@ pub struct IntoIter<T> {\n     inner: VecDeque<T>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"VecDeque::IntoIter\")\n+        f.debug_tuple(\"IntoIter\")\n          .field(&self.clone())\n          .finish()\n     }\n@@ -2074,10 +2074,10 @@ pub struct Drain<'a, T: 'a> {\n     deque: Shared<VecDeque<T>>,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.15.0\")]\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.debug_tuple(\"VecDeque::Drain\")\n+        f.debug_tuple(\"Drain\")\n          .field(&self.clone())\n          .finish()\n     }"}]}