{"sha": "df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "node_id": "C_kwDOAAsO6NoAKGRmNWYyNDdhNWM1NDMyZmM4NWE4NGNhZmI4NDYxZmFmZDAxY2Y2YWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-22T01:36:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-22T01:36:41Z"}, "message": "Delay bug to deduplicate diagnostics", "tree": {"sha": "25fc7e5d14ea42b546edf1dd2411aba36396d606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fc7e5d14ea42b546edf1dd2411aba36396d606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "html_url": "https://github.com/rust-lang/rust/commit/df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a95878972f35923e837fcce3eabc6e9c5c917ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a95878972f35923e837fcce3eabc6e9c5c917ce", "html_url": "https://github.com/rust-lang/rust/commit/0a95878972f35923e837fcce3eabc6e9c5c917ce"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "6a1784787587752de4e55ec22267ebb02af47549", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "patch": "@@ -49,11 +49,11 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_number_of_generics(tcx, impl_m, trait_m, trait_item_span) {\n+    if let Err(_) = compare_number_of_generics(tcx, impl_m, trait_m, trait_item_span, false) {\n         return;\n     }\n \n-    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m) {\n+    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m, false) {\n         return;\n     }\n \n@@ -349,8 +349,8 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     let param_env = tcx.param_env(def_id);\n \n     // First, check a few of the same thing as `compare_impl_method`, just so we don't ICE during substitutions later.\n-    compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id))?;\n-    compare_generic_param_kinds(tcx, impl_m, trait_m)?;\n+    compare_number_of_generics(tcx, impl_m, trait_m, tcx.hir().span_if_local(impl_m.def_id), true)?;\n+    compare_generic_param_kinds(tcx, impl_m, trait_m, true)?;\n \n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n@@ -927,6 +927,7 @@ fn compare_number_of_generics<'tcx>(\n     impl_: &ty::AssocItem,\n     trait_: &ty::AssocItem,\n     trait_span: Option<Span>,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n     let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n@@ -1056,7 +1057,7 @@ fn compare_number_of_generics<'tcx>(\n                 err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n             }\n \n-            let reported = err.emit();\n+            let reported = err.emit_unless(delay);\n             err_occurred = Some(reported);\n         }\n     }\n@@ -1308,6 +1309,7 @@ fn compare_generic_param_kinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_item: &ty::AssocItem,\n     trait_item: &ty::AssocItem,\n+    delay: bool,\n ) -> Result<(), ErrorGuaranteed> {\n     assert_eq!(impl_item.kind, trait_item.kind);\n \n@@ -1365,7 +1367,7 @@ fn compare_generic_param_kinds<'tcx>(\n             err.span_label(impl_header_span, \"\");\n             err.span_label(param_impl_span, make_param_message(\"found\", param_impl));\n \n-            let reported = err.emit();\n+            let reported = err.emit_unless(delay);\n             return Err(reported);\n         }\n     }\n@@ -1491,9 +1493,9 @@ pub(crate) fn compare_ty_impl<'tcx>(\n     debug!(\"compare_impl_type(impl_trait_ref={:?})\", impl_trait_ref);\n \n     let _: Result<(), ErrorGuaranteed> = (|| {\n-        compare_number_of_generics(tcx, impl_ty, trait_ty, trait_item_span)?;\n+        compare_number_of_generics(tcx, impl_ty, trait_ty, trait_item_span, false)?;\n \n-        compare_generic_param_kinds(tcx, impl_ty, trait_ty)?;\n+        compare_generic_param_kinds(tcx, impl_ty, trait_ty, false)?;\n \n         let sp = tcx.def_span(impl_ty.def_id);\n         compare_type_predicate_entailment(tcx, impl_ty, sp, trait_ty, impl_trait_ref)?;"}, {"sha": "0bbe50ea6fd37a14b94992b6a9ed6bc104544da5", "filename": "src/test/ui/impl-trait/in-trait/trait-more-generics-than-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.rs?ref=df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "patch": "@@ -10,7 +10,6 @@ trait Foo {\n impl Foo for S {\n     fn bar() -> impl Sized {}\n     //~^ ERROR method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n-    //~| ERROR method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n }\n \n fn main() {"}, {"sha": "8ff54cad95139377497df069ac926709e01192a8", "filename": "src/test/ui/impl-trait/in-trait/trait-more-generics-than-impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df5f247a5c5432fc85a84cafb8461fafd01cf6ae/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Ftrait-more-generics-than-impl.stderr?ref=df5f247a5c5432fc85a84cafb8461fafd01cf6ae", "patch": "@@ -7,15 +7,6 @@ LL |     fn bar<T>() -> impl Sized;\n LL |     fn bar() -> impl Sized {}\n    |           ^ found 0 type parameters\n \n-error[E0049]: method `bar` has 0 type parameters but its trait declaration has 1 type parameter\n-  --> $DIR/trait-more-generics-than-impl.rs:11:11\n-   |\n-LL |     fn bar<T>() -> impl Sized;\n-   |            - expected 1 type parameter\n-...\n-LL |     fn bar() -> impl Sized {}\n-   |           ^ found 0 type parameters\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0049`."}]}