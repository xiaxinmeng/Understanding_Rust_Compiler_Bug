{"sha": "a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjIzZjg0MDVjMjViODU0NzY1NGI0MGFkNWZhMDVmYmU0YzRiNDc=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-09-20T07:21:29Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:16:22Z"}, "message": "update tests that have changed output\n\n I\u2019m not sure why these tests have different output now, but they do.\nIn all cases, the error message that is missing looks like this: \u201cthe\ntrait bound `dyn Trait: Trait` is not satisfied\u201d\n\nMy guess is that the error message is going away because object-safety\nnow involves trait solving, and these extra error messages are no\nlonger leaking out.", "tree": {"sha": "abccf04218708d5d1fd8a8101b560e96346d93a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abccf04218708d5d1fd8a8101b560e96346d93a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "html_url": "https://github.com/rust-lang/rust/commit/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "192900e7c2792b2afafb055ddba530252ce5c0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/192900e7c2792b2afafb055ddba530252ce5c0a3", "html_url": "https://github.com/rust-lang/rust/commit/192900e7c2792b2afafb055ddba530252ce5c0a3"}], "stats": {"total": 51, "additions": 9, "deletions": 42}, "files": [{"sha": "1db5ec097376cd95f6b1ebb138b97009e26601ea", "filename": "src/test/ui/traits/trait-item-privacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.rs?ref=a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "patch": "@@ -110,9 +110,7 @@ fn check_assoc_const() {\n     // A, B, C are resolved as inherent items, their traits don't need to be in scope\n     C::A; //~ ERROR associated constant `A` is private\n           //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~| ERROR the trait bound `dyn assoc_const::C: assoc_const::A` is not satisfied\n     C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~^ ERROR the trait bound `dyn assoc_const::C: assoc_const::B` is not satisfied\n     C::C; // OK\n }\n "}, {"sha": "4ede83d5d73627e3a68e20777e9ce401abc7c153", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "patch": "@@ -100,30 +100,6 @@ error[E0624]: associated constant `A` is private\n LL |     C::A; //~ ERROR associated constant `A` is private\n    |     ^^^^\n \n-error[E0277]: the trait bound `dyn assoc_const::C: assoc_const::A` is not satisfied\n-  --> $DIR/trait-item-privacy.rs:111:5\n-   |\n-LL |     C::A; //~ ERROR associated constant `A` is private\n-   |     ^^^^ the trait `assoc_const::A` is not implemented for `dyn assoc_const::C`\n-   |\n-note: required by `assoc_const::A::A`\n-  --> $DIR/trait-item-privacy.rs:35:9\n-   |\n-LL |         const A: u8 = 0;\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the trait bound `dyn assoc_const::C: assoc_const::B` is not satisfied\n-  --> $DIR/trait-item-privacy.rs:114:5\n-   |\n-LL |     C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n-   |     ^^^^ the trait `assoc_const::B` is not implemented for `dyn assoc_const::C`\n-   |\n-note: required by `assoc_const::B::B`\n-  --> $DIR/trait-item-privacy.rs:39:9\n-   |\n-LL |         const B: u8 = 0;\n-   |         ^^^^^^^^^^^^^^^^\n-\n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:111:5\n    |\n@@ -135,36 +111,36 @@ LL |     C::A; //~ ERROR associated constant `A` is private\n    = note: the trait cannot contain associated consts like `A`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:127:12\n+  --> $DIR/trait-item-privacy.rs:125:12\n    |\n LL |     let _: S::A; //~ ERROR ambiguous associated type\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:128:12\n+  --> $DIR/trait-item-privacy.rs:126:12\n    |\n LL |     let _: S::B; //~ ERROR ambiguous associated type\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::B`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/trait-item-privacy.rs:129:12\n+  --> $DIR/trait-item-privacy.rs:127:12\n    |\n LL |     let _: S::C; //~ ERROR ambiguous associated type\n    |            ^^^^ help: use fully-qualified syntax: `<S as Trait>::C`\n \n error: associated type `A` is private\n-  --> $DIR/trait-item-privacy.rs:131:12\n+  --> $DIR/trait-item-privacy.rs:129:12\n    |\n LL |     let _: T::A; //~ ERROR associated type `A` is private\n    |            ^^^^\n \n error: associated type `A` is private\n-  --> $DIR/trait-item-privacy.rs:140:9\n+  --> $DIR/trait-item-privacy.rs:138:9\n    |\n LL |         A = u8, //~ ERROR associated type `A` is private\n    |         ^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 15 previous errors\n \n-Some errors occurred: E0038, E0223, E0277, E0599, E0624.\n+Some errors occurred: E0038, E0223, E0599, E0624.\n For more information about an error, try `rustc --explain E0038`."}, {"sha": "01d7e89847a89fa454cd5d4bfbfc07174086e2c4", "filename": "src/test/ui/traits/trait-test-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.rs?ref=a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "patch": "@@ -20,5 +20,4 @@ fn main() {\n     (box 10 as Box<bar>).dup();\n     //~^ ERROR E0038\n     //~| ERROR E0038\n-    //~| ERROR E0277\n }"}, {"sha": "db0cd38cb6a682fe256b5370c0fc64900d70badc", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "patch": "@@ -10,12 +10,6 @@ error[E0107]: wrong number of type arguments: expected 1, found 2\n LL |     10.blah::<i32, i32>(); //~ ERROR wrong number of type arguments: expected 1, found 2\n    |                    ^^^ unexpected type argument\n \n-error[E0277]: the trait bound `dyn bar: bar` is not satisfied\n-  --> $DIR/trait-test-2.rs:20:26\n-   |\n-LL |     (box 10 as Box<bar>).dup();\n-   |                          ^^^ the trait `bar` is not implemented for `dyn bar`\n-\n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:20:16\n    |\n@@ -35,7 +29,7 @@ LL |     (box 10 as Box<bar>).dup();\n    = note: method `blah` has generic type parameters\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn bar>>` for `std::boxed::Box<{integer}>`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0038, E0107, E0277.\n+Some errors occurred: E0038, E0107.\n For more information about an error, try `rustc --explain E0038`."}]}