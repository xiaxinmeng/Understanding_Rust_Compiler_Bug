{"sha": "1a2fe87b09d377fa469b2848ab173a91360c9163", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMmZlODdiMDlkMzc3ZmE0NjliMjg0OGFiMTczYTkxMzYwYzkxNjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-30T11:09:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-30T11:09:38Z"}, "message": "Remove unused arena macro args", "tree": {"sha": "8ab0ad776c710e160f659f0898776a02589c08af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab0ad776c710e160f659f0898776a02589c08af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2fe87b09d377fa469b2848ab173a91360c9163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2fe87b09d377fa469b2848ab173a91360c9163", "html_url": "https://github.com/rust-lang/rust/commit/1a2fe87b09d377fa469b2848ab173a91360c9163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2fe87b09d377fa469b2848ab173a91360c9163/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "html_url": "https://github.com/rust-lang/rust/commit/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6d5f47aceeb91e9020674ce2078a9e9e18426eed", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=1a2fe87b09d377fa469b2848ab173a91360c9163", "patch": "@@ -635,7 +635,7 @@ pub macro which_arena_for_type {\n }\n \n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro declare_arena([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n+pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) {\n     #[derive(Default)]\n     pub struct Arena<$tcx> {\n         pub dropless: $crate::DroplessArena,"}, {"sha": "0133acfee1008b9deac792b8f048769bf6583134", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1a2fe87b09d377fa469b2848ab173a91360c9163", "patch": "@@ -84,7 +84,7 @@ mod path;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena, [], 'tcx);\n+rustc_hir::arena_types!(rustc_arena::declare_arena, 'tcx);\n \n struct LoweringContext<'a, 'hir: 'a> {\n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes."}, {"sha": "3e8b98e9f5493dd146664a8f2820670e56530aaa", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=1a2fe87b09d377fa469b2848ab173a91360c9163", "patch": "@@ -9,8 +9,8 @@\n /// where `T` is the type listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $args:tt, $tcx:lifetime) => (\n-        $macro!($args, [\n+    ($macro:path, $tcx:lifetime) => (\n+        $macro!([\n             // HIR types\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,"}, {"sha": "59db2c6636ff9e8495c612ab69c737a7b962b446", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=1a2fe87b09d377fa469b2848ab173a91360c9163", "patch": "@@ -9,8 +9,8 @@\n /// listed. These impls will appear in the implement_ty_decoder! macro.\n #[macro_export]\n macro_rules! arena_types {\n-    ($macro:path, $args:tt, $tcx:lifetime) => (\n-        $macro!($args, [\n+    ($macro:path, $tcx:lifetime) => (\n+        $macro!([\n             [] layouts: rustc_target::abi::Layout,\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef,\n@@ -109,4 +109,4 @@ macro_rules! arena_types {\n     )\n }\n \n-arena_types!(rustc_arena::declare_arena, [], 'tcx);\n+arena_types!(rustc_arena::declare_arena, 'tcx);"}, {"sha": "4edb6a327b0352f60fd61f148e8e491ee8507600", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2fe87b09d377fa469b2848ab173a91360c9163/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=1a2fe87b09d377fa469b2848ab173a91360c9163", "patch": "@@ -437,15 +437,15 @@ macro_rules! impl_arena_allocatable_decoder {\n }\n \n macro_rules! impl_arena_allocatable_decoders {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+    ([$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         $(\n             impl_arena_allocatable_decoder!($a [[$name: $ty], $tcx]);\n         )*\n     }\n }\n \n-rustc_hir::arena_types!(impl_arena_allocatable_decoders, [], 'tcx);\n-arena_types!(impl_arena_allocatable_decoders, [], 'tcx);\n+rustc_hir::arena_types!(impl_arena_allocatable_decoders, 'tcx);\n+arena_types!(impl_arena_allocatable_decoders, 'tcx);\n \n #[macro_export]\n macro_rules! implement_ty_decoder {"}]}