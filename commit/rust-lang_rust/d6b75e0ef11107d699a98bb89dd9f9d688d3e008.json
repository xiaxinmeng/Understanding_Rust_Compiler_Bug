{"sha": "d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Yjc1ZTBlZjExMTA3ZDY5OWE5OGJiODlkZDlmOWQ2ODhkM2UwMDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-04T16:35:20Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-11T14:32:28Z"}, "message": "End cleanup on rustdoc-js tools", "tree": {"sha": "1d170eeb47946c6543ff6b2a53af2f91b1b90aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d170eeb47946c6543ff6b2a53af2f91b1b90aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "html_url": "https://github.com/rust-lang/rust/commit/d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167510f776891f2b0b18d1168ed42377a63493a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/167510f776891f2b0b18d1168ed42377a63493a7", "html_url": "https://github.com/rust-lang/rust/commit/167510f776891f2b0b18d1168ed42377a63493a7"}], "stats": {"total": 826, "additions": 408, "deletions": 418}, "files": [{"sha": "55480f3f149d10dfc1870ead82148377347951b3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "patch": "@@ -627,8 +627,13 @@ impl Step for RustdocJSStd {\n         if let Some(ref nodejs) = builder.config.nodejs {\n             let mut command = Command::new(nodejs);\n             command\n-                .arg(builder.src.join(\"src/tools/rustdoc-js-std/tester.js\"))\n+                .arg(builder.src.join(\"src/tools/rustdoc-js/tester.js\"))\n+                .arg(\"--std\")\n+                .arg(\"--version\")\n+                .arg(crate::channel::CFG_RELEASE_NUM)\n+                .arg(\"--doc-folder\")\n                 .arg(builder.doc_out(self.target))\n+                .arg(\"--test-folder\")\n                 .arg(builder.src.join(\"src/test/rustdoc-js-std\"));\n             builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n             builder.run(&mut command);"}, {"sha": "37f8ca1c5e5276b1ae067ed4dc647793c2e9bbb6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "patch": "@@ -2810,7 +2810,9 @@ impl<'test> TestCx<'test> {\n             let res = self.cmd2procres(\n                 Command::new(&nodejs)\n                     .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n+                    .arg(\"--doc-folder\")\n                     .arg(out_dir.parent().expect(\"no parent\"))\n+                    .arg(\"--test-file\")\n                     .arg(self.testpaths.file.with_extension(\"js\")),\n             );\n             if !res.status.success() {"}, {"sha": "81e64aec491a6e443698ee2fe752bcf0bf287f81", "filename": "src/tools/rustdoc-js-common/lib.js", "status": "removed", "additions": 0, "deletions": 319, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/167510f776891f2b0b18d1168ed42377a63493a7/src%2Ftools%2Frustdoc-js-common%2Flib.js", "raw_url": "https://github.com/rust-lang/rust/raw/167510f776891f2b0b18d1168ed42377a63493a7/src%2Ftools%2Frustdoc-js-common%2Flib.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-common%2Flib.js?ref=167510f776891f2b0b18d1168ed42377a63493a7", "patch": "@@ -1,319 +0,0 @@\n-const fs = require('fs');\n-\n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';' || content[pos] === ',') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n-\n-function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n-\n-    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += aliases;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n-\n-    var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n-\n-    return [loaded, index];\n-}\n-\n-function runChecks(testFile, loaded, index) {\n-    var errors = 0;\n-    var loadedFile = loadContent(\n-        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-\n-    const expected = loadedFile.EXPECTED;\n-    const query = loadedFile.QUERY;\n-    const filter_crate = loadedFile.FILTER_CRATE;\n-    const ignore_order = loadedFile.ignore_order;\n-    const exact_check = loadedFile.exact_check;\n-    const should_fail = loadedFile.should_fail;\n-\n-    var results = loaded.execSearch(loaded.getQuery(query), index);\n-    var error_text = [];\n-\n-    for (var key in expected) {\n-        if (!expected.hasOwnProperty(key)) {\n-            continue;\n-        }\n-        if (!results.hasOwnProperty(key)) {\n-            error_text.push('==> Unknown key \"' + key + '\"');\n-            break;\n-        }\n-        var entry = expected[key];\n-        var prev_pos = -1;\n-        for (var i = 0; i < entry.length; ++i) {\n-            var entry_pos = lookForEntry(entry[i], results[key]);\n-            if (entry_pos === null) {\n-                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                JSON.stringify(entry[i]) + \"'\");\n-            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                JSON.stringify(results[key][i]) + \"'\");\n-            } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-            } else {\n-                prev_pos = entry_pos;\n-            }\n-        }\n-    }\n-    if (error_text.length === 0 && should_fail === true) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(\"==> Test was supposed to fail but all items were found...\");\n-    } else if (error_text.length !== 0 && should_fail === false) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(error_text.join(\"\\n\"));\n-    } else {\n-        console.log(\"OK\");\n-    }\n-    return errors;\n-}\n-\n-module.exports = {\n-    'getNextStep': getNextStep,\n-    'extractFunction': extractFunction,\n-    'extractArrayVariable': extractArrayVariable,\n-    'extractVariable': extractVariable,\n-    'loadContent': loadContent,\n-    'readFile': readFile,\n-    'loadThings': loadThings,\n-    'lookForEntry': lookForEntry,\n-    'loadMainJsAndIndex': loadMainJsAndIndex,\n-    'runChecks': runChecks,\n-};"}, {"sha": "6f730b0fdbbaae5eec9982a9c995339e9e34221b", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/167510f776891f2b0b18d1168ed42377a63493a7/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/167510f776891f2b0b18d1168ed42377a63493a7/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=167510f776891f2b0b18d1168ed42377a63493a7", "patch": "@@ -1,74 +0,0 @@\n-const fs = require('fs');\n-const path = require('path');\n-const tools = require('../rustdoc-js-common/lib.js');\n-\n-\n-function findFile(dir, name, extension) {\n-    var entries = fs.readdirSync(dir);\n-    var matches = [];\n-    for (var i = 0; i < entries.length; ++i) {\n-        var entry = entries[i];\n-        var file_type = fs.statSync(dir + entry);\n-        if (file_type.isDirectory()) {\n-            continue;\n-        }\n-        if (entry.startsWith(name) && entry.endsWith(extension)) {\n-            var version = entry.slice(name.length, entry.length - extension.length);\n-            version = version.split(\".\").map(function(x) {\n-                return parseInt(x);\n-            });\n-            var total = 0;\n-            var mult = 1;\n-            for (var j = version.length - 1; j >= 0; --j) {\n-                total += version[j] * mult;\n-                mult *= 1000;\n-            }\n-            matches.push([entry, total]);\n-        }\n-    }\n-    if (matches.length === 0) {\n-        return null;\n-    }\n-    // We make a reverse sort to have the \"highest\" file. Very useful in case you didn't clean up\n-    // you std doc folder...\n-    matches.sort(function(a, b) {\n-        return b[1] - a[1];\n-    });\n-    return matches[0][0];\n-}\n-\n-function readFileMatching(dir, name, extension) {\n-    if (dir.endsWith(\"/\") === false) {\n-        dir += \"/\";\n-    }\n-    var f = findFile(dir, name, extension);\n-    if (f === null) {\n-        return \"\";\n-    }\n-    return tools.readFile(dir + f);\n-}\n-\n-function main(argv) {\n-    if (argv.length !== 4) {\n-        console.error(\"USAGE: node tester.js STD_DOCS TEST_FOLDER\");\n-        return 1;\n-    }\n-    var std_docs = argv[2];\n-    var test_folder = argv[3];\n-\n-    var mainJs = readFileMatching(std_docs, \"main\", \".js\");\n-    var aliases = readFileMatching(std_docs, \"aliases\", \".js\");\n-    var searchIndex = readFileMatching(std_docs, \"search-index\", \".js\").split(\"\\n\");\n-\n-    var [loaded, index] = tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, \"std\");\n-\n-    var errors = 0;\n-\n-    fs.readdirSync(test_folder).forEach(function(file) {\n-        process.stdout.write('Checking \"' + file + '\" ... ');\n-        errors += tools.runChecks(path.join(test_folder, file), loaded, index);\n-    });\n-    return errors > 0 ? 1 : 0;\n-}\n-\n-process.exit(main(process.argv));"}, {"sha": "a871fccfe3061e5fe9d9096cba7b2147f36d2384", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 400, "deletions": 24, "changes": 424, "blob_url": "https://github.com/rust-lang/rust/blob/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d6b75e0ef11107d699a98bb89dd9f9d688d3e008/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=d6b75e0ef11107d699a98bb89dd9f9d688d3e008", "patch": "@@ -1,43 +1,419 @@\n const fs = require('fs');\n const path = require('path');\n-const tools = require('../rustdoc-js-common/lib.js');\n \n-function load_files(out_folder, crate) {\n-    var mainJs = tools.readFile(out_folder + \"/main.js\");\n-    var aliases = tools.readFile(out_folder + \"/aliases.js\");\n-    var searchIndex = tools.readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n \n-    return tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n }\n \n-function main(argv) {\n-    if (argv.length < 4) {\n-        console.error(\"USAGE: node tester.js OUT_FOLDER [TESTS]\");\n-        return 1;\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';' || content[pos] === ',') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n     }\n-    if (argv[2].substr(-1) !== \"/\") {\n-        argv[2] += \"/\";\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n     }\n-    const out_folder = argv[2];\n+    return content;\n+}\n \n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += aliases;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    return [loaded, index];\n+}\n+\n+function runChecks(testFile, loaded, index) {\n     var errors = 0;\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+    const filter_crate = loadedFile.FILTER_CRATE;\n+    const ignore_order = loadedFile.ignore_order;\n+    const exact_check = loadedFile.exact_check;\n+    const should_fail = loadedFile.should_fail;\n \n-    for (var j = 3; j < argv.length; ++j) {\n-        const test_file = argv[j];\n-        const test_name = path.basename(test_file, \".js\");\n+    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var error_text = [];\n \n-        process.stdout.write('Checking \"' + test_name + '\" ... ');\n-        if (!fs.existsSync(test_file)) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Missing '\" + test_name + \".js' file...\");\n+    for (var key in expected) {\n+        if (!expected.hasOwnProperty(key)) {\n             continue;\n         }\n+        if (!results.hasOwnProperty(key)) {\n+            error_text.push('==> Unknown key \"' + key + '\"');\n+            break;\n+        }\n+        var entry = expected[key];\n+        var prev_pos = -1;\n+        for (var i = 0; i < entry.length; ++i) {\n+            var entry_pos = lookForEntry(entry[i], results[key]);\n+            if (entry_pos === null) {\n+                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                JSON.stringify(entry[i]) + \"'\");\n+            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                JSON.stringify(results[key][i]) + \"'\");\n+            } else if (ignore_order === false && entry_pos < prev_pos) {\n+                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+            } else {\n+                prev_pos = entry_pos;\n+            }\n+        }\n+    }\n+    if (error_text.length === 0 && should_fail === true) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && should_fail === false) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(error_text.join(\"\\n\"));\n+    } else {\n+        console.log(\"OK\");\n+    }\n+    return errors;\n+}\n+\n+function load_files(doc_folder, version, crate) {\n+    var mainJs = readFile(doc_folder + \"/main\" + version + \".js\");\n+    var aliases = readFile(doc_folder + \"/aliases\" + version + \".js\");\n+    var searchIndex = readFile(doc_folder + \"/search-index\" + version + \".js\").split(\"\\n\");\n+\n+    return loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+}\n+\n+function showHelp() {\n+    console.log(\"rustdoc-js options:\");\n+    console.log(\"  --doc-folder [PATH] : location of the generated doc folder\");\n+    console.log(\"  --help              : show this message then quit\");\n+    console.log(\"  --std               : to run std tests\");\n+    console.log(\"  --test-file   [PATH]: location of the JS test file\");\n+    console.log(\"  --test-folder [PATH]: location of the JS tests folder\");\n+    console.log(\"  --version [STRING]  : version used when generating docs (used to get js files)\");\n+}\n \n-        const test_out_folder = out_folder + test_name;\n+function parseOptions(args) {\n+    var opts = {\n+        \"is_std\": false,\n+        \"version\": \"\",\n+        \"doc_folder\": \"\",\n+        \"test_folder\": \"\",\n+        \"test_file\": \"\",\n+    };\n+    var correspondances = {\n+        \"--version\": \"version\",\n+        \"--doc-folder\": \"doc_folder\",\n+        \"--test-folder\": \"test_folder\",\n+        \"--test-file\": \"test_file\",\n+    };\n \n-        var [loaded, index] = load_files(test_out_folder, test_name);\n-        errors += tools.runChecks(test_file, loaded, index);\n+    for (var i = 0; i < args.length; ++i) {\n+        if (args[i] === \"--version\"\n+            || args[i] === \"--doc-folder\"\n+            || args[i] === \"--test-folder\"\n+            || args[i] === \"--test-file\") {\n+            i += 1;\n+            if (i >= args.length) {\n+                console.error(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                return null;\n+            }\n+            opts[correspondances[args[i - 1]]] = args[i];\n+        } else if (args[i] === \"--std\") {\n+            opts[\"is_std\"] = true;\n+        } else if (args[i] === \"--help\") {\n+            showHelp();\n+            process.exit(0);\n+        } else {\n+            console.error(\"Unknown option `\" + args[i] + \"`.\");\n+            console.error(\"Use `--help` to see the list of options\");\n+            return null;\n+        }\n+    }\n+    if (opts[\"doc_folder\"].length < 1) {\n+        console.error(\"Missing `--doc-folder` option.\");\n+        return null;\n+    } else if (opts[\"test_folder\"].length < 1 && opts[\"test_file\"].length < 1) {\n+        console.error(\"At least one of `--test-folder` or `--test-file` option is required.\");\n+        return null;\n+    } else if (opts[\"is_std\"] === true && opts[\"test_file\"].length !== 0) {\n+        console.error(\"`--std` and `--test-file` options can't be used at the same time.\")\n+    }\n+    return opts;\n+}\n+\n+function checkFile(test_file, opts, std_loaded, std_index) {\n+    const test_name = path.basename(test_file, \".js\");\n+\n+    process.stdout.write('Checking \"' + test_name + '\" ... ');\n+\n+    var loaded = std_loaded;\n+    var index = std_index;\n+    if (opts[\"is_std\"] !== true) {\n+        var tmp = load_files(path.join(opts[\"doc_folder\"], test_name), opts[\"version\"], test_name);\n+        loaded = tmp[0];\n+        index = tmp[1];\n+    }\n+    return runChecks(test_file, loaded, index);\n+}\n+\n+function main(argv) {\n+    var opts = parseOptions(argv.slice(2));\n+    if (opts === null) {\n+        return 1;\n+    }\n+\n+    var std_loaded = null;\n+    var std_index = null;\n+    if (opts[\"is_std\"] === true) {\n+        var tmp = load_files(opts[\"doc_folder\"], opts[\"version\"], \"std\");\n+        std_loaded = tmp[0];\n+        std_index = tmp[1];\n+    }\n+\n+    var errors = 0;\n+\n+    if (opts[\"test_file\"].length !== 0) {\n+        errors += checkFile(opts[\"test_file\"], opts, null, null);\n+    }\n+    if (opts[\"test_folder\"].length !== 0) {\n+        fs.readdirSync(opts[\"test_folder\"]).forEach(function(file) {\n+            if (!file.endsWith(\".js\")) {\n+                return;\n+            }\n+            errors += checkFile(path.join(opts[\"test_folder\"], file), opts, std_loaded, std_index);\n+        });\n     }\n     return errors > 0 ? 1 : 0;\n }"}]}