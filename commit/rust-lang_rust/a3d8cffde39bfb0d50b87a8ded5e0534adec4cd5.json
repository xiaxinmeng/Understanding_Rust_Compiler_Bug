{"sha": "a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZDhjZmZkZTM5YmZiMGQ1MGI4N2E4ZGVkNWUwNTM0YWRlYzRjZDU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-02T16:11:54Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Use variables in predicates as well", "tree": {"sha": "3be5406b38c2594808c87d9dbecf7aa14b52b67d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be5406b38c2594808c87d9dbecf7aa14b52b67d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "html_url": "https://github.com/rust-lang/rust/commit/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86348f5994cdc3831edf3a5582d6d9d576fd1d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/86348f5994cdc3831edf3a5582d6d9d576fd1d80", "html_url": "https://github.com/rust-lang/rust/commit/86348f5994cdc3831edf3a5582d6d9d576fd1d80"}], "stats": {"total": 115, "additions": 52, "deletions": 63}, "files": [{"sha": "21ab22fa9817d7014c0b29c4dbe753937246c29b", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "patch": "@@ -50,10 +50,10 @@ pub trait HirDatabase: DefDatabase {\n     fn generic_predicates_for_param(\n         &self,\n         param_id: TypeParamId,\n-    ) -> Arc<[GenericPredicate]>;\n+    ) -> Arc<[Binders<GenericPredicate>]>;\n \n     #[salsa::invoke(crate::lower::generic_predicates_query)]\n-    fn generic_predicates(&self, def: GenericDefId) -> Arc<[GenericPredicate]>;\n+    fn generic_predicates(&self, def: GenericDefId) -> Arc<[Binders<GenericPredicate>]>;\n \n     #[salsa::invoke(crate::lower::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDefId) -> Substs;"}, {"sha": "b69785e55a544fb0ba87b567eab10a12ad92dd16", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     traits::InEnvironment,\n     utils::{generics, variant_data, Generics},\n     ApplicationTy, CallableDef, InferTy, IntTy, Mutability, Obligation, Substs, TraitRef, Ty,\n-    TypeCtor, TypeWalk, Uncertain, Binders,\n+    TypeCtor, Uncertain, Binders,\n };\n \n use super::{BindingMode, Expectation, InferenceContext, InferenceDiagnostic, TypeMismatch};\n@@ -686,7 +686,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             if let TypeCtor::FnDef(def) = a_ty.ctor {\n                 let generic_predicates = self.db.generic_predicates(def.into());\n                 for predicate in generic_predicates.iter() {\n-                    let predicate = predicate.clone().subst_type_params(self.db, def.into(), &a_ty.parameters);\n+                    let predicate = predicate.clone().subst(&a_ty.parameters);\n                     if let Some(obligation) = Obligation::from_predicate(predicate) {\n                         self.obligations.push(obligation);\n                     }"}, {"sha": "a685e70c2ee711d799fe27e4f758f38819d5a296", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "patch": "@@ -749,28 +749,7 @@ pub trait TypeWalk {\n         self\n     }\n \n-    /// Replaces type parameters in this type using the given `Substs`. (So e.g.\n-    /// if `self` is `&[T]`, where type parameter T has index 0, and the\n-    /// `Substs` contain `u32` at index 0, we'll have `&[u32]` afterwards.)\n-    // TODO: this should mostly not be used anymore\n-    fn subst_type_params(self, db: &impl HirDatabase, def: GenericDefId, substs: &Substs) -> Self\n-    where\n-        Self: Sized,\n-    {\n-        let generics = generics(db, def);\n-        self.fold(&mut |ty| match ty {\n-            Ty::Param(id) => {\n-                if let Some(idx) = generics.param_idx(id) {\n-                    substs.get(idx as usize).cloned().unwrap_or(Ty::Param(id))\n-                } else {\n-                    ty\n-                }\n-            }\n-            ty => ty,\n-        })\n-    }\n-\n-    /// Substitutes `Ty::Bound` vars (as opposed to type parameters).\n+    /// Substitutes `Ty::Bound` vars with the given substitution.\n     fn subst_bound_vars(mut self, substs: &Substs) -> Self\n     where\n         Self: Sized,\n@@ -1045,9 +1024,10 @@ impl HirDisplay for Ty {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        let bounds = f.db.generic_predicates_for_param(*id);\n                         write!(f, \"impl \")?;\n-                        write_bounds_like_dyn_trait(&bounds, f)?;\n+                        let bounds = f.db.generic_predicates_for_param(*id);\n+                        let substs = Substs::type_params(&generics);\n+                        write_bounds_like_dyn_trait(&bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(), f)?;\n                     }\n                 }\n             }"}, {"sha": "8471117489eb633989f37ed1a02b9d2fbeaf905d", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "patch": "@@ -10,13 +10,13 @@ use std::sync::Arc;\n \n use hir_def::{\n     builtin_type::BuiltinType,\n-    generics::{WherePredicate, WherePredicateTarget, TypeParamProvenance},\n+    generics::{TypeParamProvenance, WherePredicate, WherePredicateTarget},\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n     AdtId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n-    LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n-    TypeParamId\n+    LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n@@ -148,7 +148,9 @@ impl Ty {\n                             let generics = generics(ctx.db, def);\n                             let param = generics\n                                 .iter()\n-                                .filter(|(_, data)| data.provenance == TypeParamProvenance::ArgumentImplTrait)\n+                                .filter(|(_, data)| {\n+                                    data.provenance == TypeParamProvenance::ArgumentImplTrait\n+                                })\n                                 .nth(idx as usize)\n                                 .map_or(Ty::Unknown, |(id, _)| Ty::Param(id));\n                             param\n@@ -338,19 +340,12 @@ impl Ty {\n                     return Ty::Unknown;\n                 };\n                 param_id\n-            },\n+            }\n             _ => return Ty::Unknown, // Error: Ambiguous associated type\n         };\n         let predicates = ctx.db.generic_predicates_for_param(param_id);\n-        let traits_from_env = predicates.iter().filter_map(|pred| match pred {\n-            GenericPredicate::Implemented(tr) => {\n-                if let Ty::Param(id) = tr.self_ty() {\n-                    if *id == param_id {\n-                        return Some(tr.trait_);\n-                    }\n-                }\n-                None\n-            }\n+        let traits_from_env = predicates.iter().filter_map(|pred| match &pred.value {\n+            GenericPredicate::Implemented(tr) => Some(tr.trait_),\n             _ => None,\n         });\n         let traits = traits_from_env.flat_map(|t| all_super_traits(ctx.db, t));\n@@ -620,8 +615,8 @@ pub(crate) fn field_types_query(\n     };\n     let generics = generics(db, def);\n     let mut res = ArenaMap::default();\n-    let ctx = TyLoweringContext::new(db, &resolver)\n-        .with_type_param_mode(TypeParamLoweringMode::Variable);\n+    let ctx =\n+        TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     for (field_id, field_data) in var_data.fields().iter() {\n         res.insert(field_id, Binders::new(generics.len(), Ty::from_hir(&ctx, &field_data.type_ref)))\n     }\n@@ -639,36 +634,39 @@ pub(crate) fn field_types_query(\n pub(crate) fn generic_predicates_for_param_query(\n     db: &impl HirDatabase,\n     param_id: TypeParamId,\n-) -> Arc<[GenericPredicate]> {\n+) -> Arc<[Binders<GenericPredicate>]> {\n     let resolver = param_id.parent.resolver(db);\n-    let ctx = TyLoweringContext::new(db, &resolver);\n-    // let generics = generics(db, def);\n+    let ctx =\n+        TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n+    let generics = generics(db, param_id.parent);\n     resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n         .filter(|pred| match &pred.target {\n             WherePredicateTarget::TypeRef(type_ref) => {\n                 Ty::from_hir_only_param(&ctx, type_ref) == Some(param_id)\n             }\n-            WherePredicateTarget::TypeParam(local_id) => {\n-                *local_id == param_id.local_id\n-            }\n+            WherePredicateTarget::TypeParam(local_id) => *local_id == param_id.local_id,\n+        })\n+        .flat_map(|pred| {\n+            GenericPredicate::from_where_predicate(&ctx, pred)\n+                .map(|p| Binders::new(generics.len(), p))\n         })\n-        .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n         .collect()\n }\n \n pub(crate) fn generic_predicates_for_param_recover(\n     _db: &impl HirDatabase,\n     _cycle: &[String],\n     _param_id: &TypeParamId,\n-) -> Arc<[GenericPredicate]> {\n+) -> Arc<[Binders<GenericPredicate>]> {\n     Arc::new([])\n }\n \n impl TraitEnvironment {\n     pub fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n-        let ctx = TyLoweringContext::new(db, &resolver);\n+        let ctx = TyLoweringContext::new(db, &resolver)\n+            .with_type_param_mode(TypeParamLoweringMode::Placeholder);\n         let predicates = resolver\n             .where_predicates_in_scope()\n             .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n@@ -682,12 +680,17 @@ impl TraitEnvironment {\n pub(crate) fn generic_predicates_query(\n     db: &impl HirDatabase,\n     def: GenericDefId,\n-) -> Arc<[GenericPredicate]> {\n+) -> Arc<[Binders<GenericPredicate>]> {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext::new(db, &resolver);\n+    let ctx =\n+        TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n+    let generics = generics(db, def);\n     resolver\n         .where_predicates_in_scope()\n-        .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n+        .flat_map(|pred| {\n+            GenericPredicate::from_where_predicate(&ctx, pred)\n+                .map(|p| Binders::new(generics.len(), p))\n+        })\n         .collect()\n }\n \n@@ -915,12 +918,18 @@ pub(crate) fn impl_self_ty_recover(\n     Binders::new(generics.len(), Ty::Unknown)\n }\n \n-pub(crate) fn impl_trait_query(db: &impl HirDatabase, impl_id: ImplId) -> Option<Binders<TraitRef>> {\n+pub(crate) fn impl_trait_query(\n+    db: &impl HirDatabase,\n+    impl_id: ImplId,\n+) -> Option<Binders<TraitRef>> {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let ctx = TyLoweringContext::new(db, &resolver)\n-        .with_type_param_mode(TypeParamLoweringMode::Variable);\n+    let ctx =\n+        TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n     let self_ty = db.impl_self_ty(impl_id);\n     let target_trait = impl_data.target_trait.as_ref()?;\n-    Some(Binders::new(self_ty.num_binders, TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value.clone()))?))\n+    Some(Binders::new(\n+        self_ty.num_binders,\n+        TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value.clone()))?,\n+    ))\n }"}, {"sha": "8260bd1573003f6ddc41205ffa555afee7bb19c6", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=a3d8cffde39bfb0d50b87a8ded5e0534adec4cd5", "patch": "@@ -14,7 +14,7 @@ use ra_db::{\n use super::{builtin, AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n     db::HirDatabase, display::HirDisplay, utils::generics, ApplicationTy, GenericPredicate,\n-    ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n+    ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n };\n \n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n@@ -522,11 +522,11 @@ fn convert_where_clauses(\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n-        if pred.is_error() {\n+        if pred.value.is_error() {\n             // skip errored predicates completely\n             continue;\n         }\n-        result.push(pred.clone().subst_type_params(db, def, substs).to_chalk(db));\n+        result.push(pred.clone().subst(substs).to_chalk(db));\n     }\n     result\n }"}]}