{"sha": "f191e916bdbb98ef91a35b3c82376b3c517654fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOTFlOTE2YmRiYjk4ZWY5MWEzNWIzYzgyMzc2YjNjNTE3NjU0ZmI=", "commit": {"author": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2019-12-26T12:34:18Z"}, "committer": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2019-12-28T15:46:08Z"}, "message": "Add new lint (modulo_arithmetic)", "tree": {"sha": "a2b06b8d5c78ebe68096ada48c9bf6a3892d519f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b06b8d5c78ebe68096ada48c9bf6a3892d519f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f191e916bdbb98ef91a35b3c82376b3c517654fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f191e916bdbb98ef91a35b3c82376b3c517654fb", "html_url": "https://github.com/rust-lang/rust/commit/f191e916bdbb98ef91a35b3c82376b3c517654fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f191e916bdbb98ef91a35b3c82376b3c517654fb/comments", "author": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fec5905d87fdee8d3d6a065cdd450972fb588b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fec5905d87fdee8d3d6a065cdd450972fb588b8", "html_url": "https://github.com/rust-lang/rust/commit/0fec5905d87fdee8d3d6a065cdd450972fb588b8"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "50a7f44ad8e65b4c6a862f7c9f2a2080f3b12e34", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f191e916bdbb98ef91a35b3c82376b3c517654fb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f191e916bdbb98ef91a35b3c82376b3c517654fb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f191e916bdbb98ef91a35b3c82376b3c517654fb", "patch": "@@ -1186,6 +1186,7 @@ Released 2018-09-13\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n [`module_name_repetitions`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\n+[`modulo_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_arithmetic\n [`modulo_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_one\n [`multiple_crate_versions`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions\n [`multiple_inherent_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_inherent_impl"}, {"sha": "01fc20f0f27d91f96846ececdeb64ab31df7616a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f191e916bdbb98ef91a35b3c82376b3c517654fb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f191e916bdbb98ef91a35b3c82376b3c517654fb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f191e916bdbb98ef91a35b3c82376b3c517654fb", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 341 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 342 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8b8f6b27a95dc519014c7c6a082476a4d7a32912", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f191e916bdbb98ef91a35b3c82376b3c517654fb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f191e916bdbb98ef91a35b3c82376b3c517654fb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f191e916bdbb98ef91a35b3c82376b3c517654fb", "patch": "@@ -239,6 +239,7 @@ pub mod misc_early;\n pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n+pub mod modulo_arithmetic;\n pub mod mul_add;\n pub mod multiple_crate_versions;\n pub mod mut_key;\n@@ -667,6 +668,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &missing_const_for_fn::MISSING_CONST_FOR_FN,\n         &missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         &missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+        &modulo_arithmetic::MODULO_ARITHMETIC,\n         &mul_add::MANUAL_MUL_ADD,\n         &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n         &mut_key::MUTABLE_KEY_TYPE,\n@@ -943,6 +945,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box comparison_chain::ComparisonChain);\n     store.register_late_pass(|| box mul_add::MulAddCheck);\n     store.register_late_pass(|| box mut_key::MutableKeyType);\n+    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n     store.register_early_pass(|| box reference::DerefAddrOf);\n     store.register_early_pass(|| box reference::RefInDeref);\n     store.register_early_pass(|| box double_parens::DoubleParens);\n@@ -1003,6 +1006,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&misc::FLOAT_CMP_CONST),\n         LintId::of(&missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n         LintId::of(&missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+        LintId::of(&modulo_arithmetic::MODULO_ARITHMETIC),\n         LintId::of(&panic_unimplemented::PANIC),\n         LintId::of(&panic_unimplemented::TODO),\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),"}, {"sha": "308bb00fe76b7f73ba0e6bf8e4d0390a0b512610", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/f191e916bdbb98ef91a35b3c82376b3c517654fb/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f191e916bdbb98ef91a35b3c82376b3c517654fb/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=f191e916bdbb98ef91a35b3c82376b3c517654fb", "patch": "@@ -0,0 +1,149 @@\n+use crate::consts::{constant, Constant};\n+use crate::utils::{sext, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc::declare_lint_pass;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self};\n+use rustc_session::declare_tool_lint;\n+use std::fmt::Display;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for modulo arithemtic.\n+    ///\n+    /// **Why is this bad?** The results of modulo (%) operation might differ\n+    /// depending on the language, when negative numbers are involved.\n+    /// If you interop with different languages it might be beneficial\n+    /// to double check all places that use modulo arithmetic.\n+    ///\n+    /// For example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let x = -17 % 3;\n+    /// ```\n+    pub MODULO_ARITHMETIC,\n+    restriction,\n+    \"any modulo arithmetic statement\"\n+}\n+\n+declare_lint_pass!(ModuloArithmetic => [MODULO_ARITHMETIC]);\n+\n+struct OperandInfo {\n+    string_representation: Option<String>,\n+    is_negative: bool,\n+    is_integral: bool,\n+}\n+\n+fn analyze_operand(operand: &Expr, cx: &LateContext<'_, '_>, expr: &Expr) -> Option<OperandInfo> {\n+    match constant(cx, cx.tables, operand) {\n+        Some((Constant::Int(v), _)) => match cx.tables.expr_ty(expr).kind {\n+            ty::Int(ity) => {\n+                let value = sext(cx.tcx, v, ity);\n+                return Some(OperandInfo {\n+                    string_representation: Some(value.to_string()),\n+                    is_negative: value < 0,\n+                    is_integral: true,\n+                });\n+            },\n+            ty::Uint(_) => {\n+                return Some(OperandInfo {\n+                    string_representation: None,\n+                    is_negative: false,\n+                    is_integral: true,\n+                });\n+            },\n+            _ => {},\n+        },\n+        Some((Constant::F32(f), _)) => {\n+            return Some(floating_point_operand_info(&f));\n+        },\n+        Some((Constant::F64(f), _)) => {\n+            return Some(floating_point_operand_info(&f));\n+        },\n+        _ => {},\n+    }\n+    None\n+}\n+\n+fn floating_point_operand_info<T: Display + PartialOrd + From<f32>>(f: &T) -> OperandInfo {\n+    OperandInfo {\n+        string_representation: Some(format!(\"{:.3}\", *f)),\n+        is_negative: *f < 0.0.into(),\n+        is_integral: false,\n+    }\n+}\n+\n+fn might_have_negative_value(t: &ty::TyS<'_>) -> bool {\n+    t.is_signed() || t.is_floating_point()\n+}\n+\n+fn check_const_operands<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    lhs_operand: &OperandInfo,\n+    rhs_operand: &OperandInfo,\n+) {\n+    if lhs_operand.is_negative ^ rhs_operand.is_negative {\n+        span_lint_and_then(\n+            cx,\n+            MODULO_ARITHMETIC,\n+            expr.span,\n+            &format!(\n+                \"you are using modulo operator on constants with different signs: `{} % {}`\",\n+                lhs_operand.string_representation.as_ref().unwrap(),\n+                rhs_operand.string_representation.as_ref().unwrap()\n+            ),\n+            |db| {\n+                db.note(\"double check for expected result especially when interoperating with different languages\");\n+                if lhs_operand.is_integral {\n+                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                }\n+            },\n+        );\n+    }\n+}\n+\n+fn check_non_const_operands<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, operand: &Expr) {\n+    let operand_type = cx.tables.expr_ty(operand);\n+    if might_have_negative_value(operand_type) {\n+        span_lint_and_then(\n+            cx,\n+            MODULO_ARITHMETIC,\n+            expr.span,\n+            \"you are using modulo operator on types that might have different signs\",\n+            |db| {\n+                db.note(\"double check for expected result especially when interoperating with different languages\");\n+                if operand_type.is_integral() {\n+                    db.note(\"or consider using `rem_euclid` or similar function\");\n+                }\n+            },\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ModuloArithmetic {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        match &expr.kind {\n+            ExprKind::Binary(op, lhs, rhs) | ExprKind::AssignOp(op, lhs, rhs) => {\n+                if let BinOpKind::Rem = op.node {\n+                    let lhs_operand = analyze_operand(lhs, cx, expr);\n+                    let rhs_operand = analyze_operand(rhs, cx, expr);\n+                    if_chain! {\n+                        if let Some(lhs_operand) = lhs_operand;\n+                        if let Some(rhs_operand) = rhs_operand;\n+                        then {\n+                            check_const_operands(cx, expr, &lhs_operand, &rhs_operand);\n+                        }\n+                        else {\n+                            check_non_const_operands(cx, expr, lhs);\n+                        }\n+                    }\n+                };\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "08cbff404442b06bb828ea4a652d871c439cd3fc", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f191e916bdbb98ef91a35b3c82376b3c517654fb/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f191e916bdbb98ef91a35b3c82376b3c517654fb/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f191e916bdbb98ef91a35b3c82376b3c517654fb", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 341] = [\n+pub const ALL_LINTS: [Lint; 342] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1183,6 +1183,13 @@ pub const ALL_LINTS: [Lint; 341] = [\n         deprecation: None,\n         module: \"enum_variants\",\n     },\n+    Lint {\n+        name: \"modulo_arithmetic\",\n+        group: \"restriction\",\n+        desc: \"any modulo arithmetic statement\",\n+        deprecation: None,\n+        module: \"modulo_arithmetic\",\n+    },\n     Lint {\n         name: \"modulo_one\",\n         group: \"correctness\","}]}