{"sha": "14999dd74b38ca79b80772f4f33425574faff89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTk5ZGQ3NGIzOGNhNzliODA3NzJmNGYzMzQyNTU3NGZhZmY4OWE=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-01-29T20:26:16Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-01-31T20:08:49Z"}, "message": "Add methods to leak RefCell borrows to references\n\nUsually, references to the interior are only created by the `Deref` and\n`DerefMut` impl of the guards `Ref` and `RefMut`. Note that `RefCell`\nalready has to cope with leaks of such guards which, when it occurs,\neffectively makes it impossible to ever acquire a mutable guard or any\nguard for `Ref` and `RefMut` respectively. It is already safe to use\nthis to create a reference to the inner of the ref cell that lives as\nlong as the reference to the `RefCell` itself, e.g.\n\n```rust\nfn leak(r: &RefCell<usize>) -> Option<&usize> {\n    let guard = r.try_borrow().ok()?;\n    let leaked = Box::leak(Box::new(guard));\n    Some(&*leaked)\n}\n```\n\nThe newly added methods allow the same reference conversion without an\nindirection over a leaked allocation and composing with both borrow and\ntry_borrow without additional method combinations.", "tree": {"sha": "501f6d6090bd19ebe00109e7d3ed5d27d3c73160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501f6d6090bd19ebe00109e7d3ed5d27d3c73160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14999dd74b38ca79b80772f4f33425574faff89a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14999dd74b38ca79b80772f4f33425574faff89a", "html_url": "https://github.com/rust-lang/rust/commit/14999dd74b38ca79b80772f4f33425574faff89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14999dd74b38ca79b80772f4f33425574faff89a/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/698fcd38fa9548e64a2092ff48c9d15ceb57d40c", "html_url": "https://github.com/rust-lang/rust/commit/698fcd38fa9548e64a2092ff48c9d15ceb57d40c"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "b1d799953e710f5d641ce8df6bb6742fbbe0601e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/14999dd74b38ca79b80772f4f33425574faff89a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14999dd74b38ca79b80772f4f33425574faff89a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=14999dd74b38ca79b80772f4f33425574faff89a", "patch": "@@ -1245,6 +1245,38 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n         let borrow = orig.borrow.clone();\n         (Ref { value: a, borrow }, Ref { value: b, borrow: orig.borrow })\n     }\n+\n+    /// Convert into a reference to the underlying data.\n+    ///\n+    /// The underlying `RefCell` can never be mutably borrowed from again and will always appear\n+    /// already immutably borrowed. It can still be immutably borrowed until more than `isize::MAX`\n+    /// `Ref`s of this `RefCell` have been leaked, through this function or another leak, in total.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `Ref::leak(...)`. A method would interfere with methods of the\n+    /// same name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_leak)]\n+    /// use std::cell::{RefCell, Ref};\n+    /// let cell = RefCell::new(0);\n+    ///\n+    /// let value = Ref::leak(cell.borrow());\n+    /// assert_eq!(*value, 0);\n+    ///\n+    /// assert!(cell.try_borrow().is_ok());\n+    /// assert!(cell.try_borrow_mut().is_err());\n+    /// ```\n+    #[unstable(feature = \"cell_leak\", issue = \"none\")]\n+    pub fn leak(orig: Ref<'b, T>) -> &'b T {\n+        // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell never\n+        // goes back to UNUSED again. No further references can be created from the original cell,\n+        // making the current borrow the only reference for the remaining lifetime.\n+        mem::forget(orig.borrow);\n+        orig.value\n+    }\n }\n \n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n@@ -1330,6 +1362,37 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n         let borrow = orig.borrow.clone();\n         (RefMut { value: a, borrow }, RefMut { value: b, borrow: orig.borrow })\n     }\n+\n+    /// Convert into a mutable reference to the underlying data.\n+    ///\n+    /// The underlying `RefCell` can not be borrowed from again and will always appear already\n+    /// mutably borrowed, making the returned reference the only to the interior.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `RefMut::leak(...)`. A method would interfere with methods of the\n+    /// same name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_leak)]\n+    /// use std::cell::{RefCell, RefMut};\n+    /// let cell = RefCell::new(0);\n+    ///\n+    /// let value = RefMut::leak(cell.borrow_mut());\n+    /// assert_eq!(*value, 0);\n+    /// *value = 1;\n+    ///\n+    /// assert!(cell.try_borrow_mut().is_err());\n+    /// ```\n+    #[unstable(feature = \"cell_leak\", issue = \"none\")]\n+    pub fn leak(orig: RefMut<'b, T>) -> &'b mut T {\n+        // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell never\n+        // goes back to UNUSED again. No further references can be created from the original cell,\n+        // making the current borrow the only reference for the remaining lifetime.\n+        mem::forget(orig.borrow);\n+        orig.value\n+    }\n }\n \n struct BorrowRefMut<'b> {"}]}