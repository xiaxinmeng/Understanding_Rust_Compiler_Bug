{"sha": "c5df62041950b2279191804841a51077826df9a0", "node_id": "C_kwDOAAsO6NoAKGM1ZGY2MjA0MTk1MGIyMjc5MTkxODA0ODQxYTUxMDc3ODI2ZGY5YTA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-23T17:21:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-23T17:21:43Z"}, "message": "Annotate static lifetimes too", "tree": {"sha": "ec1e91dfddcb51ad374a0cc336ecfe8cfa758da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1e91dfddcb51ad374a0cc336ecfe8cfa758da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5df62041950b2279191804841a51077826df9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5df62041950b2279191804841a51077826df9a0", "html_url": "https://github.com/rust-lang/rust/commit/c5df62041950b2279191804841a51077826df9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5df62041950b2279191804841a51077826df9a0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0cda2b2781a7cd66cc5d6672e390edfdbf7fc64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0cda2b2781a7cd66cc5d6672e390edfdbf7fc64", "html_url": "https://github.com/rust-lang/rust/commit/c0cda2b2781a7cd66cc5d6672e390edfdbf7fc64"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "b1523068799c940cc240b0d847e664e0a2c83a6c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5df62041950b2279191804841a51077826df9a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5df62041950b2279191804841a51077826df9a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c5df62041950b2279191804841a51077826df9a0", "patch": "@@ -983,15 +983,9 @@ pub trait PrettyPrinter<'tcx>:\n             write!(self, \"Sized\")?;\n         }\n \n-        if let [re] = lifetimes.as_slice()\n-            && re.is_static()\n-        {\n-            // Don't print a single static lifetime\n-        } else {\n-            for re in lifetimes {\n-                write!(self, \" + \")?;\n-                self = self.print_region(re)?;\n-            }\n+        for re in lifetimes {\n+            write!(self, \" + \")?;\n+            self = self.print_region(re)?;\n         }\n \n         Ok(self)"}, {"sha": "8eb8c44bb420e03df9eb378d469d3030f81bf196", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=c5df62041950b2279191804841a51077826df9a0", "patch": "@@ -16,7 +16,7 @@ enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n enum E3 { V(dyn Iterator<Item: 'static>) }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n@@ -25,6 +25,6 @@ union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)`\n+//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n \n fn main() {}"}, {"sha": "dbfcfa5806309c0be12cf5cf55b2c5e23b1f953a", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=c5df62041950b2279191804841a51077826df9a0", "patch": "@@ -70,13 +70,13 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n    |             ++++                        +\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:17:13\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n+   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -107,14 +107,14 @@ help: the `Box` type always has a statically known size and allocates its conten\n LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n    |               ++++                                      +\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized> + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n   --> $DIR/inside-adt.rs:26:15\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized> + 'static)>`\n+   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+   = note: required because it appears within the type `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "e8548d402fae5b1a7b4a8ffa57609d6853005922", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=c5df62041950b2279191804841a51077826df9a0", "patch": "@@ -77,10 +77,10 @@ where\n \n fn main() {\n     accepts_trait(returns_opaque());\n-    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n     //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n@@ -89,7 +89,7 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`"}, {"sha": "2cce6b947025e5b41c1361a5d555c33661dc46f8", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5df62041950b2279191804841a51077826df9a0/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=c5df62041950b2279191804841a51077826df9a0", "patch": "@@ -132,7 +132,7 @@ note: required by a bound in `accepts_generic_trait`\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n-error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n@@ -144,18 +144,18 @@ LL |     accepts_trait(returns_opaque());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Trait as Trait>::Associated`\n+           found associated type `<impl Trait + 'static as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Trait as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Trait + 'static as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n@@ -167,13 +167,13 @@ LL |     accepts_trait(returns_opaque_derived());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl DerivedTrait as Trait>::Associated`\n+           found associated type `<impl DerivedTrait + 'static as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl DerivedTrait as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl DerivedTrait + 'static as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n@@ -222,7 +222,7 @@ note: required by a bound in `accepts_trait`\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n@@ -234,13 +234,13 @@ LL |     accepts_generic_trait(returns_opaque_generic());\n    |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+           found associated type `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++"}]}