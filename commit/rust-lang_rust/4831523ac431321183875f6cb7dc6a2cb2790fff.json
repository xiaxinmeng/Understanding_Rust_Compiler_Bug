{"sha": "4831523ac431321183875f6cb7dc6a2cb2790fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzE1MjNhYzQzMTMyMTE4Mzg3NWY2Y2I3ZGM2YTJjYjI3OTBmZmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T09:47:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-19T09:47:52Z"}, "message": "Rollup merge of #76757 - matthiaskrgr:clippy_try_into, r=lcnr\n\ndon't convert types to the same type with try_into (clippy::useless_conversion)", "tree": {"sha": "f2f5b5d8e16511c302e037f498554fd4ca640512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f5b5d8e16511c302e037f498554fd4ca640512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4831523ac431321183875f6cb7dc6a2cb2790fff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZdPJCRBK7hj4Ov3rIwAAdHIIABIROidfKkGSGZaXv/b3m3O0\n6NgXcp7ltZBmo+RggXFM3vmmTJpPRLOzYcPtk3dUTq6oBfis1Y1dwBx3EH/5K4h+\nVPMJvxBF5IRUM82Ozx1T3h/ZmaRCN9vse3N3P8MFRXKG2+b/67MHP8TWuRDrXMi7\nIwvB0xZOOMD3HcX26iIADOyaFmH6UOt4tacIFV83uwM0FCm2kCPeBj8NFGqiXWiT\n7g/IVlHui8QiqEw33Ajm2e5IbGch3D0A9fLqUIhpuxnQ6Xfmb/JqwCWK6EXHyvwk\nym5EvFT1MlNgrW8t8tEZlIlU+iBRFNNJa4YgMLM34dN/apyvML5U96MmZcIadZ0=\n=u3lL\n-----END PGP SIGNATURE-----\n", "payload": "tree f2f5b5d8e16511c302e037f498554fd4ca640512\nparent 5631b5d6843164a776b939cf8ebac7b8ea5e582a\nparent 0e3414248a683aa4490c84500cba772c3d920c2d\nauthor Ralf Jung <post@ralfj.de> 1600508872 +0200\ncommitter GitHub <noreply@github.com> 1600508872 +0200\n\nRollup merge of #76757 - matthiaskrgr:clippy_try_into, r=lcnr\n\ndon't convert types to the same type with try_into (clippy::useless_conversion)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4831523ac431321183875f6cb7dc6a2cb2790fff", "html_url": "https://github.com/rust-lang/rust/commit/4831523ac431321183875f6cb7dc6a2cb2790fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4831523ac431321183875f6cb7dc6a2cb2790fff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5631b5d6843164a776b939cf8ebac7b8ea5e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5631b5d6843164a776b939cf8ebac7b8ea5e582a", "html_url": "https://github.com/rust-lang/rust/commit/5631b5d6843164a776b939cf8ebac7b8ea5e582a"}, {"sha": "0e3414248a683aa4490c84500cba772c3d920c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3414248a683aa4490c84500cba772c3d920c2d", "html_url": "https://github.com/rust-lang/rust/commit/0e3414248a683aa4490c84500cba772c3d920c2d"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "5c3e3538401801993de42ebe832fdd8423fba66b", "filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=4831523ac431321183875f6cb7dc6a2cb2790fff", "patch": "@@ -4,7 +4,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use smallvec::{smallvec, SmallVec};\n \n-use std::convert::TryInto;\n use std::mem;\n \n use super::abs_domain::Lift;\n@@ -481,12 +480,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             };\n             let base_ty = base_place.ty(self.builder.body, self.builder.tcx).ty;\n             let len: u64 = match base_ty.kind() {\n-                ty::Array(_, size) => {\n-                    let length = size.eval_usize(self.builder.tcx, self.builder.param_env);\n-                    length\n-                        .try_into()\n-                        .expect(\"slice pattern of array with more than u32::MAX elements\")\n-                }\n+                ty::Array(_, size) => size.eval_usize(self.builder.tcx, self.builder.param_env),\n                 _ => bug!(\"from_end: false slice pattern of non-array type\"),\n             };\n             for offset in from..to {"}, {"sha": "3b22eb5d98719c18097843ca627414834061416f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=4831523ac431321183875f6cb7dc6a2cb2790fff", "patch": "@@ -551,7 +551,7 @@ where\n                 let n = base.len(self)?;\n                 if n < min_length {\n                     // This can only be reached in ConstProp and non-rustc-MIR.\n-                    throw_ub!(BoundsCheckFailed { len: min_length.into(), index: n });\n+                    throw_ub!(BoundsCheckFailed { len: min_length, index: n });\n                 }\n \n                 let index = if from_end {\n@@ -565,9 +565,7 @@ where\n                 self.mplace_index(base, index)?\n             }\n \n-            Subslice { from, to, from_end } => {\n-                self.mplace_subslice(base, u64::from(from), u64::from(to), from_end)?\n-            }\n+            Subslice { from, to, from_end } => self.mplace_subslice(base, from, to, from_end)?,\n         })\n     }\n "}, {"sha": "4ef88c25cadf3393663ba6a6b90b236a7d2b2857", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4831523ac431321183875f6cb7dc6a2cb2790fff/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=4831523ac431321183875f6cb7dc6a2cb2790fff", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.hir.tcx();\n         let (min_length, exact_size) = match place.ty(&self.local_decls, tcx).ty.kind() {\n             ty::Array(_, length) => {\n-                (length.eval_usize(tcx, self.hir.param_env).try_into().unwrap(), true)\n+                (length.eval_usize(tcx, self.hir.param_env), true)\n             }\n             _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n         };"}]}