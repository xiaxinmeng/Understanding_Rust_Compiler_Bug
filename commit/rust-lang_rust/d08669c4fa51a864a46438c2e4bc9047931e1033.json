{"sha": "d08669c4fa51a864a46438c2e4bc9047931e1033", "node_id": "C_kwDOAAsO6NoAKGQwODY2OWM0ZmE1MWE4NjRhNDY0MzhjMmU0YmM5MDQ3OTMxZTEwMzM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-29T19:07:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T14:22:40Z"}, "message": "Compute by owner instead of HirId.", "tree": {"sha": "a815b3ba8cecfefb3032b4d3624c6c414ade1b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a815b3ba8cecfefb3032b4d3624c6c414ade1b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08669c4fa51a864a46438c2e4bc9047931e1033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08669c4fa51a864a46438c2e4bc9047931e1033", "html_url": "https://github.com/rust-lang/rust/commit/d08669c4fa51a864a46438c2e4bc9047931e1033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08669c4fa51a864a46438c2e4bc9047931e1033/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "url": "https://api.github.com/repos/rust-lang/rust/commits/26e5fe9e8507f7dcb50c21e785515a7841e8cf55", "html_url": "https://github.com/rust-lang/rust/commit/26e5fe9e8507f7dcb50c21e785515a7841e8cf55"}], "stats": {"total": 172, "additions": 147, "deletions": 25}, "files": [{"sha": "f1493e5bdadb19c6b354e7be9ae4197f92fc7ffa", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=d08669c4fa51a864a46438c2e4bc9047931e1033", "patch": "@@ -53,6 +53,20 @@ where\n         self.0.iter_mut().find(|(key, _)| k == key.borrow()).map(|elem| &mut elem.1)\n     }\n \n+    /// Gets a mutable reference to the value in the entry, or insert a new one.\n+    pub fn get_mut_or_insert_default(&mut self, k: K) -> &mut V\n+    where\n+        K: Eq,\n+        V: Default,\n+    {\n+        let pos = self.0.iter().position(|(key, _)| &k == key).unwrap_or_else(|| {\n+            let pos = self.0.len();\n+            self.0.push((k, V::default()));\n+            pos\n+        });\n+        &mut self.0[pos].1\n+    }\n+\n     /// Returns the any value corresponding to the supplied predicate filter.\n     ///\n     /// The supplied predicate will be applied to each (key, value) pair and it will return a"}, {"sha": "b2a46739009a28723466d07f187d1dad9764b8f9", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 110, "deletions": 16, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d08669c4fa51a864a46438c2e4bc9047931e1033", "patch": "@@ -5,7 +5,8 @@ use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::{intravisit, HirId};\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::{\n@@ -115,6 +116,7 @@ fn lint_expectations(tcx: TyCtxt<'_>, (): ()) -> Vec<(LintExpectationId, LintExp\n             specs: ShallowLintLevelMap::default(),\n             expectations: Vec::new(),\n             unstable_to_stable_ids: FxHashMap::default(),\n+            empty: FxHashMap::default(),\n         },\n         warn_about_weird_lints: false,\n         store,\n@@ -130,25 +132,39 @@ fn lint_expectations(tcx: TyCtxt<'_>, (): ()) -> Vec<(LintExpectationId, LintExp\n     builder.provider.expectations\n }\n \n-fn shallow_lint_levels_on(tcx: TyCtxt<'_>, hir_id: HirId) -> ShallowLintLevelMap {\n+#[instrument(level = \"trace\", skip(tcx), ret)]\n+fn shallow_lint_levels_on(tcx: TyCtxt<'_>, owner: hir::OwnerId) -> ShallowLintLevelMap {\n     let store = unerased_lint_store(tcx);\n \n     let mut levels = LintLevelsBuilder {\n         sess: tcx.sess,\n-        provider: LintLevelQueryMap { tcx, cur: hir_id, specs: ShallowLintLevelMap::default() },\n+        provider: LintLevelQueryMap {\n+            tcx,\n+            cur: owner.into(),\n+            specs: ShallowLintLevelMap::default(),\n+            empty: FxHashMap::default(),\n+        },\n         warn_about_weird_lints: false,\n         store,\n         registered_tools: &tcx.resolutions(()).registered_tools,\n     };\n \n-    let is_crate = hir::CRATE_HIR_ID == hir_id;\n-    if is_crate {\n-        levels.add_command_line();\n-    }\n-    debug!(?hir_id);\n-    levels.add(tcx.hir().attrs(hir_id), is_crate, Some(hir_id));\n+    match tcx.hir().expect_owner(owner) {\n+        hir::OwnerNode::Item(item) => levels.visit_item(item),\n+        hir::OwnerNode::ForeignItem(item) => levels.visit_foreign_item(item),\n+        hir::OwnerNode::TraitItem(item) => levels.visit_trait_item(item),\n+        hir::OwnerNode::ImplItem(item) => levels.visit_impl_item(item),\n+        hir::OwnerNode::Crate(mod_) => {\n+            levels.add_command_line();\n+            levels.add_id(hir::CRATE_HIR_ID);\n+            levels.visit_mod(mod_, mod_.spans.inner_span, hir::CRATE_HIR_ID)\n+        }\n+    };\n+\n+    let mut specs = levels.provider.specs;\n+    specs.specs.retain(|(_, v)| !v.is_empty());\n \n-    levels.provider.specs\n+    specs\n }\n \n pub struct TopDown {\n@@ -181,14 +197,16 @@ struct LintLevelQueryMap<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     cur: HirId,\n     specs: ShallowLintLevelMap,\n+    /// Empty hash map to simplify code.\n+    empty: FxHashMap<LintId, LevelAndSource>,\n }\n \n impl LintLevelsProvider for LintLevelQueryMap<'_> {\n     fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n-        &self.specs.specs\n+        self.specs.specs.get(&self.cur.local_id).unwrap_or(&self.empty)\n     }\n     fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n-        &mut self.specs.specs\n+        self.specs.specs.get_mut_or_insert_default(self.cur.local_id)\n     }\n     fn get_lint_level(&self, lint: &'static Lint, _: &Session) -> LevelAndSource {\n         self.specs.lint_level_id_at_node(self.tcx, LintId::of(lint), self.cur)\n@@ -201,15 +219,18 @@ struct QueryMapExpectationsWrapper<'tcx> {\n     specs: ShallowLintLevelMap,\n     expectations: Vec<(LintExpectationId, LintExpectation)>,\n     unstable_to_stable_ids: FxHashMap<LintExpectationId, LintExpectationId>,\n+    /// Empty hash map to simplify code.\n+    empty: FxHashMap<LintId, LevelAndSource>,\n }\n \n impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n     fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n-        &self.specs.specs\n+        self.specs.specs.get(&self.cur.local_id).unwrap_or(&self.empty)\n     }\n     fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n-        self.specs.specs.clear();\n-        &mut self.specs.specs\n+        let specs = self.specs.specs.get_mut_or_insert_default(self.cur.local_id);\n+        specs.clear();\n+        specs\n     }\n     fn get_lint_level(&self, lint: &'static Lint, _: &Session) -> LevelAndSource {\n         self.specs.lint_level_id_at_node(self.tcx, LintId::of(lint), self.cur)\n@@ -229,13 +250,86 @@ impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n     }\n }\n \n+impl<'tcx> LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n+    fn add_id(&mut self, hir_id: HirId) {\n+        self.provider.cur = hir_id;\n+        self.add(self.provider.tcx.hir().attrs(hir_id), hir_id == hir::CRATE_HIR_ID, Some(hir_id));\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n+    type NestedFilter = nested_filter::OnlyBodies;\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.provider.tcx.hir()\n+    }\n+\n+    fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n+        self.add_id(param.hir_id);\n+        intravisit::walk_param(self, param);\n+    }\n+\n+    fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n+        self.add_id(it.hir_id());\n+        intravisit::walk_item(self, it);\n+    }\n+\n+    fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n+        self.add_id(it.hir_id());\n+        intravisit::walk_foreign_item(self, it);\n+    }\n+\n+    fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {\n+        // We will call `add_id` when we walk\n+        // the `StmtKind`. The outer statement itself doesn't\n+        // define the lint levels.\n+        intravisit::walk_stmt(self, e);\n+    }\n+\n+    fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n+        self.add_id(e.hir_id);\n+        intravisit::walk_expr(self, e);\n+    }\n+\n+    fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n+        self.add_id(s.hir_id);\n+        intravisit::walk_field_def(self, s);\n+    }\n+\n+    fn visit_variant(&mut self, v: &'tcx hir::Variant<'tcx>) {\n+        self.add_id(v.id);\n+        intravisit::walk_variant(self, v);\n+    }\n+\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+        self.add_id(l.hir_id);\n+        intravisit::walk_local(self, l);\n+    }\n+\n+    fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {\n+        self.add_id(a.hir_id);\n+        intravisit::walk_arm(self, a);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n+        self.add_id(trait_item.hir_id());\n+        intravisit::walk_trait_item(self, trait_item);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n+        self.add_id(impl_item.hir_id());\n+        intravisit::walk_impl_item(self, impl_item);\n+    }\n+}\n+\n impl<'tcx> LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'tcx>> {\n     fn add_id(&mut self, hir_id: HirId) {\n+        self.provider.cur = hir_id;\n         self.add(self.provider.tcx.hir().attrs(hir_id), hir_id == hir::CRATE_HIR_ID, Some(hir_id));\n     }\n }\n \n-impl<'tcx> intravisit::Visitor<'tcx> for LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'tcx>> {\n+impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'tcx>> {\n     type NestedFilter = nested_filter::All;\n \n     fn nested_visit_map(&mut self) -> Self::Map {"}, {"sha": "d65fa30450ce86fdd029ca7e0de8a05211e42e78", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=d08669c4fa51a864a46438c2e4bc9047931e1033", "patch": "@@ -1,8 +1,9 @@\n use std::cmp;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, MultiSpan};\n-use rustc_hir::HirId;\n+use rustc_hir::{HirId, ItemLocalId};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     FutureIncompatibilityReason, Level, Lint, LintId,\n@@ -62,7 +63,7 @@ pub type LevelAndSource = (Level, LintLevelSource);\n /// by the attributes for *a single HirId*.\n #[derive(Default, Debug, HashStable)]\n pub struct ShallowLintLevelMap {\n-    pub specs: FxHashMap<LintId, LevelAndSource>,\n+    pub specs: VecMap<ItemLocalId, FxHashMap<LintId, LevelAndSource>>,\n }\n \n /// From an initial level and source, verify the effect of special annotations:\n@@ -116,19 +117,30 @@ impl ShallowLintLevelMap {\n     /// Perform a deep probe in the HIR tree looking for the actual level for the lint.\n     /// This lint level is not usable for diagnostics, it needs to be corrected by\n     /// `reveal_actual_level` beforehand.\n+    #[instrument(level = \"trace\", skip(self, tcx), ret)]\n     fn probe_for_lint_level(\n         &self,\n         tcx: TyCtxt<'_>,\n         id: LintId,\n         start: HirId,\n     ) -> (Option<Level>, LintLevelSource) {\n-        if let Some(&(level, src)) = self.specs.get(&id) {\n+        if let Some(map) = self.specs.get(&start.local_id)\n+            && let Some(&(level, src)) = map.get(&id)\n+        {\n             return (Some(level), src);\n         }\n \n+        let mut owner = start.owner;\n+        let mut specs = &self.specs;\n+\n         for parent in tcx.hir().parent_id_iter(start) {\n-            let specs = tcx.shallow_lint_levels_on(parent);\n-            if let Some(&(level, src)) = specs.specs.get(&id) {\n+            if parent.owner != owner {\n+                owner = parent.owner;\n+                specs = &tcx.shallow_lint_levels_on(owner).specs;\n+            }\n+            if let Some(map) = specs.get(&parent.local_id)\n+                && let Some(&(level, src)) = map.get(&id)\n+            {\n                 return (Some(level), src);\n             }\n         }\n@@ -137,6 +149,7 @@ impl ShallowLintLevelMap {\n     }\n \n     /// Fetch and return the user-visible lint level for the given lint at the given HirId.\n+    #[instrument(level = \"trace\", skip(self, tcx), ret)]\n     pub fn lint_level_id_at_node(\n         &self,\n         tcx: TyCtxt<'_>,\n@@ -154,7 +167,7 @@ impl ShallowLintLevelMap {\n impl TyCtxt<'_> {\n     /// Fetch and return the user-visible lint level for the given lint at the given HirId.\n     pub fn lint_level_at_node(self, lint: &'static Lint, id: HirId) -> (Level, LintLevelSource) {\n-        self.shallow_lint_levels_on(id).lint_level_id_at_node(self, LintId::of(lint), id)\n+        self.shallow_lint_levels_on(id.owner).lint_level_id_at_node(self, LintId::of(lint), id)\n     }\n \n     /// Walks upwards from `id` to find a node which might change lint levels with attributes."}, {"sha": "cf5b365b27c999a9a90c6f2ac549320ab5a75180", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d08669c4fa51a864a46438c2e4bc9047931e1033", "patch": "@@ -274,9 +274,10 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query shallow_lint_levels_on(key: HirId) -> rustc_middle::lint::ShallowLintLevelMap {\n+    query shallow_lint_levels_on(key: hir::OwnerId) -> rustc_middle::lint::ShallowLintLevelMap {\n+        eval_always // fetches `resolutions`\n         arena_cache\n-        desc { |tcx| \"looking up lint levels for `{}`\", key }\n+        desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n     query lint_expectations(_: ()) -> Vec<(LintExpectationId, LintExpectation)> {"}, {"sha": "b6cda34c51f616c78d1babfdde0d7b0d64a1004b", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08669c4fa51a864a46438c2e4bc9047931e1033/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=d08669c4fa51a864a46438c2e4bc9047931e1033", "patch": "@@ -44,7 +44,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n-use rustc_hir::hir_id::{HirId, OwnerId};\n+use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};"}]}