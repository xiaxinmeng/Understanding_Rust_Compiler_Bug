{"sha": "6f46621b335d398f3c837750d31797014f63578b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNDY2MjFiMzM1ZDM5OGYzYzgzNzc1MGQzMTc5NzAxNGY2MzU3OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-08T02:36:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-08T02:36:43Z"}, "message": "auto merge of #15443 : pcwalton/rust/module-and-type-with-same-name, r=nick29581\n\nThis will break code that looks like:\r\n\r\n    struct Foo {\r\n        ...\r\n    }\r\n\r\n    mod Foo {\r\n        ...\r\n    }\r\n\r\nChange this code to:\r\n\r\n    struct Foo {\r\n        ...\r\n    }\r\n\r\n    impl Foo {\r\n        ...\r\n    }\r\n\r\nOr rename the module.\r\n\r\nCloses #15205.\r\n\r\n[breaking-change]\r\n\r\nr? @nick29581", "tree": {"sha": "223a7d1185cf31956d798cb5cbec014a166551db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223a7d1185cf31956d798cb5cbec014a166551db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f46621b335d398f3c837750d31797014f63578b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f46621b335d398f3c837750d31797014f63578b", "html_url": "https://github.com/rust-lang/rust/commit/6f46621b335d398f3c837750d31797014f63578b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f46621b335d398f3c837750d31797014f63578b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3257804df2bace236f83d9e5a9e887a1df30ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3257804df2bace236f83d9e5a9e887a1df30ef5", "html_url": "https://github.com/rust-lang/rust/commit/a3257804df2bace236f83d9e5a9e887a1df30ef5"}, {"sha": "3c9443b6e58c2c1a7bd9e6e2a74e183c33c98ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9443b6e58c2c1a7bd9e6e2a74e183c33c98ebc", "html_url": "https://github.com/rust-lang/rust/commit/3c9443b6e58c2c1a7bd9e6e2a74e183c33c98ebc"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "30a513407a5d5bae7bb2fbb3f471ae127d1a2efd", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6f46621b335d398f3c837750d31797014f63578b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f46621b335d398f3c837750d31797014f63578b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6f46621b335d398f3c837750d31797014f63578b", "patch": "@@ -307,7 +307,7 @@ enum BareIdentifierPatternResolution {\n #[deriving(PartialEq)]\n enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n-    ForbidDuplicateTypes,\n+    ForbidDuplicateTypesAndModules,\n     ForbidDuplicateValues,\n     ForbidDuplicateTypesAndValues,\n     OverwriteDuplicates\n@@ -792,10 +792,9 @@ impl PrimitiveTypeTable {\n \n fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n     match ns {\n-        NoError     => \"\",\n-        ModuleError => \"module\",\n-        TypeError   => \"type\",\n-        ValueError  => \"value\",\n+        NoError                 => \"\",\n+        ModuleError | TypeError => \"type or module\",\n+        ValueError              => \"value\",\n     }\n }\n \n@@ -1033,9 +1032,12 @@ impl<'a> Resolver<'a> {\n                         }\n                         Some(TypeNS)\n                     }\n-                    ForbidDuplicateTypes => {\n+                    ForbidDuplicateTypesAndModules => {\n                         match child.def_for_namespace(TypeNS) {\n-                            Some(DefMod(_)) | None => {}\n+                            None => {}\n+                            Some(_) if child.get_module_if_available()\n+                                            .map(|m| m.kind.get()) ==\n+                                       Some(ImplModuleKind) => {}\n                             Some(_) => duplicate_type = TypeError\n                         }\n                         Some(TypeNS)\n@@ -1177,7 +1179,10 @@ impl<'a> Resolver<'a> {\n             // These items live in the type namespace.\n             ItemTy(..) => {\n                 let name_bindings =\n-                    self.add_child(ident, parent.clone(), ForbidDuplicateTypes, sp);\n+                    self.add_child(ident,\n+                                   parent.clone(),\n+                                   ForbidDuplicateTypesAndModules,\n+                                   sp);\n \n                 name_bindings.define_type\n                     (DefTy(local_def(item.id)), sp, is_public);\n@@ -1186,7 +1191,10 @@ impl<'a> Resolver<'a> {\n \n             ItemEnum(ref enum_definition, _) => {\n                 let name_bindings =\n-                    self.add_child(ident, parent.clone(), ForbidDuplicateTypes, sp);\n+                    self.add_child(ident,\n+                                   parent.clone(),\n+                                   ForbidDuplicateTypesAndModules,\n+                                   sp);\n \n                 name_bindings.define_type\n                     (DefTy(local_def(item.id)), sp, is_public);\n@@ -1206,7 +1214,7 @@ impl<'a> Resolver<'a> {\n                 // Adding to both Type and Value namespaces or just Type?\n                 let (forbid, ctor_id) = match struct_def.ctor_id {\n                     Some(ctor_id)   => (ForbidDuplicateTypesAndValues, Some(ctor_id)),\n-                    None            => (ForbidDuplicateTypes, None)\n+                    None            => (ForbidDuplicateTypesAndModules, None)\n                 };\n \n                 let name_bindings = self.add_child(ident, parent.clone(), forbid, sp);\n@@ -1327,7 +1335,10 @@ impl<'a> Resolver<'a> {\n \n             ItemTrait(_, _, _, ref methods) => {\n                 let name_bindings =\n-                    self.add_child(ident, parent.clone(), ForbidDuplicateTypes, sp);\n+                    self.add_child(ident,\n+                                   parent.clone(),\n+                                   ForbidDuplicateTypesAndModules,\n+                                   sp);\n \n                 // Add all the methods within to a new module.\n                 let parent_link = self.get_parent_link(parent.clone(), ident);"}, {"sha": "47b576b2b85e5e0077df880546e2b7a6d2ce7a0e", "filename": "src/test/compile-fail/dup-struct-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs?ref=6f46621b335d398f3c837750d31797014f63578b", "patch": "@@ -11,9 +11,9 @@\n #![feature(struct_variant)]\n \n enum Foo { C { a: int, b: int } }\n-struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type `C`\n+struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type or module `C`\n \n struct A { x: int }\n-enum Bar { A { x: int } }           //~ ERROR error: duplicate definition of type `A`\n+enum Bar { A { x: int } }           //~ ERROR error: duplicate definition of type or module `A`\n \n fn main() {}"}, {"sha": "7464764666cd91f684e7a1af9acc4e611fd5b1d6", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=6f46621b335d398f3c837750d31797014f63578b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod Foo {\n+    pub static X: int = 42;\n+}\n+\n+enum Foo {  //~ ERROR duplicate definition of type or module `Foo`\n+    X\n+}\n+\n+fn main() {}"}, {"sha": "316199b6730bb2684f1d389345cd081778fe4ea6", "filename": "src/test/compile-fail/issue-3099-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs?ref=6f46621b335d398f3c837750d31797014f63578b", "patch": "@@ -10,6 +10,6 @@\n \n enum a { b, c }\n \n-enum a { d, e } //~ ERROR duplicate definition of type `a`\n+enum a { d, e } //~ ERROR duplicate definition of type or module `a`\n \n fn main() {}"}, {"sha": "b3f1b2a32eae3434ccc46c862bdad5e0802f83b1", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f46621b335d398f3c837750d31797014f63578b/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=6f46621b335d398f3c837750d31797014f63578b", "patch": "@@ -10,6 +10,6 @@\n \n pub mod a {}\n \n-pub mod a {} //~ ERROR duplicate definition of module `a`\n+pub mod a {} //~ ERROR duplicate definition of type or module `a`\n \n fn main() {}"}]}