{"sha": "b65dd9d0908ba75ee4cf128058858aea87e4508a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NWRkOWQwOTA4YmE3NWVlNGNmMTI4MDU4ODU4YWVhODdlNDUwOGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T22:02:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-03T22:02:53Z"}, "message": "rustc: Parse, serialize, and deserialize trait inheritance", "tree": {"sha": "794ee6f47d188314a2b0256fd954cbcf8219331c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794ee6f47d188314a2b0256fd954cbcf8219331c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65dd9d0908ba75ee4cf128058858aea87e4508a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65dd9d0908ba75ee4cf128058858aea87e4508a", "html_url": "https://github.com/rust-lang/rust/commit/b65dd9d0908ba75ee4cf128058858aea87e4508a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65dd9d0908ba75ee4cf128058858aea87e4508a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a805a1fb37443601819604954510cb312a724fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a805a1fb37443601819604954510cb312a724fe9", "html_url": "https://github.com/rust-lang/rust/commit/a805a1fb37443601819604954510cb312a724fe9"}], "stats": {"total": 90, "additions": 69, "deletions": 21}, "files": [{"sha": "34144a9f0319e88f55aaebd40c7bbec84272c8b0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -724,7 +724,7 @@ enum item_ {\n                /* dtor is optional */\n                option<class_dtor>\n                ),\n-    item_trait(~[ty_param], ~[trait_method]),\n+    item_trait(~[ty_param], ~[@trait_ref], ~[trait_method]),\n     item_impl(~[ty_param],\n               ~[@trait_ref], /* traits this impl implements */\n               @ty, /* self */"}, {"sha": "c8daae0982d0a47a2ff99132ab2ba3edc393affb", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -231,7 +231,15 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n            // only need to handle methods\n           do vec::iter(ms) |m| { map_method(d_id, p, m, cx); }\n       }\n-      item_trait(tps, methods) {\n+      item_trait(tps, traits, methods) {\n+        // Map trait refs to their parent classes. This is\n+        // so we can find the self_ty\n+        for traits.each |p| {\n+            cx.map.insert(p.ref_id, node_item(i, item_path));\n+            // This is so we can look up the right things when\n+            // encoding/decoding\n+            cx.map.insert(p.impl_id, node_item(i, item_path));\n+        }\n         for methods.each |tm| {\n             let id = ast_util::trait_method_to_ty_method(tm).id;\n             let d_id = ast_util::local_def(i.id);"}, {"sha": "5fa9c584bc4502425870a8400da961fd74dd5223", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -279,8 +279,9 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                         fld.fold_ty(ty),\n                         vec::map(methods, |x| fld.fold_method(x)))\n           }\n-          item_trait(tps, methods) {\n+          item_trait(tps, traits, methods) {\n             item_trait(fold_ty_params(tps, fld),\n+                       vec::map(traits, |p| fold_trait_ref(p, fld)),\n                        /* FIXME (#2543) */ copy methods)\n           }\n       item_mac(m) {"}, {"sha": "5f2ea6f42f68bc084acd1cea5eeb13ceda204797", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -2278,8 +2278,18 @@ class parser {\n         let ident = self.parse_ident();\n         self.parse_region_param();\n         let tps = self.parse_ty_params();\n+        \n+        // Parse traits, if necessary.\n+        let traits;\n+        if self.token == token::COLON {\n+            self.bump();\n+            traits = self.parse_trait_ref_list(token::LBRACE);\n+        } else {\n+            traits = ~[];\n+        }\n+\n         let meths = self.parse_trait_methods();\n-        (ident, item_trait(tps, meths), none)\n+        (ident, item_trait(tps, traits, meths), none)\n     }\n \n     // Parses four variants (with the region/type params always optional):"}, {"sha": "c4b643de8d7b117dfea61e6dc29a145f0e088634", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -590,10 +590,15 @@ fn print_item(s: ps, &&item: @ast::item) {\n         }\n         bclose(s, item.span);\n       }\n-      ast::item_trait(tps, methods) {\n+      ast::item_trait(tps, traits, methods) {\n         head(s, ~\"trait\");\n         word(s.s, *item.ident);\n         print_type_params(s, tps);\n+        if vec::len(traits) != 0u {\n+            word_space(s, ~\":\");\n+            commasep(s, inconsistent, traits, |s, p|\n+                print_path(s, p.path, false));\n+        }\n         word(s.s, ~\" \");\n         bopen(s);\n         for methods.each |meth| { print_trait_method(s, meth); }"}, {"sha": "61cbba5fc1ff35738bc69a3ec64338e0e0ef5f37", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -162,8 +162,9 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n                                     ast_util::local_def(i.id), e, v)\n           };\n       }\n-      item_trait(tps, methods) {\n+      item_trait(tps, traits, methods) {\n         v.visit_ty_params(tps, e, v);\n+        for traits.each |p| { visit_path(p.path, e, v); }\n         for methods.each |m| {\n             v.visit_trait_method(m, e, v);\n         }"}, {"sha": "a5d398c7ad0d625f1f3bda4a962463c6012a54b4", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -813,7 +813,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n                                    vec::append(tps, m.tps));\n         }\n       }\n-      item_trait(tps, ms) {\n+      item_trait(tps, traits, ms) {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n@@ -844,6 +844,9 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n             i += 1u;\n         }\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n+        for traits.each |associated_trait| {\n+           encode_trait_ref(ebml_w, ecx, associated_trait)\n+        }\n         ebml_w.end_tag();\n       }\n       item_mac(*) { fail ~\"item macros unimplemented\" }"}, {"sha": "93173b4008f7a5ae43007089e3457c99791191ec", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -988,7 +988,7 @@ class Resolver {\n                 visit_item(item, new_parent, visitor);\n             }\n \n-            item_trait(_, methods) {\n+            item_trait(_, _, methods) {\n                 // Add the names of all the methods to the trait info.\n                 let method_names = @atom_hashmap();\n                 for methods.each |method| {\n@@ -3063,7 +3063,7 @@ class Resolver {\n                                             self_type, methods, visitor);\n             }\n \n-            item_trait(type_parameters, methods) {\n+            item_trait(type_parameters, traits, methods) {\n                 // Create a new rib for the self type.\n                 let self_type_rib = @Rib(NormalRibKind);\n                 (*self.type_ribs).push(self_type_rib);\n@@ -3077,6 +3077,27 @@ class Resolver {\n \n                     self.resolve_type_parameters(type_parameters, visitor);\n \n+                    // Resolve derived traits.\n+                    for traits.each |trt| {\n+                        match self.resolve_path(trt.path, TypeNS, true,\n+                                                visitor) {\n+                            none =>\n+                                self.session.span_err(trt.path.span,\n+                                                      ~\"attempt to derive a \\\n+                                                       nonexistent trait\"),\n+                            some(def) => {\n+                                // Write a mapping from the trait ID to the\n+                                // definition of the trait into the definition\n+                                // map.\n+\n+                                debug!{\"(resolving trait) found trait def: \\\n+                                       %?\", def};\n+\n+                                self.record_def(trt.ref_id, def);\n+                            }\n+                        }\n+                    }\n+\n                     for methods.each |method| {\n                         // Create a new rib for the method-specific type\n                         // parameters."}, {"sha": "65ad1b26a8daec1390c97c908755400e194ed5fa", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -419,7 +419,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n                          node_id: it.id };\n         for ms.each |m| { check_method(ccx, m, self_info);}\n       }\n-      ast::item_trait(_, trait_methods) {\n+      ast::item_trait(_, _, trait_methods) {\n         for trait_methods.each |trait_method| {\n             alt trait_method {\n               required(ty_m) {\n@@ -434,7 +434,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n             }\n         }\n       }\n-      ast::item_class(tps, traits, members, m_ctor, m_dtor) {\n+      ast::item_class(tps, _, members, m_ctor, m_dtor) {\n         let tcx = ccx.tcx;\n         let class_t = {self_ty: ty::node_id_to_type(tcx, it.id),\n                        node_id: it.id};"}, {"sha": "ae748b541ff1d5aa2ede54b9359fafb2c9d39177", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -38,20 +38,19 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n                     let substs = {self_r: none, self_ty: none, tps: ~[]};\n \n                     alt intrinsic_item.node {\n-\n-                      ast::item_trait(_, _) {\n+                      ast::item_trait(*) => {\n                         let ty = ty::mk_trait(ccx.tcx, def_id, substs);\n                         ccx.tcx.intrinsic_defs.insert\n                             (intrinsic_item.ident, (def_id, ty));\n                       }\n \n-                      ast::item_enum(_, _) {\n+                      ast::item_enum(*) => {\n                         let ty = ty::mk_enum(ccx.tcx, def_id, substs);\n                         ccx.tcx.intrinsic_defs.insert\n                             (intrinsic_item.ident, (def_id, ty));\n                       }\n \n-                     _ { }\n+                      _ => {}\n                     }\n                 }\n               }\n@@ -147,7 +146,7 @@ fn ensure_trait_methods(ccx: @crate_ctxt, id: ast::node_id) {\n     let tcx = ccx.tcx;\n     let rp = tcx.region_paramd_items.contains_key(id);\n     alt check tcx.items.get(id) {\n-      ast_map::node_item(@{node: ast::item_trait(_, ms), _}, _) {\n+      ast_map::node_item(@{node: ast::item_trait(_, _, ms), _}, _) {\n         store_methods::<ast::trait_method>(ccx, id, ms, |m| {\n             alt m {\n               required(ty_m) {\n@@ -339,7 +338,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n             check_methods_against_trait(ccx, tps, rp, selfty, t, cms);\n         }\n       }\n-      ast::item_trait(tps, trait_methods) {\n+      ast::item_trait(tps, _, trait_methods) {\n         let tpt = ty_of_item(ccx, it);\n         debug!{\"item_trait(it.id=%d, tpt.ty=%s)\",\n                it.id, ty_to_str(tcx, tpt.ty)};\n@@ -550,7 +549,7 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;\n       }\n-      ast::item_trait(tps, ms) {\n+      ast::item_trait(tps, _, ms) {\n         let {bounds, substs} = mk_substs(ccx, tps, rp);\n         let t = ty::mk_trait(tcx, local_def(it.id), substs);\n         let tpt = {bounds: bounds, rp: rp, ty: t};"}, {"sha": "e22f3a1c9bbb36dba30f2e1e247ecd527b9014d6", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -205,7 +205,7 @@ fn merge_method_attrs(\n     let attrs: ~[(~str, option<~str>)] = do astsrv::exec(srv) |ctxt| {\n         alt ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@{\n-            node: ast::item_trait(_, methods), _\n+            node: ast::item_trait(_, _, methods), _\n           }, _) {\n             vec::map(methods, |method| {\n                 alt method {"}, {"sha": "a6c653de32680dca228f7dd8fe217a824c3a63ca", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -84,7 +84,7 @@ fn moddoc_from_mod(\n                     enumdoc_from_enum(itemdoc, variants)\n                 ))\n               }\n-              ast::item_trait(_, methods) {\n+              ast::item_trait(_, _, methods) {\n                 some(doc::traittag(\n                     traitdoc_from_trait(itemdoc, methods)\n                 ))"}, {"sha": "ce1f921af27fb3d72bbf73ad210668bf0e8d4a86", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65dd9d0908ba75ee4cf128058858aea87e4508a/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=b65dd9d0908ba75ee4cf128058858aea87e4508a", "patch": "@@ -169,7 +169,7 @@ fn get_method_sig(\n     do astsrv::exec(srv) |ctxt| {\n         alt check ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@{\n-            node: ast::item_trait(_, methods), _\n+            node: ast::item_trait(_, _, methods), _\n           }, _) {\n             alt check vec::find(methods, |method| {\n                 alt method {"}]}