{"sha": "22bef74b550b2b08338ebb43363f3d09df6413b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYmVmNzRiNTUwYjJiMDgzMzhlYmI0MzM2M2YzZDA5ZGY2NDEzYjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T16:42:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T14:38:42Z"}, "message": "Remove shared tydescs\n\nAll tydescs are static now, there's no need to worry about\nmarshalling them between threads anymore.", "tree": {"sha": "1a96fdf8b865c54e4d0a64391451bb913d97ea50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a96fdf8b865c54e4d0a64391451bb913d97ea50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22bef74b550b2b08338ebb43363f3d09df6413b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22bef74b550b2b08338ebb43363f3d09df6413b9", "html_url": "https://github.com/rust-lang/rust/commit/22bef74b550b2b08338ebb43363f3d09df6413b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22bef74b550b2b08338ebb43363f3d09df6413b9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140d194007bbb427ab694807782b3a41bb43b27d", "url": "https://api.github.com/repos/rust-lang/rust/commits/140d194007bbb427ab694807782b3a41bb43b27d", "html_url": "https://github.com/rust-lang/rust/commit/140d194007bbb427ab694807782b3a41bb43b27d"}], "stats": {"total": 176, "additions": 18, "deletions": 158}, "files": [{"sha": "3fe368523532094dde17a0d16ec8316d39a44eda", "filename": "mk/target.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -8,7 +8,7 @@\n # (resp.  corelib), set this flag to 1.  It will cause stage1 to use\n # the snapshot runtime (resp. corelib) rather than the runtime\n # (resp. corelib) from the working directory.\n-USE_SNAPSHOT_RUNTIME=0\n+USE_SNAPSHOT_RUNTIME=1\n USE_SNAPSHOT_CORELIB=0\n \n # Do not use --enforce-mut-vars in stage0, for now, as the snapshot"}, {"sha": "de454fc2f84ad538d8c090587328f82452fdbb80", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -18,9 +18,6 @@\n // collection.\n #define RUST_CC_FREQUENCY   5000\n \n-// defined in rust_upcall.cpp:\n-void upcall_s_free_shared_type_desc(type_desc *td);\n-\n using namespace std;\n \n namespace cc {\n@@ -534,9 +531,6 @@ class sweep : public shape::data<sweep,shape::ptr> {\n                   // free closed over data:\n                   shape::data<sweep,shape::ptr>::walk_fn_contents1();\n                   \n-                  // now free the embedded type descr:\n-                  upcall_s_free_shared_type_desc((type_desc*)pair.env->td);\n-                  \n                   // now free the ptr:\n                   task->kernel->free(pair.env);\n               }\n@@ -563,12 +557,9 @@ class sweep : public shape::data<sweep,shape::ptr> {\n     }\n \n     void walk_tydesc2(char kind) {\n-        type_desc *td = *(type_desc **)dp;\n         switch(kind) {\n           case shape::SHAPE_TYDESC:\n-            break;\n           case shape::SHAPE_SEND_TYDESC:\n-            upcall_s_free_shared_type_desc(td);\n             break;\n           default: abort();\n         }"}, {"sha": "039989cbf310f4c1167657dd62485ad3cca29c05", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -192,7 +192,6 @@ void task_start_wrapper(spawn_args *a)\n         // free the environment (which should be a unique closure).\n         const type_desc *td = env->td;\n         td->drop_glue(NULL, NULL, td->first_param, box_body(env));\n-        upcall_free_shared_type_desc(env->td);\n         upcall_shared_free(env);\n     }\n "}, {"sha": "dfeeda34994ee073f3ef0b9a6c30f5700083615a", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -288,79 +288,6 @@ upcall_shared_realloc(void *ptr, size_t size) {\n     return args.retval;\n }\n \n-/**********************************************************************\n- * Called to deep copy a type descriptor onto the exchange heap.\n- * Used when sending closures.  It's possible that we should have\n- * a central hashtable to avoid copying and re-copying the same \n- * type descriptors.\n- */\n-\n-struct s_create_shared_type_desc_args {\n-    const type_desc *td;\n-    type_desc *res;\n-};\n-\n-void upcall_s_create_shared_type_desc(s_create_shared_type_desc_args *args)\n-{\n-    rust_task *task = rust_task_thread::get_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    // Copy the main part of the type descriptor:\n-    const type_desc *td = args->td;\n-    int n_params = td->n_params;\n-    size_t sz = sizeof(type_desc) + sizeof(type_desc*) * (n_params+1);\n-    args->res = (type_desc*) task->kernel->malloc(sz, \"create_shared_type_desc\");\n-    memcpy(args->res, td, sizeof(type_desc));\n-\n-    // Recursively copy any referenced descriptors:\n-    if (n_params == 0) {\n-        args->res->first_param = NULL;\n-    } else {\n-        args->res->first_param = &args->res->descs[1];\n-        args->res->descs[0] = args->res;\n-        for (int i = 0; i < n_params; i++) {\n-            s_create_shared_type_desc_args rec_args = {\n-                td->first_param[i], 0\n-            };\n-            upcall_s_create_shared_type_desc(&rec_args);\n-            args->res->first_param[i] = rec_args.res;\n-        }\n-    }\n-}\n-\n-extern \"C\" CDECL type_desc *\n-upcall_create_shared_type_desc(type_desc *td) {\n-    s_create_shared_type_desc_args args = { td, 0 };\n-    UPCALL_SWITCH_STACK(&args, upcall_s_create_shared_type_desc);\n-    return args.res;\n-}\n-\n-/**********************************************************************\n- * Called to deep free a type descriptor from the exchange heap.\n- */\n-\n-void upcall_s_free_shared_type_desc(type_desc *td)\n-{ // n.b.: invoked from rust_cc.cpp as well as generated code\n-    rust_task *task = rust_task_thread::get_task();\n-    LOG_UPCALL_ENTRY(task);\n-\n-    if (td) {\n-        // Recursively free any referenced descriptors:\n-        for (unsigned i = 0; i < td->n_params; i++) {\n-            upcall_s_free_shared_type_desc((type_desc*) td->first_param[i]);\n-        }\n-\n-        task->kernel->free(td);\n-    }\n-}\n-\n-extern \"C\" CDECL void\n-upcall_free_shared_type_desc(type_desc *td) {\n-    if (td) {\n-        UPCALL_SWITCH_STACK(td, upcall_s_free_shared_type_desc);\n-    }\n-}\n-\n /**********************************************************************/\n \n struct s_vec_grow_args {"}, {"sha": "344730e2171e9880c74a437ebff393d264e658f3", "filename": "src/rt/rust_upcall.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_upcall.h", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frust_upcall.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.h?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -3,5 +3,4 @@\n // Upcalls used from C code on occasion:\n \n extern \"C\" CDECL void upcall_shared_free(void* ptr);\n-extern \"C\" CDECL void upcall_free_shared_type_desc(type_desc *td);\n "}, {"sha": "4d2f7b99f723219170970492950dd21aca97cac6", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -59,8 +59,6 @@ upcall_cmp_type\n upcall_fail\n upcall_free\n upcall_validate_box\n-upcall_create_shared_type_desc\n-upcall_free_shared_type_desc\n upcall_log_type\n upcall_malloc\n upcall_rust_personality"}, {"sha": "a0bb2c5937db392320d3f4daff3d29e3bdd029bb", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -16,8 +16,6 @@ type upcalls =\n      shared_free: ValueRef,\n      shared_realloc: ValueRef,\n      mark: ValueRef,\n-     create_shared_type_desc: ValueRef,\n-     free_shared_type_desc: ValueRef,\n      vec_grow: ValueRef,\n      vec_push: ValueRef,\n      cmp_type: ValueRef,\n@@ -65,11 +63,6 @@ fn declare_upcalls(targ_cfg: @session::config,\n               d(\"shared_realloc\", [T_ptr(T_i8()), size_t], T_ptr(T_i8())),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n-          create_shared_type_desc:\n-              d(\"create_shared_type_desc\", [T_ptr(tydesc_type)],\n-                T_ptr(tydesc_type)),\n-          free_shared_type_desc:\n-              dv(\"free_shared_type_desc\", [T_ptr(tydesc_type)]),\n           vec_grow:\n               dv(\"vec_grow\", [T_ptr(T_ptr(opaque_vec_t)), int_t]),\n           vec_push:"}, {"sha": "eebbe51c66506201ad225d80c14c7f9f51f28fbe", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -267,7 +267,6 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n       }\n       'X' { ret ty::mk_var(st.tcx, parse_int(st)); }\n       'Y' { ret ty::mk_type(st.tcx); }\n-      'y' { ret ty::mk_send_type(st.tcx); }\n       'C' {\n         let ck = alt check next(st) {\n           '&' { ty::ck_block }"}, {"sha": "ebe9342f87a60084096004022e8c8f1c6b98be41", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -203,7 +203,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char(']');\n       }\n       ty::ty_type { w.write_char('Y'); }\n-      ty::ty_send_type { w.write_char('y'); }\n       ty::ty_opaque_closure_ptr(ty::ck_block) { w.write_str(\"C&\"); }\n       ty::ty_opaque_closure_ptr(ty::ck_box) { w.write_str(\"C@\"); }\n       ty::ty_opaque_closure_ptr(ty::ck_uniq) { w.write_str(\"C~\"); }"}, {"sha": "23fc3f69e96153123c55aa97bcf17fdc0ce84e1a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -559,14 +559,6 @@ fn make_take_glue(cx: block, v: ValueRef, t: ty::t) {\n         Store(r.bcx, r.val, v);\n         r.bcx\n       }\n-      ty::ty_send_type {\n-        // sendable type descriptors are basically unique pointers,\n-        // they must be cloned when copied:\n-        let r = Load(bcx, v);\n-        let s = Call(bcx, bcx.ccx().upcalls.create_shared_type_desc, [r]);\n-        Store(bcx, s, v);\n-        bcx\n-      }\n       ty::ty_fn(_) {\n         closure::make_fn_glue(bcx, v, t, take_ty)\n       }\n@@ -623,14 +615,6 @@ fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_vec(_) | ty::ty_str {\n         tvec::make_free_glue(bcx, PointerCast(bcx, v, type_of(ccx, t)), t)\n       }\n-      ty::ty_send_type {\n-        // sendable type descriptors are basically unique pointers,\n-        // they must be freed.\n-        let ccx = bcx.ccx();\n-        let v = PointerCast(bcx, v, T_ptr(ccx.tydesc_type));\n-        Call(bcx, ccx.upcalls.free_shared_type_desc, [v]);\n-        bcx\n-      }\n       ty::ty_fn(_) {\n         closure::make_fn_glue(bcx, v, t, free_ty)\n       }\n@@ -649,7 +633,7 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_box(_) | ty::ty_opaque_box {\n         decr_refcnt_maybe_free(bcx, Load(bcx, v0), t)\n       }\n-      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str | ty::ty_send_type {\n+      ty::ty_uniq(_) | ty::ty_vec(_) | ty::ty_str {\n         free_ty(bcx, Load(bcx, v0), t)\n       }\n       ty::ty_res(did, inner, tps) {"}, {"sha": "ad24195d901c526c25da6d879dc383dcb4546460", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -114,16 +114,8 @@ fn ev_to_str(ccx: @crate_ctxt, ev: environment_value) -> str {\n     }\n }\n \n-fn mk_tydesc_ty(tcx: ty::ctxt, ck: ty::closure_kind) -> ty::t {\n-    ret alt ck {\n-      ty::ck_block | ty::ck_box { ty::mk_type(tcx) }\n-      ty::ck_uniq { ty::mk_send_type(tcx) }\n-    };\n-}\n-\n fn mk_tuplified_uniq_cbox_ty(tcx: ty::ctxt, cdata_ty: ty::t) -> ty::t {\n-    let tydesc_ty = mk_tydesc_ty(tcx, ty::ck_uniq);\n-    let cbox_ty = tuplify_cbox_ty(tcx, cdata_ty, tydesc_ty);\n+    let cbox_ty = tuplify_cbox_ty(tcx, cdata_ty, ty::mk_type(tcx));\n     ret ty::mk_imm_uniq(tcx, cbox_ty);\n }\n \n@@ -166,14 +158,12 @@ fn allocate_cbox(bcx: block,\n         Store(bcx, rc, ref_cnt);\n     }\n \n-    fn store_uniq_tydesc(bcx: block,\n-                         cdata_ty: ty::t,\n-                         box: ValueRef,\n-                         &ti: option<@tydesc_info>) -> block {\n-        let ccx = bcx.ccx();\n+    fn store_tydesc(bcx: block,\n+                    cdata_ty: ty::t,\n+                    box: ValueRef,\n+                    &ti: option<@tydesc_info>) -> block {\n         let bound_tydesc = GEPi(bcx, box, [0, abi::box_field_tydesc]);\n         let {bcx, val: td} = base::get_tydesc(bcx, cdata_ty, ti);\n-        let td = Call(bcx, ccx.upcalls.create_shared_type_desc, [td]);\n         Store(bcx, td, bound_tydesc);\n         bcx\n     }\n@@ -190,7 +180,7 @@ fn allocate_cbox(bcx: block,\n         let uniq_cbox_ty = mk_tuplified_uniq_cbox_ty(tcx, cdata_ty);\n         let {bcx, val: box} = uniq::alloc_uniq(bcx, uniq_cbox_ty);\n         nuke_ref_count(bcx, box);\n-        let bcx = store_uniq_tydesc(bcx, cdata_ty, box, ti);\n+        let bcx = store_tydesc(bcx, cdata_ty, box, ti);\n         (bcx, box)\n       }\n       ty::ck_block {\n@@ -222,19 +212,6 @@ fn store_environment(bcx: block,\n                      bound_values: [environment_value],\n                      ck: ty::closure_kind) -> closure_result {\n \n-    fn maybe_clone_tydesc(bcx: block,\n-                          ck: ty::closure_kind,\n-                          td: ValueRef) -> ValueRef {\n-        ret alt ck {\n-          ty::ck_block | ty::ck_box {\n-            td\n-          }\n-          ty::ck_uniq {\n-            Call(bcx, bcx.ccx().upcalls.create_shared_type_desc, [td])\n-          }\n-        };\n-    }\n-\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n \n     // compute the shape of the closure\n@@ -551,7 +528,7 @@ fn make_opaque_cbox_take_glue(\n \n         // Take the (deeply cloned) type descriptor\n         let tydesc_out = GEPi(bcx, cbox_out, [0, abi::box_field_tydesc]);\n-        let bcx = take_ty(bcx, tydesc_out, mk_tydesc_ty(tcx, ty::ck_uniq));\n+        let bcx = take_ty(bcx, tydesc_out, ty::mk_type(tcx));\n \n         // Take the data in the tuple\n         let ti = none;\n@@ -612,7 +589,7 @@ fn make_opaque_cbox_free_glue(\n             trans_free(bcx, cbox)\n           }\n           ty::ck_uniq {\n-            let bcx = free_ty(bcx, tydesc, mk_tydesc_ty(tcx, ck));\n+            let bcx = free_ty(bcx, tydesc, ty::mk_type(tcx));\n             trans_shared_free(bcx, cbox)\n           }\n         }"}, {"sha": "88860e2aeab806395ec85b16be098e4e8228304b", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -298,7 +298,6 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       ty::ty_float(ast::ty_f) { [s_float(ccx.tcx)] }\n       ty::ty_uint(ast::ty_u) | ty::ty_ptr(_) { [s_uint(ccx.tcx)] }\n       ty::ty_type { [s_tydesc(ccx.tcx)] }\n-      ty::ty_send_type { [s_send_tydesc(ccx.tcx)] }\n       ty::ty_int(ast::ty_i8) { [shape_i8] }\n       ty::ty_uint(ast::ty_u16) { [shape_u16] }\n       ty::ty_int(ast::ty_i16) { [shape_i16] }"}, {"sha": "9d49c595fe55f7ce30455936fb74742051ebb7b0", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -71,7 +71,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n         ret T_struct([T_i8(), type_of(cx, sub1)]);\n       }\n       ty::ty_param(_, _) { T_typaram(cx.tn) }\n-      ty::ty_send_type | ty::ty_type { T_ptr(cx.tydesc_type) }\n+      ty::ty_type { T_ptr(cx.tydesc_type) }\n       ty::ty_tup(elts) {\n         let tys = [];\n         for elt in elts {"}, {"sha": "e91ef230cd2a47cdf6adbdf953a356eb147b87dc", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bef74b550b2b08338ebb43363f3d09df6413b9/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=22bef74b550b2b08338ebb43363f3d09df6413b9", "patch": "@@ -82,7 +82,6 @@ export ty_rptr, mk_rptr;\n export ty_rec, mk_rec;\n export ty_enum, mk_enum, type_is_enum;\n export ty_tup, mk_tup;\n-export ty_send_type, mk_send_type;\n export ty_type, mk_type;\n export ty_uint, mk_uint, mk_mach_uint;\n export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n@@ -267,7 +266,6 @@ enum sty {\n     ty_self([t]), // interface method self type\n \n     ty_type, // type_desc*\n-    ty_send_type, // type_desc* that has been cloned into exchange heap\n     ty_opaque_box, // used by monomorphizer to represent any @ box\n     ty_constr(t, [@type_constr]),\n     ty_opaque_closure_ptr(closure_kind), // ptr to env for fn, fn@, fn~\n@@ -392,7 +390,7 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n     }\n     alt st {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_str | ty_type | ty_send_type | ty_opaque_closure_ptr(_) |\n+      ty_str | ty_type | ty_opaque_closure_ptr(_) |\n       ty_opaque_box {}\n       ty_param(_, _) { has_params = true; }\n       ty_var(_) | ty_self(_) { has_vars = true; }\n@@ -518,8 +516,6 @@ fn mk_param(cx: ctxt, n: uint, k: def_id) -> t { mk_t(cx, ty_param(n, k)) }\n \n fn mk_type(cx: ctxt) -> t { mk_t(cx, ty_type) }\n \n-fn mk_send_type(cx: ctxt) -> t { mk_t(cx, ty_send_type) }\n-\n fn mk_opaque_closure_ptr(cx: ctxt, ck: closure_kind) -> t {\n     mk_t(cx, ty_opaque_closure_ptr(ck))\n }\n@@ -553,7 +549,7 @@ fn maybe_walk_ty(ty: t, f: fn(t) -> bool) {\n     if !f(ty) { ret; }\n     alt get(ty).struct {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_send_type | ty_type | ty_opaque_box |\n+      ty_str | ty_type | ty_opaque_box |\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_param(_, _) {}\n       ty_box(tm) | ty_vec(tm) | ty_ptr(tm) | ty_rptr(_, tm) {\n         maybe_walk_ty(tm.ty, f);\n@@ -599,7 +595,7 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n \n     alt tb.struct {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_str | ty_type | ty_send_type | ty_opaque_closure_ptr(_) |\n+      ty_str | ty_type | ty_opaque_closure_ptr(_) |\n       ty_opaque_box {}\n       ty_box(tm) {\n         ty = mk_box(cx, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n@@ -780,7 +776,7 @@ pure fn type_is_unique(ty: t) -> bool {\n pure fn type_is_scalar(ty: t) -> bool {\n     alt get(ty).struct {\n       ty_nil | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_send_type | ty_type | ty_ptr(_) | ty_rptr(_, _) { true }\n+      ty_type | ty_ptr(_) | ty_rptr(_, _) { true }\n       _ { false }\n     }\n }\n@@ -884,7 +880,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n     let result = alt get(ty).struct {\n       // Scalar and unique types are sendable\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-      ty_ptr(_) | ty_send_type | ty_str { kind_sendable }\n+      ty_ptr(_) | ty_str { kind_sendable }\n       ty_type { kind_copyable }\n       ty_fn(f) { proto_kind(f.proto) }\n       ty_opaque_closure_ptr(ck_block) { kind_noncopyable }\n@@ -1034,7 +1030,7 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n     alt get(ty).struct {\n       // Scalar types\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_send_type | ty_type | ty_ptr(_) { result = true; }\n+      ty_type | ty_ptr(_) { result = true; }\n       // Boxed types\n       ty_str | ty_box(_) | ty_uniq(_) | ty_vec(_) | ty_fn(_) |\n       ty_iface(_, _) | ty_rptr(_,_) | ty_opaque_box { result = false; }\n@@ -1223,7 +1219,6 @@ fn hash_type_structure(st: sty) -> uint {\n         h\n       }\n       ty_uniq(mt) { hash_subty(37u, mt.ty) }\n-      ty_send_type { 38u }\n       ty_iface(did, tys) {\n         let h = hash_def(40u, did);\n         for typ: t in tys { h = hash_subty(h, typ); }\n@@ -1984,7 +1979,7 @@ mod unify {\n           (_, ty_bot) { nxt(expected) }\n           (ty_bot, _) { nxt(actual) }\n           (ty_nil, _) | (ty_bool, _) | (ty_int(_), _) | (ty_uint(_), _) |\n-          (ty_float(_), _) | (ty_str, _) | (ty_send_type, _) {\n+          (ty_float(_), _) | (ty_str, _) {\n             struct_cmp(cx, expected, actual, nxt)\n           }\n           (ty_param(e_n, _), ty_param(a_n, _)) if e_n == a_n {"}]}