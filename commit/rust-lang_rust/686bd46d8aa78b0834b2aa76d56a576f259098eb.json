{"sha": "686bd46d8aa78b0834b2aa76d56a576f259098eb", "node_id": "C_kwDOAAsO6NoAKDY4NmJkNDZkOGFhNzhiMDgzNGIyYWE3NmQ1NmE1NzZmMjU5MDk4ZWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:07Z"}, "message": "Rollup merge of #109515 - bzEq:aix-linker, r=petrochenkov\n\nAdd AixLinker to support linking on AIX\n\nAIX linker has a different cli style from other existing linkers.\nIt is documented in https://www.ibm.com/docs/en/aix/7.1?topic=l-ld-command.", "tree": {"sha": "da67e97a45711961c647fbf3a2ab8fa9f3742800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da67e97a45711961c647fbf3a2ab8fa9f3742800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686bd46d8aa78b0834b2aa76d56a576f259098eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0vCRBK7hj4Ov3rIwAA8IQIAFqXaIgaEhPBsknSnSmi7Om5\nePqSsLvtYZN2KLoIap9lST9tbA/C/Dro6qqgNMkFs2zhfqRTKpPPsARNFwZjX0hb\nAediWf30fh9DB4Srdg59xokBg7piasutQj8xgTrkQxwUqA70UHdL8GVHG/aBqMUt\nukhyMwZ/rxI3cEnC0FZu1rEiI3AIsQkdMbnOLXK7p6M3Q3eznc9W3JnsrmXfvPv6\nZ/X1dsOiXOlpYlNePCz2moBmQOspyyfxzTs+ciQTqEJnYENyYmnWK7SCj9uT6qvg\nqM3w9moSVNKQkQxCcMfGv/oXg+2hQ7EArG4dYyrTlOmZw6LMTWA4Gfc6PUxEiDw=\n=HJn0\n-----END PGP SIGNATURE-----\n", "payload": "tree da67e97a45711961c647fbf3a2ab8fa9f3742800\nparent 1c7ef3b48398dc4fc88d328d43839f5ee1ec1e9a\nparent 3957d3a08a3687cc86d52ec0c539d65beb20f902\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617327 +0100\ncommitter GitHub <noreply@github.com> 1679617327 +0100\n\nRollup merge of #109515 - bzEq:aix-linker, r=petrochenkov\n\nAdd AixLinker to support linking on AIX\n\nAIX linker has a different cli style from other existing linkers.\nIt is documented in https://www.ibm.com/docs/en/aix/7.1?topic=l-ld-command.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686bd46d8aa78b0834b2aa76d56a576f259098eb", "html_url": "https://github.com/rust-lang/rust/commit/686bd46d8aa78b0834b2aa76d56a576f259098eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686bd46d8aa78b0834b2aa76d56a576f259098eb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7ef3b48398dc4fc88d328d43839f5ee1ec1e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7ef3b48398dc4fc88d328d43839f5ee1ec1e9a", "html_url": "https://github.com/rust-lang/rust/commit/1c7ef3b48398dc4fc88d328d43839f5ee1ec1e9a"}, {"sha": "3957d3a08a3687cc86d52ec0c539d65beb20f902", "url": "https://api.github.com/repos/rust-lang/rust/commits/3957d3a08a3687cc86d52ec0c539d65beb20f902", "html_url": "https://github.com/rust-lang/rust/commit/3957d3a08a3687cc86d52ec0c539d65beb20f902"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "dd11768195079edafe620dd3ea7607642559d947", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/686bd46d8aa78b0834b2aa76d56a576f259098eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686bd46d8aa78b0834b2aa76d56a576f259098eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=686bd46d8aa78b0834b2aa76d56a576f259098eb", "patch": "@@ -133,6 +133,9 @@ pub fn get_linker<'a>(\n         LinkerFlavor::Unix(Cc::No) if sess.target.os == \"l4re\" => {\n             Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n         }\n+        LinkerFlavor::Unix(Cc::No) if sess.target.os == \"aix\" => {\n+            Box::new(AixLinker::new(cmd, sess)) as Box<dyn Linker>\n+        }\n         LinkerFlavor::WasmLld(Cc::No) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n         LinkerFlavor::Gnu(cc, _)\n         | LinkerFlavor::Darwin(cc, _)\n@@ -1474,6 +1477,177 @@ impl<'a> L4Bender<'a> {\n     }\n }\n \n+/// Linker for AIX.\n+pub struct AixLinker<'a> {\n+    cmd: Command,\n+    sess: &'a Session,\n+    hinted_static: bool,\n+}\n+\n+impl<'a> AixLinker<'a> {\n+    pub fn new(cmd: Command, sess: &'a Session) -> AixLinker<'a> {\n+        AixLinker { cmd: cmd, sess: sess, hinted_static: false }\n+    }\n+\n+    fn hint_static(&mut self) {\n+        if !self.hinted_static {\n+            self.cmd.arg(\"-bstatic\");\n+            self.hinted_static = true;\n+        }\n+    }\n+\n+    fn hint_dynamic(&mut self) {\n+        if self.hinted_static {\n+            self.cmd.arg(\"-bdynamic\");\n+            self.hinted_static = false;\n+        }\n+    }\n+\n+    fn build_dylib(&mut self, _out_filename: &Path) {\n+        self.cmd.arg(\"-bM:SRE\");\n+        self.cmd.arg(\"-bnoentry\");\n+        // FIXME: Use CreateExportList utility to create export list\n+        // and remove -bexpfull.\n+        self.cmd.arg(\"-bexpfull\");\n+    }\n+}\n+\n+impl<'a> Linker for AixLinker<'a> {\n+    fn link_dylib(&mut self, lib: &str, _verbatim: bool, _as_needed: bool) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_staticlib(&mut self, lib: &str, _verbatim: bool) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(lib);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn framework_path(&mut self, _: &Path) {\n+        bug!(\"frameworks are not supported on AIX\");\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn full_relro(&mut self) {}\n+\n+    fn partial_relro(&mut self) {}\n+\n+    fn no_relro(&mut self) {}\n+\n+    fn cmd(&mut self) -> &mut Command {\n+        &mut self.cmd\n+    }\n+\n+    fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n+        match output_kind {\n+            LinkOutputKind::DynamicDylib => {\n+                self.hint_dynamic();\n+                self.build_dylib(out_filename);\n+            }\n+            LinkOutputKind::StaticDylib => {\n+                self.hint_static();\n+                self.build_dylib(out_filename);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn link_rust_dylib(&mut self, lib: &str, _: &Path) {\n+        self.hint_dynamic();\n+        self.cmd.arg(format!(\"-l{}\", lib));\n+    }\n+\n+    fn link_framework(&mut self, _framework: &str, _as_needed: bool) {\n+        bug!(\"frameworks not supported on AIX\");\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: &str, verbatim: bool, search_path: &[PathBuf]) {\n+        self.hint_static();\n+        let lib = find_native_static_library(lib, verbatim, search_path, &self.sess);\n+        self.cmd.arg(format!(\"-bkeepfile:{}\", lib.to_str().unwrap()));\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.hint_static();\n+        self.cmd.arg(format!(\"-bkeepfile:{}\", lib.to_str().unwrap()));\n+    }\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {\n+        self.cmd.arg(\"-bgc\");\n+    }\n+\n+    fn no_gc_sections(&mut self) {\n+        self.cmd.arg(\"-bnogc\");\n+    }\n+\n+    fn optimize(&mut self) {}\n+\n+    fn pgo_gen(&mut self) {}\n+\n+    fn control_flow_guard(&mut self) {}\n+\n+    fn debuginfo(&mut self, strip: Strip, _: &[PathBuf]) {\n+        match strip {\n+            Strip::None => {}\n+            // FIXME: -s strips the symbol table, line number information\n+            // and relocation information.\n+            Strip::Debuginfo | Strip::Symbols => {\n+                self.cmd.arg(\"-s\");\n+            }\n+        }\n+    }\n+\n+    fn no_crt_objects(&mut self) {}\n+\n+    fn no_default_libraries(&mut self) {}\n+\n+    fn export_symbols(&mut self, tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {\n+        let path = tmpdir.join(\"list.exp\");\n+        let res: io::Result<()> = try {\n+            let mut f = BufWriter::new(File::create(&path)?);\n+            // TODO: use llvm-nm to generate export list.\n+            for symbol in symbols {\n+                debug!(\"  _{}\", symbol);\n+                writeln!(f, \"  {}\", symbol)?;\n+            }\n+        };\n+        if let Err(e) = res {\n+            self.sess.fatal(&format!(\"failed to write export file: {}\", e));\n+        }\n+        self.cmd.arg(format!(\"-bE:{}\", path.to_str().unwrap()));\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {}\n+\n+    fn reset_per_library_state(&mut self) {\n+        self.hint_dynamic();\n+    }\n+\n+    fn linker_plugin_lto(&mut self) {}\n+\n+    fn add_eh_frame_header(&mut self) {}\n+\n+    fn add_no_exec(&mut self) {}\n+\n+    fn add_as_needed(&mut self) {}\n+}\n+\n fn for_each_exported_symbols_include_dep<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     crate_type: CrateType,"}]}