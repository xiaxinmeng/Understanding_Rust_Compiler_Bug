{"sha": "0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "node_id": "C_kwDOAAsO6NoAKDBhMWI5ODM0YjNkNzE5NTNmZjBiMjJiNDgyMzdlMjNkNWZhOWZkM2Y", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-14T14:30:42Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-14T14:42:53Z"}, "message": "add dist.compression-profile option to control compression speed", "tree": {"sha": "96c005b82a972c8564340f7275ec23d67fb8997a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96c005b82a972c8564340f7275ec23d67fb8997a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQQh+4ACgkQzXazX3c0\ndp4nJA//W6aWqWM5duyattyREel+3mrxfVK7AnZNpVzo1+SLhCpJ9OMXPyPWA815\n1TYX5jIwGcOeMFfBuKFtuIdUHXzY52qfcqXNfCMAN8KaZ5/1J37+AbGRNGmM+lBs\nuhOgHJyPr9SolpFMTPQtVdqtV7MqsCYM4Ucs25nJpTCEqcEsyJ61edifa5wMbRJz\nvwdmhpTPGuqUMeuKnfOvvojKwFSiycZiejJUfEM2LKJUROs5BHofaN71my6ZcYcY\nEz344sct644IXM1BCvx8RAFmAIIIEbB8fOxJ7v2OLf/8q7UZG+j6uesy0FLLtoxM\n58SxCElV9Ykx9QD58AB9hqgp5mV2Es+7FrKQWwtLJEoycARk8BYKtOg2mcIjjOrA\nfi5fDWswWBxm6rJP8vHFmdG7MoLgfwJXXk7F+IAFh6tMiME2/n07VCMy1lm14Y2B\nzB0nh0x0OyOiOZp/3GRIxljRnibdcHRDyhAzxC1bSo2A7f84/QsHrkLUZGA1ZoEx\n6YtrQ3CnvJyXJtw/1ANN4jozxU17C6D+Q4ayPstqvXeTUJmicZs+TNC2Qv2XSPcM\niSojiy0yAkHk+8f2OiuVky0Rd2+JTZ3UP/7526D3K+4vXRPOn0KQJ9yJqy6fpuGM\nfif2awjFuk5DTZ4aebQiSCRWXfgDn2wXcjYihvjTQWJJa0VNzT0=\n=S2P4\n-----END PGP SIGNATURE-----", "payload": "tree 96c005b82a972c8564340f7275ec23d67fb8997a\nparent bd43458d4c2a01af55f7032f7c47d7c8fecfe560\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678804242 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1678804973 +0100\n\nadd dist.compression-profile option to control compression speed\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "html_url": "https://github.com/rust-lang/rust/commit/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "html_url": "https://github.com/rust-lang/rust/commit/bd43458d4c2a01af55f7032f7c47d7c8fecfe560"}], "stats": {"total": 169, "additions": 122, "deletions": 47}, "files": [{"sha": "67916049e4ac9a16ae0a12ce58d52f35682c6f04", "filename": "config.example.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -803,3 +803,9 @@ changelog-seen = 2\n #\n # This list must be non-empty.\n #compression-formats = [\"gz\", \"xz\"]\n+\n+# How much time should be spent compressing the tarballs. The better the\n+# compression profile, the longer compression will take.\n+#\n+# Available options: fast, balanced, best\n+#compression-profile = \"balanced\""}, {"sha": "939853a76d83e19ba16c2eaaef19f838d72c17f4", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -190,6 +190,7 @@ pub struct Config {\n     pub dist_sign_folder: Option<PathBuf>,\n     pub dist_upload_addr: Option<String>,\n     pub dist_compression_formats: Option<Vec<String>>,\n+    pub dist_compression_profile: String,\n     pub dist_include_mingw_linker: bool,\n \n     // libstd features\n@@ -701,6 +702,7 @@ define_config! {\n         src_tarball: Option<bool> = \"src-tarball\",\n         missing_tools: Option<bool> = \"missing-tools\",\n         compression_formats: Option<Vec<String>> = \"compression-formats\",\n+        compression_profile: Option<String> = \"compression-profile\",\n         include_mingw_linker: Option<bool> = \"include-mingw-linker\",\n     }\n }\n@@ -819,6 +821,7 @@ impl Config {\n         config.deny_warnings = true;\n         config.bindir = \"bin\".into();\n         config.dist_include_mingw_linker = true;\n+        config.dist_compression_profile = \"balanced\".into();\n \n         // set by build.rs\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -1300,6 +1303,7 @@ impl Config {\n             config.dist_sign_folder = t.sign_folder.map(PathBuf::from);\n             config.dist_upload_addr = t.upload_addr;\n             config.dist_compression_formats = t.compression_formats;\n+            set(&mut config.dist_compression_profile, t.compression_profile);\n             set(&mut config.rust_dist_src, t.src_tarball);\n             set(&mut config.missing_tools, t.missing_tools);\n             set(&mut config.dist_include_mingw_linker, t.include_mingw_linker)"}, {"sha": "7fa8a4d9d7f8afdf9044ba1195bd1be2bdc8db79", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -318,6 +318,7 @@ impl<'a> Tarball<'a> {\n             assert!(!formats.is_empty(), \"dist.compression-formats can't be empty\");\n             cmd.arg(\"--compression-formats\").arg(formats.join(\",\"));\n         }\n+        cmd.args(&[\"--compression-profile\", &self.builder.config.dist_compression_profile]);\n         self.builder.run(&mut cmd);\n \n         // Ensure there are no symbolic links in the tarball. In particular,"}, {"sha": "abcf59cfe36cd39372b6ca1490aeb60fcf5e75ba", "filename": "src/tools/rust-installer/src/combiner.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fcombiner.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -1,7 +1,7 @@\n use super::Scripter;\n use super::Tarballer;\n use crate::{\n-    compression::{CompressionFormat, CompressionFormats},\n+    compression::{CompressionFormat, CompressionFormats, CompressionProfile},\n     util::*,\n };\n use anyhow::{bail, Context, Result};\n@@ -48,6 +48,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         output_dir: String = \"./dist\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -153,6 +157,7 @@ impl Combiner {\n             .work_dir(self.work_dir)\n             .input(self.package_name)\n             .output(path_to_str(&output)?.into())\n+            .compression_profile(self.compression_profile)\n             .compression_formats(self.compression_formats.clone());\n         tarballer.run()?;\n "}, {"sha": "510c914163c7e754b83485dee4a9328dd68a6782", "filename": "src/tools/rust-installer/src/compression.rs", "status": "modified", "additions": 93, "deletions": 43, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fcompression.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -4,6 +4,37 @@ use rayon::prelude::*;\n use std::{convert::TryFrom, fmt, io::Read, io::Write, path::Path, str::FromStr};\n use xz2::{read::XzDecoder, write::XzEncoder};\n \n+#[derive(Default, Debug, Copy, Clone)]\n+pub enum CompressionProfile {\n+    Fast,\n+    #[default]\n+    Balanced,\n+    Best,\n+}\n+\n+impl FromStr for CompressionProfile {\n+    type Err = Error;\n+\n+    fn from_str(input: &str) -> Result<Self, Error> {\n+        Ok(match input {\n+            \"fast\" => Self::Fast,\n+            \"balanced\" => Self::Balanced,\n+            \"best\" => Self::Best,\n+            other => anyhow::bail!(\"invalid compression profile: {other}\"),\n+        })\n+    }\n+}\n+\n+impl fmt::Display for CompressionProfile {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            CompressionProfile::Fast => f.write_str(\"fast\"),\n+            CompressionProfile::Balanced => f.write_str(\"balanced\"),\n+            CompressionProfile::Best => f.write_str(\"best\"),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone)]\n pub enum CompressionFormat {\n     Gz,\n@@ -26,7 +57,11 @@ impl CompressionFormat {\n         }\n     }\n \n-    pub(crate) fn encode(&self, path: impl AsRef<Path>) -> Result<Box<dyn Encoder>, Error> {\n+    pub(crate) fn encode(\n+        &self,\n+        path: impl AsRef<Path>,\n+        profile: CompressionProfile,\n+    ) -> Result<Box<dyn Encoder>, Error> {\n         let mut os = path.as_ref().as_os_str().to_os_string();\n         os.push(format!(\".{}\", self.extension()));\n         let path = Path::new(&os);\n@@ -37,49 +72,64 @@ impl CompressionFormat {\n         let file = crate::util::create_new_file(path)?;\n \n         Ok(match self {\n-            CompressionFormat::Gz => Box::new(GzEncoder::new(file, flate2::Compression::best())),\n+            CompressionFormat::Gz => Box::new(GzEncoder::new(\n+                file,\n+                match profile {\n+                    CompressionProfile::Fast => flate2::Compression::fast(),\n+                    CompressionProfile::Balanced => flate2::Compression::new(6),\n+                    CompressionProfile::Best => flate2::Compression::best(),\n+                },\n+            )),\n             CompressionFormat::Xz => {\n-                let mut filters = xz2::stream::Filters::new();\n-                // the preset is overridden by the other options so it doesn't matter\n-                let mut lzma_ops = xz2::stream::LzmaOptions::new_preset(9).unwrap();\n-                // This sets the overall dictionary size, which is also how much memory (baseline)\n-                // is needed for decompression.\n-                lzma_ops.dict_size(64 * 1024 * 1024);\n-                // Use the best match finder for compression ratio.\n-                lzma_ops.match_finder(xz2::stream::MatchFinder::BinaryTree4);\n-                lzma_ops.mode(xz2::stream::Mode::Normal);\n-                // Set nice len to the maximum for best compression ratio\n-                lzma_ops.nice_len(273);\n-                // Set depth to a reasonable value, 0 means auto, 1000 is somwhat high but gives\n-                // good results.\n-                lzma_ops.depth(1000);\n-                // 2 is the default and does well for most files\n-                lzma_ops.position_bits(2);\n-                // 0 is the default and does well for most files\n-                lzma_ops.literal_position_bits(0);\n-                // 3 is the default and does well for most files\n-                lzma_ops.literal_context_bits(3);\n-\n-                filters.lzma2(&lzma_ops);\n-\n-                let mut builder = xz2::stream::MtStreamBuilder::new();\n-                builder.filters(filters);\n-\n-                // On 32-bit platforms limit ourselves to 3 threads, otherwise we exceed memory\n-                // usage this process can take. In the future we'll likely only do super-fast\n-                // compression in CI and move this heavyweight processing to promote-release (which\n-                // is always 64-bit and can run on big-memory machines) but for now this lets us\n-                // move forward.\n-                if std::mem::size_of::<usize>() == 4 {\n-                    builder.threads(3);\n-                } else {\n-                    builder.threads(6);\n-                }\n-\n-                let compressor = XzEncoder::new_stream(\n-                    std::io::BufWriter::new(file),\n-                    builder.encoder().unwrap(),\n-                );\n+                let encoder = match profile {\n+                    CompressionProfile::Fast => {\n+                        xz2::stream::MtStreamBuilder::new().threads(6).preset(1).encoder().unwrap()\n+                    }\n+                    CompressionProfile::Balanced => {\n+                        xz2::stream::MtStreamBuilder::new().threads(6).preset(6).encoder().unwrap()\n+                    }\n+                    CompressionProfile::Best => {\n+                        let mut filters = xz2::stream::Filters::new();\n+                        // the preset is overridden by the other options so it doesn't matter\n+                        let mut lzma_ops = xz2::stream::LzmaOptions::new_preset(9).unwrap();\n+                        // This sets the overall dictionary size, which is also how much memory (baseline)\n+                        // is needed for decompression.\n+                        lzma_ops.dict_size(64 * 1024 * 1024);\n+                        // Use the best match finder for compression ratio.\n+                        lzma_ops.match_finder(xz2::stream::MatchFinder::BinaryTree4);\n+                        lzma_ops.mode(xz2::stream::Mode::Normal);\n+                        // Set nice len to the maximum for best compression ratio\n+                        lzma_ops.nice_len(273);\n+                        // Set depth to a reasonable value, 0 means auto, 1000 is somwhat high but gives\n+                        // good results.\n+                        lzma_ops.depth(1000);\n+                        // 2 is the default and does well for most files\n+                        lzma_ops.position_bits(2);\n+                        // 0 is the default and does well for most files\n+                        lzma_ops.literal_position_bits(0);\n+                        // 3 is the default and does well for most files\n+                        lzma_ops.literal_context_bits(3);\n+\n+                        filters.lzma2(&lzma_ops);\n+\n+                        let mut builder = xz2::stream::MtStreamBuilder::new();\n+                        builder.filters(filters);\n+\n+                        // On 32-bit platforms limit ourselves to 3 threads, otherwise we exceed memory\n+                        // usage this process can take. In the future we'll likely only do super-fast\n+                        // compression in CI and move this heavyweight processing to promote-release (which\n+                        // is always 64-bit and can run on big-memory machines) but for now this lets us\n+                        // move forward.\n+                        if std::mem::size_of::<usize>() == 4 {\n+                            builder.threads(3);\n+                        } else {\n+                            builder.threads(6);\n+                        }\n+                        builder.encoder().unwrap()\n+                    }\n+                };\n+\n+                let compressor = XzEncoder::new_stream(std::io::BufWriter::new(file), encoder);\n                 Box::new(compressor)\n             }\n         })"}, {"sha": "ddd1052599d58bff1fc353383aa413a737905b70", "filename": "src/tools/rust-installer/src/generator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Fgenerator.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -1,6 +1,6 @@\n use super::Scripter;\n use super::Tarballer;\n-use crate::compression::CompressionFormats;\n+use crate::compression::{CompressionFormats, CompressionProfile};\n use crate::util::*;\n use anyhow::{bail, format_err, Context, Result};\n use std::collections::BTreeSet;\n@@ -54,6 +54,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         output_dir: String = \"./dist\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -113,6 +117,7 @@ impl Generator {\n             .work_dir(self.work_dir)\n             .input(self.package_name)\n             .output(path_to_str(&output)?.into())\n+            .compression_profile(self.compression_profile)\n             .compression_formats(self.compression_formats.clone());\n         tarballer.run()?;\n "}, {"sha": "592eba8f69850aa51e98fe355bc45b8a9bb40849", "filename": "src/tools/rust-installer/src/tarballer.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer%2Fsrc%2Ftarballer.rs?ref=0a1b9834b3d71953ff0b22b48237e23d5fa9fd3f", "patch": "@@ -6,7 +6,7 @@ use tar::{Builder, Header};\n use walkdir::WalkDir;\n \n use crate::{\n-    compression::{CombinedEncoder, CompressionFormats},\n+    compression::{CombinedEncoder, CompressionFormats, CompressionProfile},\n     util::*,\n };\n \n@@ -25,6 +25,10 @@ actor! {\n         #[clap(value_name = \"DIR\")]\n         work_dir: String = \"./workdir\",\n \n+        /// The profile used to compress the tarball.\n+        #[clap(value_name = \"FORMAT\", default_value_t)]\n+        compression_profile: CompressionProfile,\n+\n         /// The formats used to compress the tarball.\n         #[clap(value_name = \"FORMAT\", default_value_t)]\n         compression_formats: CompressionFormats,\n@@ -38,7 +42,7 @@ impl Tarballer {\n         let encoder = CombinedEncoder::new(\n             self.compression_formats\n                 .iter()\n-                .map(|f| f.encode(&tarball_name))\n+                .map(|f| f.encode(&tarball_name, self.compression_profile))\n                 .collect::<Result<Vec<_>>>()?,\n         );\n "}]}