{"sha": "fa4594196d2bcc265c4cdc1382d33366b3008341", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDU5NDE5NmQyYmNjMjY1YzRjZGMxMzgyZDMzMzY2YjMwMDgzNDE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-27T20:49:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "Suggest `'r` instead of `'lifetime`", "tree": {"sha": "127b29b44fedca563996cb4f88bede542796713e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127b29b44fedca563996cb4f88bede542796713e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4594196d2bcc265c4cdc1382d33366b3008341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4594196d2bcc265c4cdc1382d33366b3008341", "html_url": "https://github.com/rust-lang/rust/commit/fa4594196d2bcc265c4cdc1382d33366b3008341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4594196d2bcc265c4cdc1382d33366b3008341/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "html_url": "https://github.com/rust-lang/rust/commit/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0"}], "stats": {"total": 179, "additions": 120, "deletions": 59}, "files": [{"sha": "8346dc3b854255c96d93581b1540578efac88fd8", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -1498,8 +1498,8 @@ crate fn add_missing_lifetime_specifiers_label(\n                         msg = \"consider introducing a named lifetime parameter\";\n                         should_break = true;\n                         match &generics.params {\n-                            [] => (generics.span, \"<'lifetime>\".to_string()),\n-                            [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                            [] => (generics.span, \"<'r>\".to_string()),\n+                            [param, ..] => (param.span.shrink_to_lo(), \"'r, \".to_string()),\n                         }\n                     }\n                     MissingLifetimeSpot::HRLT { span, span_type } => {\n@@ -1510,8 +1510,8 @@ crate fn add_missing_lifetime_specifiers_label(\n                              https://doc.rust-lang.org/nomicon/hrtb.html\",\n                         );\n                         let suggestion = match span_type {\n-                            HRLTSpanType::Empty => \"for<'lifetime> \",\n-                            HRLTSpanType::Tail => \", 'lifetime\",\n+                            HRLTSpanType::Empty => \"for<'r> \",\n+                            HRLTSpanType::Tail => \", 'r\",\n                         };\n                         (*span, suggestion.to_string())\n                     }\n@@ -1520,7 +1520,7 @@ crate fn add_missing_lifetime_specifiers_label(\n                     if let Ok(snippet) = source_map.span_to_snippet(param.span) {\n                         if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n                             introduce_suggestion\n-                                .push((param.span, format!(\"&'lifetime {}\", &snippet[1..])));\n+                                .push((param.span, format!(\"&'r {}\", &snippet[1..])));\n                         }\n                     }\n                 }\n@@ -1543,13 +1543,13 @@ crate fn add_missing_lifetime_specifiers_label(\n                 suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n             }\n             (0, _, Some(\"&\")) => {\n-                suggest_new(err, \"&'lifetime \");\n+                suggest_new(err, \"&'r \");\n             }\n             (0, _, Some(\"'_\")) => {\n-                suggest_new(err, \"'lifetime\");\n+                suggest_new(err, \"'r\");\n             }\n             (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_new(err, &format!(\"{}<'lifetime>\", snippet));\n+                suggest_new(err, &format!(\"{}<'r>\", snippet));\n             }\n             _ => {\n                 err.span_label(span, \"expected lifetime parameter\");"}, {"sha": "3792b8f637aa0bc2eb0121a583f71ee46c3b37fb", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     x: &bool,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime bool,\n+LL | struct Foo<'r> {\n+LL |     x: &'r bool,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,9 +18,9 @@ LL |     B(&bool),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'lifetime> {\n+LL | enum Bar<'r> {\n LL |     A(u8),\n-LL |     B(&'lifetime bool),\n+LL |     B(&'r bool),\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -31,8 +31,8 @@ LL | type MyStr = &str;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | type MyStr<'lifetime> = &'lifetime str;\n-   |           ^^^^^^^^^^^   ^^^^^^^^^^\n+LL | type MyStr<'r> = &'r str;\n+   |           ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:17:10\n@@ -42,8 +42,8 @@ LL |     baz: Baz,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Quux<'lifetime> {\n-LL |     baz: Baz<'lifetime>,\n+LL | struct Quux<'r> {\n+LL |     baz: Baz<'r>,\n    |\n \n error[E0106]: missing lifetime specifiers"}, {"sha": "d3968917bed546c9ee06a1818fe6ac59df897d85", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     type Output = &i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'lifetime> = &'lifetime i32;\n-   |                ^^^^^^^^^^^   ^^^^^^^^^^\n+LL |     type Output<'r> = &'r i32;\n+   |                ^^^^   ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20\n@@ -17,8 +17,8 @@ LL |     type Output = &'_ i32;\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL |     type Output<'lifetime> = &'lifetime i32;\n-   |                ^^^^^^^^^^^    ^^^^^^^^^\n+LL |     type Output<'r> = &'r i32;\n+   |                ^^^^    ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3688b222a3508823d67da521c124431ee447d836", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL | struct Heartbreak(Betrayal);\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Heartbreak<'lifetime>(Betrayal<'lifetime>);\n-   |                  ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^\n+LL | struct Heartbreak<'r>(Betrayal<'r>);\n+   |                  ^^^^ ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8246b0e54019f5f0b863e990a260f752b3ae8995", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,8 +11,8 @@ LL | type Foo = fn(&u8, &u8) -> &u8;\n    |               ^^^  ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | type Foo<'lifetime> = fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8;\n-   |         ^^^^^^^^^^^      ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | type Foo<'r> = fn(&'r u8, &'r u8) -> &'r u8;\n+   |         ^^^^      ^^^^^^  ^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n@@ -28,12 +28,12 @@ LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n    = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing a Higher-Ranked lifetime\n    |\n-LL | fn bar<F: for<'lifetime> Fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8>(f: &F) {}\n-   |           ^^^^^^^^^^^^^^    ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn bar<F: for<'r> Fn(&'r u8, &'r u8) -> &'r u8>(f: &F) {}\n+   |           ^^^^^^^    ^^^^^^  ^^^^^^     ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn bar<'lifetime, F: Fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8>(f: &F) {}\n-   |        ^^^^^^^^^^       ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn bar<'r, F: Fn(&'r u8, &'r u8) -> &'r u8>(f: &F) {}\n+   |        ^^^       ^^^^^^  ^^^^^^     ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c114cf1ae8b4f46e55a8e56b93347d1856fe3a0", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,8 +11,8 @@ LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.ne\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn parse_type<'lifetime>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'lifetime str { iter.next() }\n-   |              ^^^^^^^^^^^                                                ^^^^^^^^^^\n+LL | fn parse_type<'r>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'r str { iter.next() }\n+   |              ^^^^                                                ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "fff3766e12dc7554991c8b8e952e9336a91d1677", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,8 +11,8 @@ LL | fn f(a: &S, b: i32) -> &i32 {\n    |         ^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'lifetime>(a: &'lifetime S, b: i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^    ^^^^^^^^^^^^             ^^^^^^^^^^\n+LL | fn f<'r>(a: &'r S, b: i32) -> &'r i32 {\n+   |     ^^^^    ^^^^^             ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n@@ -27,8 +27,8 @@ LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n    |         ^^              ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(a: &'lifetime S, b: bool, c: &'lifetime i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^    ^^^^^^^^^^^^              ^^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn g<'r>(a: &'r S, b: bool, c: &'r i32) -> &'r i32 {\n+   |     ^^^^    ^^^^^              ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n@@ -43,8 +43,8 @@ LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n    |         ^^^^^              ^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(a: &'lifetime bool, b: bool, c: &'lifetime S, d: &'lifetime i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^    ^^^^^^^^^^^^^^^              ^^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn h<'r>(a: &'r bool, b: bool, c: &'r S, d: &'r i32) -> &'r i32 {\n+   |     ^^^^    ^^^^^^^^              ^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "638c8b8612cf22e6a586a7d799a676656b1ecd76", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -19,8 +19,8 @@ LL | fn g(_x: &isize, _y: &isize) -> &isize {\n    |          ^^^^^^      ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(_x: &'lifetime isize, _y: &'lifetime isize) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn g<'r>(_x: &'r isize, _y: &'r isize) -> &'r isize {\n+   |     ^^^^     ^^^^^^^^^      ^^^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n@@ -35,8 +35,8 @@ LL | fn h(_x: &Foo) -> &isize {\n    |          ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(_x: &'lifetime Foo) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn h<'r>(_x: &'r Foo) -> &'r isize {\n+   |     ^^^^     ^^^^^^^     ^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "e1982ea393ef4650cc00f5fe86ee0b2c46c06569", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,8 +11,8 @@ LL | fn foo(x: &i32, y: &i32) -> &i32 {\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &'lifetime i32, y: &'lifetime i32) -> &'lifetime i32 {\n-   |       ^^^^^^^^^^^    ^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n+LL | fn foo<'r>(x: &'r i32, y: &'r i32) -> &'r i32 {\n+   |       ^^^^    ^^^^^^^     ^^^^^^^     ^^^\n \n error: aborting due to previous error\n "}, {"sha": "be33f2e2f76950d01e0e4cb5e7a4cd57a1f652e4", "filename": "src/test/ui/proc-macro/item-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     a: &u64\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct A<'lifetime> {\n-LL |     a: &'lifetime u64\n+LL | struct A<'r> {\n+LL |     a: &'r u64\n    |\n \n error: aborting due to previous error"}, {"sha": "46555df59367e27dd4992ea4435c8ebd6f1ca052", "filename": "src/test/ui/regions/regions-in-enums-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     Bar(&isize)\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Foo<'lifetime> {\n-LL |     Bar(&'lifetime isize)\n+LL | enum Foo<'r> {\n+LL |     Bar(&'r isize)\n    |\n \n error: aborting due to previous error"}, {"sha": "e807810db26fbf8f6f98587b159032418f957e2b", "filename": "src/test/ui/regions/regions-in-structs-anon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     x: &isize\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime isize\n+LL | struct Foo<'r> {\n+LL |     x: &'r isize\n    |\n \n error: aborting due to previous error"}, {"sha": "dac6610b3355f314f23b4180965f271a3c9e398b", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.rs?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -0,0 +1,8 @@\n+struct S1<F: Fn(&i32, &i32) -> &'a i32>(F); //~ ERROR use of undeclared lifetime name `'a`\n+struct S2<F: Fn(&i32, &i32) -> &i32>(F); //~ ERROR missing lifetime specifier\n+struct S3<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+//~^ ERROR binding for associated type `Output` references lifetime `'a`, which does not appear\n+struct S4<F: for<'x> Fn(&'x i32, &'x i32) -> &'x i32>(F);\n+const C: Option<Box<dyn for<'a> Fn(&usize, &usize) -> &'a usize>> = None;\n+//~^ ERROR binding for associated type `Output` references lifetime `'a`, which does not appear\n+fn main() {}"}, {"sha": "c1a40ebc89286afc19b453623998ea7499065741", "filename": "src/test/ui/suggestions/fn-missing-lifetime-in-item.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-missing-lifetime-in-item.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -0,0 +1,53 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/fn-missing-lifetime-in-item.rs:1:33\n+   |\n+LL | struct S1<F: Fn(&i32, &i32) -> &'a i32>(F);\n+   |                                 ^^ undeclared lifetime\n+   |\n+   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | struct S1<'a, F: Fn(&i32, &i32) -> &'a i32>(F);\n+   |           ^^^\n+help: consider introducing a Higher-Ranked lifetime `'a` here\n+   |\n+LL | struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+   |              ^^^^^^^\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/fn-missing-lifetime-in-item.rs:2:32\n+   |\n+LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n+   |                                ^ expected named lifetime parameter\n+   |\n+help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+  --> $DIR/fn-missing-lifetime-in-item.rs:2:17\n+   |\n+LL | struct S2<F: Fn(&i32, &i32) -> &i32>(F);\n+   |                 ^^^^  ^^^^\n+   = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider introducing a Higher-Ranked lifetime\n+   |\n+LL | struct S2<F: for<'r> Fn(&'r i32, &'r i32) -> &'r i32>(F);\n+   |              ^^^^^^^    ^^^^^^^  ^^^^^^^     ^^^\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | struct S2<'r, F: Fn(&'r i32, &'r i32) -> &'r i32>(F);\n+   |           ^^^       ^^^^^^^  ^^^^^^^     ^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/fn-missing-lifetime-in-item.rs:3:40\n+   |\n+LL | struct S3<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+   |                                        ^^^^^^^\n+\n+error[E0582]: binding for associated type `Output` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/fn-missing-lifetime-in-item.rs:6:55\n+   |\n+LL | const C: Option<Box<dyn for<'a> Fn(&usize, &usize) -> &'a usize>> = None;\n+   |                                                       ^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0106, E0261, E0582.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "459000a3722cad2f82b6f9a426ddb4efe82e6507", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,7 +11,7 @@ LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n    |                    ^^^^^^  ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn main<'lifetime>() {\n+LL | fn main<'r>() {\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n LL |           dyn Foo(&isize) -> &isize                                   >();\n LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,"}, {"sha": "d0efd788dc1a9dbcdd1b4ee3de627ca03aca12e4", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     x: Box<dyn Debug + '_>,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: Box<dyn Debug + 'lifetime>,\n+LL | struct Foo<'r> {\n+LL |     x: Box<dyn Debug + 'r>,\n    |\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound"}, {"sha": "998028622c2656578fb25262a8722bfcebc459c3", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -11,8 +11,8 @@ LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &'lifetime u32, y: &'lifetime u32) -> &'lifetime u32 { loop { } }\n-   |       ^^^^^^^^^^^    ^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^      ^^^^^^^^^\n+LL | fn foo<'r>(x: &'r u32, y: &'r u32) -> &'r u32 { loop { } }\n+   |       ^^^^    ^^^^^^^     ^^^^^^^      ^^\n \n error: aborting due to previous error\n "}, {"sha": "406e0a92013d41bbec0e97620056973d2a3adf7f", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -6,8 +6,8 @@ LL |     x: &'_ u32,\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | struct Foo<'lifetime> {\n-LL |     x: &'lifetime u32,\n+LL | struct Foo<'r> {\n+LL |     x: &'r u32,\n    |\n \n error[E0106]: missing lifetime specifier\n@@ -18,8 +18,8 @@ LL |     Variant(&'_ u32),\n    |\n help: consider introducing a named lifetime parameter\n    |\n-LL | enum Bar<'lifetime> {\n-LL |     Variant(&'lifetime u32),\n+LL | enum Bar<'r> {\n+LL |     Variant(&'r u32),\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "94f3499df5f2620cdd5eb31ca48e7d3a59834277", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa4594196d2bcc265c4cdc1382d33366b3008341/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=fa4594196d2bcc265c4cdc1382d33366b3008341", "patch": "@@ -37,8 +37,8 @@ LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n    |            ^^^^^^     ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo2<'lifetime>(_: &'_ u8, y: &'_ u8) -> &'lifetime u8 { y }\n-   |        ^^^^^^^^^^^                           ^^^^^^^^^\n+LL | fn foo2<'r>(_: &'_ u8, y: &'_ u8) -> &'r u8 { y }\n+   |        ^^^^                           ^^\n \n error: aborting due to 5 previous errors\n "}]}