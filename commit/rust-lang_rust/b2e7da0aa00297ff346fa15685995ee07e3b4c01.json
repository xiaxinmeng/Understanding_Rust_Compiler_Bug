{"sha": "b2e7da0aa00297ff346fa15685995ee07e3b4c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTdkYTBhYTAwMjk3ZmYzNDZmYTE1Njg1OTk1ZWUwN2UzYjRjMDE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-26T06:12:25Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-26T06:12:25Z"}, "message": "Format imports with aliases.\n\nCloses #366", "tree": {"sha": "973e27e463e1f86e58f065796c1cfaec21fa4ba2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/973e27e463e1f86e58f065796c1cfaec21fa4ba2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e7da0aa00297ff346fa15685995ee07e3b4c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e7da0aa00297ff346fa15685995ee07e3b4c01", "html_url": "https://github.com/rust-lang/rust/commit/b2e7da0aa00297ff346fa15685995ee07e3b4c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e7da0aa00297ff346fa15685995ee07e3b4c01/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5688f7c238c3c62d193972a93d7006cccfe8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5688f7c238c3c62d193972a93d7006cccfe8e4", "html_url": "https://github.com/rust-lang/rust/commit/9a5688f7c238c3c62d193972a93d7006cccfe8e4"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "64633d2d4fff52bcb3c89d67e6b98406d248d13a", "filename": "src/imports.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b2e7da0aa00297ff346fa15685995ee07e3b4c01/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e7da0aa00297ff346fa15685995ee07e3b4c01/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=b2e7da0aa00297ff346fa15685995ee07e3b4c01", "patch": "@@ -48,21 +48,48 @@ impl Rewrite for ast::ViewPath {\n     }\n }\n \n-fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem) -> String {\n-    if let ast::PathListItem_::PathListIdent{ name, .. } = vpi.node {\n+fn rewrite_single_use_list(path_str: String, vpi: &ast::PathListItem) -> String {\n+    let path_item_str = if let ast::PathListItem_::PathListIdent{ name, .. } = vpi.node {\n+        // A name.\n         if path_str.is_empty() {\n             name.to_string()\n         } else {\n             format!(\"{}::{}\", path_str, name)\n         }\n     } else {\n+        // `self`.\n         if !path_str.is_empty() {\n             path_str\n         } else {\n             // This catches the import: use {self}, which is a compiler error, so we just\n             // leave it alone.\n             \"{self}\".to_owned()\n         }\n+    };\n+\n+    append_alias(path_item_str, vpi)\n+}\n+\n+fn rewrite_path_item(vpi: &&ast::PathListItem) -> String {\n+    let path_item_str = match vpi.node {\n+        ast::PathListItem_::PathListIdent{ name, .. } => {\n+            name.to_string()\n+        }\n+        ast::PathListItem_::PathListMod{ .. } => {\n+            \"self\".to_owned()\n+        }\n+    };\n+\n+    append_alias(path_item_str, vpi)\n+}\n+\n+fn append_alias(path_item_str: String, vpi: &ast::PathListItem) -> String {\n+    match vpi.node {\n+        ast::PathListItem_::PathListIdent{ rename: Some(rename), .. } |\n+        ast::PathListItem_::PathListMod{ rename: Some(rename), .. } => {\n+            format!(\"{} as {}\", path_item_str, rename)\n+        }\n+        _ => path_item_str,\n     }\n }\n \n@@ -80,7 +107,7 @@ pub fn rewrite_use_list(width: usize,\n \n     match path_list.len() {\n         0 => unreachable!(),\n-        1 => return Some(rewrite_single_use_list(path_str, path_list[0])),\n+        1 => return Some(rewrite_single_use_list(path_str, &path_list[0])),\n         _ => (),\n     }\n \n@@ -117,16 +144,7 @@ pub fn rewrite_use_list(width: usize,\n                                 \"}\",\n                                 |vpi| vpi.span.lo,\n                                 |vpi| vpi.span.hi,\n-                                |vpi| {\n-                                    match vpi.node {\n-                                        ast::PathListItem_::PathListIdent{ name, .. } => {\n-                                            name.to_string()\n-                                        }\n-                                        ast::PathListItem_::PathListMod{ .. } => {\n-                                            \"self\".to_owned()\n-                                        }\n-                                    }\n-                                },\n+                                rewrite_path_item,\n                                 span_after(span, \"{\", context.codemap),\n                                 span.hi);\n         items.extend(iter);"}, {"sha": "ab850f416fb4ded18e00ce02cab26eeabe019efa", "filename": "tests/source/imports.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e7da0aa00297ff346fa15685995ee07e3b4c01/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e7da0aa00297ff346fa15685995ee07e3b4c01/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=b2e7da0aa00297ff346fa15685995ee07e3b4c01", "patch": "@@ -44,3 +44,9 @@ use Baz::*;\n use  foo::bar::baz as baz ;\n use bar::quux  as    kaas;\n use  foo;\n+\n+// With aliases.\n+use foo::{self as bar, baz};\n+use foo::{self as bar};\n+use foo::{qux as bar};\n+use foo::{baz, qux as bar};"}, {"sha": "948b6da7c2bdc898b32e845e92268a2f803643bb", "filename": "tests/target/imports.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e7da0aa00297ff346fa15685995ee07e3b4c01/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e7da0aa00297ff346fa15685995ee07e3b4c01/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=b2e7da0aa00297ff346fa15685995ee07e3b4c01", "patch": "@@ -38,3 +38,9 @@ fn test() {\n use foo::bar::baz;\n use bar::quux as kaas;\n use foo;\n+\n+// With aliases.\n+use foo::{self as bar, baz};\n+use foo as bar;\n+use foo::qux as bar;\n+use foo::{baz, qux as bar};"}]}