{"sha": "28449daa2241410d4c384c5608b87fe7c85ffae6", "node_id": "C_kwDOAAsO6NoAKDI4NDQ5ZGFhMjI0MTQxMGQ0YzM4NGM1NjA4Yjg3ZmU3Yzg1ZmZhZTY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-13T02:37:02Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-13T02:37:02Z"}, "message": "`ascii::Char`-ify the escaping code\n\nThis means that `EscapeIterInner::as_str` no longer needs unsafe code, because the type system ensures the internal buffer is only ASCII, and thus valid UTF-8.", "tree": {"sha": "40cfb1e6d2c7e5087f61af88867f488d912e5dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40cfb1e6d2c7e5087f61af88867f488d912e5dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28449daa2241410d4c384c5608b87fe7c85ffae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28449daa2241410d4c384c5608b87fe7c85ffae6", "html_url": "https://github.com/rust-lang/rust/commit/28449daa2241410d4c384c5608b87fe7c85ffae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28449daa2241410d4c384c5608b87fe7c85ffae6/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04", "html_url": "https://github.com/rust-lang/rust/commit/4a59ba4d54a3ec0d8ea1e82b7eeb5c8b0162de04"}], "stats": {"total": 115, "additions": 65, "deletions": 50}, "files": [{"sha": "ef8e4d098ed9562acc9f162c0999b34ee418f70d", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=28449daa2241410d4c384c5608b87fe7c85ffae6", "patch": "@@ -91,7 +91,7 @@ pub struct EscapeDefault(escape::EscapeIterInner<4>);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn escape_default(c: u8) -> EscapeDefault {\n-    let mut data = [0; 4];\n+    let mut data = [Char::Null; 4];\n     let range = escape::escape_ascii_into(&mut data, c);\n     EscapeDefault(escape::EscapeIterInner::new(data, range))\n }"}, {"sha": "515b8d20ead86f92c4771b6a4dc7b92335d7bf1e", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=28449daa2241410d4c384c5608b87fe7c85ffae6", "patch": "@@ -392,13 +392,13 @@ impl char {\n     #[inline]\n     pub(crate) fn escape_debug_ext(self, args: EscapeDebugExtArgs) -> EscapeDebug {\n         match self {\n-            '\\0' => EscapeDebug::backslash(b'0'),\n-            '\\t' => EscapeDebug::backslash(b't'),\n-            '\\r' => EscapeDebug::backslash(b'r'),\n-            '\\n' => EscapeDebug::backslash(b'n'),\n-            '\\\\' => EscapeDebug::backslash(b'\\\\'),\n-            '\"' if args.escape_double_quote => EscapeDebug::backslash(b'\"'),\n-            '\\'' if args.escape_single_quote => EscapeDebug::backslash(b'\\''),\n+            '\\0' => EscapeDebug::backslash(ascii::Char::Digit0),\n+            '\\t' => EscapeDebug::backslash(ascii::Char::SmallT),\n+            '\\r' => EscapeDebug::backslash(ascii::Char::SmallR),\n+            '\\n' => EscapeDebug::backslash(ascii::Char::SmallN),\n+            '\\\\' => EscapeDebug::backslash(ascii::Char::ReverseSolidus),\n+            '\\\"' if args.escape_double_quote => EscapeDebug::backslash(ascii::Char::QuotationMark),\n+            '\\'' if args.escape_single_quote => EscapeDebug::backslash(ascii::Char::Apostrophe),\n             _ if args.escape_grapheme_extended && self.is_grapheme_extended() => {\n                 EscapeDebug::from_unicode(self.escape_unicode())\n             }\n@@ -503,11 +503,11 @@ impl char {\n     #[inline]\n     pub fn escape_default(self) -> EscapeDefault {\n         match self {\n-            '\\t' => EscapeDefault::backslash(b't'),\n-            '\\r' => EscapeDefault::backslash(b'r'),\n-            '\\n' => EscapeDefault::backslash(b'n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefault::backslash(self as u8),\n-            '\\x20'..='\\x7e' => EscapeDefault::printable(self as u8),\n+            '\\t' => EscapeDefault::backslash(ascii::Char::SmallT),\n+            '\\r' => EscapeDefault::backslash(ascii::Char::SmallR),\n+            '\\n' => EscapeDefault::backslash(ascii::Char::SmallN),\n+            '\\\\' | '\\'' | '\"' => EscapeDefault::backslash(self.as_ascii().unwrap()),\n+            '\\x20'..='\\x7e' => EscapeDefault::printable(self.as_ascii().unwrap()),\n             _ => EscapeDefault::from_unicode(self.escape_unicode()),\n         }\n     }"}, {"sha": "5c42912874c66ec008ac41dedb713448b22432c5", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=28449daa2241410d4c384c5608b87fe7c85ffae6", "patch": "@@ -38,6 +38,7 @@ pub use self::methods::encode_utf16_raw;\n #[unstable(feature = \"char_internals\", reason = \"exposed only for libstd\", issue = \"none\")]\n pub use self::methods::encode_utf8_raw;\n \n+use crate::ascii;\n use crate::error::Error;\n use crate::escape;\n use crate::fmt::{self, Write};\n@@ -152,7 +153,7 @@ pub struct EscapeUnicode(escape::EscapeIterInner<10>);\n \n impl EscapeUnicode {\n     fn new(chr: char) -> Self {\n-        let mut data = [0; 10];\n+        let mut data = [ascii::Char::Null; 10];\n         let range = escape::escape_unicode_into(&mut data, chr);\n         Self(escape::EscapeIterInner::new(data, range))\n     }\n@@ -218,14 +219,14 @@ impl fmt::Display for EscapeUnicode {\n pub struct EscapeDefault(escape::EscapeIterInner<10>);\n \n impl EscapeDefault {\n-    fn printable(chr: u8) -> Self {\n-        let data = [chr, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n-        Self(escape::EscapeIterInner::new(data, 0..1))\n+    fn printable(chr: ascii::Char) -> Self {\n+        let data = [chr];\n+        Self(escape::EscapeIterInner::from_array(data))\n     }\n \n-    fn backslash(chr: u8) -> Self {\n-        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n-        Self(escape::EscapeIterInner::new(data, 0..2))\n+    fn backslash(chr: ascii::Char) -> Self {\n+        let data = [ascii::Char::ReverseSolidus, chr];\n+        Self(escape::EscapeIterInner::from_array(data))\n     }\n \n     fn from_unicode(esc: EscapeUnicode) -> Self {\n@@ -307,9 +308,9 @@ impl EscapeDebug {\n         Self(EscapeDebugInner::Char(chr))\n     }\n \n-    fn backslash(chr: u8) -> Self {\n-        let data = [b'\\\\', chr, 0, 0, 0, 0, 0, 0, 0, 0];\n-        let iter = escape::EscapeIterInner::new(data, 0..2);\n+    fn backslash(chr: ascii::Char) -> Self {\n+        let data = [ascii::Char::ReverseSolidus, chr];\n+        let iter = escape::EscapeIterInner::from_array(data);\n         Self(EscapeDebugInner::Bytes(iter))\n     }\n \n@@ -318,7 +319,7 @@ impl EscapeDebug {\n     }\n \n     fn clear(&mut self) {\n-        let bytes = escape::EscapeIterInner::new([0; 10], 0..0);\n+        let bytes = escape::EscapeIterInner::from_array([]);\n         self.0 = EscapeDebugInner::Bytes(bytes);\n     }\n }"}, {"sha": "3d471419bb8f112ba103a4c96d80752edfd594bf", "filename": "library/core/src/escape.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fescape.rs?ref=28449daa2241410d4c384c5608b87fe7c85ffae6", "patch": "@@ -1,34 +1,41 @@\n //! Helper code for character escaping.\n \n+use crate::ascii;\n use crate::num::NonZeroUsize;\n use crate::ops::Range;\n \n-const HEX_DIGITS: [u8; 16] = *b\"0123456789abcdef\";\n+const HEX_DIGITS: [ascii::Char; 16] = *b\"0123456789abcdef\".as_ascii().unwrap();\n \n /// Escapes a byte into provided buffer; returns length of escaped\n /// representation.\n-pub(crate) fn escape_ascii_into(output: &mut [u8; 4], byte: u8) -> Range<u8> {\n+pub(crate) fn escape_ascii_into(output: &mut [ascii::Char; 4], byte: u8) -> Range<u8> {\n+    #[inline]\n+    fn backslash(a: ascii::Char) -> ([ascii::Char; 4], u8) {\n+        ([ascii::Char::ReverseSolidus, a, ascii::Char::Null, ascii::Char::Null], 2)\n+    }\n+\n     let (data, len) = match byte {\n-        b'\\t' => ([b'\\\\', b't', 0, 0], 2),\n-        b'\\r' => ([b'\\\\', b'r', 0, 0], 2),\n-        b'\\n' => ([b'\\\\', b'n', 0, 0], 2),\n-        b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n-        b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n-        b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n-        b'\\x20'..=b'\\x7e' => ([byte, 0, 0, 0], 1),\n-        _ => {\n+        b'\\t' => backslash(ascii::Char::SmallT),\n+        b'\\r' => backslash(ascii::Char::SmallR),\n+        b'\\n' => backslash(ascii::Char::SmallN),\n+        b'\\\\' => backslash(ascii::Char::ReverseSolidus),\n+        b'\\'' => backslash(ascii::Char::Apostrophe),\n+        b'\\\"' => backslash(ascii::Char::QuotationMark),\n+        _ => if let Some(a) = byte.as_ascii() && !byte.is_ascii_control() {\n+            ([a, ascii::Char::Null, ascii::Char::Null, ascii::Char::Null], 1)\n+        } else {\n             let hi = HEX_DIGITS[usize::from(byte >> 4)];\n             let lo = HEX_DIGITS[usize::from(byte & 0xf)];\n-            ([b'\\\\', b'x', hi, lo], 4)\n+            ([ascii::Char::ReverseSolidus, ascii::Char::SmallX, hi, lo], 4)\n         }\n     };\n     *output = data;\n-    0..(len as u8)\n+    0..len\n }\n \n /// Escapes a character into provided buffer using `\\u{NNNN}` representation.\n-pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8> {\n-    output[9] = b'}';\n+pub(crate) fn escape_unicode_into(output: &mut [ascii::Char; 10], ch: char) -> Range<u8> {\n+    output[9] = ascii::Char::RightCurlyBracket;\n \n     let ch = ch as u32;\n     output[3] = HEX_DIGITS[((ch >> 20) & 15) as usize];\n@@ -41,7 +48,8 @@ pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8>\n     // or-ing 1 ensures that for ch==0 the code computes that one digit should\n     // be printed.\n     let start = (ch | 1).leading_zeros() as usize / 4 - 2;\n-    output[start..start + 3].copy_from_slice(b\"\\\\u{\");\n+    const UNICODE_ESCAPE_PREFIX: &[ascii::Char; 3] = b\"\\\\u{\".as_ascii().unwrap();\n+    output[start..][..3].copy_from_slice(UNICODE_ESCAPE_PREFIX);\n \n     (start as u8)..10\n }\n@@ -52,41 +60,46 @@ pub(crate) fn escape_unicode_into(output: &mut [u8; 10], ch: char) -> Range<u8>\n /// limited to u8 to reduce size of the structure.\n #[derive(Clone, Debug)]\n pub(crate) struct EscapeIterInner<const N: usize> {\n-    // Invariant: data[alive] is all ASCII.\n-    pub(crate) data: [u8; N],\n+    // The element type ensures this is always ASCII, and thus also valid UTF-8.\n+    pub(crate) data: [ascii::Char; N],\n \n     // Invariant: alive.start <= alive.end <= N.\n     pub(crate) alive: Range<u8>,\n }\n \n impl<const N: usize> EscapeIterInner<N> {\n-    pub fn new(data: [u8; N], alive: Range<u8>) -> Self {\n+    pub fn new(data: [ascii::Char; N], alive: Range<u8>) -> Self {\n         const { assert!(N < 256) };\n         debug_assert!(alive.start <= alive.end && usize::from(alive.end) <= N, \"{alive:?}\");\n-        let this = Self { data, alive };\n-        debug_assert!(this.as_bytes().is_ascii(), \"Expected ASCII, got {:?}\", this.as_bytes());\n-        this\n+        Self { data, alive }\n+    }\n+\n+    pub fn from_array<const M: usize>(array: [ascii::Char; M]) -> Self {\n+        const { assert!(M <= N) };\n+\n+        let mut data = [ascii::Char::Null; N];\n+        data[..M].copy_from_slice(&array);\n+        Self::new(data, 0..M as u8)\n     }\n \n-    fn as_bytes(&self) -> &[u8] {\n+    pub fn as_ascii(&self) -> &[ascii::Char] {\n         &self.data[usize::from(self.alive.start)..usize::from(self.alive.end)]\n     }\n \n     pub fn as_str(&self) -> &str {\n-        // SAFETY: self.data[self.alive] is all ASCII characters.\n-        unsafe { crate::str::from_utf8_unchecked(self.as_bytes()) }\n+        self.as_ascii().as_str()\n     }\n \n     pub fn len(&self) -> usize {\n         usize::from(self.alive.end - self.alive.start)\n     }\n \n     pub fn next(&mut self) -> Option<u8> {\n-        self.alive.next().map(|i| self.data[usize::from(i)])\n+        self.alive.next().map(|i| self.data[usize::from(i)].as_u8())\n     }\n \n     pub fn next_back(&mut self) -> Option<u8> {\n-        self.alive.next_back().map(|i| self.data[usize::from(i)])\n+        self.alive.next_back().map(|i| self.data[usize::from(i)].as_u8())\n     }\n \n     pub fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {"}, {"sha": "aac172988f3b97588a32c0009e1f08b0eba3a9c7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28449daa2241410d4c384c5608b87fe7c85ffae6/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=28449daa2241410d4c384c5608b87fe7c85ffae6", "patch": "@@ -215,6 +215,7 @@\n #![feature(intra_doc_pointers)]\n #![feature(intrinsics)]\n #![feature(lang_items)]\n+#![feature(let_chains)]\n #![feature(link_llvm_intrinsics)]\n #![feature(macro_metavar_expr)]\n #![feature(min_specialization)]"}]}