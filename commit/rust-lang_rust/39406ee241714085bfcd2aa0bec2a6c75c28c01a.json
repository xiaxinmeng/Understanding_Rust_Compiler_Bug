{"sha": "39406ee241714085bfcd2aa0bec2a6c75c28c01a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDA2ZWUyNDE3MTQwODViZmNkMmFhMGJlYzJhNmM3NWMyOGMwMWE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:42Z"}, "message": "Rollup merge of #52821 - fukatani:gdb-vecdeque-print, r=michaelwoerister\n\npretty print for std::collections::vecdeque\n\nI want pretty print function for VecDeque like Vec.\n\n```rust\nuse std::collections::VecDeque;\n\nfn main() {\n    let mut d: VecDeque<i32> = VecDeque::new();\n    d.push_back(4);\n    d.push_back(4);\n    d.push_back(6);\n    let mut v: Vec<i32> = Vec::new();\n    v.push(4);\n    v.push(4);\n    v.push(6);\n}\n```\n\n```\n(gdb) p v\n$1 = Vec<i32>(len: 3, cap: 4) = {4, 4, 6}\n(gdb) p d\n$2 = VecDeque<i32>(len: 3, cap: 8) = {4, 4, 6}\n```\n\nThanks.", "tree": {"sha": "add94b38b70c88464ff9e96ff6932596b599cdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add94b38b70c88464ff9e96ff6932596b599cdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39406ee241714085bfcd2aa0bec2a6c75c28c01a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWt6CRBK7hj4Ov3rIwAAdHIIACGn5BpxkdtohXX0JKIU+Z5p\n8tdgEZsJKt5OsSwCu8fy8aSu94muW59A0emX+tCt9oosIPjw/7wi3fvh4XjDtT9O\nJMavq2rAzwQa0kq69XWoWxLHBbppUqqXgWzVSgzpPOmLz+5Q0TuxlAxwMpZYuGsO\nmZxFXEFd0nxb/Sq+bhbRVmeWNyH5ZFwnM+91+Hf1x1EDeTZo8jH37xe8YeRUjNgO\nzARhApskgCjfMjtwV5buEcM+sSIXYUL1dlt9zggNRghVrYx9lKeEh4sWWZgOelGH\nk2x1gGyw3Y3LDRohqzHi/srLgDSKsUoCeLNdGAfgzgO8u/gA2kxOLgorB48i8e8=\n=D8v1\n-----END PGP SIGNATURE-----\n", "payload": "tree add94b38b70c88464ff9e96ff6932596b599cdbb\nparent 333d8c456c507cdbf31f790d56524126ae112e0d\nparent 9845ee08867e3527b9e57c86b08d38d5a0db255a\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111162 +0200\ncommitter GitHub <noreply@github.com> 1533111162 +0200\n\nRollup merge of #52821 - fukatani:gdb-vecdeque-print, r=michaelwoerister\n\npretty print for std::collections::vecdeque\n\nI want pretty print function for VecDeque like Vec.\n\n```rust\nuse std::collections::VecDeque;\n\nfn main() {\n    let mut d: VecDeque<i32> = VecDeque::new();\n    d.push_back(4);\n    d.push_back(4);\n    d.push_back(6);\n    let mut v: Vec<i32> = Vec::new();\n    v.push(4);\n    v.push(4);\n    v.push(6);\n}\n```\n\n```\n(gdb) p v\n$1 = Vec<i32>(len: 3, cap: 4) = {4, 4, 6}\n(gdb) p d\n$2 = VecDeque<i32>(len: 3, cap: 8) = {4, 4, 6}\n```\n\nThanks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39406ee241714085bfcd2aa0bec2a6c75c28c01a", "html_url": "https://github.com/rust-lang/rust/commit/39406ee241714085bfcd2aa0bec2a6c75c28c01a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39406ee241714085bfcd2aa0bec2a6c75c28c01a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333d8c456c507cdbf31f790d56524126ae112e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/333d8c456c507cdbf31f790d56524126ae112e0d", "html_url": "https://github.com/rust-lang/rust/commit/333d8c456c507cdbf31f790d56524126ae112e0d"}, {"sha": "9845ee08867e3527b9e57c86b08d38d5a0db255a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9845ee08867e3527b9e57c86b08d38d5a0db255a", "html_url": "https://github.com/rust-lang/rust/commit/9845ee08867e3527b9e57c86b08d38d5a0db255a"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "87c7b21bb8a35f20110ba9bc44c653586fc1aba8", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/39406ee241714085bfcd2aa0bec2a6c75c28c01a/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/39406ee241714085bfcd2aa0bec2a6c75c28c01a/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=39406ee241714085bfcd2aa0bec2a6c75c28c01a", "patch": "@@ -47,6 +47,7 @@\n TYPE_KIND_FIXED_SIZE_VEC    = 16\n TYPE_KIND_REGULAR_UNION     = 17\n TYPE_KIND_OS_STRING         = 18\n+TYPE_KIND_STD_VECDEQUE      = 19\n \n ENCODED_ENUM_PREFIX = \"RUST$ENCODED$ENUM$\"\n ENUM_DISR_FIELD_NAME = \"RUST$ENUM$DISR\"\n@@ -62,6 +63,14 @@\n STD_VEC_FIELD_NAMES = [STD_VEC_FIELD_NAME_BUF,\n                        STD_VEC_FIELD_NAME_LENGTH]\n \n+# std::collections::VecDeque<> related constants\n+STD_VECDEQUE_FIELD_NAME_TAIL = \"tail\"\n+STD_VECDEQUE_FIELD_NAME_HEAD = \"head\"\n+STD_VECDEQUE_FIELD_NAME_BUF = \"buf\"\n+STD_VECDEQUE_FIELD_NAMES = [STD_VECDEQUE_FIELD_NAME_TAIL,\n+                            STD_VECDEQUE_FIELD_NAME_HEAD,\n+                            STD_VECDEQUE_FIELD_NAME_BUF]\n+\n # std::String related constants\n STD_STRING_FIELD_NAMES = [\"vec\"]\n \n@@ -161,6 +170,11 @@ def __classify_struct(self):\n             self.__conforms_to_field_layout(STD_VEC_FIELD_NAMES)):\n             return TYPE_KIND_STD_VEC\n \n+        # STD COLLECTION VECDEQUE\n+        if (unqualified_type_name.startswith(\"VecDeque<\") and\n+            self.__conforms_to_field_layout(STD_VECDEQUE_FIELD_NAMES)):\n+            return TYPE_KIND_STD_VECDEQUE\n+\n         # STD STRING\n         if (unqualified_type_name.startswith(\"String\") and\n             self.__conforms_to_field_layout(STD_STRING_FIELD_NAMES)):\n@@ -325,6 +339,25 @@ def extract_length_ptr_and_cap_from_std_vec(vec_val):\n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (length, data_ptr, capacity)\n \n+\n+def extract_tail_head_ptr_and_cap_from_std_vecdeque(vec_val):\n+    assert vec_val.type.get_type_kind() == TYPE_KIND_STD_VECDEQUE\n+    tail_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_TAIL)\n+    head_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_HEAD)\n+    buf_field_index = STD_VECDEQUE_FIELD_NAMES.index(STD_VECDEQUE_FIELD_NAME_BUF)\n+\n+    tail = vec_val.get_child_at_index(tail_field_index).as_integer()\n+    head = vec_val.get_child_at_index(head_field_index).as_integer()\n+    buf = vec_val.get_child_at_index(buf_field_index)\n+\n+    vec_ptr_val = buf.get_child_at_index(0)\n+    capacity = buf.get_child_at_index(1).as_integer()\n+    unique_ptr_val = vec_ptr_val.get_child_at_index(0)\n+    data_ptr = unique_ptr_val.get_child_at_index(0)\n+    assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n+    return (tail, head, data_ptr, capacity)\n+\n+\n def extract_length_and_ptr_from_slice(slice_val):\n     assert (slice_val.type.get_type_kind() == TYPE_KIND_SLICE or\n             slice_val.type.get_type_kind() == TYPE_KIND_STR_SLICE)"}, {"sha": "b7de42a93841757abc7e8e815d01c24632f9a334", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39406ee241714085bfcd2aa0bec2a6c75c28c01a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/39406ee241714085bfcd2aa0bec2a6c75c28c01a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=39406ee241714085bfcd2aa0bec2a6c75c28c01a", "patch": "@@ -124,6 +124,9 @@ def rust_pretty_printer_lookup_function(gdb_val):\n     if type_kind == rustpp.TYPE_KIND_STD_VEC:\n         return RustStdVecPrinter(val)\n \n+    if type_kind == rustpp.TYPE_KIND_STD_VECDEQUE:\n+        return RustStdVecDequePrinter(val)\n+\n     if type_kind == rustpp.TYPE_KIND_STD_STRING:\n         return RustStdStringPrinter(val)\n \n@@ -274,6 +277,28 @@ def children(self):\n             yield (str(index), (gdb_ptr + index).dereference())\n \n \n+class RustStdVecDequePrinter(object):\n+    def __init__(self, val):\n+        self.__val = val\n+\n+    @staticmethod\n+    def display_hint():\n+        return \"array\"\n+\n+    def to_string(self):\n+        (tail, head, data_ptr, cap) = \\\n+            rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n+        return (self.__val.type.get_unqualified_type_name() +\n+                (\"(len: %i, cap: %i)\" % (head - tail, cap)))\n+\n+    def children(self):\n+        (tail, head, data_ptr, cap) = \\\n+            rustpp.extract_tail_head_ptr_and_cap_from_std_vecdeque(self.__val)\n+        gdb_ptr = data_ptr.get_wrapped_value()\n+        for index in xrange(tail, head):\n+            yield (str(index), (gdb_ptr + index).dereference())\n+\n+\n class RustStdStringPrinter(object):\n     def __init__(self, val):\n         self.__val = val"}]}