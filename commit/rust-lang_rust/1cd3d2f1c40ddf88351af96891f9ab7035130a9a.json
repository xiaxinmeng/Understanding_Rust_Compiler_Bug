{"sha": "1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDNkMmYxYzQwZGRmODgzNTFhZjk2ODkxZjlhYjcwMzUxMzBhOWE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-27T23:59:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-27T23:59:18Z"}, "message": "Rollup merge of #41578 - arielb1:missing-adjustment, r=eddyb\n\ntypeck: resolve type vars before calling `try_index_step`\n\n`try_index_step` does not resolve type variables by itself and would\nfail otherwise. Also harden the failure path in `confirm` to cause less\nconfusing errors.\n\nr? @eddyb\n\nFixes #41498.\n\nbeta-nominating because regression (caused by #41279).", "tree": {"sha": "4c798951e22f95939947166532a8e03f35e93d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c798951e22f95939947166532a8e03f35e93d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "html_url": "https://github.com/rust-lang/rust/commit/1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe2c24be0ec916abeb4875e424d82531706e812", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe2c24be0ec916abeb4875e424d82531706e812", "html_url": "https://github.com/rust-lang/rust/commit/6fe2c24be0ec916abeb4875e424d82531706e812"}, {"sha": "a260df27e0be9a2dd154376ee65c4c5d107927c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a260df27e0be9a2dd154376ee65c4c5d107927c0", "html_url": "https://github.com/rust-lang/rust/commit/a260df27e0be9a2dd154376ee65c4c5d107927c0"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "9db6dffb0e8cc5964eaea14c66f09683feb6274e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "patch": "@@ -451,7 +451,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 // So peel off one-level, turning the &T into T.\n                 match base_ty.builtin_deref(false, ty::NoPreference) {\n                     Some(t) => t.ty,\n-                    None => { return Err(()); }\n+                    None => {\n+                        debug!(\"By-ref binding of non-derefable type {:?}\", base_ty);\n+                        return Err(());\n+                    }\n                 }\n             }\n             _ => base_ty,\n@@ -1039,6 +1042,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 match base_cmt.ty.builtin_index() {\n                     Some(ty) => (ty, ElementKind::VecElement),\n                     None => {\n+                        debug!(\"Explicit index of non-indexable type {:?}\", base_cmt);\n                         return Err(());\n                     }\n                 }\n@@ -1154,7 +1158,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             PatKind::TupleStruct(hir::QPath::Resolved(_, ref path), ..) |\n             PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => {\n                 match path.def {\n-                    Def::Err => return Err(()),\n+                    Def::Err => {\n+                        debug!(\"access to unresolvable pattern {:?}\", pat);\n+                        return Err(())\n+                    }\n                     Def::Variant(variant_did) |\n                     Def::VariantCtor(variant_did, ..) => {\n                         // univariant enums do not need downcasts"}, {"sha": "cc8012d965a76a347ac3dcdb9407976122a9063c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "patch": "@@ -375,6 +375,9 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+        if self.treat_err_as_bug {\n+            self.span_bug(sp, msg);\n+        }\n         let mut delayed = self.delayed_span_bug.borrow_mut();\n         *delayed = Some((sp.into(), msg.to_string()));\n     }"}, {"sha": "e81805b96609b2c2333f360e56c41bd4247707b2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "patch": "@@ -516,6 +516,8 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     };\n \n                     let index_expr_ty = self.node_ty(index_expr.id);\n+                    let adjusted_base_ty = self.resolve_type_vars_if_possible(&adjusted_base_ty);\n+                    let index_expr_ty = self.resolve_type_vars_if_possible(&index_expr_ty);\n \n                     let result = self.try_index_step(ty::MethodCall::expr(expr.id),\n                                                      expr,\n@@ -531,6 +533,15 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n                         let expr_ty = self.node_ty(expr.id);\n                         self.demand_suptype(expr.span, expr_ty, return_ty);\n+                    } else {\n+                        // We could not perform a mutable index. Re-apply the\n+                        // immutable index adjustments - borrowck will detect\n+                        // this as an error.\n+                        if let Some(adjustment) = adjustment {\n+                            self.apply_adjustment(expr.id, adjustment);\n+                        }\n+                        self.tcx.sess.delay_span_bug(\n+                            expr.span, \"convert_lvalue_derefs_to_mutable failed\");\n                     }\n                 }\n                 hir::ExprUnary(hir::UnDeref, ref base_expr) => {"}, {"sha": "66fd30bdbbbe49616150c2f76fe47d229c616205", "filename": "src/test/run-pass/issue-41498.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Ftest%2Frun-pass%2Fissue-41498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd3d2f1c40ddf88351af96891f9ab7035130a9a/src%2Ftest%2Frun-pass%2Fissue-41498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41498.rs?ref=1cd3d2f1c40ddf88351af96891f9ab7035130a9a", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// regression test for issue #41498.\n+\n+struct S;\n+impl S {\n+    fn mutate(&mut self) {}\n+}\n+\n+fn call_and_ref<T, F: FnOnce() -> T>(x: &mut Option<T>, f: F) -> &mut T {\n+    *x = Some(f());\n+    x.as_mut().unwrap()\n+}\n+\n+fn main() {\n+    let mut n = None;\n+    call_and_ref(&mut n, || [S])[0].mutate();\n+}"}]}