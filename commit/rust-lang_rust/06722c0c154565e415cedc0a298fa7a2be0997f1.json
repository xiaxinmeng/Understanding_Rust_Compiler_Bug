{"sha": "06722c0c154565e415cedc0a298fa7a2be0997f1", "node_id": "C_kwDOAAsO6NoAKDA2NzIyYzBjMTU0NTY1ZTQxNWNlZGMwYTI5OGZhN2EyYmUwOTk3ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T09:33:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-20T09:33:45Z"}, "message": "Auto merge of #7775 - F3real:no_effect, r=xFrednet\n\nDetect underscored variables with no side effects\n\nFixes #7545\n\nchangelog: Lint on underscored variables with no side effects in [`no_effect`]", "tree": {"sha": "9aa43376b8ea2588659191eb13a4f563db687116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa43376b8ea2588659191eb13a4f563db687116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06722c0c154565e415cedc0a298fa7a2be0997f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06722c0c154565e415cedc0a298fa7a2be0997f1", "html_url": "https://github.com/rust-lang/rust/commit/06722c0c154565e415cedc0a298fa7a2be0997f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06722c0c154565e415cedc0a298fa7a2be0997f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8c15552753d70b00d4c46555d41abc900bb31e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8c15552753d70b00d4c46555d41abc900bb31e", "html_url": "https://github.com/rust-lang/rust/commit/ee8c15552753d70b00d4c46555d41abc900bb31e"}, {"sha": "6b22bba902e873a9cceb3f5649d10a195699267d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b22bba902e873a9cceb3f5649d10a195699267d", "html_url": "https://github.com/rust-lang/rust/commit/6b22bba902e873a9cceb3f5649d10a195699267d"}], "stats": {"total": 256, "additions": 170, "deletions": 86}, "files": [{"sha": "7ffb2be4a7681949fb8e252a72f99844a1f21cc5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -2900,6 +2900,7 @@ Released 2018-09-13\n [`new_ret_no_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self\n [`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n+[`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty"}, {"sha": "83e51e7886af8a5bd110c927d03c5ec28cfca0d8", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -364,6 +364,7 @@ store.register_lints(&[\n     neg_multiply::NEG_MULTIPLY,\n     new_without_default::NEW_WITHOUT_DEFAULT,\n     no_effect::NO_EFFECT,\n+    no_effect::NO_EFFECT_UNDERSCORE_BINDING,\n     no_effect::UNNECESSARY_OPERATION,\n     non_copy_const::BORROW_INTERIOR_MUTABLE_CONST,\n     non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST,"}, {"sha": "268349d28481182fdbac33fe20ba0d0312430fbf", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -72,6 +72,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(needless_continue::NEEDLESS_CONTINUE),\n     LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n     LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+    LintId::of(no_effect::NO_EFFECT_UNDERSCORE_BINDING),\n     LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n     LintId::of(non_expressive_names::SIMILAR_NAMES),\n     LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),"}, {"sha": "6dae8f320436fc49609aa428cc808a218f84edd7", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 115, "deletions": 64, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::{span_lint_hir, span_lint_hir_and_then};\n+use clippy_utils::is_lint_allowed;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{is_range_literal, BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n+use rustc_hir::{is_range_literal, BinOpKind, BlockCheckMode, Expr, ExprKind, PatKind, Stmt, StmtKind, UnsafeSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::ops::Deref;\n@@ -13,7 +14,7 @@ declare_clippy_lint! {\n     /// Checks for statements which have no effect.\n     ///\n     /// ### Why is this bad?\n-    /// Similar to dead code, these statements are actually\n+    /// Unlike dead code, these statements are actually\n     /// executed. However, as they have no effect, all they do is make the code less\n     /// readable.\n     ///\n@@ -26,6 +27,28 @@ declare_clippy_lint! {\n     \"statements with no effect\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for binding to underscore prefixed variable without side-effects.\n+    ///\n+    /// ### Why is this bad?\n+    /// Unlike dead code, these bindings are actually\n+    /// executed. However, as they have no effect and shouldn't be used further on, all they\n+    /// do is make the code less readable.\n+    ///\n+    /// ### Known problems\n+    /// Further usage of this variable is not checked, which can lead to false positives if it is\n+    /// used later in the code.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let _i_serve_no_purpose = 1;\n+    /// ```\n+    pub NO_EFFECT_UNDERSCORE_BINDING,\n+    pedantic,\n+    \"binding to `_` prefixed variable with no side-effect\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for expression statements that can be reduced to a\n@@ -44,6 +67,46 @@ declare_clippy_lint! {\n     \"outer expressions with no effect\"\n }\n \n+declare_lint_pass!(NoEffect => [NO_EFFECT, UNNECESSARY_OPERATION, NO_EFFECT_UNDERSCORE_BINDING]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NoEffect {\n+    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n+        if check_no_effect(cx, stmt) {\n+            return;\n+        }\n+        check_unnecessary_operation(cx, stmt);\n+    }\n+}\n+\n+fn check_no_effect(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> bool {\n+    if let StmtKind::Semi(expr) = stmt.kind {\n+        if has_no_effect(cx, expr) {\n+            span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n+            return true;\n+        }\n+    } else if let StmtKind::Local(local) = stmt.kind {\n+        if_chain! {\n+            if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n+            if let Some(init) = local.init;\n+            if !local.pat.span.from_expansion();\n+            if has_no_effect(cx, init);\n+            if let PatKind::Binding(_, _, ident, _) = local.pat.kind;\n+            if ident.name.to_ident_string().starts_with('_');\n+            then {\n+                span_lint_hir(\n+                    cx,\n+                    NO_EFFECT_UNDERSCORE_BINDING,\n+                    init.hir_id,\n+                    stmt.span,\n+                    \"binding to `_` prefixed variable with no side-effect\"\n+                );\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if expr.span.from_expansion() {\n         return false;\n@@ -88,71 +151,59 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     }\n }\n \n-declare_lint_pass!(NoEffect => [NO_EFFECT, UNNECESSARY_OPERATION]);\n-\n-impl<'tcx> LateLintPass<'tcx> for NoEffect {\n-    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Semi(expr) = stmt.kind {\n-            if has_no_effect(cx, expr) {\n-                span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n-            } else if let Some(reduced) = reduce_expression(cx, expr) {\n-                for e in &reduced {\n-                    if e.span.from_expansion() {\n-                        return;\n-                    }\n-                }\n-                if let ExprKind::Index(..) = &expr.kind {\n-                    let snippet;\n-                    if_chain! {\n-                        if let Some(arr) = snippet_opt(cx, reduced[0].span);\n-                        if let Some(func) = snippet_opt(cx, reduced[1].span);\n-                        then {\n-                            snippet = format!(\"assert!({}.len() > {});\", &arr, &func);\n-                        } else {\n-                            return;\n-                        }\n-                    }\n-                    span_lint_hir_and_then(\n-                        cx,\n-                        UNNECESSARY_OPERATION,\n-                        expr.hir_id,\n-                        stmt.span,\n-                        \"unnecessary operation\",\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                stmt.span,\n-                                \"statement can be written as\",\n-                                snippet,\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        },\n-                    );\n+fn check_unnecessary_operation(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n+    if_chain! {\n+        if let StmtKind::Semi(expr) = stmt.kind;\n+        if let Some(reduced) = reduce_expression(cx, expr);\n+        if !&reduced.iter().any(|e| e.span.from_expansion());\n+        then {\n+            if let ExprKind::Index(..) = &expr.kind {\n+                let snippet;\n+                if let (Some(arr), Some(func)) = (snippet_opt(cx, reduced[0].span), snippet_opt(cx, reduced[1].span)) {\n+                    snippet = format!(\"assert!({}.len() > {});\", &arr, &func);\n                 } else {\n-                    let mut snippet = String::new();\n-                    for e in reduced {\n-                        if let Some(snip) = snippet_opt(cx, e.span) {\n-                            snippet.push_str(&snip);\n-                            snippet.push(';');\n-                        } else {\n-                            return;\n-                        }\n+                    return;\n+                }\n+                span_lint_hir_and_then(\n+                    cx,\n+                    UNNECESSARY_OPERATION,\n+                    expr.hir_id,\n+                    stmt.span,\n+                    \"unnecessary operation\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            stmt.span,\n+                            \"statement can be written as\",\n+                            snippet,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    },\n+                );\n+            } else {\n+                let mut snippet = String::new();\n+                for e in reduced {\n+                    if let Some(snip) = snippet_opt(cx, e.span) {\n+                        snippet.push_str(&snip);\n+                        snippet.push(';');\n+                    } else {\n+                        return;\n                     }\n-                    span_lint_hir_and_then(\n-                        cx,\n-                        UNNECESSARY_OPERATION,\n-                        expr.hir_id,\n-                        stmt.span,\n-                        \"unnecessary operation\",\n-                        |diag| {\n-                            diag.span_suggestion(\n-                                stmt.span,\n-                                \"statement can be reduced to\",\n-                                snippet,\n-                                Applicability::MachineApplicable,\n-                            );\n-                        },\n-                    );\n                 }\n+                span_lint_hir_and_then(\n+                    cx,\n+                    UNNECESSARY_OPERATION,\n+                    expr.hir_id,\n+                    stmt.span,\n+                    \"unnecessary operation\",\n+                    |diag| {\n+                        diag.span_suggestion(\n+                            stmt.span,\n+                            \"statement can be reduced to\",\n+                            snippet,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    },\n+                );\n             }\n         }\n     }"}, {"sha": "061a4ab9b2ef8da2809901e986d07b3b45ab64ca", "filename": "tests/ui/cfg_attr_rustfmt.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.fixed?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![feature(stmt_expr_attributes)]\n \n-#![allow(unused, clippy::no_effect)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n \n // This doesn't get linted, see known problems"}, {"sha": "035169fab85befb570e7d06ebcc5ff518652109b", "filename": "tests/ui/cfg_attr_rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fcfg_attr_rustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fcfg_attr_rustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n #![feature(stmt_expr_attributes)]\n \n-#![allow(unused, clippy::no_effect)]\n+#![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]\n #![warn(clippy::deprecated_cfg_attr)]\n \n // This doesn't get linted, see known problems"}, {"sha": "7bcc4cad0d363a78153e36456b0e128eaeef8e45", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,5 +1,5 @@\n #![feature(box_syntax)]\n-#![warn(clippy::no_effect)]\n+#![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code)]\n #![allow(path_statements)]\n #![allow(clippy::deref_addrof)]\n@@ -90,13 +90,19 @@ fn main() {\n     || x += 5;\n     let s: String = \"foo\".into();\n     FooString { s: s };\n+    let _unused = 1;\n+    let _penguin = || println!(\"Some helpful closure\");\n+    let _duck = Struct { field: 0 };\n+    let _cat = [2, 4, 6, 8][2];\n \n     #[allow(clippy::no_effect)]\n     0;\n \n     // Do not warn\n     get_number();\n     unsafe { unsafe_fn() };\n+    let _used = get_struct();\n+    let _x = vec![1];\n     DropUnit;\n     DropStruct { field: 0 };\n     DropTuple(0);"}, {"sha": "a5dbc9fef455a4e71028acbfcfa78c4577dda5e5", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -156,5 +156,31 @@ error: statement with no effect\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 26 previous errors\n+error: binding to `_` prefixed variable with no side-effect\n+  --> $DIR/no_effect.rs:93:5\n+   |\n+LL |     let _unused = 1;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n+\n+error: binding to `_` prefixed variable with no side-effect\n+  --> $DIR/no_effect.rs:94:5\n+   |\n+LL |     let _penguin = || println!(\"Some helpful closure\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: binding to `_` prefixed variable with no side-effect\n+  --> $DIR/no_effect.rs:95:5\n+   |\n+LL |     let _duck = Struct { field: 0 };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: binding to `_` prefixed variable with no side-effect\n+  --> $DIR/no_effect.rs:96:5\n+   |\n+LL |     let _cat = [2, 4, 6, 8][2];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 30 previous errors\n "}, {"sha": "4077f1920a3837758a6f02f6f5b5ea8c6a2b078e", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,8 +1,7 @@\n // edition:2018\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n-#![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n+#![allow(clippy::redundant_closure, clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))"}, {"sha": "2f414e129d5a77c9952b88bd8e9efa5d0acc4249", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,8 +1,7 @@\n // edition:2018\n // run-rustfix\n #![warn(clippy::option_if_let_else)]\n-#![allow(clippy::redundant_closure)]\n-#![allow(clippy::ref_option_ref, clippy::equatable_if_let)]\n+#![allow(clippy::redundant_closure, clippy::ref_option_ref, clippy::equatable_if_let)]\n \n fn bad1(string: Option<&str>) -> (bool, &str) {\n     if let Some(x) = string {"}, {"sha": "803d941c36df8b2d8aa80ca7fa381ee8c35c780a", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06722c0c154565e415cedc0a298fa7a2be0997f1/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=06722c0c154565e415cedc0a298fa7a2be0997f1", "patch": "@@ -1,5 +1,5 @@\n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:8:5\n+  --> $DIR/option_if_let_else.rs:7:5\n    |\n LL | /     if let Some(x) = string {\n LL | |         (true, x)\n@@ -11,19 +11,19 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:26:13\n+  --> $DIR/option_if_let_else.rs:25:13\n    |\n LL |     let _ = if let Some(s) = *string { s.len() } else { 0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `string.map_or(0, |s| s.len())`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:27:13\n+  --> $DIR/option_if_let_else.rs:26:13\n    |\n LL |     let _ = if let Some(s) = &num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:28:13\n+  --> $DIR/option_if_let_else.rs:27:13\n    |\n LL |       let _ = if let Some(s) = &mut num {\n    |  _____________^\n@@ -43,13 +43,13 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:34:13\n+  --> $DIR/option_if_let_else.rs:33:13\n    |\n LL |     let _ = if let Some(ref s) = num { s } else { &0 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `num.as_ref().map_or(&0, |s| s)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:35:13\n+  --> $DIR/option_if_let_else.rs:34:13\n    |\n LL |       let _ = if let Some(mut s) = num {\n    |  _____________^\n@@ -69,7 +69,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:41:13\n+  --> $DIR/option_if_let_else.rs:40:13\n    |\n LL |       let _ = if let Some(ref mut s) = num {\n    |  _____________^\n@@ -89,7 +89,7 @@ LL ~     });\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:50:5\n+  --> $DIR/option_if_let_else.rs:49:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -108,7 +108,7 @@ LL +     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:63:13\n+  --> $DIR/option_if_let_else.rs:62:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -120,7 +120,7 @@ LL | |     };\n    | |_____^ help: try: `arg.map_or_else(|| side_effect(), |x| x)`\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:72:13\n+  --> $DIR/option_if_let_else.rs:71:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -143,13 +143,13 @@ LL ~     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:101:13\n+  --> $DIR/option_if_let_else.rs:100:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:110:13\n+  --> $DIR/option_if_let_else.rs:109:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^\n@@ -171,13 +171,13 @@ LL ~         });\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:138:13\n+  --> $DIR/option_if_let_else.rs:137:13\n    |\n LL |     let _ = if let Some(x) = Some(0) { s.len() + x } else { s.len() };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Some(0).map_or_else(|| s.len(), |x| s.len() + x)`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:142:13\n+  --> $DIR/option_if_let_else.rs:141:13\n    |\n LL |       let _ = if let Some(x) = Some(0) {\n    |  _____________^"}]}