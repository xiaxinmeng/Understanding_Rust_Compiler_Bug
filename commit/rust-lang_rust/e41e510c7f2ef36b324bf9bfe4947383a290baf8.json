{"sha": "e41e510c7f2ef36b324bf9bfe4947383a290baf8", "node_id": "C_kwDOAAsO6NoAKGU0MWU1MTBjN2YyZWYzNmIzMjRiZjliZmU0OTQ3MzgzYTI5MGJhZjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-21T18:48:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-21T18:48:31Z"}, "message": "Rollup merge of #95085 - ouz-a:master5, r=jackh726\n\nReturn err instead of ICE\n\nHaving `escaping_bound_vars` results in ICE when trying to create `ty::Binder::dummy`, to avoid it we return err like the line above. I think this requires a more sophisticated fix, I would love to investigate if mentorship is available \ud83e\udd13\n\nFixes #95023 and #85350", "tree": {"sha": "9c12ed5f06471c36842ffe8af30b3e69bd20084d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c12ed5f06471c36842ffe8af30b3e69bd20084d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41e510c7f2ef36b324bf9bfe4947383a290baf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOMh/CRBK7hj4Ov3rIwAA4Y8IAGMxxgCu5T5iaRbf7syd02hi\nCPHPAiIoruaXdO0cI8fGvnWF8n4+OKVN/3Y0tsZuX4Ap7+Y4HN75mJ2miWmeusfS\niKp8SPbbh9fcHFy5HLxA7+UUJ3wmgLzZ9PCZMho/Qu2PPntVX6sglG1QETe1FIk0\npSmwyExB/GnRssOsKvgxfPlS5/J1SyeDx5VS9ZMBE7k/Dhvlka9U/n0x0XhkU1gZ\ncbbYrRsPH7ZaO7VHSWs2L4danLaEmH/B+BOqtrTfsa0d5KtxiS7oz3r+kI3AtHJz\n2dBVZd+FP/3A07T9Vw5yyRCtPvWzqgEtBJjW8WLkfsKAuVrKF5CwGQi34Iv1dks=\n=JC+y\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c12ed5f06471c36842ffe8af30b3e69bd20084d\nparent e3557e244e08223c4821ac465db4c0e4fe6698e7\nparent be566f11857f7f1f33854e01911fc46e861a2b25\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647888511 +0100\ncommitter GitHub <noreply@github.com> 1647888511 +0100\n\nRollup merge of #95085 - ouz-a:master5, r=jackh726\n\nReturn err instead of ICE\n\nHaving `escaping_bound_vars` results in ICE when trying to create `ty::Binder::dummy`, to avoid it we return err like the line above. I think this requires a more sophisticated fix, I would love to investigate if mentorship is available \ud83e\udd13\n\nFixes #95023 and #85350\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41e510c7f2ef36b324bf9bfe4947383a290baf8", "html_url": "https://github.com/rust-lang/rust/commit/e41e510c7f2ef36b324bf9bfe4947383a290baf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41e510c7f2ef36b324bf9bfe4947383a290baf8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3557e244e08223c4821ac465db4c0e4fe6698e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3557e244e08223c4821ac465db4c0e4fe6698e7", "html_url": "https://github.com/rust-lang/rust/commit/e3557e244e08223c4821ac465db4c0e4fe6698e7"}, {"sha": "be566f11857f7f1f33854e01911fc46e861a2b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/be566f11857f7f1f33854e01911fc46e861a2b25", "html_url": "https://github.com/rust-lang/rust/commit/be566f11857f7f1f33854e01911fc46e861a2b25"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "bcae735bb7e5aa7c133b9cbae3c0668fbb241db9", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e41e510c7f2ef36b324bf9bfe4947383a290baf8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41e510c7f2ef36b324bf9bfe4947383a290baf8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e41e510c7f2ef36b324bf9bfe4947383a290baf8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! Name resolution for lifetimes.\n //!\n //! Name resolution for lifetimes follows *much* simpler rules than the\n@@ -230,6 +231,10 @@ enum Scope<'a> {\n         hir_id: hir::HirId,\n \n         s: ScopeRef<'a>,\n+\n+        /// In some cases not allowing late bounds allows us to avoid ICEs.\n+        /// This is almost ways set to true.\n+        allow_late_bound: bool,\n     },\n \n     /// Lifetimes introduced by a fn are scoped to the call-site for that fn,\n@@ -302,6 +307,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 scope_type,\n                 hir_id,\n                 s: _,\n+                allow_late_bound,\n             } => f\n                 .debug_struct(\"Binder\")\n                 .field(\"lifetimes\", lifetimes)\n@@ -311,6 +317,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"scope_type\", scope_type)\n                 .field(\"hir_id\", hir_id)\n                 .field(\"s\", &\"..\")\n+                .field(\"allow_late_bound\", allow_late_bound)\n                 .finish(),\n             Scope::Body { id, s: _ } => {\n                 f.debug_struct(\"Body\").field(\"id\", id).field(\"s\", &\"..\").finish()\n@@ -703,6 +710,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, move |_old_scope, this| {\n                     intravisit::walk_fn(this, fk, fd, b, s, hir_id)\n@@ -828,6 +836,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses,\n                     scope_type: BinderScopeType::Normal,\n                     s: ROOT_SCOPE,\n+                    allow_late_bound: false,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -896,6 +905,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     // a bare fn has no bounds, so everything\n@@ -1077,6 +1087,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n+                            allow_late_bound: false,\n                         };\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n@@ -1097,6 +1108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         track_lifetime_uses: true,\n                         opaque_type_parent: false,\n                         scope_type: BinderScopeType::Normal,\n+                        allow_late_bound: false,\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1156,6 +1168,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: false,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1225,6 +1238,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1378,6 +1392,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n+                            allow_late_bound: true,\n                         };\n                         this.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n@@ -1425,6 +1440,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |_, this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1477,6 +1493,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             track_lifetime_uses: true,\n             opaque_type_parent: false,\n             scope_type,\n+            allow_late_bound: true,\n         };\n         self.with(scope, |old_scope, this| {\n             this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n@@ -2180,6 +2197,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             opaque_type_parent: true,\n             track_lifetime_uses: false,\n             scope_type: BinderScopeType::Normal,\n+            allow_late_bound: true,\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -2602,7 +2620,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut scope = &*self.scope;\n         let hir_id = loop {\n             match scope {\n-                Scope::Binder { hir_id, .. } => {\n+                Scope::Binder { hir_id, allow_late_bound: true, .. } => {\n                     break *hir_id;\n                 }\n                 Scope::ObjectLifetimeDefault { ref s, .. }\n@@ -2611,8 +2629,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 | Scope::TraitRefBoundary { ref s, .. } => {\n                     scope = *s;\n                 }\n-                Scope::Root | Scope::Body { .. } => {\n+                Scope::Root\n+                | Scope::Body { .. }\n+                | Scope::Binder { allow_late_bound: false, .. } => {\n                     // See issues #83907 and #83693. Just bail out from looking inside.\n+                    // See the issue #95023 for not allowing late bound\n                     self.tcx.sess.delay_span_bug(\n                         rustc_span::DUMMY_SP,\n                         \"In fn_like_elision without appropriate scope above\","}, {"sha": "3fba8c00c572f8d35434eb914aea58d6ec5b5dcc", "filename": "src/test/ui/lifetimes/issue-95023.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs?ref=e41e510c7f2ef36b324bf9bfe4947383a290baf8", "patch": "@@ -0,0 +1,11 @@\n+struct ErrorKind;\n+struct Error(ErrorKind);\n+impl Fn(&isize) for Error {\n+    //~^ ERROR manual implementations of `Fn` are experimental [E0183]\n+    //~^^ ERROR associated type bindings are not allowed here [E0229]\n+    fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+    //~^ ERROR associated function in `impl` without body\n+    //~^^ ERROR method `foo` is not a member of trait `Fn` [E0407]\n+    //~^^^ ERROR associated type `B` not found for `Self` [E0220]\n+}\n+fn main() {}"}, {"sha": "35c3797c77a85988977c742dc122e9e722ba6c3f", "filename": "src/test/ui/lifetimes/issue-95023.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr?ref=e41e510c7f2ef36b324bf9bfe4947383a290baf8", "patch": "@@ -0,0 +1,38 @@\n+error: associated function in `impl` without body\n+  --> $DIR/issue-95023.rs:6:5\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                  |\n+   |                                                  help: provide a definition for the function: `{ <body> }`\n+\n+error[E0407]: method `foo` is not a member of trait `Fn`\n+  --> $DIR/issue-95023.rs:6:5\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `Fn`\n+\n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/issue-95023.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-95023.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ associated type not allowed here\n+\n+error[E0220]: associated type `B` not found for `Self`\n+  --> $DIR/issue-95023.rs:6:44\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |                                            ^ associated type `B` not found\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0183, E0220, E0229, E0407.\n+For more information about an error, try `rustc --explain E0183`."}, {"sha": "0e5e0c2616e5c3cdae6eddbad07fec1c49b2e72b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41e510c7f2ef36b324bf9bfe4947383a290baf8/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=e41e510c7f2ef36b324bf9bfe4947383a290baf8", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 984;\n+const ROOT_ENTRY_LIMIT: usize = 985;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}