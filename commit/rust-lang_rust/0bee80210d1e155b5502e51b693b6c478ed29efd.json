{"sha": "0bee80210d1e155b5502e51b693b6c478ed29efd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZWU4MDIxMGQxZTE1NWI1NTAyZTUxYjY5M2I2YzQ3OGVkMjllZmQ=", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2020-10-12T17:50:12Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-01-06T14:13:38Z"}, "message": "Rustdoc: Fix macros 2.0 and built-in derives being shown at the wrong path.\n\nFixes #74355\n\nThe issue with the built-in derives may be related to:\nhttps://github.com/rust-lang/rust/issues/55482#issuecomment-434035721", "tree": {"sha": "0fd4aba99622724360d13f4c74cf93455cafcfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd4aba99622724360d13f4c74cf93455cafcfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bee80210d1e155b5502e51b693b6c478ed29efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bee80210d1e155b5502e51b693b6c478ed29efd", "html_url": "https://github.com/rust-lang/rust/commit/0bee80210d1e155b5502e51b693b6c478ed29efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bee80210d1e155b5502e51b693b6c478ed29efd/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "html_url": "https://github.com/rust-lang/rust/commit/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "8508af080bebf0dbd855d97e9ef306a5b54d80c8", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0bee80210d1e155b5502e51b693b6c478ed29efd/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee80210d1e155b5502e51b693b6c478ed29efd/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0bee80210d1e155b5502e51b693b6c478ed29efd", "patch": "@@ -61,20 +61,66 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n-        let mut module = self.visit_mod_contents(\n+        let mut top_level_module = self.visit_mod_contents(\n             krate.item.span,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n             None,\n         );\n-        // Attach the crate's exported macros to the top-level module:\n-        module.macros.extend(krate.exported_macros.iter().map(|def| (def, None)));\n-        module.is_crate = true;\n+        top_level_module.is_crate = true;\n+        // Attach the crate's exported macros to the top-level module.\n+        // In the case of macros 2.0 (`pub macro`), and for built-in `derive`s as well\n+        // (_e.g._, `Copy`), these are wrongly bundled in there too, so we need to fix that by\n+        // moving them back to their correct locations.\n+        krate.exported_macros.iter().for_each(|def| {\n+            macro_rules! try_some {($($body:tt)*) => ({\n+                fn fn_once<R, F: FnOnce() -> R> (f: F) -> F { f }\n+                fn_once(|| Some({ $($body)* }))()\n+            })}\n+            // In the case of dummy items, some of the following operations may fail. We propagate\n+            // that within a `?`-capturing block, so as to fallback to the basic behavior.\n+            let containing_module_of_def = try_some! {\n+                // The `def` of a macro in `exported_macros` should correspond to either:\n+                //  - a `#[macro-export] macro_rules!` macro,\n+                //  - a built-in `derive` macro such as the ones in `::core`,\n+                //  - a `pub macro`.\n+                // Only the last two need to be fixed, thus:\n+                if def.ast.macro_rules {\n+                    return None;\n+                }\n+                let macro_parent_module = self.cx.tcx.def_path({\n+                    use rustc_middle::ty::DefIdTree;\n+                    self.cx\n+                        .tcx\n+                        /* Because of #77828 we cannot do the simpler:\n+                        .parent_module(def.hir_id).to_def_id()\n+                        // and instead have to do: */\n+                        .parent(self.cx.tcx.hir().local_def_id(def.hir_id).to_def_id())?\n+                });\n+                let mut cur_mod = &mut top_level_module;\n+                for path_segment in macro_parent_module.data {\n+                    let path_segment = path_segment.to_string();\n+                    cur_mod = cur_mod.mods.iter_mut().find(|module| {\n+                        matches!(\n+                            module.name, Some(symbol)\n+                            if symbol.with(|mod_name| mod_name == path_segment)\n+                        )\n+                    })?;\n+                }\n+                cur_mod\n+            };\n+            if let Some(module) = containing_module_of_def {\n+                &mut module.macros\n+            } else {\n+                &mut top_level_module.macros\n+            }\n+            .push(self.visit_local_macro(def, None));\n+        });\n \n         self.cx.renderinfo.get_mut().exact_paths = self.exact_paths;\n \n-        module\n+        top_level_module\n     }\n \n     fn visit_mod_contents("}, {"sha": "2dfc6b41706686bf924496bbaa4c1f956019b800", "filename": "src/test/rustdoc/macro_pub_in_module.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0bee80210d1e155b5502e51b693b6c478ed29efd/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bee80210d1e155b5502e51b693b6c478ed29efd/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmacro_pub_in_module.rs?ref=0bee80210d1e155b5502e51b693b6c478ed29efd", "patch": "@@ -0,0 +1,9 @@\n+//! See issue #74355\n+#![crate_name = \"krate\"]\n+#![feature(decl_macro)]\n+\n+// @has krate/some_module/macro.my_macro.html\n+pub mod some_module {\n+    //\n+    pub macro my_macro() {}\n+}"}]}