{"sha": "7c5bcd548be2d2020c1476346304a1cc64078e2f", "node_id": "C_kwDOAAsO6NoAKDdjNWJjZDU0OGJlMmQyMDIwYzE0NzYzNDYzMDRhMWNjNjQwNzhlMmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-27T10:46:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-27T10:46:44Z"}, "message": "Rollup merge of #91208 - estebank:eq-constraint, r=cjgillot\n\nAccount for incorrect `where T::Assoc = Ty` bound\n\nProvide suggestoin to constrain trait bound for associated type.\nRevert incorrect changes to `missing-bounds` test.\n\nAddress part of #20041.", "tree": {"sha": "584a77060ba36a80307abd6c30cf505a118ca3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/584a77060ba36a80307abd6c30cf505a118ca3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c5bcd548be2d2020c1476346304a1cc64078e2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhogyUCRBK7hj4Ov3rIwAAgGMIABhUGfnUXdJKsANCe7mvwbt1\nt4TdsjtMLikG7O2jswZ52ON0hLcUg4txGA7uQb74YRu/ue2DuKEqNeho/KyoGnDd\nOoacXZR/uBqog+B2bDMRyMaIGqiEx1Eay/3fl1Oy3QxoZhCkOWOLEb2I5YqNb+Sj\nxd//nmZIZyOndy9sjoEwGYPD/31tKDDaCLCAQE9QEtrfxsahjTlJQsuhsm2MnVNr\nCJoLTKe8QyhZQlAuPve/3yFKbkXuUpNxsUIYuX0IgD7+suQacZRjkUTe+aEcZEae\nvHfRFRzv8KQXAzykBNn7lGExULPFPUBbuk+Cp86jNaf9rzC9l5qzDZ/Uc3jt6OA=\n=0SoY\n-----END PGP SIGNATURE-----\n", "payload": "tree 584a77060ba36a80307abd6c30cf505a118ca3d9\nparent 55f8b5f559ffa61434d844de94963af3c2258276\nparent 4954389a9dccf2e915a639155b7039f1454acc9c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638010004 +0100\ncommitter GitHub <noreply@github.com> 1638010004 +0100\n\nRollup merge of #91208 - estebank:eq-constraint, r=cjgillot\n\nAccount for incorrect `where T::Assoc = Ty` bound\n\nProvide suggestoin to constrain trait bound for associated type.\nRevert incorrect changes to `missing-bounds` test.\n\nAddress part of #20041.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5bcd548be2d2020c1476346304a1cc64078e2f", "html_url": "https://github.com/rust-lang/rust/commit/7c5bcd548be2d2020c1476346304a1cc64078e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c5bcd548be2d2020c1476346304a1cc64078e2f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f8b5f559ffa61434d844de94963af3c2258276", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f8b5f559ffa61434d844de94963af3c2258276", "html_url": "https://github.com/rust-lang/rust/commit/55f8b5f559ffa61434d844de94963af3c2258276"}, {"sha": "4954389a9dccf2e915a639155b7039f1454acc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4954389a9dccf2e915a639155b7039f1454acc9c", "html_url": "https://github.com/rust-lang/rust/commit/4954389a9dccf2e915a639155b7039f1454acc9c"}], "stats": {"total": 148, "additions": 142, "deletions": 6}, "files": [{"sha": "efc30121987e289389fb54525bf191035a814efb", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -23,7 +23,7 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use std::mem;\n-use std::ops::DerefMut;\n+use std::ops::{Deref, DerefMut};\n \n const MORE_EXTERN: &str =\n     \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";\n@@ -1714,6 +1714,53 @@ fn deny_equality_constraints(\n             }\n         }\n     }\n+    // Given `A: Foo, A::Bar = RhsTy`, suggest `A: Foo<Bar = RhsTy>`.\n+    if let TyKind::Path(None, full_path) = &predicate.lhs_ty.kind {\n+        if let [potential_param, potential_assoc] = &full_path.segments[..] {\n+            for param in &generics.params {\n+                if param.ident == potential_param.ident {\n+                    for bound in &param.bounds {\n+                        if let ast::GenericBound::Trait(trait_ref, TraitBoundModifier::None) = bound\n+                        {\n+                            if let [trait_segment] = &trait_ref.trait_ref.path.segments[..] {\n+                                let assoc = pprust::path_to_string(&ast::Path::from_ident(\n+                                    potential_assoc.ident,\n+                                ));\n+                                let ty = pprust::ty_to_string(&predicate.rhs_ty);\n+                                let (args, span) = match &trait_segment.args {\n+                                    Some(args) => match args.deref() {\n+                                        ast::GenericArgs::AngleBracketed(args) => {\n+                                            let Some(arg) = args.args.last() else {\n+                                                continue;\n+                                            };\n+                                            (\n+                                                format!(\", {} = {}\", assoc, ty),\n+                                                arg.span().shrink_to_hi(),\n+                                            )\n+                                        }\n+                                        _ => continue,\n+                                    },\n+                                    None => (\n+                                        format!(\"<{} = {}>\", assoc, ty),\n+                                        trait_segment.span().shrink_to_hi(),\n+                                    ),\n+                                };\n+                                err.multipart_suggestion(\n+                                    &format!(\n+                                        \"if `{}::{}` is an associated type you're trying to set, \\\n+                                        use the associated type binding syntax\",\n+                                        trait_segment.ident, potential_assoc.ident,\n+                                    ),\n+                                    vec![(span, args), (predicate.span, String::new())],\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n     err.note(\n         \"see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\",\n     );"}, {"sha": "adc4d117b805f587e349d4f8294fefe0731d4a00", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -6,6 +6,7 @@\n \n #![feature(iter_is_partitioned)]\n #![feature(box_patterns)]\n+#![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n pub mod ast_validation;"}, {"sha": "fcc2da8014f878bd64d2f06c9e4b6341cb571aee", "filename": "src/test/ui/generic-associated-types/equality-bound.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.rs?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -0,0 +1,15 @@\n+fn sum<I: Iterator<Item = ()>>(i: I) -> i32 where I::Item = i32 {\n+//~^ ERROR equality constraints are not yet supported in `where` clauses\n+    panic!()\n+}\n+fn sum2<I: Iterator>(i: I) -> i32 where I::Item = i32 {\n+//~^ ERROR equality constraints are not yet supported in `where` clauses\n+    panic!()\n+}\n+fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n+//~^ ERROR equality constraints are not yet supported in `where` clauses\n+//~| ERROR failed to resolve: use of undeclared type `I`\n+    panic!()\n+}\n+\n+fn main() {}"}, {"sha": "27432641958bdaa52cb39f6b9ab7a97902c8a7c8", "filename": "src/test/ui/generic-associated-types/equality-bound.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -0,0 +1,43 @@\n+error: equality constraints are not yet supported in `where` clauses\n+  --> $DIR/equality-bound.rs:1:51\n+   |\n+LL | fn sum<I: Iterator<Item = ()>>(i: I) -> i32 where I::Item = i32 {\n+   |                                                   ^^^^^^^^^^^^^ not supported\n+   |\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n+help: if `Iterator::Item` is an associated type you're trying to set, use the associated type binding syntax\n+   |\n+LL - fn sum<I: Iterator<Item = ()>>(i: I) -> i32 where I::Item = i32 {\n+LL + fn sum<I: Iterator<Item = (), Item = i32>>(i: I) -> i32 where  {\n+   | \n+\n+error: equality constraints are not yet supported in `where` clauses\n+  --> $DIR/equality-bound.rs:5:41\n+   |\n+LL | fn sum2<I: Iterator>(i: I) -> i32 where I::Item = i32 {\n+   |                                         ^^^^^^^^^^^^^ not supported\n+   |\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n+help: if `Iterator::Item` is an associated type you're trying to set, use the associated type binding syntax\n+   |\n+LL - fn sum2<I: Iterator>(i: I) -> i32 where I::Item = i32 {\n+LL + fn sum2<I: Iterator<Item = i32>>(i: I) -> i32 where  {\n+   | \n+\n+error: equality constraints are not yet supported in `where` clauses\n+  --> $DIR/equality-bound.rs:9:41\n+   |\n+LL | fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n+   |                                         ^^^^^^^^^^^^^ not supported\n+   |\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n+\n+error[E0433]: failed to resolve: use of undeclared type `I`\n+  --> $DIR/equality-bound.rs:9:41\n+   |\n+LL | fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n+   |                                         ^ use of undeclared type `I`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "0e234120a51c5840a5a903c84772647bca701425", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -34,11 +34,12 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where B: Add<Output = B> {\n+impl<B: Add> Add for E<B> where B: Add<Output = B>, B: Add<Output = B> {\n+    //~^ ERROR equality constraints are not yet supported in `where` clauses\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0)\n+        Self(self.0 + rhs.0) //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "ffafff5e9f586d2543061aaaa616eec501040f8a", "filename": "src/test/ui/generic-associated-types/missing-bounds.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -34,11 +34,12 @@ impl<B> Add for D<B> {\n \n struct E<B>(B);\n \n-impl<B: Add> Add for E<B> where B: Add<Output = B> {\n+impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+    //~^ ERROR equality constraints are not yet supported in `where` clauses\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n-        Self(self.0 + rhs.0)\n+        Self(self.0 + rhs.0) //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "c9603b8d1ea4a3bcebe045f1630099e1a08f51eb", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c5bcd548be2d2020c1476346304a1cc64078e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=7c5bcd548be2d2020c1476346304a1cc64078e2f", "patch": "@@ -1,3 +1,15 @@\n+error: equality constraints are not yet supported in `where` clauses\n+  --> $DIR/missing-bounds.rs:37:33\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^ not supported\n+   |\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n+help: if `Output` is an associated type you're trying to set, use the associated type binding syntax\n+   |\n+LL | impl<B: Add> Add for E<B> where B: Add<Output = B> {\n+   |                                 ~~~~~~~~~~~~~~~~~~\n+\n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:11:11\n    |\n@@ -43,7 +55,23 @@ help: consider restricting type parameter `B`\n LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n    |       +++++++++++++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/missing-bounds.rs:42:14\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+   |      - this type parameter\n+...\n+LL |         Self(self.0 + rhs.0)\n+   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |\n+   = note: expected type parameter `B`\n+             found associated type `<B as Add>::Output`\n+help: consider further restricting type parameter `B`\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: Add<Output = B> {\n+   |                                                       ++++++++++++++++++++\n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}]}