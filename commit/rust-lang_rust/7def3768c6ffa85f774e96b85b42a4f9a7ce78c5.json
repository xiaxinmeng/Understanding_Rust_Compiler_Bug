{"sha": "7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZWYzNzY4YzZmZmE4NWY3NzRlOTZiODViNDJhNGY5YTdjZTc4YzU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-02-15T20:41:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:18Z"}, "message": "Use new symbol names for items of various kinds.", "tree": {"sha": "7308e39b6b583c9bb09202586fe6c939d2c9a8b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7308e39b6b583c9bb09202586fe6c939d2c9a8b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "html_url": "https://github.com/rust-lang/rust/commit/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68de171890cccc376cf55db165d9c6595ee75743", "url": "https://api.github.com/repos/rust-lang/rust/commits/68de171890cccc376cf55db165d9c6595ee75743", "html_url": "https://github.com/rust-lang/rust/commit/68de171890cccc376cf55db165d9c6595ee75743"}], "stats": {"total": 124, "additions": 17, "deletions": 107}, "files": [{"sha": "2a9bd6618a37393d9c91d008452f844efac2af28", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 94, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -24,11 +24,9 @@ use middle::cstore::{self, CrateStore, LinkMeta};\n use middle::cstore::{LinkagePreference, NativeLibraryKind};\n use middle::def_id::DefId;\n use middle::dependency_format::Linkage;\n-use middle::ty::{Ty, TyCtxt};\n-use rustc::front::map::DefPath;\n-use trans::{CrateContext, CrateTranslation, gensym_name};\n+use middle::ty::TyCtxt;\n+use trans::CrateTranslation;\n use util::common::time;\n-use util::sha2::{Digest, Sha256};\n use util::fs::fix_windows_verbatim_for_gcc;\n use rustc_back::tempdir::TempDir;\n \n@@ -38,16 +36,14 @@ use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io::{self, Read, Write};\n-use std::iter::once;\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str;\n use flate;\n-use serialize::hex::ToHex;\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::parse::token::{self, InternedString};\n+use syntax::parse::token::InternedString;\n use syntax::attr::AttrMetaMethods;\n \n use rustc_front::hir;\n@@ -195,50 +191,10 @@ pub fn build_link_meta(sess: &Session,\n     return r;\n }\n \n-fn truncated_hash_result(symbol_hasher: &mut Sha256) -> String {\n-    let output = symbol_hasher.result_bytes();\n-    // 64 bits should be enough to avoid collisions.\n-    output[.. 8].to_hex().to_string()\n-}\n-\n pub fn def_to_string(_tcx: &TyCtxt, did: DefId) -> String {\n     format!(\"{}:{}\", did.krate, did.index.as_usize())\n }\n \n-// This calculates STH for a symbol, as defined above\n-fn symbol_hash<'tcx>(tcx: &TyCtxt<'tcx>,\n-                     symbol_hasher: &mut Sha256,\n-                     t: Ty<'tcx>,\n-                     link_meta: &LinkMeta)\n-                     -> String {\n-    // NB: do *not* use abbrevs here as we want the symbol names\n-    // to be independent of one another in the crate.\n-\n-    symbol_hasher.reset();\n-    symbol_hasher.input_str(&link_meta.crate_name);\n-    symbol_hasher.input_str(\"-\");\n-    symbol_hasher.input_str(link_meta.crate_hash.as_str());\n-    symbol_hasher.input_str(&tcx.sess.crate_disambiguator.borrow()[..]);\n-    symbol_hasher.input_str(\"-\");\n-    symbol_hasher.input(&tcx.sess.cstore.encode_type(tcx, t, def_to_string));\n-    // Prefix with 'h' so that it never blends into adjacent digits\n-    let mut hash = String::from(\"h\");\n-    hash.push_str(&truncated_hash_result(symbol_hasher));\n-    hash\n-}\n-\n-fn get_symbol_hash<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> String {\n-    if let Some(h) = ccx.type_hashcodes().borrow().get(&t) {\n-        return h.to_string()\n-    }\n-\n-    let mut symbol_hasher = ccx.symbol_hasher().borrow_mut();\n-    let hash = symbol_hash(ccx.tcx(), &mut *symbol_hasher, t, ccx.link_meta());\n-    ccx.type_hashcodes().borrow_mut().insert(t, hash.clone());\n-    hash\n-}\n-\n-\n // Name sanitation. LLVM will happily accept identifiers with weird names, but\n // gas doesn't!\n // gas accepts the following characters in symbols: a-z, A-Z, 0-9, ., _, $\n@@ -324,53 +280,6 @@ pub fn mangle<PI: Iterator<Item=InternedString>>(path: PI, hash: Option<&str>) -\n     n\n }\n \n-pub fn exported_name(path: DefPath, hash: &str) -> String {\n-    let path = path.into_iter()\n-                   .map(|e| e.data.as_interned_str());\n-    mangle(path, Some(hash))\n-}\n-\n-pub fn mangle_exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, path: DefPath,\n-                                      t: Ty<'tcx>, id: ast::NodeId) -> String {\n-    let mut hash = get_symbol_hash(ccx, t);\n-\n-    // Paths can be completely identical for different nodes,\n-    // e.g. `fn foo() { { fn a() {} } { fn a() {} } }`, so we\n-    // generate unique characters from the node id. For now\n-    // hopefully 3 characters is enough to avoid collisions.\n-    const EXTRA_CHARS: &'static str =\n-        \"abcdefghijklmnopqrstuvwxyz\\\n-         ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n-         0123456789\";\n-    let id = id as usize;\n-    let extra1 = id % EXTRA_CHARS.len();\n-    let id = id / EXTRA_CHARS.len();\n-    let extra2 = id % EXTRA_CHARS.len();\n-    let id = id / EXTRA_CHARS.len();\n-    let extra3 = id % EXTRA_CHARS.len();\n-    hash.push(EXTRA_CHARS.as_bytes()[extra1] as char);\n-    hash.push(EXTRA_CHARS.as_bytes()[extra2] as char);\n-    hash.push(EXTRA_CHARS.as_bytes()[extra3] as char);\n-\n-    exported_name(path, &hash[..])\n-}\n-\n-pub fn mangle_internal_name_by_type_and_seq<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                                      t: Ty<'tcx>,\n-                                                      name: &str) -> String {\n-    let path = [token::intern(&t.to_string()).as_str(), gensym_name(name).as_str()];\n-    let hash = get_symbol_hash(ccx, t);\n-    mangle(path.iter().cloned(), Some(&hash[..]))\n-}\n-\n-pub fn mangle_internal_name_by_path_and_seq(path: DefPath, flav: &str) -> String {\n-    let names =\n-        path.into_iter()\n-            .map(|e| e.data.as_interned_str())\n-            .chain(once(gensym_name(flav).as_str())); // append unique version of \"flav\"\n-    mangle(names, None)\n-}\n-\n pub fn get_linker(sess: &Session) -> (String, Command) {\n     if let Some(ref linker) = sess.opts.cg.linker {\n         (linker.clone(), Command::new(linker))"}, {"sha": "e903fc2811d02423b3074b5a619e949eb4dd48e8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n //! Translate the completed AST to the LLVM IR.\n //!\n //! Some functions here, such as trans_block and trans_expr, return a value --\n@@ -29,8 +30,7 @@ pub use self::ValueOrigin::*;\n use super::CrateTranslation;\n use super::ModuleTranslation;\n \n-use back::link::mangle_exported_name;\n-use back::link;\n+use back::{link, symbol_names};\n use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n@@ -2421,10 +2421,11 @@ pub fn create_entry_wrapper(ccx: &CrateContext, sp: Span, main_llfn: ValueRef) {\n }\n \n pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                               id: ast::NodeId,\n-                               ty: Ty<'tcx>,\n+                               instance: Instance<'tcx>,\n                                attrs: &[ast::Attribute])\n                                -> String {\n+    let id = ccx.tcx().map.as_local_node_id(instance.def).unwrap();\n+\n     match ccx.external_srcs().borrow().get(&id) {\n         Some(&did) => {\n             let sym = ccx.sess().cstore.item_symbol(did);\n@@ -2438,16 +2439,16 @@ pub fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Use provided name\n         Some(name) => name.to_string(),\n         _ => {\n-            let path = ccx.tcx().map.def_path_from_id(id);\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n+                let path = ccx.tcx().map.def_path_from_id(id);\n                 path.last().unwrap().data.to_string()\n             } else {\n                 match weak_lang_items::link_name(attrs) {\n                     Some(name) => name.to_string(),\n                     None => {\n                         // Usual name mangling\n-                        mangle_exported_name(ccx, path, ty, id)\n+                        symbol_names::exported_name(ccx, &instance)\n                     }\n                 }\n             }"}, {"sha": "6fe4598c1ba3cc397514e08f4cf6e8e225705737", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -515,7 +515,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         Some(hir_map::NodeImplItem(&hir::ImplItem {\n             ref attrs, id, span, node: hir::ImplItemKind::Method(..), ..\n         })) => {\n-            let sym = exported_name(ccx, id, ty, attrs);\n+            let sym = exported_name(ccx, instance, attrs);\n \n             if declare::get_defined_value(ccx, &sym).is_some() {\n                 ccx.sess().span_fatal(span,"}, {"sha": "4cdb64a9bfb718d46d702a3aa216ab24c6c5991e", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -1032,7 +1032,7 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n                 // we need to get the symbol from metadata instead of\n                 // using the current crate's name/version\n                 // information in the hash of the symbol\n-                let sym = exported_name(ccx, id, ty, attrs);\n+                let sym = exported_name(ccx, instance, attrs);\n                 debug!(\"making {}\", sym);\n \n                 // Create the global before evaluating the initializer;"}, {"sha": "373fc04217540d3d3ec3665ba6cbcc8310758cce", "filename": "src/test/auxiliary/issue-17718-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Fauxiliary%2Fissue-17718-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Fauxiliary%2Fissue-17718-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17718-aux.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "previous_filename": "src/test/auxiliary/issue-17718.rs"}, {"sha": "88c5fb2c4089199ef411c8c0136f96ab97dfe869", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -57,7 +57,7 @@ fn runtest(me: &str) {\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(&out.stderr).unwrap();\n-    assert!(s.contains(\"stack backtrace\") && s.contains(\" - foo\"),\n+    assert!(s.contains(\"stack backtrace\") && s.contains(\" - backtrace::foo\"),\n             \"bad output: {}\", s);\n \n     // Make sure the stack trace is *not* printed\n@@ -67,7 +67,7 @@ fn runtest(me: &str) {\n     let out = p.wait_with_output().unwrap();\n     assert!(!out.status.success());\n     let s = str::from_utf8(&out.stderr).unwrap();\n-    assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n+    assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - backtrace::foo\"),\n             \"bad output2: {}\", s);\n \n     // Make sure a stack trace is printed\n@@ -77,7 +77,7 @@ fn runtest(me: &str) {\n     let s = str::from_utf8(&out.stderr).unwrap();\n     // loosened the following from double::h to double:: due to\n     // spurious failures on mac, 32bit, optimized\n-    assert!(s.contains(\"stack backtrace\") && s.contains(\" - double\"),\n+    assert!(s.contains(\"stack backtrace\") && s.contains(\" - backtrace::double\"),\n             \"bad output3: {}\", s);\n \n     // Make sure a stack trace isn't printed too many times"}, {"sha": "744e63f159b6566dc17ceb4187399bf043e2f495", "filename": "src/test/run-pass/issue-17718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7def3768c6ffa85f774e96b85b42a4f9a7ce78c5/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=7def3768c6ffa85f774e96b85b42a4f9a7ce78c5", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-17718.rs\n+// aux-build:issue-17718-aux.rs\n \n \n #![feature(core)]\n #![feature(const_fn)]\n \n-extern crate issue_17718 as other;\n+extern crate issue_17718_aux as other;\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n "}]}