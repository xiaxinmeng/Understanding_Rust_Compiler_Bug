{"sha": "01d4d46f66929122cc890279cde4765df7a0a90f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDRkNDZmNjY5MjkxMjJjYzg5MDI3OWNkZTQ3NjVkZjdhMGE5MGY=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2021-05-30T17:16:45Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2021-06-02T10:09:04Z"}, "message": "Replace IntoIter::new with IntoIterator::into_iter in std", "tree": {"sha": "f03fb1793be56f1aa7e5a062cf93715a8ad436bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f03fb1793be56f1aa7e5a062cf93715a8ad436bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d4d46f66929122cc890279cde4765df7a0a90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d4d46f66929122cc890279cde4765df7a0a90f", "html_url": "https://github.com/rust-lang/rust/commit/01d4d46f66929122cc890279cde4765df7a0a90f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d4d46f66929122cc890279cde4765df7a0a90f/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d20b9add05d32761abad651f568f1b1831cb8cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d20b9add05d32761abad651f568f1b1831cb8cf6", "html_url": "https://github.com/rust-lang/rust/commit/d20b9add05d32761abad651f568f1b1831cb8cf6"}], "stats": {"total": 79, "additions": 39, "deletions": 40}, "files": [{"sha": "7b87090fb07138f18c17f990304dd15adf1db729", "filename": "library/alloc/src/collections/vec_deque/pair_slices.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs?ref=01d4d46f66929122cc890279cde4765df7a0a90f", "patch": "@@ -1,4 +1,3 @@\n-use core::array;\n use core::cmp::{self};\n use core::mem::replace;\n \n@@ -37,7 +36,7 @@ impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n     }\n \n     pub fn remainder(self) -> impl Iterator<Item = &'b [T]> {\n-        array::IntoIter::new([self.b0, self.b1])\n+        IntoIterator::into_iter([self.b0, self.b1])\n     }\n }\n "}, {"sha": "37af3557fdd51ce792459ec680f32019413bbf03", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=01d4d46f66929122cc890279cde4765df7a0a90f", "patch": "@@ -416,7 +416,7 @@ impl<T, const N: usize> [T; N] {\n     {\n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items.\n-        unsafe { collect_into_array_unchecked(&mut IntoIter::new(self).map(f)) }\n+        unsafe { collect_into_array_unchecked(&mut IntoIterator::into_iter(self).map(f)) }\n     }\n \n     /// 'Zips up' two arrays into a single array of pairs.\n@@ -437,7 +437,7 @@ impl<T, const N: usize> [T; N] {\n     /// ```\n     #[unstable(feature = \"array_zip\", issue = \"80094\")]\n     pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n-        let mut iter = IntoIter::new(self).zip(IntoIter::new(rhs));\n+        let mut iter = IntoIterator::into_iter(self).zip(rhs);\n \n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items."}, {"sha": "42f44c23fe783ea1e36d829ee5bd310976703a6c", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4d46f66929122cc890279cde4765df7a0a90f/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=01d4d46f66929122cc890279cde4765df7a0a90f", "patch": "@@ -41,44 +41,44 @@ fn array_try_from() {\n #[test]\n fn iterator_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).collect();\n     assert_eq!(&arr[..], &v[..]);\n }\n \n #[test]\n fn iterator_rev_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).rev().collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).rev().collect();\n     assert_eq!(&v[..], &[9, 5, 2, 1, 0]);\n }\n \n #[test]\n fn iterator_nth() {\n     let v = [0, 1, 2, 3, 4];\n     for i in 0..v.len() {\n-        assert_eq!(IntoIter::new(v.clone()).nth(i).unwrap(), v[i]);\n+        assert_eq!(IntoIterator::into_iter(v.clone()).nth(i).unwrap(), v[i]);\n     }\n-    assert_eq!(IntoIter::new(v.clone()).nth(v.len()), None);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).nth(v.len()), None);\n \n-    let mut iter = IntoIter::new(v);\n+    let mut iter = IntoIterator::into_iter(v);\n     assert_eq!(iter.nth(2).unwrap(), v[2]);\n     assert_eq!(iter.nth(1).unwrap(), v[4]);\n }\n \n #[test]\n fn iterator_last() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v).last().unwrap(), 4);\n-    assert_eq!(IntoIter::new([0]).last().unwrap(), 0);\n+    assert_eq!(IntoIterator::into_iter(v).last().unwrap(), 4);\n+    assert_eq!(IntoIterator::into_iter([0]).last().unwrap(), 0);\n \n-    let mut it = IntoIter::new([0, 9, 2, 4]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2, 4]);\n     assert_eq!(it.next_back(), Some(4));\n     assert_eq!(it.last(), Some(2));\n }\n \n #[test]\n fn iterator_clone() {\n-    let mut it = IntoIter::new([0, 2, 4, 6, 8]);\n+    let mut it = IntoIterator::into_iter([0, 2, 4, 6, 8]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next_back(), Some(8));\n     let mut clone = it.clone();\n@@ -92,7 +92,7 @@ fn iterator_clone() {\n \n #[test]\n fn iterator_fused() {\n-    let mut it = IntoIter::new([0, 9, 2]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(9));\n     assert_eq!(it.next(), Some(2));\n@@ -105,7 +105,7 @@ fn iterator_fused() {\n \n #[test]\n fn iterator_len() {\n-    let mut it = IntoIter::new([0, 1, 2, 5, 9]);\n+    let mut it = IntoIterator::into_iter([0, 1, 2, 5, 9]);\n     assert_eq!(it.size_hint(), (5, Some(5)));\n     assert_eq!(it.len(), 5);\n     assert_eq!(it.is_empty(), false);\n@@ -121,7 +121,7 @@ fn iterator_len() {\n     assert_eq!(it.is_empty(), false);\n \n     // Empty\n-    let it = IntoIter::new([] as [String; 0]);\n+    let it = IntoIterator::into_iter([] as [String; 0]);\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.len(), 0);\n     assert_eq!(it.is_empty(), true);\n@@ -130,23 +130,23 @@ fn iterator_len() {\n #[test]\n fn iterator_count() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v.clone()).count(), 5);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).count(), 5);\n \n-    let mut iter2 = IntoIter::new(v);\n+    let mut iter2 = IntoIterator::into_iter(v);\n     iter2.next();\n     iter2.next();\n     assert_eq!(iter2.count(), 3);\n }\n \n #[test]\n fn iterator_flat_map() {\n-    assert!((0..5).flat_map(|i| IntoIter::new([2 * i, 2 * i + 1])).eq(0..10));\n+    assert!((0..5).flat_map(|i| IntoIterator::into_iter([2 * i, 2 * i + 1])).eq(0..10));\n }\n \n #[test]\n fn iterator_debug() {\n     let arr = [0, 1, 2, 5, 9];\n-    assert_eq!(format!(\"{:?}\", IntoIter::new(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n+    assert_eq!(format!(\"{:?}\", IntoIterator::into_iter(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n }\n \n #[test]\n@@ -176,14 +176,14 @@ fn iterator_drops() {\n     // Simple: drop new iterator.\n     let i = Cell::new(0);\n     {\n-        IntoIter::new(five(&i));\n+        IntoIterator::into_iter(five(&i));\n     }\n     assert_eq!(i.get(), 5);\n \n     // Call `next()` once.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.next();\n         assert_eq!(i.get(), 0);\n         assert_eq!(iter.count(), 4);\n@@ -194,7 +194,7 @@ fn iterator_drops() {\n     // Check `clone` and calling `next`/`next_back`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         iter.next();\n         assert_eq!(i.get(), 1);\n         iter.next_back();\n@@ -217,7 +217,7 @@ fn iterator_drops() {\n     // Check via `nth`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.nth(2);\n         assert_eq!(i.get(), 2);\n         let _y = iter.last();\n@@ -227,13 +227,13 @@ fn iterator_drops() {\n \n     // Check every element.\n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);\n \n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).rev().enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).rev().enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);"}, {"sha": "457e5ae60494a264e03a64c8948982f7922352ca", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01d4d46f66929122cc890279cde4765df7a0a90f/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4d46f66929122cc890279cde4765df7a0a90f/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs?ref=01d4d46f66929122cc890279cde4765df7a0a90f", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n "}, {"sha": "4f343f3f97ea478420fc368a6a1a18828be9b1a0", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-33.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01d4d46f66929122cc890279cde4765df7a0a90f/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d4d46f66929122cc890279cde4765df7a0a90f/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs?ref=01d4d46f66929122cc890279cde4765df7a0a90f", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n "}]}