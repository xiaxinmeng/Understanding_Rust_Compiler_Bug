{"sha": "ed1dddc33f2dfb6f9247ae877e64fead5642f360", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMWRkZGMzM2YyZGZiNmY5MjQ3YWU4NzdlNjRmZWFkNTY0MmYzNjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-21T01:28:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-21T01:28:07Z"}, "message": "Null-check on obj box ptr, init to null. Un-XFAIL simple-obj.rs.", "tree": {"sha": "9d27aea4f61664d0443eece452c2a27bc137e2dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d27aea4f61664d0443eece452c2a27bc137e2dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1dddc33f2dfb6f9247ae877e64fead5642f360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1dddc33f2dfb6f9247ae877e64fead5642f360", "html_url": "https://github.com/rust-lang/rust/commit/ed1dddc33f2dfb6f9247ae877e64fead5642f360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1dddc33f2dfb6f9247ae877e64fead5642f360/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399929ba0bfd02b458d99bac7ef49b0e50731754", "url": "https://api.github.com/repos/rust-lang/rust/commits/399929ba0bfd02b458d99bac7ef49b0e50731754", "html_url": "https://github.com/rust-lang/rust/commit/399929ba0bfd02b458d99bac7ef49b0e50731754"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "928ad61406336bbc43e8f16832791e9910eedc05", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed1dddc33f2dfb6f9247ae877e64fead5642f360/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ed1dddc33f2dfb6f9247ae877e64fead5642f360/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=ed1dddc33f2dfb6f9247ae877e64fead5642f360", "patch": "@@ -553,6 +553,7 @@ TEST_XFAILS_SELF := $(filter-out \\\n                         rec-auto.rs \\\n                         rec-tup.rs \\\n                         return-nil.rs \\\n+                        simple-obj.rs \\\n                         type-in-nested-module.rs \\\n                         tup.rs \\\n                         u32-decr.rs \\"}, {"sha": "752c9e0ec9bf40ca510cc475949ac04600bf085e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed1dddc33f2dfb6f9247ae877e64fead5642f360/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1dddc33f2dfb6f9247ae877e64fead5642f360/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ed1dddc33f2dfb6f9247ae877e64fead5642f360", "patch": "@@ -812,6 +812,23 @@ fn iter_structural_ty(@block_ctxt cx,\n     -> result {\n     let result r = res(cx, C_nil());\n \n+    fn iter_boxpp(@block_ctxt cx,\n+                  ValueRef box_cell,\n+                  val_and_ty_fn f) -> result {\n+        auto box_ptr = cx.build.Load(box_cell);\n+        auto tnil = typeck.plain_ty(typeck.ty_nil);\n+        auto tbox = typeck.plain_ty(typeck.ty_box(tnil));\n+\n+        auto inner_cx = new_sub_block_ctxt(cx, \"iter box\");\n+        auto next_cx = new_sub_block_ctxt(cx, \"next\");\n+        auto null_test = cx.build.IsNull(box_ptr);\n+        cx.build.CondBr(null_test, next_cx.llbb, inner_cx.llbb);\n+\n+        auto r = f(inner_cx, box_ptr, tbox);\n+        r.bcx.build.Br(next_cx.llbb);\n+        ret res(next_cx, r.val);\n+    }\n+\n     alt (t.struct) {\n         case (typeck.ty_tup(?args)) {\n             let int i = 0;\n@@ -919,20 +936,14 @@ fn iter_structural_ty(@block_ctxt cx,\n                 cx.build.GEP(v,\n                              vec(C_int(0),\n                                  C_int(abi.fn_field_box)));\n-            auto box_ptr = cx.build.Load(box_cell);\n-            auto tnil = typeck.plain_ty(typeck.ty_nil);\n-            auto tbox = typeck.plain_ty(typeck.ty_box(tnil));\n-            ret f(cx, box_ptr, tbox);\n+            ret iter_boxpp(cx, box_cell, f);\n         }\n         case (typeck.ty_obj(_)) {\n             auto box_cell =\n                 cx.build.GEP(v,\n                              vec(C_int(0),\n                                  C_int(abi.obj_field_box)));\n-            auto box_ptr = cx.build.Load(box_cell);\n-            auto tnil = typeck.plain_ty(typeck.ty_nil);\n-            auto tbox = typeck.plain_ty(typeck.ty_box(tnil));\n-            ret f(cx, box_ptr, tbox);\n+            ret iter_boxpp(cx, box_cell, f);\n         }\n         case (_) {\n             cx.fcx.ccx.sess.unimpl(\"type in iter_structural_ty\");\n@@ -2447,7 +2458,14 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n     auto pair_vtbl = bcx.build.GEP(pair,\n                                    vec(C_int(0),\n                                        C_int(abi.obj_field_vtbl)));\n+    auto pair_box = bcx.build.GEP(pair,\n+                                  vec(C_int(0),\n+                                      C_int(abi.obj_field_box)));\n     bcx.build.Store(vtbl, pair_vtbl);\n+\n+    // FIXME: allocate the object body, copy the args in, etc.\n+    bcx.build.Store(C_null(T_ptr(T_box(T_nil()))), pair_box);\n+\n     bcx.build.Ret(bcx.build.Load(pair));\n }\n "}]}