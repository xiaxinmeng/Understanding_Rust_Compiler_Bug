{"sha": "8198e13c26fe985af5893af7bdac04041880b461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOThlMTNjMjZmZTk4NWFmNTg5M2FmN2JkYWMwNDA0MTg4MGI0NjE=", "commit": {"author": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-04-24T20:16:50Z"}, "committer": {"name": "Lenard Pratt", "email": "l3np27@gmail.com", "date": "2019-05-04T16:39:51Z"}, "message": "Added local macro goto", "tree": {"sha": "d38470089855571fed08974c6cf3d57b80f3084f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38470089855571fed08974c6cf3d57b80f3084f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8198e13c26fe985af5893af7bdac04041880b461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8198e13c26fe985af5893af7bdac04041880b461", "html_url": "https://github.com/rust-lang/rust/commit/8198e13c26fe985af5893af7bdac04041880b461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8198e13c26fe985af5893af7bdac04041880b461/comments", "author": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lapz", "id": 19998186, "node_id": "MDQ6VXNlcjE5OTk4MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/19998186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lapz", "html_url": "https://github.com/Lapz", "followers_url": "https://api.github.com/users/Lapz/followers", "following_url": "https://api.github.com/users/Lapz/following{/other_user}", "gists_url": "https://api.github.com/users/Lapz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lapz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lapz/subscriptions", "organizations_url": "https://api.github.com/users/Lapz/orgs", "repos_url": "https://api.github.com/users/Lapz/repos", "events_url": "https://api.github.com/users/Lapz/events{/privacy}", "received_events_url": "https://api.github.com/users/Lapz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12629d5e4f2d949eedb707dedad4d75eff09e683", "url": "https://api.github.com/repos/rust-lang/rust/commits/12629d5e4f2d949eedb707dedad4d75eff09e683", "html_url": "https://github.com/rust-lang/rust/commit/12629d5e4f2d949eedb707dedad4d75eff09e683"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "03b1063b69c4cdad26f5e756a95e05052124c112", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -69,7 +69,7 @@ pub use self::{\n     expr::ExprScopes,\n     resolve::Resolution,\n     generics::{GenericParams, GenericParam, HasGenericParams},\n-    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax},\n+    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax,MacroByExampleDef},\n };\n \n pub use self::code_model_api::{\n@@ -80,5 +80,5 @@ pub use self::code_model_api::{\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n-    Trait, TypeAlias, Container,\n+    Trait, TypeAlias, Container\n };"}, {"sha": "06d99351edea97cded1e8fbd72b316936c98e8f7", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -10,17 +10,18 @@ use std::sync::Arc;\n use rustc_hash::{FxHashSet, FxHashMap};\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,\n+    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,TreeArc,\n     ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n     SyntaxKind::*,\n };\n \n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n-    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty,\n+    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty,Path,\n     expr::{BodySourceMap, scope::{ScopeId, ExprScopes}},\n-    ids::LocationCtx,\n+    ids::{LocationCtx,MacroCallId},\n+    docs::{docs_from_ast,Documentation},\n     expr, AstId,\n };\n \n@@ -184,9 +185,28 @@ pub enum PathResolution {\n     /// A generic parameter\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n+    Macro(MacroByExampleDef),\n     AssocItem(crate::ImplItem),\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroByExampleDef {\n+    pub(crate) id: MacroCallId,\n+}\n+\n+impl MacroByExampleDef {\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::MacroCall>) {\n+        let loc = self.id.loc(db);\n+        (self.id.into(), loc.def.0.to_node(db))\n+    }\n+}\n+\n+impl crate::Docs for MacroByExampleDef {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ScopeEntryWithSyntax {\n     pub(crate) name: Name,\n@@ -264,6 +284,23 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n+    pub fn resolve_macro_call(\n+        &self,\n+        db: &impl HirDatabase,\n+        file_id: FileId,\n+        macro_call: &ast::MacroCall,\n+    ) -> Option<MacroByExampleDef> {\n+        let hir_id = file_id.into();\n+        let ast_id = db.ast_id_map(hir_id).ast_id(macro_call).with_file_id(hir_id);\n+        let call_id = self.resolver.resolve_macro_call(\n+            db,\n+            macro_call.path().and_then(Path::from_ast),\n+            ast_id,\n+        );\n+\n+        call_id.map(|id| MacroByExampleDef { id })\n+    }\n+\n     pub fn resolve_hir_path(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "6f1392231fa5891c6c168d8f7ae5190512fec03c", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -89,6 +89,7 @@ pub enum CompletionItemKind {\n     TypeAlias,\n     Method,\n     TypeParam,\n+    Macro,\n }\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]"}, {"sha": "765cf883be9fa9733d32d42be01cdb550e7d5310", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -213,6 +213,15 @@ impl NavigationTarget {\n         }\n     }\n \n+    pub(crate) fn from_macro_def(\n+        db: &RootDatabase,\n+        macro_call: hir::MacroByExampleDef,\n+    ) -> NavigationTarget {\n+        let (file_id, node) = macro_call.source(db);\n+        log::debug!(\"nav target {}\", node.syntax().debug_dump());\n+        NavigationTarget::from_named(file_id.original_file(db), &*node)\n+    }\n+\n     #[cfg(test)]\n     pub(crate) fn assert_match(&self, expected: &str) {\n         let actual = self.debug_render();\n@@ -289,6 +298,7 @@ impl NavigationTarget {\n             .visit(doc_comments::<ast::StaticDef>)\n             .visit(doc_comments::<ast::NamedFieldDef>)\n             .visit(doc_comments::<ast::EnumVariant>)\n+            .visit(doc_comments::<ast::MacroCall>)\n             .accept(&node)?\n     }\n "}, {"sha": "533c229feecd46f80c3f7f9c6d652228990b32b1", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -59,6 +59,21 @@ pub(crate) fn reference_definition(\n             return Exact(NavigationTarget::from_function(db, func));\n         }\n     }\n+\n+    //it could be a macro call\n+    if let Some(macro_call) = name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(|node| node.parent())\n+        .and_then(|node| node.parent())\n+        .and_then(ast::MacroCall::cast)\n+    {\n+        tested_by!(goto_definition_works_for_macros);\n+        if let Some(macro_call) = analyzer.resolve_macro_call(db, file_id, macro_call) {\n+            return Exact(NavigationTarget::from_macro_def(db, macro_call));\n+        }\n+    }\n+\n     // It could also be a field access\n     if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::FieldExpr::cast) {\n         tested_by!(goto_definition_works_for_fields);\n@@ -97,6 +112,10 @@ pub(crate) fn reference_definition(\n                 hir::PathResolution::GenericParam(..) => {\n                     // FIXME: go to the generic param def\n                 }\n+                hir::PathResolution::Macro(def) => {\n+                    let nav = NavigationTarget::from_macro_def(db, def);\n+                    return Exact(nav);\n+                }\n                 hir::PathResolution::SelfType(impl_block) => {\n                     let ty = impl_block.target_ty(db);\n \n@@ -156,6 +175,7 @@ fn named_target(file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget>\n         .visit(|node: &ast::TraitDef| NavigationTarget::from_named(file_id, node))\n         .visit(|node: &ast::NamedFieldDef| NavigationTarget::from_named(file_id, node))\n         .visit(|node: &ast::Module| NavigationTarget::from_named(file_id, node))\n+        .visit(|node: &ast::MacroCall| NavigationTarget::from_named(file_id, node))\n         .accept(node)\n }\n \n@@ -227,6 +247,26 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_definition_works_for_macros() {\n+        covers!(goto_definition_works_for_macros);\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            macro_rules! foo {\n+                () => {\n+                    {}\n+                };\n+            }\n+\n+            fn bar() {\n+                <|>foo!();\n+            }\n+            \",\n+            \"foo MACRO_CALL FileId(1) [0; 50) [13; 16)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_works_for_methods() {\n         covers!(goto_definition_works_for_methods);"}, {"sha": "cc894a7df3a7893be50ef2b065cf4d40d664af1d", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -1,5 +1,6 @@\n test_utils::marks!(\n     inserts_parens_for_function_calls\n+    goto_definition_works_for_macros\n     goto_definition_works_for_methods\n     goto_definition_works_for_fields\n     goto_definition_works_for_named_fields"}, {"sha": "50a12ddbc2b3448fb38fbccb39ee7d838dd4c60d", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -73,6 +73,7 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::Static => Value,\n             CompletionItemKind::Method => Method,\n             CompletionItemKind::TypeParam => TypeParameter,\n+            CompletionItemKind::Macro => Method,\n         }\n     }\n }"}, {"sha": "e373b3fa42bfc1b60da2694b777f2c42f4e720ca", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -1761,6 +1761,7 @@ impl ToOwned for MacroCall {\n \n impl ast::NameOwner for MacroCall {}\n impl ast::AttrsOwner for MacroCall {}\n+impl ast::DocCommentsOwner for MacroCall {}\n impl MacroCall {\n     pub fn token_tree(&self) -> Option<&TokenTree> {\n         super::child_opt(self)"}, {"sha": "01778ed460c08ec915341acdfa2e315f4ddc84fe", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8198e13c26fe985af5893af7bdac04041880b461/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=8198e13c26fe985af5893af7bdac04041880b461", "patch": "@@ -552,7 +552,7 @@ Grammar(\n         \"Name\": (),\n         \"NameRef\": (),\n         \"MacroCall\": (\n-            traits: [ \"NameOwner\", \"AttrsOwner\" ],\n+            traits: [ \"NameOwner\", \"AttrsOwner\",\"DocCommentsOwner\" ],\n             options: [ \"TokenTree\", \"Path\" ],\n         ),\n         \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),"}]}