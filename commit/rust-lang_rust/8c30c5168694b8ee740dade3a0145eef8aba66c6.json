{"sha": "8c30c5168694b8ee740dade3a0145eef8aba66c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMzBjNTE2ODY5NGI4ZWU3NDBkYWRlM2EwMTQ1ZWVmOGFiYTY2YzY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-05-30T18:46:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:47:27Z"}, "message": "Remove deprecated heap modules\n\nThe heap.rs file was already unused.", "tree": {"sha": "e097254988d37c738a9310b9590e1ac39615d383", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e097254988d37c738a9310b9590e1ac39615d383"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c30c5168694b8ee740dade3a0145eef8aba66c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c30c5168694b8ee740dade3a0145eef8aba66c6", "html_url": "https://github.com/rust-lang/rust/commit/8c30c5168694b8ee740dade3a0145eef8aba66c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c30c5168694b8ee740dade3a0145eef8aba66c6/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3373204ac49ebdb7194020ea9c556ce87910f7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3373204ac49ebdb7194020ea9c556ce87910f7b7", "html_url": "https://github.com/rust-lang/rust/commit/3373204ac49ebdb7194020ea9c556ce87910f7b7"}], "stats": {"total": 136, "additions": 2, "deletions": 134}, "files": [{"sha": "5ea37ceeb2b200e3aeb6ad11f249528388eb2ff3", "filename": "src/liballoc/heap.rs", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=3373204ac49ebdb7194020ea9c556ce87910f7b7", "patch": "@@ -1,110 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(deprecated)]\n-\n-pub use alloc::{Layout, AllocErr, CannotReallocInPlace};\n-use core::alloc::Alloc as CoreAlloc;\n-use core::ptr::NonNull;\n-\n-#[doc(hidden)]\n-pub mod __core {\n-    pub use core::*;\n-}\n-\n-#[derive(Debug)]\n-pub struct Excess(pub *mut u8, pub usize);\n-\n-/// Compatibility with older versions of #[global_allocator] during bootstrap\n-pub unsafe trait Alloc {\n-    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\n-    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout);\n-    fn oom(&mut self, err: AllocErr) -> !;\n-    fn usable_size(&self, layout: &Layout) -> (usize, usize);\n-    unsafe fn realloc(&mut self,\n-                      ptr: *mut u8,\n-                      layout: Layout,\n-                      new_layout: Layout) -> Result<*mut u8, AllocErr>;\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr>;\n-    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr>;\n-    unsafe fn realloc_excess(&mut self,\n-                             ptr: *mut u8,\n-                             layout: Layout,\n-                             new_layout: Layout) -> Result<Excess, AllocErr>;\n-    unsafe fn grow_in_place(&mut self,\n-                            ptr: *mut u8,\n-                            layout: Layout,\n-                            new_layout: Layout) -> Result<(), CannotReallocInPlace>;\n-    unsafe fn shrink_in_place(&mut self,\n-                              ptr: *mut u8,\n-                              layout: Layout,\n-                              new_layout: Layout) -> Result<(), CannotReallocInPlace>;\n-}\n-\n-unsafe impl<T> Alloc for T where T: CoreAlloc {\n-    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-        CoreAlloc::alloc(self, layout).map(|ptr| ptr.cast().as_ptr())\n-    }\n-\n-    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-        let ptr = NonNull::new_unchecked(ptr);\n-        CoreAlloc::dealloc(self, ptr, layout)\n-    }\n-\n-    fn oom(&mut self, _: AllocErr) -> ! {\n-        unsafe { ::core::intrinsics::abort() }\n-    }\n-\n-    fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n-        CoreAlloc::usable_size(self, layout)\n-    }\n-\n-    unsafe fn realloc(&mut self,\n-                      ptr: *mut u8,\n-                      layout: Layout,\n-                      new_layout: Layout) -> Result<*mut u8, AllocErr> {\n-        let ptr = NonNull::new_unchecked(ptr);\n-        CoreAlloc::realloc(self, ptr, layout, new_layout.size()).map(|ptr| ptr.cast().as_ptr())\n-    }\n-\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-        CoreAlloc::alloc_zeroed(self, layout).map(|ptr| ptr.cast().as_ptr())\n-    }\n-\n-    unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n-        CoreAlloc::alloc_excess(self, layout)\n-            .map(|e| Excess(e.0 .cast().as_ptr(), e.1))\n-    }\n-\n-    unsafe fn realloc_excess(&mut self,\n-                             ptr: *mut u8,\n-                             layout: Layout,\n-                             new_layout: Layout) -> Result<Excess, AllocErr> {\n-        let ptr = NonNull::new_unchecked(ptr);\n-        CoreAlloc::realloc_excess(self, ptr, layout, new_layout.size())\n-            .map(|e| Excess(e.0 .cast().as_ptr(), e.1))\n-    }\n-\n-    unsafe fn grow_in_place(&mut self,\n-                            ptr: *mut u8,\n-                            layout: Layout,\n-                            new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-        let ptr = NonNull::new_unchecked(ptr);\n-        CoreAlloc::grow_in_place(self, ptr, layout, new_layout.size())\n-    }\n-\n-    unsafe fn shrink_in_place(&mut self,\n-                              ptr: *mut u8,\n-                              layout: Layout,\n-                              new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-        let ptr = NonNull::new_unchecked(ptr);\n-        CoreAlloc::shrink_in_place(self, ptr, layout, new_layout.size())\n-    }\n-}"}, {"sha": "828461fe8d74d927fb3d3d9946d3ce8c5393a39d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=8c30c5168694b8ee740dade3a0145eef8aba66c6", "patch": "@@ -150,18 +150,10 @@ pub mod allocator {\n \n pub mod alloc;\n \n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-#[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n-/// Use the `alloc` module instead.\n-pub mod heap {\n-    pub use alloc::*;\n-}\n-\n #[unstable(feature = \"futures_api\",\n            reason = \"futures in libcore are unstable\",\n            issue = \"50547\")]\n pub mod task;\n-\n // Primitive types using the heaps above\n \n // Need to conditionally define the mod from `boxed.rs` to avoid"}, {"sha": "5ba77edee6e486e7b09772615833f7ec0e011981", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8c30c5168694b8ee740dade3a0145eef8aba66c6", "patch": "@@ -215,13 +215,6 @@ pub mod task;\n #[allow(missing_docs)]\n pub mod alloc;\n \n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-#[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n-/// Use the `alloc` module instead.\n-pub mod heap {\n-    pub use alloc::*;\n-}\n-\n // note: does not need to be public\n mod iter_private;\n mod nonzero;"}, {"sha": "421134141837b7425bf6c9a2118e4ad01696c744", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=8c30c5168694b8ee740dade3a0145eef8aba66c6", "patch": "@@ -438,7 +438,7 @@ pub use self::hash_map::HashMap;\n pub use self::hash_set::HashSet;\n \n #[unstable(feature = \"try_reserve\", reason = \"new API\", issue=\"48043\")]\n-pub use heap::CollectionAllocErr;\n+pub use alloc::CollectionAllocErr;\n \n mod hash;\n "}, {"sha": "3160485375f6df57f76627f2193a31ab3119d6f6", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=8c30c5168694b8ee740dade3a0145eef8aba66c6", "patch": "@@ -23,13 +23,13 @@\n // coherence challenge (e.g., specialization, neg impls, etc) we can\n // reconsider what crate these items belong in.\n \n+use alloc::{AllocErr, LayoutErr, CannotReallocInPlace};\n use any::TypeId;\n use borrow::Cow;\n use cell;\n use char;\n use core::array;\n use fmt::{self, Debug, Display};\n-use heap::{AllocErr, LayoutErr, CannotReallocInPlace};\n use mem::transmute;\n use num;\n use str;"}, {"sha": "3972763a051f5e884432db43230293fb2ed6d371", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c30c5168694b8ee740dade3a0145eef8aba66c6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8c30c5168694b8ee740dade3a0145eef8aba66c6", "patch": "@@ -499,13 +499,6 @@ pub mod process;\n pub mod sync;\n pub mod time;\n \n-#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n-#[rustc_deprecated(since = \"1.27.0\", reason = \"module renamed to `alloc`\")]\n-/// Use the `alloc` module instead.\n-pub mod heap {\n-    pub use alloc::*;\n-}\n-\n // Platform-abstraction modules\n #[macro_use]\n mod sys_common;"}]}