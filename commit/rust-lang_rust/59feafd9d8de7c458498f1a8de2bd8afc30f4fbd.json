{"sha": "59feafd9d8de7c458498f1a8de2bd8afc30f4fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZmVhZmQ5ZDhkZTdjNDU4NDk4ZjFhOGRlMmJkOGFmYzMwZjRmYmQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-31T21:00:35Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:08Z"}, "message": "Fix NodeLifetime/NodeGenericParam confusion", "tree": {"sha": "b5b77c9e282a18d2d95f84654a83c53f16015d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b77c9e282a18d2d95f84654a83c53f16015d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd", "html_url": "https://github.com/rust-lang/rust/commit/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831b5c02df7235f2df804ee62e7cd2caf02bdad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/831b5c02df7235f2df804ee62e7cd2caf02bdad1", "html_url": "https://github.com/rust-lang/rust/commit/831b5c02df7235f2df804ee62e7cd2caf02bdad1"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "c49625216b46c07260eb876e001e5edef6815ff9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59feafd9d8de7c458498f1a8de2bd8afc30f4fbd/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=59feafd9d8de7c458498f1a8de2bd8afc30f4fbd", "patch": "@@ -1397,47 +1397,45 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 Some(LifetimeUseSet::One(_)) => {\n                     let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n                     debug!(\"node id first={:?}\", node_id);\n-                    if let hir::map::NodeLifetime(hir_lifetime) = self.tcx.hir.get(node_id) {\n-                        let span = hir_lifetime.span;\n-                        let id = hir_lifetime.id;\n-                        debug!(\n-                            \"id ={:?} span = {:?} hir_lifetime = {:?}\",\n-                            node_id, span, hir_lifetime\n-                        );\n-\n-                        self.tcx\n-                            .struct_span_lint_node(\n-                                lint::builtin::SINGLE_USE_LIFETIMES,\n-                                id,\n-                                span,\n-                                &format!(\n-                                    \"lifetime parameter `{}` only used once\",\n-                                    hir_lifetime.name.name()\n-                                ),\n-                            )\n-                            .emit();\n+                    if let Some((id, span, name)) = match self.tcx.hir.get(node_id) {\n+                        hir::map::NodeLifetime(hir_lifetime) => {\n+                            Some((hir_lifetime.id, hir_lifetime.span, hir_lifetime.name.name()))\n+                        }\n+                        hir::map::NodeGenericParam(param) => {\n+                            Some((param.id, param.span, param.name))\n+                        }\n+                        _ => None,\n+                    } {\n+                        debug!(\"id = {:?} span = {:?} name = {:?}\", node_id, span, name);\n+                        self.tcx.struct_span_lint_node(\n+                            lint::builtin::SINGLE_USE_LIFETIMES,\n+                            id,\n+                            span,\n+                            &format!(\"lifetime parameter `{}` only used once\", name),\n+                        ).emit();\n                     }\n                 }\n                 Some(LifetimeUseSet::Many) => {\n                     debug!(\"Not one use lifetime\");\n                 }\n                 None => {\n                     let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n-                    if let hir::map::NodeLifetime(hir_lifetime) = self.tcx.hir.get(node_id) {\n-                        let span = hir_lifetime.span;\n-                        let id = hir_lifetime.id;\n-\n-                        self.tcx\n-                            .struct_span_lint_node(\n-                                lint::builtin::UNUSED_LIFETIMES,\n-                                id,\n-                                span,\n-                                &format!(\n-                                    \"lifetime parameter `{}` never used\",\n-                                    hir_lifetime.name.name()\n-                                ),\n-                            )\n-                            .emit();\n+                    if let Some((id, span, name)) = match self.tcx.hir.get(node_id) {\n+                        hir::map::NodeLifetime(hir_lifetime) => {\n+                            Some((hir_lifetime.id, hir_lifetime.span, hir_lifetime.name.name()))\n+                        }\n+                        hir::map::NodeGenericParam(param) => {\n+                            Some((param.id, param.span, param.name))\n+                        }\n+                        _ => None,\n+                    } {\n+                        debug!(\"id ={:?} span = {:?} name = {:?}\", node_id, span, name);\n+                        self.tcx.struct_span_lint_node(\n+                            lint::builtin::UNUSED_LIFETIMES,\n+                            id,\n+                            span,\n+                            &format!(\"lifetime parameter `{}` never used\", name)\n+                        ).emit();\n                     }\n                 }\n             }"}]}