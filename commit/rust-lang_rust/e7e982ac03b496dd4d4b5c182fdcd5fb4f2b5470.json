{"sha": "e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTk4MmFjMDNiNDk2ZGQ0ZDRiNWMxODJmZGNkNWZiNGYyYjU0NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-04T22:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-04T22:58:10Z"}, "message": "Auto merge of #47998 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #47862, #47877, #47896, #47912, #47947, #47958, #47978, #47996, #47999, #47892\n- Failed merges:", "tree": {"sha": "3495f1e9721731384fae0e1c2a6209fd1402a76f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3495f1e9721731384fae0e1c2a6209fd1402a76f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "html_url": "https://github.com/rust-lang/rust/commit/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6091fbd0eee290c651f73be899f221eeab3c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6091fbd0eee290c651f73be899f221eeab3c05", "html_url": "https://github.com/rust-lang/rust/commit/0c6091fbd0eee290c651f73be899f221eeab3c05"}, {"sha": "e17ebdf344401c265ade3b02bb68df0d0485d71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e17ebdf344401c265ade3b02bb68df0d0485d71a", "html_url": "https://github.com/rust-lang/rust/commit/e17ebdf344401c265ade3b02bb68df0d0485d71a"}], "stats": {"total": 621, "additions": 417, "deletions": 204}, "files": [{"sha": "e4c1cdb79fd24e4d72616553fa1a3ccafdfc44bc", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -610,7 +610,6 @@ static HOST_COMPILETESTS: &[Test] = &[\n         mode: \"incremental\",\n         suite: \"incremental-fulldeps\",\n     },\n-    Test { path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" },\n     Test { path: \"src/test/rustdoc\", mode: \"rustdoc\", suite: \"rustdoc\" },\n \n     Test { path: \"src/test/pretty\", mode: \"pretty\", suite: \"pretty\" },\n@@ -619,6 +618,7 @@ static HOST_COMPILETESTS: &[Test] = &[\n     Test { path: \"src/test/run-pass-valgrind/pretty\", mode: \"pretty\", suite: \"run-pass-valgrind\" },\n     Test { path: \"src/test/run-pass-fulldeps/pretty\", mode: \"pretty\", suite: \"run-pass-fulldeps\" },\n     Test { path: \"src/test/run-fail-fulldeps/pretty\", mode: \"pretty\", suite: \"run-fail-fulldeps\" },\n+    Test { path: \"src/test/run-make\", mode: \"run-make\", suite: \"run-make\" },\n ];\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "f0a51af7fd1c807c17208f31894751a761a7b0ca", "filename": "src/doc/unstable-book/src/language-features/match-beginning-vert.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-beginning-vert.md", "raw_url": "https://github.com/rust-lang/rust/raw/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-beginning-vert.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmatch-beginning-vert.md?ref=0c6091fbd0eee290c651f73be899f221eeab3c05", "patch": "@@ -1,23 +0,0 @@\n-# `match_beginning_vert`\n-\n-The tracking issue for this feature is [#44101].\n-\n-With this feature enabled, you are allowed to add a '|' to the beginning of a\n-match arm:\n-\n-```rust\n-#![feature(match_beginning_vert)]\n-\n-enum Foo { A, B, C }\n-\n-fn main() {\n-    let x = Foo::A;\n-    match x {\n-        | Foo::A \n-        | Foo::B => println!(\"AB\"),\n-        | Foo::C => println!(\"C\"),\n-    }\n-}\n-```\n-\n-[#44101]: https://github.com/rust-lang/rust/issues/44101\n\\ No newline at end of file"}, {"sha": "566bfe2a3fb5e8c85c37a3f3714d097cebeaa8c7", "filename": "src/libcore/any.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -367,9 +367,36 @@ impl TypeId {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(stage0)]\n     pub fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId {\n             t: unsafe { intrinsics::type_id::<T>() },\n         }\n     }\n+\n+    /// Returns the `TypeId` of the type this generic function has been\n+    /// instantiated with.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::{Any, TypeId};\n+    ///\n+    /// fn is_string<T: ?Sized + Any>(_s: &T) -> bool {\n+    ///     TypeId::of::<String>() == TypeId::of::<T>()\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(is_string(&0), false);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature=\"const_type_id\")]\n+    #[cfg(not(stage0))]\n+    pub const fn of<T: ?Sized + 'static>() -> TypeId {\n+        TypeId {\n+            t: unsafe { intrinsics::type_id::<T>() },\n+        }\n+    }\n }"}, {"sha": "59a296c2a762c5e5a25ac3d3e1bcb55e11722502", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -91,6 +91,7 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(doc_spotlight)]\n+#![feature(rustc_const_unstable)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "c0feb8ad020785faf5e6d565ac0a36d842f44b01", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -1825,7 +1825,7 @@ pub struct Location {\n     /// the location is within this block\n     pub block: BasicBlock,\n \n-    /// the location is the start of the this statement; or, if `statement_index`\n+    /// the location is the start of the statement; or, if `statement_index`\n     /// == num-statements, then the start of the terminator.\n     pub statement_index: usize,\n }"}, {"sha": "8e4ec93c14baebae44f7ca13e58ff099ca474883", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -327,6 +327,10 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                     return Ok(mk_const(Integral(Usize(ConstUsize::new(align,\n                         tcx.sess.target.usize_ty).unwrap()))));\n                 }\n+                \"type_id\" => {\n+                    let type_id = tcx.type_id_hash(substs.type_at(0));\n+                    return Ok(mk_const(Integral(U64(type_id))));\n+                }\n                 _ => signal!(e, TypeckError)\n             }\n           }"}, {"sha": "56f863ab3aa84e6ae881cab222e422793ea3cdbd", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -302,19 +302,38 @@ impl EarlyLintPass for UnusedParens {\n             Assign(_, ref value) => (value, \"assigned value\", false),\n             AssignOp(.., ref value) => (value, \"assigned value\", false),\n             InPlace(_, ref value) => (value, \"emplacement value\", false),\n-            Call(_, ref args) => {\n-                for arg in args {\n-                    self.check_unused_parens_core(cx, arg, \"function argument\", false)\n+            // either function/method call, or something this lint doesn't care about\n+            ref call_or_other => {\n+                let args_to_check;\n+                let call_kind;\n+                match *call_or_other {\n+                    Call(_, ref args) => {\n+                        call_kind = \"function\";\n+                        args_to_check = &args[..];\n+                    },\n+                    MethodCall(_, ref args) => {\n+                        call_kind = \"method\";\n+                        // first \"argument\" is self (which sometimes needs parens)\n+                        args_to_check = &args[1..];\n+                    }\n+                    // actual catch-all arm\n+                    _ => { return; }\n                 }\n-                return;\n-            },\n-            MethodCall(_, ref args) => {\n-                for arg in &args[1..] { // first \"argument\" is self (which sometimes needs parens)\n-                    self.check_unused_parens_core(cx, arg, \"method argument\", false)\n+                // Don't lint if this is a nested macro expansion: otherwise, the lint could\n+                // trigger in situations that macro authors shouldn't have to care about, e.g.,\n+                // when a parenthesized token tree matched in one macro expansion is matched as\n+                // an expression in another and used as a fn/method argument (Issue #47775)\n+                if e.span.ctxt().outer().expn_info()\n+                    .map_or(false, |info| info.call_site.ctxt().outer()\n+                            .expn_info().is_some()) {\n+                        return;\n+                }\n+                let msg = format!(\"{} argument\", call_kind);\n+                for arg in args_to_check {\n+                    self.check_unused_parens_core(cx, arg, &msg, false);\n                 }\n                 return;\n             }\n-            _ => return,\n         };\n         self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n     }"}, {"sha": "c0c680a4ddcbceae0b361f7af3ffb86800a1e3e5", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -374,13 +374,20 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             }\n         };\n         if let PlaceContext::Copy = context {\n-            let ty = place_ty.to_ty(self.tcx());\n-            if self.cx\n-                .infcx\n-                .type_moves_by_default(self.cx.param_env, ty, DUMMY_SP)\n-            {\n-                span_mirbug!(self, place, \"attempted copy of non-Copy type ({:?})\", ty);\n-            }\n+            let tcx = self.tcx();\n+            let trait_ref = ty::TraitRef {\n+                def_id: tcx.lang_items().copy_trait().unwrap(),\n+                substs: tcx.mk_substs_trait(place_ty.to_ty(tcx), &[]),\n+            };\n+\n+            // In order to have a Copy operand, the type T of the value must be Copy. Note that we\n+            // prove that T: Copy, rather than using the type_moves_by_default test. This is\n+            // important because type_moves_by_default ignores the resulting region obligations and\n+            // assumes they pass. This can result in bounds from Copy impls being unsoundly ignored\n+            // (e.g., #29149). Note that we decide to use Copy before knowing whether the bounds\n+            // fully apply: in effect, the rule is that if a value of some type could implement\n+            // Copy, then it must.\n+            self.cx.prove_trait_ref(trait_ref, location);\n         }\n         place_ty\n     }"}, {"sha": "d3b084fde6ab899c6ec55944dea4968c2e7fb260", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -243,6 +243,12 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeEvaluator {\n                 ecx.write_primval(dest, PrimVal::from_u128(size), dest_layout.ty)?;\n             }\n \n+            \"type_id\" => {\n+                let ty = substs.type_at(0);\n+                let type_id = ecx.tcx.type_id_hash(ty) as u128;\n+                ecx.write_primval(dest, PrimVal::from_u128(type_id), dest_layout.ty)?;\n+            }\n+\n             name => return Err(ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()),\n         }\n "}, {"sha": "da76adfd48f3ffd4306317d4579c7fc120c2c63f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -737,7 +737,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n                         match &self.tcx.item_name(def_id)[..] {\n-                            \"size_of\" | \"min_align_of\" => is_const_fn = Some(def_id),\n+                            \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;"}, {"sha": "cd1975488a24a3f201d9ece1574685592f2d3ce5", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -411,6 +411,11 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                         self.cx.align_of(substs.type_at(0)).abi());\n                                     Ok(Const::new(llval, tcx.types.usize))\n                                 }\n+                                \"type_id\" => {\n+                                    let llval = C_u64(self.cx,\n+                                        self.cx.tcx.type_id_hash(substs.type_at(0)));\n+                                    Ok(Const::new(llval, tcx.types.u64))\n+                                }\n                                 _ => span_bug!(span, \"{:?} in constant\", terminator.kind)\n                             }\n                         } else if let Some((op, is_checked)) = self.is_binop_lang_item(def_id) {"}, {"sha": "7c9a49c82a9395b186eab37471140cd64c368ab6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -2447,7 +2447,12 @@ impl Clean<Type> for hir::Ty {\n                 let def_id = cx.tcx.hir.body_owner_def_id(n);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let substs = Substs::identity_for_item(cx.tcx, def_id);\n-                let n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap();\n+                let n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap_or_else(|_| {\n+                    cx.tcx.mk_const(ty::Const {\n+                        val: ConstVal::Unevaluated(def_id, substs),\n+                        ty: cx.tcx.types.usize\n+                    })\n+                });\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n                 } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n@@ -2577,7 +2582,9 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let mut n = cx.tcx.lift(&n).unwrap();\n                 if let ConstVal::Unevaluated(def_id, substs) = n.val {\n                     let param_env = cx.tcx.param_env(def_id);\n-                    n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap()\n+                    if let Ok(new_n) = cx.tcx.const_eval(param_env.and((def_id, substs))) {\n+                        n = new_n;\n+                    }\n                 };\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()"}, {"sha": "5cea389531f94bd5c2e34c77d02eb5c246fbff8b", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -482,20 +482,42 @@ impl File {\n         self.inner.file_attr().map(Metadata)\n     }\n \n-    /// Creates a new independently owned handle to the underlying file.\n-    ///\n-    /// The returned `File` is a reference to the same state that this object\n-    /// references. Both handles will read and write with the same cursor\n-    /// position.\n+    /// Create a new `File` instance that shares the same underlying file handle\n+    /// as the existing `File` instance. Reads, writes, and seeks will affect\n+    /// both `File` instances simultaneously.\n     ///\n     /// # Examples\n     ///\n+    /// Create two handles for a file named `foo.txt`:\n+    ///\n     /// ```no_run\n     /// use std::fs::File;\n     ///\n     /// # fn foo() -> std::io::Result<()> {\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// let file_copy = f.try_clone()?;\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let file_copy = file.try_clone()?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// Assuming there\u2019s a file named `foo.txt` with contents `abcdef\\n`, create\n+    /// two handles, seek one of them, and read the remaining bytes from the\n+    /// other handle:\n+    ///\n+    /// ```no_run\n+    /// use std::fs::File;\n+    /// use std::io::SeekFrom;\n+    /// use std::io::prelude::*;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let mut file_copy = file.try_clone()?;\n+    ///\n+    /// file.seek(SeekFrom::Start(3))?;\n+    ///\n+    /// let mut contents = vec![];\n+    /// file_copy.read_to_end(&mut contents)?;\n+    /// assert_eq!(contents, b\"def\\n\");\n     /// # Ok(())\n     /// # }\n     /// ```\n@@ -1001,7 +1023,7 @@ impl Metadata {\n         self.0.accessed().map(FromInner::from_inner)\n     }\n \n-    /// Returns the creation time listed in the this metadata.\n+    /// Returns the creation time listed in this metadata.\n     ///\n     /// The returned value corresponds to the `birthtime` field of `stat` on\n     /// Unix platforms and the `ftCreationTime` field on Windows platforms."}, {"sha": "78a3b82546e3a93258d753b810c6846f45ad1da9", "filename": "src/libstd/sys/cloudabi/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fthread.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -111,10 +111,11 @@ impl Drop for Thread {\n \n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    pub unsafe fn current() -> Option<usize> {\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> {\n         None\n     }\n-    pub unsafe fn init() -> Option<usize> {\n+    pub unsafe fn init() -> Option<Guard> {\n         None\n     }\n }"}, {"sha": "c4719a94c7e9dfa15252e216af2180c62b886a14", "filename": "src/libstd/sys/redox/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -88,6 +88,7 @@ impl Thread {\n }\n \n pub mod guard {\n-    pub unsafe fn current() -> Option<usize> { None }\n-    pub unsafe fn init() -> Option<usize> { None }\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> { None }\n+    pub unsafe fn init() -> Option<Guard> { None }\n }"}, {"sha": "40453f9b8a15b4e1dcdb2ddf64bb18332f33a734", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -57,9 +57,6 @@ mod imp {\n     use sys_common::thread_info;\n \n \n-    // This is initialized in init() and only read from after\n-    static mut PAGE_SIZE: usize = 0;\n-\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n         #[repr(C)]\n@@ -102,12 +99,12 @@ mod imp {\n                                     _data: *mut libc::c_void) {\n         use sys_common::util::report_overflow;\n \n-        let guard = thread_info::stack_guard().unwrap_or(0);\n+        let guard = thread_info::stack_guard().unwrap_or(0..0);\n         let addr = siginfo_si_addr(info);\n \n         // If the faulting address is within the guard page, then we print a\n         // message saying so and abort.\n-        if guard != 0 && guard - PAGE_SIZE <= addr && addr < guard {\n+        if guard.start <= addr && addr < guard.end {\n             report_overflow();\n             rtabort!(\"stack overflow\");\n         } else {\n@@ -123,8 +120,6 @@ mod imp {\n     static mut MAIN_ALTSTACK: *mut libc::c_void = ptr::null_mut();\n \n     pub unsafe fn init() {\n-        PAGE_SIZE = ::sys::os::page_size();\n-\n         let mut action: sigaction = mem::zeroed();\n         action.sa_flags = SA_SIGINFO | SA_ONSTACK;\n         action.sa_sigaction = signal_handler as sighandler_t;"}, {"sha": "72cdb9440b8e7e3bdae6a51ebf554f0268dbdf10", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 70, "deletions": 45, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -205,8 +205,10 @@ impl Drop for Thread {\n           not(target_os = \"solaris\")))]\n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    pub unsafe fn current() -> Option<usize> { None }\n-    pub unsafe fn init() -> Option<usize> { None }\n+    use ops::Range;\n+    pub type Guard = Range<usize>;\n+    pub unsafe fn current() -> Option<Guard> { None }\n+    pub unsafe fn init() -> Option<Guard> { None }\n }\n \n \n@@ -222,14 +224,43 @@ pub mod guard {\n     use libc;\n     use libc::mmap;\n     use libc::{PROT_NONE, MAP_PRIVATE, MAP_ANON, MAP_FAILED, MAP_FIXED};\n+    use ops::Range;\n     use sys::os;\n \n-    #[cfg(any(target_os = \"macos\",\n-              target_os = \"bitrig\",\n-              target_os = \"openbsd\",\n-              target_os = \"solaris\"))]\n+    // This is initialized in init() and only read from after\n+    static mut PAGE_SIZE: usize = 0;\n+\n+    pub type Guard = Range<usize>;\n+\n+    #[cfg(target_os = \"solaris\")]\n+    unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n+        let mut current_stack: libc::stack_t = ::mem::zeroed();\n+        assert_eq!(libc::stack_getbounds(&mut current_stack), 0);\n+        Some(current_stack.ss_sp)\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n-        current().map(|s| s as *mut libc::c_void)\n+        let stackaddr = libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -\n+             libc::pthread_get_stacksize_np(libc::pthread_self());\n+        Some(stackaddr as *mut libc::c_void)\n+    }\n+\n+    #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n+    unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n+        let mut current_stack: libc::stack_t = ::mem::zeroed();\n+        assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(),\n+                                             &mut current_stack), 0);\n+\n+        let extra = if cfg!(target_os = \"bitrig\") {3} else {1} * PAGE_SIZE;\n+        let stackaddr = if libc::pthread_main_np() == 1 {\n+            // main thread\n+            current_stack.ss_sp as usize - current_stack.ss_size + extra\n+        } else {\n+            // new thread\n+            current_stack.ss_sp as usize - current_stack.ss_size\n+        };\n+        Some(stackaddr as *mut libc::c_void)\n     }\n \n     #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n@@ -253,8 +284,9 @@ pub mod guard {\n         ret\n     }\n \n-    pub unsafe fn init() -> Option<usize> {\n-        let psize = os::page_size();\n+    pub unsafe fn init() -> Option<Guard> {\n+        PAGE_SIZE = os::page_size();\n+\n         let mut stackaddr = get_stack_start()?;\n \n         // Ensure stackaddr is page aligned! A parent process might\n@@ -263,9 +295,9 @@ pub mod guard {\n         // stackaddr < stackaddr + stacksize, so if stackaddr is not\n         // page-aligned, calculate the fix such that stackaddr <\n         // new_page_aligned_stackaddr < stackaddr + stacksize\n-        let remainder = (stackaddr as usize) % psize;\n+        let remainder = (stackaddr as usize) % PAGE_SIZE;\n         if remainder != 0 {\n-            stackaddr = ((stackaddr as usize) + psize - remainder)\n+            stackaddr = ((stackaddr as usize) + PAGE_SIZE - remainder)\n                 as *mut libc::c_void;\n         }\n \n@@ -280,60 +312,42 @@ pub mod guard {\n             // Instead, we'll just note where we expect rlimit to start\n             // faulting, so our handler can report \"stack overflow\", and\n             // trust that the kernel's own stack guard will work.\n-            Some(stackaddr as usize)\n+            let stackaddr = stackaddr as usize;\n+            Some(stackaddr - PAGE_SIZE..stackaddr)\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on\n             // stack overflow.\n-            let result = mmap(stackaddr, psize, PROT_NONE,\n+            let result = mmap(stackaddr, PAGE_SIZE, PROT_NONE,\n                               MAP_PRIVATE | MAP_ANON | MAP_FIXED, -1, 0);\n \n             if result != stackaddr || result == MAP_FAILED {\n                 panic!(\"failed to allocate a guard page\");\n             }\n \n+            let guardaddr = stackaddr as usize;\n             let offset = if cfg!(target_os = \"freebsd\") {\n                 2\n             } else {\n                 1\n             };\n \n-            Some(stackaddr as usize + offset * psize)\n+            Some(guardaddr..guardaddr + offset * PAGE_SIZE)\n         }\n     }\n \n-    #[cfg(target_os = \"solaris\")]\n-    pub unsafe fn current() -> Option<usize> {\n-        let mut current_stack: libc::stack_t = ::mem::zeroed();\n-        assert_eq!(libc::stack_getbounds(&mut current_stack), 0);\n-        Some(current_stack.ss_sp as usize)\n-    }\n-\n-    #[cfg(target_os = \"macos\")]\n-    pub unsafe fn current() -> Option<usize> {\n-        Some(libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -\n-             libc::pthread_get_stacksize_np(libc::pthread_self()))\n-    }\n-\n-    #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n-    pub unsafe fn current() -> Option<usize> {\n-        let mut current_stack: libc::stack_t = ::mem::zeroed();\n-        assert_eq!(libc::pthread_stackseg_np(libc::pthread_self(),\n-                                             &mut current_stack), 0);\n-\n-        let extra = if cfg!(target_os = \"bitrig\") {3} else {1} * os::page_size();\n-        Some(if libc::pthread_main_np() == 1 {\n-            // main thread\n-            current_stack.ss_sp as usize - current_stack.ss_size + extra\n-        } else {\n-            // new thread\n-            current_stack.ss_sp as usize - current_stack.ss_size\n-        })\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"bitrig\",\n+              target_os = \"openbsd\",\n+              target_os = \"solaris\"))]\n+    pub unsafe fn current() -> Option<Guard> {\n+        let stackaddr = get_stack_start()? as usize;\n+        Some(stackaddr - PAGE_SIZE..stackaddr)\n     }\n \n     #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n               target_os = \"linux\", target_os = \"netbsd\", target_os = \"l4re\"))]\n-    pub unsafe fn current() -> Option<usize> {\n+    pub unsafe fn current() -> Option<Guard> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n@@ -352,12 +366,23 @@ pub mod guard {\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut size), 0);\n \n+            let stackaddr = stackaddr as usize;\n             ret = if cfg!(target_os = \"freebsd\") {\n-                Some(stackaddr as usize - guardsize)\n+                // FIXME does freebsd really fault *below* the guard addr?\n+                let guardaddr = stackaddr - guardsize;\n+                Some(guardaddr - PAGE_SIZE..guardaddr)\n             } else if cfg!(target_os = \"netbsd\") {\n-                Some(stackaddr as usize)\n+                Some(stackaddr - guardsize..stackaddr)\n+            } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n+                // glibc used to include the guard area within the stack, as noted in the BUGS\n+                // section of `man pthread_attr_getguardsize`.  This has been corrected starting\n+                // with glibc 2.27, and in some distro backports, so the guard is now placed at the\n+                // end (below) the stack.  There's no easy way for us to know which we have at\n+                // runtime, so we'll just match any fault in the range right above or below the\n+                // stack base to call that fault a stack overflow.\n+                Some(stackaddr - guardsize..stackaddr + guardsize)\n             } else {\n-                Some(stackaddr as usize + guardsize)\n+                Some(stackaddr..stackaddr + guardsize)\n             };\n         }\n         assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);"}, {"sha": "6a066509b492a6c1adac441367f233e1ed7c2726", "filename": "src/libstd/sys/wasm/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fthread.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -43,6 +43,7 @@ impl Thread {\n }\n \n pub mod guard {\n-    pub unsafe fn current() -> Option<usize> { None }\n-    pub unsafe fn init() -> Option<usize> { None }\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> { None }\n+    pub unsafe fn init() -> Option<Guard> { None }\n }"}, {"sha": "43abfbb1f645e9852974df82d7a26f2dc706787d", "filename": "src/libstd/sys/windows/thread.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -93,6 +93,7 @@ impl Thread {\n \n #[cfg_attr(test, allow(dead_code))]\n pub mod guard {\n-    pub unsafe fn current() -> Option<usize> { None }\n-    pub unsafe fn init() -> Option<usize> { None }\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> { None }\n+    pub unsafe fn init() -> Option<Guard> { None }\n }"}, {"sha": "6a2b6742367a5b4ce6032cfe943b9708fb9b9da9", "filename": "src/libstd/sys_common/thread_info.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibstd%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_info.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -11,10 +11,11 @@\n #![allow(dead_code)] // stack_guard isn't used right now on all platforms\n \n use cell::RefCell;\n+use sys::thread::guard::Guard;\n use thread::Thread;\n \n struct ThreadInfo {\n-    stack_guard: Option<usize>,\n+    stack_guard: Option<Guard>,\n     thread: Thread,\n }\n \n@@ -38,11 +39,11 @@ pub fn current_thread() -> Option<Thread> {\n     ThreadInfo::with(|info| info.thread.clone())\n }\n \n-pub fn stack_guard() -> Option<usize> {\n-    ThreadInfo::with(|info| info.stack_guard).and_then(|o| o)\n+pub fn stack_guard() -> Option<Guard> {\n+    ThreadInfo::with(|info| info.stack_guard.clone()).and_then(|o| o)\n }\n \n-pub fn set(stack_guard: Option<usize>, thread: Thread) {\n+pub fn set(stack_guard: Option<Guard>, thread: Thread) {\n     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{\n         stack_guard,"}, {"sha": "c7ab6158256bae9fd624d77345123f6f1142b109", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -883,7 +883,6 @@ pub struct Arm {\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n-    pub beginning_vert: Option<Span>, // For RFC 1925 feature gate\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "2e6de96d65a6dfcd86cce0cfcec93d06037c1d1a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -883,7 +883,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             pats,\n             guard: None,\n             body: expr,\n-            beginning_vert: None,\n         }\n     }\n "}, {"sha": "3e858c3b923a1154d218359b1f928bc37b9a6fe6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -386,9 +386,6 @@ declare_features! (\n     // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n     (active, fn_must_use, \"1.21.0\", Some(43302)),\n \n-    // allow '|' at beginning of match arms (RFC 1925)\n-    (active, match_beginning_vert, \"1.21.0\", Some(44101)),\n-\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109)),\n \n@@ -545,6 +542,8 @@ declare_features! (\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167)),\n     // Allows `repr(align(16))` struct attribute (RFC 1358)\n     (accepted, repr_align, \"1.24.0\", Some(33626)),\n+    // allow '|' at beginning of match arms (RFC 1925)\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1683,11 +1682,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_arm(&mut self, arm: &'a ast::Arm) {\n-        if let Some(span) = arm.beginning_vert {\n-            gate_feature_post!(&self, match_beginning_vert,\n-                               span,\n-                               \"Use of a '|' at the beginning of a match arm is experimental\")\n-        }\n         visit::walk_arm(self, arm)\n     }\n "}, {"sha": "921ed3565a47197400fa72c6d560366516cb16bf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -340,14 +340,13 @@ pub fn fold_thin_attrs<T: Folder>(attrs: ThinVec<Attribute>, fld: &mut T) -> Thi\n     fold_attrs(attrs.into(), fld).into()\n }\n \n-pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body, beginning_vert}: Arm,\n+pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm,\n     fld: &mut T) -> Arm {\n     Arm {\n         attrs: fold_attrs(attrs, fld),\n         pats: pats.move_map(|x| fld.fold_pat(x)),\n         guard: guard.map(|x| fld.fold_expr(x)),\n         body: fld.fold_expr(body),\n-        beginning_vert,\n     }\n }\n "}, {"sha": "764b3d0a848eee508d57339441ea63fb35654339", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -3398,11 +3398,7 @@ impl<'a> Parser<'a> {\n \n         let attrs = self.parse_outer_attributes()?;\n         // Allow a '|' before the pats (RFC 1925)\n-        let beginning_vert = if self.eat(&token::BinOp(token::Or)) {\n-            Some(self.prev_span)\n-        } else {\n-            None\n-        };\n+        self.eat(&token::BinOp(token::Or));\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(keywords::If) {\n             Some(self.parse_expr()?)\n@@ -3426,7 +3422,6 @@ impl<'a> Parser<'a> {\n             pats,\n             guard,\n             body: expr,\n-            beginning_vert,\n         })\n     }\n "}, {"sha": "4a489f1edb3b8cbf5f509f29ef7fc0f0409b705b", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -15,7 +15,7 @@\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows\n-// no-system-llvm\n+// min-system-llvm-version 5.0\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "401125cef09d8a89be92b24e2d6ecdf656bb2029", "filename": "src/test/compile-fail/const-typeid-of.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::any::TypeId;\n+\n+struct A;\n+\n+fn main() {\n+    const A_ID: TypeId = TypeId::of::<A>();\n+    //~^ ERROR `std::any::TypeId::of` is not yet stable as a const fn\n+}"}, {"sha": "2a4295fd90a264c2513b6007894d21b612e5331d", "filename": "src/test/compile-fail/nll/do-not-ignore-lifetime-bounds-in-copy.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the 'static bound from the Copy impl is respected. Regression test for #29149.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)] struct Foo<'a>(&'a u32);\n+impl Copy for Foo<'static> {}\n+\n+fn main() {\n+    let s = 2;\n+    let a = Foo(&s); //~ ERROR `s` does not live long enough [E0597]\n+    drop(a);\n+    drop(a);\n+}"}, {"sha": "ce29e55c6d7202ff705fc5ec0fe1bb924301aa7b", "filename": "src/test/run-pass/const-typeid-of.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+#![feature(const_type_id)]\n+\n+use std::any::TypeId;\n+\n+struct A;\n+\n+static ID_ISIZE: TypeId = TypeId::of::<isize>();\n+\n+pub fn main() {\n+    assert_eq!(ID_ISIZE, TypeId::of::<isize>());\n+\n+    // sanity test of TypeId\n+    const T: (TypeId, TypeId, TypeId) = (TypeId::of::<usize>(),\n+                     TypeId::of::<&'static str>(),\n+                     TypeId::of::<A>());\n+    let (d, e, f) = (TypeId::of::<usize>(), TypeId::of::<&'static str>(),\n+                     TypeId::of::<A>());\n+\n+    assert!(T.0 != T.1);\n+    assert!(T.0 != T.2);\n+    assert!(T.1 != T.2);\n+\n+    assert_eq!(T.0, d);\n+    assert_eq!(T.1, e);\n+    assert_eq!(T.2, f);\n+\n+    // Check fn pointer against collisions\n+    const F: (TypeId, TypeId) = (TypeId::of::<fn(fn(A) -> A) -> A>(),\n+            TypeId::of::<fn(fn() -> A, A) -> A>());\n+\n+    assert!(F.0 != F.1);\n+}"}, {"sha": "cdacfb2f057298e500522b53ddcdd5d254d41ee2", "filename": "src/test/run-pass/match-beginning-vert.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fmatch-beginning-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fmatch-beginning-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-beginning-vert.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    A,\n+    B,\n+    C,\n+    D,\n+    E,\n+}\n+use Foo::*;\n+\n+fn main() {\n+    for foo in &[A, B, C, D, E] {\n+        match *foo {\n+            | A => println!(\"A\"),\n+            | B | C if 1 < 2 => println!(\"BC!\"),\n+            | _ => {},\n+        }\n+    }\n+}"}, {"sha": "4deced1297bd11d78332c3f28f7a70b15d9e1c94", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -15,7 +15,7 @@\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n // ignore-pretty\n-// no-system-llvm\n+// min-system-llvm-version 5.0\n // compile-flags: -C lto\n // no-prefer-dynamic\n "}, {"sha": "4224a65ffd7c71da83ff371af64a6c393338da77", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -14,7 +14,7 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n-// no-system-llvm\n+// min-system-llvm-version 5.0\n \n use std::mem;\n use std::process::Command;"}, {"sha": "9fed67ee583d2f2a062d4c7b22fe504624182731", "filename": "src/test/rustdoc/const-evalutation-ice.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frustdoc%2Fconst-evalutation-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Frustdoc%2Fconst-evalutation-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-evalutation-ice.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Just check if we don't get an ICE for the _S type.\n+\n+#![feature(const_size_of)]\n+\n+use std::cell::Cell;\n+use std::mem;\n+\n+pub struct S {\n+    s: Cell<usize>\n+}\n+\n+pub type _S = [usize; 0 - (mem::size_of::<S>() != 4) as usize];"}, {"sha": "9085563c99d6d5db3c0cd289a4f162e6f4c69cc7", "filename": "src/test/ui/feature-gate-match_beginning_vert.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.rs?ref=0c6091fbd0eee290c651f73be899f221eeab3c05", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[allow(dead_code)]\n-enum Foo {\n-    A,\n-    B,\n-    C,\n-    D,\n-    E,\n-}\n-use Foo::*;\n-\n-fn main() {\n-    let x = Foo::A;\n-    match x {\n-        | A => println!(\"A\"),\n-        //~^ ERROR: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-        | B | C => println!(\"BC!\"),\n-        //~^ ERROR: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-        | _ => {},\n-        //~^ ERROR: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-    };\n-    match x {\n-        A | B | C => println!(\"ABC!\"),\n-        _ => {},\n-    };\n-}\n-"}, {"sha": "1d45dedb4971c28ee8113085badbc3948b8454c0", "filename": "src/test/ui/feature-gate-match_beginning_vert.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c6091fbd0eee290c651f73be899f221eeab3c05/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr?ref=0c6091fbd0eee290c651f73be899f221eeab3c05", "patch": "@@ -1,26 +0,0 @@\n-error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-  --> $DIR/feature-gate-match_beginning_vert.rs:24:9\n-   |\n-24 |         | A => println!(\"A\"),\n-   |         ^\n-   |\n-   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n-\n-error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-  --> $DIR/feature-gate-match_beginning_vert.rs:26:9\n-   |\n-26 |         | B | C => println!(\"BC!\"),\n-   |         ^\n-   |\n-   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n-\n-error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n-  --> $DIR/feature-gate-match_beginning_vert.rs:28:9\n-   |\n-28 |         | _ => {},\n-   |         ^\n-   |\n-   = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "b4e6c5074e3d394b331b5b0f815bb42dece60178", "filename": "src/test/ui/lint/issue-47775-nested-macro-unnecessary-parens-arg.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![warn(unused_parens)]\n+\n+macro_rules! the_worship_the_heart_lifts_above {\n+    ( @as_expr, $e:expr) => { $e };\n+    ( @generate_fn, $name:tt) => {\n+        #[allow(dead_code)] fn the_moth_for_the_star<'a>() -> Option<&'a str> {\n+            Some(the_worship_the_heart_lifts_above!( @as_expr, $name ))\n+        }\n+    };\n+    ( $name:ident ) => { the_worship_the_heart_lifts_above!( @generate_fn, (stringify!($name))); }\n+    // \u2191 Notably, this does \ud835\ude2f\ud835\ude30\ud835\ude35 warn: we're declining to lint unused parens in\n+    // function/method arguments inside of nested macros because of situations\n+    // like those reported in Issue #47775\n+}\n+\n+macro_rules! and_the_heavens_reject_not {\n+    () => {\n+        // \u2193 But let's test that we still lint for unused parens around\n+        // function args inside of simple, one-deep macros.\n+        #[allow(dead_code)] fn the_night_for_the_morrow() -> Option<isize> { Some((2)) }\n+        //~^ WARN unnecessary parentheses around function argument\n+    }\n+}\n+\n+the_worship_the_heart_lifts_above!(rah);\n+and_the_heavens_reject_not!();\n+\n+fn main() {}"}, {"sha": "097ec1b1c80109a36923f3a67405a302bd956d6e", "filename": "src/test/ui/lint/issue-47775-nested-macro-unnecessary-parens-arg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -0,0 +1,15 @@\n+warning: unnecessary parentheses around function argument\n+  --> $DIR/issue-47775-nested-macro-unnecessary-parens-arg.rs:32:83\n+   |\n+32 |         #[allow(dead_code)] fn the_night_for_the_morrow() -> Option<isize> { Some((2)) }\n+   |                                                                                   ^^^ help: remove these parentheses\n+...\n+38 | and_the_heavens_reject_not!();\n+   | ------------------------------ in this macro invocation\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47775-nested-macro-unnecessary-parens-arg.rs:13:9\n+   |\n+13 | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+"}, {"sha": "80750f9a3fee08081a8392829887462a6badc20c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -167,7 +167,7 @@ impl EarlyProps {\n                         .expect(\"Malformed llvm version directive\");\n                     // Ignore if using system LLVM and actual version\n                     // is smaller the minimum required version\n-                    !(config.system_llvm && &actual_version[..] < min_version)\n+                    config.system_llvm && &actual_version[..] < min_version\n                 } else {\n                     false\n                 }"}, {"sha": "46df211cbaf65f225df1c55278e5a3b39c51c5aa", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=e7e982ac03b496dd4d4b5c182fdcd5fb4f2b5470", "patch": "@@ -79,7 +79,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n     let mut results = Vec::new();\n     let mut mismatch = Mismatch::new(0);\n \n-    for result in diff::lines(actual, expected) {\n+    for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n                 if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n@@ -91,7 +91,8 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                     mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n-                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Right(str) => {\n@@ -104,8 +105,7 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n                     mismatch.lines.push(DiffLine::Context(line.to_owned()));\n                 }\n \n-                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n-                line_number += 1;\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n                 lines_since_mismatch = 0;\n             }\n             diff::Result::Both(str, _) => {"}]}