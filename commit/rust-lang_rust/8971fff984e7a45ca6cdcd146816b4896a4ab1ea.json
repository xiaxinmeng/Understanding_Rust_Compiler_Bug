{"sha": "8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NzFmZmY5ODRlN2E0NWNhNmNkY2QxNDY4MTZiNDg5NmE0YWIxZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T13:11:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-29T13:11:16Z"}, "message": "Auto merge of #86009 - cjgillot:fwarn, r=davidtwco\n\nMake ForceWarn a lint level.\n\nFollow-up to #85788\ncc `@rylev`", "tree": {"sha": "2140a47a98c593edf9a95656598468d70c5f11a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2140a47a98c593edf9a95656598468d70c5f11a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "html_url": "https://github.com/rust-lang/rust/commit/8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d0fae5b66ea33e667c8e1f7cceaca0c3653597c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0fae5b66ea33e667c8e1f7cceaca0c3653597c", "html_url": "https://github.com/rust-lang/rust/commit/5d0fae5b66ea33e667c8e1f7cceaca0c3653597c"}, {"sha": "e42271db0d8ee14f0599e7b72625bb2f133f5cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42271db0d8ee14f0599e7b72625bb2f133f5cac", "html_url": "https://github.com/rust-lang/rust/commit/e42271db0d8ee14f0599e7b72625bb2f133f5cac"}], "stats": {"total": 124, "additions": 48, "deletions": 76}, "files": [{"sha": "00869ac3c9a2bcdf0d41fc055c7996203f4d63c3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -334,14 +334,8 @@ impl LintStore {\n         }\n     }\n \n-    /// Checks the validity of lint names derived from the command line. Returns\n-    /// true if the lint is valid, false otherwise.\n-    pub fn check_lint_name_cmdline(\n-        &self,\n-        sess: &Session,\n-        lint_name: &str,\n-        level: Option<Level>,\n-    ) -> bool {\n+    /// Checks the validity of lint names derived from the command line\n+    pub fn check_lint_name_cmdline(&self, sess: &Session, lint_name: &str, level: Level) {\n         let db = match self.check_lint_name(lint_name, None) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n@@ -367,23 +361,19 @@ impl LintStore {\n         };\n \n         if let Some(mut db) = db {\n-            if let Some(level) = level {\n-                let msg = format!(\n-                    \"requested on the command line with `{} {}`\",\n-                    match level {\n-                        Level::Allow => \"-A\",\n-                        Level::Warn => \"-W\",\n-                        Level::Deny => \"-D\",\n-                        Level::Forbid => \"-F\",\n-                    },\n-                    lint_name\n-                );\n-                db.note(&msg);\n-            }\n+            let msg = format!(\n+                \"requested on the command line with `{} {}`\",\n+                match level {\n+                    Level::Allow => \"-A\",\n+                    Level::Warn => \"-W\",\n+                    Level::ForceWarn => \"--force-warns\",\n+                    Level::Deny => \"-D\",\n+                    Level::Forbid => \"-F\",\n+                },\n+                lint_name\n+            );\n+            db.note(&msg);\n             db.emit();\n-            false\n-        } else {\n-            true\n         }\n     }\n "}, {"sha": "c0a059b92aa9ff27536a06c0528ab25799c29bca", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -88,7 +88,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, Some(level));\n+            store.check_lint_name_cmdline(sess, &lint_name, level);\n             let orig_level = level;\n \n             // If the cap is less than this specified level, e.g., if we've got\n@@ -110,12 +110,13 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         for lint_name in &sess.opts.force_warns {\n-            let valid = store.check_lint_name_cmdline(sess, lint_name, None);\n-            if valid {\n-                let lints = store\n-                    .find_lints(lint_name)\n-                    .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n-                self.sets.force_warns.extend(&lints);\n+            store.check_lint_name_cmdline(sess, lint_name, Level::ForceWarn);\n+            let lints = store\n+                .find_lints(lint_name)\n+                .unwrap_or_else(|_| bug!(\"A valid lint failed to produce a lint ids\"));\n+            for id in lints {\n+                let src = LintLevelSource::CommandLine(Symbol::intern(lint_name), Level::ForceWarn);\n+                specs.insert(id, (Level::ForceWarn, src));\n             }\n         }\n \n@@ -131,16 +132,16 @@ impl<'s> LintLevelsBuilder<'s> {\n         id: LintId,\n         (level, src): LevelAndSource,\n     ) {\n+        let (old_level, old_src) =\n+            self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n         // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n         //\n         // This means that this only errors if we're truly lowering the lint\n         // level from forbid.\n         if level != Level::Forbid {\n-            if let (Level::Forbid, old_src) =\n-                self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess)\n-            {\n+            if let Level::Forbid = old_level {\n                 // Backwards compatibility check:\n                 //\n                 // We used to not consider `forbid(lint_group)`\n@@ -152,9 +153,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                     LintLevelSource::Default => false,\n                     LintLevelSource::Node(symbol, _, _) => self.store.is_lint_group(symbol),\n                     LintLevelSource::CommandLine(symbol, _) => self.store.is_lint_group(symbol),\n-                    LintLevelSource::ForceWarn(_symbol) => {\n-                        bug!(\"forced warn lint returned a forbid lint level\")\n-                    }\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n@@ -179,7 +177,6 @@ impl<'s> LintLevelsBuilder<'s> {\n                         LintLevelSource::CommandLine(_, _) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\");\n                         }\n-                        _ => bug!(\"forced warn lint returned a forbid lint level\"),\n                     }\n                     diag_builder.emit();\n                 };\n@@ -216,7 +213,11 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n             }\n         }\n-        specs.insert(id, (level, src));\n+        if let Level::ForceWarn = old_level {\n+            specs.insert(id, (old_level, old_src));\n+        } else {\n+            specs.insert(id, (level, src));\n+        }\n     }\n \n     /// Pushes a list of AST lint attributes onto this context."}, {"sha": "89453e8e73a2bc4fd7c440136995a9d2bf34b5f5", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -51,6 +51,7 @@ pub enum Applicability {\n pub enum Level {\n     Allow,\n     Warn,\n+    ForceWarn,\n     Deny,\n     Forbid,\n }\n@@ -63,6 +64,7 @@ impl Level {\n         match self {\n             Level::Allow => \"allow\",\n             Level::Warn => \"warn\",\n+            Level::ForceWarn => \"force-warns\",\n             Level::Deny => \"deny\",\n             Level::Forbid => \"forbid\",\n         }"}, {"sha": "7ac7720a7c56367afbf09be4eeb1975d2ccf9ff6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -1,7 +1,7 @@\n use std::cmp;\n \n use crate::ich::StableHashingContext;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n@@ -28,9 +28,6 @@ pub enum LintLevelSource {\n     /// The provided `Level` is the level specified on the command line.\n     /// (The actual level may be lower due to `--cap-lints`.)\n     CommandLine(Symbol, Level),\n-\n-    /// Lint is being forced to warn no matter what.\n-    ForceWarn(Symbol),\n }\n \n impl LintLevelSource {\n@@ -39,7 +36,6 @@ impl LintLevelSource {\n             LintLevelSource::Default => symbol::kw::Default,\n             LintLevelSource::Node(name, _, _) => name,\n             LintLevelSource::CommandLine(name, _) => name,\n-            LintLevelSource::ForceWarn(name) => name,\n         }\n     }\n \n@@ -48,7 +44,6 @@ impl LintLevelSource {\n             LintLevelSource::Default => DUMMY_SP,\n             LintLevelSource::Node(_, span, _) => span,\n             LintLevelSource::CommandLine(_, _) => DUMMY_SP,\n-            LintLevelSource::ForceWarn(_) => DUMMY_SP,\n         }\n     }\n }\n@@ -60,7 +55,6 @@ pub type LevelAndSource = (Level, LintLevelSource);\n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n     pub lint_cap: Level,\n-    pub force_warns: FxHashSet<LintId>,\n }\n \n #[derive(Debug)]\n@@ -79,11 +73,7 @@ pub enum LintSet {\n \n impl LintLevelSets {\n     pub fn new() -> Self {\n-        LintLevelSets {\n-            list: Vec::new(),\n-            lint_cap: Level::Forbid,\n-            force_warns: FxHashSet::default(),\n-        }\n+        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n     }\n \n     pub fn get_lint_level(\n@@ -93,11 +83,6 @@ impl LintLevelSets {\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n     ) -> LevelAndSource {\n-        // Check whether we should always warn\n-        if self.force_warns.contains(&LintId::of(lint)) {\n-            return (Level::Warn, LintLevelSource::ForceWarn(Symbol::intern(lint.name)));\n-        }\n-\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -191,11 +176,11 @@ impl LintLevelMap {\n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let LintLevelMap { ref sets, ref id_to_set, .. } = *self;\n+        let LintLevelMap { ref sets, ref id_to_set } = *self;\n \n         id_to_set.hash_stable(hcx, hasher);\n \n-        let LintLevelSets { ref list, lint_cap, .. } = *sets;\n+        let LintLevelSets { ref list, lint_cap } = *sets;\n \n         lint_cap.hash_stable(hcx, hasher);\n \n@@ -273,8 +258,8 @@ pub fn struct_lint_level<'s, 'd>(\n                     return;\n                 }\n             }\n-            (Level::Warn, Some(span)) => sess.struct_span_warn(span, \"\"),\n-            (Level::Warn, None) => sess.struct_warn(\"\"),\n+            (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n+            (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => sess.struct_span_err(span, \"\"),\n             (Level::Deny | Level::Forbid, None) => sess.struct_err(\"\"),\n         };\n@@ -316,6 +301,7 @@ pub fn struct_lint_level<'s, 'd>(\n                     Level::Deny => \"-D\",\n                     Level::Forbid => \"-F\",\n                     Level::Allow => \"-A\",\n+                    Level::ForceWarn => \"--force-warns\",\n                 };\n                 let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n                 if lint_flag_val.as_str() == name {\n@@ -361,13 +347,6 @@ pub fn struct_lint_level<'s, 'd>(\n                     );\n                 }\n             }\n-            LintLevelSource::ForceWarn(_) => {\n-                sess.diag_note_once(\n-                    &mut err,\n-                    DiagnosticMessageId::from(lint),\n-                    \"warning forced by `force-warns` commandline option\",\n-                );\n-            }\n         }\n \n         err.code(DiagnosticId::Lint { name, has_future_breakage });"}, {"sha": "37c61e614f3e338f2a9db94d16fb7e851ac5d142", "filename": "src/test/ui/lint/force-warn/force-allowed-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-by-default-lint.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: hidden lifetime parameters in types are deprecated\n LL | fn foo(x: &Foo) {}\n    |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns elided-lifetimes-in-paths`\n \n warning: 1 warning emitted\n "}, {"sha": "56b2f0236a5d373c4f037e0eef314b98141fc011", "filename": "src/test/ui/lint/force-warn/force-allowed-deny-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny-by-default-lint.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -6,7 +6,7 @@ LL | const C: i32 = 1 / 0;\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "7eb980a129708d8f4e2bc562d9463bb1f767ff1e", "filename": "src/test/ui/lint/force-warn/force-allowed-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: function is never used: `dead_function`\n LL | fn dead_function() {}\n    |    ^^^^^^^^^^^^^\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns dead-code`\n \n warning: 1 warning emitted\n "}, {"sha": "8b9bb5a74cfc10762a0174b8f8849d5ac7640515", "filename": "src/test/ui/lint/force-warn/force-deny-by-default-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-deny-by-default-lint.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -6,7 +6,7 @@ LL | const C: i32 = 1 / 0;\n    |                |\n    |                attempt to divide `1_i32` by zero\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns const-err`\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n "}, {"sha": "ebdb022f2a20b05770ff6b0f5805beaff854ff44", "filename": "src/test/ui/lint/force-warn/force-lint-allow-all-warnings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-allow-all-warnings.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: function is never used: `dead_function`\n LL | fn dead_function() {}\n    |    ^^^^^^^^^^^^^\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns dead-code`\n \n warning: 1 warning emitted\n "}, {"sha": "7429e77fe83e11aae881ec46aca12eb86b4d634e", "filename": "src/test/ui/lint/force-warn/force-lint-group-allow-all-warnings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-group-allow-all-warnings.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: function `FUNCTION` should have a snake case name\n LL | pub fn FUNCTION() {}\n    |        ^^^^^^^^ help: convert the identifier to snake case: `function`\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: `--force-warns non-snake-case` implied by `--force-warns nonstandard-style`\n \n warning: 1 warning emitted\n "}, {"sha": "4f7bba6bba1c9fdb5b5e282350631ec323432c18", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: requested on the command line with `--force-warns bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n "}, {"sha": "65de6c9e287f0045f52a30c7ae0efe9b77aba8d2", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: `--force-warns bare-trait-objects` implied by `--force-warns rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n "}, {"sha": "fd3397c916a6dc9c3580f1ac35f8576ece1ba685", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8971fff984e7a45ca6cdcd146816b4896a4ab1ea/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=8971fff984e7a45ca6cdcd146816b4896a4ab1ea", "patch": "@@ -4,7 +4,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = note: warning forced by `force-warns` commandline option\n+   = note: `--force-warns bare-trait-objects` implied by `--force-warns rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n "}]}