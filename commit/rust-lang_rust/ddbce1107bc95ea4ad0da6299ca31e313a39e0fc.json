{"sha": "ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYmNlMTEwN2JjOTVlYTRhZDBkYTYyOTljYTMxZTMxM2EzOWUwZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T14:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-29T14:47:23Z"}, "message": "Auto merge of #27380 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #27102, #27286, #27313, #27325, #27326, #27327, #27341, #27342, #27343, #27345, #27350, #27355, #27374, #27375, #27379\n- Failed merges:", "tree": {"sha": "585177068133e497fdca05340ca4642719aba505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/585177068133e497fdca05340ca4642719aba505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "html_url": "https://github.com/rust-lang/rust/commit/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc28298b9133e6a9cc39e276f9feff51d808949", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc28298b9133e6a9cc39e276f9feff51d808949", "html_url": "https://github.com/rust-lang/rust/commit/ddc28298b9133e6a9cc39e276f9feff51d808949"}, {"sha": "5944303339fac6f2aa100ae4d2ac5fb72814c4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5944303339fac6f2aa100ae4d2ac5fb72814c4e2", "html_url": "https://github.com/rust-lang/rust/commit/5944303339fac6f2aa100ae4d2ac5fb72814c4e2"}], "stats": {"total": 1052, "additions": 653, "deletions": 399}, "files": [{"sha": "2c8d78598b2d354233b928dc2eb5b71c0cab5f9a", "filename": "configure", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/configure", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -1005,11 +1005,9 @@ then\n         (''|*clang)\n         CFG_CLANG_REPORTED_VERSION=$($CFG_CC --version | grep version)\n \n-        if [[ $CFG_CLANG_REPORTED_VERSION == *\"(based on LLVM \"* ]]\n-        then\n+        if echo $CFG_CLANG_REPORTED_VERSION | grep -q \"(based on LLVM \"; then\n             CFG_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*(based on LLVM \\(.*\\))/\\1/')\n-        elif [[ $CFG_CLANG_REPORTED_VERSION == \"Apple LLVM\"* ]]\n-        then\n+        elif echo $CFG_CLANG_REPORTED_VERSION | grep -q \"Apple LLVM\"; then\n             CFG_OSX_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*version \\(.*\\) .*/\\1/')\n         else\n             CFG_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*version \\(.*\\) .*/\\1/')"}, {"sha": "a7d9032c3c5368b6fced1cfe3bec75730217228d", "filename": "src/doc/trpl/choosing-your-guarantees.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fchoosing-your-guarantees.md?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -42,7 +42,7 @@ allowed to share references to this by the regular borrowing rules, checked at c\n \n ## `&T` and `&mut T` \n \n-These are immutable and mutable references respectively. They follow the &lquo;read-write lock&rquo;\n+These are immutable and mutable references respectively. They follow the &ldquo;read-write lock&rdquo;\n pattern, such that one may either have only one mutable reference to some data, or any number of\n immutable ones, but not both. This guarantee is enforced at compile time, and has no visible cost at\n runtime. In most cases these two pointer types suffice for sharing cheap references between sections\n@@ -108,7 +108,7 @@ increment the inner reference count and return a copy of the `Rc<T>`.\n \n # Cell types\n \n-&lquo;Cell&rquo;s provide interior mutability. In other words, they contain data which can be manipulated even\n+`Cell`s provide interior mutability. In other words, they contain data which can be manipulated even\n if the type cannot be obtained in a mutable form (for example, when it is behind an `&`-ptr or\n `Rc<T>`).\n \n@@ -127,7 +127,8 @@ If a field is wrapped in `Cell`, it's a nice indicator that the chunk of data is\n stay the same between the time you first read it and when you intend to use it.\n \n ```rust\n-# use std::cell::Cell;\n+use std::cell::Cell;\n+\n let x = Cell::new(1);\n let y = &x;\n let z = &x;\n@@ -185,7 +186,8 @@ any other borrows active when a mutable borrow is active. If the programmer atte\n borrow, the thread will panic.\n \n ```rust\n-# use std::cell::RefCell;\n+use std::cell::RefCell;\n+\n let x = RefCell::new(vec![1,2,3,4]);\n {\n     println!(\"{:?}\", *x.borrow())"}, {"sha": "6989099206586b0726283ee1fd54dac7c31dac81", "filename": "src/doc/trpl/crates-and-modules.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcrates-and-modules.md?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -355,6 +355,10 @@ Hello in English: Hello!\n Goodbye in English: Goodbye.\n ```\n \n+`pub` also applies to `struct`s and their member fields. In keeping with Rust\u2019s\n+tendency toward safety, simply making a `struct` public won't automatically\n+make its members public: you must mark the fields individually with `pub`.\n+\n Now that our functions are public, we can use them. Great! However, typing out\n `phrases::english::greetings::hello()` is very long and repetitive. Rust has\n another keyword for importing names into the current scope, so that you can\n@@ -517,9 +521,6 @@ of `foo` relative to where we are. If that\u2019s prefixed with `::`, as in\n `::foo::bar()`, it refers to a different `foo`, an absolute path from your\n crate root.\n \n-Also, note that we `pub use`d before we declared our `mod`s. Rust requires that\n-`use` declarations go first.\n-\n This will build and run:\n \n ```bash"}, {"sha": "0cd4c60932acfb93782f15897b0396d229951f2a", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -499,7 +499,7 @@ generator, which is local to the particular [thread][concurrency] of execution\n we\u2019re in. Because we `use rand::Rng`\u2019d above, it has a `gen_range()` method\n available. This method takes two arguments, and generates a number between\n them. It\u2019s inclusive on the lower bound, but exclusive on the upper bound,\n-so we need `1` and `101` to get a number between one and a hundred.\n+so we need `1` and `101` to get a number ranging from one to a hundred.\n \n [concurrency]: concurrency.html\n "}, {"sha": "d1d836fe188ac3b021c410c1e17decd95352878d", "filename": "src/doc/trpl/intrinsics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fdoc%2Ftrpl%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fintrinsics.md?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,7 +11,7 @@ perform efficient pointer arithmetic, one would import those functions\n via a declaration like\n \n ```rust\n-# #![feature(intrinsics)]\n+#![feature(intrinsics)]\n # fn main() {}\n \n extern \"rust-intrinsic\" {"}, {"sha": "05308b3e9d85d07617531cfa55b5f5a07279e698", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -200,7 +200,8 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -337,7 +338,8 @@ impl<T: Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_unique)]\n+    /// #![feature(arc_unique)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let mut five = Arc::new(5);\n@@ -408,7 +410,8 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_unique, alloc)]\n+    /// #![feature(arc_unique, alloc)]\n+    ///\n     /// extern crate alloc;\n     /// # fn main() {\n     /// use alloc::arc::Arc;\n@@ -555,7 +558,8 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -599,7 +603,8 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::new(5).downgrade();\n@@ -626,7 +631,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(arc_weak)]\n+    /// #![feature(arc_weak)]\n+    ///\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "0c2e7eb6bb35c02d789ce891a1390e468c81901f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -75,7 +75,8 @@ use core::raw::{TraitObject};\n /// The following two examples are equivalent:\n ///\n /// ```\n-/// # #![feature(box_heap)]\n+/// #![feature(box_heap)]\n+///\n /// #![feature(box_syntax, placement_in_syntax)]\n /// use std::boxed::HEAP;\n ///\n@@ -241,7 +242,8 @@ impl<T : ?Sized> Box<T> {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(box_raw)]\n+    /// #![feature(box_raw)]\n+    ///\n     /// let seventeen = Box::new(17u32);\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n@@ -264,7 +266,8 @@ impl<T : ?Sized> Box<T> {\n ///\n /// # Examples\n /// ```\n-/// # #![feature(box_raw)]\n+/// #![feature(box_raw)]\n+///\n /// use std::boxed;\n ///\n /// let seventeen = Box::new(17u32);\n@@ -307,7 +310,8 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(box_raw)]\n+    /// #![feature(box_raw)]\n+    ///\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///"}, {"sha": "b4f993205d16b92733e35cecc9faa48ae0c3f5d7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -91,7 +91,8 @@\n //! documentation for more details on interior mutability.\n //!\n //! ```rust\n-//! # #![feature(rc_weak)]\n+//! #![feature(rc_weak)]\n+//!\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -227,7 +228,8 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let x = Rc::new(3);\n@@ -262,7 +264,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -292,7 +295,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -313,7 +317,8 @@ impl<T: ?Sized> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let mut x = Rc::new(3);\n@@ -353,7 +358,8 @@ pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { Rc::strong_count(this) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n@@ -373,7 +379,8 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool { Rc::is_unique(rc) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3);\n@@ -395,7 +402,8 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> { Rc::try_unwrap(rc) }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(rc_unique)]\n+/// #![feature(rc_unique)]\n+///\n /// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3);\n@@ -419,7 +427,8 @@ impl<T: Clone> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_unique)]\n+    /// #![feature(rc_unique)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let mut five = Rc::new(5);\n@@ -750,7 +759,8 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -778,7 +788,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -825,7 +836,8 @@ impl<T: ?Sized> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rc_weak)]\n+    /// #![feature(rc_weak)]\n+    ///\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::new(5).downgrade();"}, {"sha": "ddf61918947cfe8b8531dbf5fd920dce3e9592d2", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -216,7 +216,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n@@ -236,7 +237,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -341,7 +343,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n     ///\n@@ -387,7 +390,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     /// heap.push(1);\n@@ -419,7 +423,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     ///\n@@ -445,7 +450,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n@@ -463,7 +469,8 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     ///\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);\n@@ -724,7 +731,8 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///"}, {"sha": "30f23e073f691ac17f02945c55c412e0525a06de", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 98, "deletions": 49, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -43,7 +43,8 @@\n //! [sieve]: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n //!\n //! ```\n-//! # #![feature(bitset, bitvec, range_inclusive, step_by)]\n+//! #![feature(bitset, bitvec, range_inclusive, step_by)]\n+//!\n //! use std::collections::{BitSet, BitVec};\n //! use std::iter;\n //!\n@@ -139,7 +140,8 @@ const FALSE: &'static bool = &false;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(bitvec)]\n+/// #![feature(bitvec)]\n+///\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);\n@@ -256,7 +258,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     /// let mut bv = BitVec::new();\n     /// ```\n@@ -271,7 +274,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_elem(10, false);\n@@ -312,7 +316,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000, 0b00010010]);\n@@ -355,7 +360,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_fn(5, |i| { i % 2 == 0 });\n@@ -374,7 +380,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -407,7 +414,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, false);\n@@ -430,7 +438,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -451,7 +460,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -480,7 +490,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -511,7 +522,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -542,7 +554,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -572,7 +585,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, true);\n@@ -597,7 +611,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01110100, 0b10010010]);\n@@ -614,7 +629,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec, append)]\n+    /// #![feature(bitvec, append)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut a = BitVec::from_bytes(&[0b10000000]);\n@@ -657,7 +673,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec, split_off)]\n+    /// #![feature(bitvec, split_off)]\n+    ///\n     /// use std::collections::BitVec;\n     /// let mut a = BitVec::new();\n     /// a.push(true);\n@@ -718,7 +735,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -736,7 +754,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -758,7 +777,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, true);\n@@ -806,7 +826,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000]);\n@@ -827,7 +848,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -854,7 +876,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -885,7 +908,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -908,7 +932,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -930,7 +955,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -981,7 +1007,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001001]);\n@@ -1012,7 +1039,8 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitvec)]\n+    /// #![feature(bitvec)]\n+    ///\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -1231,7 +1259,8 @@ impl<'a> IntoIterator for &'a BitVec {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(bitvec, bitset)]\n+/// #![feature(bitvec, bitset)]\n+///\n /// use std::collections::{BitSet, BitVec};\n ///\n /// // It's a regular set\n@@ -1335,7 +1364,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1352,7 +1382,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1370,7 +1401,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -1392,7 +1424,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1414,7 +1447,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1441,7 +1475,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1462,7 +1497,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1483,7 +1519,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1530,7 +1567,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset)]\n+    /// #![feature(bitset)]\n+    ///\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1563,7 +1601,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let s = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01001010]));\n@@ -1585,7 +1624,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1615,7 +1655,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1646,7 +1687,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1684,7 +1726,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1712,7 +1755,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1736,7 +1780,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1761,7 +1806,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1794,7 +1840,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec)]\n+    /// #![feature(bitset, bitvec)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1818,7 +1865,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec, append)]\n+    /// #![feature(bitset, bitvec, append)]\n+    ///\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let mut a = BitSet::new();\n@@ -1849,7 +1897,8 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(bitset, bitvec, split_off)]\n+    /// #![feature(bitset, bitvec, split_off)]\n+    ///\n     /// use std::collections::{BitSet, BitVec};\n     /// let mut a = BitSet::new();\n     /// a.insert(2);"}, {"sha": "a5a0d864572d2bfb0c6eac7df63226705ddcf10c", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -1504,7 +1504,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -1531,7 +1532,8 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Excluded};\n     ///"}, {"sha": "596312e509edea09f556a5f08b04705ab63ccec5", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -141,7 +141,8 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(btree_range, collections_bound)]\n+    /// #![feature(btree_range, collections_bound)]\n+    ///\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///"}, {"sha": "7e16df6242fcc377dcc3f0eb8d0361dff69a686f", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -172,7 +172,7 @@\n //! like:\n //!\n //! ```\n-//! # #![feature(fmt_flags)]\n+//! #![feature(fmt_flags)]\n //! use std::fmt;\n //!\n //! #[derive(Debug)]"}, {"sha": "32d6b3b95a4604f02829586ee7f302fa4f0a7627", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -784,7 +784,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(linked_list_extras)]\n+    /// #![feature(linked_list_extras)]\n+    ///\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n@@ -812,7 +813,8 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(linked_list_extras)]\n+    /// #![feature(linked_list_extras)]\n+    ///\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();"}, {"sha": "5ccf3973c28825b9a5eced76ac28616e9a25f09e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -887,7 +887,8 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -899,7 +900,8 @@ impl<T> [T] {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -924,7 +926,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -949,7 +952,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(permutations)]\n+    /// #![feature(permutations)]\n+    ///\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -973,7 +977,8 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n-    /// # #![feature(clone_from_slice)]\n+    /// #![feature(clone_from_slice)]\n+    ///\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -1004,7 +1009,8 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// # #![feature(move_from)]\n+    /// #![feature(move_from)]\n+    ///\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);"}, {"sha": "670d99bae404993b3f79276080fd884e26fa8080", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -442,7 +442,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert!(s.is_char_boundary(0));\n     /// // start of `\u8001`\n@@ -549,7 +550,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(slice_chars)]\n+    /// #![feature(slice_chars)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.slice_chars(0, 4), \"L\u00f6we\");\n@@ -581,7 +583,8 @@ impl str {\n     /// done by `.chars()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// # #![feature(str_char, core)]\n+    /// #![feature(str_char, core)]\n+    ///\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVie\u0323\u0302t Nam\";\n@@ -639,7 +642,8 @@ impl str {\n     /// done by `.chars().rev()` or `.char_indices()`.\n     ///\n     /// ```\n-    /// # #![feature(str_char, core)]\n+    /// #![feature(str_char, core)]\n+    ///\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVie\u0323\u0302t Nam\";\n@@ -686,7 +690,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at(1), 'b');\n     /// assert_eq!(s.char_at(2), '\u03c0');\n@@ -714,7 +719,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at_reverse(1), 'a');\n     /// assert_eq!(s.char_at_reverse(2), 'b');\n@@ -742,7 +748,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_char)]\n+    /// #![feature(str_char)]\n+    ///\n     /// let s = \"\u0141o\u0301dz\u0301\"; // \\u{141}o\\u{301}dz\\u{301}\n     /// let (c, s1) = s.slice_shift_char().unwrap();\n     ///\n@@ -777,7 +784,8 @@ impl str {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(str_split_at)]\n+    /// #![feature(str_split_at)]\n+    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let first_space = s.find(' ').unwrap_or(s.len());\n     /// let (a, b) = s.split_at(first_space);\n@@ -879,8 +887,9 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_words)]\n-    /// # #![allow(deprecated)]\n+    /// #![feature(str_words)]\n+    /// #![allow(deprecated)]\n+    ///\n     /// let some_words = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\";\n     /// let v: Vec<&str> = some_words.words().collect();\n     ///\n@@ -1038,7 +1047,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(unicode, core)]\n+    /// #![feature(unicode, core)]\n+    ///\n     /// let gr1 = \"a\\u{310}e\\u{301}o\\u{308}\\u{332}\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"];\n     ///\n@@ -1064,7 +1074,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(unicode, core)]\n+    /// #![feature(unicode, core)]\n+    ///\n     /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(usize, &str)>>();\n     /// let b: &[_] = &[(0, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")];\n     ///\n@@ -1602,7 +1613,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_match_indices)]\n+    /// #![feature(str_match_indices)]\n+    ///\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0, 3), (6, 9), (12, 15)]);\n     ///\n@@ -1646,7 +1658,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(str_match_indices)]\n+    /// #![feature(str_match_indices)]\n+    ///\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\n     /// assert_eq!(v, [(12, 15), (6, 9), (0, 3)]);\n     ///\n@@ -1676,7 +1689,8 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(subslice_offset)]\n+    /// #![feature(subslice_offset)]\n+    ///\n     /// let string = \"a\\nb\\nc\";\n     /// let lines: Vec<&str> = string.lines().collect();\n     ///"}, {"sha": "0b441b42cdc14f727f908afde48540f71a34e6e5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -89,7 +89,8 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// let s = String::from(\"hello\");\n     /// assert_eq!(&s[..], \"hello\");\n     /// ```\n@@ -702,7 +703,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n     ///\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());"}, {"sha": "96ad00597f806f6d237424dc07fb32c61193a943", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -112,6 +112,13 @@ use super::range::RangeArgument;\n /// assert_eq!(vec, [1, 2, 3, 4]);\n /// ```\n ///\n+/// It can also initialize each element of a `Vec<T>` with a given value:\n+///\n+/// ```\n+/// let vec = vec![0; 5];\n+/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n+/// ```\n+///\n /// Use a `Vec<T>` as an efficient stack:\n ///\n /// ```\n@@ -574,7 +581,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut vec = vec!(1, 2);\n+    /// let mut vec = vec![1, 2];\n     /// vec.push(3);\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n@@ -622,7 +629,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(append)]\n+    /// #![feature(append)]\n+    ///\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n@@ -661,7 +669,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n     ///\n     /// // Draining using `..` clears the whole vector.\n     /// let mut v = vec![1, 2, 3];\n@@ -759,7 +767,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(map_in_place)]\n+    /// #![feature(map_in_place)]\n+    ///\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(&w[..], &[3, 4, 5]);\n@@ -965,7 +974,8 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(split_off)]\n+    /// #![feature(split_off)]\n+    ///\n     /// let mut vec = vec![1,2,3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);\n@@ -1004,7 +1014,8 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_resize)]\n+    /// #![feature(vec_resize)]\n+    ///\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -1056,7 +1067,8 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_push_all)]\n+    /// #![feature(vec_push_all)]\n+    ///\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);"}, {"sha": "c6d0d946ab024e26a5f0da009d52031b8607d916", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -231,7 +231,7 @@ impl<T> VecDeque<T> {\n     /// buf.push_back(3);\n     /// buf.push_back(4);\n     /// buf.push_back(5);\n-    /// assert_eq!(buf.get(1).unwrap(), &4);\n+    /// assert_eq!(buf.get(1), Some(&4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self, index: usize) -> Option<&T> {\n@@ -379,7 +379,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::with_capacity(15);\n@@ -455,7 +456,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -604,7 +606,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut v = VecDeque::new();\n@@ -847,17 +850,20 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n     /// assert_eq!(buf.swap_back_remove(0), None);\n-    /// buf.push_back(5);\n-    /// buf.push_back(99);\n-    /// buf.push_back(15);\n-    /// buf.push_back(20);\n-    /// buf.push_back(10);\n-    /// assert_eq!(buf.swap_back_remove(1), Some(99));\n+    /// buf.push_back(1);\n+    /// buf.push_back(2);\n+    /// buf.push_back(3);\n+    ///\n+    /// assert_eq!(buf.swap_back_remove(0), Some(1));\n+    /// assert_eq!(buf.len(), 2);\n+    /// assert_eq!(buf[0], 3);\n+    /// assert_eq!(buf[1], 2);\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n                reason = \"the naming of this function may be altered\")]\n@@ -881,17 +887,20 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n     /// assert_eq!(buf.swap_front_remove(0), None);\n-    /// buf.push_back(15);\n-    /// buf.push_back(5);\n-    /// buf.push_back(10);\n-    /// buf.push_back(99);\n-    /// buf.push_back(20);\n-    /// assert_eq!(buf.swap_front_remove(3), Some(99));\n+    /// buf.push_back(1);\n+    /// buf.push_back(2);\n+    /// buf.push_back(3);\n+    ///\n+    /// assert_eq!(buf.swap_front_remove(2), Some(3));\n+    /// assert_eq!(buf.len(), 2);\n+    /// assert_eq!(buf[0], 2);\n+    /// assert_eq!(buf[1], 1);\n     /// ```\n     #[unstable(feature = \"deque_extras\",\n                reason = \"the naming of this function may be altered\")]\n@@ -915,7 +924,8 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     /// ```\n-    /// # #![feature(collections)]\n+    /// #![feature(collections)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1123,12 +1133,12 @@ impl<T> VecDeque<T> {\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n-    /// buf.push_back(5);\n-    /// buf.push_back(10);\n-    /// buf.push_back(12);\n-    /// buf.push_back(15);\n-    /// buf.remove(2);\n-    /// assert_eq!(Some(&15), buf.get(2));\n+    /// buf.push_back(1);\n+    /// buf.push_back(2);\n+    /// buf.push_back(3);\n+    ///\n+    /// assert_eq!(buf.remove(1), Some(2));\n+    /// assert_eq!(buf.get(1), Some(&3));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove(&mut self, index: usize) -> Option<T> {\n@@ -1291,7 +1301,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(split_off)]\n+    /// #![feature(split_off)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1354,7 +1365,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(append)]\n+    /// #![feature(append)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1380,7 +1392,8 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vec_deque_retain)]\n+    /// #![feature(vec_deque_retain)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1415,7 +1428,8 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(deque_extras)]\n+    /// #![feature(deque_extras)]\n+    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "51fda344c8829cdfa8b78e35d290c63e64849f59", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -35,7 +35,8 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(vecmap)]\n+/// #![feature(vecmap)]\n+///\n /// use std::collections::VecMap;\n ///\n /// let mut months = VecMap::new();\n@@ -135,7 +136,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// ```\n@@ -148,7 +150,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::with_capacity(10);\n     /// ```\n@@ -163,7 +166,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let map: VecMap<String> = VecMap::with_capacity(10);\n     /// assert!(map.capacity() >= 10);\n@@ -183,7 +187,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len(10);\n@@ -208,7 +213,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len_exact(10);\n@@ -248,7 +254,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -277,7 +284,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -307,7 +315,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, append)]\n+    /// #![feature(vecmap, append)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -343,7 +352,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, split_off)]\n+    /// #![feature(vecmap, split_off)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -400,7 +410,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, drain)]\n+    /// #![feature(vecmap, drain)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -428,7 +439,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -446,7 +458,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -464,7 +477,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -480,7 +494,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -505,7 +520,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -524,7 +540,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -552,7 +569,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -578,7 +596,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -600,7 +619,8 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap, entry)]\n+    /// #![feature(vecmap, entry)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut count: VecMap<u32> = VecMap::new();\n@@ -778,7 +798,8 @@ impl<T> IntoIterator for VecMap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(vecmap)]\n+    /// #![feature(vecmap)]\n+    ///\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();"}, {"sha": "3d133b6b7b041bcf6eba9e2b95faab2b38b25984", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -145,7 +145,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// \"relaxed\" atomics allow all reorderings.\n ///\n /// Rust's memory orderings are [the same as\n-/// C++'s](http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).\n+/// LLVM's](http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub enum Ordering {"}, {"sha": "c443270d5f4051d96f023a1be961b989afed17ca", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -221,7 +221,8 @@ impl<T:Copy> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(as_unsafe_cell)]\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);\n@@ -589,7 +590,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// # Example\n     ///\n     /// ```\n-    /// # #![feature(cell_extras)]\n+    /// #![feature(cell_extras)]\n+    ///\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new((5, 'b'));"}, {"sha": "9d151abea787c97c6188dc8b4d19248566987ce4", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -383,7 +383,8 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// assert_eq!(Some(1), cmp::partial_min(1, 2));\n@@ -393,7 +394,8 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// let result = cmp::partial_min(std::f64::NAN, 1.0);\n@@ -417,7 +419,8 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// assert_eq!(Some(2), cmp::partial_max(1, 2));\n@@ -427,7 +430,8 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// When comparison is impossible:\n ///\n /// ```\n-/// # #![feature(cmp_partial)]\n+/// #![feature(cmp_partial)]\n+///\n /// use std::cmp;\n ///\n /// let result = cmp::partial_max(std::f64::NAN, 1.0);"}, {"sha": "7cacc6af575c8c49e05ab1e202e2eec58602beff", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -167,7 +167,8 @@ pub struct RadixFmt<T, R>(T, R);\n /// # Examples\n ///\n /// ```\n-/// # #![feature(fmt_radix)]\n+/// #![feature(fmt_radix)]\n+///\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```"}, {"sha": "75b7208d66bd5ad8774c37ab291516f357fa5583", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -16,7 +16,8 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(hash_default)]\n+//! #![feature(hash_default)]\n+//!\n //! use std::hash::{hash, Hash, SipHasher};\n //!\n //! #[derive(Hash)]\n@@ -36,7 +37,8 @@\n //! the trait `Hash`:\n //!\n //! ```rust\n-//! # #![feature(hash_default)]\n+//! #![feature(hash_default)]\n+//!\n //! use std::hash::{hash, Hash, Hasher, SipHasher};\n //!\n //! struct Person {"}, {"sha": "2968d63454457bc0d03003e833cd29ea18bfb030", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -824,7 +824,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_min_max)]\n+    /// #![feature(iter_min_max)]\n+    ///\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n     /// let a: [i32; 0] = [];\n@@ -898,7 +899,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_cmp)]\n+    /// #![feature(iter_cmp)]\n+    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n@@ -926,7 +928,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_cmp)]\n+    /// #![feature(iter_cmp)]\n+    ///\n     /// let a = [-3_i32, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n@@ -1065,7 +1068,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_arith)]\n+    /// #![feature(iter_arith)]\n+    ///\n     /// let a = [1, 2, 3, 4, 5];\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n@@ -1083,7 +1087,8 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_arith)]\n+    /// #![feature(iter_arith)]\n+    ///\n     /// fn factorial(n: u32) -> u32 {\n     ///     (1..).take_while(|&i| i <= n).product()\n     /// }\n@@ -1367,7 +1372,8 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(iter_min_max)]\n+    /// #![feature(iter_min_max)]\n+    ///\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<i32> = NoElements;\n@@ -2764,7 +2770,8 @@ impl<A: Step> ops::Range<A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(step_by)]\n+    /// #![feature(step_by)]\n+    ///\n     /// for i in (0..10).step_by(2) {\n     ///     println!(\"{}\", i);\n     /// }"}, {"sha": "2235dc4af11f5f47d76788f63a747cdfc52ae372", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -274,7 +274,8 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(as_slice)]\n+    /// #![feature(as_slice)]\n+    ///\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "f0bac1bfef3e2885648e346e44c84840f9c31e1a", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -49,7 +49,8 @@ use mem;\n /// # Examples\n ///\n /// ```\n-/// # #![feature(raw)]\n+/// #![feature(raw)]\n+///\n /// use std::raw::{self, Repr};\n ///\n /// let slice: &[u16] = &[1, 2, 3, 4];\n@@ -98,7 +99,8 @@ impl<T> Clone for Slice<T> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(raw)]\n+/// #![feature(raw)]\n+///\n /// use std::mem;\n /// use std::raw;\n ///"}, {"sha": "100cf0779b7e52b614b66b9acb85a631e4717b1a", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -420,7 +420,8 @@ impl<T, E> Result<T, E> {\n     /// Converts from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n-    /// # #![feature(as_slice)]\n+    /// #![feature(as_slice)]\n+    ///\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();"}, {"sha": "d0205fc9b126e329b8228ea2dd8a996775426091", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -19,7 +19,8 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//! # #![feature(core_simd)]\n+//! #![feature(core_simd)]\n+//!\n //! fn main() {\n //!     use std::simd::f32x4;\n //!     let a = f32x4(40.0, 41.0, 42.0, 43.0);"}, {"sha": "69120b5818101301b1f18c0f12840f68736901e5", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -47,7 +47,8 @@\n //! which is cyclic.\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -149,7 +150,8 @@\n //! entity `&sube`).\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -207,7 +209,8 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n-//! # #![feature(rustc_private, core, into_cow)]\n+//! #![feature(rustc_private, core, into_cow)]\n+//!\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;"}, {"sha": "95b8161ac342979d4e84aa3aaf02563d79585d71", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -674,8 +674,7 @@ impl<'a> LifetimeContext<'a> {\n             for lifetime in lifetimes {\n                 if special_idents.iter().any(|&i| i.name == lifetime.lifetime.name) {\n                     span_err!(self.sess, lifetime.lifetime.span, E0262,\n-                        \"illegal lifetime parameter name: `{}`\",\n-                                lifetime.lifetime.name);\n+                        \"invalid lifetime parameter name: `{}`\", lifetime.lifetime.name);\n                 }\n             }\n "}, {"sha": "c4573bd906063314f09e3368db52418be15c4d7e", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -34,8 +34,8 @@\n /// # Examples\n ///\n /// ```{.rust}\n-/// # #![feature(rustc_private)]\n-/// # #![feature(associated_consts)]\n+/// #![feature(rustc_private)]\n+/// #![feature(associated_consts)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// bitflags! {\n@@ -62,7 +62,7 @@\n /// The generated `struct`s can also be extended with type and trait implementations:\n ///\n /// ```{.rust}\n-/// # #![feature(rustc_private)]\n+/// #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// use std::fmt;"}, {"sha": "2dae1aca8351daf56fab345303fa42273e875074", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -2325,7 +2325,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,\n-                &format!(\"deref invoked on expr of illegal type {:?}\",\n+                &format!(\"deref invoked on expr of invalid type {:?}\",\n                         datum.ty));\n         }\n     };"}, {"sha": "883b972872f506d24b967f6fcb692edfc812d292", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -122,20 +122,21 @@ impl<'tcx> CastCheck<'tcx> {\n             CastError::NeedViaInt |\n             CastError::NeedViaUsize => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast; cast through {} first: `{}` as `{}`\",\n-                            match e {\n-                                CastError::NeedViaPtr => \"a raw pointer\",\n-                                CastError::NeedViaInt => \"an integer\",\n-                                CastError::NeedViaUsize => \"a usize\",\n-                                _ => unreachable!()\n-                            },\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n-                }, self.expr_ty, None)\n+                }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_help(self.span,\n+                    &format!(\"cast through {} first\", match e {\n+                        CastError::NeedViaPtr => \"a raw pointer\",\n+                        CastError::NeedViaInt => \"an integer\",\n+                        CastError::NeedViaUsize => \"a usize\",\n+                        _ => unreachable!()\n+                }));\n             }\n             CastError::CastToBool => {\n-                span_err!(fcx.tcx().sess, self.span, E0054,\n-                          \"cannot cast as `bool`, compare with zero instead\");\n+                span_err!(fcx.tcx().sess, self.span, E0054, \"cannot cast as `bool`\");\n+                fcx.ccx.tcx.sess.fileline_help(self.span, \"compare with zero instead\");\n             }\n             CastError::CastToChar => {\n                 fcx.type_error_message(self.span, |actual| {\n@@ -151,17 +152,18 @@ impl<'tcx> CastCheck<'tcx> {\n             }\n             CastError::IllegalCast => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n             }\n             CastError::DifferingKinds => {\n                 fcx.type_error_message(self.span, |actual| {\n-                    format!(\"illegal cast: `{}` as `{}`; vtable kinds may not match\",\n+                    format!(\"casting `{}` as `{}` is invalid\",\n                             actual,\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n+                fcx.ccx.tcx.sess.fileline_note(self.span, \"vtable kinds may not match\");\n             }\n         }\n     }\n@@ -285,7 +287,7 @@ impl<'tcx> CastCheck<'tcx> {\n             return Ok(CastKind::PtrPtrCast);\n         }\n \n-        // sized -> unsized? report illegal cast (don't complain about vtable kinds)\n+        // sized -> unsized? report invalid cast (don't complain about vtable kinds)\n         if fcx.type_is_known_to_be_sized(m_expr.ty, self.span) {\n             return Err(CastError::IllegalCast);\n         }"}, {"sha": "819f44372979613323413ddc33d46ae50ad67b3c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -3468,7 +3468,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let tcx = fcx.tcx();\n         if !tcx.expr_is_lval(&**lhs) {\n             span_err!(tcx.sess, expr.span, E0070,\n-                \"illegal left-hand side expression\");\n+                \"invalid left-hand side expression\");\n         }\n \n         let lhs_ty = fcx.expr_ty(&**lhs);\n@@ -4273,10 +4273,8 @@ pub fn check_representable(tcx: &ty::ctxt,\n     // caught by case 1.\n     match rty.is_representable(tcx, sp) {\n       ty::SelfRecursive => {\n-        span_err!(tcx.sess, sp, E0072,\n-            \"illegal recursive {} type; \\\n-             wrap the inner value in a box to make it representable\",\n-            designation);\n+        span_err!(tcx.sess, sp, E0072, \"invalid recursive {} type\", designation);\n+        tcx.sess.fileline_help(sp, \"wrap the inner value in a box to make it representable\");\n         return false\n       }\n       ty::Representable | ty::ContainsRecursive => (),"}, {"sha": "c6d13d3b0a5ca6326e4860b5c45257fcf945c53c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -57,7 +57,7 @@ pub fn check_binop_assign<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n \n     let tcx = fcx.tcx();\n     if !tcx.expr_is_lval(lhs_expr) {\n-        span_err!(tcx.sess, lhs_expr.span, E0067, \"illegal left-hand side expression\");\n+        span_err!(tcx.sess, lhs_expr.span, E0067, \"invalid left-hand side expression\");\n     }\n \n     fcx.require_expr_have_sized_type(lhs_expr, traits::AssignmentLhsSized);"}, {"sha": "40ea63e3cf9b4ee289435b97c3f2360c469b3d24", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -778,7 +778,7 @@ the pointer the size of the type would need to be unbounded.\n Consider the following erroneous definition of a type for a list of bytes:\n \n ```\n-// error, illegal recursive struct type\n+// error, invalid recursive struct type\n struct ListNode {\n     head: u8,\n     tail: Option<ListNode>,\n@@ -1264,7 +1264,7 @@ impl From<Foo> for i32 { // or you use a type from your crate as\n \n E0119: r##\"\n There are conflicting trait implementations for the same type.\n-Erroneous code example:\n+Example of erroneous code:\n \n ```\n trait MyTrait {\n@@ -1285,7 +1285,10 @@ impl MyTrait for Foo { // error: conflicting implementations for trait\n }\n ```\n \n-When you write:\n+When looking for the implementation for the trait, the compiler finds\n+both the `impl<T> MyTrait for T` where T is all types and the `impl\n+MyTrait for Foo`. Since a trait cannot be implemented multiple times,\n+this is an error. So, when you write:\n \n ```\n impl<T> MyTrait for T {\n@@ -2362,7 +2365,7 @@ register_diagnostics! {\n     E0241,\n     E0242, // internal error looking up a definition\n     E0245, // not a trait\n-    E0246, // illegal recursive type\n+    E0246, // invalid recursive type\n     E0247, // found module name used as a type\n     E0248, // found value name used as a type\n     E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "815c1ed4fff994498dfe0dec043a7e3cbdfe2368", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -278,7 +278,8 @@ impl char {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -289,7 +290,8 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -315,7 +317,8 @@ impl char {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -326,7 +329,8 @@ impl char {\n     /// A buffer that's too small:\n     ///\n     /// ```\n-    /// # #![feature(unicode)]\n+    /// #![feature(unicode)]\n+    ///\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);"}, {"sha": "e329785d2719bbe3e91ccdaee293374150c31652", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -494,7 +494,8 @@ impl<'a> Iterator for Utf16Items<'a> {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(unicode)]\n+/// #![feature(unicode)]\n+///\n /// extern crate rustc_unicode;\n ///\n /// use rustc_unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};"}, {"sha": "609ebe8546164d1872790a48c32a6bb0a8e0107c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -30,7 +30,8 @@ impl ToHex for [u8] {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(rustc_private)]\n+    /// #![feature(rustc_private)]\n+    ///\n     /// extern crate serialize;\n     /// use serialize::hex::ToHex;\n     ///\n@@ -100,7 +101,8 @@ impl FromHex for str {\n     /// This converts a string literal to hexadecimal and back.\n     ///\n     /// ```\n-    /// # #![feature(rustc_private)]\n+    /// #![feature(rustc_private)]\n+    ///\n     /// extern crate serialize;\n     /// use serialize::hex::{FromHex, ToHex};\n     ///"}, {"sha": "cd9dadd1be9e6f58ca339b9fb6dd2744f32564a5", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -125,7 +125,8 @@ pub trait AsciiExt {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(ascii)]\n+    /// #![feature(ascii)]\n+    ///\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let mut ascii = 'a';\n@@ -144,7 +145,8 @@ pub trait AsciiExt {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(ascii)]\n+    /// #![feature(ascii)]\n+    ///\n     /// use std::ascii::AsciiExt;\n     ///\n     /// let mut ascii = 'A';"}, {"sha": "66f894fc31fb00f441024ab7a664d097731a3ce8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -543,7 +543,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -572,7 +573,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -979,7 +981,8 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(drain)]\n+    /// #![feature(drain)]\n+    ///\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();"}, {"sha": "fb594dadd738be984f61bee7f4cce4b0545644e1", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -154,7 +154,8 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -179,7 +180,8 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(hashmap_hasher)]\n+    /// #![feature(hashmap_hasher)]\n+    ///\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///"}, {"sha": "eca6ffc8ce39bb4ca44b315de2d440cb43b1f104", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -407,8 +407,6 @@ impl<W: Write> BufWriter<W> {\n \n     /// Gets a mutable reference to the underlying writer.\n     ///\n-    /// # Warning\n-    ///\n     /// It is inadvisable to directly write to the underlying writer.\n     ///\n     /// # Examples\n@@ -835,8 +833,6 @@ impl<S: Read + Write> BufStream<S> {\n \n     /// Gets a mutable reference to the underlying stream.\n     ///\n-    /// # Warning\n-    ///\n     /// It is inadvisable to read directly from or write directly to the\n     /// underlying stream.\n     pub fn get_mut(&mut self) -> &mut S {"}, {"sha": "980ec51c926526dff6d868592cae58b03167bf59", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -15,10 +15,8 @@ use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n use slice;\n \n-/// A `Cursor` wraps another type and provides it with a [`Seek`][seek]\n-/// implementation.\n-///\n-/// [seek]: trait.Seek.html\n+/// A `Cursor` wraps another type and provides it with a\n+/// [`Seek`](trait.Seek.html) implementation.\n ///\n /// Cursors are typically used with in-memory buffers to allow them to\n /// implement `Read` and/or `Write`, allowing these buffers to be used"}, {"sha": "f811aa1be4ee3133ac962bd50cd215831709b28a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -707,7 +707,7 @@ pub trait Read {\n     ///\n     /// # fn foo() -> io::Result<()> {\n     /// let mut f = try!(File::open(\"foo.txt\"));\n-    /// let mut buffer = [0; 10];\n+    /// let mut buffer = [0; 5];\n     ///\n     /// // read at most five bytes\n     /// let mut handle = f.take(5);"}, {"sha": "6e651464c74fc0e66b530737fc8513036f733012", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -105,7 +105,7 @@ impl BufRead for Empty {\n /// This struct is generally created by calling [`repeat()`][repeat]. Please\n /// see the documentation of `repeat()` for more details.\n ///\n-/// [empty]: fn.repeat.html\n+/// [repeat]: fn.repeat.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat { byte: u8 }\n \n@@ -131,7 +131,7 @@ impl Read for Repeat {\n /// This struct is generally created by calling [`sink()`][sink]. Please\n /// see the documentation of `sink()` for more details.\n ///\n-/// [empty]: fn.sink.html\n+/// [sink]: fn.sink.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Sink { _priv: () }\n "}, {"sha": "eb378bf408028241dfb53557a6d599dc088f4d40", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -141,7 +141,8 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(mpsc_select)]\n+/// #![feature(mpsc_select)]\n+///\n /// use std::thread;\n /// use std::sync::mpsc;\n ///"}, {"sha": "c7daf5cdee56a0ef732c1e5426abb5346126aa98", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -103,7 +103,8 @@ impl Iterator for LookupHost {\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(lookup_host)]\n+/// #![feature(lookup_host)]\n+///\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "73d6639cf00d78c6f1af49332a2bbc7ccd7f769d", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -235,7 +235,8 @@ impl f32 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let num = 2.0f32;\n@@ -598,7 +599,8 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = consts::PI;\n@@ -614,7 +616,8 @@ impl f32 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32::{self, consts};\n     ///\n     /// let angle = 180.0f32;\n@@ -630,7 +633,8 @@ impl f32 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f32::ldexp(3.0, 2) - 12.0).abs();\n@@ -651,7 +655,8 @@ impl f32 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let x = 4.0f32;\n@@ -679,7 +684,8 @@ impl f32 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// use std::f32;\n     ///\n     /// let x = 1.0f32;"}, {"sha": "3911d276b0f3cca1e2975f12a7c170aed5813896", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -191,7 +191,8 @@ impl f64 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// let num = 2.0f64;\n     ///\n     /// // (8388608, -22, 1)\n@@ -568,7 +569,8 @@ impl f64 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// // 3*2^2 - 12 == 0\n     /// let abs_difference = (f64::ldexp(3.0, 2) - 12.0).abs();\n     ///\n@@ -588,7 +590,8 @@ impl f64 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n+    ///\n     /// let x = 4.0_f64;\n     ///\n     /// // (1/2)*2^3 -> 1 * 8/2 -> 4.0\n@@ -614,7 +617,7 @@ impl f64 {\n     /// `other`.\n     ///\n     /// ```\n-    /// # #![feature(float_extras)]\n+    /// #![feature(float_extras)]\n     ///\n     /// let x = 1.0f32;\n     ///"}, {"sha": "7f14ea93c52691854757b49c88f5143dac9be452", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -111,7 +111,8 @@ mod prim_unit { }\n /// the raw pointer. It doesn't destroy `T` or deallocate any memory.\n ///\n /// ```\n-/// # #![feature(box_raw)]\n+/// #![feature(box_raw)]\n+///\n /// let my_speed: Box<i32> = Box::new(88);\n /// let my_speed: *mut i32 = Box::into_raw(my_speed);\n ///"}, {"sha": "79b3dfa67b1cf93e62352feb7090ad4eba1d50b9", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -69,7 +69,8 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_condvar)]\n+/// #![feature(static_condvar)]\n+///\n /// use std::sync::{StaticCondvar, CONDVAR_INIT};\n ///\n /// static CVAR: StaticCondvar = CONDVAR_INIT;"}, {"sha": "b87a2756829445a687d92f407447778ca4671b4c", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -14,7 +14,8 @@\n //! # Examples\n //!\n //! ```\n-//! # #![feature(future)]\n+//! #![feature(future)]\n+//!\n //! use std::sync::Future;\n //!\n //! // a fake, for now"}, {"sha": "ee1516342ad05a6556752dce232744c82095d5d1", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -27,7 +27,8 @@\n //! # Examples\n //!\n //! ```rust\n-//! # #![feature(mpsc_select)]\n+//! #![feature(mpsc_select)]\n+//!\n //! use std::sync::mpsc::channel;\n //!\n //! let (tx1, rx1) = channel();\n@@ -124,7 +125,8 @@ impl Select {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(mpsc_select)]\n+    /// #![feature(mpsc_select)]\n+    ///\n     /// use std::sync::mpsc::Select;\n     ///\n     /// let select = Select::new();"}, {"sha": "4b62434d06894e9c78b6f40b0c1e5c1649382864", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -138,7 +138,8 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_mutex)]\n+/// #![feature(static_mutex)]\n+///\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "40d5af49156dd7a8d9a009d9a4f89cf314a70bb9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -81,7 +81,8 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// # Examples\n ///\n /// ```\n-/// # #![feature(static_rwlock)]\n+/// #![feature(static_rwlock)]\n+///\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n /// static LOCK: StaticRwLock = RW_LOCK_INIT;"}, {"sha": "907df69bfb07a13503581ad4672ddec75842b588", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -25,7 +25,8 @@ use sync::{Mutex, Condvar};\n /// # Examples\n ///\n /// ```\n-/// # #![feature(semaphore)]\n+/// #![feature(semaphore)]\n+///\n /// use std::sync::Semaphore;\n ///\n /// // Create a semaphore that represents 5 resources"}, {"sha": "2683f8e5022bb26bd81a315da53f118a864f61f4", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -367,7 +367,8 @@ pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n /// a join before any relevant stack frames are popped:\n ///\n /// ```rust\n-/// # #![feature(scoped)]\n+/// #![feature(scoped)]\n+///\n /// use std::thread;\n ///\n /// let guard = thread::scoped(move || {\n@@ -447,7 +448,8 @@ pub fn panicking() -> bool {\n /// # Examples\n ///\n /// ```\n-/// # #![feature(catch_panic)]\n+/// #![feature(catch_panic)]\n+///\n /// use std::thread;\n ///\n /// let result = thread::catch_panic(|| {"}, {"sha": "4fbfdec8e7ec8b152ae6fa1e2fd412052328cb64", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -24,7 +24,8 @@\n //! # Examples\n //!\n //! ```\n-//! # #![feature(scoped_tls)]\n+//! #![feature(scoped_tls)]\n+//!\n //! scoped_thread_local!(static FOO: u32);\n //!\n //! // Initially each scoped slot is empty.\n@@ -136,7 +137,8 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(scoped_tls)]\n+    /// #![feature(scoped_tls)]\n+    ///\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.set(&100, || {\n@@ -189,7 +191,8 @@ impl<T> ScopedKey<T> {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// # #![feature(scoped_tls)]\n+    /// #![feature(scoped_tls)]\n+    ///\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.with(|slot| {"}, {"sha": "019a8404dfb0df00c1624837b18172e6f83d24f2", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -694,7 +694,7 @@ impl<'a> StringReader<'a> {\n             accum_int *= 16;\n             accum_int += c.to_digit(16).unwrap_or_else(|| {\n                 self.err_span_char(self.last_pos, self.pos,\n-                              \"illegal character in numeric character escape\", c);\n+                              \"invalid character in numeric character escape\", c);\n \n                 valid = false;\n                 0\n@@ -714,7 +714,7 @@ impl<'a> StringReader<'a> {\n             Some(_) => valid,\n             None => {\n                 let last_bpos = self.last_pos;\n-                self.err_span_(start_bpos, last_bpos, \"illegal numeric character escape\");\n+                self.err_span_(start_bpos, last_bpos, \"invalid numeric character escape\");\n                 false\n             }\n         }\n@@ -846,7 +846,7 @@ impl<'a> StringReader<'a> {\n                                      \"unterminated unicode escape (needed a `}`)\");\n                 } else {\n                     self.err_span_char(self.last_pos, self.pos,\n-                                   \"illegal character in unicode escape\", c);\n+                                   \"invalid character in unicode escape\", c);\n                 }\n                 valid = false;\n                 0\n@@ -862,7 +862,7 @@ impl<'a> StringReader<'a> {\n         }\n \n         if valid && (char::from_u32(accum_int).is_none() || count == 0) {\n-            self.err_span_(start_bpos, self.last_pos, \"illegal unicode character escape\");\n+            self.err_span_(start_bpos, self.last_pos, \"invalid unicode character escape\");\n             valid = false;\n         }\n \n@@ -1138,8 +1138,8 @@ impl<'a> StringReader<'a> {\n                 let last_bpos = self.last_pos;\n                 let curr_char = self.curr.unwrap();\n                 self.fatal_span_char(start_bpos, last_bpos,\n-                                \"only `#` is allowed in raw string delimitation; \\\n-                                 found illegal character\",\n+                                \"found invalid character; \\\n+                                 only `#` is allowed in raw string delimitation\",\n                                 curr_char);\n             }\n             self.bump();\n@@ -1323,8 +1323,8 @@ impl<'a> StringReader<'a> {\n             let last_pos = self.last_pos;\n             let ch = self.curr.unwrap();\n             self.fatal_span_char(start_bpos, last_pos,\n-                            \"only `#` is allowed in raw string delimitation; \\\n-                             found illegal character\",\n+                            \"found invalid character; \\\n+                             only `#` is allowed in raw string delimitation\",\n                             ch);\n         }\n         self.bump();"}, {"sha": "c5a73601d895c93dd495755f765e56020dff8c43", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -446,11 +446,11 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n         Some(suf) => {\n             if suf.len() >= 2 && looks_like_width_suffix(&['f'], suf) {\n                 // if it looks like a width, lets try to be helpful.\n-                sd.span_err(sp, &*format!(\"illegal width `{}` for float literal, \\\n-                                          valid widths are 32 and 64\", &suf[1..]));\n+                sd.span_err(sp, &*format!(\"invalid width `{}` for float literal\", &suf[1..]));\n+                sd.fileline_help(sp, \"valid widths are 32 and 64\");\n             } else {\n-                sd.span_err(sp, &*format!(\"illegal suffix `{}` for float literal, \\\n-                                          valid suffixes are `f32` and `f64`\", suf));\n+                sd.span_err(sp, &*format!(\"invalid suffix `{}` for float literal\", suf));\n+                sd.fileline_help(sp, \"valid suffixes are `f32` and `f64`\");\n             }\n \n             ast::LitFloatUnsuffixed(data)\n@@ -619,11 +619,11 @@ pub fn integer_lit(s: &str,\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines\n                 if looks_like_width_suffix(&['i', 'u'], suf) {\n-                    sd.span_err(sp, &*format!(\"illegal width `{}` for integer literal; \\\n-                                              valid widths are 8, 16, 32 and 64\",\n+                    sd.span_err(sp, &*format!(\"invalid width `{}` for integer literal\",\n                                               &suf[1..]));\n+                    sd.fileline_help(sp, \"valid widths are 8, 16, 32 and 64\");\n                 } else {\n-                    sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n+                    sd.span_err(sp, &*format!(\"invalid suffix `{}` for numeric literal\", suf));\n                     sd.fileline_help(sp, \"the suffix must be one of the integral types \\\n                                       (`u32`, `isize`, etc)\");\n                 }"}, {"sha": "11611c9adb0bc57996f33213f51d919ac09873e4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -681,7 +681,7 @@ impl<'a> Parser<'a> {\n                 if text.is_empty() {\n                     self.span_bug(sp, \"found empty literal suffix in Some\")\n                 }\n-                self.span_err(sp, &*format!(\"{} with a suffix is illegal\", kind));\n+                self.span_err(sp, &*format!(\"{} with a suffix is invalid\", kind));\n             }\n         }\n     }\n@@ -5286,7 +5286,7 @@ impl<'a> Parser<'a> {\n                         let last_span = self.last_span;\n                         self.span_err(\n                             last_span,\n-                            &format!(\"illegal ABI: expected one of [{}], \\\n+                            &format!(\"invalid ABI: expected one of [{}], \\\n                                      found `{}`\",\n                                     abi::all_names().join(\", \"),\n                                     s));"}, {"sha": "c7d2f2c472f49e15bc94f39232a4145be2ada6ab", "filename": "src/test/compile-fail/bad-expr-lhs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-lhs.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-    1 = 2; //~ ERROR illegal left-hand side expression\n-    1 += 2; //~ ERROR illegal left-hand side expression\n-    (1, 2) = (3, 4); //~ ERROR illegal left-hand side expression\n+    1 = 2; //~ ERROR invalid left-hand side expression\n+    1 += 2; //~ ERROR invalid left-hand side expression\n+    (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n \n     let (a, b) = (1, 2);\n-    (a, b) = (3, 4); //~ ERROR illegal left-hand side expression\n+    (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n \n-    None = Some(3); //~ ERROR illegal left-hand side expression\n+    None = Some(3); //~ ERROR invalid left-hand side expression\n }"}, {"sha": "92cbbaa1cb442136c89fc8c2fac1d1c378568294", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -8,5 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: cannot cast as `bool`, compare with zero instead\n-fn main() { let u = (5 as bool); }\n+fn main() {\n+    let u = (5 as bool);\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero instead\n+}"}, {"sha": "7fca4aece69b80871067b279f74d400e71c6d22b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 58, "deletions": 24, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -10,12 +10,16 @@\n \n fn illegal_cast<U:?Sized,V:?Sized>(u: *const U) -> *const V\n {\n-    u as *const V //~ ERROR vtable kinds\n+    u as *const V\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n fn illegal_cast_2<U:?Sized>(u: *const U) -> *const str\n {\n-    u as *const str //~ ERROR vtable kinds\n+    u as *const str\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }\n \n trait Foo { fn foo(&self) {} }\n@@ -41,32 +45,58 @@ fn main()\n     let _ = v as (u32,); //~ ERROR non-scalar\n     let _ = Some(&v) as *const u8; //~ ERROR non-scalar\n \n-    let _ = v as f32; //~ ERROR through a usize first\n-    let _ = main as f64; //~ ERROR through a usize first\n-    let _ = &v as usize; //~ ERROR through a raw pointer first\n-    let _ = f as *const u8; //~ ERROR through a usize first\n-    let _ = 3 as bool; //~ ERROR compare with zero\n-    let _ = E::A as bool; //~ ERROR compare with zero\n+    let _ = v as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = main as f64;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = &v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n+    let _ = f as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 3 as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n+    let _ = E::A as bool;\n+    //~^ ERROR cannot cast as `bool`\n+    //~^^ HELP compare with zero\n     let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n \n-    let _ = false as f32; //~ ERROR through an integer first\n-    let _ = E::A as f32; //~ ERROR through an integer first\n-    let _ = 'a' as f32; //~ ERROR through an integer first\n+    let _ = false as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = E::A as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n+    let _ = 'a' as f32;\n+    //~^ ERROR casting\n+    //~^^ HELP through an integer first\n \n-    let _ = false as *const u8; //~ ERROR through a usize first\n-    let _ = E::A as *const u8; //~ ERROR through a usize first\n-    let _ = 'a' as *const u8; //~ ERROR through a usize first\n+    let _ = false as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = E::A as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n+    let _ = 'a' as *const u8;\n+    //~^ ERROR casting\n+    //~^^ HELP through a usize first\n \n-    let _ = 42usize as *const [u8]; //~ ERROR illegal cast\n-    let _ = v as *const [u8]; //~ ERROR illegal cast\n+    let _ = 42usize as *const [u8]; //~ ERROR casting\n+    let _ = v as *const [u8]; //~ ERROR casting\n     let _ = fat_v as *const Foo;\n     //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n-    let _ = foo as *const str; //~ ERROR illegal cast\n-    let _ = foo as *mut str; //~ ERROR illegal cast\n-    let _ = main as *mut str; //~ ERROR illegal cast\n-    let _ = &f as *mut f32; //~ ERROR illegal cast\n-    let _ = &f as *const f64; //~ ERROR illegal cast\n-    let _ = fat_v as usize; //~ ERROR through a raw pointer first\n+    let _ = foo as *const str; //~ ERROR casting\n+    let _ = foo as *mut str; //~ ERROR casting\n+    let _ = main as *mut str; //~ ERROR casting\n+    let _ = &f as *mut f32; //~ ERROR casting\n+    let _ = &f as *const f64; //~ ERROR casting\n+    let _ = fat_v as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP through a raw pointer first\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n@@ -76,6 +106,10 @@ fn main()\n     let _ = main.f as *const u32; //~ ERROR attempted access of field\n \n     let cf: *const Foo = &0;\n-    let _ = cf as *const [u8]; //~ ERROR vtable kinds\n-    let _ = cf as *const Bar; //~ ERROR vtable kinds\n+    let _ = cf as *const [u8];\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n+    let _ = cf as *const Bar;\n+    //~^ ERROR casting\n+    //~^^ NOTE vtable kinds\n }"}, {"sha": "397804566b4aeef51bba9c20eb739d729678fe8d", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n static a: &'static str = \"foo\";\n-static b: *const u8 = a as *const u8; //~ ERROR illegal cast\n-static c: *const u8 = &a as *const u8; //~ ERROR illegal cast\n+static b: *const u8 = a as *const u8; //~ ERROR casting\n+static c: *const u8 = &a as *const u8; //~ ERROR casting\n \n fn main() {\n }"}, {"sha": "e6f473c8aacbb76e3965ca928de1f91f36e17f58", "filename": "src/test/compile-fail/enum-to-float-cast-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast-2.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -21,8 +21,8 @@ enum F {\n }\n \n pub fn main() {\n-    let a = E::L0 as f32;  //~ ERROR illegal cast\n-    let c = F::H1 as f32;  //~ ERROR illegal cast\n+    let a = E::L0 as f32;  //~ ERROR casting\n+    let c = F::H1 as f32;  //~ ERROR casting\n     assert_eq!(a, -1.0f32);\n     assert_eq!(c, -1.0f32);\n }"}, {"sha": "b562ba0e41afd36bb75b2b14794c926c0f423997", "filename": "src/test/compile-fail/enum-to-float-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-to-float-cast.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -20,8 +20,8 @@ enum F {\n     H1 = 0xFFFFFFFFFFFFFFFF\n }\n \n-static C0: f32 = E::L0 as f32; //~ ERROR illegal cast\n-static C1: f32 = F::H1 as f32; //~ ERROR illegal cast\n+static C0: f32 = E::L0 as f32; //~ ERROR casting\n+static C1: f32 = F::H1 as f32; //~ ERROR casting\n \n pub fn main() {\n     let b = C0;"}, {"sha": "3746f29ea55d62959acd6a3db5b88c9f4decf2df", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -17,14 +17,16 @@ fn main() {\n     let p = a as *const [i32];\n     let q = a.as_ptr();\n \n-    a as usize; //~ ERROR illegal cast\n+    a as usize; //~ ERROR casting\n     b as usize; //~ ERROR non-scalar cast\n-    p as usize; //~ ERROR illegal cast; cast through a raw pointer\n+    p as usize;\n+    //~^ ERROR casting\n+    //~^^ HELP cast through a raw pointer\n \n     // #22955\n-    q as *const [i32]; //~ ERROR illegal cast\n+    q as *const [i32]; //~ ERROR casting\n \n     // #21397\n-    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR illegal cast\n-    let mut fail: *const str = 0 as *const str; //~ ERROR illegal cast\n+    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting\n+    let mut fail: *const str = 0 as *const str; //~ ERROR casting\n }"}, {"sha": "7dbf75feda054df0431062e7da43ee49ff609017", "filename": "src/test/compile-fail/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-tag-type-recursion.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// error-pattern: illegal recursive enum type; wrap the inner value in a box\n+// error-pattern: invalid recursive enum type\n \n enum mlist { cons(isize, mlist), nil, }\n "}, {"sha": "311280bd497605f429b179754bc9b60586e7338d", "filename": "src/test/compile-fail/issue-13407.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -14,6 +14,6 @@ mod A {\n \n fn main() {\n     A::C = 1;\n-    //~^ ERROR: illegal left-hand side expression\n+    //~^ ERROR: invalid left-hand side expression\n     //~| ERROR: mismatched types\n }"}, {"sha": "74f0833e8d11c8d4f3cf51584b3dcb7d7cde1b2a", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -15,8 +15,8 @@ struct X {\n \n fn main() {\n     let x = X { a: [0] };\n-    let _f = &x.a as *mut u8; //~ ERROR illegal cast\n+    let _f = &x.a as *mut u8; //~ ERROR casting\n \n     let local: [u8; 1] = [0];\n-    let _v = &local as *mut u8; //~ ERROR illegal cast\n+    let _v = &local as *mut u8; //~ ERROR casting\n }"}, {"sha": "bd3f2835058700942b137a968c78ea7d1945cce0", "filename": "src/test/compile-fail/issue-17431-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-1.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct Foo { foo: Option<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "4e1c0d6571d168567fddf88b66746bef322ddd63", "filename": "src/test/compile-fail/issue-17431-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-2.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n struct Baz { q: Option<Foo> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n struct Foo { q: Option<Baz> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "07c5f106456d121f781b3e7f540966ca286cb281", "filename": "src/test/compile-fail/issue-17431-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-3.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n struct Foo { foo: Mutex<Option<Foo>> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "74952d9ca2b38f39ab5c4afed213e080fc647106", "filename": "src/test/compile-fail/issue-17431-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-4.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,7 +11,7 @@\n use std::marker;\n \n struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl<T> Foo<T> { fn bar(&self) {} }\n "}, {"sha": "157b5ed434e9f23dad91c26f3959228bdbea3bc4", "filename": "src/test/compile-fail/issue-17431-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-5.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n struct Foo { foo: Bar<Foo> }\n struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n impl Foo { fn foo(&self) {} }\n "}, {"sha": "b2037378d3787532c7065ac5673c021b8e4ee4d4", "filename": "src/test/compile-fail/issue-17431-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-6.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Mutex;\n \n enum Foo { X(Mutex<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(self) {} }\n "}, {"sha": "9ad81e030aaf0eab8fe16065481a0fb36cb3f7b7", "filename": "src/test/compile-fail/issue-17431-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17431-7.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n enum Foo { Voo(Option<Option<Foo>>) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl Foo { fn bar(&self) {} }\n "}, {"sha": "c1d5827eb90ce005269ca114376bd72e1c12752c", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -14,5 +14,6 @@ enum Test {\n \n fn main() {\n     let _x = Test::Foo as *const isize;\n-    //~^ ERROR illegal cast; cast through a usize first: `Test` as `*const isize`\n+    //~^ ERROR casting `Test` as `*const isize` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "741707a47b6078dccec75bd3a191480fa328d7e1", "filename": "src/test/compile-fail/issue-21554.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,5 +11,7 @@\n struct Inches(i32);\n \n fn main() {\n-    Inches as f32; //~ ERROR illegal cast; cast through a usize first\n+    Inches as f32;\n+    //~^ ERROR casting\n+    //~^^ cast through a usize first\n }"}, {"sha": "37daf76c0b953c8534ab59b784a8971227e1c016", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -16,7 +16,7 @@ mod pingpong {\n     use send_packet;\n     pub type ping = send_packet<pong>;\n     pub struct pong(send_packet<ping>);\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n }\n \n fn main() {}"}, {"sha": "eb6842083263594a8561127d689079d957419cb6", "filename": "src/test/compile-fail/issue-3008-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-1.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -10,7 +10,7 @@\n \n enum foo { foo_(bar) }\n enum bar { bar_none, bar_some(bar) }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n fn main() {\n }"}, {"sha": "f934e0771c2ab39c998829b7cc50be27e20a3087", "filename": "src/test/compile-fail/issue-3008-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-2.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -12,7 +12,7 @@\n \n enum foo { foo_(bar) }\n struct bar { x: bar }\n-//~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive struct type\n \n fn main() {\n }"}, {"sha": "f8756b83f23a642d52e82394a32a5ec5acac48f3", "filename": "src/test/compile-fail/issue-3008-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3008-3.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -12,7 +12,7 @@ use std::marker;\n \n enum E1 { V1(E2<E1>), }\n enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n-//~^ ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+//~^ ERROR invalid recursive enum type\n \n impl E1 { fn foo(&self) {} }\n "}, {"sha": "66d8fb40cd120c94adf1eb04944d2ebb58175542", "filename": "src/test/compile-fail/issue-3779.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3779.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct S {\n-    //~^ ERROR illegal recursive struct type; wrap the inner value in a box to make it representable\n+    //~^ ERROR invalid recursive struct type\n     element: Option<S>\n }\n "}, {"sha": "9a71dc980149c18e9458229affda4fcd44e8b687", "filename": "src/test/compile-fail/old-suffixes-are-really-forbidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fold-suffixes-are-really-forbidden.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let a = 1_is; //~ ERROR illegal suffix\n-    let b = 2_us; //~ ERROR illegal suffix\n+    let a = 1_is; //~ ERROR invalid suffix\n+    let b = 2_us; //~ ERROR invalid suffix\n }"}, {"sha": "33dcbdf74d2269fa63740a14d6229ae5fb7fbab6", "filename": "src/test/compile-fail/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursive-enum.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: illegal recursive enum type\n+// error-pattern: invalid recursive enum type\n \n enum list<T> { cons(T, list<T>), nil }\n "}, {"sha": "69d63f3820c6c257a38da6a19e72fb4566e32e00", "filename": "src/test/compile-fail/regions-name-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-static.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<'static> { //~ ERROR illegal lifetime parameter name: `'static`\n+struct Foo<'static> { //~ ERROR invalid lifetime parameter name: `'static`\n     x: &'static isize\n }\n "}, {"sha": "3b08d900733c5e219ac4e3d038d25bd19b032270", "filename": "src/test/compile-fail/type-recursive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-recursive.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal recursive struct type\n+// error-pattern:invalid recursive struct type\n struct t1 {\n     foo: isize,\n     foolish: t1"}, {"sha": "2277b1bad776dfb751a3e07fcda35059d452d01c", "filename": "src/test/compile-fail/typeck-cast-pointer-to-float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,5 +11,6 @@\n fn main() {\n     let x : i16 = 22;\n     ((&x) as *const i16) as f32;\n-    //~^ ERROR illegal cast; cast through a usize first: `*const i16` as `f32`\n+    //~^ ERROR casting `*const i16` as `f32` is invalid\n+    //~^^ HELP cast through a usize first\n }"}, {"sha": "8b63dd51729b882ddaacece7df5d08d1252e6c83", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:illegal cast\n+// error-pattern:casting\n \n #![feature(libc)]\n "}, {"sha": "26c59c440d47bdd432662010912f401aeb4352e1", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let mut x1 = X { y: [0, 0] };\n \n     // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR illegal cast\n+    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR casting\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}, {"sha": "a2ee2f6e88ca646f54f024f07bf6c24a8b6179b1", "filename": "src/test/parse-fail/bad-lit-suffixes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-lit-suffixes.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -12,28 +12,28 @@\n \n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR ABI spec with a suffix is illegal\n+    \"C\"suffix //~ ERROR ABI spec with a suffix is invalid\n {}\n \n fn main() {\n-    \"\"suffix; //~ ERROR str literal with a suffix is illegal\n-    b\"\"suffix; //~ ERROR binary str literal with a suffix is illegal\n-    r#\"\"#suffix; //~ ERROR str literal with a suffix is illegal\n-    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is illegal\n-    'a'suffix; //~ ERROR char literal with a suffix is illegal\n-    b'a'suffix; //~ ERROR byte literal with a suffix is illegal\n+    \"\"suffix; //~ ERROR str literal with a suffix is invalid\n+    b\"\"suffix; //~ ERROR binary str literal with a suffix is invalid\n+    r#\"\"#suffix; //~ ERROR str literal with a suffix is invalid\n+    br#\"\"#suffix; //~ ERROR binary str literal with a suffix is invalid\n+    'a'suffix; //~ ERROR char literal with a suffix is invalid\n+    b'a'suffix; //~ ERROR byte literal with a suffix is invalid\n \n-    1234u1024; //~ ERROR illegal width `1024` for integer literal\n-    1234i1024; //~ ERROR illegal width `1024` for integer literal\n-    1234f1024; //~ ERROR illegal width `1024` for float literal\n-    1234.5f1024; //~ ERROR illegal width `1024` for float literal\n+    1234u1024; //~ ERROR invalid width `1024` for integer literal\n+    1234i1024; //~ ERROR invalid width `1024` for integer literal\n+    1234f1024; //~ ERROR invalid width `1024` for float literal\n+    1234.5f1024; //~ ERROR invalid width `1024` for float literal\n \n-    1234suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    0b101suffix; //~ ERROR illegal suffix `suffix` for numeric literal\n-    1.0suffix; //~ ERROR illegal suffix `suffix` for float literal\n-    1.0e10suffix; //~ ERROR illegal suffix `suffix` for float literal\n+    1234suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    0b101suffix; //~ ERROR invalid suffix `suffix` for numeric literal\n+    1.0suffix; //~ ERROR invalid suffix `suffix` for float literal\n+    1.0e10suffix; //~ ERROR invalid suffix `suffix` for float literal\n }"}, {"sha": "3321f2450c1885b6016eb7be3b1f479ef7c93f3e", "filename": "src/test/parse-fail/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-literals.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -17,7 +17,7 @@ static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b'\\f';  //~ ERROR unknown byte escape\n-    b'\\x0Z';  //~ ERROR illegal character in numeric character escape: Z\n+    b'\\x0Z';  //~ ERROR invalid character in numeric character escape: Z\n     b'\t';  //~ ERROR byte constant must be escaped\n     b''';  //~ ERROR byte constant must be escaped\n     b'\u00e9';  //~ ERROR byte constant must be ASCII"}, {"sha": "22f123416f26e75d168e2de52b3fa0b3ff626dee", "filename": "src/test/parse-fail/byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbyte-string-literals.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -17,7 +17,7 @@ static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {\n     b\"\\f\";  //~ ERROR unknown byte escape\n-    b\"\\x0Z\";  //~ ERROR illegal character in numeric character escape: Z\n+    b\"\\x0Z\";  //~ ERROR invalid character in numeric character escape: Z\n     b\"\u00e9\";  //~ ERROR byte constant must be ASCII\n     b\"a  //~ ERROR unterminated double quote byte string\n }"}, {"sha": "d2f78ef897b353da482e94178131040c5b77aaca", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -23,25 +23,25 @@ fn main() {\n     //~^ ERROR numeric character escape is too short\n \n     let _ = b'\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = '\\x5';\n     //~^ ERROR numeric character escape is too short\n \n     let _ = '\\xxy';\n-    //~^ ERROR illegal character in numeric character escape: x\n-    //~^^ ERROR illegal character in numeric character escape: y\n+    //~^ ERROR invalid character in numeric character escape: x\n+    //~^^ ERROR invalid character in numeric character escape: y\n \n     let _ = b\"\\u{a4a4} \\xf \\u\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR incorrect unicode escape sequence\n     //~^^^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n     let _ = \"\\u{ffffff} \\xf \\u\";\n-    //~^ ERROR illegal unicode character escape\n-    //~^^ ERROR illegal character in numeric character escape:\n+    //~^ ERROR invalid unicode character escape\n+    //~^^ ERROR invalid character in numeric character escape:\n     //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n     //~^^^^ ERROR incorrect unicode escape sequence\n }"}, {"sha": "e152a369290b71f6861f993f9f7ca07596c16c77", "filename": "src/test/parse-fail/issue-8537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fissue-8537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-8537.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,7 +11,7 @@\n // compile-flags: -Z parse-only\n \n pub extern\n-  \"invalid-ab_isize\" //~ ERROR illegal ABI\n+  \"invalid-ab_isize\" //~ ERROR invalid ABI\n fn foo() {}\n \n fn main() {}"}, {"sha": "d12bb63111b9efb287db4d87c045e830303d802b", "filename": "src/test/parse-fail/new-unicode-escapes-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n pub fn main() {\n-    let s = \"\\u{d805}\"; //~ ERROR illegal unicode character escape\n+    let s = \"\\u{d805}\"; //~ ERROR invalid unicode character escape\n }"}, {"sha": "fe125da1755bd6c52c4f0bd4ddf7a8977568671f", "filename": "src/test/parse-fail/new-unicode-escapes-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let s = \"\\u{lol}\";\n-     //~^ ERROR illegal character in unicode escape: l\n-     //~^^ ERROR illegal character in unicode escape: o\n-     //~^^^ ERROR illegal character in unicode escape: l\n+     //~^ ERROR invalid character in unicode escape: l\n+     //~^^ ERROR invalid character in unicode escape: o\n+     //~^^^ ERROR invalid character in unicode escape: l\n }"}, {"sha": "3fc5f8aae1876a80394db694213dbaea0e52c4f9", "filename": "src/test/parse-fail/raw-str-delim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddbce1107bc95ea4ad0da6299ca31e313a39e0fc/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fraw-str-delim.rs?ref=ddbce1107bc95ea4ad0da6299ca31e313a39e0fc", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n static s: &'static str =\n-    r#x\"#\"x# //~ ERROR only `#` is allowed in raw string delimitation; found illegal character\n+    r#x\"#\"x# //~ ERROR found invalid character; only `#` is allowed in raw string delimitation\n ;"}]}