{"sha": "481971978fda83aa7cf1f1f3c80cfad822377cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MTk3MTk3OGZkYTgzYWE3Y2YxZjFmM2M4MGNmYWQ4MjIzNzdjZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T08:24:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T08:24:31Z"}, "message": "Auto merge of #86586 - Smittyvb:https-everywhere, r=petrochenkov\n\nUse HTTPS links where possible\n\nWhile looking at #86583, I wondered how many other (insecure) HTTP links were in `rustc`. This changes most other `http` links to `https`. While most of the links are in comments or documentation, there are a few other HTTP links that are used by CI that are changed to HTTPS.\n\nNotes:\n- I didn't change any to or in licences\n- Some links don't support HTTPS :(\n- Some `http` links were dead, in those cases I upgraded them to their new places (all of which used HTTPS)", "tree": {"sha": "93a3b16e36f948703197603b3f3bea4447780465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a3b16e36f948703197603b3f3bea4447780465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481971978fda83aa7cf1f1f3c80cfad822377cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481971978fda83aa7cf1f1f3c80cfad822377cf2", "html_url": "https://github.com/rust-lang/rust/commit/481971978fda83aa7cf1f1f3c80cfad822377cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481971978fda83aa7cf1f1f3c80cfad822377cf2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6830052c7b87217886324129bffbe096e485d415", "url": "https://api.github.com/repos/rust-lang/rust/commits/6830052c7b87217886324129bffbe096e485d415", "html_url": "https://github.com/rust-lang/rust/commit/6830052c7b87217886324129bffbe096e485d415"}, {"sha": "3da037f82988b8b3aca2ce13c5c81ba975923cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da037f82988b8b3aca2ce13c5c81ba975923cab", "html_url": "https://github.com/rust-lang/rust/commit/3da037f82988b8b3aca2ce13c5c81ba975923cab"}], "stats": {"total": 197, "additions": 99, "deletions": 98}, "files": [{"sha": "f8fac0c2358c9b2a4a19db01b93a9ad7bd8e1559", "filename": "compiler/rustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -552,7 +552,7 @@ fn fma() {\n         assert!(f1.is_negative() && f1.is_zero());\n     }\n \n-    // Test x87 extended precision case from http://llvm.org/PR20728.\n+    // Test x87 extended precision case from https://llvm.org/PR20728.\n     {\n         let mut m1 = X87DoubleExtended::from_u128(1).value;\n         let m2 = X87DoubleExtended::from_u128(1).value;"}, {"sha": "582c9354041dedad47bd4ccdc9b1c48f40058e6b", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -606,7 +606,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 // According to LLVM [1] building a nontemporal store must\n                 // *always* point to a metadata value of the integer 1.\n                 //\n-                // [1]: http://llvm.org/docs/LangRef.html#store-instruction\n+                // [1]: https://llvm.org/docs/LangRef.html#store-instruction\n                 let one = self.cx.const_i32(1);\n                 let node = llvm::LLVMMDNodeInContext(self.cx.llcx, &one, 1);\n                 llvm::LLVMSetMetadata(store, llvm::MD_nontemporal as c_uint, node);"}, {"sha": "7415a57045336cb3746731dcf749d3cc33f39ca5", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -71,7 +71,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub statics_to_rauw: RefCell<Vec<(&'ll Value, &'ll Value)>>,\n \n     /// Statics that will be placed in the llvm.used variable\n-    /// See <http://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n+    /// See <https://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n     pub used_statics: RefCell<Vec<&'ll Value>>,\n \n     pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'ll Type>>,"}, {"sha": "c1521a760b00205518c226ef54812e1c0646f819", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -102,7 +102,7 @@ pub fn SetFunctionCallConv(fn_: &'a Value, cc: CallConv) {\n // example happen for generics when using multiple codegen units. This function simply uses the\n // value's name as the comdat value to make sure that it is in a 1-to-1 relationship to the\n // function.\n-// For more details on COMDAT sections see e.g., http://www.airs.com/blog/archives/52\n+// For more details on COMDAT sections see e.g., https://www.airs.com/blog/archives/52\n pub fn SetUniqueComdat(llmod: &Module, val: &'a Value) {\n     unsafe {\n         let name = get_value_name(val);"}, {"sha": "27390fd2e4d9117b784b786a7c466bdffb1d79eb", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,20 +1,20 @@\n-//! Generate files suitable for use with [Graphviz](http://www.graphviz.org/)\n+//! Generate files suitable for use with [Graphviz](https://www.graphviz.org/)\n //!\n //! The `render` function generates output (e.g., an `output.dot` file) for\n-//! use with [Graphviz](http://www.graphviz.org/) by walking a labeled\n+//! use with [Graphviz](https://www.graphviz.org/) by walking a labeled\n //! graph. (Graphviz can then automatically lay out the nodes and edges\n //! of the graph, and also optionally render the graph as an image or\n //! other [output formats](\n-//! http://www.graphviz.org/content/output-formats), such as SVG.)\n+//! https://www.graphviz.org/content/output-formats), such as SVG.)\n //!\n //! Rather than impose some particular graph data structure on clients,\n //! this library exposes two traits that clients can implement on their\n //! own structs before handing them over to the rendering function.\n //!\n //! Note: This library does not yet provide access to the full\n //! expressiveness of the [DOT language](\n-//! http://www.graphviz.org/doc/info/lang.html). For example, there are\n-//! many [attributes](http://www.graphviz.org/content/attrs) related to\n+//! https://www.graphviz.org/doc/info/lang.html). For example, there are\n+//! many [attributes](https://www.graphviz.org/content/attrs) related to\n //! providing layout hints (e.g., left-to-right versus top-down, which\n //! algorithm to use, etc). The current intention of this library is to\n //! emit a human-readable .dot file with very regular structure suitable\n@@ -267,9 +267,9 @@\n //!\n //! # References\n //!\n-//! * [Graphviz](http://www.graphviz.org/)\n+//! * [Graphviz](https://www.graphviz.org/)\n //!\n-//! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n+//! * [DOT language](https://www.graphviz.org/doc/info/lang.html)\n \n #![doc(\n     html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n@@ -292,7 +292,7 @@ pub enum LabelText<'a> {\n     LabelStr(Cow<'a, str>),\n \n     /// This kind of label uses the graphviz label escString type:\n-    /// <http://www.graphviz.org/content/attrs#kescString>\n+    /// <https://www.graphviz.org/content/attrs#kescString>\n     ///\n     /// Occurrences of backslashes (`\\`) are not escaped; instead they\n     /// are interpreted as initiating an escString escape sequence.\n@@ -307,12 +307,12 @@ pub enum LabelText<'a> {\n     /// printed exactly as given, but between `<` and `>`. **No\n     /// escaping is performed.**\n     ///\n-    /// [html]: http://www.graphviz.org/content/node-shapes#html\n+    /// [html]: https://www.graphviz.org/content/node-shapes#html\n     HtmlStr(Cow<'a, str>),\n }\n \n /// The style for a node or edge.\n-/// See <http://www.graphviz.org/doc/info/attrs.html#k:style> for descriptions.\n+/// See <https://www.graphviz.org/doc/info/attrs.html#k:style> for descriptions.\n /// Note that some of these are not valid for edges.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Style {\n@@ -439,7 +439,7 @@ pub trait Labeller<'a> {\n     /// Maps `n` to one of the [graphviz `shape` names][1]. If `None`\n     /// is returned, no `shape` attribute is specified.\n     ///\n-    /// [1]: http://www.graphviz.org/content/node-shapes\n+    /// [1]: https://www.graphviz.org/content/node-shapes\n     fn node_shape(&'a self, _node: &Self::Node) -> Option<LabelText<'a>> {\n         None\n     }"}, {"sha": "4abc4b29b50e5117b64c7d2fedefd92f5c4ae3da", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -581,7 +581,7 @@ fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n \n fn escape_dep_filename(filename: &String) -> String {\n     // Apparently clang and gcc *only* escape spaces:\n-    // http://llvm.org/klaus/clang/commit/9d50634cfc268ecc9a7250226dd5ca0e945240d4\n+    // https://llvm.org/klaus/clang/commit/9d50634cfc268ecc9a7250226dd5ca0e945240d4\n     filename.replace(\" \", \"\\\\ \")\n }\n "}, {"sha": "5dc5080712ec35648ac2fd7fd67186d780b7538c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1370,8 +1370,8 @@ pub type Region<'tcx> = &'tcx RegionKind;\n /// happen, you can use `leak_check`. This is more clearly explained\n /// by the [rustc dev guide].\n ///\n-/// [1]: http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n-/// [2]: http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n+/// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n+/// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]\n pub enum RegionKind {"}, {"sha": "0306782bfe442ec14124a56f75dc2d84623f2781", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1380,7 +1380,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// terms that the \"longer free region\" `'a` outlived the \"shorter free region\" `'b`.\n     ///\n     /// More details can be found in this blog post by Niko:\n-    /// <http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/>\n+    /// <https://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/>\n     ///\n     /// In the canonical example\n     ///"}, {"sha": "3eebc088f3fb7c4bddea0e010b314163b6b21857", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,5 +1,5 @@\n // Characters and their corresponding confusables were collected from\n-// http://www.unicode.org/Public/security/10.0.0/confusables.txt\n+// https://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n use super::StringReader;\n use crate::token;"}, {"sha": "0ba73657b5b087fa57ce3c532c10cab56e3ae6c2", "filename": "compiler/rustc_target/src/abi/call/msp430.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmsp430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmsp430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmsp430.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,5 +1,5 @@\n // Reference: MSP430 Embedded Application Binary Interface\n-// http://www.ti.com/lit/an/slaa534/slaa534.pdf\n+// https://www.ti.com/lit/an/slaa534a/slaa534a.pdf\n \n use crate::abi::call::{ArgAbi, FnAbi};\n "}, {"sha": "428dd95bbcd65be12d69d05b56ad90119e7e5126", "filename": "compiler/rustc_target/src/abi/call/nvptx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,5 +1,5 @@\n // Reference: PTX Writer's Guide to Interoperability\n-// http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n+// https://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n use crate::abi::call::{ArgAbi, FnAbi};\n "}, {"sha": "16f331b16d5619b5e0c7263c99d92e8a7f8c4cc8", "filename": "compiler/rustc_target/src/abi/call/nvptx64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,5 +1,5 @@\n // Reference: PTX Writer's Guide to Interoperability\n-// http://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n+// https://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n \n use crate::abi::call::{ArgAbi, FnAbi};\n "}, {"sha": "ff8849e1cf83beac6293f686342379d49a33d964", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -38,7 +38,7 @@ where\n             // small structs are returned as integers.\n             //\n             // Some links:\n-            // http://www.angelcode.com/dev/callconv/callconv.html\n+            // https://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = cx.target_spec();\n             if t.abi_return_struct_as_int {"}, {"sha": "9a24edf1a42cb25f24f6c5eed27356f49f4ef157", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -16,7 +16,7 @@ use rustc_span::Span;\n \n pub mod call;\n \n-/// Parsed [Data layout](http://llvm.org/docs/LangRef.html#data-layout)\n+/// Parsed [Data layout](https://llvm.org/docs/LangRef.html#data-layout)\n /// for a target, which contains everything needed to compute layouts.\n pub struct TargetDataLayout {\n     pub endian: Endian,"}, {"sha": "d00883ae71ad3ce61d5f44530476e2fa9be71360", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -6,7 +6,7 @@ use crate::spec::{SanitizerSet, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.max_atomic_width = Some(128);\n-    // As documented in http://developer.android.com/ndk/guides/cpu-features.html\n+    // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n     // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n     base.features = \"+neon,+fp-armv8\".to_string();\n     base.supported_sanitizers = SanitizerSet::HWADDRESS;"}, {"sha": "640f9e42f4ab1c19ea5d990e1cc8559e4bb2ee72", "filename": "compiler/rustc_target/src/spec/i686_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_linux_android.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n \n     base.max_atomic_width = Some(64);\n \n-    // http://developer.android.com/ndk/guides/abis.html#x86\n+    // https://developer.android.com/ndk/guides/abis.html#x86\n     base.cpu = \"pentiumpro\".to_string();\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3\".to_string();\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "0bf89c3f93b994ba34b9ff46ddd37ef541f5f7f3", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -25,7 +25,7 @@\n //!\n //! # Defining a new target\n //!\n-//! Targets are defined using [JSON](http://json.org/). The `Target` struct in\n+//! Targets are defined using [JSON](https://json.org/). The `Target` struct in\n //! this module defines the format the JSON file should take, though each\n //! underscore in the field names should be replaced with a hyphen (`-`) in the\n //! JSON file. Some fields are required in every target specification, such as\n@@ -950,7 +950,7 @@ pub struct Target {\n     /// Architecture to use for ABI considerations. Valid options include: \"x86\",\n     /// \"x86_64\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"powerpc64\", and others.\n     pub arch: String,\n-    /// [Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n+    /// [Data layout](https://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.\n     pub data_layout: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,"}, {"sha": "a838172d664c355b6a774ac70f550f252433182a", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -8,7 +8,7 @@\n //! ## `Ty` lowering\n //! Much of the `Ty` lowering is 1:1 with Chalk. (Or will be eventually). A\n //! helpful table for what types lower to what can be found in the\n-//! [Chalk book](http://rust-lang.github.io/chalk/book/types/rust_types.html).\n+//! [Chalk book](https://rust-lang.github.io/chalk/book/types/rust_types.html).\n //! The most notable difference lies with `Param`s. To convert from rustc to\n //! Chalk, we eagerly and deeply convert `Param`s to placeholders (in goals) or\n //! bound variables (for clause generation through functions in `db`)."}, {"sha": "4c8ea6902ff14eea756de30a4f409ef97173d57f", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1042,7 +1042,7 @@ where\n }\n \n /// This merge sort borrows some (but not all) ideas from TimSort, which is described in detail\n-/// [here](http://svn.python.org/projects/python/trunk/Objects/listsort.txt).\n+/// [here](https://github.com/python/cpython/blob/main/Objects/listsort.txt).\n ///\n /// The algorithm identifies strictly descending and non-descending subsequences, which are called\n /// natural runs. There is a stack of pending runs yet to be merged. Each newly found run is pushed"}, {"sha": "62ba2e57655074ecc0dd613103dfb6a8bee5de62", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -396,7 +396,7 @@ impl str {\n         return s;\n \n         fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) {\n-            // See http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992\n+            // See https://www.unicode.org/versions/Unicode7.0.0/ch03.pdf#G33992\n             // for the definition of `Final_Sigma`.\n             debug_assert!('\u03a3'.len_utf8() == 2);\n             let is_word_final = case_ignoreable_then_cased(from[..i].chars().rev())"}, {"sha": "24257ba98785d52421d6e83e8e6a5c34133740cd", "filename": "library/core/benches/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fiter.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -45,7 +45,7 @@ fn bench_max_by_key(b: &mut Bencher) {\n     })\n }\n \n-// http://www.reddit.com/r/rust/comments/31syce/using_iterators_to_find_the_index_of_the_min_or/\n+// https://www.reddit.com/r/rust/comments/31syce/using_iterators_to_find_the_index_of_the_min_or/\n #[bench]\n fn bench_max_by_key2(b: &mut Bencher) {\n     fn max_index_iter(array: &[i32]) -> usize {"}, {"sha": "e5af22c8fbbef5ae04603c40e64687d73f5517e9", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -15,8 +15,8 @@ impl char {\n     /// Point], but only ones within a certain range. `MAX` is the highest valid\n     /// code point that's a valid [Unicode Scalar Value].\n     ///\n-    /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n-    /// [Code Point]: http://www.unicode.org/glossary/#code_point\n+    /// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+    /// [Code Point]: https://www.unicode.org/glossary/#code_point\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const MAX: char = '\\u{10ffff}';\n \n@@ -28,7 +28,7 @@ impl char {\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n \n-    /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n+    /// The version of [Unicode](https://www.unicode.org/) that the Unicode parts of\n     /// `char` and `str` methods are based on.\n     ///\n     /// New versions of Unicode are released regularly and subsequently all methods\n@@ -1494,8 +1494,8 @@ impl char {\n     /// before using this function.\n     ///\n     /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n-    /// [pct]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n-    /// [bfs]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n+    /// [pct]: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n+    /// [bfs]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n     ///\n     /// # Examples\n     ///"}, {"sha": "0728523d0a413a9bb34aa057bf933de14d929cc3", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -5,8 +5,8 @@\n //! scalar value]', which is similar to, but not the same as, a '[Unicode code\n //! point]'.\n //!\n-//! [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n-//! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n+//! [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+//! [Unicode code point]: https://www.unicode.org/glossary/#code_point\n //!\n //! This module exists for technical reasons, the primary documentation for\n //! `char` is directly on [the `char` primitive type][char] itself.\n@@ -95,8 +95,8 @@ const MAX_THREE_B: u32 = 0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Code Point]: http://www.unicode.org/glossary/#code_point\n+/// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Code Point]: https://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: char = char::MAX;\n "}, {"sha": "1d3a12962145e44c780d568c2c67689d37e92a1a", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -145,7 +145,7 @@ impl_from! { i16, isize, #[stable(feature = \"lossless_iusize_conv\", since = \"1.2\n \n // CHERI proposes 256-bit \u201ccapabilities\u201d. Unclear if this would be relevant to usize/isize.\n // https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/20171017a-cheri-poster.pdf\n-// http://www.csl.sri.com/users/neumann/2012resolve-cheri.pdf\n+// https://www.csl.sri.com/users/neumann/2012resolve-cheri.pdf\n \n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64."}, {"sha": "baa0952c8bb75dc640279a6455be678b64c267aa", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -25,15 +25,15 @@\n //! across other volatile intrinsics. See the LLVM documentation on\n //! [[volatile]].\n //!\n-//! [volatile]: http://llvm.org/docs/LangRef.html#volatile-memory-accesses\n+//! [volatile]: https://llvm.org/docs/LangRef.html#volatile-memory-accesses\n //!\n //! # Atomics\n //!\n //! The atomic intrinsics provide common atomic operations on machine\n //! words, with multiple possible memory orderings. They obey the same\n //! semantics as C++11. See the LLVM documentation on [[atomics]].\n //!\n-//! [atomics]: http://llvm.org/docs/Atomics.html\n+//! [atomics]: https://llvm.org/docs/Atomics.html\n //!\n //! A quick refresher on memory ordering:\n //!"}, {"sha": "6b4215c20ad663d11443949aa0084d7bd9e17b85", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -33,7 +33,7 @@\n //!\n //! Primarily, this module and its children implement the algorithms described in:\n //! \"How to Read Floating Point Numbers Accurately\" by William D. Clinger,\n-//! available online: <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4152>\n+//! available online: <https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4152>\n //!\n //! In addition, there are numerous helper functions that are used in the paper but not available\n //! in Rust (or at least in core). Our version is additionally complicated by the need to handle"}, {"sha": "6232ea3e44c5cac540eb6377f8777fdc2cb14bb8", "filename": "library/core/src/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fflt2dec%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -49,7 +49,7 @@ the supplied buffer and let the algorithm to return.\n # Implementation overview\n \n It is easy to get the floating point printing correct but slow (Russ Cox has\n-[demonstrated](http://research.swtch.com/ftoa) how it's easy), or incorrect but\n+[demonstrated](https://research.swtch.com/ftoa) how it's easy), or incorrect but\n fast (na\u00efve division and modulo). But it is surprisingly hard to print\n floating point numbers correctly *and* efficiently.\n "}, {"sha": "02434b781e49a11cc12e24aaa001df37afdc6a84", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -590,8 +590,8 @@ impl u8 {\n     /// before using this function.\n     ///\n     /// [infra-aw]: https://infra.spec.whatwg.org/#ascii-whitespace\n-    /// [pct]: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n-    /// [bfs]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n+    /// [pct]: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html#tag_07_03_01\n+    /// [bfs]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05\n     ///\n     /// # Examples\n     ///"}, {"sha": "36c2c4abdb4c5b0611e0b489e703bd1a71c3d785", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -227,7 +227,7 @@ where\n /// Partitioning is performed block-by-block in order to minimize the cost of branching operations.\n /// This idea is presented in the [BlockQuicksort][pdf] paper.\n ///\n-/// [pdf]: http://drops.dagstuhl.de/opus/volltexte/2016/6389/pdf/LIPIcs-ESA-2016-38.pdf\n+/// [pdf]: https://drops.dagstuhl.de/opus/volltexte/2016/6389/pdf/LIPIcs-ESA-2016-38.pdf\n fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n where\n     F: FnMut(&T, &T) -> bool,"}, {"sha": "72fa059b787df48bf7c67dea1964c3696038be5b", "filename": "library/core/src/unicode/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -4,7 +4,7 @@\n pub(crate) mod printable;\n mod unicode_data;\n \n-/// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n+/// The version of [Unicode](https://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on.\n ///\n /// New versions of Unicode are released regularly and subsequently all methods"}, {"sha": "c42850d2324134acf5f4baa5c5a7f27c0f86e25e", "filename": "library/core/src/unicode/printable.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Funicode%2Fprintable.py", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fcore%2Fsrc%2Funicode%2Fprintable.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fprintable.py?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -130,7 +130,7 @@ def print_normal(normal, normalname):\n     print(\"];\")\n \n def main():\n-    file = get_file(\"http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\")\n+    file = get_file(\"https://www.unicode.org/Public/UNIDATA/UnicodeData.txt\")\n \n     codepoints = get_codepoints(file)\n "}, {"sha": "7394feab82f223c7161bdcd8ebe475eda730ebe9", "filename": "library/panic_unwind/src/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,9 +1,9 @@\n //! Parsing of GCC-style Language-Specific Data Area (LSDA)\n //! For details see:\n-//!  * <http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html>\n-//!  * <http://mentorembedded.github.io/cxx-abi/exceptions.pdf>\n-//!  * <http://www.airs.com/blog/archives/460>\n-//!  * <http://www.airs.com/blog/archives/464>\n+//!  * <https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html>\n+//!  * <https://itanium-cxx-abi.github.io/cxx-abi/exceptions.pdf>\n+//!  * <https://www.airs.com/blog/archives/460>\n+//!  * <https://www.airs.com/blog/archives/464>\n //!\n //! A reference implementation may be found in the GCC source tree\n //! (`<root>/libgcc/unwind-c.c` as of this writing)."}, {"sha": "9d6ede73e3db12e8ae137464e8d21f9bee1611fb", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -5,8 +5,8 @@\n //! documents linked from it.\n //! These are also good reads:\n //!  * <https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html>\n-//!  * <http://monoinfinito.wordpress.com/series/exception-handling-in-c/>\n-//!  * <http://www.airs.com/blog/index.php?s=exception+frames>\n+//!  * <https://monoinfinito.wordpress.com/series/exception-handling-in-c/>\n+//!  * <https://www.airs.com/blog/index.php?s=exception+frames>\n //!\n //! ## A brief summary\n //!\n@@ -94,7 +94,7 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n // and TargetLowering::getExceptionSelectorRegister() for each architecture,\n // then mapped to DWARF register numbers via register definition tables\n // (typically <arch>RegisterInfo.td, search for \"DwarfRegNum\").\n-// See also http://llvm.org/docs/WritingAnLLVMBackend.html#defining-a-register.\n+// See also https://llvm.org/docs/WritingAnLLVMBackend.html#defining-a-register.\n \n #[cfg(target_arch = \"x86\")]\n const UNWIND_DATA_REG: (i32, i32) = (0, 2); // EAX, EDX\n@@ -130,7 +130,7 @@ const UNWIND_DATA_REG: (i32, i32) = (10, 11); // x10, x11\n cfg_if::cfg_if! {\n     if #[cfg(all(target_arch = \"arm\", not(target_os = \"ios\"), not(target_os = \"netbsd\")))] {\n         // ARM EHABI personality routine.\n-        // http://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf\n+        // https://infocenter.arm.com/help/topic/com.arm.doc.ihi0038b/IHI0038B_ehabi.pdf\n         //\n         // iOS uses the default routine instead since it uses SjLj unwinding.\n         #[lang = \"eh_personality\"]"}, {"sha": "754dbb77af6ca42d71ce2ad89b607c7cc04c5760", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -42,7 +42,7 @@\n //!   of the `try` intrinsic.\n //!\n //! [win64]: https://docs.microsoft.com/en-us/cpp/build/exception-handling-x64\n-//! [llvm]: http://llvm.org/docs/ExceptionHandling.html#background-on-windows-exceptions\n+//! [llvm]: https://llvm.org/docs/ExceptionHandling.html#background-on-windows-exceptions\n \n #![allow(nonstandard_style)]\n \n@@ -100,7 +100,7 @@ struct Exception {\n // In any case, these structures are all constructed in a similar manner, and\n // it's just somewhat verbose for us.\n //\n-// [1]: http://www.geoffchappell.com/studies/msvc/language/predefined/\n+// [1]: https://www.geoffchappell.com/studies/msvc/language/predefined/\n \n #[cfg(target_arch = \"x86\")]\n #[macro_use]"}, {"sha": "64f88c1aba68e602e336408d95d1a5aed18ac7bb", "filename": "library/std/src/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -305,7 +305,7 @@ impl Error for VarError {\n ///\n /// Discussion of this unsafety on Unix may be found in:\n ///\n-///  - [Austin Group Bugzilla](http://austingroupbugs.net/view.php?id=188)\n+///  - [Austin Group Bugzilla](https://austingroupbugs.net/view.php?id=188)\n ///  - [GNU C library Bugzilla](https://sourceware.org/bugzilla/show_bug.cgi?id=15607#c2)\n ///\n /// # Panics\n@@ -344,7 +344,7 @@ fn _set_var(key: &OsStr, value: &OsStr) {\n ///\n /// Discussion of this unsafety on Unix may be found in:\n ///\n-///  - [Austin Group Bugzilla](http://austingroupbugs.net/view.php?id=188)\n+///  - [Austin Group Bugzilla](https://austingroupbugs.net/view.php?id=188)\n ///  - [GNU C library Bugzilla](https://sourceware.org/bugzilla/show_bug.cgi?id=15607#c2)\n ///\n /// # Panics"}, {"sha": "0b7dc256db8f4913886a5b31a4f106f0ab4cf9a3", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -124,8 +124,8 @@\n //! method is an [`OsString`] which can be round-tripped to a Windows\n //! string losslessly.\n //!\n-//! [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n-//! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n+//! [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+//! [Unicode code point]: https://www.unicode.org/glossary/#code_point\n //! [`env::set_var()`]: crate::env::set_var\n //! [`env::var_os()`]: crate::env::var_os\n //! [unix.OsStringExt]: crate::os::unix::ffi::OsStringExt"}, {"sha": "4b6d60d121e13538e1c74c72ca3fcec0bb03f47f", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -379,7 +379,7 @@ impl Ipv4Addr {\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n     ///\n-    /// [ip7]: http://man7.org/linux/man-pages/man7/ip.7.html\n+    /// [ip7]: https://man7.org/linux/man-pages/man7/ip.7.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "7bc1f5e918ec9ab08712c5a047b3df94793f195c", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -277,8 +277,8 @@ mod prim_never {}\n /// scalar value]', which is similar to, but not the same as, a '[Unicode code\n /// point]'.\n ///\n-/// [Unicode scalar value]: http://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Unicode code point]: http://www.unicode.org/glossary/#code_point\n+/// [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n+/// [Unicode code point]: https://www.unicode.org/glossary/#code_point\n ///\n /// This documentation describes a number of methods and trait implementations on the\n /// `char` type. For technical reasons, there is additional, separate"}, {"sha": "b93eb056da4f6cbf7e92ade8dd27d4d073c35c94", "filename": "library/std/src/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -8,8 +8,8 @@\n //! method, and see the method for more information about it. Due to this\n //! caveat, this queue may not be appropriate for all use-cases.\n \n-// http://www.1024cores.net/home/lock-free-algorithms\n-//                         /queues/non-intrusive-mpsc-node-based-queue\n+// https://www.1024cores.net/home/lock-free-algorithms\n+//                          /queues/non-intrusive-mpsc-node-based-queue\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;"}, {"sha": "7e745eb31de60d61fe6edada4dd1a508e29549f3", "filename": "library/std/src/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -4,7 +4,7 @@\n //! concurrently between two threads. This data structure is safe to use and\n //! enforces the semantics that there is one pusher and one popper.\n \n-// http://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n+// https://www.1024cores.net/home/lock-free-algorithms/queues/unbounded-spsc-queue\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;"}, {"sha": "27d44abeb74c510280fda18bd880b0c97f94e1f2", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -240,7 +240,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"macos\")] {\n         #[link(name = \"System\")]\n         // res_init and friends require -lresolv on macOS/iOS.\n-        // See #41582 and http://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n+        // See #41582 and https://blog.achernya.com/2013/03/os-x-has-silly-libsystem.html\n         #[link(name = \"resolv\")]\n         extern \"C\" {}\n     } else if #[cfg(target_os = \"ios\")] {"}, {"sha": "b3caf232064308acd3141c8988558f6c7813cb7b", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -207,7 +207,7 @@ impl Command {\n         // the remaining portion of this spawn in a mutex.\n         //\n         // For more information, msdn also has an article about this race:\n-        // http://support.microsoft.com/kb/315939\n+        // https://support.microsoft.com/kb/315939\n         static CREATE_PROCESS_LOCK: StaticMutex = StaticMutex::new();\n \n         let _guard = unsafe { CREATE_PROCESS_LOCK.lock() };"}, {"sha": "0bc511146654b790fbbd6807c29d7ba266e84aa9", "filename": "library/std/src/sys/windows/thread_local_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -35,7 +35,7 @@ pub type Dtor = unsafe extern \"C\" fn(*mut u8);\n //\n // For more details and nitty-gritty, see the code sections below!\n //\n-// [1]: http://www.codeproject.com/Articles/8113/Thread-Local-Storage-The-C-Way\n+// [1]: https://www.codeproject.com/Articles/8113/Thread-Local-Storage-The-C-Way\n // [2]: https://github.com/ChromiumWebApps/chromium/blob/master/base\n //                        /threading/thread_local_storage_win.cc#L42\n "}, {"sha": "003069b338ef2c777b5200f3cda7f9a565c7e4cd", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -168,7 +168,7 @@ pub struct Instant(time::Instant);\n ///\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n-/// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html\n+/// [gettimeofday]: https://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n /// [GetSystemTimePreciseAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime"}, {"sha": "45fae9c76b44d1972a5009bb7cc6486f54513bd3", "filename": "library/test/src/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Ftest%2Fsrc%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/library%2Ftest%2Fsrc%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fstats.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -19,7 +19,7 @@ pub trait Stats {\n     /// [\"Adaptive Precision Floating-Point Arithmetic and Fast Robust Geometric\n     /// Predicates\"][paper]\n     ///\n-    /// [paper]: http://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps\n+    /// [paper]: https://www.cs.cmu.edu/~quake-papers/robust-arithmetic.ps\n     fn sum(&self) -> f64;\n \n     /// Minimum value of the samples."}, {"sha": "7fd6b7d160982b9b2c1949f12104f02c15e0ed2a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -77,7 +77,7 @@ def download(path, url, probably_big, verbose):\n def _download(path, url, probably_big, verbose, exception):\n     if probably_big or verbose:\n         print(\"downloading {}\".format(url))\n-    # see http://serverfault.com/questions/301128/how-to-download\n+    # see https://serverfault.com/questions/301128/how-to-download\n     if sys.platform == 'win32':\n         run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n              \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12;\","}, {"sha": "69c5de0b408316317754aea97c2345e4ef782442", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -863,7 +863,7 @@ impl Build {\n         }\n \n         // Work around an apparently bad MinGW / GCC optimization,\n-        // See: http://lists.llvm.org/pipermail/cfe-dev/2016-December/051980.html\n+        // See: https://lists.llvm.org/pipermail/cfe-dev/2016-December/051980.html\n         // See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78936\n         if &*target.triple == \"i686-pc-windows-gnu\" {\n             base.push(\"-fno-omit-frame-pointer\".into());"}, {"sha": "b967b6dbd2daebc0acc2bf7cb110d048973821be", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -218,7 +218,7 @@ impl Step for Llvm {\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n \n-        // http://llvm.org/docs/CMake.html\n+        // https://llvm.org/docs/CMake.html\n         let mut cfg = cmake::Config::new(builder.src.join(root));\n \n         let profile = match (builder.config.llvm_optimize, builder.config.llvm_release_debuginfo) {\n@@ -355,7 +355,7 @@ impl Step for Llvm {\n             }\n         }\n \n-        // http://llvm.org/docs/HowToCrossCompileLLVM.html\n+        // https://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != builder.config.build {\n             builder.ensure(Llvm { target: builder.config.build });\n             // FIXME: if the llvm root for the build triple is overridden then we"}, {"sha": "e2dbc7cfd7c640890eede20363468a4414d987f6", "filename": "src/ci/docker/host-x86_64/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Farmhf-gnu%2FDockerfile?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -58,7 +58,7 @@ RUN curl https://www.busybox.net/downloads/busybox-1.32.1.tar.bz2 | tar xjf - &&\n # Download the ubuntu rootfs, which we'll use as a chroot for all our tests.\n WORKDIR /tmp\n RUN mkdir rootfs/ubuntu\n-RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/20.04/release/ubuntu-base-20.04.1-base-armhf.tar.gz | \\\n+RUN curl https://cdimage.ubuntu.com/ubuntu-base/releases/20.04/release/ubuntu-base-20.04.1-base-armhf.tar.gz | \\\n       tar xzf - -C rootfs/ubuntu && \\\n       cd rootfs && mkdir proc sys dev etc etc/init.d\n "}, {"sha": "b305f358c5a76a43e0c075e22c8f157922f495e4", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-dragonfly/build-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-dragonfly%2Fbuild-toolchain.sh?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -39,7 +39,7 @@ rm -rf binutils\n \n # Next, download the DragonFly libc and relevant header files\n \n-URL=http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.0.0_REL.iso.bz2\n+URL=https://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.0.0_REL.iso.bz2\n mkdir dragonfly\n curl $URL | bzcat | bsdtar xf - -C dragonfly ./usr/include ./usr/lib ./lib\n "}, {"sha": "e363c4f79f9cf30a384f8ce3bfeea9a6d49b7d93", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -27,7 +27,7 @@ RUN apt-get update && apt-get build-dep -y clang llvm && apt-get install -y --no\n   g++-8-arm-linux-gnueabi\n \n RUN apt-key adv --batch --yes --keyserver keyserver.ubuntu.com --recv-keys 74DA7924C5513486\n-RUN add-apt-repository -y 'deb http://apt.dilos.org/dilos dilos2 main'\n+RUN add-apt-repository -y 'deb https://apt.dilos.org/dilos dilos2 main'\n \n ENV \\\n     AR_x86_64_fuchsia=x86_64-fuchsia-ar \\"}, {"sha": "eabff87284dc1c54736ed0ecc348c1c436bfb524", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-x86_64-fortanix-unknown-sgx-toolchain.sh?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -7,7 +7,7 @@ target=\"x86_64-fortanix-unknown-sgx\"\n \n install_prereq() {\n     curl https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -\n-    add-apt-repository -y 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'\n+    add-apt-repository -y 'deb https://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'\n     apt-get update\n     apt-get install -y --no-install-recommends \\\n             build-essential \\"}, {"sha": "25f99596099f3ec3cd6ed0f1f0e1956ea9882047", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/build-gcc.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-gcc.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2Fbuild-gcc.sh?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -22,6 +22,7 @@ cd gcc-$GCC\n # latter host is presented to `wget`! Therefore, we choose to download from the insecure HTTP server\n # instead here.\n #\n+# FIXME: use HTTPS (see https://github.com/rust-lang/rust/pull/86586#issuecomment-868355356)\n sed -i'' 's|ftp://gcc\\.gnu\\.org/|http://gcc.gnu.org/|g' ./contrib/download_prerequisites\n \n ./contrib/download_prerequisites"}, {"sha": "1f218bc834608325883ff198edbff566df015aad", "filename": "src/ci/shared.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -7,7 +7,7 @@\n \n export MIRRORS_BASE=\"https://ci-mirrors.rust-lang.org/rustc\"\n \n-# See http://unix.stackexchange.com/questions/82598\n+# See https://unix.stackexchange.com/questions/82598\n # Duplicated in docker/dist-various-2/shared.sh\n function retry {\n   echo \"Attempting with retry:\" \"$@\""}, {"sha": "cded3bbf7fc8298d49111487e18f9eb6fb844719", "filename": "src/etc/installer/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fetc%2Finstaller%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Fetc%2Finstaller%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2FREADME.md?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -18,7 +18,7 @@ prefix. You can display these options by running:\n \n     $ sudo ./install.sh --help\n \n-Read [The Book](http://doc.rust-lang.org/book/index.html) to learn how\n+Read [The Book](https://doc.rust-lang.org/book/index.html) to learn how\n to use Rust.\n \n Rust is primarily distributed under the terms of both the MIT license"}, {"sha": "67be7b9915502aeb34a81c917520029aa2a55ecb", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -73,7 +73,7 @@ function removeEmptyStringsFromArray(x) {\n  * Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported\n  * Full License can be found at http://creativecommons.org/licenses/by-sa/3.0/legalcode\n  * This code is an unmodified version of the code written by Marco de Wit\n- * and was found at http://stackoverflow.com/a/18514751/745719\n+ * and was found at https://stackoverflow.com/a/18514751/745719\n  */\n var levenshtein_row2 = [];\n function levenshtein(s1, s2) {"}, {"sha": "2d0a10d4c27d231a10285a46a7d3433055f60557", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -90,7 +90,7 @@\n }\n \n fn main() {\n-    // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n+    // Taken from https://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n         ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n          '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',"}, {"sha": "075230196e3923176a2c210af4ba7d1d7da737bf", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -86,7 +86,7 @@ fn f() {\n }\n \n fn main() {\n-    // Taken from http://www.unicode.org/Public/UNIDATA/PropList.txt\n+    // Taken from https://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n         ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n          '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',"}, {"sha": "c89f8272b1e8376a4a5b29440bf48c94dd8f3ee3", "filename": "src/test/run-make-fulldeps/extern-fn-with-packed-struct/test.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-with-packed-struct%2Ftest.c?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,4 +1,4 @@\n-// Pragma needed cause of gcc bug on windows: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n+// Pragma needed cause of gcc bug on windows: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52991\n \n #include <assert.h>\n "}, {"sha": "65541fc3ae632733807bee00d5d3bde94f7a9bbd", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -3,7 +3,7 @@\n #![feature(associated_type_defaults)]\n \n // A Collection trait and collection families. Based on\n-// http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n+// https://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n \n // check that we don't normalize with trait defaults."}, {"sha": "4e8f593c1fd266fc793a3ad5a47915f9d79b5521", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -3,7 +3,7 @@\n #![feature(associated_type_defaults)]\n \n // A Collection trait and collection families. Based on\n-// http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n+// https://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n \n // run-pass"}, {"sha": "86fd37e78142c651a6071fd72110daf02b88f1f1", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,6 +1,6 @@\n // Tests correct kind-checking of the reason stack closures without the :Copy\n // bound must be noncopyable. For details see\n-// http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n+// https://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n struct R<'a> {\n     // This struct is needed to create the"}, {"sha": "568c3e144be2c302cabef8446cd0f166954bad0a", "filename": "src/test/ui/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnullable-pointer-iotareduction.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -4,7 +4,7 @@\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor\n-// behaves as expected\".  -- http://coq.inria.fr/doc/Reference-Manual006.html\n+// behaves as expected\".  -- https://coq.inria.fr/doc/language/core/conversion.html#iota-reduction\n //\n // It's a little more complicated here, because of pointers and regions and\n // trying to get assert failure messages that at least identify which case"}, {"sha": "555cd68c3a76f07d1f35d5b0fc559a6354ce07c0", "filename": "src/test/ui/parser/parser-unicode-whitespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fparser%2Fparser-unicode-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fparser%2Fparser-unicode-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fparser-unicode-whitespace.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // Beware editing: it has numerous whitespace characters which are important.\n // It contains one ranges from the 'PATTERN_WHITE_SPACE' property outlined in\n-// http://unicode.org/Public/UNIDATA/PropList.txt\n+// https://unicode.org/Public/UNIDATA/PropList.txt\n //\n // The characters in the first expression of the assertion can be generated\n // from: \"4\\u{0C}+\\n\\t\\r7\\t*\\u{20}2\\u{85}/\\u{200E}3\\u{200F}*\\u{2028}2\\u{2029}\""}, {"sha": "b894577c1f7da5c58853456aa1962f257d1183d6", "filename": "src/test/ui/traits/reservation-impl/non-lattice-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impl%2Fnon-lattice-ok.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -28,7 +28,7 @@\n // go with a known approach, we should go with a \"marker trait overlap\"-style\n // approach.\n //\n-// [ii]: http://smallcultfollowing.com/babysteps/blog/2016/09/24/intersection-impls/\n+// [ii]: https://smallcultfollowing.com/babysteps/blog/2016/09/24/intersection-impls/\n \n #![feature(rustc_attrs, never_type)]\n "}, {"sha": "0eb0fe071f50d41cb80782614dd216eaeceda8d9", "filename": "src/test/ui/wait-forked-but-failed-child.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481971978fda83aa7cf1f1f3c80cfad822377cf2/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwait-forked-but-failed-child.rs?ref=481971978fda83aa7cf1f1f3c80cfad822377cf2", "patch": "@@ -28,7 +28,7 @@ use std::process::Command;\n fn find_zombies() {\n     let my_pid = unsafe { libc::getpid() };\n \n-    // http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ps.html\n+    // https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ps.html\n     let ps_cmd_output = Command::new(\"ps\").args(&[\"-A\", \"-o\", \"pid,ppid,args\"]).output().unwrap();\n     let ps_output = String::from_utf8_lossy(&ps_cmd_output.stdout);\n "}]}