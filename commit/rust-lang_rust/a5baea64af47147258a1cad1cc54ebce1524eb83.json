{"sha": "a5baea64af47147258a1cad1cc54ebce1524eb83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YmFlYTY0YWY0NzE0NzI1OGExY2FkMWNjNTRlYmNlMTUyNGViODM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-24T12:44:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-27T16:12:49Z"}, "message": "terminator/drop.rs is just one fn... merge it together with the other terminator stuff", "tree": {"sha": "389e8f423420a01626e5cab53072399a73a1676e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389e8f423420a01626e5cab53072399a73a1676e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5baea64af47147258a1cad1cc54ebce1524eb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5baea64af47147258a1cad1cc54ebce1524eb83", "html_url": "https://github.com/rust-lang/rust/commit/a5baea64af47147258a1cad1cc54ebce1524eb83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5baea64af47147258a1cad1cc54ebce1524eb83/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa645f30dae329a88e84f9e7ccc417ec9640e55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa645f30dae329a88e84f9e7ccc417ec9640e55a", "html_url": "https://github.com/rust-lang/rust/commit/aa645f30dae329a88e84f9e7ccc417ec9640e55a"}], "stats": {"total": 112, "additions": 46, "deletions": 66}, "files": [{"sha": "c6651620576fa56fcde7480e1ad66dd70abc5c97", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "renamed", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a5baea64af47147258a1cad1cc54ebce1524eb83/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5baea64af47147258a1cad1cc54ebce1524eb83/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a5baea64af47147258a1cad1cc54ebce1524eb83", "patch": "@@ -16,11 +16,9 @@ use rustc_target::spec::abi::Abi;\n \n use rustc::mir::interpret::{EvalResult, Scalar};\n use super::{\n-    EvalContext, Machine, Value, OpTy, Place, PlaceTy, ValTy, Operand, StackPopCleanup\n+    EvalContext, Machine, Value, OpTy, Place, PlaceTy, PlaceExtra, ValTy, Operand, StackPopCleanup\n };\n \n-mod drop;\n-\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     #[inline]\n     pub fn goto_block(&mut self, target: Option<mir::BasicBlock>) -> EvalResult<'tcx> {\n@@ -442,4 +440,49 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         }\n     }\n+\n+    fn drop_in_place(\n+        &mut self,\n+        place: PlaceTy<'tcx>,\n+        instance: ty::Instance<'tcx>,\n+        span: Span,\n+        target: mir::BasicBlock,\n+    ) -> EvalResult<'tcx> {\n+        trace!(\"drop_in_place: {:?},\\n  {:?}, {:?}\", *place, place.layout.ty, instance);\n+        // We take the address of the object.  This may well be unaligned, which is fine\n+        // for us here.  However, unaligned accesses will probably make the actual drop\n+        // implementation fail -- a problem shared by rustc.\n+        let place = self.force_allocation(place)?;\n+\n+        let (instance, place) = match place.layout.ty.sty {\n+            ty::Dynamic(..) => {\n+                // Dropping a trait object.\n+                let vtable = match place.extra {\n+                    PlaceExtra::Vtable(vtable) => vtable,\n+                    _ => bug!(\"Expected vtable when dropping {:#?}\", place),\n+                };\n+                let place = self.unpack_unsized_mplace(place)?;\n+                let instance = self.read_drop_type_from_vtable(vtable)?;\n+                (instance, place)\n+            }\n+            _ => (instance, place),\n+        };\n+\n+        let arg = OpTy {\n+            op: Operand::Immediate(place.to_ref(&self)),\n+            layout: self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n+        };\n+\n+        let ty = self.tcx.mk_tup((&[] as &[ty::Ty<'tcx>]).iter()); // return type is ()\n+        let dest = PlaceTy::null(&self, self.layout_of(ty)?);\n+\n+        self.eval_fn_call(\n+            instance,\n+            &[arg],\n+            Some(dest),\n+            Some(target),\n+            span,\n+            None,\n+        )\n+    }\n }", "previous_filename": "src/librustc_mir/interpret/terminator/mod.rs"}, {"sha": "e592f1e5d5a3dc02ee4a06765372db8485c49669", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/aa645f30dae329a88e84f9e7ccc417ec9640e55a/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa645f30dae329a88e84f9e7ccc417ec9640e55a/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=aa645f30dae329a88e84f9e7ccc417ec9640e55a", "patch": "@@ -1,63 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use rustc::mir::BasicBlock;\n-use rustc::ty::{self, layout::LayoutOf};\n-use syntax::source_map::Span;\n-\n-use rustc::mir::interpret::EvalResult;\n-use interpret::{Machine, EvalContext, PlaceTy, PlaceExtra, OpTy, Operand};\n-\n-impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    pub(crate) fn drop_in_place(\n-        &mut self,\n-        place: PlaceTy<'tcx>,\n-        instance: ty::Instance<'tcx>,\n-        span: Span,\n-        target: BasicBlock,\n-    ) -> EvalResult<'tcx> {\n-        trace!(\"drop_in_place: {:?},\\n  {:?}, {:?}\", *place, place.layout.ty, instance);\n-        // We take the address of the object.  This may well be unaligned, which is fine for us\n-        // here. However, unaligned accesses will probably make the actual drop implementation fail\n-        // -- a problem shared by rustc.\n-        let place = self.force_allocation(place)?;\n-\n-        let (instance, place) = match place.layout.ty.sty {\n-            ty::Dynamic(..) => {\n-                // Dropping a trait object.\n-                let vtable = match place.extra {\n-                    PlaceExtra::Vtable(vtable) => vtable,\n-                    _ => bug!(\"Expected vtable when dropping {:#?}\", place),\n-                };\n-                let place = self.unpack_unsized_mplace(place)?;\n-                let instance = self.read_drop_type_from_vtable(vtable)?;\n-                (instance, place)\n-            }\n-            _ => (instance, place),\n-        };\n-\n-        let arg = OpTy {\n-            op: Operand::Immediate(place.to_ref(&self)),\n-            layout: self.layout_of(self.tcx.mk_mut_ptr(place.layout.ty))?,\n-        };\n-\n-        let ty = self.tcx.mk_tup((&[] as &[ty::Ty<'tcx>]).iter()); // return type is ()\n-        let dest = PlaceTy::null(&self, self.layout_of(ty)?);\n-\n-        self.eval_fn_call(\n-            instance,\n-            &[arg],\n-            Some(dest),\n-            Some(target),\n-            span,\n-            None,\n-        )\n-    }\n-}"}]}