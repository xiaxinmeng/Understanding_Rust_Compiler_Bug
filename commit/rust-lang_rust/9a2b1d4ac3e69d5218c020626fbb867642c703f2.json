{"sha": "9a2b1d4ac3e69d5218c020626fbb867642c703f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmIxZDRhYzNlNjlkNTIxOGMwMjA2MjZmYmI4Njc2NDJjNzAzZjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:16:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T09:16:46Z"}, "message": "Implement float -> float and int -> float casts", "tree": {"sha": "1dfe3b53cf3ce35fc2f077bfbdebc641b3d5c9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dfe3b53cf3ce35fc2f077bfbdebc641b3d5c9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2b1d4ac3e69d5218c020626fbb867642c703f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2b1d4ac3e69d5218c020626fbb867642c703f2", "html_url": "https://github.com/rust-lang/rust/commit/9a2b1d4ac3e69d5218c020626fbb867642c703f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2b1d4ac3e69d5218c020626fbb867642c703f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c86274943032b11c60b8ea3e512d4f6cd23db57", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c86274943032b11c60b8ea3e512d4f6cd23db57", "html_url": "https://github.com/rust-lang/rust/commit/6c86274943032b11c60b8ea3e512d4f6cd23db57"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "6f2be6c84b7098ac3c192ea859b8535121aa5881", "filename": "examples/example.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2b1d4ac3e69d5218c020626fbb867642c703f2/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2b1d4ac3e69d5218c020626fbb867642c703f2/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=9a2b1d4ac3e69d5218c020626fbb867642c703f2", "patch": "@@ -158,3 +158,11 @@ unsafe fn use_ctlz_nonzero(a: u16) -> u16 {\n fn ptr_as_usize(ptr: *const u8) -> usize {\n     ptr as usize\n }\n+\n+fn float_cast(a: f32, b: f64) -> (f64, f32) {\n+    (a as f64, b as f32)\n+}\n+\n+fn int_to_float(a: u8, b: i32) -> (f64, f32) {\n+    (a as f64, b as f32)\n+}"}, {"sha": "c26249157ca5c4d285de09a735d0a616b00b8fd9", "filename": "src/base.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a2b1d4ac3e69d5218c020626fbb867642c703f2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2b1d4ac3e69d5218c020626fbb867642c703f2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9a2b1d4ac3e69d5218c020626fbb867642c703f2", "patch": "@@ -395,6 +395,31 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &\n                             let res = crate::common::cton_intcast(fx, from, from_ty, to_ty, true);\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n+                        (TypeVariants::TyFloat(from_flt), TypeVariants::TyFloat(to_flt)) => {\n+                            let from = operand.load_value(fx);\n+                            let res = match (from_flt, to_flt) {\n+                                (FloatTy::F32, FloatTy::F64) => {\n+                                    fx.bcx.ins().fpromote(types::F64, from)\n+                                }\n+                                (FloatTy::F64, FloatTy::F32) => {\n+                                    fx.bcx.ins().fdemote(types::F32, from)\n+                                }\n+                                _ => from,\n+                            };\n+                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        }\n+                        (TypeVariants::TyInt(_), TypeVariants::TyFloat(_)) => {\n+                            let from = operand.load_value(fx);\n+                            let f_type = fx.cton_type(to_ty).unwrap();\n+                            let res = fx.bcx.ins().fcvt_from_sint(f_type, from);\n+                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        }\n+                        (TypeVariants::TyUint(_), TypeVariants::TyFloat(_)) => {\n+                            let from = operand.load_value(fx);\n+                            let f_type = fx.cton_type(to_ty).unwrap();\n+                            let res = fx.bcx.ins().fcvt_from_uint(f_type, from);\n+                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        }\n                         _ => unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty),\n                     }\n                 }"}]}