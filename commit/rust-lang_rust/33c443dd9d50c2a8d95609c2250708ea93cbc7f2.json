{"sha": "33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "node_id": "C_kwDOAAsO6NoAKDMzYzQ0M2RkOWQ1MGMyYThkOTU2MDljMjI1MDcwOGVhOTNjYmM3ZjI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-18T05:38:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-20T17:53:08Z"}, "message": "Suggest await on cases involving infer", "tree": {"sha": "5782c92a0df2c964b67b06f2b2e19f320013fbe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5782c92a0df2c964b67b06f2b2e19f320013fbe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "html_url": "https://github.com/rust-lang/rust/commit/33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93542a8240c5f926ac5f3f99cef99366082f9c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/93542a8240c5f926ac5f3f99cef99366082f9c2b", "html_url": "https://github.com/rust-lang/rust/commit/93542a8240c5f926ac5f3f99cef99366082f9c2b"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "3c2f99000806225280707ae2b1fc026f1c3decf3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "patch": "@@ -310,6 +310,34 @@ pub fn unexpected_hidden_region_diagnostic(\n     err\n }\n \n+/// Structurally compares two types, modulo any inference variables.\n+///\n+/// Returns `true` if two types are equal, or if one type is an inference variable compatible\n+/// with the other type. A TyVar inference type is compatible with any type, and an IntVar or\n+/// FloatVar inference type are compatible with themselves or their concrete types (Int and\n+/// Float types, respectively). When comparing two ADTs, these rules apply recursively.\n+pub fn same_type_modulo_infer(a: Ty<'tcx>, b: Ty<'ctx>) -> bool {\n+    match (&a.kind(), &b.kind()) {\n+        (&ty::Adt(did_a, substs_a), &ty::Adt(did_b, substs_b)) => {\n+            if did_a != did_b {\n+                return false;\n+            }\n+\n+            substs_a.types().zip(substs_b.types()).all(|(a, b)| same_type_modulo_infer(a, b))\n+        }\n+        (&ty::Int(_), &ty::Infer(ty::InferTy::IntVar(_)))\n+        | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Int(_) | &ty::Infer(ty::InferTy::IntVar(_)))\n+        | (&ty::Float(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n+        | (\n+            &ty::Infer(ty::InferTy::FloatVar(_)),\n+            &ty::Float(_) | &ty::Infer(ty::InferTy::FloatVar(_)),\n+        )\n+        | (&ty::Infer(ty::InferTy::TyVar(_)), _)\n+        | (_, &ty::Infer(ty::InferTy::TyVar(_))) => true,\n+        _ => a == b,\n+    }\n+}\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_region_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n@@ -1761,7 +1789,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.get_impl_future_output_ty(exp_found.expected),\n             self.get_impl_future_output_ty(exp_found.found),\n         ) {\n-            (Some(exp), Some(found)) if ty::TyS::same_type(exp, found) => match &cause.code {\n+            (Some(exp), Some(found)) if same_type_modulo_infer(exp, found) => match &cause.code {\n                 ObligationCauseCode::IfExpression(box IfExpressionCause { then, .. }) => {\n                     diag.multipart_suggestion(\n                         \"consider `await`ing on both `Future`s\",\n@@ -1793,15 +1821,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     diag.help(\"consider `await`ing on both `Future`s\");\n                 }\n             },\n-            (_, Some(ty)) if ty::TyS::same_type(exp_found.expected, ty) => {\n+            (_, Some(ty)) if same_type_modulo_infer(exp_found.expected, ty) => {\n                 diag.span_suggestion_verbose(\n                     exp_span.shrink_to_hi(),\n                     \"consider `await`ing on the `Future`\",\n                     \".await\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n-            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => match cause.code {\n+            (Some(ty), _) if same_type_modulo_infer(ty, exp_found.found) => match cause.code {\n                 ObligationCauseCode::Pattern { span: Some(span), .. }\n                 | ObligationCauseCode::IfExpression(box IfExpressionCause { then: span, .. }) => {\n                     diag.span_suggestion_verbose("}, {"sha": "c7c5b51e7334b87b27e40534c5541d9e7044b960", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "patch": "@@ -54,4 +54,21 @@ async fn suggest_await_on_match_expr() {\n     };\n }\n \n+async fn dummy_result() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_generic_pattern() {\n+    match dummy_result() {\n+        //~^ HELP consider `await`ing on the `Future`\n+        //~| HELP consider `await`ing on the `Future`\n+        //~| SUGGESTION .await\n+        Ok(_) => {}\n+        //~^ ERROR mismatched types [E0308]\n+        Err(_) => {}\n+        //~^ ERROR mismatched types [E0308]\n+    }\n+}\n+\n fn main() {}"}, {"sha": "5757f39af18cd271307a5ae0b5550ddf7b296ef3", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c443dd9d50c2a8d95609c2250708ea93cbc7f2/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=33c443dd9d50c2a8d95609c2250708ea93cbc7f2", "patch": "@@ -106,6 +106,42 @@ help: consider `await`ing on the `Future`\n LL |     let _x = match dummy().await {\n    |                           ++++++\n \n-error: aborting due to 5 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:67:9\n+   |\n+LL |         Ok(_) => {}\n+   |         ^^^^^ expected opaque type, found enum `Result`\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:57:28\n+   |\n+LL | async fn dummy_result() -> Result<(), ()> {\n+   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                     found enum `Result<_, _>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     match dummy_result().await {\n+   |                         ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:69:9\n+   |\n+LL |         Err(_) => {}\n+   |         ^^^^^^ expected opaque type, found enum `Result`\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:57:28\n+   |\n+LL | async fn dummy_result() -> Result<(), ()> {\n+   |                            ^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                     found enum `Result<_, _>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     match dummy_result().await {\n+   |                         ++++++\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}