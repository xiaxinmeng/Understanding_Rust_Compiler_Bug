{"sha": "ac37c326aeccb5710f18235b18015750e6484d66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzdjMzI2YWVjY2I1NzEwZjE4MjM1YjE4MDE1NzUwZTY0ODRkNjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T00:47:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T00:47:20Z"}, "message": "Rollup merge of #79285 - yoshuawuyts:stabilize-arc_mutate_strong_count, r=m-ou-se\n\nStabilize Arc::{increment,decrement}_strong_count\n\nTracking issue: https://github.com/rust-lang/rust/issues/71983\n\nStabilizes `Arc::{incr,decr}_strong_count`, enabling unsafely incrementing an decrementing the Arc strong count directly with fewer gotchas. This API was first introduced on nightly six months ago, and has not seen any changes since. The initial PR showed two existing pieces of code that would benefit from this API, and included a change inside the stdlib to use this.\n\nGiven the small surface area, predictable use, and no changes since introduction, I'd like to propose we stabilize this.\n\ncloses https://github.com/rust-lang/rust/issues/71983\nr? `@Mark-Simulacrum`\n\n## Links\n * [Initial implementation](https://github.com/rust-lang/rust/pull/70733)\n * [Motivation from #68700](https://github.com/rust-lang/rust/pull/68700#discussion_r396169064)\n * [Real world example in an executor](https://docs.rs/extreme/666.666.666666/src/extreme/lib.rs.html#13)", "tree": {"sha": "6e6f9bb456b8d3550d03d5812c036453331a2d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6f9bb456b8d3550d03d5812c036453331a2d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac37c326aeccb5710f18235b18015750e6484d66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFf4YCRBK7hj4Ov3rIwAAdHIIAERnjbH44tEco4JzcaO4mVdA\narw+xBoPrNm8mJh++tlUBc6BjHu73GNh7hpjiRtApFlMKBN2JGIbBSJqgnhhycu2\n92ibthC7A0U38wZTIJrP4XkKn9JcUrwVliKPxTYKn9vYpbGlns0ci21AJEwGtTAZ\nvh5WLL6WKb9jugDYD9SkMOnPQcmcslctsJcbjakcfPxnuQHoJrTdRlCroQgd/YuJ\n3gfPcGlpsaG2S1ikM3TWbDXUrRB5yk6FGREU7JiIES0GWqLBJ7TlOZs8kbL+flG3\nK1c+6ufO+bVSpt5SKWxcFOS/XF+V2ybwu3vQrjUeI5qOrcAEFqjC+jt+0H92rd8=\n=e80p\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e6f9bb456b8d3550d03d5812c036453331a2d5d\nparent 1bf130519ca1c020623a550dc6b250eacea68e72\nparent fe4ac95cb858a7a26c94c2c236fe380448675a82\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612054040 +0100\ncommitter GitHub <noreply@github.com> 1612054040 +0100\n\nRollup merge of #79285 - yoshuawuyts:stabilize-arc_mutate_strong_count, r=m-ou-se\n\nStabilize Arc::{increment,decrement}_strong_count\n\nTracking issue: https://github.com/rust-lang/rust/issues/71983\n\nStabilizes `Arc::{incr,decr}_strong_count`, enabling unsafely incrementing an decrementing the Arc strong count directly with fewer gotchas. This API was first introduced on nightly six months ago, and has not seen any changes since. The initial PR showed two existing pieces of code that would benefit from this API, and included a change inside the stdlib to use this.\n\nGiven the small surface area, predictable use, and no changes since introduction, I'd like to propose we stabilize this.\n\ncloses https://github.com/rust-lang/rust/issues/71983\nr? `@Mark-Simulacrum`\n\n## Links\n * [Initial implementation](https://github.com/rust-lang/rust/pull/70733)\n * [Motivation from #68700](https://github.com/rust-lang/rust/pull/68700#discussion_r396169064)\n * [Real world example in an executor](https://docs.rs/extreme/666.666.666666/src/extreme/lib.rs.html#13)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac37c326aeccb5710f18235b18015750e6484d66", "html_url": "https://github.com/rust-lang/rust/commit/ac37c326aeccb5710f18235b18015750e6484d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac37c326aeccb5710f18235b18015750e6484d66/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf130519ca1c020623a550dc6b250eacea68e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf130519ca1c020623a550dc6b250eacea68e72", "html_url": "https://github.com/rust-lang/rust/commit/1bf130519ca1c020623a550dc6b250eacea68e72"}, {"sha": "fe4ac95cb858a7a26c94c2c236fe380448675a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe4ac95cb858a7a26c94c2c236fe380448675a82", "html_url": "https://github.com/rust-lang/rust/commit/fe4ac95cb858a7a26c94c2c236fe380448675a82"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "461ca85c0305d646891118869b9a8d5cd268a74a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac37c326aeccb5710f18235b18015750e6484d66/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac37c326aeccb5710f18235b18015750e6484d66/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=ac37c326aeccb5710f18235b18015750e6484d66", "patch": "@@ -962,15 +962,13 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_mutate_strong_count)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n     ///\n     /// unsafe {\n     ///     let ptr = Arc::into_raw(five);\n-    ///     Arc::incr_strong_count(ptr);\n+    ///     Arc::increment_strong_count(ptr);\n     ///\n     ///     // This assertion is deterministic because we haven't shared\n     ///     // the `Arc` between threads.\n@@ -979,8 +977,8 @@ impl<T: ?Sized> Arc<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n-    pub unsafe fn incr_strong_count(ptr: *const T) {\n+    #[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]\n+    pub unsafe fn increment_strong_count(ptr: *const T) {\n         // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n         let arc = unsafe { mem::ManuallyDrop::new(Arc::<T>::from_raw(ptr)) };\n         // Now increase refcount, but don't drop new refcount either\n@@ -1001,27 +999,25 @@ impl<T: ?Sized> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_mutate_strong_count)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n     ///\n     /// unsafe {\n     ///     let ptr = Arc::into_raw(five);\n-    ///     Arc::incr_strong_count(ptr);\n+    ///     Arc::increment_strong_count(ptr);\n     ///\n     ///     // Those assertions are deterministic because we haven't shared\n     ///     // the `Arc` between threads.\n     ///     let five = Arc::from_raw(ptr);\n     ///     assert_eq!(2, Arc::strong_count(&five));\n-    ///     Arc::decr_strong_count(ptr);\n+    ///     Arc::decrement_strong_count(ptr);\n     ///     assert_eq!(1, Arc::strong_count(&five));\n     /// }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n-    pub unsafe fn decr_strong_count(ptr: *const T) {\n+    #[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]\n+    pub unsafe fn decrement_strong_count(ptr: *const T) {\n         unsafe { mem::drop(Arc::from_raw(ptr)) };\n     }\n "}, {"sha": "a80550a96531aaae58bb33a270fd47770ab586e7", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac37c326aeccb5710f18235b18015750e6484d66/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac37c326aeccb5710f18235b18015750e6484d66/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=ac37c326aeccb5710f18235b18015750e6484d66", "patch": "@@ -62,7 +62,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n-        unsafe { Arc::incr_strong_count(waker as *const W) };\n+        unsafe { Arc::increment_strong_count(waker as *const W) };\n         RawWaker::new(\n             waker as *const (),\n             &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n@@ -83,7 +83,7 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        unsafe { Arc::decr_strong_count(waker as *const W) };\n+        unsafe { Arc::decrement_strong_count(waker as *const W) };\n     }\n \n     RawWaker::new("}]}