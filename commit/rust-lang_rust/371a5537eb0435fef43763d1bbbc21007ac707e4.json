{"sha": "371a5537eb0435fef43763d1bbbc21007ac707e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWE1NTM3ZWIwNDM1ZmVmNDM3NjNkMWJiYmMyMTAwN2FjNzA3ZTQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T19:23:21Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-28T19:24:52Z"}, "message": "Address nits in DOC_MARKDOWN", "tree": {"sha": "7e308b1f87f9532fbc656b64269af4832949d8c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e308b1f87f9532fbc656b64269af4832949d8c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371a5537eb0435fef43763d1bbbc21007ac707e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371a5537eb0435fef43763d1bbbc21007ac707e4", "html_url": "https://github.com/rust-lang/rust/commit/371a5537eb0435fef43763d1bbbc21007ac707e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371a5537eb0435fef43763d1bbbc21007ac707e4/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39", "html_url": "https://github.com/rust-lang/rust/commit/b1d1f095f12d6640aac2ab7e8ad29fc36de90b39"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "43caa80543a860be41b7407951d0ede9e19cb210", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371a5537eb0435fef43763d1bbbc21007ac707e4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/371a5537eb0435fef43763d1bbbc21007ac707e4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=371a5537eb0435fef43763d1bbbc21007ac707e4", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 136 lints included in this crate:\n+There are 137 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"}, {"sha": "28fc311507d9a424c5a7f9060c6b6929476d068c", "filename": "src/bit_mask.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/371a5537eb0435fef43763d1bbbc21007ac707e4/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a5537eb0435fef43763d1bbbc21007ac707e4/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=371a5537eb0435fef43763d1bbbc21007ac707e4", "patch": "@@ -13,14 +13,14 @@ use utils::span_lint;\n /// The formula for detecting if an expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n /// is one of {`&`, `|`} and `<cmp_op>` is one of {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following table:\n ///\n-/// |Comparison  |Bit Op |Example     |is always|Formula               |\n-/// |------------|-------|------------|---------|----------------------|\n-/// |`==` or `!=`|  `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n-/// |`<`  or `>=`|  `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n-/// |`>`  or `<=`|  `&`  |`x & 1 > 1` |`false`  |`m <= c`              |\n-/// |`==` or `!=`|  `|`  |`x | 1 == 0`|`false`  |`c | m != c`          |\n-/// |`<`  or `>=`|  `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n-/// |`<=` or `>` |  `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n+/// |Comparison  |Bit Op|Example     |is always|Formula               |\n+/// |------------|------|------------|---------|----------------------|\n+/// |`==` or `!=`| `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n+/// |`<`  or `>=`| `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n+/// |`>`  or `<=`| `&`  |`x & 1 > 1` |`false`  |`m <= c`              |\n+/// |`==` or `!=`| `|`  |`x | 1 == 0`|`false`  |`c | m != c`          |\n+/// |`<`  or `>=`| `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n+/// |`<=` or `>` | `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n ///\n /// **Why is this bad?** If the bits that the comparison cares about are always set to zero or one by the bit mask, the comparison is constant `true` or `false` (depending on mask, compared value, and operators).\n ///\n@@ -61,21 +61,21 @@ declare_lint! {\n /// is one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n /// `!=`, `>=`, `>`}) can be determined from the following table:\n ///\n-/// |Comparison  |Bit Op |Example     |is always|Formula               |\n-/// |------------|-------|------------|---------|----------------------|\n-/// |`==` or `!=`|  `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n-/// |`<`  or `>=`|  `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n-/// |`>`  or `<=`|  `&`  |`x & 1 > 1` |`false`  |`m <= c`              |\n-/// |`==` or `!=`|  `|`  |`x | 1 == 0`|`false`  |`c | m != c`          |\n-/// |`<`  or `>=`|  `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n-/// |`<=` or `>` |  `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n+/// |Comparison  |Bit Op|Example     |is always|Formula               |\n+/// |------------|------|------------|---------|----------------------|\n+/// |`==` or `!=`| `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n+/// |`<`  or `>=`| `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n+/// |`>`  or `<=`| `&`  |`x & 1 > 1` |`false`  |`m <= c`              |\n+/// |`==` or `!=`| `|`  |`x | 1 == 0`|`false`  |`c | m != c`          |\n+/// |`<`  or `>=`| `|`  |`x | 1 < 1` |`false`  |`m >= c`              |\n+/// |`<=` or `>` | `|`  |`x | 1 > 0` |`true`   |`m > c`               |\n ///\n /// This lint is **deny** by default\n ///\n /// There is also a lint that warns on ineffective masks that is *warn*\n /// by default.\n ///\n-/// |Comparison| Bit Op  |Example    |equals |Formula|\n+/// |Comparison|Bit Op   |Example    |equals |Formula|\n /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|`\u00b9 && m <= c`|\n /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|`\u00b9 && m < c` |\n ///"}, {"sha": "5637fb2cefb6991565902eca2cf9dbe61ce88a34", "filename": "src/doc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371a5537eb0435fef43763d1bbbc21007ac707e4/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a5537eb0435fef43763d1bbbc21007ac707e4/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=371a5537eb0435fef43763d1bbbc21007ac707e4", "patch": "@@ -8,7 +8,8 @@ use utils::span_lint;\n /// ticks in documentation.\n ///\n /// **Why is this bad?** *Rustdoc* supports markdown formatting, `_`, `::` and camel-case probably\n-/// indicates some code which should be included between ticks.\n+/// indicates some code which should be included between ticks. `_` can also be used for empasis in\n+/// markdown, this lint tries to consider that.\n ///\n /// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks for is limited.\n ///\n@@ -114,6 +115,7 @@ fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n             s\n         };\n \n+        s.chars().all(char::is_alphanumeric) &&\n         s.chars().filter(|&c| c.is_uppercase()).take(2).count() > 1 &&\n         s.chars().filter(|&c| c.is_lowercase()).take(1).count() > 0\n     }"}, {"sha": "eecf5e0b20620db3e6adf2c58f5a8659b8980a35", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/371a5537eb0435fef43763d1bbbc21007ac707e4/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a5537eb0435fef43763d1bbbc21007ac707e4/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=371a5537eb0435fef43763d1bbbc21007ac707e4", "patch": "@@ -18,13 +18,21 @@ fn foo_bar() {\n /// That one tests multiline ticks.\n /// ```rust\n /// foo_bar FOO_BAR\n+/// _foo bar_\n /// ```\n fn multiline_ticks() {\n }\n \n+/// This _is a test for\n+/// multiline\n+/// emphasis_.\n+fn test_emphasis() {\n+}\n+\n /// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n /// `multiline_ticks` functions.\n fn main() {\n     foo_bar();\n     multiline_ticks();\n+    test_emphasis();\n }"}]}