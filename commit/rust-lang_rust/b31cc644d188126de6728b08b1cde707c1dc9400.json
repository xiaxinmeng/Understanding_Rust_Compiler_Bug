{"sha": "b31cc644d188126de6728b08b1cde707c1dc9400", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMWNjNjQ0ZDE4ODEyNmRlNjcyOGIwOGIxY2RlNzA3YzFkYzk0MDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T18:24:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T18:24:19Z"}, "message": "Auto merge of #29766 - oli-obk:impl_item, r=nikomatsakis\n\n[breaking change]\n\nI'm not sure if those renames are ok. [TokenType::Tt* to TokenType::*](https://github.com/rust-lang/rust/pull/29582) was obvious, but for all those Item-enums it's less obvious to me what the right way forward is due to the underscore.", "tree": {"sha": "ab68b0f681155c3acd317b98c6106aaa20137cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab68b0f681155c3acd317b98c6106aaa20137cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31cc644d188126de6728b08b1cde707c1dc9400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31cc644d188126de6728b08b1cde707c1dc9400", "html_url": "https://github.com/rust-lang/rust/commit/b31cc644d188126de6728b08b1cde707c1dc9400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31cc644d188126de6728b08b1cde707c1dc9400/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8809a33c34b4d6e46bfcf180fe472ea4a3a55b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8809a33c34b4d6e46bfcf180fe472ea4a3a55b3a", "html_url": "https://github.com/rust-lang/rust/commit/8809a33c34b4d6e46bfcf180fe472ea4a3a55b3a"}, {"sha": "d09220de13a72b283d824285a2883da9e014f3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09220de13a72b283d824285a2883da9e014f3f7", "html_url": "https://github.com/rust-lang/rust/commit/d09220de13a72b283d824285a2883da9e014f3f7"}], "stats": {"total": 304, "additions": 150, "deletions": 154}, "files": [{"sha": "e6c165193f0327378b148c721a5b446a8f8585cb", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -236,7 +236,7 @@ impl<'a> FnLikeNode<'a> {\n             },\n             map::NodeImplItem(ii) => {\n                 match ii.node {\n-                    ast::MethodImplItem(ref sig, ref body) => {\n+                    ast::ImplItemKind::Method(ref sig, ref body) => {\n                         method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span)\n                     }\n                     _ => {"}, {"sha": "54e2563a123baade31dbeb0ad6cc56f84c6091e6", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -224,8 +224,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) {\n         let def_data = match ii.node {\n-            MethodImplItem(..) | ConstImplItem(..) => DefPathData::Value(ii.name),\n-            TypeImplItem(..) => DefPathData::Type(ii.name),\n+            ImplItemKind::Method(..) | ImplItemKind::Const(..) => DefPathData::Value(ii.name),\n+            ImplItemKind::Type(..) => DefPathData::Type(ii.name),\n         };\n \n         self.insert_def(ii.id, NodeImplItem(ii), def_data);\n@@ -234,7 +234,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.parent_node = ii.id;\n \n         match ii.node {\n-            ConstImplItem(_, ref expr) => {\n+            ImplItemKind::Const(_, ref expr) => {\n                 self.create_def(expr.id, DefPathData::Initializer);\n             }\n             _ => { }\n@@ -313,4 +313,3 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.name));\n     }\n }\n-"}, {"sha": "fb883c0ca0c0869a51309a2539fd9d597671575a", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -937,18 +937,18 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         }\n         Some(NodeImplItem(ii)) => {\n             match ii.node {\n-                ConstImplItem(..) => {\n+                ImplItemKind::Const(..) => {\n                     format!(\"assoc const {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id),\n                             id_str)\n                 }\n-                MethodImplItem(..) => {\n+                ImplItemKind::Method(..) => {\n                     format!(\"method {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id), id_str)\n                 }\n-                TypeImplItem(_) => {\n+                ImplItemKind::Type(_) => {\n                     format!(\"assoc type {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id),"}, {"sha": "bfdbb6dadd43cc0cb9c13aba5dc18bea54352960", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -739,7 +739,7 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     let elem = ast_map::PathName(m.name);\n     encode_path(rbml_w, impl_path.chain(Some(elem)));\n     if let Some(impl_item) = impl_item_opt {\n-        if let hir::MethodImplItem(ref sig, _) = impl_item.node {\n+        if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n             encode_attributes(rbml_w, &impl_item.attrs);\n             let scheme = ecx.tcx.lookup_item_type(m.def_id);\n             let any_types = !scheme.generics.types.is_empty();"}, {"sha": "814c7c990bd6a940ece2aa6e1609bf40daa1a107", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, i: &'v hir::ImplItem) {\n         match i.node {\n-            hir::ConstImplItem(_, ref expr) => {\n+            hir::ImplItemKind::Const(_, ref expr) => {\n                 self.global_expr(Mode::Const, &*expr);\n             }\n             _ => self.with_mode(Mode::Var, |v| visit::walk_impl_item(v, i)),"}, {"sha": "ede37eb737f83b0f1125c9561d151a742942a822", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n         match ii.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItemKind::Const(..) => {\n                 let mut recursion_visitor =\n                     CheckItemRecursionVisitor::new(self, &ii.span);\n                 recursion_visitor.visit_impl_item(ii);"}, {"sha": "2660b6447fae7cdaa70b52ef1ded4ac55c6fd208", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -129,7 +129,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeImplItem(ii)) => match ii.node {\n-                hir::ConstImplItem(_, ref expr) => {\n+                hir::ImplItemKind::Const(_, ref expr) => {\n                     Some(&*expr)\n                 }\n                 _ => None\n@@ -171,7 +171,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 _ => None\n             },\n             csearch::FoundAst::Found(&InlinedItem::ImplItem(_, ref ii)) => match ii.node {\n-                hir::ConstImplItem(_, ref expr) => Some(expr.id),\n+                hir::ImplItemKind::Const(_, ref expr) => Some(expr.id),\n                 _ => None\n             },\n             _ => None\n@@ -996,7 +996,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                           },\n                           ty::ImplContainer(_) => match tcx.map.find(node_id) {\n                               Some(ast_map::NodeImplItem(ii)) => match ii.node {\n-                                  hir::ConstImplItem(ref ty, ref expr) => {\n+                                  hir::ImplItemKind::Const(ref ty, ref expr) => {\n                                       (Some(&**expr), Some(&**ty))\n                                   }\n                                   _ => (None, None)"}, {"sha": "5892067ab08fe642824207076f3d020803f05a76", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -358,14 +358,14 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             hir::ItemImpl(_, _, _, ref opt_trait, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     match impl_item.node {\n-                        hir::ConstImplItem(..) |\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItemKind::Const(..) |\n+                        hir::ImplItemKind::Method(..) => {\n                             if opt_trait.is_some() ||\n                                     has_allow_dead_code_or_lang_attr(&impl_item.attrs) {\n                                 self.worklist.push(impl_item.id);\n                             }\n                         }\n-                        hir::TypeImplItem(_) => {}\n+                        hir::ImplItemKind::Type(_) => {}\n                     }\n                 }\n             }\n@@ -571,21 +571,21 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         match impl_item.node {\n-            hir::ConstImplItem(_, ref expr) => {\n+            hir::ImplItemKind::Const(_, ref expr) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     self.warn_dead_code(impl_item.id, impl_item.span,\n                                         impl_item.name, \"associated const\");\n                 }\n                 visit::walk_expr(self, expr)\n             }\n-            hir::MethodImplItem(_, ref body) => {\n+            hir::ImplItemKind::Method(_, ref body) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     self.warn_dead_code(impl_item.id, impl_item.span,\n                                         impl_item.name, \"method\");\n                 }\n                 visit::walk_block(self, body)\n             }\n-            hir::TypeImplItem(..) => {}\n+            hir::ImplItemKind::Type(..) => {}\n         }\n     }\n "}, {"sha": "111872f1784ccf85fc8f425924fbaf987f2987ec", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 ast_map::NodeImplItem(item) => {\n                     match item.node {\n-                        hir::MethodImplItem(ref sig, _) => {\n+                        hir::ImplItemKind::Method(ref sig, _) => {\n                             Some((&sig.decl,\n                                   &sig.generics,\n                                   sig.unsafety,\n@@ -1838,7 +1838,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n             },\n             ast_map::NodeImplItem(ii) => {\n                 match ii.node {\n-                    hir::MethodImplItem(ref sig, _) => {\n+                    hir::ImplItemKind::Method(ref sig, _) => {\n                         taken.push_all(&sig.generics.lifetimes);\n                         Some(ii.id)\n                     }"}, {"sha": "e5bc9030fc97db96d008aa9811b967d3bfd4f060", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -185,8 +185,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             Some(ast_map::NodeImplItem(impl_item)) => {\n                 match impl_item.node {\n-                    hir::ConstImplItem(..) => true,\n-                    hir::MethodImplItem(ref sig, _) => {\n+                    hir::ImplItemKind::Const(..) => true,\n+                    hir::ImplItemKind::Method(ref sig, _) => {\n                         if generics_require_inlining(&sig.generics) ||\n                                 attr::requests_inline(&impl_item.attrs) {\n                             true\n@@ -206,7 +206,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    hir::TypeImplItem(_) => false,\n+                    hir::ImplItemKind::Type(_) => false,\n                 }\n             }\n             Some(_) => false,\n@@ -299,16 +299,16 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             ast_map::NodeImplItem(impl_item) => {\n                 match impl_item.node {\n-                    hir::ConstImplItem(_, ref expr) => {\n+                    hir::ImplItemKind::Const(_, ref expr) => {\n                         self.visit_expr(&*expr);\n                     }\n-                    hir::MethodImplItem(ref sig, ref body) => {\n+                    hir::ImplItemKind::Method(ref sig, ref body) => {\n                         let did = self.tcx.map.get_parent_did(search_item);\n                         if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n                             visit::walk_block(self, body)\n                         }\n                     }\n-                    hir::TypeImplItem(_) => {}\n+                    hir::ImplItemKind::Type(_) => {}\n                 }\n             }\n             // Nothing to recurse on for these"}, {"sha": "42bba0c8aeff6438d2f965c859db611cd954d759", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1124,7 +1124,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n         match cx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::TypeImplItem(_) => {\n+                    hir::ImplItemKind::Type(_) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = cx.map.get_parent(id);\n@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            &predicates,\n                                                            id)\n                     }\n-                    hir::ConstImplItem(_, _) => {\n+                    hir::ImplItemKind::Const(_, _) => {\n                         let def_id = cx.map.local_def_id(id);\n                         let scheme = cx.lookup_item_type(def_id);\n                         let predicates = cx.lookup_predicates(def_id);\n@@ -1145,7 +1145,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            &predicates,\n                                                            id)\n                     }\n-                    hir::MethodImplItem(_, ref body) => {\n+                    hir::ImplItemKind::Method(_, ref body) => {\n                         let method_def_id = cx.map.local_def_id(id);\n                         match cx.impl_or_trait_item(method_def_id) {\n                             MethodTraitItem(ref method_ty) => {\n@@ -2158,7 +2158,7 @@ impl<'tcx> ctxt<'tcx> {\n                 }\n                 ItemImpl(_, _, _, _, _, ref iis) => {\n                     iis.iter().filter_map(|ii| {\n-                        if let hir::ConstImplItem(_, _) = ii.node {\n+                        if let hir::ImplItemKind::Const(_, _) = ii.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ii.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {"}, {"sha": "f1eff5f55f29c538bbb21021d393441200ae367e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        if let hir::ConstImplItem(_, ref expr) = ii.node {\n+        if let hir::ImplItemKind::Const(_, ref expr) = ii.node {\n             gather_loans::gather_loans_in_static_initializer(self, &*expr);\n         }\n         visit::walk_impl_item(self, ii);"}, {"sha": "04f7938e9ba4f8c34121c4a7d891b5ce9b2c57b3", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -623,7 +623,7 @@ impl fold::Folder for ReplaceBodyWithLoop {\n \n     fn fold_impl_item(&mut self, i: P<ast::ImplItem>) -> SmallVector<P<ast::ImplItem>> {\n         match i.node {\n-            ast::ConstImplItem(..) => {\n+            ast::ImplItemKind::Const(..) => {\n                 self.within_static_or_const = true;\n                 let ret = fold::noop_fold_impl_item(i, self);\n                 self.within_static_or_const = false;"}, {"sha": "b963aba9c07eb262f56ca4b139cfc4589e27e75f", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -866,13 +866,13 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T) -> P<ImplI\n             attrs: fold_attrs(attrs, folder),\n             vis: vis,\n             node: match node {\n-                ConstImplItem(ty, expr) => {\n-                    ConstImplItem(folder.fold_ty(ty), folder.fold_expr(expr))\n+                ImplItemKind::Const(ty, expr) => {\n+                    ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n                 }\n-                MethodImplItem(sig, body) => {\n-                    MethodImplItem(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n+                ImplItemKind::Method(sig, body) => {\n+                    ImplItemKind::Method(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n                 }\n-                TypeImplItem(ty) => TypeImplItem(folder.fold_ty(ty)),\n+                ImplItemKind::Type(ty) => ImplItemKind::Type(folder.fold_ty(ty)),\n             },\n             span: folder.new_span(span),\n         }"}, {"sha": "1fa7c9d301c0de5ece11ce0287ac530d1d88e3d8", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -19,7 +19,6 @@ pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n-pub use self::ImplItem_::*;\n pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n@@ -771,15 +770,15 @@ pub struct ImplItem {\n     pub name: Name,\n     pub vis: Visibility,\n     pub attrs: Vec<Attribute>,\n-    pub node: ImplItem_,\n+    pub node: ImplItemKind,\n     pub span: Span,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ImplItem_ {\n-    ConstImplItem(P<Ty>, P<Expr>),\n-    MethodImplItem(MethodSig, P<Block>),\n-    TypeImplItem(P<Ty>),\n+pub enum ImplItemKind {\n+    Const(P<Ty>, P<Expr>),\n+    Method(MethodSig, P<Block>),\n+    Type(P<Ty>),\n }\n \n // Bind a type to an associated type: `A=Foo`."}, {"sha": "8ef49d185f727e4c1380d6a898665d1fb328546f", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -677,14 +677,14 @@ pub fn lower_impl_item(_lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem\n         attrs: i.attrs.clone(),\n         vis: lower_visibility(_lctx, i.vis),\n         node: match i.node {\n-            ConstImplItem(ref ty, ref expr) => {\n-                hir::ConstImplItem(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n+            ImplItemKind::Const(ref ty, ref expr) => {\n+                hir::ImplItemKind::Const(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n             }\n-            MethodImplItem(ref sig, ref body) => {\n-                hir::MethodImplItem(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n+            ImplItemKind::Method(ref sig, ref body) => {\n+                hir::ImplItemKind::Method(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n             }\n-            TypeImplItem(ref ty) => hir::TypeImplItem(lower_ty(_lctx, ty)),\n-            MacImplItem(..) => panic!(\"Shouldn't exist any more\"),\n+            ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(lower_ty(_lctx, ty)),\n+            ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,\n     })"}, {"sha": "09c814449a9bc5ba289978029c4cf47a72e1278b", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1006,16 +1006,16 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ii.span.lo));\n         try!(self.print_outer_attributes(&ii.attrs));\n         match ii.node {\n-            hir::ConstImplItem(ref ty, ref expr) => {\n+            hir::ImplItemKind::Const(ref ty, ref expr) => {\n                 try!(self.print_associated_const(ii.name, &ty, Some(&expr), ii.vis));\n             }\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItemKind::Method(ref sig, ref body) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_method_sig(ii.name, sig, ii.vis));\n                 try!(self.nbsp());\n                 try!(self.print_block_with_attrs(body, &ii.attrs));\n             }\n-            hir::TypeImplItem(ref ty) => {\n+            hir::ImplItemKind::Type(ref ty) => {\n                 try!(self.print_associated_type(ii.name, None, Some(ty)));\n             }\n         }"}, {"sha": "ec58f31b6decd53dd0af3c57fef5d72fff90c4a4", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -614,18 +614,18 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_name(impl_item.span, impl_item.name);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n-        ConstImplItem(ref ty, ref expr) => {\n+        ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n-        MethodImplItem(ref sig, ref body) => {\n+        ImplItemKind::Method(ref sig, ref body) => {\n             visitor.visit_fn(FnKind::Method(impl_item.name, sig, Some(impl_item.vis)),\n                              &sig.decl,\n                              body,\n                              impl_item.span,\n                              impl_item.id);\n         }\n-        TypeImplItem(ref ty) => {\n+        ImplItemKind::Type(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n     }"}, {"sha": "53fc0824d967392e4fb32fd7258b23c70d911053", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -351,7 +351,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n \n     fn check_impl_item(&mut self, cx: &LateContext, ii: &hir::ImplItem) {\n         match ii.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItemKind::Const(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\",\n                                                       ii.name, ii.span);\n             }"}, {"sha": "516c9dcae71a31317f9337054153b52ee41c2e18", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -505,9 +505,9 @@ impl LateLintPass for MissingDoc {\n         }\n \n         let desc = match impl_item.node {\n-            hir::ConstImplItem(..) => \"an associated constant\",\n-            hir::MethodImplItem(..) => \"a method\",\n-            hir::TypeImplItem(_) => \"an associated type\",\n+            hir::ImplItemKind::Const(..) => \"an associated constant\",\n+            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Type(_) => \"an associated type\",\n         };\n         self.check_missing_docs_attrs(cx, Some(impl_item.id),\n                                       &impl_item.attrs,"}, {"sha": "a6b7169e18b40bce02441c701ddceeb783390097", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -99,10 +99,10 @@ impl<'a, 'tcx> visit::Visitor<'tcx> for OuterDump<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         match impl_item.node {\n-            hir::MethodImplItem(..) => {\n+            hir::ImplItemKind::Method(..) => {\n                 self.visit_mir(&impl_item.attrs, |c| visit::walk_impl_item(c, impl_item));\n             }\n-            hir::ConstImplItem(..) | hir::TypeImplItem(..) => {}\n+            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(..) => {}\n         }\n         visit::walk_impl_item(self, impl_item);\n     }"}, {"sha": "ab9b32383b2219222667fab79bd449054c704c6f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -553,8 +553,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                 //               where the method was defined?\n                 Some(ast_map::NodeImplItem(ii)) => {\n                     match ii.node {\n-                        hir::ConstImplItem(..) |\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItemKind::Const(..) |\n+                        hir::ImplItemKind::Method(..) => {\n                             let imp = self.tcx.map\n                                           .get_parent_did(closest_private_id);\n                             match self.tcx.impl_trait_ref(imp) {\n@@ -565,7 +565,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                                 _ => ii.vis\n                             }\n                         }\n-                        hir::TypeImplItem(_) => return Allowable,\n+                        hir::ImplItemKind::Type(_) => return Allowable,\n                     }\n                 }\n                 Some(ast_map::NodeTraitItem(_)) => {\n@@ -1293,11 +1293,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     impl_items.iter()\n                               .any(|impl_item| {\n                                   match impl_item.node {\n-                                      hir::ConstImplItem(..) |\n-                                      hir::MethodImplItem(..) => {\n+                                      hir::ImplItemKind::Const(..) |\n+                                      hir::ImplItemKind::Method(..) => {\n                                           self.exported_items.contains(&impl_item.id)\n                                       }\n-                                      hir::TypeImplItem(_) => false,\n+                                      hir::ImplItemKind::Type(_) => false,\n                                   }\n                               });\n \n@@ -1316,13 +1316,13 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 // don't erroneously report errors for private\n                                 // types in private items.\n                                 match impl_item.node {\n-                                    hir::ConstImplItem(..) |\n-                                    hir::MethodImplItem(..)\n+                                    hir::ImplItemKind::Const(..) |\n+                                    hir::ImplItemKind::Method(..)\n                                         if self.item_is_public(&impl_item.id, impl_item.vis) =>\n                                     {\n                                         visit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::TypeImplItem(..) => {\n+                                    hir::ImplItemKind::Type(..) => {\n                                         visit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1347,7 +1347,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n                             // Those in 3. are warned with this call.\n                             for impl_item in impl_items {\n-                                if let hir::TypeImplItem(ref ty) = impl_item.node {\n+                                if let hir::ImplItemKind::Type(ref ty) = impl_item.node {\n                                     self.visit_ty(ty);\n                                 }\n                             }\n@@ -1359,13 +1359,13 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     let mut found_pub_static = false;\n                     for impl_item in impl_items {\n                         match impl_item.node {\n-                            hir::ConstImplItem(..) => {\n+                            hir::ImplItemKind::Const(..) => {\n                                 if self.item_is_public(&impl_item.id, impl_item.vis) {\n                                     found_pub_static = true;\n                                     visit::walk_impl_item(self, impl_item);\n                                 }\n                             }\n-                            hir::MethodImplItem(ref sig, _) => {\n+                            hir::ImplItemKind::Method(ref sig, _) => {\n                                 if sig.explicit_self.node == hir::SelfStatic &&\n                                       self.item_is_public(&impl_item.id, impl_item.vis) {\n                                     found_pub_static = true;"}, {"sha": "0ead5fad92f82b5dfdb6b2742ba6c5ff04b3c0b7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -79,20 +79,19 @@ use syntax::codemap::{self, Span, Pos};\n use rustc_front::visit::{self, FnKind, Visitor};\n use rustc_front::hir;\n use rustc_front::hir::{Arm, BindByRef, BindByValue, BindingMode, Block};\n-use rustc_front::hir::{ConstImplItem, Crate};\n+use rustc_front::hir::Crate;\n use rustc_front::hir::{Expr, ExprAgain, ExprBreak, ExprField};\n use rustc_front::hir::{ExprLoop, ExprWhile, ExprMethodCall};\n use rustc_front::hir::{ExprPath, ExprStruct, FnDecl};\n use rustc_front::hir::{ForeignItemFn, ForeignItemStatic, Generics};\n use rustc_front::hir::{ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n use rustc_front::hir::{ItemFn, ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{Local, MethodImplItem};\n+use rustc_front::hir::Local;\n use rustc_front::hir::{Pat, PatEnum, PatIdent, PatLit, PatQPath};\n use rustc_front::hir::{PatRange, PatStruct, Path, PrimTy};\n use rustc_front::hir::{TraitRef, Ty, TyBool, TyChar, TyFloat, TyInt};\n use rustc_front::hir::{TyRptr, TyStr, TyUint, TyPath, TyPtr};\n-use rustc_front::hir::TypeImplItem;\n use rustc_front::util::walk_pat;\n \n use std::collections::{HashMap, HashSet};\n@@ -2421,7 +2420,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     this.with_current_self_type(self_type, |this| {\n                         for impl_item in impl_items {\n                             match impl_item.node {\n-                                ConstImplItem(..) => {\n+                                hir::ImplItemKind::Const(..) => {\n                                     // If this is a trait impl, ensure the const\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -2431,7 +2430,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });\n                                 }\n-                                MethodImplItem(ref sig, _) => {\n+                                hir::ImplItemKind::Method(ref sig, _) => {\n                                     // If this is a trait impl, ensure the method\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -2448,7 +2447,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });\n                                 }\n-                                TypeImplItem(ref ty) => {\n+                                hir::ImplItemKind::Type(ref ty) => {\n                                     // If this is a trait impl, ensure the type\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -3545,7 +3544,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         _ => return false,\n                     },\n                     hir_map::NodeImplItem(impl_item) => match impl_item.node {\n-                        hir::MethodImplItem(ref sig, _) => sig,\n+                        hir::ImplItemKind::Method(ref sig, _) => sig,\n                         _ => return false,\n                     },\n                     _ => return false,"}, {"sha": "682e203f8561749c0596438de4d649e9291e0403", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -992,22 +992,22 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n         match impl_item.node {\n-            ast::ConstImplItem(ref ty, ref expr) => {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 self.process_const(impl_item.id,\n                                    impl_item.ident.name,\n                                    impl_item.span,\n                                    &ty,\n                                    &expr);\n             }\n-            ast::MethodImplItem(ref sig, ref body) => {\n+            ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.process_method(sig,\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident.name,\n                                     impl_item.span);\n             }\n-            ast::TypeImplItem(_) |\n-            ast::MacImplItem(_) => {}\n+            ast::ImplItemKind::Type(_) |\n+            ast::ImplItemKind::Macro(_) => {}\n         }\n     }\n "}, {"sha": "c87d9ab7bf049566d25ff4b95fe2cd6dfbf47445", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1326,7 +1326,7 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n         }\n         Some(hir_map::NodeImplItem(impl_item)) => {\n             match impl_item.node {\n-                hir::MethodImplItem(_, ref body) => body,\n+                hir::ImplItemKind::Method(_, ref body) => body,\n                 _ => {\n                     tcx.sess.bug(\"unexpected variant: non-method impl item in \\\n                                   has_nested_returns\")\n@@ -2614,7 +2614,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(..) => {\n+                hir::ImplItemKind::Method(..) => {\n                     register_method(ccx, id, &impl_item.attrs, impl_item.span)\n                 }\n                 _ => {"}, {"sha": "74510de3f318a772b3af533830ba3363177cfbf1", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -253,7 +253,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItemKind::Method(ref sig, ref body) => {\n                     if contains_nodebug_attribute(&impl_item.attrs) {\n                         return FunctionDebugContext::FunctionWithoutDebugInfo;\n                     }"}, {"sha": "0e837d83686afc24461b05dcd7ee1b7b86140851", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -160,7 +160,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n             ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n \n             // Translate monomorphic impl methods immediately.\n-            if let hir::MethodImplItem(ref sig, ref body) = impl_item.node {\n+            if let hir::ImplItemKind::Method(ref sig, ref body) = impl_item.node {\n                 let impl_tpt = ccx.tcx().lookup_item_type(impl_did);\n                 if impl_tpt.generics.types.is_empty() &&\n                         sig.generics.ty_params.is_empty() {"}, {"sha": "20388929cbd7a85d79cac2e31a4691c5b618436e", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -70,7 +70,7 @@ pub fn trans_impl(ccx: &CrateContext,\n     if !generics.ty_params.is_empty() {\n         for impl_item in impl_items {\n             match impl_item.node {\n-                hir::MethodImplItem(..) => {\n+                hir::ImplItemKind::Method(..) => {\n                     visit::walk_impl_item(&mut v, impl_item);\n                 }\n                 _ => {}\n@@ -80,7 +80,7 @@ pub fn trans_impl(ccx: &CrateContext,\n     }\n     for impl_item in impl_items {\n         match impl_item.node {\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItemKind::Method(ref sig, ref body) => {\n                 if sig.generics.ty_params.is_empty() {\n                     let trans_everywhere = attr::requests_inline(&impl_item.attrs);\n                     for (ref ccx, is_origin) in ccx.maybe_iter(trans_everywhere) {"}, {"sha": "9c1fcaff7c89568d65e18bdef88821c864d290b0", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -206,7 +206,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItemKind::Method(ref sig, ref body) => {\n                     let d = mk_lldecl(abi::Rust);\n                     let needs_body = setup_lldecl(d, &impl_item.attrs);\n                     if needs_body {"}, {"sha": "5ed6b62e8c3ef46f1edabe56851784779105c8a9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -764,14 +764,14 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n \n         for impl_item in impl_items {\n             match impl_item.node {\n-                hir::ConstImplItem(_, ref expr) => {\n+                hir::ImplItemKind::Const(_, ref expr) => {\n                     check_const(ccx, impl_item.span, &*expr, impl_item.id)\n                 }\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItemKind::Method(ref sig, ref body) => {\n                     check_method_body(ccx, &impl_pty.generics, sig, body,\n                                       impl_item.id, impl_item.span);\n                 }\n-                hir::TypeImplItem(_) => {\n+                hir::ImplItemKind::Type(_) => {\n                     // Nothing to do here.\n                 }\n             }\n@@ -908,7 +908,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                            impl_trait_ref));\n             });\n         match impl_item.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItemKind::Const(..) => {\n                 let impl_const = match ty_impl_item {\n                     ty::ConstTraitItem(ref cti) => cti,\n                     _ => tcx.sess.span_bug(impl_item.span, \"non-const impl-item for const\")\n@@ -929,7 +929,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                               impl_trait_ref)\n                 }\n             }\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItemKind::Method(ref sig, ref body) => {\n                 check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n \n                 let impl_method = match ty_impl_item {\n@@ -952,7 +952,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                               impl_trait_ref)\n                 }\n             }\n-            hir::TypeImplItem(_) => {\n+            hir::ImplItemKind::Type(_) => {\n                 let impl_type = match ty_impl_item {\n                     ty::TypeTraitItem(ref tti) => tti,\n                     _ => tcx.sess.span_bug(impl_item.span, \"non-type impl-item for type\")\n@@ -983,7 +983,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty::ConstTraitItem(ref associated_const) => {\n                 let is_implemented = impl_items.iter().any(|ii| {\n                     match ii.node {\n-                        hir::ConstImplItem(..) => {\n+                        hir::ImplItemKind::Const(..) => {\n                             ii.name == associated_const.name\n                         }\n                         _ => false,\n@@ -1003,7 +1003,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 let is_implemented =\n                     impl_items.iter().any(|ii| {\n                         match ii.node {\n-                            hir::MethodImplItem(..) => {\n+                            hir::ImplItemKind::Method(..) => {\n                                 ii.name == trait_method.name\n                             }\n                             _ => false,\n@@ -1022,7 +1022,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty::TypeTraitItem(ref associated_type) => {\n                 let is_implemented = impl_items.iter().any(|ii| {\n                     match ii.node {\n-                        hir::TypeImplItem(_) => {\n+                        hir::ImplItemKind::Type(_) => {\n                             ii.name == associated_type.name\n                         }\n                         _ => false,"}, {"sha": "6b2994d9dc06a4ba53b0072dfdc4ac8c6c1bdb8c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -196,13 +196,13 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 impl_items.iter().map(|impl_item| {\n                     let impl_def_id = self.crate_context.tcx.map.local_def_id(impl_item.id);\n                     match impl_item.node {\n-                        hir::ConstImplItem(..) => {\n+                        hir::ImplItemKind::Const(..) => {\n                             ConstTraitItemId(impl_def_id)\n                         }\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItemKind::Method(..) => {\n                             MethodTraitItemId(impl_def_id)\n                         }\n-                        hir::TypeImplItem(_) => {\n+                        hir::ImplItemKind::Type(_) => {\n                             TypeTraitItemId(impl_def_id)\n                         }\n                     }"}, {"sha": "80f90182992458f0f31608855d83cd56056537b6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -821,14 +821,14 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             for impl_item in impl_items {\n                 let seen_items = match impl_item.node {\n-                    hir::TypeImplItem(_) => &mut seen_type_items,\n+                    hir::ImplItemKind::Type(_) => &mut seen_type_items,\n                     _                    => &mut seen_value_items,\n                 };\n                 if !seen_items.insert(impl_item.name) {\n                     let desc = match impl_item.node {\n-                        hir::ConstImplItem(_, _) => \"associated constant\",\n-                        hir::TypeImplItem(_) => \"associated type\",\n-                        hir::MethodImplItem(ref sig, _) =>\n+                        hir::ImplItemKind::Const(_, _) => \"associated constant\",\n+                        hir::ImplItemKind::Type(_) => \"associated type\",\n+                        hir::ImplItemKind::Method(ref sig, _) =>\n                             match sig.explicit_self.node {\n                                 hir::SelfStatic => \"associated function\",\n                                 _ => \"method\",\n@@ -838,7 +838,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                     span_err!(tcx.sess, impl_item.span, E0201, \"duplicate {}\", desc);\n                 }\n \n-                if let hir::ConstImplItem(ref ty, _) = impl_item.node {\n+                if let hir::ImplItemKind::Const(ref ty, _) = impl_item.node {\n                     let ty = ccx.icx(&ty_predicates)\n                                 .to_ty(&ExplicitRscope, &*ty);\n                     tcx.register_item_type(ccx.tcx.map.local_def_id(impl_item.id),\n@@ -855,7 +855,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             // Convert all the associated types.\n             for impl_item in impl_items {\n-                if let hir::TypeImplItem(ref ty) = impl_item.node {\n+                if let hir::ImplItemKind::Type(ref ty) = impl_item.node {\n                     if opt_trait_ref.is_none() {\n                         span_err!(tcx.sess, impl_item.span, E0202,\n                                   \"associated types are not allowed in inherent impls\");\n@@ -870,7 +870,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             }\n \n             let methods = impl_items.iter().filter_map(|ii| {\n-                if let hir::MethodImplItem(ref sig, _) = ii.node {\n+                if let hir::ImplItemKind::Method(ref sig, _) = ii.node {\n                     // if the method specifies a visibility, use that, otherwise\n                     // inherit the visibility from the impl (so `foo` in `pub impl\n                     // { fn foo(); }` is public, but private in `impl { fn\n@@ -889,7 +889,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                             &ty_predicates);\n \n             for impl_item in impl_items {\n-                if let hir::MethodImplItem(ref sig, ref body) = impl_item.node {\n+                if let hir::ImplItemKind::Method(ref sig, ref body) = impl_item.node {\n                     let body_id = body.id;\n                     check_method_self_type(ccx,\n                                            &BindingRscope::new(),"}, {"sha": "c88b2dcdb748b5458747ad3971d3c64e6f5a7bf8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1271,16 +1271,16 @@ impl Clean<Item> for hir::TraitItem {\n impl Clean<Item> for hir::ImplItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n-            hir::ConstImplItem(ref ty, ref expr) => {\n+            hir::ImplItemKind::Const(ref ty, ref expr) => {\n                 ConstantItem(Constant{\n                     type_: ty.clean(cx),\n                     expr: expr.span.to_src(cx),\n                 })\n             }\n-            hir::MethodImplItem(ref sig, _) => {\n+            hir::ImplItemKind::Method(ref sig, _) => {\n                 MethodItem(sig.clean(cx))\n             }\n-            hir::TypeImplItem(ref ty) => TypedefItem(Typedef {\n+            hir::ImplItemKind::Type(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),\n                 generics: Generics {\n                     lifetimes: Vec::new(),"}, {"sha": "cb36ceb8a9f20916a1ec1548ea30184789297dd8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -20,7 +20,6 @@ pub use self::Expr_::*;\n pub use self::FloatTy::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n-pub use self::ImplItem_::*;\n pub use self::IntTy::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n@@ -1230,16 +1229,16 @@ pub struct ImplItem {\n     pub ident: Ident,\n     pub vis: Visibility,\n     pub attrs: Vec<Attribute>,\n-    pub node: ImplItem_,\n+    pub node: ImplItemKind,\n     pub span: Span,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ImplItem_ {\n-    ConstImplItem(P<Ty>, P<Expr>),\n-    MethodImplItem(MethodSig, P<Block>),\n-    TypeImplItem(P<Ty>),\n-    MacImplItem(Mac),\n+pub enum ImplItemKind {\n+    Const(P<Ty>, P<Expr>),\n+    Method(MethodSig, P<Block>),\n+    Type(P<Ty>),\n+    Macro(Mac),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]"}, {"sha": "625abf706caa4325155212041c6d703bbb287511", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -480,7 +480,7 @@ impl<'a> TraitDef<'a> {\n                 ident: ident,\n                 vis: ast::Inherited,\n                 attrs: Vec::new(),\n-                node: ast::TypeImplItem(type_def.to_ty(cx,\n+                node: ast::ImplItemKind::Type(type_def.to_ty(cx,\n                     self.span,\n                     type_ident,\n                     generics\n@@ -895,7 +895,7 @@ impl<'a> MethodDef<'a> {\n             span: trait_.span,\n             vis: ast::Inherited,\n             ident: method_ident,\n-            node: ast::MethodImplItem(ast::MethodSig {\n+            node: ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: fn_generics,\n                 abi: abi,\n                 explicit_self: explicit_self,"}, {"sha": "a0e4fd301a2fb3598edcbca1a0be84fd6ce1f096", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1030,23 +1030,23 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n fn expand_impl_item(ii: P<ast::ImplItem>, fld: &mut MacroExpander)\n                  -> SmallVector<P<ast::ImplItem>> {\n     match ii.node {\n-        ast::MethodImplItem(..) => SmallVector::one(ii.map(|ii| ast::ImplItem {\n+        ast::ImplItemKind::Method(..) => SmallVector::one(ii.map(|ii| ast::ImplItem {\n             id: ii.id,\n             ident: ii.ident,\n             attrs: ii.attrs,\n             vis: ii.vis,\n             node: match ii.node  {\n-                ast::MethodImplItem(sig, body) => {\n+                ast::ImplItemKind::Method(sig, body) => {\n                     let (sig, body) = expand_and_rename_method(sig, body, fld);\n-                    ast::MethodImplItem(sig, body)\n+                    ast::ImplItemKind::Method(sig, body)\n                 }\n                 _ => unreachable!()\n             },\n             span: fld.new_span(ii.span)\n         })),\n-        ast::MacImplItem(_) => {\n+        ast::ImplItemKind::Macro(_) => {\n             let (span, mac) = ii.and_then(|ii| match ii.node {\n-                ast::MacImplItem(mac) => (ii.span, mac),\n+                ast::ImplItemKind::Macro(mac) => (ii.span, mac),\n                 _ => unreachable!()\n             });\n             let maybe_new_items ="}, {"sha": "ca232963e65a9bdd470d521b518d5dcb79cbadb2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -998,12 +998,12 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n         match ii.node {\n-            ast::ConstImplItem(..) => {\n+            ast::ImplItemKind::Const(..) => {\n                 self.gate_feature(\"associated_consts\",\n                                   ii.span,\n                                   \"associated constants are experimental\")\n             }\n-            ast::MethodImplItem(ref sig, _) => {\n+            ast::ImplItemKind::Method(ref sig, _) => {\n                 if sig.constness == ast::Constness::Const {\n                     self.gate_feature(\"const_fn\", ii.span, \"const fn is unstable\");\n                 }"}, {"sha": "3dba6cbecbd1cb62ff278f8ca079b63e41fc8546", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1001,15 +1001,15 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T)\n         attrs: fold_attrs(attrs, folder),\n         vis: vis,\n         node: match node  {\n-            ConstImplItem(ty, expr) => {\n-                ConstImplItem(folder.fold_ty(ty), folder.fold_expr(expr))\n+            ast::ImplItemKind::Const(ty, expr) => {\n+                ast::ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n             }\n-            MethodImplItem(sig, body) => {\n-                MethodImplItem(noop_fold_method_sig(sig, folder),\n+            ast::ImplItemKind::Method(sig, body) => {\n+                ast::ImplItemKind::Method(noop_fold_method_sig(sig, folder),\n                                folder.fold_block(body))\n             }\n-            TypeImplItem(ty) => TypeImplItem(folder.fold_ty(ty)),\n-            MacImplItem(mac) => MacImplItem(folder.fold_mac(mac))\n+            ast::ImplItemKind::Type(ty) => ast::ImplItemKind::Type(folder.fold_ty(ty)),\n+            ast::ImplItemKind::Macro(mac) => ast::ImplItemKind::Macro(folder.fold_mac(mac))\n         },\n         span: folder.new_span(span)\n     }))"}, {"sha": "56a06f70ed4b4406dded7611872c3361d21ed0af", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -17,7 +17,7 @@ use ast::{Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n-use ast::{Constness, ConstImplItem, ConstTraitItem, Crate, CrateConfig};\n+use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n@@ -39,7 +39,7 @@ use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, BiMul, Mutability};\n-use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, UnNot};\n+use ast::{NamedField, UnNeg, NoReturn, UnNot};\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n@@ -52,7 +52,7 @@ use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec};\n-use ast::{TypeImplItem, TypeTraitItem};\n+use ast::TypeTraitItem;\n use ast::{UnnamedField, UnsafeBlock};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n use ast::{Visibility, WhereClause};\n@@ -4425,7 +4425,7 @@ impl<'a> Parser<'a> {\n             try!(self.expect(&token::Eq));\n             let typ = try!(self.parse_ty_sum());\n             try!(self.expect(&token::Semi));\n-            (name, TypeImplItem(typ))\n+            (name, ast::ImplItemKind::Type(typ))\n         } else if self.is_const_item() {\n             try!(self.expect_keyword(keywords::Const));\n             let name = try!(self.parse_ident());\n@@ -4434,7 +4434,7 @@ impl<'a> Parser<'a> {\n             try!(self.expect(&token::Eq));\n             let expr = try!(self.parse_expr());\n             try!(self.commit_expr_expecting(&expr, token::Semi));\n-            (name, ConstImplItem(typ, expr))\n+            (name, ast::ImplItemKind::Const(typ, expr))\n         } else {\n             let (name, inner_attrs, node) = try!(self.parse_impl_method(vis));\n             attrs.extend(inner_attrs);\n@@ -4464,7 +4464,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method or a macro invocation in a trait impl.\n     fn parse_impl_method(&mut self, vis: Visibility)\n-                         -> PResult<(Ident, Vec<ast::Attribute>, ast::ImplItem_)> {\n+                         -> PResult<(Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if !self.token.is_any_keyword()\n             && self.look_ahead(1, |t| *t == token::Not)\n@@ -4490,7 +4490,7 @@ impl<'a> Parser<'a> {\n             if delim != token::Brace {\n                 try!(self.expect(&token::Semi))\n             }\n-            Ok((token::special_idents::invalid, vec![], ast::MacImplItem(m)))\n+            Ok((token::special_idents::invalid, vec![], ast::ImplItemKind::Macro(m)))\n         } else {\n             let (constness, unsafety, abi) = try!(self.parse_fn_front_matter());\n             let ident = try!(self.parse_ident());\n@@ -4500,7 +4500,7 @@ impl<'a> Parser<'a> {\n                 }));\n             generics.where_clause = try!(self.parse_where_clause());\n             let (inner_attrs, body) = try!(self.parse_inner_attrs_and_block());\n-            Ok((ident, inner_attrs, MethodImplItem(ast::MethodSig {\n+            Ok((ident, inner_attrs, ast::ImplItemKind::Method(ast::MethodSig {\n                 generics: generics,\n                 abi: abi,\n                 explicit_self: explicit_self,"}, {"sha": "2c07d75f1fa5ab6bc83abacfbb4bdec9045a8e5a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -1576,19 +1576,19 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ii.span.lo));\n         try!(self.print_outer_attributes(&ii.attrs));\n         match ii.node {\n-            ast::ConstImplItem(ref ty, ref expr) => {\n+            ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 try!(self.print_associated_const(ii.ident, &ty, Some(&expr), ii.vis));\n             }\n-            ast::MethodImplItem(ref sig, ref body) => {\n+            ast::ImplItemKind::Method(ref sig, ref body) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_method_sig(ii.ident, sig, ii.vis));\n                 try!(self.nbsp());\n                 try!(self.print_block_with_attrs(body, &ii.attrs));\n             }\n-            ast::TypeImplItem(ref ty) => {\n+            ast::ImplItemKind::Type(ref ty) => {\n                 try!(self.print_associated_type(ii.ident, None, Some(ty)));\n             }\n-            ast::MacImplItem(codemap::Spanned { ref node, .. }) => {\n+            ast::ImplItemKind::Macro(codemap::Spanned { ref node, .. }) => {\n                 // code copied from ItemMac:\n                 try!(self.print_path(&node.path, false, 0));\n                 try!(word(&mut self.s, \"! \"));"}, {"sha": "516c983c2085528f36649bb65c872679fa79abda", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc644d188126de6728b08b1cde707c1dc9400/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b31cc644d188126de6728b08b1cde707c1dc9400", "patch": "@@ -588,18 +588,18 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_ident(impl_item.span, impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n-        ConstImplItem(ref ty, ref expr) => {\n+        ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n-        MethodImplItem(ref sig, ref body) => {\n+        ImplItemKind::Method(ref sig, ref body) => {\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n-        TypeImplItem(ref ty) => {\n+        ImplItemKind::Type(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n-        MacImplItem(ref mac) => {\n+        ImplItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);\n         }\n     }"}]}