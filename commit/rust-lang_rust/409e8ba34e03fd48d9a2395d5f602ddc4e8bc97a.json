{"sha": "409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWU4YmEzNGUwM2ZkNDhkOWEyMzk1ZDVmNjAyZGRjNGU4YmM5N2E=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-12T19:33:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:19Z"}, "message": "Move to my own hoedown repository", "tree": {"sha": "a17b17a89b5d282ac9c517ff25c75be3cc62cf12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17b17a89b5d282ac9c517ff25c75be3cc62cf12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "html_url": "https://github.com/rust-lang/rust/commit/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ad4adf5977316494f8be2d549e6352c6a9b620", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad4adf5977316494f8be2d549e6352c6a9b620", "html_url": "https://github.com/rust-lang/rust/commit/a0ad4adf5977316494f8be2d549e6352c6a9b620"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "73824b7b42c9c57468967489b4395508f5d9f509", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "patch": "@@ -7,7 +7,7 @@\n \turl = https://github.com/rust-lang/compiler-rt.git\n [submodule \"src/rt/hoedown\"]\n \tpath = src/rt/hoedown\n-\turl = https://github.com/rust-lang/hoedown.git\n+\turl = https://github.com/GuillaumeGomez/hoedown.git\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git"}, {"sha": "c35342e25b523d715734370b005cb648a5a0b6c4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "patch": "@@ -71,29 +71,31 @@ const HOEDOWN_EXTENSIONS: libc::c_uint =\n enum hoedown_document {}\n \n type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *const hoedown_buffer, *const hoedown_renderer_data);\n+                                 *const hoedown_buffer, *const hoedown_renderer_data,\n+                                 libc::size_t);\n \n type blockquotefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                  *const hoedown_renderer_data);\n+                                  *const hoedown_renderer_data, libc::size_t);\n \n type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                              libc::c_int, *const hoedown_renderer_data);\n+                              libc::c_int, *const hoedown_renderer_data,\n+                              libc::size_t);\n \n type blockhtmlfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 *const hoedown_renderer_data);\n+                                 *const hoedown_renderer_data, libc::size_t);\n \n type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                *const hoedown_renderer_data) -> libc::c_int;\n+                                *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n \n type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n                              *const hoedown_buffer, *const hoedown_buffer,\n-                             *const hoedown_renderer_data) -> libc::c_int;\n+                             *const hoedown_renderer_data, libc::size_t) -> libc::c_int;\n \n type entityfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n-                               *const hoedown_renderer_data);\n+                               *const hoedown_renderer_data, libc::size_t);\n \n type normaltextfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                  *const hoedown_renderer_data);\n+                                  *const hoedown_renderer_data, libc::size_t);\n \n #[repr(C)]\n struct hoedown_renderer_data {\n@@ -147,7 +149,8 @@ struct html_toc_data {\n \n struct MyOpaque {\n     dfltblk: extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                           *const hoedown_buffer, *const hoedown_renderer_data),\n+                           *const hoedown_buffer, *const hoedown_renderer_data,\n+                           libc::size_t),\n     toc_builder: Option<TocBuilder>,\n }\n \n@@ -229,7 +232,8 @@ pub fn render(w: &mut fmt::Formatter,\n               print_toc: bool,\n               html_flags: libc::c_uint) -> fmt::Result {\n     extern fn block(ob: *mut hoedown_buffer, orig_text: *const hoedown_buffer,\n-                    lang: *const hoedown_buffer, data: *const hoedown_renderer_data) {\n+                    lang: *const hoedown_buffer, data: *const hoedown_renderer_data,\n+                    line: libc::size_t) {\n         unsafe {\n             if orig_text.is_null() { return }\n \n@@ -246,7 +250,8 @@ pub fn render(w: &mut fmt::Formatter,\n                 let rlang = str::from_utf8(rlang).unwrap();\n                 if !LangString::parse(rlang).rust {\n                     (my_opaque.dfltblk)(ob, orig_text, lang,\n-                                        opaque as *const hoedown_renderer_data);\n+                                        opaque as *const hoedown_renderer_data,\n+                                        line);\n                     true\n                 } else {\n                     false\n@@ -312,7 +317,8 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n \n     extern fn header(ob: *mut hoedown_buffer, text: *const hoedown_buffer,\n-                     level: libc::c_int, data: *const hoedown_renderer_data) {\n+                     level: libc::c_int, data: *const hoedown_renderer_data,\n+                     _: libc::size_t) {\n         // hoedown does this, we may as well too\n         unsafe { hoedown_buffer_puts(ob, \"\\n\\0\".as_ptr() as *const _); }\n \n@@ -373,6 +379,7 @@ pub fn render(w: &mut fmt::Formatter,\n         ob: *mut hoedown_buffer,\n         text: *const hoedown_buffer,\n         _: *const hoedown_renderer_data,\n+        _: libc::size_t\n     ) -> libc::c_int {\n         let content = if text.is_null() {\n             \"\".to_owned()\n@@ -426,7 +433,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n-                    data: *const hoedown_renderer_data) {\n+                    data: *const hoedown_renderer_data,\n+                    _: libc::size_t) {\n         unsafe {\n             if text.is_null() { return }\n             let block_info = if lang.is_null() {\n@@ -455,7 +463,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n \n     extern fn header(_ob: *mut hoedown_buffer,\n                      text: *const hoedown_buffer,\n-                     level: libc::c_int, data: *const hoedown_renderer_data) {\n+                     level: libc::c_int, data: *const hoedown_renderer_data,\n+                     _: libc::size_t) {\n         unsafe {\n             let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n@@ -590,7 +599,8 @@ pub fn plain_summary_line(md: &str) -> String {\n                        _link: *const hoedown_buffer,\n                        _title: *const hoedown_buffer,\n                        content: *const hoedown_buffer,\n-                       data: *const hoedown_renderer_data) -> libc::c_int\n+                       data: *const hoedown_renderer_data,\n+                       _: libc::size_t) -> libc::c_int\n     {\n         unsafe {\n             if !content.is_null() && (*content).size > 0 {\n@@ -603,8 +613,9 @@ pub fn plain_summary_line(md: &str) -> String {\n     }\n \n     extern fn normal_text(_ob: *mut hoedown_buffer,\n-                              text: *const hoedown_buffer,\n-                              data: *const hoedown_renderer_data)\n+                          text: *const hoedown_buffer,\n+                          data: *const hoedown_renderer_data,\n+                          _: libc::size_t)\n     {\n         unsafe {\n             let ob = (*data).opaque as *mut hoedown_buffer;"}, {"sha": "bad2986ab628b09b06cae03e306dbeb5c421e767", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "patch": "@@ -88,7 +88,7 @@ pub fn run(input: &str,\n         config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, &input));\n-    let driver::ExpansionResult { hir_forest, .. } = {\n+    let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n             &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())\n         ).expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n@@ -174,8 +174,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            externs: Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-           maybe_sysroot: Option<PathBuf>,\n-           original: &str, line_number: u32, filename: &str) {\n+           maybe_sysroot: Option<PathBuf>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n@@ -490,10 +489,7 @@ impl Collector {\n                                 compile_fail,\n                                 error_codes,\n                                 &opts,\n-                                maybe_sysroot,\n-                                &original,\n-                                line_number,\n-                                &filename)\n+                                maybe_sysroot)\n                     })\n                 } {\n                     Ok(()) => (),"}, {"sha": "78e7b6f69d3fa0cb6ae6e7fb9278c3fd167ec0d1", "filename": "src/rt/hoedown", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=409e8ba34e03fd48d9a2395d5f602ddc4e8bc97a", "patch": "@@ -1 +1 @@\n-Subproject commit a3736a0a1907cbc8bf619708738815a5fd789c80\n+Subproject commit 78e7b6f69d3fa0cb6ae6e7fb9278c3fd167ec0d1"}]}