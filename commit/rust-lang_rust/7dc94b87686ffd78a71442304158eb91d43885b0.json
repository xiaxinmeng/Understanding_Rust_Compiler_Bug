{"sha": "7dc94b87686ffd78a71442304158eb91d43885b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYzk0Yjg3Njg2ZmZkNzhhNzE0NDIzMDQxNThlYjkxZDQzODg1YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-12T20:04:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-12T20:04:34Z"}, "message": "auto merge of #6414 : samebchase/rust/experimental, r=graydon\n\nImplemented to_str() for HashMap and HashSet\r\nAdded tests.\r\nMinor formatting and stylistic cleanups.", "tree": {"sha": "8b03cc11f220313046b01bc0ce77c6270a3f7c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b03cc11f220313046b01bc0ce77c6270a3f7c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc94b87686ffd78a71442304158eb91d43885b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc94b87686ffd78a71442304158eb91d43885b0", "html_url": "https://github.com/rust-lang/rust/commit/7dc94b87686ffd78a71442304158eb91d43885b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc94b87686ffd78a71442304158eb91d43885b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638b394a37a89f29ac366f5f052aacca175e30c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/638b394a37a89f29ac366f5f052aacca175e30c2", "html_url": "https://github.com/rust-lang/rust/commit/638b394a37a89f29ac366f5f052aacca175e30c2"}, {"sha": "0acb6abb86125a1db878c256fbcf1a94b2577feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0acb6abb86125a1db878c256fbcf1a94b2577feb", "html_url": "https://github.com/rust-lang/rust/commit/0acb6abb86125a1db878c256fbcf1a94b2577feb"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "58a9f768644bd8ade817495a600c0935ce1ac221", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 101, "deletions": 14, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/7dc94b87686ffd78a71442304158eb91d43885b0/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc94b87686ffd78a71442304158eb91d43885b0/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=7dc94b87686ffd78a71442304158eb91d43885b0", "patch": "@@ -14,7 +14,12 @@ The `ToStr` trait for converting to strings\n \n */\n \n-use str;\n+use str::OwnedStr;\n+use hashmap::HashMap;\n+use hashmap::HashSet;\n+use container::Map;\n+use hash::Hash;\n+use cmp::Eq;\n \n pub trait ToStr {\n     fn to_str(&self) -> ~str;\n@@ -46,6 +51,44 @@ impl<A:ToStr> ToStr for (A,) {\n     }\n }\n \n+impl<A:ToStr+Hash+Eq, B:ToStr+Hash+Eq> ToStr for HashMap<A, B> {\n+    #[inline(always)]\n+    fn to_str(&self) -> ~str {\n+        let mut acc = ~\"{\", first = true;\n+        for self.each |key, value| {\n+            if first {\n+                first = false;\n+            }\n+            else {\n+                acc.push_str(\", \");\n+            }\n+            acc.push_str(key.to_str());\n+            acc.push_str(\": \");\n+            acc.push_str(value.to_str());\n+        }\n+        acc.push_char('}');\n+        acc\n+    }\n+}\n+\n+impl<A:ToStr+Hash+Eq> ToStr for HashSet<A> {\n+    #[inline(always)]\n+    fn to_str(&self) -> ~str {\n+    let mut acc = ~\"{\", first = true;\n+    for self.each |element| {\n+        if first {\n+            first = false;\n+        }\n+        else {\n+            acc.push_str(\", \");\n+        }\n+        acc.push_str(element.to_str());\n+    }\n+    acc.push_char('}');\n+    acc\n+    }\n+}\n+\n impl<A:ToStr,B:ToStr> ToStr for (A, B) {\n     #[inline(always)]\n     fn to_str(&self) -> ~str {\n@@ -58,6 +101,7 @@ impl<A:ToStr,B:ToStr> ToStr for (A, B) {\n         }\n     }\n }\n+\n impl<A:ToStr,B:ToStr,C:ToStr> ToStr for (A, B, C) {\n     #[inline(always)]\n     fn to_str(&self) -> ~str {\n@@ -80,11 +124,15 @@ impl<'self,A:ToStr> ToStr for &'self [A] {\n     fn to_str(&self) -> ~str {\n         let mut acc = ~\"[\", first = true;\n         for self.each |elt| {\n-            if first { first = false; }\n-            else { str::push_str(&mut acc, ~\", \"); }\n-            str::push_str(&mut acc, elt.to_str());\n+            if first {\n+                first = false;\n+            }\n+            else {\n+                acc.push_str(\", \");\n+            }\n+            acc.push_str(elt.to_str());\n         }\n-        str::push_char(&mut acc, ']');\n+        acc.push_char(']');\n         acc\n     }\n }\n@@ -94,11 +142,15 @@ impl<A:ToStr> ToStr for ~[A] {\n     fn to_str(&self) -> ~str {\n         let mut acc = ~\"[\", first = true;\n         for self.each |elt| {\n-            if first { first = false; }\n-            else { str::push_str(&mut acc, ~\", \"); }\n-            str::push_str(&mut acc, elt.to_str());\n+            if first {\n+                first = false;\n+            }\n+            else {\n+                acc.push_str(\", \");\n+            }\n+            acc.push_str(elt.to_str());\n         }\n-        str::push_char(&mut acc, ']');\n+        acc.push_char(']');\n         acc\n     }\n }\n@@ -108,18 +160,25 @@ impl<A:ToStr> ToStr for @[A] {\n     fn to_str(&self) -> ~str {\n         let mut acc = ~\"[\", first = true;\n         for self.each |elt| {\n-            if first { first = false; }\n-            else { str::push_str(&mut acc, ~\", \"); }\n-            str::push_str(&mut acc, elt.to_str());\n+            if first {\n+                first = false;\n+            }\n+            else {\n+                acc.push_str(\", \");\n+            }\n+            acc.push_str(elt.to_str());\n         }\n-        str::push_char(&mut acc, ']');\n+        acc.push_char(']');\n         acc\n     }\n }\n \n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]\n mod tests {\n+    use hashmap::HashMap;\n+    use hashmap::HashSet;\n+    use container::Set;\n     #[test]\n     fn test_simple_types() {\n         assert!(1i.to_str() == ~\"1\");\n@@ -149,4 +208,32 @@ mod tests {\n         assert!((~[~[], ~[1], ~[1, 1]]).to_str() ==\n                ~\"[[], [1], [1, 1]]\");\n     }\n-}\n+\n+    #[test]\n+    fn test_hashmap() {\n+        let mut table: HashMap<int, int> = HashMap::new();\n+        let empty: HashMap<int, int> = HashMap::new();\n+\n+        table.insert(3, 4);\n+        table.insert(1, 2);\n+\n+        let table_str = table.to_str();\n+\n+        assert!(table_str == ~\"{1: 2, 3: 4}\" || table_str == ~\"{3: 4, 1: 2}\");\n+        assert!(empty.to_str() == ~\"{}\");\n+    }\n+\n+    #[test]\n+    fn test_hashset() {\n+        let mut set: HashSet<int> = HashSet::new();\n+        let empty_set: HashSet<int> = HashSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = set.to_str();\n+\n+        assert!(set_str == ~\"{1, 2}\" || set_str == ~\"{2, 1}\");\n+        assert!(empty_set.to_str() == ~\"{}\");\n+    }\n+}\n\\ No newline at end of file"}]}