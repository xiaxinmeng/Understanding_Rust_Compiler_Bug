{"sha": "1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiY2M2ZGM3ZWE0MzBiN2Q0MDNhNTdmNjBlNDhiM2MzY2RmY2Y1NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-01T07:21:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-01T07:21:23Z"}, "message": "Auto merge of #46895 - ricochet1k:macro-lifetimes, r=jseyfried\n\nAllow lifetimes in macros\n\nThis is a resurrection of PR #41927 which was a resurrection of #33135, which is intended to fix #34303.\n\nIn short, this allows macros_rules! to use :lifetime as a matcher to match 'lifetimes.\n\nStill to do:\n- [x]  Feature gate", "tree": {"sha": "2073115c9aa906116a5698340385e1aacfca21b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2073115c9aa906116a5698340385e1aacfca21b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "html_url": "https://github.com/rust-lang/rust/commit/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ca88cff7dc397f409f561321ee3c4021c05436", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ca88cff7dc397f409f561321ee3c4021c05436", "html_url": "https://github.com/rust-lang/rust/commit/f3ca88cff7dc397f409f561321ee3c4021c05436"}, {"sha": "8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9", "html_url": "https://github.com/rust-lang/rust/commit/8b4bdc2f3f753e0d0b00ecc892a813e9786621e9"}], "stats": {"total": 252, "additions": 231, "deletions": 21}, "files": [{"sha": "5b585d7f041d25877b2bd339cb01e7100f9413c3", "filename": "src/doc/unstable-book/src/language-features/macro-lifetime-matcher.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmacro-lifetime-matcher.md?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,14 @@\n+# `macro_lifetime_matcher`\n+\n+The tracking issue for this feature is: [#46895]\n+\n+With this feature gate enabled, the [list of fragment specifiers][frags] gains one more entry:\n+\n+* `lifetime`: a lifetime. Examples: 'static, 'a.\n+\n+A `lifetime` variable may be followed by anything.\n+\n+[#46895]: https://github.com/rust-lang/rust/issues/46895\n+[frags]: ../book/first-edition/macros.html#syntactic-requirements\n+\n+------------------------"}, {"sha": "59996d1e4a7b139acaa8cdce9946cc6a19792bd8", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -190,6 +190,12 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::Lifetime {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![TokenTree::Token(DUMMY_SP, token::Lifetime(self.ident))]\n+        }\n+    }\n+\n     macro_rules! impl_to_tokens_slice {\n         ($t: ty, $sep: expr) => {\n             impl ToTokens for [$t] {"}, {"sha": "124477620c27fea7de75b7c3fbdca7af39c693f8", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -603,6 +603,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n+        \"lifetime\" => token::NtLifetime(p.expect_lifetime()),\n         // this is not supposed to happen, since it has been checked\n         // when compiling the macro.\n         _ => p.span_bug(sp, \"invalid fragment specifier\")"}, {"sha": "d86603e94e9df2844dd7af4ec7dd4e9c7f129e08", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -768,10 +768,11 @@ fn token_can_be_followed_by_any(tok: &quoted::TokenTree) -> bool {\n /// ANYTHING without fear of future compatibility hazards).\n fn frag_can_be_followed_by_any(frag: &str) -> bool {\n     match frag {\n-        \"item\"  | // always terminated by `}` or `;`\n-        \"block\" | // exactly one token tree\n-        \"ident\" | // exactly one token tree\n-        \"meta\"  | // exactly one token tree\n+        \"item\"     | // always terminated by `}` or `;`\n+        \"block\"    | // exactly one token tree\n+        \"ident\"    | // exactly one token tree\n+        \"meta\"     | // exactly one token tree\n+        \"lifetime\" | // exactly one token tree\n         \"tt\" =>   // exactly one token tree\n             true,\n \n@@ -832,8 +833,8 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n                 TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => Ok(true),\n                 _ => Ok(false),\n             },\n-            \"ident\" => {\n-                // being a single token, idents are harmless\n+            \"ident\" | \"lifetime\" => {\n+                // being a single token, idents and lifetimes are harmless\n                 Ok(true)\n             },\n             \"meta\" | \"tt\" => {\n@@ -887,9 +888,21 @@ fn is_legal_fragment_specifier(sess: &ParseSess,\n     match frag_name {\n         \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" |\n         \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"\" => true,\n+        \"lifetime\" => {\n+            if !features.borrow().macro_lifetime_matcher &&\n+               !attr::contains_name(attrs, \"allow_internal_unstable\") {\n+                let explain = feature_gate::EXPLAIN_LIFETIME_MATCHER;\n+                emit_feature_err(sess,\n+                                 \"macro_lifetime_matcher\",\n+                                 frag_span,\n+                                 GateIssue::Language,\n+                                 explain);\n+            }\n+            true\n+        },\n         \"vis\" => {\n-            if     !features.borrow().macro_vis_matcher\n-                && !attr::contains_name(attrs, \"allow_internal_unstable\") {\n+            if !features.borrow().macro_vis_matcher &&\n+               !attr::contains_name(attrs, \"allow_internal_unstable\") {\n                 let explain = feature_gate::EXPLAIN_VIS_MATCHER;\n                 emit_feature_err(sess,\n                                  \"macro_vis_matcher\","}, {"sha": "c5de0da0979a1bacd7275619bf19dada7def6745", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -447,6 +447,9 @@ declare_features! (\n \n     // Termination trait in main (RFC 1937)\n     (active, termination_trait, \"1.24.0\", Some(43301)),\n+\n+    // Allows use of the :lifetime macro fragment specifier\n+    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n );\n \n declare_features! (\n@@ -1226,6 +1229,9 @@ pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n pub const EXPLAIN_VIS_MATCHER: &'static str =\n     \":vis fragment specifier is experimental and subject to change\";\n \n+pub const EXPLAIN_LIFETIME_MATCHER: &'static str =\n+    \":lifetime fragment specifier is experimental and subject to change\";\n+\n pub const EXPLAIN_PLACEMENT_IN: &'static str =\n     \"placement-in expression syntax is experimental and subject to change.\";\n "}, {"sha": "6682a3439f1b959819cb6167db6ac72e682fcd55", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -642,6 +642,7 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n             token::NtWhereClause(fld.fold_where_clause(where_clause)),\n         token::NtArg(arg) => token::NtArg(fld.fold_arg(arg)),\n         token::NtVis(vis) => token::NtVis(fld.fold_vis(vis)),\n+        token::NtLifetime(lifetime) => token::NtLifetime(fld.fold_lifetime(lifetime)),\n     }\n }\n "}, {"sha": "812e3c4967a9de70183b6698a8a9ddd542144275", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -1295,6 +1295,10 @@ impl<'a> Parser<'a> {\n     fn get_label(&mut self) -> ast::Ident {\n         match self.token {\n             token::Lifetime(ref ident) => *ident,\n+            token::Interpolated(ref nt) => match nt.0 {\n+                token::NtLifetime(lifetime) => lifetime.ident,\n+                _ => self.bug(\"not a lifetime\"),\n+            },\n             _ => self.bug(\"not a lifetime\"),\n         }\n     }\n@@ -2031,14 +2035,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse single lifetime 'a or panic.\n-    fn expect_lifetime(&mut self) -> Lifetime {\n-        match self.token {\n-            token::Lifetime(ident) => {\n-                let ident_span = self.span;\n-                self.bump();\n-                Lifetime { ident: ident, span: ident_span, id: ast::DUMMY_NODE_ID }\n-            }\n-            _ => self.span_bug(self.span, \"not a lifetime\")\n+    pub fn expect_lifetime(&mut self) -> Lifetime {\n+        if let Some(lifetime) = self.token.lifetime(self.span) {\n+            self.bump();\n+            lifetime\n+        } else {\n+            self.span_bug(self.span, \"not a lifetime\")\n         }\n     }\n "}, {"sha": "bd4f7f9853d768e1a67376626464e2990df89ac3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -251,7 +251,7 @@ impl Token {\n             Lt | BinOp(Shl)             | // associated path\n             ModSep                      => true, // global path\n             Interpolated(ref nt) => match nt.0 {\n-                NtIdent(..) | NtTy(..) | NtPath(..) => true,\n+                NtIdent(..) | NtTy(..) | NtPath(..) | NtLifetime(..) => true,\n                 _ => false,\n             },\n             _ => false,\n@@ -314,14 +314,26 @@ impl Token {\n         false\n     }\n \n-    /// Returns `true` if the token is a lifetime.\n-    pub fn is_lifetime(&self) -> bool {\n+    /// Returns a lifetime with the span and a dummy id if it is a lifetime,\n+    /// or the original lifetime if it is an interpolated lifetime, ignoring\n+    /// the span.\n+    pub fn lifetime(&self, span: Span) -> Option<ast::Lifetime> {\n         match *self {\n-            Lifetime(..) => true,\n-            _            => false,\n+            Lifetime(ident) =>\n+                Some(ast::Lifetime { ident: ident, span: span, id: ast::DUMMY_NODE_ID }),\n+            Interpolated(ref nt) => match nt.0 {\n+                NtLifetime(lifetime) => Some(lifetime),\n+                _ => None,\n+            },\n+            _ => None,\n         }\n     }\n \n+    /// Returns `true` if the token is a lifetime.\n+    pub fn is_lifetime(&self) -> bool {\n+        self.lifetime(syntax_pos::DUMMY_SP).is_some()\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     pub fn is_mutability(&self) -> bool {\n         self.is_keyword(keywords::Mut) ||\n@@ -486,6 +498,10 @@ impl Token {\n                 let token = Token::Ident(ident.node);\n                 tokens = Some(TokenTree::Token(ident.span, token).into());\n             }\n+            Nonterminal::NtLifetime(lifetime) => {\n+                let token = Token::Lifetime(lifetime.ident);\n+                tokens = Some(TokenTree::Token(lifetime.span, token).into());\n+            }\n             Nonterminal::NtTT(ref tt) => {\n                 tokens = Some(tt.clone().into());\n             }\n@@ -524,6 +540,7 @@ pub enum Nonterminal {\n     NtGenerics(ast::Generics),\n     NtWhereClause(ast::WhereClause),\n     NtArg(ast::Arg),\n+    NtLifetime(ast::Lifetime),\n }\n \n impl fmt::Debug for Nonterminal {\n@@ -546,6 +563,7 @@ impl fmt::Debug for Nonterminal {\n             NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n             NtArg(..) => f.pad(\"NtArg(..)\"),\n             NtVis(..) => f.pad(\"NtVis(..)\"),\n+            NtLifetime(..) => f.pad(\"NtLifetime(..)\"),\n         }\n     }\n }"}, {"sha": "dd343a2384b1f475f1ee52c15a698febeb576d01", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -279,6 +279,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             token::NtWhereClause(ref e) => where_clause_to_string(e),\n             token::NtArg(ref e)         => arg_to_string(e),\n             token::NtVis(ref e)         => vis_to_string(e),\n+            token::NtLifetime(ref e)    => lifetime_to_string(e),\n         }\n     }\n }"}, {"sha": "b0c9280b6ce44fb3effe9cf291f64f24296d79a7", "filename": "src/test/run-pass/macro-lifetime-used-with-bound.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_lifetime_matcher)]\n+\n+macro_rules! foo {\n+    ($l:lifetime, $l2:lifetime) => {\n+        fn f<$l: $l2, $l2>(arg: &$l str, arg2: &$l2 str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('a, 'b);\n+    let x: &'static str = f(\"hi\", \"there\");\n+    assert_eq!(\"hi\", x);\n+}"}, {"sha": "8a2d76e17df6846ada9f4cccd751b70c167ed81e", "filename": "src/test/run-pass/macro-lifetime-used-with-labels.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-labels.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unreachable_code)]\n+#![feature(macro_lifetime_matcher)]\n+\n+macro_rules! x {\n+    ($a:lifetime) => {\n+        $a: loop {\n+            break $a;\n+            panic!(\"failed\");\n+        }\n+    }\n+}\n+macro_rules! br {\n+    ($a:lifetime) => {\n+        break $a;\n+    }\n+}\n+macro_rules! br2 {\n+    ($b:lifetime) => {\n+        'b: loop {\n+            break $b; // this $b should refer to the outer loop.\n+        }\n+    }\n+}\n+fn main() {\n+    x!('a);\n+    'c: loop {\n+        br!('c);\n+        panic!(\"failed\");\n+    }\n+    'b: loop {\n+        br2!('b);\n+        panic!(\"failed\");\n+    }\n+}"}, {"sha": "468ee2e94365723690f85f750b1467be8bb9eea1", "filename": "src/test/run-pass/macro-lifetime-used-with-static.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_lifetime_matcher)]\n+\n+macro_rules! foo {\n+    ($l:lifetime) => {\n+        fn f(arg: &$l str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('static);\n+    let x: &'static str = f(\"hi\");\n+    assert_eq!(\"hi\", x);\n+}"}, {"sha": "db521ca7f103fb74d101fc830bf35e9254e0f9c0", "filename": "src/test/run-pass/macro-lifetime.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_lifetime_matcher)]\n+\n+macro_rules! foo {\n+    ($l:lifetime) => {\n+        fn f<$l>(arg: &$l str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('a);\n+    let x: &'static str = f(\"hi\");\n+    assert_eq!(\"hi\", x);\n+}"}, {"sha": "0d107d283cdff39818d955c902fe0e7091c2dfc1", "filename": "src/test/ui/feature-gate-macro-lifetime-matcher.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.rs?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the :lifetime macro fragment cannot be used when macro_lifetime_matcher\n+// feature gate is not used.\n+\n+macro_rules! m { ($lt:lifetime) => {} }\n+//~^ ERROR :lifetime fragment specifier is experimental and subject to change\n+\n+fn main() {\n+    m!('a);\n+}"}, {"sha": "e78f7684cf2bea71203a8a569428d445209f01ef", "filename": "src/test/ui/feature-gate-macro-lifetime-matcher.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr?ref=1bcc6dc7ea430b7d403a57f60e48b3c3cdfcf562", "patch": "@@ -0,0 +1,10 @@\n+error: :lifetime fragment specifier is experimental and subject to change (see issue #46895)\n+  --> $DIR/feature-gate-macro-lifetime-matcher.rs:14:19\n+   |\n+14 | macro_rules! m { ($lt:lifetime) => {} }\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(macro_lifetime_matcher)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}