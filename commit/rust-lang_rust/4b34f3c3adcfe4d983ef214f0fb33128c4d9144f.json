{"sha": "4b34f3c3adcfe4d983ef214f0fb33128c4d9144f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzRmM2MzYWRjZmU0ZDk4M2VmMjE0ZjBmYjMzMTI4YzRkOTE0NGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:10Z"}, "message": "rollup merge of #19626: bluss/string-extend-str\n\nStrings iterate to both char and &str, so it is natural it can also be extended or collected from an iterator of &str.\n\nApart from the trait implementations, `Extend<char>` is updated to use the iterator size hint, and the test added tests both the char and the &str versions of Extend and FromIterator.", "tree": {"sha": "ce922c1847c1c304c3cbe9ed16e40bfa4423b50a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce922c1847c1c304c3cbe9ed16e40bfa4423b50a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f", "html_url": "https://github.com/rust-lang/rust/commit/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cbb07507e6a29e28e27cd290d397d191ace2f47", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbb07507e6a29e28e27cd290d397d191ace2f47", "html_url": "https://github.com/rust-lang/rust/commit/1cbb07507e6a29e28e27cd290d397d191ace2f47"}, {"sha": "a81346966d7e0480a50a2821fa5f95253342ecb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a81346966d7e0480a50a2821fa5f95253342ecb0", "html_url": "https://github.com/rust-lang/rust/commit/a81346966d7e0480a50a2821fa5f95253342ecb0"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "6943ec69359f8af6d28cfc2eb5104e4133cb5b51", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b34f3c3adcfe4d983ef214f0fb33128c4d9144f/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=4b34f3c3adcfe4d983ef214f0fb33128c4d9144f", "patch": "@@ -729,15 +729,38 @@ impl FromIterator<char> for String {\n     }\n }\n \n+#[experimental = \"waiting on FromIterator stabilization\"]\n+impl<'a> FromIterator<&'a str> for String {\n+    fn from_iter<I:Iterator<&'a str>>(iterator: I) -> String {\n+        let mut buf = String::new();\n+        buf.extend(iterator);\n+        buf\n+    }\n+}\n+\n #[experimental = \"waiting on Extend stabilization\"]\n impl Extend<char> for String {\n     fn extend<I:Iterator<char>>(&mut self, mut iterator: I) {\n+        let (lower_bound, _) = iterator.size_hint();\n+        self.reserve(lower_bound);\n         for ch in iterator {\n             self.push(ch)\n         }\n     }\n }\n \n+#[experimental = \"waiting on Extend stabilization\"]\n+impl<'a> Extend<&'a str> for String {\n+    fn extend<I: Iterator<&'a str>>(&mut self, mut iterator: I) {\n+        // A guess that at least one byte per iterator element will be needed.\n+        let (lower_bound, _) = iterator.size_hint();\n+        self.reserve(lower_bound);\n+        for s in iterator {\n+            self.push_str(s)\n+        }\n+    }\n+}\n+\n impl PartialEq for String {\n     #[inline]\n     fn eq(&self, other: &String) -> bool { PartialEq::eq(&**self, &**other) }\n@@ -1307,6 +1330,27 @@ mod tests {\n                \"[[], [1], [1, 1]]\");\n     }\n \n+    #[test]\n+    fn test_from_iterator() {\n+        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_string();\n+        let t = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let u = \"Vi\u1ec7t Nam\";\n+\n+        let a: String = s.chars().collect();\n+        assert_eq!(s, a);\n+\n+        let mut b = t.to_string();\n+        b.extend(u.chars());\n+        assert_eq!(s, b);\n+\n+        let c: String = vec![t, u].into_iter().collect();\n+        assert_eq!(s, c);\n+\n+        let mut d = t.to_string();\n+        d.extend(vec![u].into_iter());\n+        assert_eq!(s, d);\n+    }\n+\n     #[bench]\n     fn bench_with_capacity(b: &mut Bencher) {\n         b.iter(|| {"}]}