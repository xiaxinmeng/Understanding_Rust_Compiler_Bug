{"sha": "148c125b1bf20674e8d0c55c21b3433a6d465b07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OGMxMjViMWJmMjA2NzRlOGQwYzU1YzIxYjM0MzNhNmQ0NjViMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T15:02:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-21T15:02:08Z"}, "message": "Auto merge of #71718 - NeoRaider:ffi_const_pure, r=Amanieu\n\nExperimentally add `ffi_const` and `ffi_pure` extern fn attributes\n\nAdd FFI function attributes corresponding to clang/gcc/... `const` and `pure`.\n\nRebased version of #58327 by @gnzlbg with the following changes:\n\n- Switched back from the `c_ffi_const` and `c_ffi_pure` naming to `ffi_const` and `ffi_pure`, as I agree with https://github.com/rust-lang/rust/pull/58327#issuecomment-462718772 and this nicely aligns with `ffi_returns_twice`\n- (Hopefully) took care of all of @hanna-kruppe's change requests in the original PR\n\nr? @hanna-kruppe", "tree": {"sha": "95cad82e9b74b3e71100435b1060574bf6b8c522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95cad82e9b74b3e71100435b1060574bf6b8c522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148c125b1bf20674e8d0c55c21b3433a6d465b07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148c125b1bf20674e8d0c55c21b3433a6d465b07", "html_url": "https://github.com/rust-lang/rust/commit/148c125b1bf20674e8d0c55c21b3433a6d465b07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148c125b1bf20674e8d0c55c21b3433a6d465b07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c9fef822b890054fcefa9a567b57eb6edfe638", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c9fef822b890054fcefa9a567b57eb6edfe638", "html_url": "https://github.com/rust-lang/rust/commit/06c9fef822b890054fcefa9a567b57eb6edfe638"}, {"sha": "a114a237231586e754f8d6de2759e69ee9d90a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a114a237231586e754f8d6de2759e69ee9d90a2c", "html_url": "https://github.com/rust-lang/rust/commit/a114a237231586e754f8d6de2759e69ee9d90a2c"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "9a1ced4033b2201772943a47a642d854bc04e8e2", "filename": "src/doc/unstable-book/src/language-features/ffi-const.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-const.md?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,47 @@\n+# `ffi_const`\n+\n+The `#[ffi_const]` attribute applies clang's `const` attribute to foreign\n+functions declarations.\n+\n+That is, `#[ffi_const]` functions shall have no effects except for its return\n+value, which can only depend on the values of the function parameters, and is\n+not affected by changes to the observable state of the program.\n+\n+Applying the `#[ffi_const]` attribute to a function that violates these\n+requirements is undefined behaviour.\n+\n+This attribute enables Rust to perform common optimizations, like sub-expression\n+elimination, and it can avoid emitting some calls in repeated invocations of the\n+function with the same argument values regardless of other operations being\n+performed in between these functions calls (as opposed to `#[ffi_pure]`\n+functions).\n+\n+## Pitfalls\n+\n+A `#[ffi_const]` function can only read global memory that would not affect\n+its return value for the whole execution of the program (e.g. immutable global\n+memory). `#[ffi_const]` functions are referentially-transparent and therefore\n+more strict than `#[ffi_pure]` functions.\n+\n+A common pitfall involves applying the `#[ffi_const]` attribute to a\n+function that reads memory through pointer arguments which do not necessarily\n+point to immutable global memory.\n+\n+A `#[ffi_const]` function that returns unit has no effect on the abstract\n+machine's state, and a `#[ffi_const]` function cannot be `#[ffi_pure]`.\n+\n+A `#[ffi_const]` function must not diverge, neither via a side effect (e.g. a\n+call to `abort`) nor by infinite loops.\n+\n+When translating C headers to Rust FFI, it is worth verifying for which targets\n+the `const` attribute is enabled in those headers, and using the appropriate\n+`cfg` macros in the Rust side to match those definitions. While the semantics of\n+`const` are implemented identically by many C and C++ compilers, e.g., clang,\n+[GCC], [ARM C/C++ compiler], [IBM ILE C/C++], etc. they are not necessarily\n+implemented in this way on all of them. It is therefore also worth verifying\n+that the semantics of the C toolchain used to compile the binary being linked\n+against are compatible with those of the `#[ffi_const]`.\n+\n+[ARM C/C++ compiler]: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacgigch.html\n+[GCC]: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-const-function-attribute\n+[IBM ILE C/C++]: https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_const.htm"}, {"sha": "7bfd7a378f00bff14f17c2e6cd5a9b7bf55deea2", "filename": "src/doc/unstable-book/src/language-features/ffi-pure.md", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fffi-pure.md?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,51 @@\n+# `ffi_pure`\n+\n+The `#[ffi_pure]` attribute applies clang's `pure` attribute to foreign\n+functions declarations.\n+\n+That is, `#[ffi_pure]` functions shall have no effects except for its return\n+value, which shall not change across two consecutive function calls with\n+the same parameters.\n+\n+Applying the `#[ffi_pure]` attribute to a function that violates these\n+requirements is undefined behavior.\n+\n+This attribute enables Rust to perform common optimizations, like sub-expression\n+elimination and loop optimizations. Some common examples of pure functions are\n+`strlen` or `memcmp`.\n+\n+These optimizations are only applicable when the compiler can prove that no\n+program state observable by the `#[ffi_pure]` function has changed between calls\n+of the function, which could alter the result. See also the `#[ffi_const]`\n+attribute, which provides stronger guarantees regarding the allowable behavior\n+of a function, enabling further optimization.\n+\n+## Pitfalls\n+\n+A `#[ffi_pure]` function can read global memory through the function\n+parameters (e.g. pointers), globals, etc. `#[ffi_pure]` functions are not\n+referentially-transparent, and are therefore more relaxed than `#[ffi_const]`\n+functions.\n+\n+However, accesing global memory through volatile or atomic reads can violate the\n+requirement that two consecutive function calls shall return the same value.\n+\n+A `pure` function that returns unit has no effect on the abstract machine's\n+state.\n+\n+A `#[ffi_pure]` function must not diverge, neither via a side effect (e.g. a\n+call to `abort`) nor by infinite loops.\n+\n+When translating C headers to Rust FFI, it is worth verifying for which targets\n+the `pure` attribute is enabled in those headers, and using the appropriate\n+`cfg` macros in the Rust side to match those definitions. While the semantics of\n+`pure` are implemented identically by many C and C++ compilers, e.g., clang,\n+[GCC], [ARM C/C++ compiler], [IBM ILE C/C++], etc. they are not necessarily\n+implemented in this way on all of them. It is therefore also worth verifying\n+that the semantics of the C toolchain used to compile the binary being linked\n+against are compatible with those of the `#[ffi_pure]`.\n+\n+\n+[ARM C/C++ compiler]: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491c/Cacigdac.html\n+[GCC]: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-pure-function-attribute\n+[IBM ILE C/C++]: https://www.ibm.com/support/knowledgecenter/fr/ssw_ibm_i_71/rzarg/fn_attrib_pure.htm"}, {"sha": "421c6aca1a978a0a0cf19b57d72e3fe3296dfc1e", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -284,6 +284,12 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_RETURNS_TWICE) {\n         Attribute::ReturnsTwice.apply_llfn(Function, llfn);\n     }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_PURE) {\n+        Attribute::ReadOnly.apply_llfn(Function, llfn);\n+    }\n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::FFI_CONST) {\n+        Attribute::ReadNone.apply_llfn(Function, llfn);\n+    }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         naked(llfn, true);\n     }"}, {"sha": "5865042859dca227d1d271c596016e817e128d80", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -616,4 +616,7 @@ E0754: include_str!(\"./error_codes/E0754.md\"),\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n+    E0755, // `#[ffi_pure]` is only allowed on foreign functions\n+    E0756, // `#[ffi_const]` is only allowed on foreign functions\n+    E0757, // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n }"}, {"sha": "90b2380d86450db261c1d07b92b78a58b75371c5", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -565,6 +565,12 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n \n+    /// Allows the use of `#[ffi_pure]` on foreign functions.\n+    (active, ffi_pure, \"1.45.0\", Some(58329), None),\n+\n+    /// Allows the use of `#[ffi_const]` on foreign functions.\n+    (active, ffi_const, \"1.45.0\", Some(58328), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "44971a98cc32f741b2a8d9848924936bb9a22653", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -331,6 +331,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n+    gated!(ffi_pure, Whitelisted, template!(Word), experimental!(ffi_pure)),\n+    gated!(ffi_const, Whitelisted, template!(Word), experimental!(ffi_const)),\n     gated!(track_caller, Whitelisted, template!(Word), experimental!(track_caller)),\n     gated!(\n         register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),"}, {"sha": "c480944069efbed2339591899ccfea1984b71fd9", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -77,6 +77,12 @@ bitflags! {\n         const NO_SANITIZE_THREAD  = 1 << 14;\n         /// All `#[no_sanitize(...)]` attributes.\n         const NO_SANITIZE_ANY = Self::NO_SANITIZE_ADDRESS.bits | Self::NO_SANITIZE_MEMORY.bits | Self::NO_SANITIZE_THREAD.bits;\n+        /// #[ffi_pure]: applies clang's `pure` attribute to a foreign function\n+        /// declaration.\n+        const FFI_PURE = 1 << 15;\n+        /// #[ffi_const]: applies clang's `const` attribute to a foreign function\n+        /// declaration.\n+        const FFI_CONST = 1 << 16;\n     }\n }\n "}, {"sha": "6a6098710e828b736f584ee21f0fa6db0bd5d6a9", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -322,6 +322,8 @@ symbols! {\n         f32,\n         f64,\n         feature,\n+        ffi_const,\n+        ffi_pure,\n         ffi_returns_twice,\n         field,\n         field_init_shorthand,"}, {"sha": "66ef6a04be914b917524a7affec477bee1d72aab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -2374,6 +2374,43 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 )\n                 .emit();\n             }\n+        } else if attr.check_name(sym::ffi_pure) {\n+            if tcx.is_foreign_item(id) {\n+                if attrs.iter().any(|a| a.check_name(sym::ffi_const)) {\n+                    // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n+                    struct_span_err!(\n+                        tcx.sess,\n+                        attr.span,\n+                        E0757,\n+                        \"`#[ffi_const]` function cannot be `#[ffi_pure]`\"\n+                    )\n+                    .emit();\n+                } else {\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n+                }\n+            } else {\n+                // `#[ffi_pure]` is only allowed on foreign functions\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0755,\n+                    \"`#[ffi_pure]` may only be used on foreign functions\"\n+                )\n+                .emit();\n+            }\n+        } else if attr.check_name(sym::ffi_const) {\n+            if tcx.is_foreign_item(id) {\n+                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n+            } else {\n+                // `#[ffi_const]` is only allowed on foreign functions\n+                struct_span_err!(\n+                    tcx.sess,\n+                    attr.span,\n+                    E0756,\n+                    \"`#[ffi_const]` may only be used on foreign functions\"\n+                )\n+                .emit();\n+            }\n         } else if attr.check_name(sym::rustc_allocator_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND;\n         } else if attr.check_name(sym::naked) {"}, {"sha": "440d022a12cba0ce3a6ba8cc5e466809e09f70dd", "filename": "src/test/codegen/ffi-const.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fcodegen%2Fffi-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fcodegen%2Fffi-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-const.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -C no-prepopulate-passes\n+#![crate_type = \"lib\"]\n+#![feature(ffi_const)]\n+\n+pub fn bar() { unsafe { foo() } }\n+\n+extern {\n+    // CHECK-LABEL: declare void @foo()\n+    // CHECK-SAME: [[ATTRS:#[0-9]+]]\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readnone{{.*}} }\n+    #[ffi_const] pub fn foo();\n+}"}, {"sha": "f0ebc1caa09bd1b4d21380773c199399f6ed1de4", "filename": "src/test/codegen/ffi-pure.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fcodegen%2Fffi-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fffi-pure.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -C no-prepopulate-passes\n+#![crate_type = \"lib\"]\n+#![feature(ffi_pure)]\n+\n+pub fn bar() { unsafe { foo() } }\n+\n+extern {\n+    // CHECK-LABEL: declare void @foo()\n+    // CHECK-SAME: [[ATTRS:#[0-9]+]]\n+    // CHECK-DAG: attributes [[ATTRS]] = { {{.*}}readonly{{.*}} }\n+    #[ffi_pure] pub fn foo();\n+}"}, {"sha": "27323b1b602806bac69f68b34e817af854c610d7", "filename": "src/test/ui/feature-gates/feature-gate-ffi_const.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+extern {\n+    #[ffi_const] //~ ERROR the `#[ffi_const]` attribute is an experimental feature\n+    pub fn foo();\n+}"}, {"sha": "bed6a2ce48825d4d04d433118aa11123e3e549eb", "filename": "src/test/ui/feature-gates/feature-gate-ffi_const.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_const.stderr?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[ffi_const]` attribute is an experimental feature\n+  --> $DIR/feature-gate-ffi_const.rs:4:5\n+   |\n+LL |     #[ffi_const]\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: see issue #58328 <https://github.com/rust-lang/rust/issues/58328> for more information\n+   = help: add `#![feature(ffi_const)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e24a686853c88f919eb0a996205df590cdd5bd5b", "filename": "src/test/ui/feature-gates/feature-gate-ffi_pure.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+extern {\n+    #[ffi_pure] //~ ERROR the `#[ffi_pure]` attribute is an experimental feature\n+    pub fn foo();\n+}"}, {"sha": "2b0308fd661c2519303e07fd8acbbcb4d7663d6e", "filename": "src/test/ui/feature-gates/feature-gate-ffi_pure.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-ffi_pure.stderr?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[ffi_pure]` attribute is an experimental feature\n+  --> $DIR/feature-gate-ffi_pure.rs:4:5\n+   |\n+LL |     #[ffi_pure]\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: see issue #58329 <https://github.com/rust-lang/rust/issues/58329> for more information\n+   = help: add `#![feature(ffi_pure)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7aeb5a49a1b58a5be8ff5f799e5d5c4b8fb1c5f1", "filename": "src/test/ui/ffi_const.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,5 @@\n+#![feature(ffi_const)]\n+#![crate_type = \"lib\"]\n+\n+#[ffi_const] //~ ERROR `#[ffi_const]` may only be used on foreign functions\n+pub fn foo() {}"}, {"sha": "623551cc07bbb4ba288590180afa449d6c0bcf18", "filename": "src/test/ui/ffi_const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const.stderr?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,8 @@\n+error[E0756]: `#[ffi_const]` may only be used on foreign functions\n+  --> $DIR/ffi_const.rs:4:1\n+   |\n+LL | #[ffi_const]\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bd9637f0832c74286d11040519eaa01512f0be4", "filename": "src/test/ui/ffi_const2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const2.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,11 @@\n+#![feature(ffi_const, ffi_pure)]\n+\n+extern {\n+    #[ffi_pure] //~ ERROR `#[ffi_const]` function cannot be `#[ffi_pure]`\n+    #[ffi_const]\n+    pub fn baz();\n+}\n+\n+fn main() {\n+    unsafe { baz() };\n+}"}, {"sha": "0b401942c4792661797020c75891bf05be36a239", "filename": "src/test/ui/ffi_const2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_const2.stderr?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,8 @@\n+error[E0757]: `#[ffi_const]` function cannot be `#[ffi_pure]`\n+  --> $DIR/ffi_const2.rs:4:5\n+   |\n+LL |     #[ffi_pure]\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c37d34c8784bbf373cb003d1529c9175a15e3385", "filename": "src/test/ui/ffi_pure.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_pure.rs?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,5 @@\n+#![feature(ffi_pure)]\n+#![crate_type = \"lib\"]\n+\n+#[ffi_pure] //~ ERROR `#[ffi_pure]` may only be used on foreign functions\n+pub fn foo() {}"}, {"sha": "3a849c0bca79c2b3bbbff1bca646961bd8a75610", "filename": "src/test/ui/ffi_pure.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_pure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/148c125b1bf20674e8d0c55c21b3433a6d465b07/src%2Ftest%2Fui%2Fffi_pure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fffi_pure.stderr?ref=148c125b1bf20674e8d0c55c21b3433a6d465b07", "patch": "@@ -0,0 +1,8 @@\n+error[E0755]: `#[ffi_pure]` may only be used on foreign functions\n+  --> $DIR/ffi_pure.rs:4:1\n+   |\n+LL | #[ffi_pure]\n+   | ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}