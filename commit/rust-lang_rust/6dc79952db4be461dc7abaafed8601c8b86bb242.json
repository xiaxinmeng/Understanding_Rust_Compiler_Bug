{"sha": "6dc79952db4be461dc7abaafed8601c8b86bb242", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYzc5OTUyZGI0YmU0NjFkYzdhYmFhZmVkODYwMWM4Yjg2YmIyNDI=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-01-14T23:37:09Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-01-14T23:40:17Z"}, "message": "Add docs to la-arena crate", "tree": {"sha": "4c1e47208cb8a27de9d01094fc19c31f495ed5c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c1e47208cb8a27de9d01094fc19c31f495ed5c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc79952db4be461dc7abaafed8601c8b86bb242", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmAA1mMACgkQ94j36ZAT\nYAOC3g//QIgWXH5eXDoShVVJwv/Dpz8IK7jEcKaUr7zM6keEEeFXtAXpnMbuwyrP\n4CouWn4DV8j4v4Egnlxu/VSsj6Nj2d322ovDtLCd82mIx+qX/Bsg83I/CU6aLvCC\nCzX57bY7eQBE7wTGvWw5RtrhtewiCXAsgpM/XslMzQ37L3kO+7Caoq1+Nyh5DU8y\nlvqPSE1+P8eQ3APAS0m80pSSfjuWyswOVD+tIouyM+x32uUp20ho93CxjxGs91Xd\njwe4jj1FgnEXoa2fRwI5MNC6KRkkaUV+1itqEyUDmN7gZKiBp64G78g4a+0xlePd\njI4Vau33RUjsw0sYKjZdNTspS6t+S/elKtV1m+IHy7JndrNumX3bMzPr0RPYuzOU\nETGeVrOCO10tCEQGzICEFmDFXSuWuUSM6qSko5imMPFnuQ1OV/CtjOnFK3ptZ+9G\nMkqvroV8IQRnfYxk/XKhfRBezDmzPeMgrnPAUsyLUL1K64WXSpflr70vTK3uYKzg\nnnEyptK3uXJzOZNmgn+iqdJ6rnuqkmuK19YIYbWBzV1gNSCwSSDdBIlBm3+2ftfF\nZ8+ee72pXzHQIKB77yRXc6z0ZYKhnW3uUtb2+XaYrD+WdlfKJ99JPSujhmEQOx8A\nj/sxTSuEv4Mau5vrFbhLQoRtoaKDOGVqlPY8q5cwZSlEtuhTSJs=\n=cioo\n-----END PGP SIGNATURE-----", "payload": "tree 4c1e47208cb8a27de9d01094fc19c31f495ed5c3\nparent f88f3d688507508ae9528101e13e1c62902467a3\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1610667429 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1610667617 +1100\n\nAdd docs to la-arena crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc79952db4be461dc7abaafed8601c8b86bb242", "html_url": "https://github.com/rust-lang/rust/commit/6dc79952db4be461dc7abaafed8601c8b86bb242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc79952db4be461dc7abaafed8601c8b86bb242/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f88f3d688507508ae9528101e13e1c62902467a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f88f3d688507508ae9528101e13e1c62902467a3", "html_url": "https://github.com/rust-lang/rust/commit/f88f3d688507508ae9528101e13e1c62902467a3"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "d47366b0b2d85e9b8ce7f64bc091eefd8b81b422", "filename": "lib/arena/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2FCargo.toml?ref=6dc79952db4be461dc7abaafed8601c8b86bb242", "patch": "@@ -5,6 +5,3 @@ description = \"Thy rope of sands...\"\n license = \"MIT OR Apache-2.0\"\n authors = [\"rust-analyzer developers\"]\n edition = \"2018\"\n-\n-[lib]\n-doctest = false"}, {"sha": "78a147c7d18edcf5392b4acb280704ba7378f5a0", "filename": "lib/arena/src/lib.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Flib.rs?ref=6dc79952db4be461dc7abaafed8601c8b86bb242", "patch": "@@ -1,4 +1,6 @@\n-//! Yet another index-based arena.\n+//! Yet another ID-based arena.\n+\n+#![warn(missing_docs)]\n \n use std::{\n     fmt,\n@@ -10,6 +12,7 @@ use std::{\n \n pub mod map;\n \n+/// The raw ID of a value in an arena.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct RawId(u32);\n \n@@ -37,6 +40,7 @@ impl fmt::Display for RawId {\n     }\n }\n \n+/// The ID of a value allocated in an arena that holds `T`s.\n pub struct Idx<T> {\n     raw: RawId,\n     _ty: PhantomData<fn() -> T>,\n@@ -73,14 +77,18 @@ impl<T> fmt::Debug for Idx<T> {\n }\n \n impl<T> Idx<T> {\n+    /// Creates a new ID from a [`RawId`].\n     pub fn from_raw(raw: RawId) -> Self {\n         Idx { raw, _ty: PhantomData }\n     }\n+\n+    /// Converts this ID into the underlying [`RawId`].\n     pub fn into_raw(self) -> RawId {\n         self.raw\n     }\n }\n \n+/// Yet another ID-based arena.\n #[derive(Clone, PartialEq, Eq)]\n pub struct Arena<T> {\n     data: Vec<T>,\n@@ -93,29 +101,99 @@ impl<T: fmt::Debug> fmt::Debug for Arena<T> {\n }\n \n impl<T> Arena<T> {\n+    /// Creates a new empty arena.\n+    ///\n+    /// ```\n+    /// let arena: la_arena::Arena<i32> = la_arena::Arena::new();\n+    /// assert!(arena.is_empty());\n+    /// ```\n     pub const fn new() -> Arena<T> {\n         Arena { data: Vec::new() }\n     }\n+\n+    /// Empties the arena, removing all contained values.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    ///\n+    /// arena.alloc(1);\n+    /// arena.alloc(2);\n+    /// arena.alloc(3);\n+    /// assert_eq!(arena.len(), 3);\n+    ///\n+    /// arena.clear();\n+    /// assert!(arena.is_empty());\n+    /// ```\n     pub fn clear(&mut self) {\n         self.data.clear();\n     }\n \n+    /// Returns the length of the arena.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    /// assert_eq!(arena.len(), 0);\n+    ///\n+    /// arena.alloc(\"foo\");\n+    /// assert_eq!(arena.len(), 1);\n+    ///\n+    /// arena.alloc(\"bar\");\n+    /// assert_eq!(arena.len(), 2);\n+    ///\n+    /// arena.alloc(\"baz\");\n+    /// assert_eq!(arena.len(), 3);\n+    /// ```\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n+\n+    /// Returns whether the arena contains no elements.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    /// assert!(arena.is_empty());\n+    ///\n+    /// arena.alloc(0.5);\n+    /// assert!(!arena.is_empty());\n+    /// ```\n     pub fn is_empty(&self) -> bool {\n         self.data.is_empty()\n     }\n+\n+    /// Allocates a new value on the arena, returning the value\u2019s ID.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    /// let id = arena.alloc(50);\n+    ///\n+    /// assert_eq!(arena[id], 50);\n+    /// ```\n     pub fn alloc(&mut self, value: T) -> Idx<T> {\n         let id = RawId(self.data.len() as u32);\n         self.data.push(value);\n         Idx::from_raw(id)\n     }\n+\n+    /// Returns an iterator over the arena\u2019s elements.\n+    ///\n+    /// ```\n+    /// let mut arena = la_arena::Arena::new();\n+    /// let id1 = arena.alloc(20);\n+    /// let id2 = arena.alloc(40);\n+    /// let id3 = arena.alloc(60);\n+    ///\n+    /// let mut iterator = arena.iter();\n+    /// assert_eq!(iterator.next(), Some((id1, &20)));\n+    /// assert_eq!(iterator.next(), Some((id2, &40)));\n+    /// assert_eq!(iterator.next(), Some((id3, &60)));\n+    /// ```\n     pub fn iter(\n         &self,\n     ) -> impl Iterator<Item = (Idx<T>, &T)> + ExactSizeIterator + DoubleEndedIterator {\n         self.data.iter().enumerate().map(|(idx, value)| (Idx::from_raw(RawId(idx as u32)), value))\n     }\n+\n+    /// Reallocates the arena to make it take up as little space as possible.\n     pub fn shrink_to_fit(&mut self) {\n         self.data.shrink_to_fit();\n     }"}, {"sha": "9801982477ed7c34dd76e960fd921b139df7d693", "filename": "lib/arena/src/map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc79952db4be461dc7abaafed8601c8b86bb242/lib%2Farena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Farena%2Fsrc%2Fmap.rs?ref=6dc79952db4be461dc7abaafed8601c8b86bb242", "patch": "@@ -12,29 +12,35 @@ pub struct ArenaMap<ID, V> {\n }\n \n impl<T, V> ArenaMap<Idx<T>, V> {\n+    /// Inserts a value associated with a given arena ID into the map.\n     pub fn insert(&mut self, id: Idx<T>, t: V) {\n         let idx = Self::to_idx(id);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n         self.v[idx] = Some(t);\n     }\n \n+    /// Returns a reference to the value associated with the provided ID if it is present.\n     pub fn get(&self, id: Idx<T>) -> Option<&V> {\n         self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n     }\n \n+    /// Returns a mutable reference to the value associated with the provided ID if it is present.\n     pub fn get_mut(&mut self, id: Idx<T>) -> Option<&mut V> {\n         self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n     }\n \n+    /// Returns an iterator over the values in the map.\n     pub fn values(&self) -> impl Iterator<Item = &V> {\n         self.v.iter().filter_map(|o| o.as_ref())\n     }\n \n+    /// Returns an iterator over mutable references to the values in the map.\n     pub fn values_mut(&mut self) -> impl Iterator<Item = &mut V> {\n         self.v.iter_mut().filter_map(|o| o.as_mut())\n     }\n \n+    /// Returns an iterator over the arena IDs and values in the map.\n     pub fn iter(&self) -> impl Iterator<Item = (Idx<T>, &V)> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }"}]}