{"sha": "bb5ca58d290791c01d7bb40fd59f5a3275603310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNWNhNThkMjkwNzkxYzAxZDdiYjQwZmQ1OWY1YTMyNzU2MDMzMTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-12T10:44:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-12T10:44:53Z"}, "message": "Rollup merge of #88677 - petrochenkov:exportid, r=davidtwco\n\nrustc: Remove local variable IDs from `Export`s\n\nLocal variables can never be exported.", "tree": {"sha": "b7320e9fd1c3fce35f028ce4d63bbdd850c6d76f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7320e9fd1c3fce35f028ce4d63bbdd850c6d76f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5ca58d290791c01d7bb40fd59f5a3275603310", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhPdomCRBK7hj4Ov3rIwAAGMcIABlQzTrZ65DjnBzrsRl0j1hy\nLRsCyTmiQf8IQneVFW6DGGyPiaa7PgHUIoedkJ9VLy3TdQ6vtcFdwzzBb0ui0A1D\n7unM7O2EUvGYXI0MnYHTQsH9L2pFyg9xghCc15w66jg77NKicAq5X1gnGlLJUYvq\niUL4BWy5FZt94KEHbg5hjpeXCW7imUm3lQ1X0DC0Oetjrw7YKfd2Oz7EKYH5GhL8\n4C24iRLAYcW8/QV/Vrdm0WnuYLypinQXL4lJe4x4/tOv+Au74lxO+drWPF8MqkY0\nY4Vt0YWCeB1VEnauu2DTBeLFW+/aoQRpRiRCFdPG7Dml/+m2OCS+DuKqQsV5690=\n=crM1\n-----END PGP SIGNATURE-----\n", "payload": "tree b7320e9fd1c3fce35f028ce4d63bbdd850c6d76f\nparent 6d4f27ebc7b9ff77e3360e1f0c01d010b455b4da\nparent 294510e1bb7e03bd462f6a6db2fab5f56fae1c8c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631443493 -0700\ncommitter GitHub <noreply@github.com> 1631443493 -0700\n\nRollup merge of #88677 - petrochenkov:exportid, r=davidtwco\n\nrustc: Remove local variable IDs from `Export`s\n\nLocal variables can never be exported.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5ca58d290791c01d7bb40fd59f5a3275603310", "html_url": "https://github.com/rust-lang/rust/commit/bb5ca58d290791c01d7bb40fd59f5a3275603310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5ca58d290791c01d7bb40fd59f5a3275603310/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d4f27ebc7b9ff77e3360e1f0c01d010b455b4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4f27ebc7b9ff77e3360e1f0c01d010b455b4da", "html_url": "https://github.com/rust-lang/rust/commit/6d4f27ebc7b9ff77e3360e1f0c01d010b455b4da"}, {"sha": "294510e1bb7e03bd462f6a6db2fab5f56fae1c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/294510e1bb7e03bd462f6a6db2fab5f56fae1c8c", "html_url": "https://github.com/rust-lang/rust/commit/294510e1bb7e03bd462f6a6db2fab5f56fae1c8c"}], "stats": {"total": 139, "additions": 71, "deletions": 68}, "files": [{"sha": "dd6a17b92aef303b85fc4eae0e0b6391e86b5d63", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -21,6 +21,7 @@\n #![feature(iter_map_while)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(min_specialization)]\n+#![feature(never_type)]\n #![feature(type_alias_impl_trait)]\n #![feature(new_uninit)]\n #![feature(nll)]"}, {"sha": "354f9dd93cc4d4e491f6a15feffcdbf491a837dd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -209,6 +209,12 @@ impl_stable_hash_via_hash!(i128);\n impl_stable_hash_via_hash!(char);\n impl_stable_hash_via_hash!(());\n \n+impl<CTX> HashStable<CTX> for ! {\n+    fn hash_stable(&self, _ctx: &mut CTX, _hasher: &mut StableHasher) {\n+        unreachable!()\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         self.get().hash_stable(ctx, hasher)"}, {"sha": "cb668eb35e093da9b2194eef756f4208e436c677", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -598,6 +598,11 @@ impl<Id> Res<Id> {\n         }\n     }\n \n+    #[track_caller]\n+    pub fn expect_non_local<OtherId>(self) -> Res<OtherId> {\n+        self.map_id(|_| panic!(\"unexpected `Res::Local`\"))\n+    }\n+\n     pub fn macro_kind(self) -> Option<MacroKind> {\n         match self {\n             Res::Def(DefKind::Macro(kind), _) => Some(kind),"}, {"sha": "cc4b7d08f45d88a185aa3e25eee89f8f08ba0c23", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -1020,10 +1020,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over each child of the given item.\n-    fn each_child_of_item<F>(&self, id: DefIndex, mut callback: F, sess: &Session)\n-    where\n-        F: FnMut(Export<hir::HirId>),\n-    {\n+    fn each_child_of_item(&self, id: DefIndex, mut callback: impl FnMut(Export), sess: &Session) {\n         if let Some(data) = &self.root.proc_macro_data {\n             /* If we are loading as a proc macro, we want to return the view of this crate\n              * as a proc macro crate."}, {"sha": "80341b16e1412816ed8c149d23d7052e80adff89", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -5,7 +5,6 @@ use crate::rmeta::encoder;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n@@ -326,28 +325,27 @@ pub fn provide(providers: &mut Providers) {\n             // (restrict scope of mutable-borrow of `visible_parent_map`)\n             {\n                 let visible_parent_map = &mut visible_parent_map;\n-                let mut add_child =\n-                    |bfs_queue: &mut VecDeque<_>, child: &Export<hir::HirId>, parent: DefId| {\n-                        if child.vis != ty::Visibility::Public {\n-                            return;\n-                        }\n+                let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n+                    if child.vis != ty::Visibility::Public {\n+                        return;\n+                    }\n \n-                        if let Some(child) = child.res.opt_def_id() {\n-                            match visible_parent_map.entry(child) {\n-                                Entry::Occupied(mut entry) => {\n-                                    // If `child` is defined in crate `cnum`, ensure\n-                                    // that it is mapped to a parent in `cnum`.\n-                                    if child.is_local() && entry.get().is_local() {\n-                                        entry.insert(parent);\n-                                    }\n-                                }\n-                                Entry::Vacant(entry) => {\n+                    if let Some(child) = child.res.opt_def_id() {\n+                        match visible_parent_map.entry(child) {\n+                            Entry::Occupied(mut entry) => {\n+                                // If `child` is defined in crate `cnum`, ensure\n+                                // that it is mapped to a parent in `cnum`.\n+                                if child.is_local() && entry.get().is_local() {\n                                     entry.insert(parent);\n-                                    bfs_queue.push_back(child);\n                                 }\n                             }\n+                            Entry::Vacant(entry) => {\n+                                entry.insert(parent);\n+                                bfs_queue.push_back(child);\n+                            }\n                         }\n-                    };\n+                    }\n+                };\n \n                 while let Some(def) = bfs_queue.pop_front() {\n                     for child in tcx.item_children(def).iter() {\n@@ -393,11 +391,7 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn item_children_untracked(\n-        &self,\n-        def_id: DefId,\n-        sess: &Session,\n-    ) -> Vec<Export<hir::HirId>> {\n+    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<Export> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate).each_child_of_item(\n             def_id.index,"}, {"sha": "52c6193940dbc93fa643116bfe3a2d5e67cd3788", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -1065,14 +1065,7 @@ impl EncodeContext<'a, 'tcx> {\n         // items - we encode information about proc-macros later on.\n         let reexports = if !self.is_proc_macro {\n             match tcx.module_exports(local_def_id) {\n-                Some(exports) => {\n-                    let hir = self.tcx.hir();\n-                    self.lazy(\n-                        exports\n-                            .iter()\n-                            .map(|export| export.map_id(|id| hir.local_def_id_to_hir_id(id))),\n-                    )\n-                }\n+                Some(exports) => self.lazy(exports),\n                 _ => Lazy::empty(),\n             }\n         } else {"}, {"sha": "fe0bf5b64ba0935e1739994d166cfb484c9e9242", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -359,7 +359,7 @@ struct RenderedConst(String);\n \n #[derive(MetadataEncodable, MetadataDecodable)]\n struct ModData {\n-    reexports: Lazy<[Export<hir::HirId>]>,\n+    reexports: Lazy<[Export]>,\n     expansion: ExpnId,\n }\n "}, {"sha": "f37b976fba68d3d6d450cee0c1cb4b9b353bb2ac", "filename": "compiler/rustc_middle/src/hir/exports.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fexports.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -11,23 +11,18 @@ use std::fmt::Debug;\n \n /// This is the replacement export map. It maps a module to all of the exports\n /// within.\n-pub type ExportMap<Id> = FxHashMap<LocalDefId, Vec<Export<Id>>>;\n+pub type ExportMap = FxHashMap<LocalDefId, Vec<Export>>;\n \n #[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub struct Export<Id> {\n+pub struct Export {\n     /// The name of the target.\n     pub ident: Ident,\n     /// The resolution of the target.\n-    pub res: Res<Id>,\n+    /// Local variables cannot be exported, so this `Res` doesn't need the ID parameter.\n+    pub res: Res<!>,\n     /// The span of the target.\n     pub span: Span,\n     /// The visibility of the export.\n     /// We include non-`pub` exports for hygienic macros that get used from extern crates.\n     pub vis: ty::Visibility,\n }\n-\n-impl<Id> Export<Id> {\n-    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Export<R> {\n-        Export { ident: self.ident, res: self.res.map_id(map), span: self.span, vis: self.vis }\n-    }\n-}"}, {"sha": "7402a77939418823d8aea6aa12f1b5056bd5122f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -1189,7 +1189,7 @@ rustc_queries! {\n         desc { \"traits in scope at a block\" }\n     }\n \n-    query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export<LocalDefId>]> {\n+    query module_exports(def_id: LocalDefId) -> Option<&'tcx [Export]> {\n         desc { |tcx| \"looking up items exported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n@@ -1401,7 +1401,7 @@ rustc_queries! {\n         eval_always\n         desc { \"fetching what a crate is named\" }\n     }\n-    query item_children(def_id: DefId) -> &'tcx [Export<hir::HirId>] {\n+    query item_children(def_id: DefId) -> &'tcx [Export] {\n         desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {"}, {"sha": "cd1e38445ae8c7a4c12194b5eb38ae79009e82ea", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -127,7 +127,7 @@ pub struct ResolverOutputs {\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n-    pub export_map: ExportMap<LocalDefId>,\n+    pub export_map: ExportMap,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in."}, {"sha": "55f2b04c4f1c1f6f258238e5bb8d14829eb5e41b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -228,7 +228,6 @@ impl<'a> Resolver<'a> {\n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n         let def_id = module.def_id().expect(\"unpopulated module without a def-id\");\n         for child in self.cstore().item_children_untracked(def_id, self.session) {\n-            let child = child.map_id(|_| panic!(\"unexpected id\"));\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);\n@@ -946,9 +945,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_res(&mut self, child: Export<NodeId>) {\n+    fn build_reduced_graph_for_external_crate_res(&mut self, child: Export) {\n         let parent = self.parent_scope.module;\n         let Export { ident, res, vis, span } = child;\n+        let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions.\n         match res {"}, {"sha": "d4782edbc134645305d35091a0c252aa6b163de8", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -11,7 +11,6 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n \n use rustc_ast::unwrap_or;\n use rustc_ast::NodeId;\n-use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n@@ -1387,13 +1386,13 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut reexports = Vec::new();\n \n-        module.for_each_child(self.r, |this, ident, _, binding| {\n+        module.for_each_child(self.r, |_, ident, _, binding| {\n             // Filter away ambiguous imports and anything that has def-site hygiene.\n             // FIXME: Implement actual cross-crate hygiene.\n             let is_good_import =\n                 binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n             if is_good_import || binding.is_macro_def() {\n-                let res = binding.res().map_id(|id| this.local_def_id(id));\n+                let res = binding.res().expect_non_local();\n                 if res != def::Res::Err {\n                     reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n                 }"}, {"sha": "d76ba80e42eab75a95eeddd5a836b802714ab616", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -14,6 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n+#![feature(never_type)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n@@ -911,7 +912,7 @@ pub struct Resolver<'a> {\n \n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n-    export_map: ExportMap<LocalDefId>,\n+    export_map: ExportMap,\n     trait_map: Option<NodeMap<Vec<TraitCandidate>>>,\n \n     /// A map from nodes to anonymous modules."}, {"sha": "e32e4493726dbb7d279c66e1451a10d99ccfc41b", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -366,6 +366,18 @@ direct_serialize_impls! {\n     char emit_char read_char\n }\n \n+impl<S: Encoder> Encodable<S> for ! {\n+    fn encode(&self, _s: &mut S) -> Result<(), S::Error> {\n+        unreachable!()\n+    }\n+}\n+\n+impl<D: Decoder> Decodable<D> for ! {\n+    fn decode(_d: &mut D) -> Result<!, D::Error> {\n+        unreachable!()\n+    }\n+}\n+\n impl<S: Encoder> Encodable<S> for ::std::num::NonZeroU32 {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u32(self.get())"}, {"sha": "9744f4f6483c75f8fcaf72f9db79c36cbf204219", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -1655,7 +1655,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>, (): ()) -> &[DefId] {\n         tcx: TyCtxt<'_>,\n         traits: &mut Vec<DefId>,\n         external_mods: &mut FxHashSet<DefId>,\n-        res: Res,\n+        res: Res<!>,\n     ) {\n         match res {\n             Res::Def(DefKind::Trait | DefKind::TraitAlias, def_id) => {"}, {"sha": "29834c82b3de32a20d02e3a54aeec942089ddc50", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -482,12 +482,13 @@ fn build_module(\n     // visit each node at most once.\n     for &item in cx.tcx.item_children(did).iter() {\n         if item.vis == ty::Visibility::Public {\n-            if let Some(def_id) = item.res.mod_def_id() {\n+            let res = item.res.expect_non_local();\n+            if let Some(def_id) = res.mod_def_id() {\n                 if did == def_id || !visited.insert(def_id) {\n                     continue;\n                 }\n             }\n-            if let Res::PrimTy(p) = item.res {\n+            if let Res::PrimTy(p) = res {\n                 // Primitive types can't be inlined so generate an import instead.\n                 let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n@@ -500,7 +501,7 @@ fn build_module(\n                         clean::ImportSource {\n                             path: clean::Path {\n                                 global: false,\n-                                res: item.res,\n+                                res,\n                                 segments: vec![clean::PathSegment {\n                                     name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n@@ -515,9 +516,7 @@ fn build_module(\n                     ))),\n                     cfg: None,\n                 });\n-            } else if let Some(i) =\n-                try_inline(cx, did, None, item.res, item.ident.name, None, visited)\n-            {\n+            } else if let Some(i) = try_inline(cx, did, None, res, item.ident.name, None, visited) {\n                 items.extend(i)\n             }\n         }"}, {"sha": "3254480ff6502432498ed5242e6187bea46ff650", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -212,7 +212,7 @@ impl ExternalCrate {\n     crate fn keywords(&self, tcx: TyCtxt<'_>) -> ThinVec<(DefId, Symbol)> {\n         let root = self.def_id();\n \n-        let as_keyword = |res: Res| {\n+        let as_keyword = |res: Res<!>| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let attrs = tcx.get_attrs(def_id);\n                 let mut keyword = None;\n@@ -243,7 +243,8 @@ impl ExternalCrate {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_keyword(path.res).map(|(_, prim)| (id.def_id.to_def_id(), prim))\n+                            as_keyword(path.res.expect_non_local())\n+                                .map(|(_, prim)| (id.def_id.to_def_id(), prim))\n                         }\n                         _ => None,\n                     }\n@@ -274,7 +275,7 @@ impl ExternalCrate {\n         // Also note that this does not attempt to deal with modules tagged\n         // duplicately for the same primitive. This is handled later on when\n         // rendering by delegating everything to a hash map.\n-        let as_primitive = |res: Res| {\n+        let as_primitive = |res: Res<!>| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let attrs = tcx.get_attrs(def_id);\n                 let mut prim = None;\n@@ -309,7 +310,7 @@ impl ExternalCrate {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_primitive(path.res).map(|(_, prim)| {\n+                            as_primitive(path.res.expect_non_local()).map(|(_, prim)| {\n                                 // Pretend the primitive is local.\n                                 (id.def_id.to_def_id(), prim)\n                             })"}, {"sha": "3e98ba08fb9ca376dbb5b4e4b0d307811f909e6d", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_item(&mut self, res: Res) {\n+    fn visit_item(&mut self, res: Res<!>) {\n         let def_id = res.def_id();\n         let vis = self.tcx.visibility(def_id);\n         let inherited_item_level = if vis == Visibility::Public { self.prev_level } else { None };"}, {"sha": "3a94f47298390a22ef1fc51459b443691fffc70c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5ca58d290791c01d7bb40fd59f5a3275603310/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=bb5ca58d290791c01d7bb40fd59f5a3275603310", "patch": "@@ -520,7 +520,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             }\n         };\n     }\n-    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export<HirId>> {\n+    fn item_child_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Option<&'tcx Export> {\n         tcx.item_children(def_id)\n             .iter()\n             .find(|item| item.ident.name.as_str() == name)\n@@ -557,7 +557,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n                 None\n             }\n         });\n-    try_res!(last).res\n+    try_res!(last).res.expect_non_local()\n }\n \n /// Convenience function to get the `DefId` of a trait by path."}]}