{"sha": "e2496b3cf4a370874bcf4272828730a27f650bc3", "node_id": "C_kwDOAAsO6NoAKGUyNDk2YjNjZjRhMzcwODc0YmNmNDI3MjgyODczMGEyN2Y2NTBiYzM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-15T15:20:46Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-23T10:34:32Z"}, "message": "remove thir::Visitor::visit_const", "tree": {"sha": "74b53fee78b7ebc76303fd445a35c6503e2331a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b53fee78b7ebc76303fd445a35c6503e2331a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2496b3cf4a370874bcf4272828730a27f650bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2496b3cf4a370874bcf4272828730a27f650bc3", "html_url": "https://github.com/rust-lang/rust/commit/e2496b3cf4a370874bcf4272828730a27f650bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2496b3cf4a370874bcf4272828730a27f650bc3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f713b5017c7ded572933605c08233b5d429d121d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f713b5017c7ded572933605c08233b5d429d121d", "html_url": "https://github.com/rust-lang/rust/commit/f713b5017c7ded572933605c08233b5d429d121d"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "14ff795b2433e29c106f59754d57dd9f3e41c12d", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -426,7 +426,6 @@ pub enum ExprKind<'tcx> {\n     ConstParam {\n         literal: ty::Const<'tcx>,\n         def_id: DefId,\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     // FIXME improve docs for `StaticRef` by distinguishing it from `NamedConst`\n     /// A literal containing the address of a `static`."}, {"sha": "77e5b8f48d97c97dc047f63773c461695b65dd48", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -1,7 +1,6 @@\n use super::{\n     Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n };\n-use rustc_middle::ty::Const;\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn thir(&self) -> &'a Thir<'tcx>;\n@@ -25,8 +24,6 @@ pub trait Visitor<'a, 'tcx: 'a>: Sized {\n     fn visit_pat(&mut self, pat: &Pat<'tcx>) {\n         walk_pat(self, pat);\n     }\n-\n-    fn visit_const(&mut self, _cnst: Const<'tcx>) {}\n }\n \n pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Expr<'tcx>) {\n@@ -94,9 +91,8 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n             }\n         }\n         ConstBlock { did: _, substs: _ } => {}\n-        Repeat { value, count } => {\n+        Repeat { value, count: _ } => {\n             visitor.visit_expr(&visitor.thir()[value]);\n-            visitor.visit_const(count);\n         }\n         Array { ref fields } | Tuple { ref fields } => {\n             for &field in &**fields {\n@@ -125,7 +121,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         Literal { lit: _, neg: _ } => {}\n         ScalarLiteral { lit: _, user_ty: _ } => {}\n         NamedConst { def_id: _, substs: _, user_ty: _ } => {}\n-        ConstParam { literal: _, def_id: _, user_ty: _ } => {}\n+        ConstParam { literal: _, def_id: _ } => {}\n         StaticRef { alloc_id: _, ty: _, def_id: _ } => {}\n         InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n             for op in &**operands {\n@@ -212,11 +208,8 @@ pub fn walk_pat<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, pat: &Pat<'\n                 visitor.visit_pat(&subpattern.pattern);\n             }\n         }\n-        Constant { value } => visitor.visit_const(*value),\n-        Range(range) => {\n-            visitor.visit_const(range.lo);\n-            visitor.visit_const(range.hi);\n-        }\n+        Constant { value: _ } => {}\n+        Range(_) => {}\n         Slice { prefix, slice, suffix } | Array { prefix, slice, suffix } => {\n             for subpattern in prefix {\n                 visitor.visit_pat(&subpattern);"}, {"sha": "c02eb40e2cf685d7ce5117fa95f409f807fa7695", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -17,10 +17,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n     /// `expr` is a valid compile-time constant!\n     crate fn as_constant(&mut self, expr: &Expr<'tcx>) -> Constant<'tcx> {\n-        debug!(\"expr: {:#?}\", expr);\n-        // FIXME: Maybe we should try to evaluate here and only create an `Unevaluated`\n-        // constant in case the evaluation fails. Need some evaluation function that\n-        // allows normalization to fail.\n         let create_uneval_from_def_id =\n             |tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>, substs: SubstsRef<'tcx>| {\n                 let uneval = ty::Unevaluated::new(ty::WithOptConstParam::unknown(def_id), substs);\n@@ -74,17 +70,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 Constant { user_ty, span, literal }\n             }\n-            ExprKind::ConstParam { literal, def_id: _, user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n-                    this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n-                        span,\n-                        user_ty,\n-                        inferred_ty: ty,\n-                    })\n-                });\n+            ExprKind::ConstParam { literal, def_id: _ } => {\n                 let literal = ConstantKind::Ty(literal);\n \n-                Constant { user_ty: user_ty, span, literal }\n+                Constant { user_ty: None, span, literal }\n             }\n             ExprKind::ConstBlock { did: def_id, substs } => {\n                 let literal = ConstantKind::Ty(create_uneval_from_def_id(tcx, def_id, ty, substs));"}, {"sha": "f68143dc24f002224a2c391fcf717330844b5fa8", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -70,6 +70,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     local_decl.local_info =\n                         Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: true }));\n                 }\n+                // FIXME Might have to include `ExprKind::ConstParam` here as well\n                 ExprKind::NamedConst { def_id, .. } => {\n                     local_decl.local_info = Some(Box::new(LocalInfo::ConstRef { def_id }));\n                 }"}, {"sha": "a283c46380889c29127ca9ad003c31f176f7fb81", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -876,7 +876,6 @@ impl<'tcx> Cx<'tcx> {\n                         val,\n                         ty: self.typeck_results().node_type(expr.hir_id),\n                     }),\n-                    user_ty: None,\n                     def_id,\n                 }\n             }"}, {"sha": "d26c10ed8f040df50cce668b1fd8a3f383b78f76", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2496b3cf4a370874bcf4272828730a27f650bc3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=e2496b3cf4a370874bcf4272828730a27f650bc3", "patch": "@@ -39,7 +39,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n ) -> Result<(), NotConstEvaluatable> {\n     let tcx = infcx.tcx;\n \n-    if infcx.tcx.features().generic_const_exprs {\n+    if tcx.features().generic_const_exprs {\n         match AbstractConst::new(tcx, uv)? {\n             // We are looking at a generic abstract constant.\n             Some(ct) => {\n@@ -342,22 +342,32 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             fn visit_expr(&mut self, expr: &thir::Expr<'tcx>) {\n                 self.is_poly |= self.expr_is_poly(expr);\n                 if !self.is_poly {\n-                    visit::walk_expr(self, expr)\n+                    match expr.kind {\n+                        thir::ExprKind::Repeat { value, count } => {\n+                            self.visit_expr(&self.thir()[value]);\n+                            self.is_poly |= count.has_param_types_or_consts();\n+                        }\n+                        _ => visit::walk_expr(self, expr),\n+                    }\n                 }\n             }\n \n             #[instrument(skip(self), level = \"debug\")]\n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n                 self.is_poly |= pat.ty.has_param_types_or_consts();\n                 if !self.is_poly {\n-                    visit::walk_pat(self, pat);\n+                    match pat.kind.as_ref() {\n+                        thir::PatKind::Constant { value } => {\n+                            self.is_poly |= value.has_param_types_or_consts();\n+                        }\n+                        thir::PatKind::Range(thir::PatRange { lo, hi, .. }) => {\n+                            self.is_poly |=\n+                                lo.has_param_types_or_consts() | hi.has_param_types_or_consts();\n+                        }\n+                        _ => visit::walk_pat(self, pat),\n+                    }\n                 }\n             }\n-\n-            #[instrument(skip(self), level = \"debug\")]\n-            fn visit_const(&mut self, ct: ty::Const<'tcx>) {\n-                self.is_poly |= ct.has_param_types_or_consts();\n-            }\n         }\n \n         let mut is_poly_vis = IsThirPolymorphic { is_poly: false, thir: body };"}]}