{"sha": "a2cc76ce63c3449d33d4a2261392e452df1d31b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyY2M3NmNlNjNjMzQ0OWQzM2Q0YTIyNjEzOTJlNDUyZGYxZDMxYjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:02:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:03:02Z"}, "message": "make resolver private", "tree": {"sha": "a158a05f4f4e0734e1e65a649f1b3bd9ad622916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a158a05f4f4e0734e1e65a649f1b3bd9ad622916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2cc76ce63c3449d33d4a2261392e452df1d31b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cc76ce63c3449d33d4a2261392e452df1d31b1", "html_url": "https://github.com/rust-lang/rust/commit/a2cc76ce63c3449d33d4a2261392e452df1d31b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2cc76ce63c3449d33d4a2261392e452df1d31b1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "url": "https://api.github.com/repos/rust-lang/rust/commits/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060", "html_url": "https://github.com/rust-lang/rust/commit/62d01dd4dfc8feb52c006b84f9d1a1a7142cc060"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "5d8cf57b6ca4856fc835142aabb6c522c10e3601", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -189,7 +189,7 @@ impl Module {\n         }\n     }\n \n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         let def_map = db.crate_def_map(self.krate);\n         Resolver::default().push_module_scope(def_map, self.module_id)\n     }\n@@ -313,7 +313,7 @@ impl Struct {\n \n     // FIXME move to a more general type\n     /// Builds a resolver for type references inside this struct.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n@@ -373,7 +373,7 @@ impl Enum {\n \n     // FIXME: move to a more general type\n     /// Builds a resolver for type references inside this struct.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self.module(db).resolver(db);\n         // ...and add generic params, if present\n@@ -459,7 +459,7 @@ impl DefWithBody {\n     }\n \n     /// Builds a resolver for code inside this item.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         match *self {\n             DefWithBody::Const(ref c) => c.resolver(db),\n             DefWithBody::Function(ref f) => f.resolver(db),\n@@ -549,7 +549,7 @@ impl Function {\n \n     // FIXME: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self\n             .impl_block(db)\n@@ -602,7 +602,7 @@ impl Const {\n \n     // FIXME: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self\n             .impl_block(db)\n@@ -654,7 +654,7 @@ impl Static {\n     }\n \n     /// Builds a resolver for code inside this item.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         self.module(db).resolver(db)\n     }\n@@ -736,7 +736,7 @@ impl TypeAlias {\n     }\n \n     /// Builds a resolver for the type references in this type alias.\n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         // take the outer scope...\n         let r = self\n             .impl_block(db)"}, {"sha": "23987479210012298a853c6965592062e2eb30a2", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -81,12 +81,16 @@ impl Body {\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n-pub fn resolver_for_expr(body: Arc<Body>, db: &impl HirDatabase, expr_id: ExprId) -> Resolver {\n+pub(crate) fn resolver_for_expr(\n+    body: Arc<Body>,\n+    db: &impl HirDatabase,\n+    expr_id: ExprId,\n+) -> Resolver {\n     let scopes = db.expr_scopes(body.owner);\n     resolver_for_scope(body, db, scopes.scope_for(expr_id))\n }\n \n-pub fn resolver_for_scope(\n+pub(crate) fn resolver_for_scope(\n     body: Arc<Body>,\n     db: &impl HirDatabase,\n     scope_id: Option<scope::ScopeId>,"}, {"sha": "b306874cc109e260a2c1ef4270921335e0061198", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -105,7 +105,7 @@ impl ImplBlock {\n         db.generic_params((*self).into())\n     }\n \n-    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+    pub(crate) fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         let r = self.module().resolver(db);\n         // add generic params, if present\n         let p = self.generic_params(db);"}, {"sha": "5eb2f32bd96174756ff16951da5a6c802137f735", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -51,6 +51,7 @@ use crate::{\n     db::{HirDatabase, DefDatabase},\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n+    resolve::Resolver,\n };\n \n pub use self::{\n@@ -65,7 +66,7 @@ pub use self::{\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n     expr::{ExprScopes, ScopeEntryWithSyntax},\n-    resolve::{Resolver, Resolution},\n+    resolve::Resolution,\n     source_binder::{SourceAnalyzer, PathResolution},\n };\n "}, {"sha": "685f4b8b1609b1cab25a6a35dbd8f3f31eedb0fc", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -9,13 +9,13 @@ use crate::{\n     name::{Name, KnownName},\n     nameres::{PerNs, CrateDefMap, CrateModuleId},\n     generics::GenericParams,\n-    expr::{scope::{ExprScopes, ScopeId}, PatId, Body},\n+    expr::{scope::{ExprScopes, ScopeId}, PatId},\n     impl_block::ImplBlock,\n     path::Path, Trait\n };\n \n #[derive(Debug, Clone, Default)]\n-pub struct Resolver {\n+pub(crate) struct Resolver {\n     scopes: Vec<Scope>,\n }\n \n@@ -117,7 +117,7 @@ pub enum Resolution {\n }\n \n impl Resolver {\n-    pub fn resolve_name(&self, db: &impl HirDatabase, name: &Name) -> PerNs<Resolution> {\n+    pub(crate) fn resolve_name(&self, db: &impl HirDatabase, name: &Name) -> PerNs<Resolution> {\n         let mut resolution = PerNs::none();\n         for scope in self.scopes.iter().rev() {\n             resolution = resolution.or(scope.resolve_name(db, name));\n@@ -154,12 +154,12 @@ impl Resolver {\n \n     /// Returns the fully resolved path if we were able to resolve it.\n     /// otherwise returns `PerNs::none`\n-    pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<Resolution> {\n+    pub(crate) fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<Resolution> {\n         // into_fully_resolved() returns the fully resolved path or PerNs::none() otherwise\n         self.resolve_path_segments(db, path).into_fully_resolved()\n     }\n \n-    pub fn all_names(&self, db: &impl HirDatabase) -> FxHashMap<Name, PerNs<Resolution>> {\n+    pub(crate) fn all_names(&self, db: &impl HirDatabase) -> FxHashMap<Name, PerNs<Resolution>> {\n         let mut names = FxHashMap::default();\n         for scope in self.scopes.iter().rev() {\n             scope.collect_names(db, &mut |name, res| {\n@@ -197,14 +197,6 @@ impl Resolver {\n             _ => None,\n         })\n     }\n-\n-    /// The body from which any `LocalBinding` resolutions in this resolver come.\n-    pub fn body(&self) -> Option<Arc<Body>> {\n-        self.scopes.iter().rev().find_map(|scope| match scope {\n-            Scope::ExprScope(expr_scope) => Some(expr_scope.expr_scopes.body()),\n-            _ => None,\n-        })\n-    }\n }\n \n impl Resolver {"}, {"sha": "bb23246a6afa716109d9414fb37ffec7b501d738", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2cc76ce63c3449d33d4a2261392e452df1d31b1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=a2cc76ce63c3449d33d4a2261392e452df1d31b1", "patch": "@@ -135,7 +135,7 @@ fn def_crate(db: &impl HirDatabase, ty: &Ty) -> Option<Crate> {\n impl Ty {\n     /// Look up the method with the given name, returning the actual autoderefed\n     /// receiver type (but without autoref applied yet).\n-    pub fn lookup_method(\n+    pub(crate) fn lookup_method(\n         self,\n         db: &impl HirDatabase,\n         name: &Name,"}]}