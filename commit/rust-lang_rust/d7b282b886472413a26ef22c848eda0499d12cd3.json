{"sha": "d7b282b886472413a26ef22c848eda0499d12cd3", "node_id": "C_kwDOAAsO6NoAKGQ3YjI4MmI4ODY0NzI0MTNhMjZlZjIyYzg0OGVkYTA0OTlkMTJjZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T05:53:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-10T05:53:59Z"}, "message": "Auto merge of #94059 - b-naber:constantkind-val-transformation, r=lcnr\n\nTreat constant values as mir::ConstantKind::Val\n\nAnother step that is necessary for the introduction of Valtrees: we don't want to treat `ty::Const` instances of kind `ty::ConstKind::Value` as `mir::ConstantKind::Ty` anymore.\n\nr? `@oli-obk`", "tree": {"sha": "b82a65a435ab818b1d884e106c09313c8ec45897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b82a65a435ab818b1d884e106c09313c8ec45897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b282b886472413a26ef22c848eda0499d12cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b282b886472413a26ef22c848eda0499d12cd3", "html_url": "https://github.com/rust-lang/rust/commit/d7b282b886472413a26ef22c848eda0499d12cd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b282b886472413a26ef22c848eda0499d12cd3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ad0ad653d57a5ccecffb08aff3c5564012f133", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ad0ad653d57a5ccecffb08aff3c5564012f133", "html_url": "https://github.com/rust-lang/rust/commit/01ad0ad653d57a5ccecffb08aff3c5564012f133"}, {"sha": "021c3b011ab61829ca515b0c132cac7d7bef1ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/021c3b011ab61829ca515b0c132cac7d7bef1ace", "html_url": "https://github.com/rust-lang/rust/commit/021c3b011ab61829ca515b0c132cac7d7bef1ace"}], "stats": {"total": 131, "additions": 95, "deletions": 36}, "files": [{"sha": "a8a57e6990ffdd221c10094582eb23c8743a3583", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -164,7 +164,7 @@ pub enum StackPopCleanup {\n }\n \n /// State of a local variable including a memoized layout\n-#[derive(Clone, PartialEq, Eq, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, HashStable)]\n pub struct LocalState<'tcx, Tag: Provenance = AllocId> {\n     pub value: LocalValue<Tag>,\n     /// Don't modify if `Some`, this is only used to prevent computing the layout twice\n@@ -714,13 +714,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.size_and_align_of(&mplace.meta, &mplace.layout)\n     }\n \n+    #[instrument(skip(self, body, return_place, return_to_block), level = \"debug\")]\n     pub fn push_stack_frame(\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         body: &'mir mir::Body<'tcx>,\n         return_place: Option<&PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n+        debug!(\"body: {:#?}\", body);\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,\n@@ -824,6 +826,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// `Drop` impls for any locals that have been initialized at this point.\n     /// The cleanup block ends with a special `Resume` terminator, which will\n     /// cause us to continue unwinding.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub(super) fn pop_stack_frame(&mut self, unwinding: bool) -> InterpResult<'tcx> {\n         info!(\n             \"popping stack frame ({})\",\n@@ -876,6 +879,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(());\n         }\n \n+        debug!(\"locals: {:#?}\", frame.locals);\n+\n         // Cleanup: deallocate all locals that are backed by an allocation.\n         for local in &frame.locals {\n             self.deallocate_local(local.value)?;\n@@ -935,6 +940,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn deallocate_local(&mut self, local: LocalValue<M::PointerTag>) -> InterpResult<'tcx> {\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             // All locals have a backing allocation, even if the allocation is empty"}, {"sha": "fa8151a1f3c3df9d0623b910f01d8a28d5f36892", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -359,6 +359,8 @@ pub fn intern_const_alloc_recursive<\n     // pointers, ... So we can't intern them according to their type rules\n \n     let mut todo: Vec<_> = leftover_allocations.iter().cloned().collect();\n+    debug!(?todo);\n+    debug!(\"dead_alloc_map: {:#?}\", ecx.memory.dead_alloc_map);\n     while let Some(alloc_id) = todo.pop() {\n         if let Some((_, mut alloc)) = ecx.memory.alloc_map.remove(&alloc_id) {\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe"}, {"sha": "5fe4672f17e5b2a8daa9f88273d3e10dcd650c51", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -275,6 +275,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         Ok(new_ptr)\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn deallocate(\n         &mut self,\n         ptr: Pointer<Option<M::PointerTag>>,\n@@ -305,6 +306,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             .into());\n         };\n \n+        debug!(?alloc);\n+\n         if alloc.mutability == Mutability::Not {\n             throw_ub_format!(\"deallocating immutable allocation {}\", alloc_id);\n         }"}, {"sha": "39d6b1267a593813a3f33bc50b88432c95a29364", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -2557,7 +2557,14 @@ impl<'tcx> Constant<'tcx> {\n impl<'tcx> From<ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n     fn from(ct: ty::Const<'tcx>) -> Self {\n-        Self::Ty(ct)\n+        match ct.val() {\n+            ty::ConstKind::Value(cv) => {\n+                // FIXME Once valtrees are introduced we need to convert those\n+                // into `ConstValue` instances here\n+                Self::Val(cv, ct.ty())\n+            }\n+            _ => Self::Ty(ct),\n+        }\n     }\n }\n \n@@ -2638,6 +2645,27 @@ impl<'tcx> ConstantKind<'tcx> {\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n         }\n     }\n+\n+    pub fn from_bool(tcx: TyCtxt<'tcx>, v: bool) -> Self {\n+        let cv = ConstValue::from_bool(v);\n+        Self::Val(cv, tcx.types.bool)\n+    }\n+\n+    pub fn from_zero_sized(ty: Ty<'tcx>) -> Self {\n+        let cv = ConstValue::Scalar(Scalar::ZST);\n+        Self::Val(cv, ty)\n+    }\n+\n+    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n+        let ty = tcx.types.usize;\n+        let size = tcx\n+            .layout_of(ty::ParamEnv::empty().and(ty))\n+            .unwrap_or_else(|e| bug!(\"could not compute layout for {:?}: {:?}\", ty, e))\n+            .size;\n+        let cv = ConstValue::Scalar(Scalar::from_uint(n as u128, size));\n+\n+        Self::Val(cv, ty)\n+    }\n }\n \n /// A collection of projections into user types."}, {"sha": "dca9a63120c32f0100852b0982afa25df97e7447", "filename": "compiler/rustc_mir_build/src/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcfg.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -2,7 +2,7 @@\n \n use crate::build::CFG;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n \n impl<'tcx> CFG<'tcx> {\n     crate fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -73,7 +73,7 @@ impl<'tcx> CFG<'tcx> {\n             Rvalue::Use(Operand::Constant(Box::new(Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::zero_sized(tcx, tcx.types.unit).into(),\n+                literal: ConstantKind::from_zero_sized(tcx.types.unit),\n             }))),\n         );\n     }"}, {"sha": "9c7c7203f47de83de2cc5f859d159e190ffdcfb7", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, true).into(),\n+                        literal: ConstantKind::from_bool(this.tcx, true),\n                     },\n                 );\n \n@@ -118,7 +118,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Constant {\n                         span: expr_span,\n                         user_ty: None,\n-                        literal: ty::Const::from_bool(this.tcx, false).into(),\n+                        literal: ConstantKind::from_bool(this.tcx, false),\n                     },\n                 );\n \n@@ -183,8 +183,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         span: expr_span,\n                         user_ty: None,\n                         literal: match op {\n-                            LogicalOp::And => ty::Const::from_bool(this.tcx, false).into(),\n-                            LogicalOp::Or => ty::Const::from_bool(this.tcx, true).into(),\n+                            LogicalOp::And => ConstantKind::from_bool(this.tcx, false),\n+                            LogicalOp::Or => ConstantKind::from_bool(this.tcx, true),\n                         },\n                     },\n                 );"}, {"sha": "3516eca1c1469663a2c7c2b83cde4fc2a75d71f2", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Constant {\n                 span: source_info.span,\n                 user_ty: None,\n-                literal: ty::Const::from_usize(self.tcx, value).into(),\n+                literal: ConstantKind::from_usize(self.tcx, value),\n             },\n         );\n         temp"}, {"sha": "dc11c76e07b237a1c8443a09986ed5f5c488c62a", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -569,6 +569,9 @@ impl<'tcx> Cx<'tcx> {\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n+\n+                // FIXME Do we want to use `from_inline_const` once valtrees\n+                // are introduced? This would create `ValTree`s that will never be used...\n                 let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);\n \n                 ExprKind::ConstBlock { value }"}, {"sha": "ed0ad5601aa400478afdf09db7e7e731ecab7c05", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -334,6 +334,21 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         &mut self,\n         constant: mir::ConstantKind<'tcx>,\n     ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {\n-        constant.try_super_fold_with(self)\n+        let constant_kind = match constant {\n+            mir::ConstantKind::Ty(c) => {\n+                let const_folded = c.try_fold_with(self)?;\n+                match const_folded.val() {\n+                    ty::ConstKind::Value(cv) => {\n+                        // FIXME With Valtrees we need to convert `cv: ValTree`\n+                        // to a `ConstValue` here.\n+                        mir::ConstantKind::Val(cv, const_folded.ty())\n+                    }\n+                    _ => mir::ConstantKind::Ty(const_folded),\n+                }\n+            }\n+            mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n+        };\n+\n+        Ok(constant_kind)\n     }\n }"}, {"sha": "831d73045dd639d01e4d6802f1ba4d38a260cea6", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -46,11 +46,11 @@\n -     bb1: {\n +         discriminant(_4) = 0;            // scope 2 at $DIR/inline-generator.rs:15:5: 15:41\n           _3 = &mut _4;                    // scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n--         _2 = Pin::<&mut impl Generator<bool>>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+-         _2 = Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:14: 9:22\n -                                          // + user_ty: UserType(0)\n--                                          // + literal: Const { ty: fn(&mut impl Generator<bool>) -> Pin<&mut impl Generator<bool>> {Pin::<&mut impl Generator<bool>>::new}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: fn(&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]) -> Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]> {Pin::<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n -     bb2: {\n@@ -62,10 +62,10 @@\n +         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline-generator.rs:9:31: 9:32\n--         _1 = <impl Generator<bool> as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n+-         _1 = <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-generator.rs:9:33: 9:39\n--                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut impl Generator<bool>>, bool) -> GeneratorState<<impl Generator<bool> as Generator<bool>>::Yield, <impl Generator<bool> as Generator<bool>>::Return> {<impl Generator<bool> as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> fn(Pin<&'r mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>, bool) -> GeneratorState<<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Yield, <[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::Return> {<[generator@$DIR/inline-generator.rs:15:5: 15:41] as Generator<bool>>::resume}, val: Value(Scalar(<ZST>)) }\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:9:14: 9:46"}, {"sha": "ea6b91cba9e583e47097c4b4fe7db7452e3b783b", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -25,10 +25,10 @@\n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   "}, {"sha": "ba9da7678e7233a520e20d098ee7159654f0ff54", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -25,10 +25,12 @@\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n           nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n++         _2 = <fn() {foo} as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as FnOnce<()>>::Output {<impl Fn() as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n++                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r fn() {foo}, ()) -> <fn() {foo} as FnOnce<()>>::Output {<fn() {foo} as Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "9f235248ca59f9a2c61112c005979684576aa0a5", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -42,7 +42,7 @@ fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) ->\n     let mut _0: bool;                    // return place in scope 0 at $DIR/named-lifetimes-basic.rs:12:81: 12:85\n \n     bb0: {\n-        _0 = const Const(Value(Scalar(0x01)): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n+        _0 = const ConstValue(Scalar(0x01): bool); // bb0[0]: scope 0 at $DIR/named-lifetimes-basic.rs:12:88: 12:92\n         return;                          // bb0[1]: scope 0 at $DIR/named-lifetimes-basic.rs:12:94: 12:94\n     }\n }"}, {"sha": "ed94a1ecf006252f79da61898d048595d549c779", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -45,11 +45,11 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n-        _1 = [const Const(Value(Scalar(0x00000001)): usize), const Const(Value(Scalar(0x00000002)): usize), const Const(Value(Scalar(0x00000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n+        _1 = [const ConstValue(Scalar(0x00000001): usize), const ConstValue(Scalar(0x00000002): usize), const ConstValue(Scalar(0x00000003): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n         FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n-        _3 = const Const(Value(Scalar(0x00000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n+        _3 = const ConstValue(Scalar(0x00000000): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n@@ -62,15 +62,15 @@ fn main() -> () {\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -79,21 +79,21 @@ fn main() -> () {\n     bb3: {\n         StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x00000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n         StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n         goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "95997b2070172d955de39b41256af0eec0df2c76", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -45,11 +45,11 @@ fn main() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n-        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n+        _1 = [const ConstValue(Scalar(0x0000000000000001): usize), const ConstValue(Scalar(0x0000000000000002): usize), const ConstValue(Scalar(0x0000000000000003): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n         FakeRead(ForLet(None), _1);      // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n         StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n-        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n+        _3 = const ConstValue(Scalar(0x0000000000000000): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb1, unwind: bb7]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n@@ -62,15 +62,15 @@ fn main() -> () {\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n         FakeRead(ForLet(None), _6);      // bb1[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n         StorageLive(_7);                 // bb1[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const ConstValue(Scalar(0x01): bool); // bb1[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n         switchInt(move _7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb2]; // bb1[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n     }\n \n     bb2: {\n         StorageLive(_8);                 // bb2[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n         StorageLive(_9);                 // bb2[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb2[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n-        _8 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        _8 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(move _9) -> [return: bb3, unwind: bb7]; // bb2[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -79,21 +79,21 @@ fn main() -> () {\n     bb3: {\n         StorageDead(_9);                 // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n         StorageDead(_8);                 // bb3[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb3[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n         goto -> bb6;                     // bb3[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-        _10 = Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = ConstValue(Scalar(<ZST>): fn(usize) -> bool {use_x})(const ConstValue(Scalar(0x0000000000000016): usize)) -> [return: bb5, unwind: bb7]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n         StorageDead(_10);                // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n+        _0 = const ConstValue(Scalar(<ZST>): ()); // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n         goto -> bb6;                     // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n "}, {"sha": "2f1858d39b3c6743218b3cd606bdce3751047722", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-//~^ ERROR cycle detected when normalizing `<() as Tr>::A`\n+//~^ ERROR cycle detected when normalizing `<() as Tr>::A` [E0391]\n \n // Cyclic assoc. const defaults don't error unless *used*\n trait Tr {"}, {"sha": "e73e54ff5f1b37d667fe486e3deb60312f4721e9", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b282b886472413a26ef22c848eda0499d12cd3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=d7b282b886472413a26ef22c848eda0499d12cd3", "patch": "@@ -1,5 +1,5 @@\n-//~ERROR constructed but no error reported\n // compile-flags: -Ztreat-err-as-bug=2\n+//~^ ERROR 1:1: 1:1: ty::ConstKind::Error constructed but no error reported\n // build-fail\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1"}]}