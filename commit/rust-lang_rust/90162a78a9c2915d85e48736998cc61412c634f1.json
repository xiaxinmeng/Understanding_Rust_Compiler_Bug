{"sha": "90162a78a9c2915d85e48736998cc61412c634f1", "node_id": "C_kwDOAAsO6NoAKDkwMTYyYTc4YTljMjkxNWQ4NWU0ODczNjk5OGNjNjE0MTJjNjM0ZjE", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2023-01-29T11:20:13Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2023-02-24T14:30:14Z"}, "message": "remove code duplications", "tree": {"sha": "930584659527883ad3a805ae5e46e30247075937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930584659527883ad3a805ae5e46e30247075937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90162a78a9c2915d85e48736998cc61412c634f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90162a78a9c2915d85e48736998cc61412c634f1", "html_url": "https://github.com/rust-lang/rust/commit/90162a78a9c2915d85e48736998cc61412c634f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90162a78a9c2915d85e48736998cc61412c634f1/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "html_url": "https://github.com/rust-lang/rust/commit/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa"}], "stats": {"total": 522, "additions": 129, "deletions": 393}, "files": [{"sha": "258919d53a4ec9725a96889407f060a9fffbcc65", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -9,7 +9,7 @@ use crate::fs;\n use crate::io;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-#[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\")))]\n+#[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\", target_os = \"hermit\")))]\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -89,7 +89,7 @@ impl OwnedFd {\n impl BorrowedFd<'_> {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file\n     /// description as the existing `BorrowedFd` instance.\n-    #[cfg(not(target_arch = \"wasm32\"))]\n+    #[cfg(not(any(target_arch = \"wasm32\", target_os = \"hermit\")))]\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {\n         // We want to atomically duplicate this file descriptor and set the\n@@ -112,7 +112,7 @@ impl BorrowedFd<'_> {\n \n     /// Creates a new `OwnedFd` instance that shares the same underlying file\n     /// description as the existing `BorrowedFd` instance.\n-    #[cfg(target_arch = \"wasm32\")]\n+    #[cfg(any(target_arch = \"wasm32\", target_os = \"hermit\"))]\n     #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n     pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {\n         Err(crate::io::const_io_error!(\n@@ -174,7 +174,10 @@ impl Drop for OwnedFd {\n             // the file descriptor was closed or not, and if we retried (for\n             // something like EINTR), we might close another valid file descriptor\n             // opened after we closed ours.\n+            #[cfg(not(target_os = \"hermit\"))]\n             let _ = libc::close(self.fd);\n+            #[cfg(target_os = \"hermit\")]\n+            let _ = hermit_abi::close(self.fd);\n         }\n     }\n }"}, {"sha": "84c2a65bd9150889628038235be94079907121ba", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -4,6 +4,9 @@\n \n use crate::fs;\n use crate::io;\n+#[cfg(target_os = \"hermit\")]\n+use crate::os::hermit::io::OwnedFd;\n+#[cfg(not(target_os = \"hermit\"))]\n use crate::os::raw;\n #[cfg(all(doc, not(target_arch = \"wasm32\")))]\n use crate::os::unix::io::AsFd;\n@@ -12,11 +15,20 @@ use crate::os::unix::io::OwnedFd;\n #[cfg(target_os = \"wasi\")]\n use crate::os::wasi::io::OwnedFd;\n use crate::sys_common::{AsInner, IntoInner};\n+#[cfg(target_os = \"hermit\")]\n+use hermit_abi::{STDERR_FILENO, STDIN_FILENO, STDOUT_FILENO};\n+#[cfg(not(target_os = \"hermit\"))]\n+use libc::{STDERR_FILENO, STDIN_FILENO, STDOUT_FILENO};\n \n /// Raw file descriptors.\n #[rustc_allowed_through_unstable_modules]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(not(target_os = \"hermit\"))]\n pub type RawFd = raw::c_int;\n+#[rustc_allowed_through_unstable_modules]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(target_os = \"hermit\")]\n+pub type RawFd = i32;\n \n /// A trait to extract the raw file descriptor from an underlying object.\n ///\n@@ -177,47 +189,47 @@ impl IntoRawFd for fs::File {\n impl AsRawFd for io::Stdin {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n+        STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdout {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n+        STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stderr {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n+        STDERR_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdinLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDIN_FILENO\n+        STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdoutLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDOUT_FILENO\n+        STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StderrLock<'a> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n-        libc::STDERR_FILENO\n+        STDERR_FILENO\n     }\n }\n "}, {"sha": "524dfae0d63aeacac38da4f2c26b927eb7553962", "filename": "library/std/src/os/hermit/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fmod.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -1,6 +1,9 @@\n #![stable(feature = \"os_fd\", since = \"1.66.0\")]\n \n+mod net;\n+#[path = \"../../fd/owned.rs\"]\n mod owned;\n+#[path = \"../../fd/raw.rs\"]\n mod raw;\n \n // Export the types and traits for the public API."}, {"sha": "8f3802d7873dc485bcdad6c6cbc1f4ce641f4c23", "filename": "library/std/src/os/hermit/io/net.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fnet.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -0,0 +1,46 @@\n+use crate::os::hermit::io::OwnedFd;\n+use crate::os::hermit::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n+use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n+use crate::{net, sys};\n+\n+macro_rules! impl_as_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl AsRawFd for net::$t {\n+            #[inline]\n+            fn as_raw_fd(&self) -> RawFd {\n+                self.as_inner().socket().as_raw_fd()\n+            }\n+        }\n+    )*};\n+}\n+impl_as_raw_fd! { TcpStream TcpListener UdpSocket }\n+\n+macro_rules! impl_from_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+        impl FromRawFd for net::$t {\n+            #[inline]\n+            unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n+                unsafe {\n+                    let socket = sys::net::Socket::from_inner(FromInner::from_inner(OwnedFd::from_raw_fd(fd)));\n+                    net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n+                }\n+            }\n+        }\n+    )*};\n+}\n+impl_from_raw_fd! { TcpStream TcpListener UdpSocket }\n+\n+macro_rules! impl_into_raw_fd {\n+    ($($t:ident)*) => {$(\n+        #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+        impl IntoRawFd for net::$t {\n+            #[inline]\n+            fn into_raw_fd(self) -> RawFd {\n+                self.into_inner().into_socket().into_inner().into_inner().into_raw_fd()\n+            }\n+        }\n+    )*};\n+}\n+impl_into_raw_fd! { TcpStream TcpListener UdpSocket }"}, {"sha": "4add29b13745032e16b745fa9d785d014698601f", "filename": "library/std/src/os/hermit/io/owned.rs", "status": "removed", "additions": 0, "deletions": 268, "changes": 268, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fowned.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,268 +0,0 @@\n-use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n-use crate::fmt;\n-use crate::marker::PhantomData;\n-use crate::mem::forget;\n-use crate::os::hermit::abi;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n-\n-/// A borrowed file descriptor.\n-///\n-/// This has a lifetime parameter to tie it to the lifetime of something that\n-/// owns the file descriptor.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as an argument, it is not captured or consumed, and it never has the\n-/// value `-1`.\n-///\n-/// This type's `.to_owned()` implementation returns another `BorrowedFd`\n-/// rather than an `OwnedFd`. It just makes a trivial copy of the raw file\n-/// descriptor, which is then borrowed under the same lifetime.\n-#[derive(Copy, Clone)]\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[rustc_nonnull_optimization_guaranteed]\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-pub struct BorrowedFd<'fd> {\n-    fd: RawFd,\n-    _phantom: PhantomData<&'fd OwnedFd>,\n-}\n-\n-/// An owned file descriptor.\n-///\n-/// This closes the file descriptor on drop.\n-///\n-/// This uses `repr(transparent)` and has the representation of a host file\n-/// descriptor, so it can be used in FFI in places where a file descriptor is\n-/// passed as a consumed argument or returned as an owned value, and it never\n-/// has the value `-1`.\n-#[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(0)]\n-// libstd/os/raw/mod.rs assures me that every libstd-supported platform has a\n-// 32-bit c_int. Below is -2, in two's complement, but that only works out\n-// because c_int is 32 bits.\n-#[rustc_layout_scalar_valid_range_end(0xFF_FF_FF_FE)]\n-#[rustc_nonnull_optimization_guaranteed]\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-pub struct OwnedFd {\n-    fd: RawFd,\n-}\n-\n-impl BorrowedFd<'_> {\n-    /// Return a `BorrowedFd` holding the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must remain open for the duration of\n-    /// the returned `BorrowedFd`, and it must not have the value `-1`.\n-    #[inline]\n-    #[rustc_const_stable(feature = \"io_safety\", since = \"1.63.0\")]\n-    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {\n-        assert!(fd != u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd, _phantom: PhantomData } }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl Drop for OwnedFd {\n-    #[inline]\n-    fn drop(&mut self) {\n-        unsafe {\n-            // Note that errors are ignored when closing a file descriptor. The\n-            // reason for this is that if an error occurs we don't actually know if\n-            // the file descriptor was closed or not, and if we retried (for\n-            // something like EINTR), we might close another valid file descriptor\n-            // opened after we closed ours.\n-            let _ = abi::close(self.fd);\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl fmt::Debug for BorrowedFd<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"BorrowedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl fmt::Debug for OwnedFd {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"OwnedFd\").field(\"fd\", &self.fd).finish()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsRawFd for BorrowedFd<'_> {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsRawFd for OwnedFd {\n-    #[inline]\n-    fn as_raw_fd(&self) -> RawFd {\n-        self.fd\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl IntoRawFd for OwnedFd {\n-    #[inline]\n-    fn into_raw_fd(self) -> RawFd {\n-        let fd = self.fd;\n-        forget(self);\n-        fd\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl FromRawFd for OwnedFd {\n-    /// Constructs a new instance of `Self` from the given raw file descriptor.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `fd` must be open and suitable for assuming\n-    /// ownership. The resource must not require any cleanup other than `close`.\n-    #[inline]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, u32::MAX as RawFd);\n-        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        unsafe { Self { fd } }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<crate::net::TcpStream> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_stream: crate::net::TcpStream) -> OwnedFd {\n-        tcp_stream.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<OwnedFd> for crate::net::TcpStream {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<crate::net::TcpListener> for OwnedFd {\n-    #[inline]\n-    fn from(tcp_listener: crate::net::TcpListener) -> OwnedFd {\n-        tcp_listener.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<OwnedFd> for crate::net::TcpListener {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<crate::net::UdpSocket> for OwnedFd {\n-    #[inline]\n-    fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {\n-        udp_socket.into_inner().into_socket().into_inner().into_inner().into()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl From<OwnedFd> for crate::net::UdpSocket {\n-    #[inline]\n-    fn from(owned_fd: OwnedFd) -> Self {\n-        Self::from_inner(FromInner::from_inner(FromInner::from_inner(FromInner::from_inner(\n-            owned_fd,\n-        ))))\n-    }\n-}\n-\n-/// A trait to borrow the file descriptor from an underlying object.\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-pub trait AsFd {\n-    /// Borrows the file descriptor.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust,no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// # #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// # use std::os::fd::{AsFd, BorrowedFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// # #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// let borrowed_fd: BorrowedFd<'_> = f.as_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-    fn as_fd(&self) -> BorrowedFd<'_>;\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<T: AsFd> AsFd for &T {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        T::as_fd(self)\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<T: AsFd> AsFd for &mut T {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        T::as_fd(self)\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for OwnedFd {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // Safety: `OwnedFd` and `BorrowedFd` have the same validity\n-        // invariants, and the `BorrowdFd` is bounded by the lifetime\n-        // of `&self`.\n-        unsafe { BorrowedFd::borrow_raw(self.as_raw_fd()) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::UdpSocket {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::TcpListener {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for crate::net::TcpStream {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        self.as_inner().socket().as_fd()\n-    }\n-}"}, {"sha": "cdec90b4b87cd3a86c8e06d7257ecd7da745f5cf", "filename": "library/std/src/os/hermit/io/raw.rs", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fio%2Fraw.rs?ref=b5fb4f3d9b1b308d59cab24ef2f9bf23dad948aa", "patch": "@@ -1,115 +0,0 @@\n-/// Raw file descriptors.\n-#[rustc_allowed_through_unstable_modules]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type RawFd = i32;\n-\n-/// A trait to extract the raw file descriptor from an underlying object.\n-///\n-/// This is only available on unix and WASI platforms and must be imported in\n-/// order to call the method. Windows platforms have a corresponding\n-/// `AsRawHandle` and `AsRawSocket` set of traits.\n-#[rustc_allowed_through_unstable_modules]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait AsRawFd {\n-    /// Extracts the raw file descriptor.\n-    ///\n-    /// This function is typically used to **borrow** an owned file descriptor.\n-    /// When used in this way, this method does **not** pass ownership of the\n-    /// raw file descriptor to the caller, and the file descriptor is only\n-    /// guaranteed to be valid while the original object has not yet been\n-    /// destroyed.\n-    ///\n-    /// However, borrowing is not strictly required. See [`AsFd::as_fd`]\n-    /// for an API which strictly borrows a file descriptor.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// use std::os::fd::{AsRawFd, RawFd};\n-    ///\n-    /// let mut f = File::open(\"foo.txt\")?;\n-    /// // Note that `raw_fd` is only valid as long as `f` exists.\n-    /// #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// let raw_fd: RawFd = f.as_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_raw_fd(&self) -> RawFd;\n-}\n-\n-/// A trait to express the ability to consume an object and acquire ownership of\n-/// its raw file descriptor.\n-#[rustc_allowed_through_unstable_modules]\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-pub trait IntoRawFd {\n-    /// Consumes this object, returning the raw underlying file descriptor.\n-    ///\n-    /// This function is typically used to **transfer ownership** of the underlying\n-    /// file descriptor to the caller. When used in this way, callers are then the unique\n-    /// owners of the file descriptor and must close it once it's no longer needed.\n-    ///\n-    /// However, transferring ownership is not strictly required. Use a\n-    /// [`Into<OwnedFd>::into`] implementation for an API which strictly\n-    /// transfers ownership.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// use std::os::fd::{IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-    fn into_raw_fd(self) -> RawFd;\n-}\n-\n-/// A trait to express the ability to construct an object from a raw file\n-/// descriptor.\n-#[rustc_allowed_through_unstable_modules]\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-pub trait FromRawFd {\n-    /// Constructs a new instance of `Self` from the given raw file\n-    /// descriptor.\n-    ///\n-    /// This function is typically used to **consume ownership** of the\n-    /// specified file descriptor. When used in this way, the returned object\n-    /// will take responsibility for closing it when the object goes out of\n-    /// scope.\n-    ///\n-    /// However, consuming ownership is not strictly required. Use a\n-    /// [`From<OwnedFd>::from`] implementation for an API which strictly\n-    /// consumes ownership.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The `fd` passed in must be a valid and open file descriptor.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```no_run\n-    /// use std::fs::File;\n-    /// # use std::io;\n-    /// #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// use std::os::fd::{FromRawFd, IntoRawFd, RawFd};\n-    ///\n-    /// let f = File::open(\"foo.txt\")?;\n-    /// # #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// let raw_fd: RawFd = f.into_raw_fd();\n-    /// // SAFETY: no other functions should call `from_raw_fd`, so there\n-    /// // is only one owner for the file descriptor.\n-    /// # #[cfg(any(unix, target_os = \"wasi\"))]\n-    /// let f = unsafe { File::from_raw_fd(raw_fd) };\n-    /// # Ok::<(), io::Error>(())\n-    /// ```\n-    #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-    unsafe fn from_raw_fd(fd: RawFd) -> Self;\n-}"}, {"sha": "3a2cdd301ea45c16eabb6916d28e868840f53d45", "filename": "library/std/src/sys/hermit/fd.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffd.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -92,3 +92,9 @@ impl AsRawFd for FileDesc {\n         self.fd.as_raw_fd()\n     }\n }\n+\n+impl IntoRawFd for FileDesc {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.fd.into_raw_fd()\n+    }\n+}"}, {"sha": "c966f217757274223b8c4153016362a4966ef1cf", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90162a78a9c2915d85e48736998cc61412c634f1/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=90162a78a9c2915d85e48736998cc61412c634f1", "patch": "@@ -3,7 +3,7 @@ use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::io::{self, Error, ErrorKind};\n use crate::io::{BorrowedCursor, IoSlice, IoSliceMut, SeekFrom};\n-use crate::os::hermit::io::FromRawFd;\n+use crate::os::hermit::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n use crate::path::{Path, PathBuf};\n use crate::sys::common::small_c_string::run_path_with_cstr;\n use crate::sys::cvt;\n@@ -13,6 +13,7 @@ use crate::sys::hermit::abi::{\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n+use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n pub use crate::sys_common::fs::{copy, try_exists};\n //pub use crate::sys_common::fs::remove_dir_all;\n@@ -365,6 +366,54 @@ impl DirBuilder {\n     }\n }\n \n+impl AsInner<FileDesc> for File {\n+    fn as_inner(&self) -> &FileDesc {\n+        &self.0\n+    }\n+}\n+\n+impl AsInnerMut<FileDesc> for File {\n+    fn as_inner_mut(&mut self) -> &mut FileDesc {\n+        &mut self.0\n+    }\n+}\n+\n+impl IntoInner<FileDesc> for File {\n+    fn into_inner(self) -> FileDesc {\n+        self.0\n+    }\n+}\n+\n+impl FromInner<FileDesc> for File {\n+    fn from_inner(file_desc: FileDesc) -> Self {\n+        Self(file_desc)\n+    }\n+}\n+\n+impl AsFd for File {\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        self.0.as_fd()\n+    }\n+}\n+\n+impl AsRawFd for File {\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.0.as_raw_fd()\n+    }\n+}\n+\n+impl IntoRawFd for File {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.0.into_raw_fd()\n+    }\n+}\n+\n+impl FromRawFd for File {\n+    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {\n+        Self(FromRawFd::from_raw_fd(raw_fd))\n+    }\n+}\n+\n pub fn readdir(_p: &Path) -> io::Result<ReadDir> {\n     unsupported()\n }"}]}