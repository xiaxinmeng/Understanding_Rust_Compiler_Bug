{"sha": "1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOGUxZDhhZWE0OTVlYzIyZmEzM2NlZmNmYWNiY2I2YmEzYmFkMWQ=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-26T16:11:23Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-29T16:17:46Z"}, "message": "remove ClosureSubsts with SubstsRef", "tree": {"sha": "7604f2e062c3cb245b9ea178e90e60be1f087ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7604f2e062c3cb245b9ea178e90e60be1f087ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "html_url": "https://github.com/rust-lang/rust/commit/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab060f4da1eeb302953b76d35278679bfeb76b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab060f4da1eeb302953b76d35278679bfeb76b0", "html_url": "https://github.com/rust-lang/rust/commit/eab060f4da1eeb302953b76d35278679bfeb76b0"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "8cc7dbb3c5c9163d6162791d88ddb8e78b8a2b20", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -896,7 +896,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                         }\n                     }));\n \n-                self.tcx.mk_closure(def_id, ty::ClosureSubsts { substs })\n+                self.tcx.mk_closure(def_id, substs)\n             }\n \n             ty::Generator(def_id, substs, movability) => {"}, {"sha": "522c0e55b8594d10b1472e4ddf6e629b2969cbdc", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -745,7 +745,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     // During upvar inference we may not know the\n                     // closure kind, just use the LATTICE_BOTTOM value.\n                     Some(infcx) =>\n-                        infcx.closure_kind(closure_def_id, ty::ClosureSubsts::from_ref(closure_substs))\n+                        infcx.closure_kind(closure_def_id,\n+                            ty::ClosureSubsts::from_ref(closure_substs))\n                              .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>"}, {"sha": "44829f670faf924df8cdd0a0b5c690fec6f962ed", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> Rvalue<'tcx> {\n                         tcx.type_of(def.did).subst(tcx, substs)\n                     }\n                     AggregateKind::Closure(did, substs) => {\n-                        tcx.mk_closure(did, substs)\n+                        tcx.mk_closure(did, &substs.substs)\n                     }\n                     AggregateKind::Generator(did, substs, movability) => {\n                         tcx.mk_generator(did, substs, movability)"}, {"sha": "3450f3fc86592673fcc72c62e381cad2a51573f0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -2051,7 +2051,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     \"assemble_unboxed_candidates: kind={:?} obligation={:?}\",\n                     kind, obligation\n                 );\n-                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n+                match self.infcx.closure_kind(closure_def_id,\n+                    ty::ClosureSubsts::from_ref(closure_substs)) {\n                     Some(closure_kind) => {\n                         debug!(\n                             \"assemble_unboxed_candidates: closure_kind = {:?}\",\n@@ -3375,7 +3376,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::Predicate::ClosureKind(closure_def_id, ty::ClosureSubsts::from_ref(substs.clone()), kind),\n+                ty::Predicate::ClosureKind(closure_def_id,\n+                    ty::ClosureSubsts::from_ref(substs.clone()), kind),\n             ));\n         }\n \n@@ -3876,7 +3878,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n             obligation, closure_def_id, substs,\n         );\n-        let closure_type = self.infcx.closure_sig(closure_def_id, substs);\n+        let closure_type = self.infcx.closure_sig(closure_def_id,\n+            ty::ClosureSubsts::from_ref(substs));\n \n         debug!(\n             \"closure_trait_ref_unnormalized: closure_type = {:?}\","}, {"sha": "05042ccf9a1d639b07c78abd7e9c373d4ad74a1c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     ) -> impl Iterator<Item = Ty<'a>> + 'a {\n         let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n         upvar_kinds.iter().map(|t| {\n-            if let UnpackedKind::Type(ty) = t.unpack() {\n+            if let GenericArgKind::Type(ty) = t.unpack() {\n                 ty\n             } else {\n                 bug!(\"upvar should be type\")"}, {"sha": "30d519c8733cc50f56da937211ad95e1946700c3", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -615,7 +615,8 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             };\n \n             let (def_id, upvar_substs) = match closure_layout.ty.kind {\n-                ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+                ty::Closure(def_id, substs) => (def_id,\n+                    UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs))),\n                 ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n                 _ => bug!(\"upvar debuginfo with non-closure arg0 type `{}`\", closure_layout.ty)\n             };"}, {"sha": "9cc21a28b2737c5aaf9d18e64aa707974a587d58", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -201,7 +201,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         match operand.layout.ty.kind {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = Instance::resolve_closure(\n-                                    bx.cx().tcx(), def_id, substs, ty::ClosureKind::FnOnce);\n+                                    bx.cx().tcx(), def_id,\n+                                    rustc::ty::ClosureSubsts::from_ref(substs),\n+                                    ty::ClosureKind::FnOnce);\n                                 OperandValue::Immediate(bx.cx().get_fn(instance))\n                             }\n                             _ => {"}, {"sha": "5bcb3b4ceb3ba33f06d3bc0331e52fad0fe4e3a8", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -224,7 +224,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::Opaque(def_id, substs) |\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n-            ty::Closure(def_id, ty::ClosureSubsts { substs }) |\n+            ty::Closure(def_id, substs) |\n             ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self.print_def_path(def_id, substs)\n             }"}, {"sha": "2ad699d7c6f08808ab46a3f060940556ca5e1d95", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -414,7 +414,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Opaque(def_id, substs) |\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n-            ty::Closure(def_id, ty::ClosureSubsts { substs }) |\n+            ty::Closure(def_id, substs) |\n             ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n             }"}, {"sha": "80ed90ede4dd63924556afe565cb4867d14d5e99", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -509,7 +509,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     .replace_free_regions_with_nll_infer_vars(FR, &defining_ty);\n \n                 match defining_ty.kind {\n-                    ty::Closure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n+                    ty::Closure(def_id, substs) => DefiningTy::Closure(def_id,\n+                        rustc::ty::ClosureSubsts::from_ref(substs)),\n                     ty::Generator(def_id, substs, movability) => {\n                         DefiningTy::Generator(def_id, substs, movability)\n                     }\n@@ -584,7 +585,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 assert_eq!(self.mir_def_id, def_id);\n                 let closure_sig = substs.closure_sig_ty(def_id, tcx).fn_sig(tcx);\n                 let inputs_and_output = closure_sig.inputs_and_output();\n-                let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n+                let closure_ty = tcx.closure_env_ty(def_id, substs.substs).unwrap();\n                 ty::Binder::fuse(\n                     closure_ty,\n                     inputs_and_output,"}, {"sha": "e4d26bda40f71fac33235c826601551ae6d43349", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -506,7 +506,8 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n         hir::ExprKind::Closure(..) => {\n             let closure_ty = cx.tables().expr_ty(expr);\n             let (def_id, substs, movability) = match closure_ty.kind {\n-                ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),\n+                ty::Closure(def_id, substs) => (def_id,\n+                    UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs)), None),\n                 ty::Generator(def_id, substs, movability) => {\n                     (def_id, UpvarSubsts::Generator(substs), Some(movability))\n                 }\n@@ -1002,7 +1003,8 @@ fn convert_var(\n             let region = cx.tcx.mk_region(region);\n \n             let self_expr = if let ty::Closure(_, closure_substs) = closure_ty.kind {\n-                match cx.infcx.closure_kind(closure_def_id, closure_substs).unwrap() {\n+                match cx.infcx.closure_kind(closure_def_id,\n+                    rustc::ty::ClosureSubsts::from_ref(closure_substs)).unwrap() {\n                     ty::ClosureKind::Fn => {\n                         let ref_closure_ty = cx.tcx.mk_ref(region,\n                                                            ty::TypeAndMut {\n@@ -1011,7 +1013,7 @@ fn convert_var(\n                                                            });\n                         Expr {\n                             ty: closure_ty,\n-                            temp_lifetime: temp_lifetime,\n+                            temp_lifetime,\n                             span: expr.span,\n                             kind: ExprKind::Deref {\n                                 arg: Expr {"}, {"sha": "943054cc6964d06c7fff9ebc8e525dd4683ddb85", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -75,7 +75,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,\n-                            substs,\n+                            rustc::ty::ClosureSubsts::from_ref(substs),\n                             ty::ClosureKind::FnOnce,\n                         );\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));"}, {"sha": "dc3b7694c35c9b3800f588fab44a00d8da7ec210", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::Closure(def_id, ty::ClosureSubsts { substs })\n+            | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, ty::GeneratorSubsts { substs }, _)\n             => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "21aea5593ee4bebabc67a9116a7118afe0ad0ba0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -581,7 +581,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 match source_ty.kind {\n                     ty::Closure(def_id, substs) => {\n                         let instance = Instance::resolve_closure(\n-                            self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n+                            self.tcx, def_id,\n+                            rustc::ty::ClosureSubsts::from_ref(substs), ty::ClosureKind::FnOnce);\n                         if should_monomorphize_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance));\n                         }"}, {"sha": "91ca6415bdcb94b84e0d9307ebbbb0ce6aef6f51", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -69,9 +69,7 @@ crate fn fn_def(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n }\n \n crate fn closure(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n-    tcx.mk_closure(def_id, ty::ClosureSubsts {\n-        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n-    })\n+    tcx.mk_closure(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id))\n }\n \n crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {"}, {"sha": "3a16926872070e265e06f914012a879c8228de31", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -103,6 +103,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check whether this is a call to a closure where we\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n+                let substs = rustc::ty::ClosureSubsts::from_ref(substs);\n                 if self.closure_kind(def_id, substs).is_none() {\n                     let closure_ty = self.closure_sig(def_id, substs);\n                     let fn_sig = self"}, {"sha": "09dcce003fe27c604fdb9c02ae4953b9a734c07f", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -132,7 +132,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.mk_generator(expr_def_id, substs, movability);\n         }\n \n-        let substs = ty::ClosureSubsts { substs };\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n         debug!("}, {"sha": "c10279022bdfddf5fb6d99ad869185d9df09d96a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -237,7 +237,8 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // Non-capturing closures are coercible to\n                 // function pointers or unsafe function pointers.\n                 // It cannot convert closures that require unsafe.\n-                self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n+                self.coerce_closure_to_fn(a, def_id_a,\n+                    rustc::ty::ClosureSubsts::from_ref(substs_a), b)\n             }\n             _ => {\n                 // Otherwise, just use unification rules."}, {"sha": "5b7c5c04e446aea547a5cf9ff862d3e3487dac51", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -96,7 +96,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Extract the type of the closure.\n         let ty = self.node_ty(closure_hir_id);\n         let (closure_def_id, substs) = match ty.kind {\n-            ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n+            ty::Closure(def_id, substs) => (def_id,\n+                UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs))),\n             ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n             ty::Error => {\n                 // #51714: skip analysis when we have already encountered type errors"}, {"sha": "1690ae7635f05fb15d80ec6120937ff44667fec1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "patch": "@@ -1362,10 +1362,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 return Some(tcx.typeck_tables_of(def_id).node_type(hir_id));\n             }\n \n-            let substs = ty::ClosureSubsts {\n-                substs: InternalSubsts::identity_for_item(tcx, def_id),\n-            };\n-\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n             tcx.mk_closure(def_id, substs)\n         }\n "}]}