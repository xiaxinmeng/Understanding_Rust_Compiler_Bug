{"sha": "fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZmI0MmU2YjFmMGRkMzAyMmQzM2UyMzVhNDIyOTA2MGQyYjJkMWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-15T23:12:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-15T23:16:51Z"}, "message": "Merge the stage1,2,3.mk files into a common definition in stageN.mk, more rearrangement of host/target libs.", "tree": {"sha": "98b645c7aece5142f8df3e2a0704208ac48a380d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b645c7aece5142f8df3e2a0704208ac48a380d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "html_url": "https://github.com/rust-lang/rust/commit/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4265209a60ebb6227a6fff63c906e34f7210e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4265209a60ebb6227a6fff63c906e34f7210e49", "html_url": "https://github.com/rust-lang/rust/commit/c4265209a60ebb6227a6fff63c906e34f7210e49"}], "stats": {"total": 363, "additions": 149, "deletions": 214}, "files": [{"sha": "54a86f4c4426646cd57c552f4f07187bde3eaf22", "filename": "Makefile.in", "status": "modified", "additions": 29, "deletions": 63, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "patch": "@@ -108,19 +108,6 @@ X := $(CFG_EXE_SUFFIX)\n # Look in doc and src dirs.\n VPATH := $(S)doc $(S)src\n \n-# Compilers we build, we now know how to run.\n-STAGE0 := $(Q)$(call CFG_RUN_TARG,stage0,stage0,\\\n-                stage0/rustc$(X) $(CFG_RUSTC_FLAGS))\n-STAGE1 := $(Q)$(call CFG_RUN_TARG,stage1,stage0, \\\n-                $(CFG_VALGRIND_COMPILE) stage1/rustc$(X) \\\n-                $(CFG_RUSTC_FLAGS))\n-STAGE2 := $(Q)$(call CFG_RUN_TARG,stage2,stage1, \\\n-                $(CFG_VALGRIND_COMPILE) stage2/rustc$(X) \\\n-                $(CFG_RUSTC_FLAGS))\n-STAGE3 := $(Q)$(call CFG_RUN_TARG,stage3,stage2, \\\n-                $(CFG_VALGRIND_COMPILE) stage3/rustc$(X) \\\n-                $(CFG_RUSTC_FLAGS))\n-\n # \"Source\" files we generate in builddir along the way.\n GENERATED :=\n \n@@ -147,19 +134,6 @@ COMPILER_CRATE := $(S)src/comp/rustc.rc\n COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n                                 rustc.rc *.rs */*.rs */*/*.rs))\n \n-######################################################################\n-# Main target dependency variables\n-######################################################################\n-\n-LREQ := rt/$(CFG_RUNTIME) rustllvm/$(CFG_RUSTLLVM)\n-SREQ0 := stage0/rustc$(X) $(LREQ) rt/main.o stage0/lib/glue.o \\\n-         stage0/lib/$(CFG_STDLIB)\n-SREQ1 := stage1/rustc$(X) $(LREQ) rt/main.o stage1/lib/glue.o \\\n-         stage1/lib/$(CFG_STDLIB)\n-SREQ2 := stage2/rustc$(X) $(LREQ) rt/main.o stage2/lib/glue.o \\\n-         stage2/lib/$(CFG_STDLIB)\n-\n-\n ######################################################################\n # Exports for sub-utilities\n ######################################################################\n@@ -178,7 +152,32 @@ LLVM_AS := $(CFG_LLVM_BINDIR)/llvm-as$(X)\n LLC := $(CFG_LLVM_BINDIR)/llc$(X)\n \n ######################################################################\n-# Single-target rules\n+# Per-stage targets and runner\n+######################################################################\n+\n+define SREQ\n+SREQ$(1) = stage$(1)/rustc$(X)          \\\n+           stage$(1)/$$(CFG_RUNTIME)     \\\n+           stage$(1)/$$(CFG_STDLIB)      \\\n+           stage$(1)/$$(CFG_RUSTLLVM)    \\\n+           stage$(1)/lib/glue.o          \\\n+           stage$(1)/lib/main.o          \\\n+           stage$(1)/lib/$$(CFG_RUNTIME) \\\n+           stage$(1)/lib/$$(CFG_STDLIB)  \\\n+           $$(MKFILES)\n+\n+STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,stage$(1),stage$(1), \\\n+                $$(CFG_VALGRIND_COMPILE) stage$(1)/rustc$$(X) \\\n+                $$(CFG_RUSTC_FLAGS))\n+endef\n+\n+$(eval $(call SREQ,0))\n+$(eval $(call SREQ,1))\n+$(eval $(call SREQ,2))\n+$(eval $(call SREQ,3))\n+\n+######################################################################\n+# Entrypoint rule\n ######################################################################\n \n ifneq ($(CFG_IN_TRANSITION),)\n@@ -188,40 +187,9 @@ CFG_INFO := $(info cfg: *** compiler is in snapshot transition ***)\n CFG_INFO := $(info cfg: *** stage2 and later will not be built ***)\n CFG_INFO := $(info cfg:)\n \n-all: rt/$(CFG_RUNTIME)          \\\n-     rustllvm/$(CFG_RUSTLLVM)   \\\n-     stage0/lib/$(CFG_STDLIB)   \\\n-     stage0/intrinsics.bc       \\\n-     stage0/rustc$(X)           \\\n-     $(GENERATED)               \\\n-     $(DOCS)                    \\\n-     stage1/lib/$(CFG_STDLIB)   \\\n-     stage1/intrinsics.bc       \\\n-     stage1/lib/glue.o          \\\n-     stage1/rustc$(X)           \\\n-\n+all: $(SREQ0) $(SREQ1) $(GENERATED) $(DOCS)\n else\n-\n-all: rt/$(CFG_RUNTIME)          \\\n-     rustllvm/$(CFG_RUSTLLVM)   \\\n-     stage0/lib/$(CFG_STDLIB)   \\\n-     stage0/intrinsics.bc       \\\n-     stage0/rustc$(X)           \\\n-     $(GENERATED)               \\\n-     $(DOCS)                    \\\n-     stage1/lib/$(CFG_STDLIB)   \\\n-     stage1/intrinsics.bc       \\\n-     stage1/lib/glue.o          \\\n-     stage1/rustc$(X)           \\\n-     stage2/lib/$(CFG_STDLIB)   \\\n-     stage2/intrinsics.bc       \\\n-     stage2/lib/glue.o          \\\n-     stage2/rustc$(X)           \\\n-     stage3/lib/$(CFG_STDLIB)   \\\n-     stage3/lib/glue.o          \\\n-     stage3/intrinsics.bc       \\\n-     stage3/rustc$(X)\n-\n+all: $(SREQ0) $(SREQ1) $(SREQ2) $(SREQ3) $(GENERATED) $(DOCS)\n endif\n \n \n@@ -240,9 +208,7 @@ config.mk: $(S)configure $(S)Makefile.in $(S)src/snapshots.txt\n \n include $(CFG_SRC_DIR)/mk/intrinsics.mk\n include $(CFG_SRC_DIR)/mk/stage0.mk\n-include $(CFG_SRC_DIR)/mk/stage1.mk\n-include $(CFG_SRC_DIR)/mk/stage2.mk\n-include $(CFG_SRC_DIR)/mk/stage3.mk\n+include $(CFG_SRC_DIR)/mk/stageN.mk\n include $(CFG_SRC_DIR)/mk/rt.mk\n include $(CFG_SRC_DIR)/mk/rustllvm.mk\n include $(CFG_SRC_DIR)/mk/autodep.mk"}, {"sha": "c01b8045e1324ca25493e01ce61cb75f445571aa", "filename": "mk/stage0.mk", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "patch": "@@ -3,19 +3,33 @@ stage0/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n \t$(Q)$(S)src/etc/get-snapshot.py\n \t$(Q)touch $@\n \n-# These two will be made in the process of making rustc above.\n+# Host libs will be made in the process of making rustc above.\n \n-stage0/lib/glue.o: stage0/rustc$(X)\n-\t$(Q)touch $@\n+# FIXME: temporary hack: the first two are currently carried in\n+# lib/ directory only, so we copy them out.\n \n-stage0/lib/$(CFG_STDLIB): stage0/rustc$(X)\n-\t$(Q)touch $@\n+stage0/$(CFG_RUNTIME): stage0/lib/$(CFG_RUNTIME)\n+\t$(Q)cp $< $@\n \n-stage0/intrinsics.bc: stage0/rustc$(X)\n-\t$(Q)touch $@\n+stage0/$(CFG_STDLIB): stage0/lib/$(CFG_STDLIB)\n+\t$(Q)cp $< $@\n \n stage0/$(CFG_RUSTLLVM): stage0/rustc$(X)\n \t$(Q)touch $@\n \n+# Target libs will be made in the process of making rustc above.\n+\n+stage0/lib/glue.o: stage0/rustc$(X)\n+\t$(Q)touch $@\n+\n+# FIXME: temporary hack: currently not distributing main.o like we should;\n+# copying from rt\n+\n+stage0/lib/main.o: rt/main.o\n+\t$(Q)cp $< $@\n+\n stage0/lib/$(CFG_RUNTIME): stage0/rustc$(X)\n \t$(Q)touch $@\n+\n+stage0/lib/$(CFG_STDLIB): stage0/rustc$(X)\n+\t$(Q)touch $@"}, {"sha": "fb6bbf80c46c8a5667873dd7a52e8224b5cb44bc", "filename": "mk/stage1.mk", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage1.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage1.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage1.mk?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -1,51 +0,0 @@\n-stage1/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) stage1/intrinsics.bc \\\n-              stage1/lib/$(CFG_RUNTIME) stage1/$(CFG_RUSTLLVM) \\\n-              stage1/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE1) --lib -o $@ $<\n-\n-stage1/lib/libstd.rlib:  $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) stage1/intrinsics.bc \\\n-              stage1/lib/$(CFG_RUNTIME) stage1/$(CFG_RUSTLLVM) \\\n-              stage1/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE1) --lib --static -o $@ $<\n-\n-stage1/lib/glue.o: stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) \\\n-\tstage1/intrinsics.bc stage1/$(CFG_RUSTLLVM) \\\n-\tstage0/lib/$(CFG_RUNTIME)\n-\t@$(call E, generate: $@)\n-\t$(STAGE1) -c -o $@ --glue\n-\n-stage1/intrinsics.bc:\t$(INTRINSICS_BC)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage1/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage1/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-# Due to make not wanting to run the same implicit rules twice on the same\n-# rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n-# Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here\n-# for different directories, to handle cases where (say) a test relies on a\n-# compiler that relies on a .o file.\n-\n-stage1/%.o: stage1/%.s\n-\t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n-\n-stage1/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0) \\\n-\tstage0/intrinsics.bc\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE0) -o $@ $<\n-\n-stage1/lib/$(CFG_LIBRUSTC): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1) \\\n-                            stage1/intrinsics.bc\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE1) --lib -o $@ $<"}, {"sha": "c259f334f52255accd3280290a31b8018d5cd0fa", "filename": "mk/stage2.mk", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage2.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage2.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage2.mk?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -1,46 +0,0 @@\n-stage2/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) stage2/intrinsics.bc \\\n-              stage2/lib/$(CFG_RUNTIME) stage2/$(CFG_RUSTLLVM) \\\n-              stage2/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE2)  --lib -o $@ $<\n-\n-stage2/lib/libstd.rlib:  $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) stage2/intrinsics.bc \\\n-              stage2/lib/$(CFG_RUNTIME) stage2/$(CFG_RUSTLLVM) \\\n-              stage2/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE2) --lib --static -o $@ $<\n-\n-stage2/lib/glue.o: stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) \\\n-\tstage2/intrinsics.bc stage2/$(CFG_RUSTLLVM) \\\n-\tstage1/lib/$(CFG_RUNTIME)\n-\t@$(call E, generate: $@)\n-\t$(STAGE2) -c -o $@ --glue\n-\n-stage2/intrinsics.bc:\t$(INTRINSICS_BC)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage2/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage2/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-# Due to make not wanting to run the same implicit rules twice on the same\n-# rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n-# Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here\n-# for different directories, to handle cases where (say) a test relies on a\n-# compiler that relies on a .o file.\n-\n-stage2/%.o: stage2/%.s\n-\t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n-\n-stage2/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1) \\\n-\tstage1/intrinsics.bc\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE1) -o $@ $<"}, {"sha": "dc31027128381fecf199a0d8618e9d2460b95c7b", "filename": "mk/stage3.mk", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage3.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c4265209a60ebb6227a6fff63c906e34f7210e49/mk%2Fstage3.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage3.mk?ref=c4265209a60ebb6227a6fff63c906e34f7210e49", "patch": "@@ -1,45 +0,0 @@\n-stage3/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) stage3/intrinsics.bc \\\n-              stage3/lib/$(CFG_RUNTIME) stage3/$(CFG_RUSTLLVM) \\\n-              stage3/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE3)  --lib -o $@ $<\n-\n-stage3/lib/libstd.rlib:  $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-              stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) stage3/intrinsics.bc \\\n-              stage3/lib/$(CFG_RUNTIME) stage3/$(CFG_RUSTLLVM) \\\n-              stage3/lib/glue.o $(LREQ) $(MKFILES)\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE3) --lib --static -o $@ $<\n-\n-stage3/lib/glue.o: stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) \\\n-\tstage3/intrinsics.bc stage3/$(CFG_RUSTLLVM) \\\n-\tstage2/lib/$(CFG_RUNTIME)\n-\t@$(call E, generate: $@)\n-\t$(STAGE3) -c -o $@ --glue\n-\n-stage3/intrinsics.bc:\t$(INTRINSICS_BC)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage3/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-stage3/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n-\t@$(call E, cp: $@)\n-\t$(Q)cp $< $@\n-\n-# Due to make not wanting to run the same implicit rules twice on the same\n-# rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n-# Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here\n-# for different directories, to handle cases where (say) a test relies on a\n-# compiler that relies on a .o file.\n-\n-stage3/%.o: stage3/%.s\n-\t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n-\n-stage3/rustc$(X): $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ2) stage2/intrinsics.bc\n-\t@$(call E, compile_and_link: $@)\n-\t$(STAGE2) -o $@ $<"}, {"sha": "48aee68b45e844fd3b0c25b25fb64744dc02ab47", "filename": "mk/stageN.mk", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "patch": "@@ -0,0 +1,97 @@\n+# StageN template: arg 1 is the N we're building *from*, arg 2 is N+1.\n+#\n+# The easiest way to read this template is to assume we're building stage2\n+# using stage1, and mentally gloss $(1) as 1, $(2) as 2.\n+\n+define STAGEN\n+\n+# Host libraries and executables (stage$(2)/rustc and its runtime needs)\n+#\n+# NB: Due to make not wanting to run the same implicit rules twice on the same\n+# rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n+# Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here\n+# for different directories, to handle cases where (say) a test relies on a\n+# compiler that relies on a .o file.\n+\n+STAGE$(2) := $$(Q)$$(call CFG_RUN_TARG,stage$(2),stage$(1), \\\n+                $$(CFG_VALGRIND_COMPILE) stage$(2)/rustc$$(X) \\\n+                $$(CFG_RUSTC_FLAGS))\n+\n+stage$(2)/%.o: stage$(2)/%.s\n+\t@$$(call E, assemble [gcc]: $$@)\n+\t$$(Q)gcc $$(CFG_GCCISH_CFLAGS) -o $$@ -c $$<\n+\n+stage$(2)/rustc$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n+                      stage$(2)/$$(CFG_RUNTIME)              \\\n+                      stage$(2)/$$(CFG_STDLIB)               \\\n+                      stage$(2)/$$(CFG_RUSTLLVM)             \\\n+                      $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)) -L stage$(2) -o $$@ $$<\n+\n+stage$(2)/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/$$(CFG_STDLIB): stage$(1)/lib/$$(CFG_STDLIB)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+\n+# Target libraries (for binaries generated by stage$(2)/rustc)\n+\n+stage$(2)/lib/intrinsics.bc: $$(INTRINSICS_BC)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/lib/glue.o: stage$(2)/rustc$$(X)        \\\n+                      stage$(2)/$$(CFG_RUNTIME)   \\\n+                      stage$(2)/$$(CFG_RUSTLLVM)  \\\n+                      stage$(2)/lib/intrinsics.bc \\\n+                      $$(SREQ$(1))\n+\t@$$(call E, generate: $$@)\n+\t$$(STAGE$(2)) -c -o $$@ --glue\n+\n+stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                              stage$(2)/rustc$$(X)               \\\n+                              stage$(2)/$$(CFG_RUNTIME)          \\\n+                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                              stage$(2)/lib/glue.o               \\\n+                              $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2))  --lib -o $$@ $$<\n+\n+stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+                           stage$(2)/rustc$$(X)               \\\n+                           stage$(2)/$$(CFG_RUNTIME)          \\\n+                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n+                           stage$(2)/lib/glue.o               \\\n+                           $$(SREQ$(1))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n+\n+\n+stage$(2)/lib/main.o: rt/main.o\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+stage$(2)/lib/$$(CFG_LIBRUSTC): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n+                                $$(SREQ$(2))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(2)) --lib -o $$@ $$<\n+\n+endef\n+\n+# Instantiate template for 0->1, 1->2, 2->3 build dirs\n+\n+$(eval $(call STAGEN,0,1))\n+$(eval $(call STAGEN,1,2))\n+$(eval $(call STAGEN,2,3))"}, {"sha": "ab9f47e3cc02721e7de6820068afd8af516f1d42", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "patch": "@@ -41,7 +41,7 @@ fn llvm_err(session::session sess, str msg) {\n }\n \n fn link_intrinsics(session::session sess, ModuleRef llmod) {\n-    auto path = fs::connect(sess.get_opts().sysroot, \"intrinsics.bc\");\n+    auto path = fs::connect(sess.get_opts().sysroot, \"lib/intrinsics.bc\");\n     auto membuf =\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(str::buf(path));\n     if (membuf as uint == 0u) {"}, {"sha": "b810fbecc729fd33ba8b1fbf0aa287e16990677b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafb42e6b1f0dd3022d33e235a4229060d2b2d1d/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=fafb42e6b1f0dd3022d33e235a4229060d2b2d1d", "patch": "@@ -508,7 +508,7 @@ fn main(vec[str] args) {\n     }\n \n     let str glu = binary_dir + \"/lib/glue.o\";\n-    let str main = \"rt/main.o\";\n+    let str main = binary_dir + \"/lib/main.o\";\n     let str stage = \"-L\" + binary_dir + \"/lib\";\n     let str prog = \"gcc\";\n     // The invocations of gcc share some flags across platforms"}]}