{"sha": "22e33f308a7dfe924bf2d10f9041e91cec1349a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTMzZjMwOGE3ZGZlOTI0YmYyZDEwZjkwNDFlOTFjZWMxMzQ5YTA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-12T10:25:31Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-16T11:27:44Z"}, "message": "Add with-proc-macro in bench ,stats and diagnositcs", "tree": {"sha": "c134aed5660c55512125608d17444de9407f0756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c134aed5660c55512125608d17444de9407f0756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e33f308a7dfe924bf2d10f9041e91cec1349a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e33f308a7dfe924bf2d10f9041e91cec1349a0", "html_url": "https://github.com/rust-lang/rust/commit/22e33f308a7dfe924bf2d10f9041e91cec1349a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e33f308a7dfe924bf2d10f9041e91cec1349a0/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa887d7ab463bae17ffca2aa7eaf1643ea27ab91", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa887d7ab463bae17ffca2aa7eaf1643ea27ab91", "html_url": "https://github.com/rust-lang/rust/commit/aa887d7ab463bae17ffca2aa7eaf1643ea27ab91"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "ec93e9e4e5fe446e94ec25b69e089bf75b357073", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -29,15 +29,18 @@ pub(crate) enum Command {\n         with_deps: bool,\n         path: PathBuf,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n     },\n     Bench {\n         path: PathBuf,\n         what: BenchWhat,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n     },\n     Diagnostics {\n         path: PathBuf,\n         load_output_dirs: bool,\n+        with_proc_macro: bool,\n         /// Include files which are not modules. In rust-analyzer\n         /// this would include the parser test files.\n         all: bool,\n@@ -148,6 +151,7 @@ FLAGS:\n     -h, --help              Prints help information\n         --memory-usage\n         --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+        --with-proc-macro    Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose\n     -q, --quiet\n \n@@ -165,6 +169,7 @@ ARGS:\n                 let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n                 let with_deps: bool = matches.contains(\"--with-deps\");\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n                     if trailing.len() != 1 {\n@@ -173,7 +178,15 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Stats { randomize, memory_usage, only, with_deps, path, load_output_dirs }\n+                Command::Stats {\n+                    randomize,\n+                    memory_usage,\n+                    only,\n+                    with_deps,\n+                    path,\n+                    load_output_dirs,\n+                    with_proc_macro,\n+                }\n             }\n             \"analysis-bench\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -187,6 +200,7 @@ USAGE:\n FLAGS:\n     -h, --help          Prints help information\n     --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+    --with-proc-macro    Use ra-proc-macro-srv for proc-macro expanding\n     -v, --verbose\n \n OPTIONS:\n@@ -214,7 +228,8 @@ ARGS:\n                     ),\n                 };\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n-                Command::Bench { path, what, load_output_dirs }\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n+                Command::Bench { path, what, load_output_dirs, with_proc_macro }\n             }\n             \"diagnostics\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -237,6 +252,7 @@ ARGS:\n                 }\n \n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let with_proc_macro = matches.contains(\"--with-proc-macro\");\n                 let all = matches.contains(\"--all\");\n                 let path = {\n                     let mut trailing = matches.free()?;\n@@ -246,7 +262,7 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Diagnostics { path, load_output_dirs, all }\n+                Command::Diagnostics { path, load_output_dirs, with_proc_macro, all }\n             }\n             _ => {\n                 eprintln!("}, {"sha": "5f614a013866e32b326f87ad48681008761fa99b", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -25,6 +25,7 @@ fn main() -> Result<()> {\n             with_deps,\n             path,\n             load_output_dirs,\n+            with_proc_macro,\n         } => cli::analysis_stats(\n             args.verbosity,\n             memory_usage,\n@@ -33,14 +34,21 @@ fn main() -> Result<()> {\n             with_deps,\n             randomize,\n             load_output_dirs,\n+            with_proc_macro,\n         )?,\n \n-        args::Command::Bench { path, what, load_output_dirs } => {\n-            cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n+        args::Command::Bench { path, what, load_output_dirs, with_proc_macro } => {\n+            cli::analysis_bench(\n+                args.verbosity,\n+                path.as_ref(),\n+                what,\n+                load_output_dirs,\n+                with_proc_macro,\n+            )?\n         }\n \n-        args::Command::Diagnostics { path, load_output_dirs, all } => {\n-            cli::diagnostics(path.as_ref(), load_output_dirs, all)?\n+        args::Command::Diagnostics { path, load_output_dirs, with_proc_macro, all } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs, with_proc_macro, all)?\n         }\n \n         args::Command::RunServer => run_server()?,"}, {"sha": "6147ae20743c4d7fbb7ed593876e9d4be2e8f29d", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -47,12 +47,13 @@ pub fn analysis_bench(\n     path: &Path,\n     what: BenchWhat,\n     load_output_dirs: bool,\n+    with_proc_macro: bool,\n ) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n     eprint!(\"loading: \");\n-    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     eprintln!(\"{:?}\\n\", start.elapsed());\n "}, {"sha": "d442cbd63e31f5d3fcbd76a68587c03bc9e15bdb", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -25,9 +25,10 @@ pub fn analysis_stats(\n     with_deps: bool,\n     randomize: bool,\n     load_output_dirs: bool,\n+    with_proc_macro: bool,\n ) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (mut host, roots) = load_cargo(path, load_output_dirs)?;\n+    let (mut host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();"}, {"sha": "60daefa3ef7ffd4efbb330c7830dd741cf2a9df4", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -9,8 +9,13 @@ use std::{collections::HashSet, path::Path};\n use crate::cli::{load_cargo::load_cargo, Result};\n use hir::Semantics;\n \n-pub fn diagnostics(path: &Path, load_output_dirs: bool, all: bool) -> Result<()> {\n-    let (host, roots) = load_cargo(path, load_output_dirs)?;\n+pub fn diagnostics(\n+    path: &Path,\n+    load_output_dirs: bool,\n+    with_proc_macro: bool,\n+    all: bool,\n+) -> Result<()> {\n+    let (host, roots) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n     let semantics = Semantics::new(db);"}, {"sha": "f70d92c7f457488a9e67f1c2e3b12f5db054a164", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e33f308a7dfe924bf2d10f9041e91cec1349a0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=22e33f308a7dfe924bf2d10f9041e91cec1349a0", "patch": "@@ -25,6 +25,7 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n pub(crate) fn load_cargo(\n     root: &Path,\n     load_out_dirs_from_check: bool,\n+    with_proc_macro: bool,\n ) -> Result<(AnalysisHost, FxHashMap<SourceRootId, PackageRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(\n@@ -69,7 +70,11 @@ pub(crate) fn load_cargo(\n         })\n         .collect::<FxHashMap<_, _>>();\n \n-    let proc_macro_client = ProcMacroClient::dummy();\n+    let proc_macro_client = if with_proc_macro {\n+        ProcMacroClient::dummy()\n+    } else {\n+        ProcMacroClient::extern_process(Path::new(\"ra_proc_macro_srv\")).unwrap()\n+    };\n     let host = load(&source_roots, ws, &mut vfs, receiver, extern_dirs, &proc_macro_client);\n     Ok((host, source_roots))\n }\n@@ -175,7 +180,7 @@ mod tests {\n     #[test]\n     fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let (host, _roots) = load_cargo(path, false).unwrap();\n+        let (host, _roots) = load_cargo(path, false, false).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);"}]}