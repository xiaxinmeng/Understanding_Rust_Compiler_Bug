{"sha": "cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkN2EwMTFmMzdjNTFkNmNiMzY3ZTg3YzM3YjRkN2JjNDY0ZGEwOWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T16:03:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T16:03:07Z"}, "message": "Don't duplicate the extern providers once for each crate", "tree": {"sha": "f354fba3a7b2f896264ff11ae10bbbe37c2b5f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f354fba3a7b2f896264ff11ae10bbbe37c2b5f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "html_url": "https://github.com/rust-lang/rust/commit/cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "html_url": "https://github.com/rust-lang/rust/commit/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "87d002878289f7b77e668baa770b683797e6abc0", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "patch": "@@ -15,7 +15,6 @@ use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n-use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n@@ -788,13 +787,7 @@ pub fn create_global_ctxt<'tcx>(\n         callback(sess, &mut local_providers, &mut extern_providers);\n     }\n \n-    let queries = {\n-        let crates = resolver_outputs.cstore.crates_untracked();\n-        let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n-        let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n-        providers[LOCAL_CRATE] = local_providers;\n-        queries.get_or_init(|| TcxQueries::new(providers, extern_providers))\n-    };\n+    let queries = queries.get_or_init(|| TcxQueries::new(local_providers, extern_providers));\n \n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(|| {"}, {"sha": "00d886000faa239d9eeff99f024801107376dd5f", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "patch": "@@ -19,8 +19,7 @@ extern crate tracing;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, Handler};\n-use rustc_hir::def_id::CrateNum;\n-use rustc_index::vec::IndexVec;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::dep_graph;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};"}, {"sha": "d958b3c18cdcd96d2d64e82df5508c9072e5abbe", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7a011f37c51d6cb367e87c37b4d7bc464da09d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=cd7a011f37c51d6cb367e87c37b4d7bc464da09d", "patch": "@@ -390,13 +390,12 @@ macro_rules! define_queries {\n \n             #[inline]\n             fn compute(tcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n-                let provider = tcx.queries.providers.get(key.query_crate())\n-                    // HACK(eddyb) it's possible crates may be loaded after\n-                    // the query engine is created, and because crate loading\n-                    // is not yet integrated with the query engine, such crates\n-                    // would be missing appropriate entries in `providers`.\n-                    .unwrap_or(&tcx.queries.fallback_extern_providers)\n-                    .$name;\n+                let is_local = key.query_crate() == LOCAL_CRATE;\n+                let provider = if is_local {\n+                    tcx.queries.local_providers.$name\n+                } else {\n+                    tcx.queries.extern_providers.$name\n+                };\n                 provider(*tcx, key)\n             }\n \n@@ -507,8 +506,8 @@ macro_rules! define_queries_struct {\n     (tcx: $tcx:tt,\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Queries<$tcx> {\n-            providers: IndexVec<CrateNum, Providers>,\n-            fallback_extern_providers: Box<Providers>,\n+            local_providers: Box<Providers>,\n+            extern_providers: Box<Providers>,\n \n             $($(#[$attr])*  $name: QueryState<\n                 crate::dep_graph::DepKind,\n@@ -518,12 +517,12 @@ macro_rules! define_queries_struct {\n \n         impl<$tcx> Queries<$tcx> {\n             pub fn new(\n-                providers: IndexVec<CrateNum, Providers>,\n-                fallback_extern_providers: Providers,\n+                local_providers: Providers,\n+                extern_providers: Providers,\n             ) -> Self {\n                 Queries {\n-                    providers,\n-                    fallback_extern_providers: Box::new(fallback_extern_providers),\n+                    local_providers: Box::new(local_providers),\n+                    extern_providers: Box::new(extern_providers),\n                     $($name: Default::default()),*\n                 }\n             }"}]}