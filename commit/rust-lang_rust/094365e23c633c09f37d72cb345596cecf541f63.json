{"sha": "094365e23c633c09f37d72cb345596cecf541f63", "node_id": "C_kwDOAAsO6NoAKDA5NDM2NWUyM2M2MzNjMDlmMzdkNzJjYjM0NTU5NmNlY2Y1NDFmNjM", "commit": {"author": {"name": "soc", "email": "simon@ochsenreither.de", "date": "2023-02-15T18:57:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T18:57:00Z"}, "message": "Drop unstable `Option::contains`, `Result::contains`, `Result::contains_err`", "tree": {"sha": "51e46f82801e027a82e60ca85bc1bffd5325d4d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e46f82801e027a82e60ca85bc1bffd5325d4d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094365e23c633c09f37d72cb345596cecf541f63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7Sr8CRBK7hj4Ov3rIwAACVwIAGiUrF4ehuClPb3x6UHhVqtT\nuiKbas/1c88mBVtCNuc1IF3zRhkdyue/3Zd0RnzI2McdNjt8eyDISYcMXeI9SPp+\n5R7Tlmr9QqWfnUAlFMeUhlfAPSAEA6qhZJCgjUUaDYg37PGpb51RdiwJWm1KbXMK\nw9gFPIFTwlCAjTr0CtMJlBVDgli4TyWdoqj81HebO8ZwqnvGemdRl0O1dTcQ2Wv9\n2oB1uZi9wLAa+Y3Iuk+emRChLc3kcruM+7Ya5nhoSMjqBbzdglIsEcoFseu2Nwt1\nMBgrDulhy6SZZ4cYtZi4em35iNub6vgJkTodgSYIfrgNffKKFMIXZ/ajzS+NxGg=\n=d0wh\n-----END PGP SIGNATURE-----\n", "payload": "tree 51e46f82801e027a82e60ca85bc1bffd5325d4d7\nparent 999ac5f7770bff68bd65f490990d32c3ec1faaa6\nauthor soc <simon@ochsenreither.de> 1676487420 +0000\ncommitter GitHub <noreply@github.com> 1676487420 +0000\n\nDrop unstable `Option::contains`, `Result::contains`, `Result::contains_err`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094365e23c633c09f37d72cb345596cecf541f63", "html_url": "https://github.com/rust-lang/rust/commit/094365e23c633c09f37d72cb345596cecf541f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094365e23c633c09f37d72cb345596cecf541f63/comments", "author": {"login": "soc", "id": 42493, "node_id": "MDQ6VXNlcjQyNDkz", "avatar_url": "https://avatars.githubusercontent.com/u/42493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soc", "html_url": "https://github.com/soc", "followers_url": "https://api.github.com/users/soc/followers", "following_url": "https://api.github.com/users/soc/following{/other_user}", "gists_url": "https://api.github.com/users/soc/gists{/gist_id}", "starred_url": "https://api.github.com/users/soc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soc/subscriptions", "organizations_url": "https://api.github.com/users/soc/orgs", "repos_url": "https://api.github.com/users/soc/repos", "events_url": "https://api.github.com/users/soc/events{/privacy}", "received_events_url": "https://api.github.com/users/soc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999ac5f7770bff68bd65f490990d32c3ec1faaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/999ac5f7770bff68bd65f490990d32c3ec1faaa6", "html_url": "https://github.com/rust-lang/rust/commit/999ac5f7770bff68bd65f490990d32c3ec1faaa6"}], "stats": {"total": 92, "additions": 0, "deletions": 92}, "files": [{"sha": "9dfaf81b00ca6e9518a473753558ae082a5287c7", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/094365e23c633c09f37d72cb345596cecf541f63/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094365e23c633c09f37d72cb345596cecf541f63/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=094365e23c633c09f37d72cb345596cecf541f63", "patch": "@@ -1649,36 +1649,6 @@ impl<T> Option<T> {\n         mem::replace(self, Some(value))\n     }\n \n-    /// Returns `true` if the option is a [`Some`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Option<u32> = Some(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Option<u32> = Some(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Option<u32> = None;\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: ~const PartialEq<T>,\n-    {\n-        match self {\n-            Some(y) => x.eq(y),\n-            None => false,\n-        }\n-    }\n-\n     /// Zips `self` with another `Option`.\n     ///\n     /// If `self` is `Some(s)` and `other` is `Some(o)`, this method returns `Some((s, o))`."}, {"sha": "fe89ccd749cef4893aa180eacc415c7b8b3a323b", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/094365e23c633c09f37d72cb345596cecf541f63/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094365e23c633c09f37d72cb345596cecf541f63/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=094365e23c633c09f37d72cb345596cecf541f63", "patch": "@@ -1567,68 +1567,6 @@ impl<T, E> Result<T, E> {\n             Err(e) => e,\n         }\n     }\n-\n-    /////////////////////////////////////////////////////////////////////////\n-    // Misc or niche\n-    /////////////////////////////////////////////////////////////////////////\n-\n-    /// Returns `true` if the result is an [`Ok`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(option_result_contains)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains(&2), true);\n-    ///\n-    /// let x: Result<u32, &str> = Ok(3);\n-    /// assert_eq!(x.contains(&2), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains(&2), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    pub fn contains<U>(&self, x: &U) -> bool\n-    where\n-        U: PartialEq<T>,\n-    {\n-        match self {\n-            Ok(y) => x == y,\n-            Err(_) => false,\n-        }\n-    }\n-\n-    /// Returns `true` if the result is an [`Err`] value containing the given value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_contains_err)]\n-    ///\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), true);\n-    ///\n-    /// let x: Result<u32, &str> = Err(\"Some other error message\");\n-    /// assert_eq!(x.contains_err(&\"Some error message\"), false);\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    #[unstable(feature = \"result_contains_err\", issue = \"62358\")]\n-    pub fn contains_err<F>(&self, f: &F) -> bool\n-    where\n-        F: PartialEq<E>,\n-    {\n-        match self {\n-            Ok(_) => false,\n-            Err(e) => f == e,\n-        }\n-    }\n }\n \n impl<T, E> Result<&T, E> {"}]}