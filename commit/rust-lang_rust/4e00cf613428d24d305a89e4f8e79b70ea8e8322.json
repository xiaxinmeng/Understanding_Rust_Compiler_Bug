{"sha": "4e00cf613428d24d305a89e4f8e79b70ea8e8322", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDBjZjYxMzQyOGQyNGQzMDVhODllNGY4ZTc5YjcwZWE4ZTgzMjI=", "commit": {"author": {"name": "Daniel Fagnan", "email": "dnfagnan@gmail.com", "date": "2014-02-25T02:42:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T01:06:53Z"}, "message": "Added new attribute syntax with backward compatibility.\n\nSigned-off-by: Daniel Fagnan <dnfagnan@gmail.com>", "tree": {"sha": "183c414832596437bfc0e6a04b81f8542cbd53c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/183c414832596437bfc0e6a04b81f8542cbd53c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e00cf613428d24d305a89e4f8e79b70ea8e8322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e00cf613428d24d305a89e4f8e79b70ea8e8322", "html_url": "https://github.com/rust-lang/rust/commit/4e00cf613428d24d305a89e4f8e79b70ea8e8322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e00cf613428d24d305a89e4f8e79b70ea8e8322/comments", "author": {"login": "thehydroimpulse", "id": 565790, "node_id": "MDQ6VXNlcjU2NTc5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/565790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thehydroimpulse", "html_url": "https://github.com/thehydroimpulse", "followers_url": "https://api.github.com/users/thehydroimpulse/followers", "following_url": "https://api.github.com/users/thehydroimpulse/following{/other_user}", "gists_url": "https://api.github.com/users/thehydroimpulse/gists{/gist_id}", "starred_url": "https://api.github.com/users/thehydroimpulse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thehydroimpulse/subscriptions", "organizations_url": "https://api.github.com/users/thehydroimpulse/orgs", "repos_url": "https://api.github.com/users/thehydroimpulse/repos", "events_url": "https://api.github.com/users/thehydroimpulse/events{/privacy}", "received_events_url": "https://api.github.com/users/thehydroimpulse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc", "html_url": "https://github.com/rust-lang/rust/commit/6eae7df43cd21b76fe91eeaf6ef2af9bd2a8fafc"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "92b93fd88dd646217f85523cfcb03bc5b90a8bf1", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -38,9 +38,6 @@ impl<'a> ParserAttr for Parser<'a> {\n                 attrs.push(self.parse_attribute(false));\n               }\n               token::POUND => {\n-                if self.look_ahead(1, |t| *t != token::LBRACKET) {\n-                    break;\n-                }\n                 attrs.push(self.parse_attribute(false));\n               }\n               token::DOC_COMMENT(s) => {\n@@ -68,6 +65,7 @@ impl<'a> ParserAttr for Parser<'a> {\n     fn parse_attribute(&mut self, permit_inner: bool) -> ast::Attribute {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n                permit_inner, self.token);\n+        let mut warned = false;\n         let (span, value) = match self.token {\n             INTERPOLATED(token::NtAttr(attr)) => {\n                 assert!(attr.node.style == ast::AttrOuter);\n@@ -77,9 +75,22 @@ impl<'a> ParserAttr for Parser<'a> {\n             token::POUND => {\n                 let lo = self.span.lo;\n                 self.bump();\n+\n+                if self.eat(&token::NOT) {\n+                    if !permit_inner {\n+                        self.fatal(\"an inner attribute was not permitted in this context.\");\n+                    }\n+                } else {\n+                    warned = true;\n+                    // NOTE: uncomment this after a stage0 snap\n+                    //self.warn(\"The syntax for inner attributes have changed.\n+                    //    Use `#![lang(foo)]` instead.\");\n+                }\n+\n                 self.expect(&token::LBRACKET);\n                 let meta_item = self.parse_meta_item();\n                 self.expect(&token::RBRACKET);\n+\n                 let hi = self.span.hi;\n                 (mk_sp(lo, hi), meta_item)\n             }\n@@ -89,12 +100,23 @@ impl<'a> ParserAttr for Parser<'a> {\n                                    token_str));\n             }\n         };\n-        let style = if permit_inner && self.token == token::SEMI {\n-            self.bump();\n+\n+        let style = if permit_inner {\n+\n+            if self.eat(&token::SEMI) {\n+                // Only warn the user once if the syntax is the old one.\n+                if !warned {\n+                    // NOTE: uncomment this after a stage0 snap\n+                    //self.warn(\"This uses the old attribute syntax. Semicolons\n+                    //  are not longer required.\");\n+                }\n+            }\n+\n             ast::AttrInner\n         } else {\n             ast::AttrOuter\n         };\n+\n         return Spanned {\n             span: span,\n             node: ast::Attribute_ {\n@@ -125,10 +147,6 @@ impl<'a> ParserAttr for Parser<'a> {\n                     self.parse_attribute(true)\n                 }\n                 token::POUND => {\n-                    if self.look_ahead(1, |t| *t != token::LBRACKET) {\n-                        // This is an extension\n-                        break;\n-                    }\n                     self.parse_attribute(true)\n                 }\n                 token::DOC_COMMENT(s) => {"}, {"sha": "1221d8401be1d7732dd3584f841ff66be5ba63a5", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -12,7 +12,7 @@ use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;\n use parse::lexer::{is_whitespace, with_str_from, Reader};\n-use parse::lexer::{StringReader, bump, is_eof, nextch_is, TokenAndSpan};\n+use parse::lexer::{StringReader, bump, peek, is_eof, nextch_is, TokenAndSpan};\n use parse::lexer::{is_line_non_doc_comment, is_block_non_doc_comment};\n use parse::lexer;\n use parse::token;\n@@ -331,7 +331,11 @@ fn consume_comment(rdr: &StringReader,\n     } else if rdr.curr_is('/') && nextch_is(rdr, '*') {\n         read_block_comment(rdr, code_to_the_left, comments);\n     } else if rdr.curr_is('#') && nextch_is(rdr, '!') {\n-        read_shebang_comment(rdr, code_to_the_left, comments);\n+        // Make sure the following token is **not** the beginning\n+        // of an inner attribute, which starts with the same syntax.\n+        if peek(rdr, 2).unwrap() != '[' {\n+            read_shebang_comment(rdr, code_to_the_left, comments);\n+        }\n     } else { fail!(); }\n     debug!(\"<<< consume comment\");\n }"}, {"sha": "061d460af5e48c20eedd5ca7d2da7ccab02ca8c9", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -271,9 +271,21 @@ pub fn bump(rdr: &StringReader) {\n         rdr.curr.set(None);\n     }\n }\n+\n+// EFFECT: Peek 'n' characters ahead.\n+pub fn peek(rdr: &StringReader, n: uint) -> Option<char> {\n+    let offset = byte_offset(rdr, rdr.pos.get()).to_uint() + (n - 1);\n+    if offset < (rdr.filemap.src).len() {\n+        Some(rdr.filemap.src.char_at(offset))\n+    } else {\n+        None\n+    }\n+}\n+\n pub fn is_eof(rdr: &StringReader) -> bool {\n     rdr.curr.get().is_none()\n }\n+\n pub fn nextch(rdr: &StringReader) -> Option<char> {\n     let offset = byte_offset(rdr, rdr.pos.get()).to_uint();\n     if offset < rdr.filemap.deref().src.len() {\n@@ -370,6 +382,12 @@ fn consume_any_line_comment(rdr: &StringReader)\n         }\n     } else if rdr.curr_is('#') {\n         if nextch_is(rdr, '!') {\n+\n+            // Parse an inner attribute.\n+            if peek(rdr, 2).unwrap() == '[' {\n+                return None;\n+            }\n+\n             // I guess this is the only way to figure out if\n             // we're at the beginning of the file...\n             let cmap = CodeMap::new();"}, {"sha": "4107c84c47223c2ff97ce8a0370e966cf03623dc", "filename": "src/test/compile-fail/attr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Fcompile-fail%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Fcompile-fail%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}\n+\n+#![lang(foo)] //~ ERROR An inner attribute was not permitted in this context.\n+fn foo() {}\n\\ No newline at end of file"}, {"sha": "397b49df915976e720808824ab77d70d4ab86b77", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[foo(bar)]\n+mod foo {\n+  #![feature(globs)]\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "12f568dd472afd1764351a3138c79e60060f7d01", "filename": "src/test/run-pass/attr-shebang.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr-shebang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-shebang.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -0,0 +1,4 @@\n+#![allow(unknown_features)]\n+#![feature(bogus)]\n+fn main() { }\n+// ignore-license\n\\ No newline at end of file"}, {"sha": "2f30eb8154ff1c61c06be63dd8c2dfe0881b97e5", "filename": "src/test/run-pass/attr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e00cf613428d24d305a89e4f8e79b70ea8e8322/src%2Ftest%2Frun-pass%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr.rs?ref=4e00cf613428d24d305a89e4f8e79b70ea8e8322", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[main]\n+fn foo() {\n+}"}]}