{"sha": "98d20490f4dd104f684f52e33adbdbedc92ab720", "node_id": "C_kwDOAAsO6NoAKDk4ZDIwNDkwZjRkZDEwNGY2ODRmNTJlMzNhZGJkYmVkYzkyYWI3MjA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T12:58:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T13:45:00Z"}, "message": "move some POSIX file shims from linux to unix module", "tree": {"sha": "dec3f05e82547915cdc0e94be89d703908ce5463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dec3f05e82547915cdc0e94be89d703908ce5463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d20490f4dd104f684f52e33adbdbedc92ab720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d20490f4dd104f684f52e33adbdbedc92ab720", "html_url": "https://github.com/rust-lang/rust/commit/98d20490f4dd104f684f52e33adbdbedc92ab720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d20490f4dd104f684f52e33adbdbedc92ab720/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c5eaf8bc4f2447a3f363e390e10d6090e2fd4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c5eaf8bc4f2447a3f363e390e10d6090e2fd4b", "html_url": "https://github.com/rust-lang/rust/commit/24c5eaf8bc4f2447a3f363e390e10d6090e2fd4b"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "43b0f7df7f01f613f9ee238d92630203efacead2", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=98d20490f4dd104f684f52e33adbdbedc92ab720", "patch": "@@ -62,6 +62,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.open(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"close\" => {\n+                let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.close(fd)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n             \"fcntl\" => {\n                 // `fcntl` is variadic. The argument count is checked based on the first argument\n                 // in `this.fcntl()`, so we do not use `check_shim` here.\n@@ -112,17 +117,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.rmdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"opendir\" => {\n+                let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.opendir(name)?;\n+                this.write_scalar(result, dest)?;\n+            }\n             \"closedir\" => {\n                 let [dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.closedir(dirp)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"lseek\" | \"lseek64\" => {\n+            \"lseek64\" => {\n                 let [fd, offset, whence] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.lseek64(fd, offset, whence)?;\n-                // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n+            \"ftruncate64\" => {\n+                let [fd, length] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.ftruncate64(fd, length)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n             \"fsync\" => {\n                 let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.fsync(fd)?;"}, {"sha": "d89a2c78f4b1992345961611434faa3e6ed4173f", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=98d20490f4dd104f684f52e33adbdbedc92ab720", "patch": "@@ -30,29 +30,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // File related shims (but also see \"syscall\" below for statx)\n-            // These symbols have different names on Linux and macOS, which is the only reason they are not\n-            // in the `posix` module.\n-            \"close\" => {\n-                let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.close(fd)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n-            \"opendir\" => {\n-                let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.opendir(name)?;\n-                this.write_scalar(result, dest)?;\n-            }\n             \"readdir64\" => {\n                 let [dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.linux_readdir64(dirp)?;\n                 this.write_scalar(result, dest)?;\n             }\n-            \"ftruncate64\" => {\n-                let [fd, length] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.ftruncate64(fd, length)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n             // Linux-only\n             \"posix_fadvise\" => {\n                 let [fd, offset, len, advice] ="}, {"sha": "089a082fa369916eac548e0815d953291813d492", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d20490f4dd104f684f52e33adbdbedc92ab720/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=98d20490f4dd104f684f52e33adbdbedc92ab720", "patch": "@@ -28,7 +28,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // File related shims\n-            \"close\" | \"close$NOCANCEL\" => {\n+            \"close$NOCANCEL\" => {\n                 let [result] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n@@ -50,7 +50,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"opendir\" | \"opendir$INODE64\" => {\n+            \"opendir$INODE64\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n@@ -61,9 +61,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.macos_readdir_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"lseek\" => {\n+                let [fd, offset, whence] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                // macOS is 64bit-only, so this is lseek64\n+                let result = this.lseek64(fd, offset, whence)?;\n+                this.write_scalar(Scalar::from_i64(result), dest)?;\n+            }\n             \"ftruncate\" => {\n                 let [fd, length] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                // macOS is 64bit-only, so this is ftruncate64\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }"}]}