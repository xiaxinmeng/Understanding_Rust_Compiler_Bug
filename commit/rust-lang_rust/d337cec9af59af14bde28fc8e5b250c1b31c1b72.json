{"sha": "d337cec9af59af14bde28fc8e5b250c1b31c1b72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzdjZWM5YWY1OWFmMTRiZGUyOGZjOGU1YjI1MGMxYjMxYzFiNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-29T05:24:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-29T05:24:45Z"}, "message": "Auto merge of #84684 - jackh726:rollup-qxc5cos, r=jackh726\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #84484 (Don't rebuild rustdoc and clippy after checking bootstrap)\n - #84530 (`test tidy` should ignore alternative `build` dir patterns)\n - #84531 (Ignore commented out lines when finding features)\n - #84540 (Build sanitizers for x86_64-unknown-linux-musl)\n - #84555 (Set `backtrace-on-ice` by default for compiler and codegen profiles)\n - #84585 (Add `x.py check src/librustdoc` as an alias for `x.py check src/tools/rustdoc`)\n - #84636 (rustdoc: change aliases attribute to data-aliases)\n - #84646 (Add some regression tests related to #82494)\n - #84661 (Remove extra word in `rustc_mir` docs)\n - #84663 (Remove `DropGuard` in `sys::windows::process` and use `StaticMutex` instead)\n - #84668 (Update books)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c0e10863dd07c1f69287bc7b245d0d92a33b63f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e10863dd07c1f69287bc7b245d0d92a33b63f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d337cec9af59af14bde28fc8e5b250c1b31c1b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d337cec9af59af14bde28fc8e5b250c1b31c1b72", "html_url": "https://github.com/rust-lang/rust/commit/d337cec9af59af14bde28fc8e5b250c1b31c1b72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d337cec9af59af14bde28fc8e5b250c1b31c1b72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ada102456de38e462b4f00473dd923f15dc3f296", "url": "https://api.github.com/repos/rust-lang/rust/commits/ada102456de38e462b4f00473dd923f15dc3f296", "html_url": "https://github.com/rust-lang/rust/commit/ada102456de38e462b4f00473dd923f15dc3f296"}, {"sha": "5d2ac6f7a5891c205078ad7cb983111c8d600052", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2ac6f7a5891c205078ad7cb983111c8d600052", "html_url": "https://github.com/rust-lang/rust/commit/5d2ac6f7a5891c205078ad7cb983111c8d600052"}], "stats": {"total": 188, "additions": 145, "deletions": 43}, "files": [{"sha": "d27fcb2f26f19bce0f529f2b278523973baf0594", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -97,7 +97,7 @@ mod relate_tys;\n \n /// Type checks the given `mir` in the context of the inference\n /// context `infcx`. Returns any region constraints that have yet to\n-/// be proven. This result is includes liveness constraints that\n+/// be proven. This result includes liveness constraints that\n /// ensure that regions appearing in the types of all local variables\n /// are live at all points where that local variable may later be\n /// used."}, {"sha": "a5799606142ec2b44e850399772a8fb14e84e3f2", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -19,9 +19,9 @@ use crate::sys::c;\n use crate::sys::cvt;\n use crate::sys::fs::{File, OpenOptions};\n use crate::sys::handle::Handle;\n-use crate::sys::mutex::Mutex;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n+use crate::sys_common::mutex::StaticMutex;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n use crate::sys_common::AsInner;\n \n@@ -94,10 +94,6 @@ pub struct StdioPipes {\n     pub stderr: Option<AnonPipe>,\n }\n \n-struct DropGuard<'a> {\n-    lock: &'a Mutex,\n-}\n-\n impl Command {\n     pub fn new(program: &OsStr) -> Command {\n         Command {\n@@ -209,8 +205,9 @@ impl Command {\n         //\n         // For more information, msdn also has an article about this race:\n         // http://support.microsoft.com/kb/315939\n-        static CREATE_PROCESS_LOCK: Mutex = Mutex::new();\n-        let _guard = DropGuard::new(&CREATE_PROCESS_LOCK);\n+        static CREATE_PROCESS_LOCK: StaticMutex = StaticMutex::new();\n+\n+        let _guard = unsafe { CREATE_PROCESS_LOCK.lock() };\n \n         let mut pipes = StdioPipes { stdin: None, stdout: None, stderr: None };\n         let null = Stdio::Null;\n@@ -259,23 +256,6 @@ impl fmt::Debug for Command {\n     }\n }\n \n-impl<'a> DropGuard<'a> {\n-    fn new(lock: &'a Mutex) -> DropGuard<'a> {\n-        unsafe {\n-            lock.lock();\n-            DropGuard { lock }\n-        }\n-    }\n-}\n-\n-impl<'a> Drop for DropGuard<'a> {\n-    fn drop(&mut self) {\n-        unsafe {\n-            self.lock.unlock();\n-        }\n-    }\n-}\n-\n impl Stdio {\n     fn to_handle(&self, stdio_id: c::DWORD, pipe: &mut Option<AnonPipe>) -> io::Result<Handle> {\n         match *self {"}, {"sha": "480b19a5e933685cde31dddb4c6076b1169c2174", "filename": "rustfmt.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -7,6 +7,8 @@ merge_derives = false\n # tidy only checks files which are not ignored, each entry follows gitignore style\n ignore = [\n     \"/build/\",\n+    \"/*-build/\",\n+    \"/build-*/\",\n     \"/vendor/\",\n \n     # tests for now are not formatted, as they are sometimes pretty-printing constrained"}, {"sha": "9b76c8b9a2d2643bf6f3bbf13197ecd63fc2d62c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -280,7 +280,7 @@ impl Step for CodegenBackend {\n }\n \n macro_rules! tool_check_step {\n-    ($name:ident, $path:expr, $source_type:expr) => {\n+    ($name:ident, $path:literal, $($alias:literal, )* $source_type:path) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n         pub struct $name {\n             pub target: TargetSelection,\n@@ -292,7 +292,7 @@ macro_rules! tool_check_step {\n             const DEFAULT: bool = true;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-                run.path($path)\n+                run.paths(&[ $path, $($alias),* ])\n             }\n \n             fn make_run(run: RunConfig<'_>) {\n@@ -321,11 +321,9 @@ macro_rules! tool_check_step {\n                 }\n \n                 // Enable internal lints for clippy and rustdoc\n-                // NOTE: this intentionally doesn't enable lints for any other tools,\n-                // see https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n-                if $path == \"src/tools/rustdoc\" || $path == \"src/tools/clippy\" {\n-                    cargo.rustflag(\"-Zunstable-options\");\n-                }\n+                // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`\n+                // See https://github.com/rust-lang/rust/pull/80573#issuecomment-754010776\n+                cargo.rustflag(\"-Zunstable-options\");\n \n                 builder.info(&format!(\n                     \"Checking stage{} {} artifacts ({} -> {})\",\n@@ -363,7 +361,7 @@ macro_rules! tool_check_step {\n     };\n }\n \n-tool_check_step!(Rustdoc, \"src/tools/rustdoc\", SourceType::InTree);\n+tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InTree);\n // Clippy is a hybrid. It is an external tool, but uses a git subtree instead\n // of a submodule. Since the SourceType only drives the deny-warnings\n // behavior, treat it as in-tree so that any new warnings in clippy will be"}, {"sha": "011ff6821b771acb8ed4b8a7e5b8c216b7007652", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -11,3 +11,5 @@ assertions = true\n debug-logging = true\n # This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n incremental = true\n+# Print backtrace on internal compiler errors during bootstrap\n+backtrace-on-ice = true"}, {"sha": "4d689d117bc0d0731c0805c7ffb8e241704c97f1", "filename": "src/bootstrap/defaults/config.compiler.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -6,6 +6,8 @@\n debug-logging = true\n # This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n incremental = true\n+# Print backtrace on internal compiler errors during bootstrap\n+backtrace-on-ice = true\n \n [llvm]\n # Will download LLVM from CI if available on your platform."}, {"sha": "ea70771a570acbcca01a3cce3d77dfbf888c3f34", "filename": "src/ci/docker/host-x86_64/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -38,6 +38,7 @@ ENV HOSTS=x86_64-unknown-linux-musl\n ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-x86_64=/usr/local/x86_64-linux-musl \\\n       --enable-extended \\\n+      --enable-sanitizers \\\n       --enable-profiler \\\n       --enable-lld \\\n       --set target.x86_64-unknown-linux-musl.crt-static=false \\"}, {"sha": "50dd06cb71beb27fdc0eebade5509cdcc1f821ed", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1 +1 @@\n-Subproject commit b54090a99ec7c4b46a5203a9c927fdbc311bb1f5\n+Subproject commit 50dd06cb71beb27fdc0eebade5509cdcc1f821ed"}, {"sha": "d23f9da8469617e6c81121d9fd123443df70595d", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1 +1 @@\n-Subproject commit e1abb17cd94cd5a8a374b48e1bc8134a2208ed48\n+Subproject commit d23f9da8469617e6c81121d9fd123443df70595d"}, {"sha": "e0a721f5202e6d9bec0aff99f10e44480c0da9e7", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1 +1 @@\n-Subproject commit c80f0b09fc15b9251825343be910c08531938ab2\n+Subproject commit e0a721f5202e6d9bec0aff99f10e44480c0da9e7"}, {"sha": "e72b43a64925ce053dc7830e21c1a57ba00499bd", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1 +1 @@\n-Subproject commit a9bd2bbf31e4f92b5d3d8e80b22839d0cc7a2022\n+Subproject commit e72b43a64925ce053dc7830e21c1a57ba00499bd"}, {"sha": "7de72d819872582a322a1f77cafe3bbbe3909e06", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1546,7 +1546,7 @@ fn render_impl(\n         let aliases = if aliases.is_empty() {\n             String::new()\n         } else {\n-            format!(\" aliases=\\\"{}\\\"\", aliases.join(\",\"))\n+            format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n         };\n         if let Some(use_absolute) = use_absolute {\n             write!("}, {"sha": "95b18490641ffbb1c7e2f47fea9cdad1f45868b4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -834,7 +834,7 @@ function hideThemeButtonState() {\n             // (like \"Send\" and \"Sync\").\n             var inlined_types = new Set();\n             onEachLazy(synthetic_implementors.getElementsByClassName(\"impl\"), function(el) {\n-                var aliases = el.getAttribute(\"aliases\");\n+                var aliases = el.getAttribute(\"data-aliases\");\n                 if (!aliases) {\n                     return;\n                 }"}, {"sha": "985aeedabb106589a43f5fef70f63ea079e4adc9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -16,7 +16,7 @@\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n-#![deny(rustc::internal)]\n+#![warn(rustc::internal)]\n \n #[macro_use]\n extern crate lazy_static;"}, {"sha": "56e0770ab5c49bb3b6325aecfb94ef644e771af6", "filename": "src/test/rustdoc/auto_aliases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Frustdoc%2Fauto_aliases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto_aliases.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -1,6 +1,6 @@\n #![feature(auto_traits)]\n \n-// @has auto_aliases/trait.Bar.html '//h3[@aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n+// @has auto_aliases/trait.Bar.html '//h3[@data-aliases=\"auto_aliases::Foo\"]' 'impl Bar for Foo'\n pub struct Foo;\n \n pub auto trait Bar {}"}, {"sha": "3a59ca049ba3e8487dddc7416cb1b657a2af6a91", "filename": "src/test/ui/typeck/issue-75883.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for #75883.\n+\n+pub struct UI {}\n+\n+impl UI {\n+    pub fn run() -> Result<_> {\n+        //~^ ERROR: this enum takes 2 type arguments but only 1 type argument was supplied\n+        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n+        let mut ui = UI {};\n+        ui.interact();\n+\n+        unimplemented!();\n+    }\n+\n+    pub fn interact(&mut self) -> Result<_> {\n+        //~^ ERROR: this enum takes 2 type arguments but only 1 type argument was supplied\n+        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a6b2eb8f9727cdeb4a75af55f175ae1bc34ec782", "filename": "src/test/ui/typeck/issue-75883.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -0,0 +1,52 @@\n+error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/issue-75883.rs:6:21\n+   |\n+LL |     pub fn run() -> Result<_> {\n+   |                     ^^^^^^ - supplied 1 type argument\n+   |                     |\n+   |                     expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing type argument\n+   |\n+LL |     pub fn run() -> Result<_, E> {\n+   |                             ^^^\n+\n+error[E0107]: this enum takes 2 type arguments but only 1 type argument was supplied\n+  --> $DIR/issue-75883.rs:15:35\n+   |\n+LL |     pub fn interact(&mut self) -> Result<_> {\n+   |                                   ^^^^^^ - supplied 1 type argument\n+   |                                   |\n+   |                                   expected 2 type arguments\n+   |\n+note: enum defined here, with 2 type parameters: `T`, `E`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   |          ^^^^^^ -  -\n+help: add missing type argument\n+   |\n+LL |     pub fn interact(&mut self) -> Result<_, E> {\n+   |                                           ^^^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-75883.rs:15:42\n+   |\n+LL |     pub fn interact(&mut self) -> Result<_> {\n+   |                                          ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-75883.rs:6:28\n+   |\n+LL |     pub fn run() -> Result<_> {\n+   |                            ^ not allowed in type signatures\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0121.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "6791976196f36a1e72087e2f47dfec5c3360ef3c", "filename": "src/test/ui/typeck/issue-80779.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for #80779.\n+\n+pub struct T<'a>(&'a str);\n+\n+pub fn f<'a>(val: T<'a>) -> _ {\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+    g(val)\n+}\n+\n+pub fn g(_: T<'static>) -> _ {}\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+\n+fn main() {}"}, {"sha": "aca494520f8b2a1b6bb95a602d6927d13d32739a", "filename": "src/test/ui/typeck/issue-80779.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-80779.rs:10:28\n+   |\n+LL | pub fn g(_: T<'static>) -> _ {}\n+   |                            ^\n+   |                            |\n+   |                            not allowed in type signatures\n+   |                            help: replace with the correct return type: `()`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-80779.rs:5:29\n+   |\n+LL | pub fn f<'a>(val: T<'a>) -> _ {\n+   |                             ^\n+   |                             |\n+   |                             not allowed in type signatures\n+   |                             help: replace with the correct return type: `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "8c74284fa46ea3695c4804752b431abdd42bc42f", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -17,7 +17,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n // warn on rustc internal lints\n-#![deny(rustc::internal)]\n+#![warn(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "750a23e8c9841f4dcf29670cecb2b8f6e047b182", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -4,7 +4,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n // warn on rustc internal lints\n-#![deny(rustc::internal)]\n+#![warn(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "b14b5aeb57236672600b9d1e3c864f5affa1643a", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d337cec9af59af14bde28fc8e5b250c1b31c1b72/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d337cec9af59af14bde28fc8e5b250c1b31c1b72", "patch": "@@ -423,6 +423,15 @@ fn map_lib_features(\n                         continue;\n                     }};\n                 }\n+\n+                lazy_static::lazy_static! {\n+                    static ref COMMENT_LINE: Regex = Regex::new(r\"^\\s*//\").unwrap();\n+                }\n+                // exclude commented out lines\n+                if COMMENT_LINE.is_match(line) {\n+                    continue;\n+                }\n+\n                 if let Some((ref name, ref mut f)) = becoming_feature {\n                     if f.tracking_issue.is_none() {\n                         f.tracking_issue = find_attr_val(line, \"issue\").and_then(handle_issue_none);"}]}