{"sha": "3bad50e11472339d3477c605adb90034c476c8b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWQ1MGUxMTQ3MjMzOWQzNDc3YzYwNWFkYjkwMDM0YzQ3NmM4Yjg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T06:11:44Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T06:11:44Z"}, "message": "Rename PrimVal::from_{u,}int to from_{u,i}64.", "tree": {"sha": "7617d4400612ae50b9fc0302abdcf0fb3ba333bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7617d4400612ae50b9fc0302abdcf0fb3ba333bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bad50e11472339d3477c605adb90034c476c8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bad50e11472339d3477c605adb90034c476c8b8", "html_url": "https://github.com/rust-lang/rust/commit/3bad50e11472339d3477c605adb90034c476c8b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bad50e11472339d3477c605adb90034c476c8b8/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83c45e3671a47100275aa3aff65e6436a716000", "url": "https://api.github.com/repos/rust-lang/rust/commits/f83c45e3671a47100275aa3aff65e6436a716000", "html_url": "https://github.com/rust-lang/rust/commit/f83c45e3671a47100275aa3aff65e6436a716000"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "7108286193fe12c73e7a85629f4a5e84bcdc30ea", "filename": "src/eval_context.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bad50e11472339d3477c605adb90034c476c8b8/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad50e11472339d3477c605adb90034c476c8b8/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=3bad50e11472339d3477c605adb90034c476c8b8", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let ptr = self.memory.allocate(s.len() as u64, 1)?;\n         self.memory.write_bytes(ptr, s.as_bytes())?;\n         self.memory.freeze(ptr.alloc_id)?;\n-        Ok(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::from_uint(s.len() as u64)))\n+        Ok(Value::ByValPair(PrimVal::Ptr(ptr), PrimVal::from_u64(s.len() as u64)))\n     }\n \n     pub(super) fn const_to_value(&mut self, const_val: &ConstVal) -> EvalResult<'tcx, Value> {\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty)?, Some(0));\n                                 }\n-                                self.write_primval(dest, PrimVal::from_int(0), dest_ty)?;\n+                                self.write_primval(dest, PrimVal::from_i64(0), dest_ty)?;\n                             }\n                         } else {\n                             bug!(\"tried to assign {:?} to Layout::RawNullablePointer\", kind);\n@@ -557,7 +557,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let src = self.eval_lvalue(lvalue)?;\n                 let ty = self.lvalue_ty(lvalue);\n                 let (_, len) = src.elem_ty_and_len(ty);\n-                self.write_primval(dest, PrimVal::from_uint(len), dest_ty)?;\n+                self.write_primval(dest, PrimVal::from_u64(len), dest_ty)?;\n             }\n \n             Ref(_, _, ref lvalue) => {\n@@ -567,7 +567,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 let val = match extra {\n                     LvalueExtra::None => Value::ByVal(ptr),\n-                    LvalueExtra::Length(len) => Value::ByValPair(ptr, PrimVal::from_uint(len)),\n+                    LvalueExtra::Length(len) => Value::ByValPair(ptr, PrimVal::from_u64(len)),\n                     LvalueExtra::Vtable(vtable) => Value::ByValPair(ptr, PrimVal::Ptr(vtable)),\n                     LvalueExtra::DowncastVariant(..) =>\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n@@ -1132,7 +1132,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     I64 => 8,\n                     Is => self.memory.pointer_size(),\n                 };\n-                PrimVal::from_int(self.memory.read_int(ptr, size)?)\n+                PrimVal::from_i64(self.memory.read_int(ptr, size)?)\n             }\n \n             ty::TyUint(uint_ty) => {\n@@ -1144,7 +1144,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     U64 => 8,\n                     Us => self.memory.pointer_size(),\n                 };\n-                PrimVal::from_uint(self.memory.read_uint(ptr, size)?)\n+                PrimVal::from_u64(self.memory.read_uint(ptr, size)?)\n             }\n \n             ty::TyFloat(FloatTy::F32) => PrimVal::from_f32(self.memory.read_f32(ptr)?),\n@@ -1163,7 +1163,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let extra = match self.tcx.struct_tail(ty).sty {\n                         ty::TyDynamic(..) => PrimVal::Ptr(self.memory.read_ptr(extra)?),\n                         ty::TySlice(..) |\n-                        ty::TyStr => PrimVal::from_uint(self.memory.read_usize(extra)?),\n+                        ty::TyStr => PrimVal::from_u64(self.memory.read_usize(extra)?),\n                         _ => bug!(\"unsized primval ptr read from {:?}\", ty),\n                     };\n                     return Ok(Some(Value::ByValPair(PrimVal::Ptr(p), extra)));\n@@ -1175,9 +1175,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 if let CEnum { discr, signed, .. } = *self.type_layout(ty)? {\n                     let size = discr.size().bytes();\n                     if signed {\n-                        PrimVal::from_int(self.memory.read_int(ptr, size)?)\n+                        PrimVal::from_i64(self.memory.read_int(ptr, size)?)\n                     } else {\n-                        PrimVal::from_uint(self.memory.read_uint(ptr, size)?)\n+                        PrimVal::from_u64(self.memory.read_uint(ptr, size)?)\n                     }\n                 } else {\n                     return Ok(None);\n@@ -1224,7 +1224,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                     (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n                         let ptr = src.read_ptr(&self.memory)?;\n-                        let len = PrimVal::from_uint(length as u64);\n+                        let len = PrimVal::from_u64(length as u64);\n                         let ptr = PrimVal::Ptr(ptr);\n                         self.write_value(Value::ByValPair(ptr, len), dest, dest_ty)?;\n                     }"}, {"sha": "af99d47dda7753535885fc76ca444490bec774ba", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bad50e11472339d3477c605adb90034c476c8b8/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad50e11472339d3477c605adb90034c476c8b8/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=3bad50e11472339d3477c605adb90034c476c8b8", "patch": "@@ -259,15 +259,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"min_align_of\" => {\n                 let elem_ty = substs.type_at(0);\n                 let elem_align = self.type_align(elem_ty)?;\n-                let align_val = PrimVal::from_uint(elem_align as u64);\n+                let align_val = PrimVal::from_u64(elem_align as u64);\n                 self.write_primval(dest, align_val, dest_ty)?;\n             }\n \n             \"pref_align_of\" => {\n                 let ty = substs.type_at(0);\n                 let layout = self.type_layout(ty)?;\n                 let align = layout.align(&self.tcx.data_layout).pref();\n-                let align_val = PrimVal::from_uint(align);\n+                let align_val = PrimVal::from_u64(align);\n                 self.write_primval(dest, align_val, dest_ty)?;\n             }\n \n@@ -336,20 +336,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // .expect(\"size_of intrinsic called on unsized value\")\n                 // see https://github.com/rust-lang/rust/pull/37708\n                 let size = self.type_size(ty)?.unwrap_or(!0) as u64;\n-                self.write_primval(dest, PrimVal::from_uint(size), dest_ty)?;\n+                self.write_primval(dest, PrimVal::from_u64(size), dest_ty)?;\n             }\n \n             \"size_of_val\" => {\n                 let ty = substs.type_at(0);\n                 let (size, _) = self.size_and_align_of_dst(ty, arg_vals[0])?;\n-                self.write_primval(dest, PrimVal::from_uint(size), dest_ty)?;\n+                self.write_primval(dest, PrimVal::from_u64(size), dest_ty)?;\n             }\n \n             \"min_align_of_val\" |\n             \"align_of_val\" => {\n                 let ty = substs.type_at(0);\n                 let (_, align) = self.size_and_align_of_dst(ty, arg_vals[0])?;\n-                self.write_primval(dest, PrimVal::from_uint(align), dest_ty)?;\n+                self.write_primval(dest, PrimVal::from_u64(align), dest_ty)?;\n             }\n \n             \"type_name\" => {"}, {"sha": "c7c81e5c947d61280daaed531695f584a05370d8", "filename": "src/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad50e11472339d3477c605adb90034c476c8b8/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad50e11472339d3477c605adb90034c476c8b8/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=3bad50e11472339d3477c605adb90034c476c8b8", "patch": "@@ -137,11 +137,11 @@ impl<'tcx> PrimVal {\n         }\n     }\n \n-    pub fn from_uint(n: u64) -> Self {\n+    pub fn from_u64(n: u64) -> Self {\n         PrimVal::Bytes(n)\n     }\n \n-    pub fn from_int(n: i64) -> Self {\n+    pub fn from_i64(n: i64) -> Self {\n         PrimVal::Bytes(n as u64)\n     }\n "}]}