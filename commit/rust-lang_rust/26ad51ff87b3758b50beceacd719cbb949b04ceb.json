{"sha": "26ad51ff87b3758b50beceacd719cbb949b04ceb", "node_id": "C_kwDOAAsO6NoAKDI2YWQ1MWZmODdiMzc1OGI1MGJlY2VhY2Q3MTljYmI5NDliMDRjZWI", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-26T23:30:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T23:30:57Z"}, "message": "Rollup merge of #103567 - RalfJung:ptr-eq-dyn-trait, r=dtolnay\n\nptr::eq: clarify that comparing dyn Trait is fragile\n\nAlso remove the dyn trait example from `ptr::eq` since those tests are not actually guaranteed to pass due to how unstable vtable comparison is.\n\nCc ``@rust-lang/libs-api``\nCc discussion following https://github.com/rust-lang/rust/pull/80505", "tree": {"sha": "d0659b93cf233caa148aa78f5d61fe69aa2e6c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0659b93cf233caa148aa78f5d61fe69aa2e6c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ad51ff87b3758b50beceacd719cbb949b04ceb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWcMxCRBK7hj4Ov3rIwAAsB4IAAD/Dl9qnS104yV2Mz356Oyl\n72ckfhKA8A1TkPYhatOw31DeD8UnvgeNLUY8gn25TkFPDWQD4S9gsC8bOeN2GQ5h\nK+R4jjrNqXIivNE8GAiI/UP4l1HGaATNO8RiaJRMPvVkNHQs2o7ajVYAgEiUksVz\njMEJHJ7wKclpszb30PHclS74v3ucXMb/pESGYb9gxYR9OCba/B1md9GeQK5sJoMM\n2heBgTc4QNq7bJr3ATKxOxhX6+68aGTe+pZVsNuLzOL8YuZKSLzUlBBC807F/x2P\nU+GjuyhyY9KVRcjlOj7OfUTlX2ZoYyh16BhWpTkaQ0YMhZ+kaDE2O1t3Sy7H7Bo=\n=s4lW\n-----END PGP SIGNATURE-----\n", "payload": "tree d0659b93cf233caa148aa78f5d61fe69aa2e6c15\nparent 3bfe39ee26f171c6f934f374206849654a7a6ebd\nparent 1946a1842e3e12be48d1e9e6f874c3924d58b8fc\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666827057 +0900\ncommitter GitHub <noreply@github.com> 1666827057 +0900\n\nRollup merge of #103567 - RalfJung:ptr-eq-dyn-trait, r=dtolnay\n\nptr::eq: clarify that comparing dyn Trait is fragile\n\nAlso remove the dyn trait example from `ptr::eq` since those tests are not actually guaranteed to pass due to how unstable vtable comparison is.\n\nCc ``@rust-lang/libs-api``\nCc discussion following https://github.com/rust-lang/rust/pull/80505\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ad51ff87b3758b50beceacd719cbb949b04ceb", "html_url": "https://github.com/rust-lang/rust/commit/26ad51ff87b3758b50beceacd719cbb949b04ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ad51ff87b3758b50beceacd719cbb949b04ceb/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bfe39ee26f171c6f934f374206849654a7a6ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfe39ee26f171c6f934f374206849654a7a6ebd", "html_url": "https://github.com/rust-lang/rust/commit/3bfe39ee26f171c6f934f374206849654a7a6ebd"}, {"sha": "1946a1842e3e12be48d1e9e6f874c3924d58b8fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1946a1842e3e12be48d1e9e6f874c3924d58b8fc", "html_url": "https://github.com/rust-lang/rust/commit/1946a1842e3e12be48d1e9e6f874c3924d58b8fc"}], "stats": {"total": 61, "additions": 16, "deletions": 45}, "files": [{"sha": "006d813e5f9fa8c65334b135eb9e98db9e73046e", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=26ad51ff87b3758b50beceacd719cbb949b04ceb", "patch": "@@ -1110,8 +1110,8 @@ impl<T: ?Sized> Rc<T> {\n \n     #[inline]\n     #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n-    /// Returns `true` if the two `Rc`s point to the same allocation\n-    /// (in a vein similar to [`ptr::eq`]).\n+    /// Returns `true` if the two `Rc`s point to the same allocation in a vein similar to\n+    /// [`ptr::eq`]. See [that function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n     ///\n     /// # Examples\n     ///\n@@ -2419,9 +2419,9 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n-    /// Returns `true` if the two `Weak`s point to the same allocation (similar to\n-    /// [`ptr::eq`]), or if both don't point to any allocation\n-    /// (because they were created with `Weak::new()`).\n+    /// Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\n+    /// both don't point to any allocation (because they were created with `Weak::new()`). See [that\n+    /// function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n     ///\n     /// # Notes\n     ///"}, {"sha": "81cd770748854a9fd42e5ccebd4cd0f475d4d0b8", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=26ad51ff87b3758b50beceacd719cbb949b04ceb", "patch": "@@ -1117,8 +1117,8 @@ impl<T: ?Sized> Arc<T> {\n         drop(Weak { ptr: self.ptr });\n     }\n \n-    /// Returns `true` if the two `Arc`s point to the same allocation\n-    /// (in a vein similar to [`ptr::eq`]).\n+    /// Returns `true` if the two `Arc`s point to the same allocation in a vein similar to\n+    /// [`ptr::eq`]. See [that function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n     ///\n     /// # Examples\n     ///\n@@ -2069,9 +2069,9 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n-    /// Returns `true` if the two `Weak`s point to the same allocation (similar to\n-    /// [`ptr::eq`]), or if both don't point to any allocation\n-    /// (because they were created with `Weak::new()`).\n+    /// Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\n+    /// both don't point to any allocation (because they were created with `Weak::new()`). See [that\n+    /// function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n     ///\n     /// # Notes\n     ///"}, {"sha": "3a70981d2e1388f188bb87ae08352bfde46b3762", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ad51ff87b3758b50beceacd719cbb949b04ceb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=26ad51ff87b3758b50beceacd719cbb949b04ceb", "patch": "@@ -1733,6 +1733,12 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n /// by their address rather than comparing the values they point to\n /// (which is what the `PartialEq for &T` implementation does).\n ///\n+/// When comparing wide pointers, both the address and the metadata are tested for equality.\n+/// However, note that comparing trait object pointers (`*const dyn Trait`) is unrealiable: pointers\n+/// to values of the same underlying type can compare inequal (because vtables are duplicated in\n+/// multiple codegen units), and pointers to values of *different* underlying type can compare equal\n+/// (since identical vtables can be deduplicated within a codegen unit).\n+///\n /// # Examples\n ///\n /// ```\n@@ -1759,41 +1765,6 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n /// assert!(!std::ptr::eq(&a[..2], &a[..3]));\n /// assert!(!std::ptr::eq(&a[0..2], &a[1..3]));\n /// ```\n-///\n-/// Traits are also compared by their implementation:\n-///\n-/// ```\n-/// #[repr(transparent)]\n-/// struct Wrapper { member: i32 }\n-///\n-/// trait Trait {}\n-/// impl Trait for Wrapper {}\n-/// impl Trait for i32 {}\n-///\n-/// let wrapper = Wrapper { member: 10 };\n-///\n-/// // Pointers have equal addresses.\n-/// assert!(std::ptr::eq(\n-///     &wrapper as *const Wrapper as *const u8,\n-///     &wrapper.member as *const i32 as *const u8\n-/// ));\n-///\n-/// // Objects have equal addresses, but `Trait` has different implementations.\n-/// assert!(!std::ptr::eq(\n-///     &wrapper as &dyn Trait,\n-///     &wrapper.member as &dyn Trait,\n-/// ));\n-/// assert!(!std::ptr::eq(\n-///     &wrapper as &dyn Trait as *const dyn Trait,\n-///     &wrapper.member as &dyn Trait as *const dyn Trait,\n-/// ));\n-///\n-/// // Converting the reference to a `*const u8` compares by address.\n-/// assert!(std::ptr::eq(\n-///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,\n-///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,\n-/// ));\n-/// ```\n #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n #[inline]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {"}]}