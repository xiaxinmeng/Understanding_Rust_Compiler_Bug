{"sha": "37903cbf4dbf71a5cd11ffb8444528cad297e30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTAzY2JmNGRiZjcxYTVjZDExZmZiODQ0NDUyOGNhZDI5N2UzMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-21T08:56:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-21T08:56:58Z"}, "message": "auto merge of #12290 : mrshu/rust/lint-warn-by-default, r=alexcrichton\n\nThis first part of my attempts to fix #11432.\r\n\r\nIn this one I only set NonCamelCaseTypes to warn by default and tried to fix errors that were reported by `make check`.\r\n\r\nPlease feel free to let me know if I missed something or didn't do it the right way.\r\n\r\nThanks.", "tree": {"sha": "6fdab7be699eaacffc8900bfd5273d1e6a0735cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fdab7be699eaacffc8900bfd5273d1e6a0735cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37903cbf4dbf71a5cd11ffb8444528cad297e30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37903cbf4dbf71a5cd11ffb8444528cad297e30d", "html_url": "https://github.com/rust-lang/rust/commit/37903cbf4dbf71a5cd11ffb8444528cad297e30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37903cbf4dbf71a5cd11ffb8444528cad297e30d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca41bbb2e300b98b81c83239f4f935291cc3003f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca41bbb2e300b98b81c83239f4f935291cc3003f", "html_url": "https://github.com/rust-lang/rust/commit/ca41bbb2e300b98b81c83239f4f935291cc3003f"}, {"sha": "70319f7b25e53d886cf15a33d2edb5220b1f736b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70319f7b25e53d886cf15a33d2edb5220b1f736b", "html_url": "https://github.com/rust-lang/rust/commit/70319f7b25e53d886cf15a33d2edb5220b1f736b"}], "stats": {"total": 190, "additions": 122, "deletions": 68}, "files": [{"sha": "527777a0ebad8184e10a462d8d6858752d12651d", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -11,17 +11,17 @@ which both pattern-match on their input and both return early in one case,\n doing nothing otherwise:\n \n ~~~~\n-# enum t { special_a(uint), special_b(uint) };\n+# enum T { SpecialA(uint), SpecialB(uint) };\n # fn f() -> uint {\n-# let input_1 = special_a(0);\n-# let input_2 = special_a(0);\n+# let input_1 = SpecialA(0);\n+# let input_2 = SpecialA(0);\n match input_1 {\n-    special_a(x) => { return x; }\n+    SpecialA(x) => { return x; }\n     _ => {}\n }\n // ...\n match input_2 {\n-    special_b(x) => { return x; }\n+    SpecialB(x) => { return x; }\n     _ => {}\n }\n # return 0u;\n@@ -37,22 +37,22 @@ lightweight custom syntax extensions, themselves defined using the\n the pattern in the above code:\n \n ~~~~\n-# enum t { special_a(uint), special_b(uint) };\n+# enum T { SpecialA(uint), SpecialB(uint) };\n # fn f() -> uint {\n-# let input_1 = special_a(0);\n-# let input_2 = special_a(0);\n+# let input_1 = SpecialA(0);\n+# let input_2 = SpecialA(0);\n macro_rules! early_return(\n-    ($inp:expr $sp:ident) => ( // invoke it like `(input_5 special_e)`\n+    ($inp:expr $sp:ident) => ( // invoke it like `(input_5 SpecialE)`\n         match $inp {\n             $sp(x) => { return x; }\n             _ => {}\n         }\n     );\n )\n // ...\n-early_return!(input_1 special_a);\n+early_return!(input_1 SpecialA);\n // ...\n-early_return!(input_2 special_b);\n+early_return!(input_2 SpecialB);\n # return 0;\n # }\n ~~~~\n@@ -155,10 +155,10 @@ separator token (a comma-separated list could be written `$(...),*`), and `+`\n instead of `*` to mean \"at least one\".\n \n ~~~~\n-# enum t { special_a(uint),special_b(uint),special_c(uint),special_d(uint)};\n+# enum T { SpecialA(uint),SpecialB(uint),SpecialC(uint),SpecialD(uint)};\n # fn f() -> uint {\n-# let input_1 = special_a(0);\n-# let input_2 = special_a(0);\n+# let input_1 = SpecialA(0);\n+# let input_2 = SpecialA(0);\n macro_rules! early_return(\n     ($inp:expr, [ $($sp:ident)|+ ]) => (\n         match $inp {\n@@ -170,9 +170,9 @@ macro_rules! early_return(\n     );\n )\n // ...\n-early_return!(input_1, [special_a|special_c|special_d]);\n+early_return!(input_1, [SpecialA|SpecialC|SpecialD]);\n // ...\n-early_return!(input_2, [special_b]);\n+early_return!(input_2, [SpecialB]);\n # return 0;\n # }\n ~~~~\n@@ -215,14 +215,14 @@ solves the problem.\n Now consider code like the following:\n \n ~~~~\n-# enum t1 { good_1(t2, uint), bad_1 };\n-# struct t2 { body: t3 }\n-# enum t3 { good_2(uint), bad_2};\n-# fn f(x: t1) -> uint {\n+# enum T1 { Good1(T2, uint), Bad1};\n+# struct T2 { body: T3 }\n+# enum T3 { Good2(uint), Bad2};\n+# fn f(x: T1) -> uint {\n match x {\n-    good_1(g1, val) => {\n+    Good1(g1, val) => {\n         match g1.body {\n-            good_2(result) => {\n+            Good2(result) => {\n                 // complicated stuff goes here\n                 return result + val;\n             },\n@@ -261,13 +261,13 @@ macro_rules! biased_match (\n     )\n )\n \n-# enum t1 { good_1(t2, uint), bad_1 };\n-# struct t2 { body: t3 }\n-# enum t3 { good_2(uint), bad_2};\n-# fn f(x: t1) -> uint {\n-biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n+# enum T1 { Good1(T2, uint), Bad1};\n+# struct T2 { body: T3 }\n+# enum T3 { Good2(uint), Bad2};\n+# fn f(x: T1) -> uint {\n+biased_match!((x)       ~ (Good1(g1, val)) else { return 0 };\n               binds g1, val )\n-biased_match!((g1.body) ~ (good_2(result) )\n+biased_match!((g1.body) ~ (Good2(result) )\n                   else { fail!(\"Didn't get good_2\") };\n               binds result )\n // complicated stuff goes here\n@@ -365,13 +365,13 @@ macro_rules! biased_match (\n )\n \n \n-# enum t1 { good_1(t2, uint), bad_1 };\n-# struct t2 { body: t3 }\n-# enum t3 { good_2(uint), bad_2};\n-# fn f(x: t1) -> uint {\n+# enum T1 { Good1(T2, uint), Bad1};\n+# struct T2 { body: T3 }\n+# enum T3 { Good2(uint), Bad2};\n+# fn f(x: T1) -> uint {\n biased_match!(\n-    (x)       ~ (good_1(g1, val)) else { return 0 };\n-    (g1.body) ~ (good_2(result) ) else { fail!(\"Didn't get good_2\") };\n+    (x)       ~ (Good1(g1, val)) else { return 0 };\n+    (g1.body) ~ (Good2(result) ) else { fail!(\"Didn't get Good2\") };\n     binds val, result )\n // complicated stuff goes here\n return result + val;"}, {"sha": "65a570f5f415fa2f6495d6fe012b99cc2e94342f", "filename": "src/doc/rust.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -470,7 +470,7 @@ Two examples of paths with type arguments:\n # use std::hashmap::HashMap;\n # fn f() {\n # fn id<T>(t: T) -> T { t }\n-type t = HashMap<int,~str>;  // Type arguments used in a type expression\n+type T = HashMap<int,~str>;  // Type arguments used in a type expression\n let x = id::<int>(10);         // Type arguments used in a call expression\n # }\n ~~~~\n@@ -701,7 +701,7 @@ An example of a module:\n \n ~~~~\n mod math {\n-    type complex = (f64, f64);\n+    type Complex = (f64, f64);\n     fn sin(f: f64) -> f64 {\n         ...\n # fail!();\n@@ -2824,13 +2824,13 @@ provided by an implementation of `std::iter::Iterator`.\n An example of a for loop over the contents of a vector:\n \n ~~~~\n-# type foo = int;\n-# fn bar(f: foo) { }\n+# type Foo = int;\n+# fn bar(f: Foo) { }\n # let a = 0;\n # let b = 0;\n # let c = 0;\n \n-let v: &[foo] = &[a, b, c];\n+let v: &[Foo] = &[a, b, c];\n \n for e in v.iter() {\n     bar(*e);"}, {"sha": "d1d2dba383d9d5bc11214fdd07311e4c7cbd6520", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,8 @@\n \n //! Blocking posix-based file I/O\n \n+#[allow(non_camel_case_types)];\n+\n use std::sync::arc::UnsafeArc;\n use std::c_str::CString;\n use std::io::IoError;"}, {"sha": "d58e4d54342c9784dc5cd20ecebcfed79d614e36", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use std::cast;\n use std::io::net::ip;\n use std::io;"}, {"sha": "0f3ed1482294b3d989d05d80a1976a9ad60c6f66", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -20,6 +20,8 @@\n //! can be created in the future and there must be no active timers at that\n //! time.\n \n+#[allow(non_camel_case_types)];\n+\n use std::cast;\n use std::rt;\n use std::unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n@@ -98,6 +100,7 @@ mod imp {\n \n     use io::file::FileDesc;\n \n+    #[allow(non_camel_case_types)]\n     pub type signal = libc::c_int;\n \n     pub fn new() -> (signal, signal) {"}, {"sha": "3a060194a69ac45eb1fbc1ac6e9fda26377c4e4d", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -46,6 +46,8 @@\n //!\n //! Note that all time units in this file are in *milliseconds*.\n \n+#[allow(non_camel_case_types)];\n+\n use std::comm::Data;\n use std::hashmap::HashMap;\n use std::libc;"}, {"sha": "b1ae582088801aae9697b99a4f6c8fbadfe32f38", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -28,6 +28,8 @@\n //!\n //! As with timer_other, all units in this file are in units of millseconds.\n \n+#[allow(non_camel_case_types)];\n+\n use std::comm::Data;\n use std::libc;\n use std::ptr;"}, {"sha": "044b5c7017c15d874516c37a8cee3d855c05f592", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n pub struct t {\n     module_asm: ~str,"}, {"sha": "d565e378af4313262939361f4b5896f056bead8e", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(non_uppercase_pattern_statics)];\n+#[allow(non_camel_case_types)];\n \n use std::c_str::ToCStr;\n use std::cell::RefCell;"}, {"sha": "9cf4df287d2f46404d65c4821c3ffb1975be229e", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use std::cast;\n use syntax::crateid::CrateId;\n "}, {"sha": "d361ee569362c0567311068de584f406db536258", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n //! Validates all used crates and extern libraries and loads their metadata\n \n use driver::{driver, session};"}, {"sha": "f238bc880a32660d5cdd6885e159e0151c883b2f", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -10,6 +10,7 @@\n \n // Searching for information from the cstore\n \n+#[allow(non_camel_case_types)];\n \n use metadata::common::*;\n use metadata::cstore;"}, {"sha": "8c2c05b96cd010bbaeb5348b640974e8d4673292", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n // The crate store - a central repo for information collected about external\n // crates and libraries"}, {"sha": "47fcc4534897cdc76f29cc7bfd76174bfdc67836", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,7 @@\n \n // Decoding metadata from a single crate's metadata\n \n+#[allow(non_camel_case_types)];\n \n use metadata::cstore::crate_metadata;\n use metadata::common::*;"}, {"sha": "d2b843cdcf7e9058799e8e9b12f3c70c59663ea1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,6 +11,7 @@\n // Metadata encoding\n \n #[allow(unused_must_use)]; // everything is just a MemWriter, can't fail\n+#[allow(non_camel_case_types)];\n \n use metadata::common::*;\n use metadata::cstore;"}, {"sha": "42231ce1b4763f1c54b82dda934abfeb82002605", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use std::cell::RefCell;\n use std::option;\n use std::os;"}, {"sha": "c78721cdf4c8a021b54a7d8e9fa002fa2cad2181", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,6 +14,7 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n+#[allow(non_camel_case_types)];\n \n use middle::ty;\n "}, {"sha": "545c66063916ef9d00e4ed12284cb29eca2ec342", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,6 +11,7 @@\n // Type encoding\n \n #[allow(unused_must_use)]; // as with encoding, everything is a no-fail MemWriter\n+#[allow(non_camel_case_types)];\n \n use std::cell::RefCell;\n use std::hashmap::HashMap;"}, {"sha": "8cc52627fcc93fc9bf9bfef2c959da6c61df4c04", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use c = metadata::common;\n use cstore = metadata::cstore;"}, {"sha": "c7157ad1703a63b0eba14d8e7cb6ff20da1403aa", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,7 @@\n \n /*! See doc.rs for a thorough explanation of the borrow checker */\n \n+#[allow(non_camel_case_types)];\n \n use mc = middle::mem_categorization;\n use middle::ty;"}, {"sha": "c0789e0aa8536c34fa410ae513e411cf84617b41", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};"}, {"sha": "9cf055cad9d5471c4c7693c08964ab40f1d08e69", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use metadata::csearch;\n use middle::astencode;"}, {"sha": "4c488067ad350d1471075cbb89f3d7f6125f79ae", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,6 +11,7 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n+#[allow(non_camel_case_types)];\n \n use middle::resolve;\n use middle::ty;"}, {"sha": "28436093a3573e31c88d358d99075b08fe155cdd", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -33,6 +33,8 @@\n //! modify the Context visitor appropriately. If you're adding lints from the\n //! Context itself, span_lint should be used instead of add_lint.\n \n+#[allow(non_camel_case_types)];\n+\n use driver::session;\n use metadata::csearch;\n use middle::dead::DEAD_CODE_LINT_STR;\n@@ -189,7 +191,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n      LintSpec {\n         lint: NonCamelCaseTypes,\n         desc: \"types, variants and traits should have camel case names\",\n-        default: allow\n+        default: warn\n      }),\n \n     (\"non_uppercase_statics\","}, {"sha": "dddd75054409256b3f547af61da3684ef68bd087", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -60,6 +60,7 @@\n  * tied to `x`. The type of `x'` will be a borrowed pointer.\n  */\n \n+#[allow(non_camel_case_types)];\n \n use middle::ty;\n use util::ppaux::{ty_to_str, region_ptr_to_str, Repr};"}, {"sha": "066e4d2b313bcefdb8bf0f25a16b64517ea4c124", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use driver::session::Session;\n use metadata::csearch;\n use metadata::decoder::{DefLike, DlDef, DlField, DlImpl};"}, {"sha": "0aa8393e79d5c8c1b1ae49d76b132bc34c57cea5", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -192,6 +192,7 @@\n  *\n  */\n \n+#[allow(non_camel_case_types)];\n \n use back::abi;\n use lib::llvm::{llvm, ValueRef, BasicBlockRef};"}, {"sha": "c14d98a487d98fd791192dd42008f13fc56e6625", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -23,6 +23,7 @@\n //     but one TypeRef corresponds to many `ty::t`s; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n+#[allow(non_camel_case_types)];\n \n use back::link::{mangle_exported_name};\n use back::{link, abi};"}, {"sha": "d9e929c25019ccaf314e6900d1e27cc6391b3a93", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n //! Code that is useful in various trans modules.\n \n use driver::session::Session;"}, {"sha": "99852e446cc8ef6da27b32dbc2a82586b66b589f", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -31,6 +31,8 @@\n  * See doc.rs for more comments.\n  */\n \n+#[allow(non_camel_case_types)];\n+\n use back::abi;\n use back::link;\n use lib::llvm::{ValueRef, llvm, SetLinkage, False};"}, {"sha": "43498727566422b446cdcdf2288ca712ddbc42fd", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use back::abi;\n use lib;"}, {"sha": "55e237fda5dddbc9363e7055cd9edc08b54fb7ae", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use middle::trans::adt;\n use middle::trans::common::*;"}, {"sha": "c19fe3445d9123e15ddfc35a5d24829b5fc1650f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n+\n use driver::session;\n use metadata::csearch;\n use metadata;"}, {"sha": "160b6f5ec4ec7bc0af302a72e1f0376f585bf8fa", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::ty;"}, {"sha": "abff3b683953d63c8c3769a3b6190521848328cd", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,7 @@\n \n /*! See doc.rs for documentation */\n \n+#[allow(non_camel_case_types)];\n \n pub use middle::ty::IntVarValue;\n pub use middle::typeck::infer::resolve::resolve_and_force_all_but_regions;"}, {"sha": "4f2c8966c503e9117aff6bc7975ca7a9edb4dd63", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -59,6 +59,7 @@ independently:\n \n */\n \n+#[allow(non_camel_case_types)];\n \n use driver::session;\n "}, {"sha": "586ed080835983ddab6664972e93d46cb88c68f6", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(non_camel_case_types)];\n \n use syntax::ast;\n use syntax::codemap::{Span};"}, {"sha": "af0a43efa148f6b614575bd928ead6a6e4cbd67e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -24,6 +24,8 @@\n //! // ... something using html\n //! ```\n \n+#[allow(non_camel_case_types)];\n+\n use std::cast;\n use std::fmt;\n use std::io;"}, {"sha": "3a6ea6725071406d986bfd1953e8f6f9e7e443f6", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -15,12 +15,12 @@ use dl = std::unstable::dynamic_lib;\n \n pub type PluginJson = Option<(~str, json::Json)>;\n pub type PluginResult = (clean::Crate, PluginJson);\n-pub type plugin_callback = extern fn (clean::Crate) -> PluginResult;\n+pub type PluginCallback = extern fn (clean::Crate) -> PluginResult;\n \n /// Manages loading and running of plugins\n pub struct PluginManager {\n     priv dylibs: ~[dl::DynamicLibrary],\n-    priv callbacks: ~[plugin_callback],\n+    priv callbacks: ~[PluginCallback],\n     /// The directory plugins will be loaded from\n     prefix: Path,\n }\n@@ -53,7 +53,7 @@ impl PluginManager {\n     ///\n     /// This is to run passes over the cleaned crate. Plugins run this way\n     /// correspond to the A-aux tag on Github.\n-    pub fn add_plugin(&mut self, plugin: plugin_callback) {\n+    pub fn add_plugin(&mut self, plugin: PluginCallback) {\n         self.callbacks.push(plugin);\n     }\n     /// Run all the loaded plugins over the crate, returning their results"}, {"sha": "b6965a003e0a51f73d8402c67b133570ea7ce171", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -10,6 +10,7 @@\n \n #[no_std];\n #[allow(unused_variable)];\n+#[allow(non_camel_case_types)];\n #[deny(dead_code)];\n \n #[crate_type=\"lib\"];"}, {"sha": "e07fc96a1f31217b6d0b3cece2c33f59e9a70189", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(unused_variable)];\n+#[allow(non_camel_case_types)];\n #[deny(dead_code)];\n \n #[crate_type=\"lib\"];"}, {"sha": "0dc1091dabd1d45eba3120e8247fea1e8d742f0c", "filename": "src/test/compile-fail/lint-unused-import-tricky-names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37903cbf4dbf71a5cd11ffb8444528cad297e30d/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs?ref=37903cbf4dbf71a5cd11ffb8444528cad297e30d", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[deny(unused_imports)];\n+#[allow(non_camel_case_types)];\n #[allow(dead_code)];\n \n // Regression test for issue #6633"}]}