{"sha": "ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDYwOTZiMGM0MGY0ZWJhNWVjZDNjM2U4MGY3OTUxNTg3ZDgwNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-23T09:48:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-23T09:48:04Z"}, "message": "Merge #6960\n\n6960: Show enum variant on Self qualified paths r=matklad a=Veykril\n\nFixes first part of #6549\r\nFixes #6550\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9977054269fe85f2901b92f795b567eb13221839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9977054269fe85f2901b92f795b567eb13221839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4xJUCRBK7hj4Ov3rIwAAdHIIAB67WwZ0efG8aF17USsLInEg\n3dgwR08awg6ZnFeKaTpsToBsleNW5q3j/aP5YpQiqUYPUUUs5LnBs6aLiRxpQxh7\nN8W2CR3gyJ1bjODVPeN2o8gurey2DMzsOIwb1G5CyNi5Ku8AXUtun+/ytyvKGkU6\n1qlFO2Y5sN10P4mnq2PhpJqNJCjwu1yga2A8Bsxm8gP/cLpTyjIkrpCAfaTAaW0E\n8I2jFxxQ7QyQ4/aZWO0X8GAI2BGCBT+iT5rZ3vjBvNd6bLwhsytfvkMPY8nppZom\ndpYjJBAVMy/TiVa/BTUWciH1cCla7u/5OOaYeVyLsVYOIb90qQEZMXawS2j0eE4=\n=PAm3\n-----END PGP SIGNATURE-----\n", "payload": "tree 9977054269fe85f2901b92f795b567eb13221839\nparent 85a28751611e564eb4cdde28ca953407f551b696\nparent 15a52f69d9522442866307254cc712a308688516\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608716884 +0000\ncommitter GitHub <noreply@github.com> 1608716884 +0000\n\nMerge #6960\n\n6960: Show enum variant on Self qualified paths r=matklad a=Veykril\n\nFixes first part of #6549\r\nFixes #6550\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "html_url": "https://github.com/rust-lang/rust/commit/ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee06096b0c40f4eba5ecd3c3e80f7951587d8047/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a28751611e564eb4cdde28ca953407f551b696", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a28751611e564eb4cdde28ca953407f551b696", "html_url": "https://github.com/rust-lang/rust/commit/85a28751611e564eb4cdde28ca953407f551b696"}, {"sha": "15a52f69d9522442866307254cc712a308688516", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a52f69d9522442866307254cc712a308688516", "html_url": "https://github.com/rust-lang/rust/commit/15a52f69d9522442866307254cc712a308688516"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "882c4dcbce954327668f626f4f566f97ea7a1db3", "filename": "crates/completion/src/completions/qualified_path.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ee06096b0c40f4eba5ecd3c3e80f7951587d8047/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06096b0c40f4eba5ecd3c3e80f7951587d8047/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "patch": "@@ -118,6 +118,12 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     _ => return,\n                 };\n \n+                if let Some(Adt::Enum(e)) = ty.as_adt() {\n+                    for variant in e.variants(ctx.db) {\n+                        acc.add_enum_variant(ctx, variant, None);\n+                    }\n+                }\n+\n                 let traits_in_scope = ctx.scope.traits_in_scope();\n                 let mut seen = FxHashSet::default();\n                 ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n@@ -752,4 +758,27 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_self_enum() {\n+        check(\n+            r#\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+\n+impl Foo {\n+    fn foo(self) {\n+        Self::<|>\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Bar    ()\n+                ev Baz    ()\n+                me foo(\u2026) fn foo(self)\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "d09849752064111b56b1fe95d8e63116b06ea756", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ee06096b0c40f4eba5ecd3c3e80f7951587d8047/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee06096b0c40f4eba5ecd3c3e80f7951587d8047/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ee06096b0c40f4eba5ecd3c3e80f7951587d8047", "patch": "@@ -1,5 +1,7 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n+use std::iter;\n+\n use either::Either;\n use hir::{Adt, ModPath, ModuleDef, ScopeDef, Type};\n use ide_db::helpers::insert_use::ImportScope;\n@@ -50,7 +52,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n }\n \n fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &Type) {\n-    if let Some(Adt::Enum(enum_data)) = ty.as_adt() {\n+    if let Some(Adt::Enum(enum_data)) =\n+        iter::successors(Some(ty.clone()), |ty| ty.remove_ref()).last().and_then(|ty| ty.as_adt())\n+    {\n         let variants = enum_data.variants(ctx.db);\n \n         let module = if let Some(module) = ctx.scope.module() {\n@@ -701,6 +705,7 @@ fn main() { <|> }\n             \"#]],\n         );\n     }\n+\n     #[test]\n     fn completes_enum_variant_matcharm() {\n         check(\n@@ -721,6 +726,26 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn completes_enum_variant_matcharm_ref() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+\n+fn main() {\n+    let foo = Foo::Quux;\n+    match &foo { Qu<|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn completes_enum_variant_iflet() {\n         check("}]}