{"sha": "9f76214854117747919f8427a7a17346d6f716d9", "node_id": "C_kwDOAAsO6NoAKDlmNzYyMTQ4NTQxMTc3NDc5MTlmODQyN2E3YTE3MzQ2ZDZmNzE2ZDk", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-21T02:56:20Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-21T02:56:20Z"}, "message": "Revert \"Auto merge of #93800 - b-naber:static-initializers-mir-val, r=oli-obk\"\n\nThis reverts commit a240ccd81c74c105b6f5fe84c46f8d36edb7e306, reversing\nchanges made to 393fdc10483da930cdbb00eabc3635030d2e776f.\n\nThis PR was likely responsible for a relatively large regression in\ndist-x86_64-msvc-alt builder times, from approximately 1.7 to 2.8 hours,\nbringing that builder into the pool of the slowest builders we currently have.\n\nThis seems to be limited to the alt builder due to needing parallel-compiler\nenabled, likely leading to slow LLVM compilation for some reason.", "tree": {"sha": "0a2fe71288131472f6ff4983aef8bb40bf9eb587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a2fe71288131472f6ff4983aef8bb40bf9eb587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f76214854117747919f8427a7a17346d6f716d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f76214854117747919f8427a7a17346d6f716d9", "html_url": "https://github.com/rust-lang/rust/commit/9f76214854117747919f8427a7a17346d6f716d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f76214854117747919f8427a7a17346d6f716d9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e2c2881d11324d610815bfff097e25c412199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e", "html_url": "https://github.com/rust-lang/rust/commit/45e2c2881d11324d610815bfff097e25c412199e"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "2126487da02fd4981e2ec68d0a88cf86135bb86f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -2533,7 +2533,7 @@ pub enum ConstantKind<'tcx> {\n \n impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n-        match self.literal.try_to_scalar() {\n+        match self.literal.const_for_ty()?.val().try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n                 GlobalAlloc::Static(def_id) => {\n                     assert!(!tcx.is_thread_local_static(def_id));"}, {"sha": "6320b055ab7dcd90555a79e83a24a0c2ea9e61ec", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -17,8 +17,9 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_target::abi::Size;\n+use std::ops::ControlFlow;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -663,7 +664,6 @@ pub fn write_allocations<'tcx>(\n     fn alloc_ids_from_alloc(alloc: &Allocation) -> impl DoubleEndedIterator<Item = AllocId> + '_ {\n         alloc.relocations().values().map(|id| *id)\n     }\n-\n     fn alloc_ids_from_const(val: ConstValue<'_>) -> impl Iterator<Item = AllocId> + '_ {\n         match val {\n             ConstValue::Scalar(interpret::Scalar::Ptr(ptr, _size)) => {\n@@ -677,29 +677,17 @@ pub fn write_allocations<'tcx>(\n             }\n         }\n     }\n-\n     struct CollectAllocIds(BTreeSet<AllocId>);\n-\n-    impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: ty::Const<'tcx>, _loc: Location) {\n+    impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Value(val) = c.val() {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n-        }\n-\n-        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n-            match c.literal {\n-                ConstantKind::Ty(c) => self.visit_const(c, loc),\n-                ConstantKind::Val(val, _) => {\n-                    self.0.extend(alloc_ids_from_const(val));\n-                }\n-            }\n+            c.super_visit_with(self)\n         }\n     }\n-\n     let mut visitor = CollectAllocIds(Default::default());\n-    visitor.visit_body(body);\n-\n+    body.visit_with(&mut visitor);\n     // `seen` contains all seen allocations, including the ones we have *not* printed yet.\n     // The protocol is to first `insert` into `seen`, and only if that returns `true`\n     // then push to `todo`."}, {"sha": "40dce281c82bf2460c6885bfadde72160f236a5d", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -17,7 +17,6 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{\n     BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n };\n@@ -420,8 +419,7 @@ pub enum ExprKind<'tcx> {\n     /// This is only distinguished from `Literal` so that we can register some\n     /// info for diagnostics.\n     StaticRef {\n-        alloc_id: AllocId,\n-        ty: Ty<'tcx>,\n+        literal: Const<'tcx>,\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`."}, {"sha": "95489ac3ab2c64c8413680dd4764fa6ef794318e", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -123,7 +123,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         }\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n-        StaticRef { .. } => {}\n+        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n         InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;"}, {"sha": "79ac09d523d079f55b7f5b4c6429a2b6d463d334", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -1,7 +1,6 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n-use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n@@ -27,12 +26,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(literal.ty(), ty);\n                 Constant { span, user_ty, literal: literal.into() }\n             }\n-            ExprKind::StaticRef { alloc_id, ty, .. } => {\n-                let const_val =\n-                    ConstValue::Scalar(Scalar::from_pointer(alloc_id.into(), &this.tcx));\n-                let literal = ConstantKind::Val(const_val, ty);\n-\n-                Constant { span, user_ty: None, literal }\n+            ExprKind::StaticRef { literal, .. } => {\n+                Constant { span, user_ty: None, literal: literal.into() }\n             }\n             ExprKind::ConstBlock { value } => {\n                 Constant { span: span, user_ty: None, literal: value.into() }"}, {"sha": "651edc827c320310775024274d9f62a0706425a9", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -8,6 +8,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n+use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n@@ -940,8 +941,15 @@ impl<'tcx> Cx<'tcx> {\n                 let kind = if self.tcx.is_thread_local_static(id) {\n                     ExprKind::ThreadLocalRef(id)\n                 } else {\n-                    let alloc_id = self.tcx.create_static_alloc(id);\n-                    ExprKind::StaticRef { alloc_id, ty, def_id: id }\n+                    let ptr = self.tcx.create_static_alloc(id);\n+                    ExprKind::StaticRef {\n+                        literal: ty::Const::from_scalar(\n+                            self.tcx,\n+                            Scalar::from_pointer(ptr.into(), &self.tcx),\n+                            ty,\n+                        ),\n+                        def_id: id,\n+                    }\n                 };\n                 ExprKind::Deref {\n                     arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),"}, {"sha": "8e02dca4fb8b6541694c546117efd7479b41ed99", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.32bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,9 +9,12 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+                                         // ty::Const\n+                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "88cdbda2fae36cbd28ccfa25c9cb86dc2914a5c4", "filename": "src/test/mir-opt/const_allocation.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation.main.ConstProp.after.64bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,9 +9,12 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+                                         // ty::Const\n+                                         // + ty: &&[(std::option::Option<i32>, &[&str])]\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9"}, {"sha": "059b721f5bb6332d0d8ac8e70e609ae0e68e9fa5", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,9 +9,12 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+                                         // ty::Const\n+                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "d6a97917d6226c7f5aece75f866cbe85a12ca581", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,9 +9,12 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         _2 = const {alloc1: &&[(Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+                                         // ty::Const\n+                                         // + ty: &&[(std::option::Option<i32>, &[&u8])]\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc1)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9"}, {"sha": "32000340dcebfc35a4bd434ea0fe3a2c7cb393e6", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,6 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+                                         // ty::Const\n+                                         // + ty: &&Packed\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "cac882333aeb94debb5ea1a446f5bb613d8b7643", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -9,6 +9,9 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         _2 = const {alloc1: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+                                         // ty::Const\n+                                         // + ty: &&Packed\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n                                          // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc1)) }"}, {"sha": "bec0fa9c0495722bfa36bae10fe39d58c034ff19", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -8,6 +8,9 @@ promoted[0] in BAR: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+                                         // ty::Const\n+                                         // + ty: &i32\n+                                         // + val: Value(Scalar(alloc1))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }"}, {"sha": "b480b257825642f1ff0bb11829638e3f8af24efc", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -18,7 +18,9 @@\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-+                                          // ty::Const\n+                                           // ty::Const\n+-                                          // + ty: &i32\n+-                                          // + val: Value(Scalar(alloc1))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(BAR, [], Some(promoted[0]))\n                                            // mir::Constant"}, {"sha": "c01b31525b6a6ee0ffa906bf53f9f30cfb558f4d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -8,6 +8,9 @@ promoted[0] in FOO: &[&i32; 1] = {\n \n     bb0: {\n         _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+                                         // ty::Const\n+                                         // + ty: *const i32\n+                                         // + val: Value(Scalar(alloc3))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }"}, {"sha": "ed48f5dc9dcbca44b6b907c5a98053db1033983d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -20,7 +20,9 @@\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-+                                          // ty::Const\n+                                           // ty::Const\n+-                                          // + ty: *const i32\n+-                                          // + val: Value(Scalar(alloc3))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(FOO, [], Some(promoted[0]))\n                                            // mir::Constant"}, {"sha": "afc621784633e5cf7f8670c59d386d30ce985a52", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop.main.ConstProp.diff?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -24,6 +24,9 @@\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           _4 = const {alloc1: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+                                           // ty::Const\n+                                           // + ty: *mut u32\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc1)) }"}, {"sha": "13ef30d89a076e89ef73b07a0f594f6a9028285f", "filename": "src/test/mir-opt/const_prop/read_immutable_static.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9f76214854117747919f8427a7a17346d6f716d9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.main.ConstProp.diff?ref=9f76214854117747919f8427a7a17346d6f716d9", "patch": "@@ -17,6 +17,9 @@\n           StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           _3 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+                                           // ty::Const\n+                                           // + ty: &u8\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }\n@@ -25,6 +28,9 @@\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           _5 = const {alloc1: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+                                           // ty::Const\n+                                           // + ty: &u8\n+                                           // + val: Value(Scalar(alloc1))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // + literal: Const { ty: &u8, val: Value(Scalar(alloc1)) }"}]}