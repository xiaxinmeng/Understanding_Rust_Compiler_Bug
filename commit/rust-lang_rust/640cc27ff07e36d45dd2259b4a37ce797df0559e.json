{"sha": "640cc27ff07e36d45dd2259b4a37ce797df0559e", "node_id": "C_kwDOAAsO6NoAKDY0MGNjMjdmZjA3ZTM2ZDQ1ZGQyMjU5YjRhMzdjZTc5N2RmMDU1OWU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:45:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T14:45:18Z"}, "message": "add top level tests for types", "tree": {"sha": "192701feabd468e3be884422721059a281a0a435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/192701feabd468e3be884422721059a281a0a435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640cc27ff07e36d45dd2259b4a37ce797df0559e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640cc27ff07e36d45dd2259b4a37ce797df0559e", "html_url": "https://github.com/rust-lang/rust/commit/640cc27ff07e36d45dd2259b4a37ce797df0559e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640cc27ff07e36d45dd2259b4a37ce797df0559e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78424846eb29a2d25389364a0b866992bfe4f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78424846eb29a2d25389364a0b866992bfe4f8d", "html_url": "https://github.com/rust-lang/rust/commit/e78424846eb29a2d25389364a0b866992bfe4f8d"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "6ffb4c191b59667fa7a09223d401206475df30a5", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=640cc27ff07e36d45dd2259b4a37ce797df0559e", "patch": "@@ -122,6 +122,19 @@ pub(crate) mod entry {\n             }\n             m.complete(p, ERROR);\n         }\n+\n+        pub(crate) fn type_(p: &mut Parser) {\n+            let m = p.start();\n+            types::type_(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n "}, {"sha": "72d529d6cfd5d9df1736be5f6926918f77de9d5b", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=640cc27ff07e36d45dd2259b4a37ce797df0559e", "patch": "@@ -110,6 +110,8 @@ pub enum TopEntryPoint {\n     Pattern,\n     Type,\n     Expr,\n+    /// Edge case -- macros generally don't expand to attributes, with the\n+    /// exception of `cfg_attr` which does!\n     MetaItem,\n }\n \n@@ -120,8 +122,8 @@ impl TopEntryPoint {\n             TopEntryPoint::MacroStmts => grammar::entry::top::macro_stmts,\n             TopEntryPoint::MacroItems => grammar::entry::top::macro_items,\n             TopEntryPoint::Pattern => grammar::entry::top::pattern,\n+            TopEntryPoint::Type => grammar::entry::top::type_,\n             // FIXME\n-            TopEntryPoint::Type => grammar::entry::prefix::ty,\n             TopEntryPoint::Expr => grammar::entry::prefix::expr,\n             TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n         };"}, {"sha": "dcf61b6aca5afc958fdc71145c8505248ea9a44a", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640cc27ff07e36d45dd2259b4a37ce797df0559e/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=640cc27ff07e36d45dd2259b4a37ce797df0559e", "patch": "@@ -175,6 +175,55 @@ fn macro_pattern() {\n     );\n }\n \n+#[test]\n+fn type_() {\n+    check(\n+        TopEntryPoint::Type,\n+        \"Option<!>\",\n+        expect![[r#\"\n+            PATH_TYPE\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Option\"\n+                  GENERIC_ARG_LIST\n+                    L_ANGLE \"<\"\n+                    TYPE_ARG\n+                      NEVER_TYPE\n+                        BANG \"!\"\n+                    R_ANGLE \">\"\n+        \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Type,\n+        \"() () ()\",\n+        expect![[r#\"\n+            ERROR\n+              TUPLE_TYPE\n+                L_PAREN \"(\"\n+                R_PAREN \")\"\n+              WHITESPACE \" \"\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+              WHITESPACE \" \"\n+              L_PAREN \"(\"\n+              R_PAREN \")\"\n+        \"#]],\n+    );\n+    check(\n+        TopEntryPoint::Type,\n+        \"$$$\",\n+        expect![[r#\"\n+            ERROR\n+              ERROR\n+                DOLLAR \"$\"\n+              DOLLAR \"$\"\n+              DOLLAR \"$\"\n+            error 0: expected type\n+        \"#]],\n+    );\n+}\n+\n #[track_caller]\n fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n     let (parsed, _errors) = super::parse(entry, input);"}]}