{"sha": "bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "node_id": "C_kwDOAAsO6NoAKGJiZjRiNjY5OWU0MWRkNWE3YzZkOWFmZTRiYzhkNmFmNTBhZmM3Njg", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2021-10-21T12:02:59Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-01-01T23:51:02Z"}, "message": "Stabilize -Z symbol-mangling-version as -C symbol-mangling-version\n\nThis allows selecting `v0` symbol-mangling without an unstable option.\nSelecting `legacy` still requires -Z unstable-options.\n\nContinue supporting -Z symbol-mangling-version for compatibility for\nnow, but show a deprecation warning for it.", "tree": {"sha": "6c8e8ad8c35ab58865f4b3d9e3ed58ec4279cbc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8e8ad8c35ab58865f4b3d9e3ed58ec4279cbc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "html_url": "https://github.com/rust-lang/rust/commit/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c145692254e86974941f2c92c643a23df0f13e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c145692254e86974941f2c92c643a23df0f13e82", "html_url": "https://github.com/rust-lang/rust/commit/c145692254e86974941f2c92c643a23df0f13e82"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "816e770f01252ed97e1b5f4aa0ec81839d1ee8af", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "patch": "@@ -594,6 +594,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(relocation_model, Some(RelocModel::Pic));\n     tracked!(soft_float, true);\n     tracked!(split_debuginfo, Some(SplitDebuginfo::Packed));\n+    tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));\n }"}, {"sha": "3942846e79df069b6151648f79d4036db093551b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "patch": "@@ -721,7 +721,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),\n             panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),\n-            symbol_mangling_version: tcx.sess.opts.debugging_opts.get_symbol_mangling_version(),\n+            symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),\n \n             crate_deps,\n             dylib_dependency_formats,"}, {"sha": "f2c7959ddb6e3212248166b52643d6e6dc87978c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "patch": "@@ -781,6 +781,10 @@ impl Options {\n             },\n         }\n     }\n+\n+    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n+        self.cg.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n+    }\n }\n \n impl DebuggingOptions {\n@@ -794,10 +798,6 @@ impl DebuggingOptions {\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n-\n-    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n-        self.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n-    }\n }\n \n // The type of entry function, so users can have their own entry functions\n@@ -2116,6 +2116,34 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    // Handle both `-Z symbol-mangling-version` and `-C symbol-mangling-version`; the latter takes\n+    // precedence.\n+    match (cg.symbol_mangling_version, debugging_opts.symbol_mangling_version) {\n+        (Some(smv_c), Some(smv_z)) if smv_c != smv_z => {\n+            early_error(\n+                error_format,\n+                \"incompatible values passed for `-C symbol-mangling-version` \\\n+                and `-Z symbol-mangling-version`\",\n+            );\n+        }\n+        (Some(SymbolManglingVersion::V0), _) => {}\n+        (Some(_), _) if !debugging_opts.unstable_options => {\n+            early_error(\n+                error_format,\n+                \"`-C symbol-mangling-version=legacy` requires `-Z unstable-options`\",\n+            );\n+        }\n+        (None, None) => {}\n+        (None, smv) => {\n+            early_warn(\n+                error_format,\n+                \"`-Z symbol-mangling-version` is deprecated; use `-C symbol-mangling-version`\",\n+            );\n+            cg.symbol_mangling_version = smv;\n+        }\n+        _ => {}\n+    }\n+\n     if debugging_opts.instrument_coverage.is_some()\n         && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n     {\n@@ -2127,19 +2155,17 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n \n-        // `-Z instrument-coverage` implies `-Z symbol-mangling-version=v0` - to ensure consistent\n+        // `-Z instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n-        match debugging_opts.symbol_mangling_version {\n-            None => {\n-                debugging_opts.symbol_mangling_version = Some(SymbolManglingVersion::V0);\n-            }\n+        match cg.symbol_mangling_version {\n+            None => cg.symbol_mangling_version = Some(SymbolManglingVersion::V0),\n             Some(SymbolManglingVersion::Legacy) => {\n                 early_warn(\n                     error_format,\n                     \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n-                    but `-Z symbol-mangling-version=legacy` was specified\",\n+                    but `-C symbol-mangling-version=legacy` was specified\",\n                 );\n             }\n             Some(SymbolManglingVersion::V0) => {}"}, {"sha": "494bbf7af25f61b53d57ca82a1f820f6bd90a9db", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "patch": "@@ -1083,6 +1083,9 @@ options! {\n         \"how to handle split-debuginfo, a platform-specific option\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n+    symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n+        parse_symbol_mangling_version, [TRACKED],\n+        \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_target_feature, [TRACKED],"}, {"sha": "702528c32776747e35527dd101d75eec02c95c27", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=bbf4b6699e41dd5a7c6d9afe4bc8d6af50afc768", "patch": "@@ -245,7 +245,7 @@ fn compute_symbol_name<'tcx>(\n     // 2. we favor `instantiating_crate` where possible (i.e. when `Some`)\n     let mangling_version_crate = instantiating_crate.unwrap_or(def_id.krate);\n     let mangling_version = if mangling_version_crate == LOCAL_CRATE {\n-        tcx.sess.opts.debugging_opts.get_symbol_mangling_version()\n+        tcx.sess.opts.get_symbol_mangling_version()\n     } else {\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };"}]}