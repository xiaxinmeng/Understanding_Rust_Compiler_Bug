{"sha": "08735536809d9bcafacf689cdb5e5314f1510b87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NzM1NTM2ODA5ZDliY2FmYWNmNjg5Y2RiNWU1MzE0ZjE1MTBiODc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-27T18:47:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-27T18:47:15Z"}, "message": "Merge pull request #4298 from JensNockert/byteswap\n\nAdd support for byteswap intrinsics", "tree": {"sha": "6e330297728efa2db1d7cd5d8fc269d21b73535a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e330297728efa2db1d7cd5d8fc269d21b73535a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08735536809d9bcafacf689cdb5e5314f1510b87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08735536809d9bcafacf689cdb5e5314f1510b87", "html_url": "https://github.com/rust-lang/rust/commit/08735536809d9bcafacf689cdb5e5314f1510b87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08735536809d9bcafacf689cdb5e5314f1510b87/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c599914a19861686030b238a0edc7ebb996068", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c599914a19861686030b238a0edc7ebb996068", "html_url": "https://github.com/rust-lang/rust/commit/57c599914a19861686030b238a0edc7ebb996068"}, {"sha": "a51661e8c1d62f88a5b6f368f397fa6b33785973", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51661e8c1d62f88a5b6f368f397fa6b33785973", "html_url": "https://github.com/rust-lang/rust/commit/a51661e8c1d62f88a5b6f368f397fa6b33785973"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "6c042d740e1f5d5b6b0f3a78d55a28bdc7c57ab8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=08735536809d9bcafacf689cdb5e5314f1510b87", "patch": "@@ -2446,6 +2446,12 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n                                 T_fn(~[T_i32(), T_i1()], T_i32()));\n     let cttz64 = decl_cdecl_fn(llmod, ~\"llvm.cttz.i64\",\n                                 T_fn(~[T_i64(), T_i1()], T_i64()));\n+    let bswap16 = decl_cdecl_fn(llmod, ~\"llvm.bswap.i16\",\n+                                T_fn(~[T_i16()], T_i16()));\n+    let bswap32 = decl_cdecl_fn(llmod, ~\"llvm.bswap.i32\",\n+                                T_fn(~[T_i32()], T_i32()));\n+    let bswap64 = decl_cdecl_fn(llmod, ~\"llvm.bswap.i64\",\n+                                T_fn(~[T_i64()], T_i64()));\n \n     let intrinsics = HashMap();\n     intrinsics.insert(~\"llvm.gcroot\", gcroot);\n@@ -2498,6 +2504,9 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     intrinsics.insert(~\"llvm.cttz.i16\", cttz16);\n     intrinsics.insert(~\"llvm.cttz.i32\", cttz32);\n     intrinsics.insert(~\"llvm.cttz.i64\", cttz64);\n+    intrinsics.insert(~\"llvm.bswap.i16\", bswap16);\n+    intrinsics.insert(~\"llvm.bswap.i32\", bswap32);\n+    intrinsics.insert(~\"llvm.bswap.i64\", bswap64);\n \n     return intrinsics;\n }"}, {"sha": "91e5429fe23c8cd0dacdc136f61e84e2b7b7b47c", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=08735536809d9bcafacf689cdb5e5314f1510b87", "patch": "@@ -1267,6 +1267,21 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n             let cttz = ccx.intrinsics.get(~\"llvm.cttz.i64\");\n             Store(bcx, Call(bcx, cttz, ~[x, y]), fcx.llretptr)\n         }\n+        ~\"bswap16\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let cttz = ccx.intrinsics.get(~\"llvm.bswap.i16\");\n+            Store(bcx, Call(bcx, cttz, ~[x]), fcx.llretptr)\n+        }\n+        ~\"bswap32\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let cttz = ccx.intrinsics.get(~\"llvm.bswap.i32\");\n+            Store(bcx, Call(bcx, cttz, ~[x]), fcx.llretptr)\n+        }\n+        ~\"bswap64\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let cttz = ccx.intrinsics.get(~\"llvm.bswap.i64\");\n+            Store(bcx, Call(bcx, cttz, ~[x]), fcx.llretptr)\n+        }\n         _ => {\n             // Could we make this an enum rather than a string? does it get\n             // checked earlier?"}, {"sha": "6e2e0af86e0cbf7ae21afedf4a6b97d588a9605a", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=08735536809d9bcafacf689cdb5e5314f1510b87", "patch": "@@ -140,6 +140,8 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                 ~\"ctlz8\" | ~\"ctlz16\" | ~\"ctlz32\" | ~\"ctlz64\" => 0,\n                 ~\"cttz8\" | ~\"cttz16\" | ~\"cttz32\" | ~\"cttz64\" => 0,\n \n+                ~\"bswap16\" | ~\"bswap32\" | ~\"bswap64\" => 0,\n+\n                 // would be cool to make these an enum instead of strings!\n                 _ => fail ~\"unknown intrinsic in type_use\"\n             };"}, {"sha": "df7444ee6e94ab743aa2df21f4f2eecb3591f58c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=08735536809d9bcafacf689cdb5e5314f1510b87", "patch": "@@ -3224,6 +3224,18 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n          (0u, ~[arg(ast::by_copy, ty::mk_i64(tcx))],\n          ty::mk_i64(tcx))\n      }\n+     ~\"bswap16\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i16(tcx))],\n+         ty::mk_i16(tcx))\n+     }\n+     ~\"bswap32\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i32(tcx))],\n+         ty::mk_i32(tcx))\n+     }\n+     ~\"bswap64\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i64(tcx))],\n+         ty::mk_i64(tcx))\n+     }\n      ref other => {\n         tcx.sess.span_err(it.span, ~\"unrecognized intrinsic function: `\" +\n                           (*other) + ~\"`\");"}, {"sha": "feddd0ab9cbc81f8a6c74df1e343e0d9fffe7ab1", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08735536809d9bcafacf689cdb5e5314f1510b87/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=08735536809d9bcafacf689cdb5e5314f1510b87", "patch": "@@ -28,6 +28,10 @@ extern mod rusti {\n     fn cttz16(x: i16) -> i16;\n     fn cttz32(x: i32) -> i32;\n     fn cttz64(x: i64) -> i64;\n+\n+    fn bswap16(x: i16) -> i16;\n+    fn bswap32(x: i32) -> i32;\n+    fn bswap64(x: i64) -> i64;\n }\n \n fn main() {\n@@ -109,4 +113,8 @@ fn main() {\n     assert(cttz32(-1i32) == 0i32);\n     assert(cttz64(-1i64) == 0i64);\n \n+    assert(bswap16(0x0A0Bi16) == 0x0B0Ai16);\n+    assert(bswap32(0x0ABBCC0Di32) == 0x0DCCBB0Ai32);\n+    assert(bswap64(0x0122334455667708i64) == 0x0877665544332201i64);\n+\n }"}]}