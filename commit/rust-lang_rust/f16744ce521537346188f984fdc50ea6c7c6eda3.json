{"sha": "f16744ce521537346188f984fdc50ea6c7c6eda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNjc0NGNlNTIxNTM3MzQ2MTg4Zjk4NGZkYzUwZWE2YzdjNmVkYTM=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-26T21:35:26Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-26T21:35:26Z"}, "message": "Fix a typecheck regression with constant borrowed pointers in patterns\n\nChange the eqtype relationship to be a suptype relationship instead.\n\nFixes #18350.\nFixes #18352.", "tree": {"sha": "5b21ec77df896d420a751270f34c3e6d50439496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b21ec77df896d420a751270f34c3e6d50439496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16744ce521537346188f984fdc50ea6c7c6eda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16744ce521537346188f984fdc50ea6c7c6eda3", "html_url": "https://github.com/rust-lang/rust/commit/f16744ce521537346188f984fdc50ea6c7c6eda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16744ce521537346188f984fdc50ea6c7c6eda3/comments", "author": null, "committer": null, "parents": [{"sha": "80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336", "html_url": "https://github.com/rust-lang/rust/commit/80e5fe1a56bb95e8e89d5f8f0ff5122583bb5336"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "1dcd8c76f4b84b573d68b8f91404f9b93cd26303", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f16744ce521537346188f984fdc50ea6c7c6eda3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16744ce521537346188f984fdc50ea6c7c6eda3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f16744ce521537346188f984fdc50ea6c7c6eda3", "patch": "@@ -74,7 +74,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n             let const_did = tcx.def_map.borrow().get_copy(&pat.id).def_id();\n             let const_pty = ty::lookup_item_type(tcx, const_did);\n             fcx.write_ty(pat.id, const_pty.ty);\n-            demand::eqtype(fcx, pat.span, expected, const_pty.ty);\n+            demand::suptype(fcx, pat.span, expected, const_pty.ty);\n         }\n         ast::PatIdent(bm, ref path, ref sub) if pat_is_binding(&tcx.def_map, pat) => {\n             let typ = fcx.local_ty(pat.span, pat.id);"}, {"sha": "7878d698e52ae148190fd3ce9b69aaec3e2cc279", "filename": "src/test/run-pass/issue-18352.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f16744ce521537346188f984fdc50ea6c7c6eda3/src%2Ftest%2Frun-pass%2Fissue-18352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16744ce521537346188f984fdc50ea6c7c6eda3/src%2Ftest%2Frun-pass%2Fissue-18352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18352.rs?ref=f16744ce521537346188f984fdc50ea6c7c6eda3", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const X: &'static str = \"12345\";\n+\n+fn test(s: String) -> bool {\n+    match s.as_slice() {\n+        X => true,\n+        _ => false\n+    }\n+}\n+\n+fn main() {\n+    assert!(test(\"12345\".to_string()));\n+}"}]}