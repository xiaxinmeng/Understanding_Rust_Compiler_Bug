{"sha": "d8265621d8d90cc6a37e7322c34e1969db0a26bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjY1NjIxZDhkOTBjYzZhMzdlNzMyMmMzNGUxOTY5ZGIwYTI2YmY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-05-18T19:55:11Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-05-18T19:55:11Z"}, "message": "propagate \"short form\" into all Html prints", "tree": {"sha": "66b6c90ece7e14490a7865d7028b8bc7ad3ff705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b6c90ece7e14490a7865d7028b8bc7ad3ff705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8265621d8d90cc6a37e7322c34e1969db0a26bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8265621d8d90cc6a37e7322c34e1969db0a26bf", "html_url": "https://github.com/rust-lang/rust/commit/d8265621d8d90cc6a37e7322c34e1969db0a26bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8265621d8d90cc6a37e7322c34e1969db0a26bf/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90463a6bdcd18c60e18a1cc810fc6453b96f7d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/90463a6bdcd18c60e18a1cc810fc6453b96f7d54", "html_url": "https://github.com/rust-lang/rust/commit/90463a6bdcd18c60e18a1cc810fc6453b96f7d54"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "dceb04a7daa2babf33b510563635d948da08a63a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d8265621d8d90cc6a37e7322c34e1969db0a26bf/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8265621d8d90cc6a37e7322c34e1969db0a26bf/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=d8265621d8d90cc6a37e7322c34e1969db0a26bf", "patch": "@@ -138,7 +138,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = ShortHtml(self).to_string();\n+        let mut msg = Html(self, true).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i .. i+1].make_ascii_uppercase();\n@@ -155,7 +155,7 @@ impl Cfg {\n             \"on\"\n         };\n \n-        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self));\n+        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self, false));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -265,7 +265,9 @@ impl ops::BitOr for Cfg {\n     }\n }\n \n-struct Html<'a>(&'a Cfg);\n+/// Pretty-print wrapper for a `Cfg`. Also indicates whether the \"short-form\" rendering should be\n+/// used.\n+struct Html<'a>(&'a Cfg, bool);\n \n fn write_with_opt_paren<T: fmt::Display>(\n     fmt: &mut fmt::Formatter,\n@@ -295,12 +297,12 @@ impl<'a> fmt::Display for Html<'a> {\n                     };\n                     for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                         fmt.write_str(if i == 0 { \"neither \" } else { separator })?;\n-                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg))?;\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n                     }\n                     Ok(())\n                 }\n-                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple)),\n-                ref c => write!(fmt, \"not ({})\", Html(c)),\n+                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple, self.1)),\n+                ref c => write!(fmt, \"not ({})\", Html(c, self.1)),\n             },\n \n             Cfg::Any(ref sub_cfgs) => {\n@@ -313,7 +315,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     if i != 0 {\n                         fmt.write_str(separator)?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg))?;\n+                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n                 }\n                 Ok(())\n             },\n@@ -323,7 +325,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     if i != 0 {\n                         fmt.write_str(\" and \")?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg))?;\n+                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n                 }\n                 Ok(())\n             },\n@@ -390,7 +392,11 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"target_endian\", Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (\"target_pointer_width\", Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n                     (\"target_feature\", Some(feat)) =>\n-                        return write!(fmt, \"target feature <code>{}</code>\", feat),\n+                        if self.1 {\n+                            return write!(fmt, \"<code>{}</code>\", feat);\n+                        } else {\n+                            return write!(fmt, \"target feature <code>{}</code>\", feat);\n+                        },\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n@@ -405,19 +411,6 @@ impl<'a> fmt::Display for Html<'a> {\n     }\n }\n \n-struct ShortHtml<'a>(&'a Cfg);\n-\n-impl<'a> fmt::Display for ShortHtml<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        match *self.0 {\n-            Cfg::Cfg(ref name, Some(ref vendor)) if name == &\"target_feature\" => {\n-                write!(fmt, \"<code>{}</code>\", vendor)\n-            },\n-            ref cfg => write!(fmt, \"{}\", Html(cfg)),\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::Cfg;\n@@ -740,6 +733,13 @@ mod test {\n                 name_value_cfg(\"target_feature\", \"sse2\").render_short_html(),\n                 \"<code>sse2</code>\"\n             );\n+            assert_eq!(\n+                (\n+                    name_value_cfg(\"target_arch\", \"x86_64\") &\n+                    name_value_cfg(\"target_feature\", \"sse2\")\n+                ).render_short_html(),\n+                \"x86-64 and <code>sse2</code>\"\n+            );\n         })\n     }\n \n@@ -818,6 +818,14 @@ mod test {\n                 name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n                 \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n             );\n+            assert_eq!(\n+                (\n+                    name_value_cfg(\"target_arch\", \"x86_64\") &\n+                    name_value_cfg(\"target_feature\", \"sse2\")\n+                ).render_long_html(),\n+                \"This is supported on <strong>x86-64 and target feature \\\n+                <code>sse2</code></strong> only.\"\n+            );\n         })\n     }\n }"}]}