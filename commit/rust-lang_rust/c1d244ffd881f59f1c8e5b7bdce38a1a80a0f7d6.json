{"sha": "c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZDI0NGZmZDg4MWY1OWYxYzhlNWI3YmRjZTM4YTFhODBhMGY3ZDY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-17T09:30:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "convert trivial predicates", "tree": {"sha": "395c9486fe945e2c96339fd91cbc5694002091ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395c9486fe945e2c96339fd91cbc5694002091ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "html_url": "https://github.com/rust-lang/rust/commit/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae", "html_url": "https://github.com/rust-lang/rust/commit/fb36c8bc80b4d8f071317adbb05337c9a0a2dbae"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "c01759393dfa5dc74073bc12681c0a095123aefd", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -670,10 +670,8 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.obligations.push(Obligation {\n             cause: self.cause.clone(),\n             param_env: self.param_env,\n-            predicate: ty::PredicateKind::RegionOutlives(ty::Binder::dummy(ty::OutlivesPredicate(\n-                sup, sub,\n-            )))\n-            .to_predicate(self.infcx.tcx),\n+            predicate: ty::PredicateKint::RegionOutlives(ty::OutlivesPredicate(sup, sub))\n+                .to_predicate(self.infcx.tcx),\n             recursion_depth: 0,\n         });\n     }"}, {"sha": "e8ec5e651bb5d35aaa328f7936227ea013a00200", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -308,7 +308,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             self.obligations.push(Obligation::new(\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::PredicateKind::WellFormed(b_ty.into()).to_predicate(self.infcx.tcx),\n+                ty::PredicateKint::WellFormed(b_ty.into()).to_predicate(self.infcx.tcx),\n             ));\n         }\n \n@@ -400,9 +400,9 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         b: &'tcx ty::Const<'tcx>,\n     ) {\n         let predicate = if a_is_expected {\n-            ty::PredicateKind::ConstEquate(a, b)\n+            ty::PredicateKint::ConstEquate(a, b)\n         } else {\n-            ty::PredicateKind::ConstEquate(b, a)\n+            ty::PredicateKint::ConstEquate(b, a)\n         };\n         self.obligations.push(Obligation::new(\n             self.trace.cause.clone(),"}, {"sha": "50c1f491557fdd98aaabb1bddd0e3666e1fccfae", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -100,11 +100,11 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n                 self.fields.obligations.push(Obligation::new(\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n-                    ty::PredicateKind::Subtype(ty::Binder::dummy(ty::SubtypePredicate {\n+                    ty::PredicateKint::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    }))\n+                    })\n                     .to_predicate(self.tcx()),\n                 ));\n "}, {"sha": "ddb7e7adbc6c5a17899d169d666c5c3f281b43fa", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -234,16 +234,16 @@ impl Elaborator<'tcx> {\n                                 if r.is_late_bound() {\n                                     None\n                                 } else {\n-                                    Some(ty::PredicateKind::RegionOutlives(ty::Binder::dummy(\n-                                        ty::OutlivesPredicate(r, r_min),\n+                                    Some(ty::PredicateKint::RegionOutlives(ty::OutlivesPredicate(\n+                                        r, r_min,\n                                     )))\n                                 }\n                             }\n \n                             Component::Param(p) => {\n                                 let ty = tcx.mk_ty_param(p.index, p.name);\n-                                Some(ty::PredicateKind::TypeOutlives(ty::Binder::dummy(\n-                                    ty::OutlivesPredicate(ty, r_min),\n+                                Some(ty::PredicateKint::TypeOutlives(ty::OutlivesPredicate(\n+                                    ty, r_min,\n                                 )))\n                             }\n "}, {"sha": "b8e041a00ee17ee9b6398c3ffa8ab5f08ca56a39", "filename": "src/librustc_middle/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcodec.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -39,7 +39,7 @@ impl<'tcx> EncodableWithShorthand for Ty<'tcx> {\n }\n \n impl<'tcx> EncodableWithShorthand for ty::Predicate<'tcx> {\n-    type Variant = ty::PredicateKind<'tcx>;\n+    type Variant = ty::PredicateKynd<'tcx>;\n     fn variant(&self) -> &Self::Variant {\n         self.kind()\n     }\n@@ -195,7 +195,7 @@ where\n         })\n     } else {\n         let tcx = decoder.tcx();\n-        Ok(tcx.mk_predicate(ty::PredicateKind::decode(decoder)?))\n+        Ok(tcx.mk_predicate(ty::PredicateKynd::decode(decoder)?))\n     }\n }\n "}, {"sha": "5491c3fb24867f5767ae14fba1f217e0f886ee08", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -27,8 +27,8 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n-    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPolyTraitRef,\n-    ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n+    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPredicate, Ty,\n+    TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n@@ -1021,7 +1021,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::PredicateKind::WellFormed(inferred_ty.into()).to_predicate(self.tcx()),\n+                        ty::PredicateKint::WellFormed(inferred_ty.into()).to_predicate(self.tcx()),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );\n@@ -1273,7 +1273,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     obligations.obligations.push(traits::Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        ty::PredicateKind::WellFormed(revealed_ty.into()).to_predicate(infcx.tcx),\n+                        ty::PredicateKint::WellFormed(revealed_ty.into()).to_predicate(infcx.tcx),\n                     ));\n                     obligations.add(\n                         infcx\n@@ -1617,7 +1617,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_call_dest(body, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n-                    sig.inputs_and_output.iter().map(|ty| ty::PredicateKind::WellFormed(ty.into())),\n+                    sig.inputs_and_output.iter().map(|ty| ty::PredicateKint::WellFormed(ty.into())),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );\n@@ -2706,8 +2706,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::PredicateKind::Trait(\n-                trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n+            Some(ty::PredicateKint::Trait(\n+                ty::TraitPredicate { trait_ref },\n                 hir::Constness::NotConst,\n             )),\n             locations,"}, {"sha": "b9f39fd23cbb68afb8cb9ea3096f48d5be7acf63", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -532,7 +532,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)\n+                ty::PredicateKint::ClosureKind(closure_def_id, substs, kind)\n                     .to_predicate(self.tcx()),\n             ));\n         }"}, {"sha": "4eb1d1856fbd7022138c88a01fbaa360095269f2", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     traits::Obligation::new(\n                         new_cause,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::PredicateKint::WellFormed(arg).to_predicate(tcx),\n                     )\n                 }),\n         );"}, {"sha": "309de9bddb71e743d6a833d993d6cd1e18519bcc", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -140,7 +140,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n             self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n \n             self.prove_predicate(\n-                ty::PredicateKind::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n+                ty::PredicateKint::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n             );\n         }\n \n@@ -155,7 +155,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // them?  This would only be relevant if some input\n         // type were ill-formed but did not appear in `ty`,\n         // which...could happen with normalization...\n-        self.prove_predicate(ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()));\n+        self.prove_predicate(ty::PredicateKint::WellFormed(ty.into()).to_predicate(self.tcx()));\n         Ok(())\n     }\n }"}, {"sha": "ee27b581311eacc571e6d2885808002166b1104d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.push(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(method_ty.into()).to_predicate(tcx),\n+            ty::PredicateKint::WellFormed(method_ty.into()).to_predicate(tcx),\n         ));\n \n         let callee = MethodCallee { def_id, substs: trait_ref.substs, sig: fn_sig };"}, {"sha": "7a96d6c678ad2f174591072c3044db01d3703651", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c1d244ffd881f59f1c8e5b7bdce38a1a80a0f7d6", "patch": "@@ -3612,7 +3612,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_predicate(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(arg).to_predicate(self.tcx),\n+            ty::PredicateKint::WellFormed(arg).to_predicate(self.tcx),\n         ));\n     }\n "}]}