{"sha": "88130f1796e98837dc6f58aea9b9a0f49b85f426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTMwZjE3OTZlOTg4MzdkYzZmNThhZWE5YjlhMGY0OWI4NWY0MjY=", "commit": {"author": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-10-30T14:11:24Z"}, "committer": {"name": "Matthew Russo", "email": "matthew@edapp.com", "date": "2018-12-04T22:24:12Z"}, "message": "updates all Filename variants to take a fingerprint", "tree": {"sha": "5333ac7519b53da3b6e05fa16c8336fc07a2e211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5333ac7519b53da3b6e05fa16c8336fc07a2e211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88130f1796e98837dc6f58aea9b9a0f49b85f426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88130f1796e98837dc6f58aea9b9a0f49b85f426", "html_url": "https://github.com/rust-lang/rust/commit/88130f1796e98837dc6f58aea9b9a0f49b85f426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88130f1796e98837dc6f58aea9b9a0f49b85f426/comments", "author": null, "committer": null, "parents": [{"sha": "6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c", "html_url": "https://github.com/rust-lang/rust/commit/6ee4d3cafce0d46b2d76a3f96aa62ca985a3ab6c"}], "stats": {"total": 144, "additions": 93, "deletions": 51}, "files": [{"sha": "dbf0147928a4e9d36dfa642c1c9cc3ff10b676b1", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -417,12 +417,12 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n impl_stable_hash_for!(enum ::syntax_pos::FileName {\n     Real(pb),\n     Macros(s),\n-    QuoteExpansion,\n-    Anon,\n-    MacroExpansion,\n-    ProcMacroSourceCode,\n-    CliCrateAttr,\n-    CfgSpec,\n+    QuoteExpansion(s),\n+    Anon(s),\n+    MacroExpansion(s),\n+    ProcMacroSourceCode(s),\n+    CliCrateAttr(s),\n+    CfgSpec(s),\n     Custom(s)\n });\n "}, {"sha": "c9866230cddc8ad215936f75940965fb0ac223fb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -1756,8 +1756,8 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> ast::CrateConfig {\n         .into_iter()\n         .map(|s| {\n             let sess = parse::ParseSess::new(FilePathMapping::empty());\n-            let mut parser =\n-                parse::new_parser_from_source_str(&sess, FileName::CfgSpec, s.to_string());\n+            let filename = FileName::cfg_spec_source_code(&s);\n+            let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n \n             macro_rules! error {($reason: expr) => {\n                 early_error(ErrorOutputType::default(),"}, {"sha": "45d107f13a0fd559805bb741b22d8ccd50de8b03", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -594,7 +594,7 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option\n             } else {\n                 None\n             };\n-            Some((Input::Str { name: FileName::Anon, input: src },\n+            Some((Input::Str { name: FileName::anon_source_code(&src), input: src },\n                   None, err))\n         } else {\n             Some((Input::File(PathBuf::from(ifile)),"}, {"sha": "b8cd9bda7f020f9775405f7fb7505164a5ca99c6", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -129,7 +129,7 @@ fn test_env_with_pool<F>(\n     let cstore = CStore::new(::get_codegen_backend(&sess).metadata_loader());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {\n-        name: FileName::Anon,\n+        name: FileName::anon_source_code(&source_string),\n         input: source_string.to_string(),\n     };\n     let krate ="}, {"sha": "85ade8ffe75c807af9b3ef75bc17164191900c15", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -3008,7 +3008,7 @@ pub struct Span {\n impl Span {\n     pub fn empty() -> Span {\n         Span {\n-            filename: FileName::Anon,\n+            filename: FileName::Anon(0),\n             loline: 0, locol: 0,\n             hiline: 0, hicol: 0,\n         }"}, {"sha": "518b34eefa8533737e966805da3d5992bcdccb97", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -803,7 +803,7 @@ pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -\n     for raw_attr in attrs {\n         let mut parser = parse::new_parser_from_source_str(\n             parse_sess,\n-            FileName::CliCrateAttr,\n+            FileName::cli_crate_attr_source_code(&raw_attr),\n             raw_attr.clone(),\n         );\n "}, {"sha": "91818992fe1f1f6c3dbad99a1b575b62a480d4ff", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -353,27 +353,27 @@ pub mod rt {\n     impl<'a> ExtParseUtils for ExtCtxt<'a> {\n         fn parse_item(&self, s: String) -> P<ast::Item> {\n             panictry!(parse::parse_item_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_stmt(&self, s: String) -> ast::Stmt {\n             panictry!(parse::parse_stmt_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess())).expect(\"parse error\")\n         }\n \n         fn parse_expr(&self, s: String) -> P<ast::Expr> {\n             panictry!(parse::parse_expr_from_source_str(\n-                FileName::QuoteExpansion,\n+                FileName::quote_expansion_source_code(&s),\n                 s,\n                 self.parse_sess()))\n         }\n \n         fn parse_tts(&self, s: String) -> Vec<TokenTree> {\n-            let source_name = FileName::QuoteExpansion;\n+            let source_name = FileName::quote_expansion_source_code(&s);\n             parse::parse_stream_from_source_str(source_name, s, self.parse_sess(), None)\n                 .into_trees().collect()\n         }"}, {"sha": "04a791fbcb9c46269d7a5fe38984cb8c7e2202b6", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -545,7 +545,8 @@ impl Token {\n         let tokens_for_real = nt.1.force(|| {\n             // FIXME(#43081): Avoid this pretty-print + reparse hack\n             let source = pprust::token_to_string(self);\n-            parse_stream_from_source_str(FileName::MacroExpansion, source, sess, Some(span))\n+            let filename = FileName::macro_expansion_source_code(&source);\n+            parse_stream_from_source_str(filename, source, sess, Some(span))\n         });\n \n         // During early phases of the compiler the AST could get modified\n@@ -781,10 +782,12 @@ fn prepend_attrs(sess: &ParseSess,\n         assert_eq!(attr.style, ast::AttrStyle::Outer,\n                    \"inner attributes should prevent cached tokens from existing\");\n \n+        let source = pprust::attr_to_string(attr);\n+        let macro_filename = FileName::macro_expansion_source_code(&source);\n         if attr.is_sugared_doc {\n             let stream = parse_stream_from_source_str(\n-                FileName::MacroExpansion,\n-                pprust::attr_to_string(attr),\n+                macro_filename,\n+                source,\n                 sess,\n                 Some(span),\n             );\n@@ -805,8 +808,8 @@ fn prepend_attrs(sess: &ParseSess,\n         // should eventually be removed.\n         } else {\n             let stream = parse_stream_from_source_str(\n-                FileName::MacroExpansion,\n-                pprust::path_to_string(&attr.path),\n+                macro_filename,\n+                source,\n                 sess,\n                 Some(span),\n             );"}, {"sha": "e22d4f8f1332504529191d05424654574bbfad9d", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -110,14 +110,14 @@ pub struct StableSourceFileId(u128);\n \n impl StableSourceFileId {\n     pub fn new(source_file: &SourceFile) -> StableSourceFileId {\n-        StableFilemapId::new_from_pieces(&source_file.name,\n+        StableSourceFileId::new_from_pieces(&source_file.name,\n                                          source_file.name_was_remapped,\n                                          source_file.unmapped_path.as_ref())\n     }\n \n     pub fn new_from_pieces(name: &FileName,\n                            name_was_remapped: bool,\n-                           unmapped_path: Option<&FileName>) -> StableFilemapId {\n+                           unmapped_path: Option<&FileName>) -> StableSourceFileId {\n         let mut hasher = StableHasher::new();\n \n         name.hash(&mut hasher);\n@@ -236,7 +236,7 @@ impl SourceMap {\n             other => (other, false),\n         };\n \n-        let file_id = StableFilemapId::new_from_pieces(&filename,\n+        let file_id = StableSourceFileId::new_from_pieces(&filename,\n                                                        was_remapped,\n                                                        Some(&unmapped_path));\n "}, {"sha": "ff3c1cf9f47758339ac3126ac89033121ad29fa3", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 61, "deletions": 24, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -90,17 +90,17 @@ pub enum FileName {\n     /// A macro.  This includes the full name of the macro, so that there are no clashes.\n     Macros(String),\n     /// call to `quote!`\n-    QuoteExpansion,\n+    QuoteExpansion(u64),\n     /// Command line\n-    Anon,\n+    Anon(u64),\n     /// Hack in src/libsyntax/parse.rs\n     /// FIXME(jseyfried)\n-    MacroExpansion,\n-    ProcMacroSourceCode,\n+    MacroExpansion(u64),\n+    ProcMacroSourceCode(u64),\n     /// Strings provided as --cfg [cfgspec] stored in a crate_cfg\n-    CfgSpec,\n+    CfgSpec(u64),\n     /// Strings provided as crate attributes in the CLI\n-    CliCrateAttr,\n+    CliCrateAttr(u64),\n     /// Custom sources for explicit parser calls from plugins and drivers\n     Custom(String),\n }\n@@ -111,12 +111,13 @@ impl std::fmt::Display for FileName {\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n             Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n-            QuoteExpansion => write!(fmt, \"<quote expansion>\"),\n-            MacroExpansion => write!(fmt, \"<macro expansion>\"),\n-            Anon => write!(fmt, \"<anon>\"),\n-            ProcMacroSourceCode => write!(fmt, \"<proc-macro source code>\"),\n-            CfgSpec => write!(fmt, \"cfgspec\"),\n-            CliCrateAttr => write!(fmt, \"<crate attribute>\"),\n+            QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n+            MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n+            Anon(_) => write!(fmt, \"<anon>\"),\n+            ProcMacroSourceCode(_) =>\n+                write!(fmt, \"<proc-macro source code>\"),\n+            CfgSpec(_) => write!(fmt, \"<cfgspec>\"),\n+            CliCrateAttr(_) => write!(fmt, \"<crate attribute>\"),\n             Custom(ref s) => write!(fmt, \"<{}>\", s),\n         }\n     }\n@@ -135,30 +136,66 @@ impl FileName {\n         match *self {\n             Real(_) => true,\n             Macros(_) |\n-            Anon |\n-            MacroExpansion |\n-            ProcMacroSourceCode |\n-            CfgSpec |\n-            CliCrateAttr |\n+            Anon(_) |\n+            MacroExpansion(_) |\n+            ProcMacroSourceCode(_) |\n+            CfgSpec(_) |\n+            CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion => false,\n+            QuoteExpansion(_) => false,\n         }\n     }\n \n     pub fn is_macros(&self) -> bool {\n         use self::FileName::*;\n         match *self {\n             Real(_) |\n-            Anon |\n-            MacroExpansion |\n-            ProcMacroSourceCode |\n-            CfgSpec |\n-            CliCrateAttr |\n+            Anon(_) |\n+            MacroExpansion(_) |\n+            ProcMacroSourceCode(_) |\n+            CfgSpec(_) |\n+            CliCrateAttr(_) |\n             Custom(_) |\n-            QuoteExpansion => false,\n+            QuoteExpansion(_) => false,\n             Macros(_) => true,\n         }\n     }\n+\n+    pub fn quote_expansion_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::QuoteExpansion(hasher.finish())\n+    }\n+\n+    pub fn macro_expansion_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::MacroExpansion(hasher.finish())\n+    }\n+\n+    pub fn anon_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::Anon(hasher.finish())\n+    }\n+\n+    pub fn proc_macro_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::ProcMacroSourceCode(hasher.finish())\n+    }\n+\n+    pub fn cfg_spec_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::QuoteExpansion(hasher.finish())\n+    }\n+\n+    pub fn cli_crate_attr_source_code(src: &str) -> FileName {\n+        let mut hasher = StableHasher::new();\n+        src.hash(&mut hasher);\n+        FileName::CliCrateAttr(hasher.finish())\n+    }\n }\n \n /// Spans represent a region of code, used for error reporting. Positions in spans"}, {"sha": "97d5fab569dca6f733543d0f9246209e0b4728d1", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -33,7 +33,7 @@ use std::fmt;\n // Copied out of syntax::util::parser_testing\n \n pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n-    new_parser_from_source_str(ps, FileName::Custom(\"bogofile\".to_owned()), source_str)\n+    new_parser_from_source_str(ps, FileName::Custom(source_str.clone()), source_str)\n }\n \n fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F) -> PResult<'a, T> where"}, {"sha": "854063a2984b4fc66dfafd8d9f9117b068c9a88b", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88130f1796e98837dc6f58aea9b9a0f49b85f426/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=88130f1796e98837dc6f58aea9b9a0f49b85f426", "patch": "@@ -44,9 +44,11 @@ use syntax::ptr::P;\n \n \n fn parse_expr(ps: &ParseSess, src: &str) -> P<Expr> {\n+    let src_as_string = src.to_string();\n+\n     let mut p = parse::new_parser_from_source_str(ps,\n-                                                  FileName::Custom(\"expr\".to_owned()),\n-                                                  src.to_owned());\n+                                                  FileName::Custom(src_as_string.clone()),\n+                                                  src_as_string);\n     p.parse_expr().unwrap()\n }\n "}]}