{"sha": "1254fe974dd33199130a1f01647992be986b5dbb", "node_id": "C_kwDOAAsO6NoAKDEyNTRmZTk3NGRkMzMxOTkxMzBhMWYwMTY0Nzk5MmJlOTg2YjVkYmI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-28T01:44:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T20:35:01Z"}, "message": "Remove `{Method,Trait}Def::is_unsafe`.\n\nThey are always `false`.", "tree": {"sha": "ce45b4a5be18808e4d75afdc5790b7205131303f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce45b4a5be18808e4d75afdc5790b7205131303f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1254fe974dd33199130a1f01647992be986b5dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1254fe974dd33199130a1f01647992be986b5dbb", "html_url": "https://github.com/rust-lang/rust/commit/1254fe974dd33199130a1f01647992be986b5dbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1254fe974dd33199130a1f01647992be986b5dbb/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13fa0d21bd3080ae180e244274bde055d311e1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13fa0d21bd3080ae180e244274bde055d311e1d", "html_url": "https://github.com/rust-lang/rust/commit/d13fa0d21bd3080ae180e244274bde055d311e1d"}], "stats": {"total": 39, "additions": 2, "deletions": 37}, "files": [{"sha": "5ef68c6aeaa59956862f803c7094e31a7d0e0430", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -19,7 +19,6 @@ pub fn expand_deriving_copy(\n         path: path_std!(marker::Copy),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: true,\n         methods: Vec::new(),\n         associated_types: Vec::new(),"}, {"sha": "be88ad5e5a961db0679b2d9de64956e9f29810e0", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -81,7 +81,6 @@ pub fn expand_deriving_clone(\n         path: path_std!(clone::Clone),\n         additional_bounds: bounds,\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::clone,\n@@ -90,7 +89,6 @@ pub fn expand_deriving_clone(\n             args: Vec::new(),\n             ret_ty: Self_,\n             attributes: attrs,\n-            is_unsafe: false,\n             unify_fieldless_variants: false,\n             combine_substructure: substructure,\n         }],"}, {"sha": "63665165f6759cb9136b49a3fbc5cced0bd86ad8", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -27,7 +27,6 @@ pub fn expand_deriving_eq(\n         path: path_std!(cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::assert_receiver_is_total_eq,\n@@ -36,7 +35,6 @@ pub fn expand_deriving_eq(\n             args: vec![],\n             ret_ty: nil_ty(),\n             attributes: attrs,\n-            is_unsafe: false,\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 cs_total_eq_assert(a, b, c)"}, {"sha": "b2ca2cc929296486c10e0e06cd15cd63d091c9df", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -23,7 +23,6 @@ pub fn expand_deriving_ord(\n         path: path_std!(cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::cmp,\n@@ -32,7 +31,6 @@ pub fn expand_deriving_ord(\n             args: vec![(borrowed_self(), sym::other)],\n             ret_ty: Literal(path_std!(cmp::Ordering)),\n             attributes: attrs,\n-            is_unsafe: false,\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),\n         }],"}, {"sha": "fda25c1ff03f396d0e540b6eebbe0ae5d6a2ebd2", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -73,7 +73,6 @@ pub fn expand_deriving_partial_eq(\n                 args: vec![(borrowed_self(), sym::other)],\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n-                is_unsafe: false,\n                 unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| $f(a, b, c))),\n             }\n@@ -102,7 +101,6 @@ pub fn expand_deriving_partial_eq(\n         path: path_std!(cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods,\n         associated_types: Vec::new(),"}, {"sha": "fb98218a002e4b290d740377ccc5c0a526af2e45", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -33,7 +33,6 @@ pub fn expand_deriving_partial_ord(\n         args: vec![(borrowed_self(), sym::other)],\n         ret_ty,\n         attributes: attrs,\n-        is_unsafe: false,\n         unify_fieldless_variants: true,\n         combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n@@ -46,7 +45,6 @@ pub fn expand_deriving_partial_ord(\n         path: path_std!(cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![partial_cmp_def],\n         associated_types: Vec::new(),"}, {"sha": "66676bcf28b7c29fb66e831a80f1a724d03a601c", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_debug(\n         path: path_std!(fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::fmt,\n@@ -34,7 +33,6 @@ pub fn expand_deriving_debug(\n             args: vec![(fmtr, sym::f)],\n             ret_ty: Literal(path_std!(fmt::Result)),\n             attributes: Vec::new(),\n-            is_unsafe: false,\n             unify_fieldless_variants: false,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 show_substructure(a, b, c)"}, {"sha": "d335131a5f16a4ac1b6b4364ba1b13387e422a59", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -26,7 +26,6 @@ pub fn expand_deriving_rustc_decodable(\n         path: Path::new_(vec![krate, sym::Decodable], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::decode,\n@@ -56,7 +55,6 @@ pub fn expand_deriving_rustc_decodable(\n                 PathKind::Std,\n             )),\n             attributes: Vec::new(),\n-            is_unsafe: false,\n             unify_fieldless_variants: false,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 decodable_substructure(a, b, c, krate)"}, {"sha": "7ff7a5c405060ee989fcc1684ca3fa9376173692", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -30,7 +30,6 @@ pub fn expand_deriving_default(\n         path: Path::new(vec![kw::Default, sym::Default]),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: kw::Default,\n@@ -39,7 +38,6 @@ pub fn expand_deriving_default(\n             args: Vec::new(),\n             ret_ty: Self_,\n             attributes: attrs,\n-            is_unsafe: false,\n             unify_fieldless_variants: false,\n             combine_substructure: combine_substructure(Box::new(|cx, trait_span, substr| {\n                 match substr.fields {"}, {"sha": "01f4a2c05c59cc0a3af39b06c56872a329d22a93", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -111,7 +111,6 @@ pub fn expand_deriving_rustc_encodable(\n         path: Path::new_(vec![krate, sym::Encodable], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::encode,\n@@ -141,7 +140,6 @@ pub fn expand_deriving_rustc_encodable(\n                 PathKind::Std,\n             )),\n             attributes: Vec::new(),\n-            is_unsafe: false,\n             unify_fieldless_variants: false,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 encodable_substructure(a, b, c, krate)"}, {"sha": "2a0386b47395a0b8bc1323610130d23c45e008a6", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -210,9 +210,6 @@ pub struct TraitDef<'a> {\n     /// Any extra lifetimes and/or bounds, e.g., `D: serialize::Decoder`\n     pub generics: Bounds,\n \n-    /// Is it an `unsafe` trait?\n-    pub is_unsafe: bool,\n-\n     /// Can this trait be derived for unions?\n     pub supports_unions: bool,\n \n@@ -240,9 +237,6 @@ pub struct MethodDef<'a> {\n \n     pub attributes: Vec<ast::Attribute>,\n \n-    // Is it an `unsafe fn`?\n-    pub is_unsafe: bool,\n-\n     /// Can we combine fieldless variants for enums into a single match arm?\n     pub unify_fieldless_variants: bool,\n \n@@ -717,14 +711,12 @@ impl<'a> TraitDef<'a> {\n         let mut a = vec![attr, unused_qual];\n         a.extend(self.attributes.iter().cloned());\n \n-        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(self.span) } else { ast::Unsafe::No };\n-\n         cx.item(\n             self.span,\n             Ident::empty(),\n             a,\n             ast::ItemKind::Impl(Box::new(ast::Impl {\n-                unsafety,\n+                unsafety: ast::Unsafe::No,\n                 polarity: ast::ImplPolarity::Positive,\n                 defaultness: ast::Defaultness::Final,\n                 constness: ast::Const::No,\n@@ -939,15 +931,9 @@ impl<'a> MethodDef<'a> {\n         let fn_decl = cx.fn_decl(args, ast::FnRetTy::Ty(ret_type));\n         let body_block = cx.block_expr(body);\n \n-        let unsafety = if self.is_unsafe { ast::Unsafe::Yes(span) } else { ast::Unsafe::No };\n-\n         let trait_lo_sp = span.shrink_to_lo();\n \n-        let sig = ast::FnSig {\n-            header: ast::FnHeader { unsafety, ext: ast::Extern::None, ..ast::FnHeader::default() },\n-            decl: fn_decl,\n-            span,\n-        };\n+        let sig = ast::FnSig { header: ast::FnHeader::default(), decl: fn_decl, span };\n         let defaultness = ast::Defaultness::Final;\n \n         // Create the method."}, {"sha": "da88e01a30afb668fa3c71c9d482cb53b940e691", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254fe974dd33199130a1f01647992be986b5dbb/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=1254fe974dd33199130a1f01647992be986b5dbb", "patch": "@@ -26,7 +26,6 @@ pub fn expand_deriving_hash(\n         path,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n-        is_unsafe: false,\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::hash,\n@@ -35,7 +34,6 @@ pub fn expand_deriving_hash(\n             args: vec![(Ptr(Box::new(Literal(arg)), Borrowed(None, Mutability::Mut)), sym::state)],\n             ret_ty: nil_ty(),\n             attributes: vec![],\n-            is_unsafe: false,\n             unify_fieldless_variants: true,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 hash_substructure(a, b, c)"}]}