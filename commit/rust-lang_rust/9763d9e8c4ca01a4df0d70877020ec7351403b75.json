{"sha": "9763d9e8c4ca01a4df0d70877020ec7351403b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjNkOWU4YzRjYTAxYTRkZjBkNzA4NzcwMjBlYzczNTE0MDNiNzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T08:32:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T08:32:06Z"}, "message": "Enable searching for builtin types", "tree": {"sha": "b007710dcc6152b5c0fedd1c0bedf8c96811652d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b007710dcc6152b5c0fedd1c0bedf8c96811652d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9763d9e8c4ca01a4df0d70877020ec7351403b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9763d9e8c4ca01a4df0d70877020ec7351403b75", "html_url": "https://github.com/rust-lang/rust/commit/9763d9e8c4ca01a4df0d70877020ec7351403b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9763d9e8c4ca01a4df0d70877020ec7351403b75/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0459c53572f90fa9134192e432562af3daba5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0459c53572f90fa9134192e432562af3daba5fa", "html_url": "https://github.com/rust-lang/rust/commit/c0459c53572f90fa9134192e432562af3daba5fa"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "ec7c7686d5207b1f89abe4b2a1b66512e2c37e3c", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=9763d9e8c4ca01a4df0d70877020ec7351403b75", "patch": "@@ -29,7 +29,7 @@ use crate::{display::TryToNav, FilePosition, NavigationTarget};\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n-    pub declaration: Declaration,\n+    pub declaration: Option<Declaration>,\n     pub references: FxHashMap<FileId, Vec<(TextRange, Option<ReferenceAccess>)>>,\n }\n \n@@ -91,10 +91,10 @@ pub(crate) fn find_all_refs(\n             _ => {}\n         }\n     }\n-    let nav = def.try_to_nav(sema.db)?;\n-    let decl_range = nav.focus_or_full_range();\n-\n-    let declaration = Declaration { nav, access: decl_access(&def, &syntax, decl_range) };\n+    let declaration = def.try_to_nav(sema.db).map(|nav| {\n+        let decl_range = nav.focus_or_full_range();\n+        Declaration { nav, access: decl_access(&def, &syntax, decl_range) }\n+    });\n     let references = usages\n         .into_iter()\n         .map(|(file_id, refs)| {\n@@ -1004,8 +1004,7 @@ impl Foo {\n         let refs = analysis.find_all_refs(pos, search_scope).unwrap().unwrap();\n \n         let mut actual = String::new();\n-        {\n-            let decl = refs.declaration;\n+        if let Some(decl) = refs.declaration {\n             format_to!(actual, \"{}\", decl.nav.debug_render());\n             if let Some(access) = decl.access {\n                 format_to!(actual, \" {:?}\", access)\n@@ -1258,4 +1257,17 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_primitives() {\n+        check(\n+            r#\"\n+fn foo(_: bool) -> bo$0ol { true }\n+\"#,\n+            expect![[r#\"\n+                FileId(0) 10..14\n+                FileId(0) 19..23\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "5340b638a022128bdf0d48f22eaffdbcf1108151", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=9763d9e8c4ca01a4df0d70877020ec7351403b75", "patch": "@@ -510,7 +510,8 @@ fn source_edit_from_def(\n     def: Definition,\n     new_name: &str,\n ) -> RenameResult<(FileId, TextEdit)> {\n-    let nav = def.try_to_nav(sema.db).unwrap();\n+    let nav =\n+        def.try_to_nav(sema.db).ok_or_else(|| format_err!(\"No references found at position\"))?;\n \n     let mut replacement_text = String::new();\n     let mut repl_range = nav.focus_or_full_range();"}, {"sha": "f86e5ce93ac1575d19c092fdce6d8ac62adc3f35", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=9763d9e8c4ca01a4df0d70877020ec7351403b75", "patch": "@@ -70,7 +70,7 @@ impl Definition {\n                 hir::ModuleDef::Static(it) => it.name(db)?,\n                 hir::ModuleDef::Trait(it) => it.name(db),\n                 hir::ModuleDef::TypeAlias(it) => it.name(db),\n-                hir::ModuleDef::BuiltinType(_) => return None,\n+                hir::ModuleDef::BuiltinType(it) => it.name(),\n             },\n             Definition::SelfType(_) => return None,\n             Definition::Local(it) => it.name(db)?,"}, {"sha": "1615d407ee2f64a315be00d9c257085ca4e0483d", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=9763d9e8c4ca01a4df0d70877020ec7351403b75", "patch": "@@ -6,7 +6,7 @@\n \n use std::{convert::TryInto, mem};\n \n-use base_db::{FileId, FileRange, SourceDatabaseExt};\n+use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n use rustc_hash::FxHashMap;\n@@ -134,6 +134,20 @@ impl IntoIterator for SearchScope {\n impl Definition {\n     fn search_scope(&self, db: &RootDatabase) -> SearchScope {\n         let _p = profile::span(\"search_scope\");\n+\n+        if let Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) = self {\n+            let mut res = FxHashMap::default();\n+\n+            let graph = db.crate_graph();\n+            for krate in graph.iter() {\n+                let root_file = graph[krate].root_file_id;\n+                let source_root_id = db.file_source_root(root_file);\n+                let source_root = db.source_root(source_root_id);\n+                res.extend(source_root.iter().map(|id| (id, None)));\n+            }\n+            return SearchScope::new(res);\n+        }\n+\n         let module = match self.module(db) {\n             Some(it) => it,\n             None => return SearchScope::empty(),"}, {"sha": "9bb82164d0ba645c92c4ca045a8950ff4648e66c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9763d9e8c4ca01a4df0d70877020ec7351403b75/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9763d9e8c4ca01a4df0d70877020ec7351403b75", "patch": "@@ -828,9 +828,9 @@ pub(crate) fn handle_references(\n     };\n \n     let decl = if params.context.include_declaration {\n-        Some(FileRange {\n-            file_id: refs.declaration.nav.file_id,\n-            range: refs.declaration.nav.focus_or_full_range(),\n+        refs.declaration.map(|decl| FileRange {\n+            file_id: decl.nav.file_id,\n+            range: decl.nav.focus_or_full_range(),\n         })\n     } else {\n         None\n@@ -1135,14 +1135,12 @@ pub(crate) fn handle_document_highlight(\n         Some(refs) => refs,\n     };\n \n-    let decl = if refs.declaration.nav.file_id == position.file_id {\n-        Some(DocumentHighlight {\n-            range: to_proto::range(&line_index, refs.declaration.nav.focus_or_full_range()),\n-            kind: refs.declaration.access.map(to_proto::document_highlight_kind),\n-        })\n-    } else {\n-        None\n-    };\n+    let decl = refs.declaration.filter(|decl| decl.nav.file_id == position.file_id).map(|decl| {\n+        DocumentHighlight {\n+            range: to_proto::range(&line_index, decl.nav.focus_or_full_range()),\n+            kind: decl.access.map(to_proto::document_highlight_kind),\n+        }\n+    });\n \n     let file_refs = refs.references.get(&position.file_id).map_or(&[][..], Vec::as_slice);\n     let mut res = Vec::with_capacity(file_refs.len() + 1);"}]}