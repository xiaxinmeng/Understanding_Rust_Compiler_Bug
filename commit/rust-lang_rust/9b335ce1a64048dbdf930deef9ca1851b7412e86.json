{"sha": "9b335ce1a64048dbdf930deef9ca1851b7412e86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMzM1Y2UxYTY0MDQ4ZGJkZjkzMGRlZWY5Y2ExODUxYjc0MTJlODY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-07T20:08:57Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Move predecessors cache back to its own type\n\nThis ensures that the cache can be properly ignored during encoding and decoding.\nFix panics that arose due to lack of encoding", "tree": {"sha": "8292b864cdd9e8b77bc97d82906a103e96762489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8292b864cdd9e8b77bc97d82906a103e96762489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b335ce1a64048dbdf930deef9ca1851b7412e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b335ce1a64048dbdf930deef9ca1851b7412e86", "html_url": "https://github.com/rust-lang/rust/commit/9b335ce1a64048dbdf930deef9ca1851b7412e86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b335ce1a64048dbdf930deef9ca1851b7412e86/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22bc8a01c19b88ecd0b60081322f4ec60032f78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/22bc8a01c19b88ecd0b60081322f4ec60032f78f", "html_url": "https://github.com/rust-lang/rust/commit/22bc8a01c19b88ecd0b60081322f4ec60032f78f"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "8dac356c0a2990d162b3bb811f24be6d24e7f9f6", "filename": "src/librustc/mir/cache.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=9b335ce1a64048dbdf930deef9ca1851b7412e86", "patch": "@@ -0,0 +1,47 @@\n+use rustc_index::vec::IndexVec;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n+use crate::ich::StableHashingContext;\n+use crate::mir::BasicBlock;\n+\n+#[derive(Clone, Debug)]\n+pub(in crate::mir) struct Cache {\n+    pub(in crate::mir) predecessors: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>\n+}\n+\n+\n+impl rustc_serialize::Encodable for Cache {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&(), s)\n+    }\n+}\n+\n+impl rustc_serialize::Decodable for Cache {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        Decodable::decode(d).map(|_v: ()| Self::new())\n+    }\n+}\n+\n+impl<'a> HashStable<StableHashingContext<'a>> for Cache {\n+    fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n+        // Do nothing.\n+    }\n+}\n+\n+impl Cache {\n+    pub fn new() -> Self {\n+        Cache {\n+            predecessors: None\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn invalidate_predecessors(&mut self) {\n+        // FIXME: consider being more fine-grained\n+        self.predecessors = None;\n+    }\n+}\n+\n+CloneTypeFoldableAndLiftImpls! {\n+    Cache,\n+}"}, {"sha": "fb5ee211de2e203a05dbb29aea32ca4d187a08d5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9b335ce1a64048dbdf930deef9ca1851b7412e86", "patch": "@@ -40,6 +40,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n \n+mod cache;\n pub mod interpret;\n pub mod mono;\n pub mod tcx;\n@@ -154,7 +155,7 @@ pub struct Body<'tcx> {\n     pub span: Span,\n \n     /// A cache for various calculations.\n-    predecessors_cache: Option<IndexVec<BasicBlock, Vec<BasicBlock>>>,\n+    cache: cache::Cache,\n }\n \n impl<'tcx> Body<'tcx> {\n@@ -191,7 +192,7 @@ impl<'tcx> Body<'tcx> {\n             spread_arg: None,\n             var_debug_info,\n             span,\n-            predecessors_cache: None,\n+            cache: cache::Cache::new(),\n             control_flow_destroyed,\n         }\n     }\n@@ -204,7 +205,7 @@ impl<'tcx> Body<'tcx> {\n     #[inline]\n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         debug!(\"bbm: Clearing predecessors cache for body at: {:?}\", self.span.data());\n-        self.predecessors_cache = None;\n+        self.cache.invalidate_predecessors();\n         &mut self.basic_blocks\n     }\n \n@@ -213,23 +214,23 @@ impl<'tcx> Body<'tcx> {\n         &mut self,\n     ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {\n         debug!(\"bbaldm: Clearing predecessors cache for body at: {:?}\", self.span.data());\n-        self.predecessors_cache = None;\n+        self.cache.invalidate_predecessors();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n     #[inline]\n     pub fn unwrap_predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         assert!(\n-            self.predecessors_cache.is_some(),\n-            \"Expected predecessors_cache to be `Some(...)` for block at: {:?}\",\n+            self.cache.predecessors.is_some(),\n+            \"Expected cache.predecessors to be `Some(...)` for block at: {:?}\",\n             self.span.data()\n         );\n-        self.predecessors_cache.as_ref().unwrap()\n+        self.cache.predecessors.as_ref().unwrap()\n     }\n \n     #[inline]\n     pub fn ensure_predecessors(&mut self) {\n-        if self.predecessors_cache.is_none() {\n+        if self.cache.predecessors.is_none() {\n             let mut result = IndexVec::from_elem(vec![], self.basic_blocks());\n             for (bb, data) in self.basic_blocks().iter_enumerated() {\n                 if let Some(ref term) = data.terminator {\n@@ -239,15 +240,15 @@ impl<'tcx> Body<'tcx> {\n                 }\n             }\n \n-            self.predecessors_cache = Some(result)\n+            self.cache.predecessors = Some(result)\n         }\n     }\n \n     #[inline]\n     /// This will recompute the predecessors cache if it is not available\n     pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n         self.ensure_predecessors();\n-        self.predecessors_cache.as_ref().unwrap()\n+        self.cache.predecessors.as_ref().unwrap()\n     }\n \n     #[inline]\n@@ -1030,8 +1031,6 @@ impl BasicBlock {\n     }\n }\n \n-CloneTypeFoldableAndLiftImpls!{ BasicBlock, }\n-\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n "}, {"sha": "bbf28418f11a675af13112884783878e9cd116ad", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=9b335ce1a64048dbdf930deef9ca1851b7412e86", "patch": "@@ -1082,7 +1082,7 @@ impl<'a, 'tcx> CrateMetadata {\n \n     fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n         self.root.per_def.mir.get(self, id)\n-            .filter(|_| !self.is_proc_macro(id))\n+        self.entry_unless_proc_macro(id)\n             .unwrap_or_else(|| {\n                 bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })"}, {"sha": "e80fb93617075cc6b2f145e6b2943ff5178ce147", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b335ce1a64048dbdf930deef9ca1851b7412e86/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=9b335ce1a64048dbdf930deef9ca1851b7412e86", "patch": "@@ -249,8 +249,9 @@ fn mir_validated(\n         // What we need to run borrowck etc.\n         &promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n-        &ensure_predecessors_cache::EnsurePredecessorsCache::new(\"qualify-consts\"),\n     ]);\n+\n+    body.ensure_predecessors();\n     let promoted = promote_pass.promoted_fragments.into_inner();\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }"}]}