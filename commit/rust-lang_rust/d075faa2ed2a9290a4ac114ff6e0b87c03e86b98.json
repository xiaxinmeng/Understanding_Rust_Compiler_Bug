{"sha": "d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNzVmYWEyZWQyYTkyOTBhNGFjMTE0ZmY2ZTBiODdjMDNlODZiOTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-24T01:08:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-24T08:53:43Z"}, "message": "nits", "tree": {"sha": "805f97d3a875511d67889794bcf06b4b04384aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/805f97d3a875511d67889794bcf06b4b04384aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "html_url": "https://github.com/rust-lang/rust/commit/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8931a793346985229d7392620abea50d3e96ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8931a793346985229d7392620abea50d3e96ac5", "html_url": "https://github.com/rust-lang/rust/commit/f8931a793346985229d7392620abea50d3e96ac5"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "799d9a653ae38be181ba141ecfa92ebefc2a4a73", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n                 //\n                 // Note that `p` (and `'a`) are not used in the\n                 // closure at all, but to meet the requirement that\n-                // the closure type `C: 'static` (so it can be coerce\n+                // the closure type `C: 'static` (so it can be coerced\n                 // to the object type), we get the requirement that\n                 // `'a: 'static` since `'a` appears in the closure\n                 // type `C`."}, {"sha": "a54aee24367721e8b0d93ac5bb73457d922da16d", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "patch": "@@ -1162,10 +1162,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// these unconstrained type variables.\n     fn resolve_type_vars_or_error(&self, t: &Ty<'tcx>) -> mc::McResult<Ty<'tcx>> {\n         let ty = self.resolve_type_vars_if_possible(t);\n-        if ty.references_error() {\n-            debug!(\"resolve_type_vars_or_error: error from {:?}\", ty);\n-            Err(())\n-        } else if ty.is_ty_var() {\n+        if ty.references_error() || ty.is_ty_var() {\n             debug!(\"resolve_type_vars_or_error: error from {:?}\", ty);\n             Err(())\n         } else {"}, {"sha": "aa1c8bfaa904fb465080a68cfd41ff6f46e46706", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "patch": "@@ -1857,9 +1857,9 @@ pub enum TypeVariants<'tcx> {\n /// closures from capturing themselves (except via a trait\n /// object). This simplifies closure inference considerably, since it\n /// means that when we infer the kind of a closure or its upvars, we\n-/// don't have to handles cycles where the decisions we make wind up\n-/// for closure C wind up influencing the decisions we ought to make\n-/// for closure C (which would then require fixed point iteration to\n+/// don't have to handle cycles where the decisions we make for\n+/// closure C wind up influencing the decisions we ought to make for\n+/// closure C (which would then require fixed point iteration to\n /// handle). Plus it fixes an ICE. :P\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct ClosureSubsts<'tcx> {\n@@ -7158,8 +7158,6 @@ impl<'tcx> HasTypeFlags for ClosureSubsts<'tcx> {\n     }\n }\n \n-\n-\n impl<'tcx> fmt::Debug for ClosureTy<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"ClosureTy({},{:?},{})\","}, {"sha": "ff89d97c47b1198f63754ae720647d991938aa75", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d075faa2ed2a9290a4ac114ff6e0b87c03e86b98/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=d075faa2ed2a9290a4ac114ff6e0b87c03e86b98", "patch": "@@ -138,7 +138,7 @@ pub fn get_or_create_closure_declaration<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     };\n \n     if let Some(&llfn) = ccx.closure_vals().borrow().get(&mono_id) {\n-        debug!(\"get_or_create_declaration_if_closure(): found closure {:?}: {:?}\",\n+        debug!(\"get_or_create_closure_declaration(): found closure {:?}: {:?}\",\n                mono_id, ccx.tn().val_to_string(llfn));\n         return llfn;\n     }"}]}