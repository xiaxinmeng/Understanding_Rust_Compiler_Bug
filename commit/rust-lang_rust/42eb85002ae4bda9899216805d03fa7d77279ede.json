{"sha": "42eb85002ae4bda9899216805d03fa7d77279ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZWI4NTAwMmFlNGJkYTk4OTkyMTY4MDVkMDNmYTdkNzcyNzllZGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-06-01T17:20:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-10T20:43:01Z"}, "message": "Upgrade to LLVM's master branch (LLVM 7)\n\nThis commit upgrades the main LLVM submodule to LLVM's current master branch.\nThe LLD submodule is updated in tandem as well as compiler-builtins.\n\nAlong the way support was also added for LLVM 7's new features. This primarily\nincludes the support for custom section concatenation natively in LLD so we now\nadd wasm custom sections in LLVM IR rather than having custom support in rustc\nitself for doing so.\n\nSome other miscellaneous changes are:\n\n* We now pass `--gc-sections` to `wasm-ld`\n* The optimization level is now passed to `wasm-ld`\n* A `--stack-first` option is passed to LLD to have stack overflow always cause\n  a trap instead of corrupting static data\n* The wasm target for LLVM switched to `wasm32-unknown-unknown`.\n* The syntax for aligned pointers has changed in LLVM IR and tests are updated\n  to reflect this.\n* The `thumbv6m-none-eabi` target is disabled due to an [LLVM bug][llbug]\n\nNowadays we've been mostly only upgrading whenever there's a major release of\nLLVM but enough changes have been happening on the wasm target that there's been\ngrowing motivation for quite some time now to upgrade out version of LLD. To\nupgrade LLD, however, we need to upgrade LLVM to avoid needing to build yet\nanother version of LLVM on the builders.\n\nThe revision of LLVM in use here is arbitrarily chosen. We will likely need to\ncontinue to update it over time if and when we discover bugs. Once LLVM 7 is\nfully released we can switch to that channel as well.\n\n[llbug]: https://bugs.llvm.org/show_bug.cgi?id=37382", "tree": {"sha": "9168dbe500ecdfa86151701e15284c6c9f78d715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9168dbe500ecdfa86151701e15284c6c9f78d715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42eb85002ae4bda9899216805d03fa7d77279ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42eb85002ae4bda9899216805d03fa7d77279ede", "html_url": "https://github.com/rust-lang/rust/commit/42eb85002ae4bda9899216805d03fa7d77279ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42eb85002ae4bda9899216805d03fa7d77279ede/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c30acc7187fe5ab9ca8a34411bb89bfe241a0662", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30acc7187fe5ab9ca8a34411bb89bfe241a0662", "html_url": "https://github.com/rust-lang/rust/commit/c30acc7187fe5ab9ca8a34411bb89bfe241a0662"}], "stats": {"total": 400, "additions": 202, "deletions": 198}, "files": [{"sha": "86bf357a14cacb4a4169455e729d409b5ecc1da0", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1 +1 @@\n-Subproject commit 4cfd7101eb549169cdaeda5313f7c39415b9d736\n+Subproject commit 86bf357a14cacb4a4169455e729d409b5ecc1da0"}, {"sha": "ef564ac89f906145946579cbe1ace58a25da91e0", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -665,8 +665,6 @@ define_dep_nodes!( <'tcx>\n \n     [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n \n-    [] WasmCustomSections(CrateNum),\n-\n     [input] Features,\n \n     [] ProgramClausesFor(DefId),"}, {"sha": "2d83c158fe08f1bb8c65a1f2b695437ad6d7eed0", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -57,7 +57,7 @@ struct CheckAttrVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n     /// Check any attribute.\n     fn check_attributes(&self, item: &hir::Item, target: Target) {\n-        if target == Target::Fn {\n+        if target == Target::Fn || target == Target::Const {\n             self.tcx.codegen_fn_attrs(self.tcx.hir.local_def_id(item.id));\n         } else if let Some(a) = item.attrs.iter().find(|a| a.check_name(\"target_feature\")) {\n             self.tcx.sess.struct_span_err(a.span, \"attribute should be applied to a function\")\n@@ -85,11 +85,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 if target != Target::Const {\n                     self.tcx.sess.span_err(attr.span, \"only allowed on consts\");\n                 }\n-\n-                if attr.value_str().is_none() {\n-                    self.tcx.sess.span_err(attr.span, \"must be of the form \\\n-                        #[wasm_custom_section = \\\"foo\\\"]\");\n-                }\n             }\n         }\n "}, {"sha": "2a515fe3f2d46452d4f377c76d9a376f8108217c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -2259,6 +2259,7 @@ pub struct CodegenFnAttrs {\n     pub export_name: Option<Symbol>,\n     pub target_features: Vec<Symbol>,\n     pub linkage: Option<Linkage>,\n+    pub wasm_custom_section: Option<Symbol>,\n }\n \n bitflags! {\n@@ -2283,6 +2284,7 @@ impl CodegenFnAttrs {\n             export_name: None,\n             target_features: vec![],\n             linkage: None,\n+            wasm_custom_section: None,\n         }\n     }\n "}, {"sha": "b6add3e6f1205b247514aa8c93769e1b61411373", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1120,6 +1120,7 @@ impl_stable_hash_for!(struct hir::CodegenFnAttrs {\n     export_name,\n     target_features,\n     linkage,\n+    wasm_custom_section,\n });\n \n impl<'hir> HashStable<StableHashingContext<'hir>> for hir::CodegenFnAttrFlags"}, {"sha": "79566fbbc11a46c1cba41446fceeb5f2493cb61c", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -24,6 +24,7 @@ pub enum MonoItem<'tcx> {\n     Fn(Instance<'tcx>),\n     Static(DefId),\n     GlobalAsm(NodeId),\n+    CustomSection(DefId),\n }\n \n impl<'tcx> MonoItem<'tcx> {\n@@ -36,7 +37,9 @@ impl<'tcx> MonoItem<'tcx> {\n             },\n             // Conservatively estimate the size of a static declaration\n             // or assembly to be 1.\n-            MonoItem::Static(_) | MonoItem::GlobalAsm(_) => 1,\n+            MonoItem::Static(_) |\n+            MonoItem::GlobalAsm(_) |\n+            MonoItem::CustomSection(_) => 1,\n         }\n     }\n }\n@@ -51,7 +54,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {\n             MonoItem::Fn(ref instance) => {\n                 instance.hash_stable(hcx, hasher);\n             }\n-            MonoItem::Static(def_id) => {\n+            MonoItem::Static(def_id) |\n+            MonoItem::CustomSection(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n             MonoItem::GlobalAsm(node_id) => {"}, {"sha": "bd6217e28c755048249d971837e0ca420cdfd205", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -776,12 +776,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::instance_def_size_estimate<'tcx>\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::wasm_custom_sections<'tcx> {\n-    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n-        format!(\"custom wasm sections for a crate\")\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::generics_of<'tcx> {\n     #[inline]\n     fn cache_on_disk(def_id: Self::Key) -> bool {"}, {"sha": "3581dd87f6f8d80d615b6ac47194faf1dcf98ea0", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -546,7 +546,6 @@ define_queries! { <'tcx>\n         ty::ParamEnv<'tcx>\n     ) -> Clauses<'tcx>,\n \n-    [] fn wasm_custom_sections: WasmCustomSections(CrateNum) -> Lrc<Vec<DefId>>,\n     [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n         -> Lrc<FxHashMap<DefId, String>>,\n }"}, {"sha": "9dc8321f82575092efefde3190b97208f93df534", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1208,7 +1208,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::Features => { force!(features_query, LOCAL_CRATE); }\n \n         DepKind::ProgramClausesFor => { force!(program_clauses_for, def_id!()); }\n-        DepKind::WasmCustomSections => { force!(wasm_custom_sections, krate!()); }\n         DepKind::WasmImportModuleMap => { force!(wasm_import_module_map, krate!()); }\n         DepKind::ForeignModules => { force!(foreign_modules, krate!()); }\n "}, {"sha": "8246bb243669444ade1dc835cb737dbcacae6c87", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -11,9 +11,8 @@\n \n use std::ffi::{CStr, CString};\n \n-use rustc::hir::{self, CodegenFnAttrFlags};\n+use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n use rustc::ty::TyCtxt;\n@@ -222,37 +221,9 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n \n-    providers.wasm_custom_sections = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        let mut finder = WasmSectionFinder { tcx, list: Vec::new() };\n-        tcx.hir.krate().visit_all_item_likes(&mut finder);\n-        Lrc::new(finder.list)\n-    };\n-\n     provide_extern(providers);\n }\n \n-struct WasmSectionFinder<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    list: Vec<DefId>,\n-}\n-\n-impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for WasmSectionFinder<'a, 'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n-        match i.node {\n-            hir::ItemConst(..) => {}\n-            _ => return,\n-        }\n-        if i.attrs.iter().any(|i| i.check_name(\"wasm_custom_section\")) {\n-            self.list.push(self.tcx.hir.local_def_id(i.id));\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {}\n-\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n-}\n-\n pub fn provide_extern(providers: &mut Providers) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         let mut ret = FxHashMap();"}, {"sha": "e8636b1c99990d3f150bd23fdb2c72170b3e9bc5", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -29,7 +29,7 @@ use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n-use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelroLevel, LinkerFlavor};\n use rustc_data_structures::fx::FxHashSet;\n use context::get_reloc_model;\n use llvm;\n@@ -837,10 +837,8 @@ fn link_natively(sess: &Session,\n         }\n     }\n \n-    if sess.opts.target_triple == TargetTriple::from_triple(\"wasm32-unknown-unknown\") {\n+    if sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\" {\n         wasm::rewrite_imports(&out_filename, &codegen_results.crate_info.wasm_imports);\n-        wasm::add_custom_sections(&out_filename,\n-                                  &codegen_results.crate_info.wasm_custom_sections);\n     }\n }\n "}, {"sha": "f07c758807e4d2a4a66616b40306412b0e12e33a", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -86,6 +86,7 @@ impl LinkerInfo {\n             LinkerFlavor::Lld(LldFlavor::Wasm) => {\n                 Box::new(WasmLd {\n                     cmd,\n+                    sess,\n                 }) as Box<Linker>\n             }\n         }\n@@ -919,11 +920,12 @@ fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n     symbols\n }\n \n-pub struct WasmLd {\n+pub struct WasmLd<'a> {\n     cmd: Command,\n+    sess: &'a Session,\n }\n \n-impl Linker for WasmLd {\n+impl<'a> Linker for WasmLd<'a> {\n     fn link_dylib(&mut self, lib: &str) {\n         self.cmd.arg(\"-l\").arg(lib);\n     }\n@@ -988,9 +990,20 @@ impl Linker for WasmLd {\n     }\n \n     fn gc_sections(&mut self, _keep_metadata: bool) {\n+        self.cmd.arg(\"--gc-sections\");\n     }\n \n     fn optimize(&mut self) {\n+        self.cmd.arg(match self.sess.opts.optimize {\n+            OptLevel::No => \"-O0\",\n+            OptLevel::Less => \"-O1\",\n+            OptLevel::Default => \"-O2\",\n+            OptLevel::Aggressive => \"-O3\",\n+            // Currently LLD doesn't support `Os` and `Oz`, so pass through `O2`\n+            // instead.\n+            OptLevel::Size => \"-O2\",\n+            OptLevel::SizeMin => \"-O2\"\n+        });\n     }\n \n     fn pgo_gen(&mut self) {\n@@ -1020,8 +1033,28 @@ impl Linker for WasmLd {\n         // this isn't yet the bottleneck of compilation at all anyway.\n         self.cmd.arg(\"--no-threads\");\n \n+        // By default LLD only gives us one page of stack (64k) which is a\n+        // little small. Default to a larger stack closer to other PC platforms\n+        // (1MB) and users can always inject their own link-args to override this.\n         self.cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n \n+        // By default LLD's memory layout is:\n+        //\n+        // 1. First, a blank page\n+        // 2. Next, all static data\n+        // 3. Finally, the main stack (which grows down)\n+        //\n+        // This has the unfortunate consequence that on stack overflows you\n+        // corrupt static data and can cause some exceedingly weird bugs. To\n+        // help detect this a little sooner we instead request that the stack is\n+        // placed before static data.\n+        //\n+        // This means that we'll generate slightly larger binaries as references\n+        // to static data will take more bytes in the ULEB128 encoding, but\n+        // stack overflow will be guaranteed to trap as it underflows instead of\n+        // corrupting static data.\n+        self.cmd.arg(\"--stack-first\");\n+\n         // FIXME we probably shouldn't pass this but instead pass an explicit\n         // whitelist of symbols we'll allow to be undefined. Unfortunately\n         // though we can't handle symbols like `log10` that LLVM injects at a"}, {"sha": "d378d5af1c0f60e46098d29b09a318ebbeb0a0c3", "filename": "src/librustc_codegen_llvm/back/wasm.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwasm.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::collections::BTreeMap;\n use std::fs;\n use std::path::Path;\n use std::str;\n@@ -24,45 +23,6 @@ const WASM_EXTERNAL_KIND_TABLE: u8 = 1;\n const WASM_EXTERNAL_KIND_MEMORY: u8 = 2;\n const WASM_EXTERNAL_KIND_GLOBAL: u8 = 3;\n \n-/// Append all the custom sections listed in `sections` to the wasm binary\n-/// specified at `path`.\n-///\n-/// LLVM 6 which we're using right now doesn't have the ability to create custom\n-/// sections in wasm files nor does LLD have the ability to merge these sections\n-/// into one larger section when linking. It's expected that this will\n-/// eventually get implemented, however!\n-///\n-/// Until that time though this is a custom implementation in rustc to append\n-/// all sections to a wasm file to the finished product that LLD produces.\n-///\n-/// Support for this is landing in LLVM in https://reviews.llvm.org/D43097,\n-/// although after that support will need to be in LLD as well.\n-pub fn add_custom_sections(path: &Path, sections: &BTreeMap<String, Vec<u8>>) {\n-    if sections.len() == 0 {\n-        return\n-    }\n-\n-    let wasm = fs::read(path).expect(\"failed to read wasm output\");\n-\n-    // see https://webassembly.github.io/spec/core/binary/modules.html#custom-section\n-    let mut wasm = WasmEncoder { data: wasm };\n-    for (section, bytes) in sections {\n-        // write the `id` identifier, 0 for a custom section\n-        wasm.byte(0);\n-\n-        // figure out how long our name descriptor will be\n-        let mut name = WasmEncoder::new();\n-        name.str(section);\n-\n-        // write the length of the payload followed by all its contents\n-        wasm.u32((bytes.len() + name.data.len()) as u32);\n-        wasm.data.extend_from_slice(&name.data);\n-        wasm.data.extend_from_slice(bytes);\n-    }\n-\n-    fs::write(path, &wasm.data).expect(\"failed to write wasm output\");\n-}\n-\n /// Rewrite the module imports are listed from in a wasm module given the field\n /// name to module name mapping in `import_map`.\n ///\n@@ -80,7 +40,7 @@ pub fn add_custom_sections(path: &Path, sections: &BTreeMap<String, Vec<u8>>) {\n ///\n /// Support for this was added to LLVM in\n /// https://github.com/llvm-mirror/llvm/commit/0f32e1365, although support still\n-/// needs to be added (AFAIK at the time of this writing) to LLD\n+/// needs to be added, tracked at https://bugs.llvm.org/show_bug.cgi?id=37168\n pub fn rewrite_imports(path: &Path, import_map: &FxHashMap<String, String>) {\n     if import_map.len() == 0 {\n         return"}, {"sha": "70b66dd436b805cb1987c4846b43fe9e81e021e4", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -33,6 +33,7 @@ use back::link;\n use back::write::{self, OngoingCodegen, create_target_machine};\n use llvm::{ContextRef, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n+use libc::c_uint;\n use metadata;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n@@ -74,10 +75,8 @@ use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n use CrateInfo;\n use rustc_data_structures::sync::Lrc;\n-use rustc_target::spec::TargetTriple;\n \n use std::any::Any;\n-use std::collections::BTreeMap;\n use std::ffi::CString;\n use std::str;\n use std::sync::Arc;\n@@ -1095,7 +1094,6 @@ impl CrateInfo {\n             used_crates_dynamic: cstore::used_crates(tcx, LinkagePreference::RequireDynamic),\n             used_crates_static: cstore::used_crates(tcx, LinkagePreference::RequireStatic),\n             used_crate_source: FxHashMap(),\n-            wasm_custom_sections: BTreeMap::new(),\n             wasm_imports: FxHashMap(),\n             lang_item_to_crate: FxHashMap(),\n             missing_lang_items: FxHashMap(),\n@@ -1105,16 +1103,9 @@ impl CrateInfo {\n         let load_wasm_items = tcx.sess.crate_types.borrow()\n             .iter()\n             .any(|c| *c != config::CrateTypeRlib) &&\n-            tcx.sess.opts.target_triple == TargetTriple::from_triple(\"wasm32-unknown-unknown\");\n+            tcx.sess.opts.target_triple.triple() == \"wasm32-unknown-unknown\";\n \n         if load_wasm_items {\n-            info!(\"attempting to load all wasm sections\");\n-            for &id in tcx.wasm_custom_sections(LOCAL_CRATE).iter() {\n-                let (name, contents) = fetch_wasm_section(tcx, id);\n-                info.wasm_custom_sections.entry(name)\n-                    .or_insert(Vec::new())\n-                    .extend(contents);\n-            }\n             info.load_wasm_imports(tcx, LOCAL_CRATE);\n         }\n \n@@ -1138,12 +1129,6 @@ impl CrateInfo {\n                 info.is_no_builtins.insert(cnum);\n             }\n             if load_wasm_items {\n-                for &id in tcx.wasm_custom_sections(cnum).iter() {\n-                    let (name, contents) = fetch_wasm_section(tcx, id);\n-                    info.wasm_custom_sections.entry(name)\n-                        .or_insert(Vec::new())\n-                        .extend(contents);\n-                }\n                 info.load_wasm_imports(tcx, cnum);\n             }\n             let missing = tcx.missing_lang_items(cnum);\n@@ -1380,25 +1365,41 @@ mod temp_stable_hash_impls {\n     }\n }\n \n-fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n+pub fn define_custom_section(cx: &CodegenCx, def_id: DefId) {\n     use rustc::mir::interpret::GlobalId;\n \n-    info!(\"loading wasm section {:?}\", id);\n+    assert!(cx.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\"));\n+\n+    info!(\"loading wasm section {:?}\", def_id);\n \n-    let section = tcx.get_attrs(id)\n-        .iter()\n-        .find(|a| a.check_name(\"wasm_custom_section\"))\n-        .expect(\"missing #[wasm_custom_section] attribute\")\n-        .value_str()\n-        .expect(\"malformed #[wasm_custom_section] attribute\");\n+    let section = cx.tcx.codegen_fn_attrs(def_id).wasm_custom_section.unwrap();\n \n-    let instance = ty::Instance::mono(tcx, id);\n+    let instance = ty::Instance::mono(cx.tcx, def_id);\n     let cid = GlobalId {\n         instance,\n         promoted: None\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n-    let val = tcx.const_eval(param_env.and(cid)).unwrap();\n-    let alloc = tcx.const_value_to_allocation(val);\n-    (section.to_string(), alloc.bytes.clone())\n+    let val = cx.tcx.const_eval(param_env.and(cid)).unwrap();\n+    let alloc = cx.tcx.const_value_to_allocation(val);\n+\n+    unsafe {\n+        let section = llvm::LLVMMDStringInContext(\n+            cx.llcx,\n+            section.as_str().as_ptr() as *const _,\n+            section.as_str().len() as c_uint,\n+        );\n+        let alloc = llvm::LLVMMDStringInContext(\n+            cx.llcx,\n+            alloc.bytes.as_ptr() as *const _,\n+            alloc.bytes.len() as c_uint,\n+        );\n+        let data = [section, alloc];\n+        let meta = llvm::LLVMMDNodeInContext(cx.llcx, data.as_ptr(), 2);\n+        llvm::LLVMAddNamedMetadataOperand(\n+            cx.llmod,\n+            \"wasm.custom_sections\\0\".as_ptr() as *const _,\n+            meta,\n+        );\n+    }\n }"}, {"sha": "a2f28417520aa8c00941caf25c6c9a9a6b6401c7", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -65,7 +65,6 @@ pub use llvm_util::target_features;\n use std::any::Any;\n use std::path::PathBuf;\n use std::sync::mpsc;\n-use std::collections::BTreeMap;\n use rustc_data_structures::sync::Lrc;\n \n use rustc::dep_graph::DepGraph;\n@@ -94,7 +93,7 @@ mod back {\n     pub mod symbol_export;\n     pub mod write;\n     mod rpath;\n-    mod wasm;\n+    pub mod wasm;\n }\n \n mod abi;\n@@ -382,7 +381,6 @@ struct CrateInfo {\n     used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     used_crates_static: Vec<(CrateNum, LibSource)>,\n     used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n-    wasm_custom_sections: BTreeMap<String, Vec<u8>>,\n     wasm_imports: FxHashMap<String, String>,\n     lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n     missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,"}, {"sha": "e142a7d9c1ce7b0183df55cf4936bedb37c87ea2", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -66,6 +66,9 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and MonoItem type\")\n                 }\n             }\n+            MonoItem::CustomSection(def_id) => {\n+                base::define_custom_section(cx, def_id);\n+            }\n             MonoItem::Fn(instance) => {\n                 base::codegen_instance(&cx, instance);\n             }\n@@ -97,6 +100,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n             MonoItem::Fn(instance) => {\n                 predefine_fn(cx, instance, linkage, visibility, &symbol_name);\n             }\n+            MonoItem::CustomSection(..) => {}\n             MonoItem::GlobalAsm(..) => {}\n         }\n \n@@ -116,6 +120,9 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n             MonoItem::Static(id) => {\n                 format!(\"Static({:?})\", id)\n             }\n+            MonoItem::CustomSection(id) => {\n+                format!(\"CustomSection({:?})\", id)\n+            }\n             MonoItem::GlobalAsm(id) => {\n                 format!(\"GlobalAsm({:?})\", id)\n             }"}, {"sha": "57e6c0d7b85e13134194467c7e267ca548aa1970", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -137,7 +137,6 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         };\n         providers.is_reachable_non_generic = |_tcx, _defid| true;\n         providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n-        providers.wasm_custom_sections = |_tcx, _crate| Lrc::new(Vec::new());\n     }\n     fn provide_extern(&self, providers: &mut Providers) {\n         providers.is_reachable_non_generic = |_tcx, _defid| true;"}, {"sha": "cded812b5f0fc610d64f87cfcc53bffd36d26c13", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -266,8 +266,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         Arc::new(cdata.exported_symbols(tcx))\n     }\n-\n-    wasm_custom_sections => { Lrc::new(cdata.wasm_custom_sections()) }\n }\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {"}, {"sha": "38149d1ca504a42b9c707eea95340e6aad8357a5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1011,16 +1011,6 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn wasm_custom_sections(&self) -> Vec<DefId> {\n-        let sections = self.root\n-            .wasm_custom_sections\n-            .decode(self)\n-            .map(|def_index| self.local_def_id(def_index))\n-            .collect::<Vec<_>>();\n-        info!(\"loaded wasm sections {:?}\", sections);\n-        return sections\n-    }\n-\n     pub fn get_macro(&self, id: DefIndex) -> (InternedString, MacroDef) {\n         let entry = self.entry(id);\n         match entry.kind {"}, {"sha": "72f91dcea608805932dc1bed90eac9a2cd0d494d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -436,12 +436,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             &exported_symbols);\n         let exported_symbols_bytes = self.position() - i;\n \n-        // encode wasm custom sections\n-        let wasm_custom_sections = self.tcx.wasm_custom_sections(LOCAL_CRATE);\n-        let wasm_custom_sections = self.tracked(\n-            IsolatedEncoder::encode_wasm_custom_sections,\n-            &wasm_custom_sections);\n-\n         let tcx = self.tcx;\n \n         // Encode the items.\n@@ -527,7 +521,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             def_path_table,\n             impls,\n             exported_symbols,\n-            wasm_custom_sections,\n             interpret_alloc_index,\n             index,\n         });\n@@ -1543,11 +1536,6 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn encode_wasm_custom_sections(&mut self, statics: &[DefId]) -> LazySeq<DefIndex> {\n-        info!(\"encoding custom wasm section constants {:?}\", statics);\n-        self.lazy_seq(statics.iter().map(|id| id.index))\n-    }\n-\n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {\n         match self.tcx.sess.dependency_formats.borrow().get(&config::CrateTypeDylib) {\n             Some(arr) => {"}, {"sha": "430cbf9b529fbecef55869fe74664a64b69f1a1c", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -206,7 +206,6 @@ pub struct CrateRoot {\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n     pub exported_symbols: EncodedExportedSymbols,\n-    pub wasm_custom_sections: LazySeq<DefIndex>,\n     pub interpret_alloc_index: LazySeq<u32>,\n \n     pub index: LazySeq<index::Index>,"}, {"sha": "ce917b8ca5516bc71e2a8abfe6cb5d9909c549a0", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -414,6 +414,9 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         MonoItem::GlobalAsm(..) => {\n             recursion_depth_reset = None;\n         }\n+        MonoItem::CustomSection(..) => {\n+            recursion_depth_reset = None;\n+        }\n     }\n \n     record_accesses(tcx, starting_point, &neighbors[..], inlining_map);\n@@ -990,6 +993,13 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemConst(..) => {\n                 // const items only generate mono items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n+\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                if self.tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") &&\n+                    self.tcx.codegen_fn_attrs(def_id).wasm_custom_section.is_some()\n+                {\n+                    self.output.push(MonoItem::CustomSection(def_id));\n+                }\n             }\n             hir::ItemFn(..) => {\n                 let def_id = self.tcx.hir.local_def_id(item.id);"}, {"sha": "1389ad63c3a3b0bf27fa4cc66a3698c57dfa75ce", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -63,6 +63,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 instance.substs.types().next().is_some()\n             }\n             MonoItem::Static(..) |\n+            MonoItem::CustomSection(..) |\n             MonoItem::GlobalAsm(..) => false,\n         }\n     }\n@@ -73,6 +74,9 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::Static(def_id) => {\n                 tcx.symbol_name(Instance::mono(tcx, def_id))\n             }\n+            MonoItem::CustomSection(def_id) => {\n+                tcx.symbol_name(Instance::mono(tcx, def_id))\n+            }\n             MonoItem::GlobalAsm(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n                 ty::SymbolName {\n@@ -121,9 +125,8 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                     }\n                 }\n             }\n-            MonoItem::Static(..) => {\n-                InstantiationMode::GloballyShared { may_conflict: false }\n-            }\n+            MonoItem::Static(..) |\n+            MonoItem::CustomSection(..) |\n             MonoItem::GlobalAsm(..) => {\n                 InstantiationMode::GloballyShared { may_conflict: false }\n             }\n@@ -134,6 +137,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         let def_id = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => instance.def_id(),\n             MonoItem::Static(def_id) => def_id,\n+            MonoItem::CustomSection(..) => return None,\n             MonoItem::GlobalAsm(..) => return None,\n         };\n \n@@ -171,6 +175,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         let (def_id, substs) = match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n             MonoItem::Static(def_id) => (def_id, Substs::empty()),\n+            MonoItem::CustomSection(..) => return true,\n             // global asm never has predicates\n             MonoItem::GlobalAsm(..) => return true\n         };\n@@ -187,6 +192,10 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n                 let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n+            MonoItem::CustomSection(def_id) => {\n+                let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n+                to_string_internal(tcx, \"custom-section \", instance)\n+            },\n             MonoItem::GlobalAsm(..) => {\n                 \"global_asm\".to_string()\n             }\n@@ -212,6 +221,9 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::Static(def_id) => {\n                 tcx.hir.as_local_node_id(def_id)\n             }\n+            MonoItem::CustomSection(def_id) => {\n+                tcx.hir.as_local_node_id(def_id)\n+            }\n             MonoItem::GlobalAsm(node_id) => {\n                 Some(node_id)\n             }"}, {"sha": "5f15870d6fbc306c4e7d2c5725cc4f9180ab9eea", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -180,7 +180,8 @@ pub trait CodegenUnitExt<'tcx> {\n                         }\n                     }\n                 }\n-                MonoItem::Static(def_id) => {\n+                MonoItem::Static(def_id) |\n+                MonoItem::CustomSection(def_id) => {\n                     tcx.hir.as_local_node_id(def_id)\n                 }\n                 MonoItem::GlobalAsm(node_id) => {\n@@ -449,6 +450,9 @@ fn place_root_mono_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         };\n                         (Linkage::External, visibility)\n                     }\n+                    MonoItem::CustomSection(..) => {\n+                        (Linkage::External, Visibility::Hidden)\n+                    }\n                     MonoItem::GlobalAsm(node_id) => {\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_reachable_non_generic(def_id) {\n@@ -714,6 +718,7 @@ fn characteristic_def_id_of_mono_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             Some(def_id)\n         }\n         MonoItem::Static(def_id) => Some(def_id),\n+        MonoItem::CustomSection(def_id) => Some(def_id),\n         MonoItem::GlobalAsm(node_id) => Some(tcx.hir.local_def_id(node_id)),\n     }\n }"}, {"sha": "51d402e197da96062ed90d6804bde630ae7ae601", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -57,7 +57,7 @@ pub fn target() -> Result<Target, String> {\n         .. Default::default()\n     };\n     Ok(Target {\n-        llvm_target: \"wasm32-unknown-unknown-wasm\".to_string(),\n+        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),"}, {"sha": "fa2f9885964dee3bfe3b4c007a11c4299b858941", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1925,6 +1925,14 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n             if let Some(val) = attr.value_str() {\n                 codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, &val.as_str()));\n             }\n+        } else if attr.check_name(\"wasm_custom_section\") {\n+            match attr.value_str() {\n+                Some(name) => codegen_fn_attrs.wasm_custom_section = Some(name),\n+                None => {\n+                    tcx.sess.span_err(attr.span, \"must be of the form \\\n+                        #[wasm_custom_section = \\\"foo\\\"]\");\n+                }\n+            }\n         }\n     }\n "}, {"sha": "8e8566cbbde264ca1135f6aaf569d52e73af088f", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::mem;\n+\n use clean::*;\n \n pub enum FoldItem {\n@@ -109,12 +111,13 @@ pub trait DocFolder : Sized {\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        c.module = c.module.and_then(|module| self.fold_item(module));\n+        c.module = c.module.take().and_then(|module| self.fold_item(module));\n \n-        c.external_traits = c.external_traits.into_iter().map(|(k, mut v)| {\n+        let traits = mem::replace(&mut c.external_traits, Default::default());\n+        c.external_traits.extend(traits.into_iter().map(|(k, mut v)| {\n             v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n             (k, v)\n-        }).collect();\n+        }));\n         c\n     }\n }"}, {"sha": "03684905101f0b7e49dfe530e54dc1aeac6ef0fb", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1 +1 @@\n-Subproject commit 509f29ac17874394acf4d49d6bae3cd93c652aa1\n+Subproject commit 03684905101f0b7e49dfe530e54dc1aeac6ef0fb"}, {"sha": "a00ff3b345d116e4c0127fde7c4d3f07f15ea6ab", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -545,7 +545,11 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n     return LLVMRustResult::Failure;\n   }\n \n+#if LLVM_VERSION_GE(7, 0)\n+  unwrap(Target)->addPassesToEmitFile(*PM, OS, nullptr, FileType, false);\n+#else\n   unwrap(Target)->addPassesToEmitFile(*PM, OS, FileType, false);\n+#endif\n   PM->run(*unwrap(M));\n \n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output"}, {"sha": "bf119da2e829fc32bfe1545378e4a92a42cf2158", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n+// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n \n@@ -42,7 +43,7 @@ pub enum Enum64 {\n #[no_mangle]\n pub fn align64(i : i32) -> Align64 {\n // CHECK: %a64 = alloca %Align64, align 64\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 64, i32 64, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 64 %{{.*}}, i8* align 64 %{{.*}}, i{{[0-9]+}} 64, i1 false)\n     let a64 = Align64(i);\n     a64\n }"}, {"sha": "30fffbb769b30dc2aa0484021446a1f4891cb585", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n+// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n \n@@ -54,14 +55,14 @@ pub fn inline_enum_const() -> E<i8, i16> {\n #[no_mangle]\n pub fn low_align_const() -> E<i16, [i16; 3]> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: i8* getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n+// CHECK: i8* align 2 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n     *&E::A(0)\n }\n \n // CHECK-LABEL: @high_align_const\n #[no_mangle]\n pub fn high_align_const() -> E<i16, i32> {\n // Check that low_align_const and high_align_const use the same constant\n-// CHECK: i8* getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n+// CHECK: i8* align 4 getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* [[LOW_HIGH]], i32 0, i32 0, i32 0),\n     *&E::A(0)\n }"}, {"sha": "10dd12909b6444a65772dfa4cd5a0c7aa85aad05", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // compile-flags: -C no-prepopulate-passes\n+// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n #![feature(repr_packed)]\n@@ -63,7 +65,7 @@ pub struct BigPacked2 {\n pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n // CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 32, i32 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 1 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an\n     // unaligned destination.\n@@ -75,7 +77,7 @@ pub fn call_pkd1(f: fn() -> Array) -> BigPacked1 {\n pub fn call_pkd2(f: fn() -> Array) -> BigPacked2 {\n // CHECK: [[ALLOCA:%[_a-z0-9]+]] = alloca %Array\n // CHECK: call void %{{.*}}(%Array* noalias nocapture sret dereferenceable(32) [[ALLOCA]])\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 32, i32 2, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 2 %{{.*}}, i{{[0-9]+}} 32, i1 false)\n     // check that calls whose destination is a field of a packed struct\n     // go through an alloca rather than calling the function with an\n     // unaligned destination.\n@@ -93,14 +95,14 @@ pub struct Packed2Pair(u8, u32);\n // CHECK-LABEL: @pkd1_pair\n #[no_mangle]\n pub fn pkd1_pair(pair1: &mut Packed1Pair, pair2: &mut Packed1Pair) {\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 5, i32 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 1 %{{.*}}, i{{[0-9]+}} 5, i1 false)\n     *pair2 = *pair1;\n }\n \n // CHECK-LABEL: @pkd2_pair\n #[no_mangle]\n pub fn pkd2_pair(pair1: &mut Packed2Pair, pair2: &mut Packed2Pair) {\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 6, i32 2, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 2 %{{.*}}, i{{[0-9]+}} 6, i1 false)\n     *pair2 = *pair1;\n }\n \n@@ -115,14 +117,14 @@ pub struct Packed2NestedPair((u32, u32));\n // CHECK-LABEL: @pkd1_nested_pair\n #[no_mangle]\n pub fn pkd1_nested_pair(pair1: &mut Packed1NestedPair, pair2: &mut Packed1NestedPair) {\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 8, i32 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 %{{.*}}, i8* align 1 %{{.*}}, i{{[0-9]+}} 8, i1 false)\n     *pair2 = *pair1;\n }\n \n // CHECK-LABEL: @pkd2_nested_pair\n #[no_mangle]\n pub fn pkd2_nested_pair(pair1: &mut Packed2NestedPair, pair2: &mut Packed2NestedPair) {\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* %{{.*}}, i8* %{{.*}}, i{{[0-9]+}} 8, i32 2, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 2 %{{.*}}, i8* align 2 %{{.*}}, i{{[0-9]+}} 8, i1 false)\n     *pair2 = *pair1;\n }\n "}, {"sha": "8565335bd75df857a7c5b42a160c6712b21cd90c", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -10,6 +10,7 @@\n \n // compile-flags: -O\n // ignore-tidy-linelength\n+// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n \n@@ -23,6 +24,6 @@ pub fn helper(_: usize) {\n // CHECK-LABEL: @repeat_take_collect\n #[no_mangle]\n pub fn repeat_take_collect() -> Vec<u8> {\n-// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}%{{[0-9]+}}, i8 42, [[USIZE]] 100000, i32 1, i1 false)\n+// CHECK: call void @llvm.memset.p0i8.[[USIZE]](i8* {{(nonnull )?}}align 1 %{{[0-9]+}}, i8 42, [[USIZE]] 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }"}, {"sha": "16f86735c2ed7179c0712a72ed78f3fe147e8194", "filename": "src/test/codegen/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-minmax.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-emscripten\n-// min-llvm-version 6.0\n+// min-llvm-version 7.0\n \n // compile-flags: -C no-prepopulate-passes\n \n@@ -34,10 +34,9 @@ pub unsafe fn fmin(a: f32x4, b: f32x4) -> f32x4 {\n     simd_fmin(a, b)\n }\n \n-// FIXME(49261)\n-// // C_HECK-LABEL: @fmax\n-// #[no_mangle]\n-// pub unsafe fn fmax(a: f32x4, b: f32x4) -> f32x4 {\n-// // C_HECK: call <4 x float> @llvm.maxnum.v4f32\n-//     simd_fmax(a, b)\n-// }\n+// CHECK-LABEL: @fmax\n+#[no_mangle]\n+pub unsafe fn fmax(a: f32x4, b: f32x4) -> f32x4 {\n+    // CHECK: call <4 x float> @llvm.maxnum.v4f32\n+    simd_fmax(a, b)\n+}"}, {"sha": "0aaf00bfdbe8ef1597825ed81c7d0ade8c1287f0", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n \n@@ -29,7 +31,7 @@ pub fn small_array_alignment(x: &mut [i8; 4], y: [i8; 4]) {\n // CHECK: store i32 %0, i32* [[TMP]]\n // CHECK: [[Y8:%[0-9]+]] = bitcast [4 x i8]* %y to i8*\n // CHECK: [[TMP8:%[0-9]+]] = bitcast i32* [[TMP]] to i8*\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[Y8]], i8* [[TMP8]], i{{[0-9]+}} 4, i32 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 [[Y8]], i8* align 1 [[TMP8]], i{{[0-9]+}} 4, i1 false)\n     *x = y;\n }\n \n@@ -43,6 +45,6 @@ pub fn small_struct_alignment(x: &mut Bytes, y: Bytes) {\n // CHECK: store i32 %0, i32* [[TMP]]\n // CHECK: [[Y8:%[0-9]+]] = bitcast %Bytes* %y to i8*\n // CHECK: [[TMP8:%[0-9]+]] = bitcast i32* [[TMP]] to i8*\n-// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[Y8]], i8* [[TMP8]], i{{[0-9]+}} 4, i32 1, i1 false)\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 1 [[Y8]], i8* align 1 [[TMP8]], i{{[0-9]+}} 4, i1 false)\n     *x = y;\n }"}, {"sha": "6ec2978058dfcbd606359bc13d6355dfdf38d338", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -2,7 +2,9 @@\n \n all:\n ifeq ($(PROFILER_SUPPORT),1)\n+ifndef IS_WINDOWS\n \t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n endif\n+endif"}, {"sha": "96126ab7a79461453f4b318c21309f3260b6f350", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -2,7 +2,9 @@\n \n all:\n ifeq ($(PROFILER_SUPPORT),1)\n+ifndef IS_WINDOWS\n \t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n endif\n+endif"}, {"sha": "3c7ca21459f461be245a23af453af958151bff55", "filename": "src/test/run-pass/simd-intrinsic-float-math.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42eb85002ae4bda9899216805d03fa7d77279ede/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-float-math.rs?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -41,6 +41,24 @@ extern \"platform-intrinsic\" {\n     fn simd_fpowi<T>(x: T, y: i32) -> T;\n }\n \n+macro_rules! assert_approx_eq_f32 {\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+}\n+macro_rules! assert_approx_eq {\n+    ($a:expr, $b:expr) => ({\n+        let a = $a;\n+        let b = $b;\n+        assert_approx_eq_f32!(a.0, b.0);\n+        assert_approx_eq_f32!(a.1, b.1);\n+        assert_approx_eq_f32!(a.2, b.2);\n+        assert_approx_eq_f32!(a.3, b.3);\n+    })\n+}\n+\n fn main() {\n     let x = f32x4(1.0, 1.0, 1.0, 1.0);\n     let y = f32x4(-1.0, -1.0, -1.0, -1.0);\n@@ -50,45 +68,45 @@ fn main() {\n \n     unsafe {\n         let r = simd_fabs(y);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_fcos(z);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_ceil(h);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_fexp(z);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_fexp2(z);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_floor(h);\n-        assert_eq!(z, r);\n+        assert_approx_eq!(z, r);\n \n         let r = simd_fma(x, h, h);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_fsqrt(x);\n-        assert_eq!(x, r);\n+        assert_approx_eq!(x, r);\n \n         let r = simd_flog(x);\n-        assert_eq!(z, r);\n+        assert_approx_eq!(z, r);\n \n         let r = simd_flog2(x);\n-        assert_eq!(z, r);\n+        assert_approx_eq!(z, r);\n \n         let r = simd_flog10(x);\n-        assert_eq!(z, r);\n+        assert_approx_eq!(z, r);\n \n         let r = simd_fpow(h, x);\n-        assert_eq!(h, r);\n+        assert_approx_eq!(h, r);\n \n         let r = simd_fpowi(h, 1);\n-        assert_eq!(h, r);\n+        assert_approx_eq!(h, r);\n \n         let r = simd_fsin(z);\n-        assert_eq!(z, r);\n+        assert_approx_eq!(z, r);\n     }\n }"}, {"sha": "8214ccf861d538671b0a1436dbf4538dc4a64d09", "filename": "src/tools/lld", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld?ref=42eb85002ae4bda9899216805d03fa7d77279ede", "patch": "@@ -1 +1 @@\n-Subproject commit b87873eaceb75cf9342d5273f01ba2c020f61ca8\n+Subproject commit 8214ccf861d538671b0a1436dbf4538dc4a64d09"}]}