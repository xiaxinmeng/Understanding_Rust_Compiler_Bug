{"sha": "6e5e97fc78994cb08008a8d76b71d91714385131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWU5N2ZjNzg5OTRjYjA4MDA4YThkNzZiNzFkOTE3MTQzODUxMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-10T03:13:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-10T03:13:23Z"}, "message": "auto merge of #7028 : thestinger/rust/cmp, r=brson", "tree": {"sha": "3dd4b1b786ecc11c8a3dda2a1747f5678d71c1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd4b1b786ecc11c8a3dda2a1747f5678d71c1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5e97fc78994cb08008a8d76b71d91714385131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e97fc78994cb08008a8d76b71d91714385131", "html_url": "https://github.com/rust-lang/rust/commit/6e5e97fc78994cb08008a8d76b71d91714385131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e97fc78994cb08008a8d76b71d91714385131/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bcf9119d86d0484b48e7a5efb7aefee88e11134", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcf9119d86d0484b48e7a5efb7aefee88e11134", "html_url": "https://github.com/rust-lang/rust/commit/9bcf9119d86d0484b48e7a5efb7aefee88e11134"}, {"sha": "86833ea28616fd7bb6d16582aea7996549b4b873", "url": "https://api.github.com/repos/rust-lang/rust/commits/86833ea28616fd7bb6d16582aea7996549b4b873", "html_url": "https://github.com/rust-lang/rust/commit/86833ea28616fd7bb6d16582aea7996549b4b873"}], "stats": {"total": 78, "additions": 23, "deletions": 55}, "files": [{"sha": "601b7685f3ca8993dbc7af0728cb30c621502644", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=6e5e97fc78994cb08008a8d76b71d91714385131", "patch": "@@ -186,13 +186,12 @@ impl<T:Ord> PriorityQueue<T> {\n #[cfg(test)]\n mod tests {\n     use sort::merge_sort;\n-    use core::cmp::le;\n     use priority_queue::PriorityQueue;\n \n     #[test]\n     fn test_top_and_pop() {\n-        let data = ~[2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n-        let mut sorted = merge_sort(data, le);\n+        let data = ~[2u, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n+        let mut sorted = merge_sort(data, |x, y| x.le(y));\n         let mut heap = PriorityQueue::from_vec(data);\n         while !heap.is_empty() {\n             assert_eq!(heap.top(), sorted.last());\n@@ -274,8 +273,9 @@ mod tests {\n \n     fn check_to_vec(data: ~[int]) {\n         let heap = PriorityQueue::from_vec(copy data);\n-        assert_eq!(merge_sort((copy heap).to_vec(), le), merge_sort(data, le));\n-        assert_eq!(heap.to_sorted_vec(), merge_sort(data, le));\n+        assert_eq!(merge_sort((copy heap).to_vec(), |x, y| x.le(y)),\n+                   merge_sort(data, |x, y| x.le(y)));\n+        assert_eq!(heap.to_sorted_vec(), merge_sort(data, |x, y| x.le(y)));\n     }\n \n     #[test]"}, {"sha": "e1c78f729a4a5d98a1cee66bf032b47ebd12c79f", "filename": "src/libextra/time.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=6e5e97fc78994cb08008a8d76b71d91714385131", "patch": "@@ -1229,36 +1229,34 @@ mod tests {\n     }\n \n     fn test_timespec_eq_ord() {\n-        use core::cmp::{eq, ge, gt, le, lt, ne};\n-\n         let a = &Timespec::new(-2, 1);\n         let b = &Timespec::new(-1, 2);\n         let c = &Timespec::new(1, 2);\n         let d = &Timespec::new(2, 1);\n         let e = &Timespec::new(2, 1);\n \n-        assert!(eq(d, e));\n-        assert!(ne(c, e));\n+        assert!(d.eq(e));\n+        assert!(c.ne(e));\n \n-        assert!(lt(a, b));\n-        assert!(lt(b, c));\n-        assert!(lt(c, d));\n+        assert!(a.lt(b));\n+        assert!(b.lt(c));\n+        assert!(c.lt(d));\n \n-        assert!(le(a, b));\n-        assert!(le(b, c));\n-        assert!(le(c, d));\n-        assert!(le(d, e));\n-        assert!(le(e, d));\n+        assert!(a.le(b));\n+        assert!(b.le(c));\n+        assert!(c.le(d));\n+        assert!(d.le(e));\n+        assert!(e.le(d));\n \n-        assert!(ge(b, a));\n-        assert!(ge(c, b));\n-        assert!(ge(d, c));\n-        assert!(ge(e, d));\n-        assert!(ge(d, e));\n+        assert!(b.ge(a));\n+        assert!(c.ge(b));\n+        assert!(d.ge(c));\n+        assert!(e.ge(d));\n+        assert!(d.ge(e));\n \n-        assert!(gt(b, a));\n-        assert!(gt(c, b));\n-        assert!(gt(d, c));\n+        assert!(b.gt(a));\n+        assert!(c.gt(b));\n+        assert!(d.gt(c));\n     }\n \n     #[test]"}, {"sha": "ce6a04c3688bac77367364040e4e35473ad86bec", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5e97fc78994cb08008a8d76b71d91714385131/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=6e5e97fc78994cb08008a8d76b71d91714385131", "patch": "@@ -172,36 +172,6 @@ pub trait Ord {\n     fn gt(&self, other: &Self) -> bool;\n }\n \n-#[inline(always)]\n-pub fn lt<T:Ord>(v1: &T, v2: &T) -> bool {\n-    (*v1).lt(v2)\n-}\n-\n-#[inline(always)]\n-pub fn le<T:Ord>(v1: &T, v2: &T) -> bool {\n-    (*v1).le(v2)\n-}\n-\n-#[inline(always)]\n-pub fn eq<T:Eq>(v1: &T, v2: &T) -> bool {\n-    (*v1).eq(v2)\n-}\n-\n-#[inline(always)]\n-pub fn ne<T:Eq>(v1: &T, v2: &T) -> bool {\n-    (*v1).ne(v2)\n-}\n-\n-#[inline(always)]\n-pub fn ge<T:Ord>(v1: &T, v2: &T) -> bool {\n-    (*v1).ge(v2)\n-}\n-\n-#[inline(always)]\n-pub fn gt<T:Ord>(v1: &T, v2: &T) -> bool {\n-    (*v1).gt(v2)\n-}\n-\n /// The equivalence relation. Two values may be equivalent even if they are\n /// of different types. The most common use case for this relation is\n /// container types; e.g. it is often desirable to be able to use `&str`"}]}