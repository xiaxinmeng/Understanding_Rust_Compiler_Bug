{"sha": "f96e56c3a024fd6b8e5545e21299cdefe17c5965", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmU1NmMzYTAyNGZkNmI4ZTU1NDVlMjEyOTljZGVmZTE3YzU5NjU=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-03-26T05:16:45Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-03-26T05:16:45Z"}, "message": "Avoid extra comma in vertical single-field struct patterns (#1403)\n\n* Add (failing) test for #1397\r\n\r\n* Fix for #1397\r\n\r\nSpecifically, we end up double-adding a trailing comma for single-member\r\nstruct patterns that are arranged vertically. One is added by write_list\r\n(since such structs return true for needs_trailing_separator), and\r\nanother is added by the if in the old code.", "tree": {"sha": "db502dac6b405a58d1297bb97c22b94ada593782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db502dac6b405a58d1297bb97c22b94ada593782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96e56c3a024fd6b8e5545e21299cdefe17c5965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96e56c3a024fd6b8e5545e21299cdefe17c5965", "html_url": "https://github.com/rust-lang/rust/commit/f96e56c3a024fd6b8e5545e21299cdefe17c5965", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96e56c3a024fd6b8e5545e21299cdefe17c5965/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be61bcdd6252b529f5a14765fb7cb01be943f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be61bcdd6252b529f5a14765fb7cb01be943f66", "html_url": "https://github.com/rust-lang/rust/commit/6be61bcdd6252b529f5a14765fb7cb01be943f66"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "8c81a5ef9901c662aac6b5690e8bd63c52db50e1", "filename": "src/patterns.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f96e56c3a024fd6b8e5545e21299cdefe17c5965/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96e56c3a024fd6b8e5545e21299cdefe17c5965/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f96e56c3a024fd6b8e5545e21299cdefe17c5965", "patch": "@@ -13,8 +13,8 @@ use codemap::SpanUtils;\n use config::{IndentStyle, MultilineStyle};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, format_mutability};\n-use lists::{format_item_list, itemize_list, ListItem, struct_lit_shape, struct_lit_tactic,\n-            shape_for_tactic, struct_lit_formatting, write_list};\n+use lists::{DefinitiveListTactic, format_item_list, itemize_list, ListItem, struct_lit_shape,\n+            struct_lit_tactic, shape_for_tactic, struct_lit_formatting, write_list};\n use expr::{rewrite_unary_prefix, rewrite_pair};\n use types::{rewrite_path, PathContext};\n use super::Spanned;\n@@ -167,7 +167,13 @@ fn rewrite_struct_pat(path: &ast::Path,\n             fields_str.push_str(\"..\");\n         } else {\n             if !fields_str.is_empty() {\n-                fields_str.push_str(\", \");\n+                // there are preceeding struct fields being matched on\n+                if fmt.tactic == DefinitiveListTactic::Vertical {\n+                    // if the tactic is Vertical, write_list already added a trailing ,\n+                    fields_str.push_str(\" \");\n+                } else {\n+                    fields_str.push_str(\", \");\n+                }\n             }\n             fields_str.push_str(\"..\");\n         }"}, {"sha": "d8cacd61b580e0b5941337ebe814cfb4e41a4ae3", "filename": "tests/target/issue-1397.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f96e56c3a024fd6b8e5545e21299cdefe17c5965/tests%2Ftarget%2Fissue-1397.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f96e56c3a024fd6b8e5545e21299cdefe17c5965/tests%2Ftarget%2Fissue-1397.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1397.rs?ref=f96e56c3a024fd6b8e5545e21299cdefe17c5965", "patch": "@@ -0,0 +1,23 @@\n+pub enum TransactionState {\n+    Committed(i64),\n+}\n+\n+pub enum Packet {\n+    Transaction { state: TransactionState },\n+}\n+\n+fn baz(p: Packet) {\n+    loop {\n+        loop {\n+            loop {\n+                loop {\n+                    if let Packet::Transaction {\n+                               state: TransactionState::Committed(ts, ..), ..\n+                           } = p {\n+                        unreachable!()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}