{"sha": "f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OWVkN2E2YjdhYTNhNDRkZDA0NDRiNTA4YTFkMGRkYzA5YjBmMTU=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2021-01-05T15:14:39Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-03T10:22:17Z"}, "message": "Add tests and support two more noop methods", "tree": {"sha": "c6b01189571ac4abb30d9a37c3c3459407b3dcc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b01189571ac4abb30d9a37c3c3459407b3dcc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "html_url": "https://github.com/rust-lang/rust/commit/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "040735c110026bbd494a23c86182ebda201d720b", "url": "https://api.github.com/repos/rust-lang/rust/commits/040735c110026bbd494a23c86182ebda201d720b", "html_url": "https://github.com/rust-lang/rust/commit/040735c110026bbd494a23c86182ebda201d720b"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "3ab3fab4272c703d888cbddd626a19b9c99db309", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -54,11 +54,19 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                         // Resolve the trait method instance\n                         if let Ok(Some(i)) = ty::Instance::resolve(cx.tcx, param_env, did, substs) {\n                             // Check that it implements the noop diagnostic\n-                            if cx.tcx.is_diagnostic_item(sym::ref_clone_method, i.def_id()) {\n+                            tracing::debug!(\"Resolves to: {:?}\", i.def_id());\n+                            if [\n+                                sym::noop_method_borrow,\n+                                sym::noop_method_clone,\n+                                sym::noop_method_deref,\n+                            ]\n+                            .iter()\n+                            .any(|s| cx.tcx.is_diagnostic_item(*s, i.def_id()))\n+                            {\n                                 let span = expr.span;\n \n                                 cx.struct_span_lint(NOOP_METHOD_CALL, span, |lint| {\n-                                    let message = \"Call to noop method\";\n+                                    let message = \"call to noop method\";\n                                     lint.build(&message).emit()\n                                 });\n                             }"}, {"sha": "d39fbd61962e7927520a556a02ddb0c86341552f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -789,6 +789,9 @@ symbols! {\n         none_error,\n         nontemporal_store,\n         nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n+        noop_method_borrow,\n+        noop_method_clone,\n+        noop_method_deref,\n         noreturn,\n         nostack,\n         not,\n@@ -915,7 +918,6 @@ symbols! {\n         receiver,\n         recursion_limit,\n         reexport_test_harness_main,\n-        ref_clone_method,\n         reference,\n         reflect,\n         reg,"}, {"sha": "af2ad12dddf0a7f79a93ca7ca6892ea848568718", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -219,6 +219,7 @@ impl<T: ?Sized> BorrowMut<T> for T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Borrow<T> for &T {\n+    #[rustc_diagnostic_item = \"noop_method_borrow\"]\n     fn borrow(&self) -> &T {\n         &**self\n     }"}, {"sha": "12b4feeb14ae3e466c1d8b97164e5562c519c502", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -104,7 +104,6 @@\n /// [impls]: #implementors\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"clone\"]\n-#[rustc_diagnostic_item = \"Clone\"]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///\n@@ -222,7 +221,7 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<T: ?Sized> Clone for &T {\n         #[inline]\n-        #[rustc_diagnostic_item = \"ref_clone_method\"]\n+        #[rustc_diagnostic_item = \"noop_method_clone\"]\n         fn clone(&self) -> Self {\n             *self\n         }"}, {"sha": "d503a301741916ed3bec6fd84a63f2e00d585ec9", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -78,6 +78,7 @@ pub trait Deref {\n impl<T: ?Sized> Deref for &T {\n     type Target = T;\n \n+    #[rustc_diagnostic_item = \"noop_method_deref\"]\n     fn deref(&self) -> &T {\n         *self\n     }"}, {"sha": "4b81e04d3f7f935eeed10dfe08f97b25afe39528", "filename": "src/test/ui/lint/noop-method-call.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.rs?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+\n+#![allow(unused)]\n+\n+use std::borrow::Borrow;\n+use std::ops::Deref;\n+\n+struct Foo<T>(T);\n+\n+#[derive(Clone)]\n+struct Bar<T>(T);\n+\n+struct DerefExample<T>(T);\n+\n+impl<T> Deref for DerefExample<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let foo = &Foo(1u32);\n+    let foo_clone: &Foo<u32> = foo.clone(); //~ WARNING call to noop method\n+\n+    let bar = &Bar(1u32);\n+    let bar_clone: Bar<u32> = bar.clone();\n+\n+    let deref = &&DerefExample(12u32);\n+    let derefed: &DerefExample<u32> = deref.deref(); //~ WARNING call to noop method\n+\n+    let deref = &DerefExample(12u32);\n+    let derefed: &u32 = deref.deref();\n+\n+    let a = &&Foo(1u32);\n+    let borrowed: &Foo<u32> = a.borrow(); //~ WARNING call to noop method\n+}\n+\n+fn generic<T>(foo: &Foo<T>) {\n+    foo.clone();\n+}\n+\n+fn non_generic(foo: &Foo<u32>) {\n+    foo.clone(); //~ WARNING call to noop method\n+}"}, {"sha": "1120adee121b18c715181285c4f98f81d8847922", "filename": "src/test/ui/lint/noop-method-call.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnoop-method-call.stderr?ref=f49ed7a6b7aa3a44dd0444b508a1d0ddc09b0f15", "patch": "@@ -0,0 +1,28 @@\n+warning: call to noop method\n+  --> $DIR/noop-method-call.rs:24:32\n+   |\n+LL |     let foo_clone: &Foo<u32> = foo.clone();\n+   |                                ^^^^^^^^^^^\n+   |\n+   = note: `#[warn(noop_method_call)]` on by default\n+\n+warning: call to noop method\n+  --> $DIR/noop-method-call.rs:30:39\n+   |\n+LL |     let derefed: &DerefExample<u32> = deref.deref();\n+   |                                       ^^^^^^^^^^^^^\n+\n+warning: call to noop method\n+  --> $DIR/noop-method-call.rs:36:31\n+   |\n+LL |     let borrowed: &Foo<u32> = a.borrow();\n+   |                               ^^^^^^^^^^\n+\n+warning: call to noop method\n+  --> $DIR/noop-method-call.rs:44:5\n+   |\n+LL |     foo.clone();\n+   |     ^^^^^^^^^^^\n+\n+warning: 4 warnings emitted\n+"}]}