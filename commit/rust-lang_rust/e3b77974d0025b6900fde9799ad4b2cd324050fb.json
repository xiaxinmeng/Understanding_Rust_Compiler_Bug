{"sha": "e3b77974d0025b6900fde9799ad4b2cd324050fb", "node_id": "C_kwDOAAsO6NoAKGUzYjc3OTc0ZDAwMjViNjkwMGZkZTk3OTlhZDRiMmNkMzI0MDUwZmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T17:21:04Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:29:55Z"}, "message": "Move `CaseSensitiveFileExtensionComparisons` into `Methods` lint pass", "tree": {"sha": "1fa2005366cddd622c490056c54bfee22449eb62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa2005366cddd622c490056c54bfee22449eb62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b77974d0025b6900fde9799ad4b2cd324050fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b77974d0025b6900fde9799ad4b2cd324050fb", "html_url": "https://github.com/rust-lang/rust/commit/e3b77974d0025b6900fde9799ad4b2cd324050fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b77974d0025b6900fde9799ad4b2cd324050fb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6a4595285e38f35970e66db903475989e0be6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6a4595285e38f35970e66db903475989e0be6f", "html_url": "https://github.com/rust-lang/rust/commit/ba6a4595285e38f35970e66db903475989e0be6f"}], "stats": {"total": 168, "additions": 77, "deletions": 91}, "files": [{"sha": "bef196565a2a3ecf8da0df185097d05e8c7ee409", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6a4595285e38f35970e66db903475989e0be6f/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=ba6a4595285e38f35970e66db903475989e0be6f", "patch": "@@ -1,85 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_hir::{Expr, ExprKind, PathSegment};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{source_map::Spanned, symbol::sym, Span};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls to `ends_with` with possible file extensions\n-    /// and suggests to use a case-insensitive approach instead.\n-    ///\n-    /// ### Why is this bad?\n-    /// `ends_with` is case-sensitive and may not detect files with a valid extension.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn is_rust_file(filename: &str) -> bool {\n-    ///     filename.ends_with(\".rs\")\n-    /// }\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// fn is_rust_file(filename: &str) -> bool {\n-    ///     let filename = std::path::Path::new(filename);\n-    ///     filename.extension()\n-    ///         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.51.0\"]\n-    pub CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-    pedantic,\n-    \"Checks for calls to ends_with with case-sensitive file extensions\"\n-}\n-\n-declare_lint_pass!(CaseSensitiveFileExtensionComparisons => [CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS]);\n-\n-fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Span> {\n-    if_chain! {\n-        if let ExprKind::MethodCall(PathSegment { ident, .. }, [obj, extension, ..], span) = expr.kind;\n-        if ident.as_str() == \"ends_with\";\n-        if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = extension.kind;\n-        if (2..=6).contains(&ext_literal.as_str().len());\n-        if ext_literal.as_str().starts_with('.');\n-        if ext_literal.as_str().chars().skip(1).all(|c| c.is_uppercase() || c.is_ascii_digit())\n-            || ext_literal.as_str().chars().skip(1).all(|c| c.is_lowercase() || c.is_ascii_digit());\n-        then {\n-            let mut ty = ctx.typeck_results().expr_ty(obj);\n-            ty = match ty.kind() {\n-                ty::Ref(_, ty, ..) => *ty,\n-                _ => ty\n-            };\n-\n-            match ty.kind() {\n-                ty::Str => {\n-                    return Some(span);\n-                },\n-                ty::Adt(def, _) => {\n-                    if ctx.tcx.is_diagnostic_item(sym::String, def.did()) {\n-                        return Some(span);\n-                    }\n-                },\n-                _ => { return None; }\n-            }\n-        }\n-    }\n-    None\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for CaseSensitiveFileExtensionComparisons {\n-    fn check_expr(&mut self, ctx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some(span) = check_case_sensitive_file_extension_comparison(ctx, expr) {\n-            span_lint_and_help(\n-                ctx,\n-                CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-                span,\n-                \"case-sensitive file extension comparison\",\n-                None,\n-                \"consider using a case-insensitive comparison instead\",\n-            );\n-        }\n-    }\n-}"}, {"sha": "10ff1fa1f580d1af6ba60df70d828373429424f6", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -64,7 +64,6 @@ store.register_lints(&[\n     cargo::NEGATIVE_FEATURE_NAMES,\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n-    case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n     casts::AS_UNDERSCORE,\n     casts::BORROW_AS_PTR,\n     casts::CAST_ABS_TO_UNSIGNED,\n@@ -285,6 +284,7 @@ store.register_lints(&[\n     methods::BIND_INSTEAD_OF_MAP,\n     methods::BYTES_COUNT_TO_LEN,\n     methods::BYTES_NTH,\n+    methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n     methods::CHARS_LAST_CMP,\n     methods::CHARS_NEXT_CMP,\n     methods::CLONED_INSTEAD_OF_COPIED,"}, {"sha": "c9cf7dbd0785ec92bbe5bf004d4270c9fcd45e92", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -4,7 +4,6 @@\n \n store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(attrs::INLINE_ALWAYS),\n-    LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n     LintId::of(casts::BORROW_AS_PTR),\n     LintId::of(casts::CAST_LOSSLESS),\n     LintId::of(casts::CAST_POSSIBLE_TRUNCATION),\n@@ -56,6 +55,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n     LintId::of(matches::MATCH_WILD_ERR_ARM),\n     LintId::of(matches::SINGLE_MATCH_ELSE),\n+    LintId::of(methods::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n     LintId::of(methods::CLONED_INSTEAD_OF_COPIED),\n     LintId::of(methods::FILTER_MAP_NEXT),\n     LintId::of(methods::FLAT_MAP_OPTION),"}, {"sha": "68f69dc64b862272e446fe6dd2281842097f03b1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -181,7 +181,6 @@ mod bool_assert_comparison;\n mod booleans;\n mod borrow_deref_ref;\n mod cargo;\n-mod case_sensitive_file_extension_comparisons;\n mod casts;\n mod checked_conversions;\n mod cognitive_complexity;\n@@ -852,9 +851,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::StringToString));\n     store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n     store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n-    store.register_late_pass(|| {\n-        Box::new(case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons)\n-    });\n     store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n     store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));"}, {"sha": "b3c2c7c9a2dcc3a70cac63fe2363ecf238a1d514", "filename": "clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -0,0 +1,41 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::ast::LitKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::{source_map::Spanned, symbol::sym, Span};\n+\n+use super::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    call_span: Span,\n+    recv: &'tcx Expr<'_>,\n+    arg: &'tcx Expr<'_>,\n+) {\n+    if_chain! {\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if cx.tcx.type_of(impl_id).is_str();\n+        if let ExprKind::Lit(Spanned { node: LitKind::Str(ext_literal, ..), ..}) = arg.kind;\n+        if (2..=6).contains(&ext_literal.as_str().len());\n+        let ext_str = ext_literal.as_str();\n+        if ext_str.starts_with('.');\n+        if ext_str.chars().skip(1).all(|c| c.is_uppercase() || c.is_ascii_digit())\n+            || ext_str.chars().skip(1).all(|c| c.is_lowercase() || c.is_ascii_digit());\n+        let recv_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+        if recv_ty.is_str() || is_type_diagnostic_item(cx, recv_ty, sym::String);\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+                call_span,\n+                \"case-sensitive file extension comparison\",\n+                None,\n+                \"consider using a case-insensitive comparison instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "0bb247c7e8103cd95a4202d199a34124ceb234e9", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b77974d0025b6900fde9799ad4b2cd324050fb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e3b77974d0025b6900fde9799ad4b2cd324050fb", "patch": "@@ -2,6 +2,7 @@ mod bind_instead_of_map;\n mod bytecount;\n mod bytes_count_to_len;\n mod bytes_nth;\n+mod case_sensitive_file_extension_comparisons;\n mod chars_cmp;\n mod chars_cmp_with_unwrap;\n mod chars_last_cmp;\n@@ -2428,6 +2429,34 @@ declare_clippy_lint! {\n     \"Using `bytes().count()` when `len()` performs the same functionality\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for calls to `ends_with` with possible file extensions\n+    /// and suggests to use a case-insensitive approach instead.\n+    ///\n+    /// ### Why is this bad?\n+    /// `ends_with` is case-sensitive and may not detect files with a valid extension.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn is_rust_file(filename: &str) -> bool {\n+    ///     filename.ends_with(\".rs\")\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn is_rust_file(filename: &str) -> bool {\n+    ///     let filename = std::path::Path::new(filename);\n+    ///     filename.extension()\n+    ///         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.51.0\"]\n+    pub CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    pedantic,\n+    \"Checks for calls to ends_with with case-sensitive file extensions\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2534,6 +2563,7 @@ impl_lint_pass!(Methods => [\n     ITER_ON_EMPTY_COLLECTIONS,\n     NAIVE_BYTECOUNT,\n     BYTES_COUNT_TO_LEN,\n+    CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2801,6 +2831,10 @@ impl Methods {\n                 (\"drain\", [arg]) => {\n                     iter_with_drain::check(cx, expr, recv, span, arg);\n                 },\n+                (\"ends_with\", [arg]) => {\n+                    if let ExprKind::MethodCall(_, _, span) = expr.kind {\n+                    case_sensitive_file_extension_comparisons::check(cx, expr, span, recv, arg);\n+                },\n                 (\"expect\", [_]) => match method_call(recv) {\n                     Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n                     Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, self.msrv, span, err_span),"}]}