{"sha": "016b5866852e3d9c7c5ba6cdc3938afe7976af9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmI1ODY2ODUyZTNkOWM3YzViYTZjZGMzOTM4YWZlNzk3NmFmOWU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-08-02T18:34:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-08-02T18:34:25Z"}, "message": "A bit of cleanup", "tree": {"sha": "882e0f26952be33780ccb0c336236951ce05e991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882e0f26952be33780ccb0c336236951ce05e991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016b5866852e3d9c7c5ba6cdc3938afe7976af9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAltjTrMACgkQtAh+UQ6Y\nsWRVbg/+OH1ArEeHbUx7b+DvCJmT4obGfbdiVDa9jijQohL/nJiRU3t+FLMDTOCj\nIC3xIVjIahB3mUGqoWLIs5bQyCRajlTsue70k5YJNFbkTsmBVSaJASiULnKyoa55\n7XrzLQSLLHSF9hCEUJhOjzgUHp8NF9XHvL4IQyFAAdRzC4JQ4mKGxFb/NElZd9D/\nbGQTg4puygkzxoWLxI92r4Zg5R/HGBh0hROyb5Xf7PVxRj1XK7xi6JN0UE1Bzz+i\nCv9ETYS6pTqGbB+Iasi+zsFzMAFocDikw1PlpphyNDXwKOVHDohvfq1RU3w2zW0m\nX4QKTla7ngJDBkVGBwcWedG+32TrbWqv3qpdi/alP/sum2llWD/Di5J32qjMWjhG\nNBSWAm7Zv+3/yYzsRU6jNxKtfnhBIsYQX7bmUeukZSs8KIDCkFkBw7Qt61kCrAJ8\nobYb1lH3/8D61sqCJqFCd7MbZypy94eIfdxn5X9wHeUJ65X9KxR9Pie1mfOsrsB9\nr42mUh6Os10be6d9+KWGRwkzHaeIyJCOKb3YBr+rC9u5krugKHYpdFrYdjhuXySz\nlMd7ceOOz5YBUDUoppYsJmPN8qaCY7D3rE3qMrJhMlc0HbUrYHSzN4jwwE6QpH7G\n5OwEm61viise3l63GTFkGcxTVD8QZtoSHZnTK7/EgGQIhjCUqXE=\n=UhyY\n-----END PGP SIGNATURE-----", "payload": "tree 882e0f26952be33780ccb0c336236951ce05e991\nparent a0943b6bba4ed2ba6f32635fecef794325b5fdf4\nauthor Aaron Hill <aa1ronham@gmail.com> 1533234865 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1533234865 -0400\n\nA bit of cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016b5866852e3d9c7c5ba6cdc3938afe7976af9e", "html_url": "https://github.com/rust-lang/rust/commit/016b5866852e3d9c7c5ba6cdc3938afe7976af9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016b5866852e3d9c7c5ba6cdc3938afe7976af9e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0943b6bba4ed2ba6f32635fecef794325b5fdf4", "html_url": "https://github.com/rust-lang/rust/commit/a0943b6bba4ed2ba6f32635fecef794325b5fdf4"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "ea96bd86f92da9d2aafaa6a4a4d34a88ac177549", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/016b5866852e3d9c7c5ba6cdc3938afe7976af9e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016b5866852e3d9c7c5ba6cdc3938afe7976af9e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=016b5866852e3d9c7c5ba6cdc3938afe7976af9e", "patch": "@@ -326,9 +326,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let mut user_computed_preds: FxHashSet<_> =\n             user_env.caller_bounds.iter().cloned().collect();\n \n-\n-\n-\n         let mut new_env = param_env.clone();\n         let dummy_cause = ObligationCause::misc(DUMMY_SP, ast::DUMMY_NODE_ID);\n \n@@ -362,7 +359,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     if self.is_of_param(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n                         self.add_user_pred(&mut user_computed_preds, ty::Predicate::Trait(pred.clone()));\n-                        //user_computed_preds.insert(ty::Predicate::Trait(pred.clone()));\n                         predicates.push_back(pred);\n                     } else {\n                         debug!(\n@@ -397,6 +393,29 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         return Some((new_env, final_user_env));\n     }\n \n+    // This method is designed to work around the following issue:\n+    // When we compute auto trait bounds, we repeatedly call SelectionContext.select,\n+    // progressively building a ParamEnv based on the results we get.\n+    // However, our usage of SelectionContext differs from its normal use within the compiler,\n+    // in that we capture and re-reprocess predicates from Unimplemented errors.\n+    //\n+    // This can lead to a corner case when dealing with region parameters.\n+    // During our selection loop in evaluate_predicates, we might end up with\n+    // two trait predicates that differ only in their region parameters:\n+    // one containing a HRTB lifetime parameter, and one containing a 'normal'\n+    // lifetime parameter. For example:\n+    //\n+    // T as MyTrait<'a>\n+    // T as MyTrait<'static>\n+    //\n+    // If we put both of these predicates in our computed ParamEnv, we'll\n+    // confuse SelectionContext, since it will (correctly) view both as being applicable.\n+    //\n+    // To solve this, we pick the 'more strict' lifetime bound - i.e. the HRTB\n+    // Our end goal is to generate a user-visible description of the conditions\n+    // under which a type implements an auto trait. A trait predicate involving\n+    // a HRTB means that the type needs to work with any choice of lifetime,\n+    // not just one specific lifetime (e.g. 'static).\n     fn add_user_pred<'c>(&self, user_computed_preds: &mut FxHashSet<ty::Predicate<'c>>, new_pred: ty::Predicate<'c>) {\n         let mut should_add_new = true;\n         user_computed_preds.retain(|&old_pred| {"}]}