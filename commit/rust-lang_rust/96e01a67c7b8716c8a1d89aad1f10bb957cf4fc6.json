{"sha": "96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZTAxYTY3YzdiODcxNmM4YTFkODlhYWQxZjEwYmI5NTdjZjRmYzY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-06T19:16:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-06T19:16:14Z"}, "message": "librustc: Convert some large structural records over to structs. rs=perf\n\nNo effect on compile-time performance.", "tree": {"sha": "95d364fb0d1aa4481028db49c125e94571be45f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d364fb0d1aa4481028db49c125e94571be45f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "html_url": "https://github.com/rust-lang/rust/commit/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa967409232c06c35fb100aac65ff274d4d6c30d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa967409232c06c35fb100aac65ff274d4d6c30d", "html_url": "https://github.com/rust-lang/rust/commit/fa967409232c06c35fb100aac65ff274d4d6c30d"}], "stats": {"total": 135, "additions": 81, "deletions": 54}, "files": [{"sha": "3aae2d340e92448600a24c7aea4677ac8d14a1b9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -1086,8 +1086,13 @@ fn new_block(cx: fn_ctxt, parent: Option<block>, +kind: block_kind,\n }\n \n fn simple_block_scope() -> block_kind {\n-    block_scope({loop_break: None, loop_label: None, mut cleanups: ~[],\n-                 mut cleanup_paths: ~[], mut landing_pad: None})\n+    block_scope(scope_info {\n+        loop_break: None,\n+        loop_label: None,\n+        mut cleanups: ~[],\n+        mut cleanup_paths: ~[],\n+        mut landing_pad: None\n+    })\n }\n \n // Use this when you're at the top block of a function or the like.\n@@ -1105,7 +1110,7 @@ fn scope_block(bcx: block,\n \n fn loop_scope_block(bcx: block, loop_break: block, loop_label: Option<ident>,\n                     n: ~str, opt_node_info: Option<node_info>) -> block {\n-    return new_block(bcx.fcx, Some(bcx), block_scope({\n+    return new_block(bcx.fcx, Some(bcx), block_scope(scope_info {\n         loop_break: Some(loop_break),\n         loop_label: loop_label,\n         mut cleanups: ~[],\n@@ -1436,7 +1441,8 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt,\n                     param_substs: Option<param_substs>,\n                     sp: Option<span>) -> fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n-    return @{llfn: llfndecl,\n+    return @fn_ctxt_ {\n+          llfn: llfndecl,\n           llenv: llvm::LLVMGetParam(llfndecl, 1u as c_uint),\n           llretptr: llvm::LLVMGetParam(llfndecl, 0u as c_uint),\n           mut llstaticallocas: llbbs.sa,\n@@ -1453,7 +1459,8 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt,\n           param_substs: param_substs,\n           span: sp,\n           path: path,\n-          ccx: ccx};\n+          ccx: ccx\n+    };\n }\n \n fn new_fn_ctxt(ccx: @crate_ctxt, path: path, llfndecl: ValueRef,\n@@ -2814,8 +2821,8 @@ fn trans_crate(sess: session::Session,\n         option::None\n     };\n \n-    let ccx =\n-        @{sess: sess,\n+    let ccx = @crate_ctxt {\n+          sess: sess,\n           llmod: llmod,\n           td: td,\n           tn: tn,\n@@ -2875,8 +2882,8 @@ fn trans_crate(sess: session::Session,\n           crate_map: crate_map,\n           mut uses_gc: false,\n           dbg_cx: dbg_cx,\n-          mut do_not_commit_warning_issued: false};\n-\n+          mut do_not_commit_warning_issued: false\n+    };\n \n     gather_rtcalls(ccx, crate);\n "}, {"sha": "b5c5507a22e9cbdf34900af7dd70b2eb02d67fa3", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -141,7 +141,7 @@ fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n }\n \n // Crate context.  Every crate we compile has one of these.\n-type crate_ctxt = {\n+struct crate_ctxt {\n      sess: session::Session,\n      llmod: ModuleRef,\n      td: target_data,\n@@ -211,7 +211,8 @@ type crate_ctxt = {\n      // is not emitted by LLVM's GC pass when no functions use GC.\n      mut uses_gc: bool,\n      dbg_cx: Option<debuginfo::debug_ctxt>,\n-     mut do_not_commit_warning_issued: bool};\n+     mut do_not_commit_warning_issued: bool\n+}\n \n // Types used for llself.\n struct ValSelfData {\n@@ -224,10 +225,12 @@ enum local_val { local_mem(ValueRef), local_imm(ValueRef), }\n \n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n-type param_substs = {tys: ~[ty::t],\n-                     vtables: Option<typeck::vtable_res>,\n-                     bounds: @~[ty::param_bounds],\n-                     self_ty: Option<ty::t>};\n+struct param_substs {\n+    tys: ~[ty::t],\n+    vtables: Option<typeck::vtable_res>,\n+    bounds: @~[ty::param_bounds],\n+    self_ty: Option<ty::t>\n+}\n \n fn param_substs_to_str(tcx: ty::ctxt, substs: &param_substs) -> ~str {\n     fmt!(\"param_substs {tys:%?, vtables:%?, bounds:%?}\",\n@@ -238,7 +241,7 @@ fn param_substs_to_str(tcx: ty::ctxt, substs: &param_substs) -> ~str {\n \n // Function context.  Every LLVM function we create will have one of\n // these.\n-type fn_ctxt = @{\n+struct fn_ctxt_ {\n     // The ValueRef returned from a call to llvm::LLVMAddFunction; the\n     // address of the first instruction in the sequence of\n     // instructions for this function that will go in the .text\n@@ -302,7 +305,9 @@ type fn_ctxt = @{\n \n     // This function's enclosing crate context.\n     ccx: @crate_ctxt\n-};\n+}\n+\n+pub type fn_ctxt = @fn_ctxt_;\n \n fn warn_not_to_commit(ccx: @crate_ctxt, msg: ~str) {\n     if !ccx.do_not_commit_warning_issued {\n@@ -484,7 +489,7 @@ enum block_kind {\n     block_non_scope,\n }\n \n-type scope_info = {\n+struct scope_info {\n     loop_break: Option<block>,\n     loop_label: Option<ident>,\n     // A list of functions that must be run at when leaving this\n@@ -496,7 +501,7 @@ type scope_info = {\n     mut cleanup_paths: ~[cleanup_path],\n     // Unwinding landing pad. Also cleared when cleanups change.\n     mut landing_pad: Option<BasicBlockRef>,\n-};\n+}\n \n trait get_node_info {\n     fn info() -> Option<node_info>;\n@@ -1171,11 +1176,11 @@ enum mono_param_id {\n               datum::DatumMode),\n }\n \n-type mono_id_ = {\n+struct mono_id_ {\n     def: ast::def_id,\n     params: ~[mono_param_id],\n     impl_did_opt: Option<ast::def_id>\n-};\n+}\n \n type mono_id = @mono_id_;\n "}, {"sha": "a4a6dca1dd692cf0c37e2b6f58f2a9fe69851dda", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -224,7 +224,11 @@ fn trans_break_cont(bcx: block, opt_label: Option<ident>, to_end: bool)\n     let mut target;\n     loop {\n         match unwind.kind {\n-          block_scope({loop_break: Some(brk), loop_label: l, _}) => {\n+          block_scope(scope_info {\n+            loop_break: Some(brk),\n+            loop_label: l,\n+            _\n+          }) => {\n               // If we're looking for a labeled loop, check the label...\n               target = if to_end {\n                   brk"}, {"sha": "a7c70430675933dfdf75e97c0570404bfe696206", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -59,7 +59,7 @@ fn trans_impl(ccx: @crate_ctxt, path: path, name: ast::ident,\n             match self_ty {\n                 None => param_substs_opt = None,\n                 Some(self_ty) => {\n-                    param_substs_opt = Some({\n+                    param_substs_opt = Some(param_substs {\n                         tys: ~[],\n                         vtables: None,\n                         bounds: @~[],\n@@ -112,7 +112,7 @@ fn trans_method(ccx: @crate_ctxt,\n         }\n         let self_ty = match param_substs {\n             None => self_ty,\n-            Some({tys: ref tys, _}) => {\n+            Some(param_substs {tys: ref tys, _}) => {\n                 ty::subst_tps(ccx.tcx, *tys, None, self_ty)\n             }\n         };\n@@ -722,9 +722,11 @@ fn vtable_id(ccx: @crate_ctxt, origin: typeck::vtable_origin) -> mono_id {\n                 None)\n         }\n         typeck::vtable_trait(trait_id, substs) => {\n-            @{def: trait_id,\n-              params: vec::map(substs, |t| mono_precise(*t, None)),\n-              impl_did_opt: None}\n+            @mono_id_ {\n+                def: trait_id,\n+                params: vec::map(substs, |t| mono_precise(*t, None)),\n+                impl_did_opt: None\n+            }\n         }\n         // can't this be checked at the callee?\n         _ => fail ~\"vtable_id\""}, {"sha": "f0a21b057c9adfa1eb8f547d239d6cc0e91ef277", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -156,7 +156,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n         lldecl\n     };\n \n-    let psubsts = Some({\n+    let psubsts = Some(param_substs {\n         tys: substs,\n         vtables: vtables,\n         bounds: tpt.bounds,\n@@ -381,5 +381,5 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n           })\n       }\n     };\n-    @{def: item, params: param_ids, impl_did_opt: impl_did_opt}\n+    @mono_id_ {def: item, params: param_ids, impl_did_opt: impl_did_opt}\n }"}, {"sha": "7c8b314a96b973b89de6a750110fc60c6fe0baa5", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -32,16 +32,22 @@ export map, find_reachable;\n \n type map = HashMap<node_id, ()>;\n \n-type ctx = {exp_map2: resolve::ExportMap2,\n-            tcx: ty::ctxt,\n-            method_map: typeck::method_map,\n-            rmap: map};\n+struct ctx {\n+    exp_map2: resolve::ExportMap2,\n+    tcx: ty::ctxt,\n+    method_map: typeck::method_map,\n+    rmap: map\n+}\n \n fn find_reachable(crate_mod: _mod, exp_map2: resolve::ExportMap2,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n     let rmap = HashMap();\n-    let cx = {exp_map2: exp_map2, tcx: tcx,\n-              method_map: method_map, rmap: rmap};\n+    let cx = ctx {\n+        exp_map2: exp_map2,\n+        tcx: tcx,\n+        method_map: method_map,\n+        rmap: rmap\n+    };\n     traverse_public_mod(cx, ast::crate_node_id, crate_mod);\n     traverse_all_resources_and_impls(cx, crate_mod);\n     rmap"}, {"sha": "2c3bf1eeb181f74d9ce820ec5126e87ba59b7fad", "filename": "src/librustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -33,7 +33,7 @@ fn check_alt(fcx: @fn_ctxt,\n     // Typecheck the patterns first, so that we get types for all the\n     // bindings.\n     for arms.each |arm| {\n-        let pcx = {\n+        let pcx = pat_ctxt {\n             fcx: fcx,\n             map: pat_id_map(tcx.def_map, arm.pats[0]),\n             alt_region: ty::re_scope(expr.id),\n@@ -61,12 +61,12 @@ fn check_alt(fcx: @fn_ctxt,\n     return bot;\n }\n \n-type pat_ctxt = {\n+struct pat_ctxt {\n     fcx: @fn_ctxt,\n     map: PatIdMap,\n     alt_region: ty::Region,   // Region for the alt as a whole\n     block_region: ty::Region, // Region for the block of the arm\n-};\n+}\n \n fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n                      subpats: Option<~[@ast::pat]>, expected: ty::t) {"}, {"sha": "73d8ed99159697eece3acaf9238f2f5663b0ae8f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -84,6 +84,7 @@ use middle::ty;\n use middle::typeck::astconv::{ast_conv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n use middle::typeck::astconv;\n+use middle::typeck::check::alt::pat_ctxt;\n use middle::typeck::check::method::TransformTypeNormally;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n@@ -421,7 +422,7 @@ fn check_fn(ccx: @crate_ctxt,\n \n             // Check the pattern.\n             let region = fcx.block_region();\n-            let pcx = {\n+            let pcx = pat_ctxt {\n                 fcx: fcx,\n                 map: pat_id_map(tcx.def_map, input.pat),\n                 alt_region: region,\n@@ -2485,7 +2486,7 @@ fn check_decl_local(fcx: @fn_ctxt, local: @ast::local) -> bool {\n \n     let region =\n         ty::re_scope(tcx.region_map.get(local.node.id));\n-    let pcx = {\n+    let pcx = pat_ctxt {\n         fcx: fcx,\n         map: pat_id_map(tcx.def_map, local.node.pat),\n         alt_region: region,"}, {"sha": "a31563a6de050171c712d598d996e8ed60b5df45", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=96e01a67c7b8716c8a1d89aad1f10bb957cf4fc6", "patch": "@@ -216,16 +216,17 @@ impl vtable_origin {\n \n type vtable_map = HashMap<ast::node_id, vtable_res>;\n \n-type crate_ctxt_ = {// A mapping from method call sites to traits that have\n-                    // that method.\n-                    trait_map: resolve::TraitMap,\n-                    method_map: method_map,\n-                    vtable_map: vtable_map,\n-                    coherence_info: @coherence::CoherenceInfo,\n-                    tcx: ty::ctxt};\n+struct crate_ctxt__ {\n+    // A mapping from method call sites to traits that have that method.\n+    trait_map: resolve::TraitMap,\n+    method_map: method_map,\n+    vtable_map: vtable_map,\n+    coherence_info: @coherence::CoherenceInfo,\n+    tcx: ty::ctxt\n+}\n \n enum crate_ctxt {\n-    crate_ctxt_(crate_ctxt_)\n+    crate_ctxt_(crate_ctxt__)\n }\n \n // Functions that write types into the node type table\n@@ -392,12 +393,13 @@ fn check_crate(tcx: ty::ctxt,\n                crate: @ast::crate)\n     -> (method_map, vtable_map) {\n \n-    let ccx = @crate_ctxt_({trait_map: trait_map,\n-                            method_map: map::HashMap(),\n-                            vtable_map: map::HashMap(),\n-                            coherence_info: @coherence::CoherenceInfo(),\n-                            tcx: tcx\n-                           });\n+    let ccx = @crate_ctxt_(crate_ctxt__ {\n+        trait_map: trait_map,\n+        method_map: map::HashMap(),\n+        vtable_map: map::HashMap(),\n+        coherence_info: @coherence::CoherenceInfo(),\n+        tcx: tcx\n+    });\n     collect::collect_item_types(ccx, crate);\n     coherence::check_coherence(ccx, crate);\n "}]}