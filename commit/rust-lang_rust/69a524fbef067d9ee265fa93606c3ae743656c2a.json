{"sha": "69a524fbef067d9ee265fa93606c3ae743656c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTUyNGZiZWYwNjdkOWVlMjY1ZmE5MzYwNmMzYWU3NDM2NTZjMmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-22T14:01:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-22T14:01:51Z"}, "message": "dedupe", "tree": {"sha": "a575a4f1d094bb7410cc95bdd113b3d7fe1eba3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a575a4f1d094bb7410cc95bdd113b3d7fe1eba3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a524fbef067d9ee265fa93606c3ae743656c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a524fbef067d9ee265fa93606c3ae743656c2a", "html_url": "https://github.com/rust-lang/rust/commit/69a524fbef067d9ee265fa93606c3ae743656c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a524fbef067d9ee265fa93606c3ae743656c2a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e3bec11ebd1fce78701670cf9189b5a9d0d68f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3bec11ebd1fce78701670cf9189b5a9d0d68f8", "html_url": "https://github.com/rust-lang/rust/commit/8e3bec11ebd1fce78701670cf9189b5a9d0d68f8"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "0f53e8f4a87b177f66e06af92159490e82027385", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=69a524fbef067d9ee265fa93606c3ae743656c2a", "patch": "@@ -40,10 +40,7 @@ impl<'a> AstNode<'a> for Attr<'a> {\n \n impl<'a> Attr<'a> {\n     pub fn value(self) -> Option<TokenTree<'a>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(TokenTree::cast)\n-            .next()\n+        super::child_opt(self)\n     }\n }\n \n@@ -125,15 +122,11 @@ impl<'a> AstNode<'a> for File<'a> {\n \n impl<'a> File<'a> {\n     pub fn functions(self) -> impl Iterator<Item = FnDef<'a>> + 'a {\n-        self.syntax()\n-            .children()\n-            .filter_map(FnDef::cast)\n+        super::children(self)\n     }\n \n     pub fn modules(self) -> impl Iterator<Item = Module<'a>> + 'a {\n-        self.syntax()\n-            .children()\n-            .filter_map(Module::cast)\n+        super::children(self)\n     }\n }\n \n@@ -250,9 +243,7 @@ impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n impl<'a> Module<'a> {\n     pub fn modules(self) -> impl Iterator<Item = Module<'a>> + 'a {\n-        self.syntax()\n-            .children()\n-            .filter_map(Module::cast)\n+        super::children(self)\n     }\n }\n \n@@ -507,9 +498,7 @@ impl<'a> ast::TypeParamsOwner<'a> for StructDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for StructDef<'a> {}\n impl<'a> StructDef<'a> {\n     pub fn fields(self) -> impl Iterator<Item = NamedField<'a>> + 'a {\n-        self.syntax()\n-            .children()\n-            .filter_map(NamedField::cast)\n+        super::children(self)\n     }\n }\n "}, {"sha": "69f9236b7c35072f0db83d1b7dc34e18fa3117b3", "filename": "crates/libsyntax2/src/ast/generated.rs.tera", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=69a524fbef067d9ee265fa93606c3ae743656c2a", "patch": "@@ -58,9 +58,7 @@ impl<'a> {{ node }}<'a> {\n {%- set method_name = m.0 -%}\n {%- set ChildName = m.1 %}\n     pub fn {{ method_name }}(self) -> impl Iterator<Item = {{ ChildName }}<'a>> + 'a {\n-        self.syntax()\n-            .children()\n-            .filter_map({{ ChildName }}::cast)\n+        super::children(self)\n     }\n {% endfor -%}\n {%- endif -%}\n@@ -70,10 +68,7 @@ impl<'a> {{ node }}<'a> {\n {%- set method_name = m.0 -%}\n {%- set ChildName = m.1 %}\n     pub fn {{ method_name }}(self) -> Option<{{ ChildName }}<'a>> {\n-        self.syntax()\n-            .children()\n-            .filter_map({{ ChildName }}::cast)\n-            .next()\n+        super::child_opt(self)\n     }\n {% endfor -%}\n {%- endif -%}"}, {"sha": "ba80fc64e0fead2b6200c81eb41c497bbb19d607", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a524fbef067d9ee265fa93606c3ae743656c2a/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=69a524fbef067d9ee265fa93606c3ae743656c2a", "patch": "@@ -9,42 +9,31 @@ use {\n };\n pub use self::generated::*;\n \n-pub trait AstNode<'a>: Clone + Copy {\n+pub trait AstNode<'a>: Clone + Copy + 'a {\n     fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self>\n         where Self: Sized;\n     fn syntax(self) -> SyntaxNodeRef<'a>;\n }\n \n pub trait NameOwner<'a>: AstNode<'a> {\n     fn name(self) -> Option<Name<'a>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n+        child_opt(self)\n     }\n }\n \n pub trait TypeParamsOwner<'a>: AstNode<'a> {\n     fn type_param_list(self) -> Option<TypeParamList<'a>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(TypeParamList::cast)\n-            .next()\n+        child_opt(self)\n     }\n \n     fn where_clause(self) -> Option<WhereClause<'a>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(WhereClause::cast)\n-            .next()\n+        child_opt(self)\n     }\n }\n \n pub trait AttrsOwner<'a>: AstNode<'a> {\n-    fn attrs(&self) -> Box<Iterator<Item=Attr<'a>> + 'a> {\n-        let it = self.syntax().children()\n-            .filter_map(Attr::cast);\n-        Box::new(it)\n+    fn attrs(self) -> Box<Iterator<Item=Attr<'a>> + 'a> {\n+        Box::new(children(self))\n     }\n }\n \n@@ -118,33 +107,43 @@ impl<'a> NameRef<'a> {\n }\n \n impl<'a> ImplItem<'a> {\n-    pub fn target_type(&self) -> Option<TypeRef<'a>> {\n+    pub fn target_type(self) -> Option<TypeRef<'a>> {\n         match self.target() {\n             (Some(t), None) | (_, Some(t)) => Some(t),\n             _ => None,\n         }\n     }\n \n-    pub fn target_trait(&self) -> Option<TypeRef<'a>> {\n+    pub fn target_trait(self) -> Option<TypeRef<'a>> {\n         match self.target() {\n             (Some(t), Some(_)) => Some(t),\n             _ => None,\n         }\n     }\n \n-    fn target(&self) -> (Option<TypeRef<'a>>, Option<TypeRef<'a>>) {\n-        let mut types = self.syntax().children().filter_map(TypeRef::cast);\n+    fn target(self) -> (Option<TypeRef<'a>>, Option<TypeRef<'a>>) {\n+        let mut types = children(self);\n         let first = types.next();\n         let second = types.next();\n         (first, second)\n     }\n }\n \n impl<'a> Module<'a> {\n-    pub fn has_semi(&self) -> bool {\n+    pub fn has_semi(self) -> bool {\n         match self.syntax().last_child() {\n             None => false,\n             Some(node) => node.kind() == SEMI,\n         }\n     }\n }\n+\n+fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n+    children(parent).next()\n+}\n+\n+fn children<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> impl Iterator<Item=C> + 'a {\n+    parent.syntax()\n+        .children()\n+        .filter_map(C::cast)\n+}"}]}