{"sha": "6ac89174b8b1f75ff867588e82a51e7134aaba31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzg5MTc0YjhiMWY3NWZmODY3NTg4ZTgyYTUxZTcxMzRhYWJhMzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-07T10:02:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "mk `fully_perform_op_and_get_region_constraint_data` a TypeOp method", "tree": {"sha": "e00f96864d94d19a6e5ca388b9784e849e410ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e00f96864d94d19a6e5ca388b9784e849e410ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac89174b8b1f75ff867588e82a51e7134aaba31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac89174b8b1f75ff867588e82a51e7134aaba31", "html_url": "https://github.com/rust-lang/rust/commit/6ac89174b8b1f75ff867588e82a51e7134aaba31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac89174b8b1f75ff867588e82a51e7134aaba31/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efc84c83f91e405830aea88ecab2a2495dd9e1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/efc84c83f91e405830aea88ecab2a2495dd9e1db", "html_url": "https://github.com/rust-lang/rust/commit/efc84c83f91e405830aea88ecab2a2495dd9e1db"}], "stats": {"total": 138, "additions": 82, "deletions": 56}, "files": [{"sha": "9c854e38cc5b8121fe4a3dec47ca7d0755e14b54", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=6ac89174b8b1f75ff867588e82a51e7134aaba31", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::Cause;\n-use borrow_check::nll::type_check::type_op::DropckOutlives;\n+use borrow_check::nll::type_check::type_op::{DropckOutlives, TypeOp};\n use borrow_check::nll::type_check::AtLocation;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n@@ -218,10 +218,15 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n \n         let param_env = cx.param_env;\n         let (dropped_kinds, region_constraint_data) =\n-            cx.fully_perform_op_and_get_region_constraint_data(DropckOutlives::new(\n+            DropckOutlives::new(\n                 param_env,\n                 dropped_ty,\n-            )).unwrap();\n+            ).fully_perform(\n+                cx.infcx,\n+                cx.region_bound_pairs,\n+                cx.implicit_region_bound,\n+                cx.param_env,\n+            ).unwrap();\n \n         DropData {\n             dropped_kinds,"}, {"sha": "e2f6ad0bde33ff430800dab95b372a9b9ffcc125", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 51, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=6ac89174b8b1f75ff867588e82a51e7134aaba31", "patch": "@@ -21,12 +21,12 @@ use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n use rustc::hir::def_id::DefId;\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n-use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, UnitResult};\n+use rustc::infer::{InferCtxt, LateBoundRegionConversionTime, UnitResult};\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n-use rustc::traits::{ObligationCause, TraitEngine};\n+use rustc::traits::ObligationCause;\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n@@ -733,18 +733,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         locations: Locations,\n         op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<R, TypeError<'tcx>> {\n-        match op.trivial_noop() {\n-            Ok(r) => Ok(r),\n-            Err(op) => {\n-                let (r, opt_data) = self.fully_perform_op_and_get_region_constraint_data(op)?;\n-\n-                if let Some(data) = opt_data {\n-                    self.push_region_constraints(locations, data);\n-                }\n+        let (r, opt_data) = op.fully_perform(\n+            self.infcx,\n+            self.region_bound_pairs,\n+            self.implicit_region_bound,\n+            self.param_env,\n+        )?;\n \n-                Ok(r)\n-            }\n+        if let Some(data) = opt_data {\n+            self.push_region_constraints(locations, data);\n         }\n+\n+        Ok(r)\n     }\n \n     fn push_region_constraints(\n@@ -769,45 +769,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Helper for `fully_perform_op`, but also used on its own\n-    /// sometimes to enable better caching: executes `op` fully (along\n-    /// with resulting obligations) and returns the full set of region\n-    /// obligations. If the same `op` were to be performed at some\n-    /// other location, then the same set of region obligations would\n-    /// be generated there, so this can be useful for caching.\n-    fn fully_perform_op_and_get_region_constraint_data<R>(\n-        &mut self,\n-        op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n-    ) -> Result<(R, Option<Rc<RegionConstraintData<'tcx>>>), TypeError<'tcx>> {\n-        if cfg!(debug_assertions) {\n-            info!(\"fully_perform_op_and_get_region_constraint_data({:?})\", op,);\n-        }\n-\n-        let infcx = self.infcx;\n-        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n-        let dummy_body_id = ObligationCause::dummy().body_id;\n-        let InferOk { value, obligations } = infcx.commit_if_ok(|_| op.perform(infcx))?;\n-        debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n-        fulfill_cx.register_predicate_obligations(infcx, obligations);\n-        if let Err(e) = fulfill_cx.select_all_or_error(infcx) {\n-            span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n-        }\n-\n-        infcx.process_registered_region_obligations(\n-            self.region_bound_pairs,\n-            self.implicit_region_bound,\n-            self.param_env,\n-            dummy_body_id,\n-        );\n-\n-        let data = infcx.take_and_reset_region_constraints();\n-        if data.is_empty() {\n-            Ok((value, None))\n-        } else {\n-            Ok((value, Some(Rc::new(data))))\n-        }\n-    }\n-\n     fn sub_types(\n         &mut self,\n         sub: Ty<'tcx>,"}, {"sha": "c3801b4fbac2f4c8dc5d1a74bcdd857c2364165c", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/mod.rs", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac89174b8b1f75ff867588e82a51e7134aaba31/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs?ref=6ac89174b8b1f75ff867588e82a51e7134aaba31", "patch": "@@ -9,12 +9,16 @@\n // except according to those terms.\n \n use rustc::infer::{InferCtxt, InferOk, InferResult};\n+use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n use rustc::traits::query::NoSolution;\n-use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation};\n+use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation, TraitEngine};\n+use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Kind;\n-use rustc::ty::{ParamEnv, Predicate, Ty};\n+use rustc::ty::{self, ParamEnv, Predicate, Ty};\n+use std::rc::Rc;\n use std::fmt;\n+use syntax::codemap::DUMMY_SP;\n \n pub(super) trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     type Output;\n@@ -23,9 +27,65 @@ pub(super) trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     /// produce the output, else returns `Err(self)` back.\n     fn trivial_noop(self) -> Result<Self::Output, Self>;\n \n+    /// Given an infcx, performs **the kernel** of the operation: this does the\n+    /// key action and then, optionally, returns a set of obligations which must be proven.\n+    ///\n+    /// This method is not meant to be invoked directly: instead, one\n+    /// should use `fully_perform`, which will take those resulting\n+    /// obligations and prove them, and then process the combined\n+    /// results into region obligations which are returned.\n     fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n+\n+    /// Processes the operation and all resulting obligations,\n+    /// returning the final result along with any region constraints\n+    /// (they will be given over to the NLL region solver).\n+    #[inline(never)]\n+    fn fully_perform(\n+        self,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+        region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n+        implicit_region_bound: Option<ty::Region<'tcx>>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> Result<(Self::Output, Option<Rc<RegionConstraintData<'tcx>>>), TypeError<'tcx>> {\n+        let op = match self.trivial_noop() {\n+            Ok(r) => return Ok((r, None)),\n+            Err(op) => op,\n+        };\n+\n+        if cfg!(debug_assertions) {\n+            info!(\"fully_perform_op_and_get_region_constraint_data({:?})\", op);\n+        }\n+\n+        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n+        let dummy_body_id = ObligationCause::dummy().body_id;\n+        let InferOk { value, obligations } = infcx.commit_if_ok(|_| op.perform(infcx))?;\n+        debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n+        fulfill_cx.register_predicate_obligations(infcx, obligations);\n+        if let Err(e) = fulfill_cx.select_all_or_error(infcx) {\n+            infcx.tcx.sess.diagnostic().delay_span_bug(\n+                DUMMY_SP,\n+                &format!(\"errors selecting obligation during MIR typeck: {:?}\", e)\n+            );\n+        }\n+\n+        infcx.process_registered_region_obligations(\n+            region_bound_pairs,\n+            implicit_region_bound,\n+            param_env,\n+            dummy_body_id,\n+        );\n+\n+        let data = infcx.take_and_reset_region_constraints();\n+        if data.is_empty() {\n+            Ok((value, None))\n+        } else {\n+            Ok((value, Some(Rc::new(data))))\n+        }\n+    }\n }\n \n+\n+\n pub(super) struct CustomTypeOp<F, G> {\n     closure: F,\n     description: G,"}]}