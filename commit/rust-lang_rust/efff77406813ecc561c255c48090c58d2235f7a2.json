{"sha": "efff77406813ecc561c255c48090c58d2235f7a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmY3NzQwNjgxM2VjYzU2MWMyNTVjNDgwOTBjNThkMjIzNWY3YTI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-06T09:56:16Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-06T09:56:16Z"}, "message": "Merge #940\n\n940: Show workspace loaded notification r=matklad a=vipentti\n\nThis fixes #935 \r\n\r\nThis adds support for more `InitializationOptions` which are provided by the client.\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "123896a906abdfb6de3c0e3f13e0c69e98e3cc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123896a906abdfb6de3c0e3f13e0c69e98e3cc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efff77406813ecc561c255c48090c58d2235f7a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efff77406813ecc561c255c48090c58d2235f7a2", "html_url": "https://github.com/rust-lang/rust/commit/efff77406813ecc561c255c48090c58d2235f7a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efff77406813ecc561c255c48090c58d2235f7a2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e", "html_url": "https://github.com/rust-lang/rust/commit/ab288a32f9a95e3ca5e9e42f9c6f59bb3849f26e"}, {"sha": "0dcb1cb569417a17e27a4d8b34813ded41395268", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcb1cb569417a17e27a4d8b34813ded41395268", "html_url": "https://github.com/rust-lang/rust/commit/0dcb1cb569417a17e27a4d8b34813ded41395268"}], "stats": {"total": 164, "additions": 110, "deletions": 54}, "files": [{"sha": "0b7a47a0b9ee00281c7cd160f8cef4aefb311f17", "filename": "crates/ra_lsp_server/src/init.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Finit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Finit.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -0,0 +1,39 @@\n+use serde::{Deserialize, Deserializer};\r\n+\r\n+/// Client provided initialization options\r\n+#[derive(Deserialize, Clone, Copy, Debug)]\r\n+#[serde(rename_all = \"camelCase\")]\r\n+pub struct InitializationOptions {\r\n+    /// Whether the client supports our custom highlighting publishing decorations.\r\n+    /// This is different to the highlightingOn setting, which is whether the user\r\n+    /// wants our custom highlighting to be used.\r\n+    ///\r\n+    /// Defaults to `true`\r\n+    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n+    pub publish_decorations: bool,\r\n+\r\n+    /// Whether or not the workspace loaded notification should be sent\r\n+    ///\r\n+    /// Defaults to `true`\r\n+    #[serde(default = \"bool_true\", deserialize_with = \"nullable_bool_true\")]\r\n+    pub show_workspace_loaded: bool,\r\n+}\r\n+\r\n+impl Default for InitializationOptions {\r\n+    fn default() -> InitializationOptions {\r\n+        InitializationOptions { publish_decorations: true, show_workspace_loaded: true }\r\n+    }\r\n+}\r\n+\r\n+fn bool_true() -> bool {\r\n+    true\r\n+}\r\n+\r\n+/// Deserializes a null value to a bool true by default\r\n+fn nullable_bool_true<'de, D>(deserializer: D) -> Result<bool, D::Error>\r\n+where\r\n+    D: Deserializer<'de>,\r\n+{\r\n+    let opt = Option::deserialize(deserializer)?;\r\n+    Ok(opt.unwrap_or(true))\r\n+}\r"}, {"sha": "59e16a47c5e655c8a736fde0e60f06115ee58d27", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -5,7 +5,8 @@ mod main_loop;\n mod markdown;\n mod project_model;\n pub mod req;\n+pub mod init;\n mod server_world;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n-pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError};\n+pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError, init::InitializationOptions};"}, {"sha": "5a29052071c36490115b2df3a240589a6c2f321a", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -2,7 +2,7 @@ use serde::Deserialize;\n use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n \n-use ra_lsp_server::Result;\n+use ra_lsp_server::{Result, InitializationOptions};\n \n fn main() -> Result<()> {\n     ::std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n@@ -24,26 +24,18 @@ fn main() -> Result<()> {\n     }\n }\n \n-#[derive(Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-struct InitializationOptions {\n-    // Whether the client supports our custom highlighting publishing decorations.\n-    // This is different to the highlightingOn setting, which is whether the user\n-    // wants our custom highlighting to be used.\n-    publish_decorations: Option<bool>,\n-}\n-\n fn main_inner() -> Result<()> {\n     let (receiver, sender, threads) = stdio_transport();\n     let cwd = ::std::env::current_dir()?;\n     run_server(ra_lsp_server::server_capabilities(), receiver, sender, |params, r, s| {\n         let root = params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n-        let supports_decorations = params\n+\n+        let opts = params\n             .initialization_options\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n-            .and_then(|it| it.publish_decorations)\n-            == Some(true);\n-        ra_lsp_server::main_loop(false, root, supports_decorations, r, s)\n+            .unwrap_or(InitializationOptions::default());\n+\n+        ra_lsp_server::main_loop(root, opts, r, s)\n     })?;\n     log::info!(\"shutting down IO...\");\n     threads.join()?;"}, {"sha": "d0c2a95ef70f9c2cfbd39b77a0874ca214362b0b", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -22,6 +22,7 @@ use crate::{\n     req,\n     server_world::{ServerWorld, ServerWorldState},\n     Result,\n+    InitializationOptions,\n };\n \n #[derive(Debug, Fail)]\n@@ -46,9 +47,8 @@ enum Task {\n const THREADPOOL_SIZE: usize = 8;\n \n pub fn main_loop(\n-    internal_mode: bool,\n     ws_root: PathBuf,\n-    supports_decorations: bool,\n+    options: InitializationOptions,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n@@ -63,11 +63,12 @@ pub fn main_loop(\n             Ok(ws) => vec![ws],\n             Err(e) => {\n                 log::error!(\"loading workspace failed: {}\", e);\n-                let msg = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n-                    typ: req::MessageType::Error,\n-                    message: format!(\"rust-analyzer failed to load workspace: {}\", e),\n-                });\n-                msg_sender.send(msg.into()).unwrap();\n+\n+                show_message(\n+                    req::MessageType::Error,\n+                    format!(\"rust-analyzer failed to load workspace: {}\", e),\n+                    msg_sender,\n+                );\n                 Vec::new()\n             }\n         }\n@@ -80,8 +81,7 @@ pub fn main_loop(\n     let mut pending_requests = FxHashSet::default();\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n-        internal_mode,\n-        supports_decorations,\n+        options,\n         &pool,\n         msg_sender,\n         msg_receiver,\n@@ -148,8 +148,7 @@ impl fmt::Debug for Event {\n }\n \n fn main_loop_inner(\n-    internal_mode: bool,\n-    supports_decorations: bool,\n+    options: InitializationOptions,\n     pool: &ThreadPool,\n     msg_sender: &Sender<RawMessage>,\n     msg_receiver: &Receiver<RawMessage>,\n@@ -163,6 +162,7 @@ fn main_loop_inner(\n     // time to always have a thread ready to react to input.\n     let mut in_flight_libraries = 0;\n     let mut pending_libraries = Vec::new();\n+    let mut send_workspace_notification = true;\n \n     let (libdata_sender, libdata_receiver) = unbounded();\n     loop {\n@@ -190,7 +190,6 @@ fn main_loop_inner(\n                 state_changed = true;\n             }\n             Event::Lib(lib) => {\n-                feedback(internal_mode, \"library loaded\", msg_sender);\n                 state.add_lib(lib);\n                 in_flight_libraries -= 1;\n             }\n@@ -244,15 +243,23 @@ fn main_loop_inner(\n             });\n         }\n \n-        if state.roots_to_scan == 0 && pending_libraries.is_empty() && in_flight_libraries == 0 {\n-            feedback(internal_mode, \"workspace loaded\", msg_sender);\n+        if send_workspace_notification\n+            && state.roots_to_scan == 0\n+            && pending_libraries.is_empty()\n+            && in_flight_libraries == 0\n+        {\n+            if options.show_workspace_loaded {\n+                show_message(req::MessageType::Info, \"workspace loaded\", msg_sender);\n+            }\n+            // Only send the notification first time\n+            send_workspace_notification = false;\n         }\n \n         if state_changed {\n             update_file_notifications_on_threadpool(\n                 pool,\n                 state.snapshot(),\n-                supports_decorations,\n+                options.publish_decorations,\n                 task_sender.clone(),\n                 subs.subscriptions(),\n             )\n@@ -501,11 +508,12 @@ fn update_file_notifications_on_threadpool(\n     });\n }\n \n-fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n-    if !intrnal_mode {\n-        return;\n-    }\n-    let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n+fn show_message<M: Into<String>>(typ: req::MessageType, msg: M, sender: &Sender<RawMessage>) {\n+    let not = RawNotification::new::<req::ShowMessage>(&req::ShowMessageParams {\n+        typ,\n+        message: msg.into(),\n+    });\n+\n     sender.send(not.into()).unwrap();\n }\n "}, {"sha": "e0571fd78bf6dce3874a36b96aa0e62b524c3d5c", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -172,10 +172,3 @@ pub struct SourceChange {\n     pub workspace_edit: WorkspaceEdit,\n     pub cursor_position: Option<TextDocumentPositionParams>,\n }\n-\n-pub enum InternalFeedback {}\n-\n-impl Notification for InternalFeedback {\n-    const METHOD: &'static str = \"internalFeedback\";\n-    type Params = String;\n-}"}, {"sha": "1c099a78f59fe4332404a48b23373de38481da02", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -31,7 +31,7 @@ version = \"0.0.0\"\n use std::collections::Spam;\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     eprintln!(\"loading took    {:?}\", project_start.elapsed());\n     let completion_start = Instant::now();\n     let res = server.send_request::<Completion>(CompletionParams {\n@@ -53,7 +53,7 @@ fn foo() {\n }\n \",\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams { text_document: server.doc_id(\"lib.rs\"), position: None },\n         json!([\n@@ -107,7 +107,7 @@ pub fn foo() {}\n fn test_eggs() {}\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams {\n             text_document: server.doc_id(\"tests/spam.rs\"),\n@@ -167,7 +167,7 @@ fn main() {\n pub use std::collections::HashMap;\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n \n     server.request::<Formatting>(\n         DocumentFormattingParams {\n@@ -216,7 +216,7 @@ mod bar;\n fn main() {}\n \"#,\n     );\n-    server.wait_for_feedback(\"workspace loaded\");\n+    server.wait_for_message(\"workspace loaded\");\n     let empty_context = || CodeActionContext { diagnostics: Vec::new(), only: None };\n     server.request::<CodeActionRequest>(\n         CodeActionParams {"}, {"sha": "8bfc8d62206cc657cfee37d6963630eddd9c404c", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -13,6 +13,7 @@ use lsp_types::{\n     notification::DidOpenTextDocument,\n     request::{Request, Shutdown},\n     DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url,\n+    notification::{Notification, ShowMessage},\n };\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n@@ -22,6 +23,7 @@ use test_utils::{parse_fixture, find_mismatch};\n \n use ra_lsp_server::{\n     main_loop, req,\n+    InitializationOptions,\n };\n \n pub fn project(fixture: &str) -> Server {\n@@ -56,7 +58,13 @@ impl Server {\n             \"test server\",\n             128,\n             move |mut msg_receiver, mut msg_sender| {\n-                main_loop(true, path, true, &mut msg_receiver, &mut msg_sender).unwrap()\n+                main_loop(\n+                    path,\n+                    InitializationOptions::default(),\n+                    &mut msg_receiver,\n+                    &mut msg_sender,\n+                )\n+                .unwrap()\n             },\n         );\n         let res = Server {\n@@ -133,13 +141,14 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_for_feedback(&self, feedback: &str) {\n-        self.wait_for_feedback_n(feedback, 1)\n+    pub fn wait_for_message(&self, message: &str) {\n+        self.wait_for_message_n(message, 1)\n     }\n-    pub fn wait_for_feedback_n(&self, feedback: &str, n: usize) {\n+    pub fn wait_for_message_n(&self, message: &str, n: usize) {\n         let f = |msg: &RawMessage| match msg {\n-            RawMessage::Notification(n) if n.method == \"internalFeedback\" => {\n-                return n.clone().cast::<req::InternalFeedback>().unwrap() == feedback;\n+            RawMessage::Notification(n) if n.method == ShowMessage::METHOD => {\n+                let msg = n.clone().cast::<req::ShowMessage>().unwrap();\n+                msg.message == message\n             }\n             _ => false,\n         };"}, {"sha": "47eaac878a69c6d6d9f4d85af669b0e0c72919c2", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -150,6 +150,11 @@\n                     \"default\": false,\n                     \"description\": \"Highlight Rust code (overrides built-in syntax highlighting)\"\n                 },\n+                \"rust-analyzer.showWorkspaceLoadedNotification\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Show notification when workspace was loaded\"\n+                },\n                 \"rust-analyzer.enableEnhancedTyping\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "afc5cc6aff68ab8f71deff5e9edf893b3891f49a", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -8,6 +8,7 @@ export class Config {\n     public highlightingOn = true;\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n+    public showWorkspaceLoadedNotification = true;\n \n     private prevEnhancedTyping: null | boolean = null;\n \n@@ -24,6 +25,12 @@ export class Config {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n         }\n \n+        if (config.has('showWorkspaceLoadedNotification')) {\n+            this.showWorkspaceLoadedNotification = config.get(\n+                'showWorkspaceLoadedNotification'\n+            ) as boolean;\n+        }\n+\n         if (!this.highlightingOn && Server) {\n             Server.highlighter.removeHighlights();\n         }"}, {"sha": "50461b0c6eabdd51a50c7edf18e7f1fcdb13cde0", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/efff77406813ecc561c255c48090c58d2235f7a2/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=efff77406813ecc561c255c48090c58d2235f7a2", "patch": "@@ -26,7 +26,9 @@ export class Server {\n         const clientOptions: lc.LanguageClientOptions = {\n             documentSelector: [{ scheme: 'file', language: 'rust' }],\n             initializationOptions: {\n-                publishDecorations: true\n+                publishDecorations: true,\n+                showWorkspaceLoaded:\n+                    Server.config.showWorkspaceLoadedNotification\n             },\n             traceOutputChannel\n         };"}]}