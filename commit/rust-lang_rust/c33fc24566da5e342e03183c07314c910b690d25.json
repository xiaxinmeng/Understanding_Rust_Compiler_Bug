{"sha": "c33fc24566da5e342e03183c07314c910b690d25", "node_id": "C_kwDOAAsO6NoAKGMzM2ZjMjQ1NjZkYTVlMzQyZTAzMTgzYzA3MzE0YzkxMGI2OTBkMjU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T12:37:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T12:37:29Z"}, "message": "rustup", "tree": {"sha": "2012e41fb3e59e127c58dcdc89d5786797252ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2012e41fb3e59e127c58dcdc89d5786797252ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c33fc24566da5e342e03183c07314c910b690d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c33fc24566da5e342e03183c07314c910b690d25", "html_url": "https://github.com/rust-lang/rust/commit/c33fc24566da5e342e03183c07314c910b690d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c33fc24566da5e342e03183c07314c910b690d25/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fdb720329d7674a878a8252fe4b79ef93d6ffec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fdb720329d7674a878a8252fe4b79ef93d6ffec", "html_url": "https://github.com/rust-lang/rust/commit/8fdb720329d7674a878a8252fe4b79ef93d6ffec"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "c710735735c7cf7247646fc06c100b04d29333a3", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c33fc24566da5e342e03183c07314c910b690d25/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c33fc24566da5e342e03183c07314c910b690d25/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c33fc24566da5e342e03183c07314c910b690d25", "patch": "@@ -1 +1 @@\n-41419e70366962c9a878bfe673ef4df38db6f7f1\n+35a061724802377a21fc6dac1ebcbb9b8d1f558a"}, {"sha": "c00344b6de23a200d721a64f6753fec8f713302a", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs?ref=c33fc24566da5e342e03183c07314c910b690d25", "patch": "@@ -1,11 +1,11 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n //@compile-flags: -Zmir-opt-level=0\n-//@error-pattern: memory access failed: null pointer is a dangling pointer\n \n #[allow(deref_nullptr)]\n fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated.\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+    //~^ERROR: memory access failed: null pointer is a dangling pointer\n }"}, {"sha": "17ac04a706fff2ffdf117cfb23bfffa718139175", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=c33fc24566da5e342e03183c07314c910b690d25", "patch": "@@ -1,19 +1,13 @@\n error: Undefined Behavior: memory access failed: null pointer is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+  --> $DIR/null_pointer_write_zst.rs:LL:CC\n    |\n-LL |         copy_nonoverlapping(&src as *const T, dst, 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n+LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::write::<[u8; 0]>` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut [u8; 0]>::write` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n-  --> $DIR/null_pointer_write_zst.rs:LL:CC\n-   |\n-LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "08bc096d6c366d1861931e4964768864936cd50c", "filename": "tests/fail/intrinsics/write_bytes_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs?ref=c33fc24566da5e342e03183c07314c910b690d25", "patch": "@@ -1,9 +1,9 @@\n-//@error-pattern: overflow computing total size of `write_bytes`\n use std::mem;\n \n fn main() {\n     let mut y = 0;\n     unsafe {\n         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+        //~^ ERROR: overflow computing total size of `write_bytes`\n     }\n }"}, {"sha": "47610b06230121c8cd37d1adf8add1095ede8eda", "filename": "tests/fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c33fc24566da5e342e03183c07314c910b690d25/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=c33fc24566da5e342e03183c07314c910b690d25", "patch": "@@ -1,19 +1,13 @@\n error: Undefined Behavior: overflow computing total size of `write_bytes`\n-  --> RUSTLIB/core/src/intrinsics.rs:LL:CC\n+  --> $DIR/write_bytes_overflow.rs:LL:CC\n    |\n-LL |         write_bytes(dst, val, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `write_bytes`\n+LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `write_bytes`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::intrinsics::write_bytes::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::write_bytes` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n-  --> $DIR/write_bytes_overflow.rs:LL:CC\n-   |\n-LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}]}