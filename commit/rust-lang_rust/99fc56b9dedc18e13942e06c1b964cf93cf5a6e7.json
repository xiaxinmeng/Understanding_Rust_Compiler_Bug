{"sha": "99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZmM1NmI5ZGVkYzE4ZTEzOTQyZTA2YzFiOTY0Y2Y5M2NmNWE2ZTc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T04:42:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T04:42:58Z"}, "message": "Rollup merge of #85937 - m-ou-se:macro-ref-suggestions, r=estebank\n\nFix bad suggestions for code from proc_macro\n\nFixes #85932\n\nThis disables these suggestions for spans from external macros, while keeping them for macros defined locally:\n\nBefore:\n```\n3 | #[hello]\n  | ^^^^^^^^\n  | |\n  | expected `&mut i32`, found integer\n  | help: consider mutably borrowing here: `&mut #[hello]`\n```\n\nAfter:\n```\n3 | #[hello]\n  | ^^^^^^^^ expected `&mut i32`, found integer\n```\n\nUnchanged:\n```\n26 | macro_rules! bla { () => { x(123); } }\n   |                              ^^^\n   |                              |\n   |                              expected `&mut i32`, found integer\n   |                              help: consider mutably borrowing here: `&mut 123`\n...\n29 |     bla!();\n   |     ------- in this macro invocation\n```", "tree": {"sha": "1e41df2aeebe6aa81605c35bba42b76f05451b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e41df2aeebe6aa81605c35bba42b76f05451b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgua9UCRBK7hj4Ov3rIwAAVqoIACQXtA3CEQ7maGORNp/SiqGp\nuS/uo9ZxTwD8OX+IJHwLP5HSnxQboYZSLqJuxarBNprLRb58cvPM2QuE3Kc4Z0B0\n0Xc49hD8DjZIbpvXUNRlAD6xYxoDGmWbnVV2vlrlS5HuRYXSTZcv9+UqLD6K/mKT\nD2YGmcD9sqdxGRU/IRY4G7ix8yOSzImadcBtNppxNTpy3zIaY9qEQFIJG3sfBazr\npwAWvV72c7jTjFXx2xSSx5FbPSuxnX37zOCDRbCby2HImPNgSJ7vDa7tXWettiUK\nSU7cBscSzMWPvyQruS8nLuqoC7HMfkSTdoYBDMrurCstG83v+Qme4zi1CmgndfQ=\n=UMYl\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e41df2aeebe6aa81605c35bba42b76f05451b02\nparent 5b0a49efa8d5ecc2838edfb93820e46dbff1a606\nparent e735f6086d4f131ccc6f0205e850860faaea3411\nauthor Yuki Okushi <jtitor@2k36.org> 1622781778 +0900\ncommitter GitHub <noreply@github.com> 1622781778 +0900\n\nRollup merge of #85937 - m-ou-se:macro-ref-suggestions, r=estebank\n\nFix bad suggestions for code from proc_macro\n\nFixes #85932\n\nThis disables these suggestions for spans from external macros, while keeping them for macros defined locally:\n\nBefore:\n```\n3 | #[hello]\n  | ^^^^^^^^\n  | |\n  | expected `&mut i32`, found integer\n  | help: consider mutably borrowing here: `&mut #[hello]`\n```\n\nAfter:\n```\n3 | #[hello]\n  | ^^^^^^^^ expected `&mut i32`, found integer\n```\n\nUnchanged:\n```\n26 | macro_rules! bla { () => { x(123); } }\n   |                              ^^^\n   |                              |\n   |                              expected `&mut i32`, found integer\n   |                              help: consider mutably borrowing here: `&mut 123`\n...\n29 |     bla!();\n   |     ------- in this macro invocation\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "html_url": "https://github.com/rust-lang/rust/commit/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0a49efa8d5ecc2838edfb93820e46dbff1a606", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0a49efa8d5ecc2838edfb93820e46dbff1a606", "html_url": "https://github.com/rust-lang/rust/commit/5b0a49efa8d5ecc2838edfb93820e46dbff1a606"}, {"sha": "e735f6086d4f131ccc6f0205e850860faaea3411", "url": "https://api.github.com/repos/rust-lang/rust/commits/e735f6086d4f131ccc6f0205e850860faaea3411", "html_url": "https://github.com/rust-lang/rust/commit/e735f6086d4f131ccc6f0205e850860faaea3411"}], "stats": {"total": 119, "additions": 99, "deletions": 20}, "files": [{"sha": "9cc435a0dec2ec01a45e2a32cd562e5b4d25d71a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n@@ -412,25 +413,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n-        let sm = self.sess().source_map();\n+        let sess = self.sess();\n         let sp = expr.span;\n-        if sm.is_imported(sp) {\n-            // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n-            // call span, but that breaks down when the type error comes from multiple calls down.\n+\n+        // If the span is from an external macro, there's no suggestion we can make.\n+        if in_external_macro(sess, sp) {\n             return None;\n         }\n \n+        let sm = sess.source_map();\n+\n         let replace_prefix = |s: &str, old: &str, new: &str| {\n             s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n         };\n \n         let is_struct_pat_shorthand_field =\n             self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n \n-        // If the span is from a macro, then it's hard to extract the text\n-        // and make a good suggestion, so don't bother.\n-        let is_macro = sp.from_expansion() && sp.desugaring_kind().is_none();\n-\n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();\n \n@@ -570,10 +569,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, ref expr),\n                 _,\n                 &ty::Ref(_, checked, _),\n-            ) if {\n-                self.infcx.can_sub(self.param_env, checked, &expected).is_ok() && !is_macro\n-            } =>\n-            {\n+            ) if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() => {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n@@ -589,13 +585,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     return None;\n                 }\n-                if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                    return Some((\n-                        sp,\n-                        \"consider removing the borrow\",\n-                        code,\n-                        Applicability::MachineApplicable,\n-                    ));\n+                if sp.contains(expr.span) {\n+                    if let Ok(code) = sm.span_to_snippet(expr.span) {\n+                        return Some((\n+                            sp,\n+                            \"consider removing the borrow\",\n+                            code,\n+                            Applicability::MachineApplicable,\n+                        ));\n+                    }\n                 }\n             }\n             (\n@@ -643,7 +641,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ if sp == expr.span && !is_macro => {\n+            _ if sp == expr.span => {\n                 if let Some(steps) = self.deref_steps(checked_ty, expected) {\n                     let expr = expr.peel_blocks();\n "}, {"sha": "d71747f9687ef2da7843146ba2592e4d29ea379c", "filename": "src/test/ui/suggestions/auxiliary/proc-macro-type-error.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs?ref=99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "patch": "@@ -0,0 +1,18 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{quote, TokenStream};\n+\n+#[proc_macro_attribute]\n+pub fn hello(_: TokenStream, _: TokenStream) -> TokenStream {\n+    quote!(\n+        fn f(_: &mut i32) {}\n+        fn g() {\n+            f(123);\n+        }\n+    )\n+}"}, {"sha": "6f780f32a147b69968f70529dcc9eb1e22a699bd", "filename": "src/test/ui/suggestions/suggest-ref-macro.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs?ref=99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "patch": "@@ -0,0 +1,29 @@\n+// run-check\n+// aux-build:proc-macro-type-error.rs\n+\n+extern crate proc_macro_type_error;\n+\n+use proc_macro_type_error::hello;\n+\n+#[hello] //~ERROR mismatched types\n+fn abc() {}\n+\n+fn x(_: &mut i32) {}\n+\n+macro_rules! bla {\n+    () => {\n+        x(123);\n+        //~^ ERROR mismatched types\n+        //~| SUGGESTION &mut 123\n+    };\n+    ($v:expr) => {\n+        x($v)\n+    }\n+}\n+\n+fn main() {\n+    bla!();\n+    bla!(456);\n+    //~^ ERROR mismatched types\n+    //~| SUGGESTION &mut 456\n+}"}, {"sha": "147001f0c948b93e3d64a511174968b10cbfbdbe", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fc56b9dedc18e13942e06c1b964cf93cf5a6e7/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=99fc56b9dedc18e13942e06c1b964cf93cf5a6e7", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL | #[hello]\n+   | ^^^^^^^^ expected `&mut i32`, found integer\n+   |\n+   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:15:11\n+   |\n+LL |         x(123);\n+   |           ^^^\n+   |           |\n+   |           expected `&mut i32`, found integer\n+   |           help: consider mutably borrowing here: `&mut 123`\n+...\n+LL |     bla!();\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `bla` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:26:10\n+   |\n+LL |     bla!(456);\n+   |          ^^^\n+   |          |\n+   |          expected `&mut i32`, found integer\n+   |          help: consider mutably borrowing here: `&mut 456`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}