{"sha": "925363f13d0027d12d5a92eae6e5950beb293950", "node_id": "C_kwDOAAsO6NoAKDkyNTM2M2YxM2QwMDI3ZDEyZDVhOTJlYWU2ZTU5NTBiZWIyOTM5NTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:13:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:24:27Z"}, "message": "Remove unused span argument from `walk_fn`.", "tree": {"sha": "71aea031a2db133b034571ec7d5d0810b8c9b569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71aea031a2db133b034571ec7d5d0810b8c9b569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925363f13d0027d12d5a92eae6e5950beb293950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925363f13d0027d12d5a92eae6e5950beb293950", "html_url": "https://github.com/rust-lang/rust/commit/925363f13d0027d12d5a92eae6e5950beb293950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925363f13d0027d12d5a92eae6e5950beb293950/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6568ef338efe046f23d3c9e2623ba0a392c85def", "url": "https://api.github.com/repos/rust-lang/rust/commits/6568ef338efe046f23d3c9e2623ba0a392c85def", "html_url": "https://github.com/rust-lang/rust/commit/6568ef338efe046f23d3c9e2623ba0a392c85def"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "a71e055a4b3e54100ca1dc7f6fa94778543beabf", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -156,8 +156,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'ast>, s: Span, _: NodeId) {\n-        walk_fn(self, fk, s)\n+    fn visit_fn(&mut self, fk: FnKind<'ast>, _: Span, _: NodeId) {\n+        walk_fn(self, fk)\n     }\n     fn visit_assoc_item(&mut self, i: &'ast AssocItem, ctxt: AssocCtxt) {\n         walk_assoc_item(self, i, ctxt)\n@@ -655,7 +655,7 @@ pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &\n     visitor.visit_fn_ret_ty(&function_declaration.output);\n }\n \n-pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Span) {\n+pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>) {\n     match kind {\n         FnKind::Fn(_, _, sig, _, generics, body) => {\n             visitor.visit_generics(generics);"}, {"sha": "ea6884836e301a0b9ca7994838bdcd7dc5d3a521", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -279,12 +279,12 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         fk: intravisit::FnKind<'hir>,\n         fd: &'hir FnDecl<'hir>,\n         b: BodyId,\n-        s: Span,\n+        _: Span,\n         id: HirId,\n     ) {\n         assert_eq!(self.owner, id.owner);\n         assert_eq!(self.parent_node, id.local_id);\n-        intravisit::walk_fn(self, fk, fd, b, s, id);\n+        intravisit::walk_fn(self, fk, fd, b, id);\n     }\n \n     fn visit_block(&mut self, block: &'hir Block<'hir>) {"}, {"sha": "b1d10e07ad0fbc63fa74586c66176aa8387c36f1", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -1527,7 +1527,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             matches!(fk.header(), Some(FnHeader { constness: Const::Yes(_), .. }))\n                 || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n \n-        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk, span));\n+        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk));\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {"}, {"sha": "925d0be433ce2005a12c4581056c11a3459b87c7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -699,7 +699,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n \n-        visit::walk_fn(self, fn_kind, span)\n+        visit::walk_fn(self, fn_kind)\n     }\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {"}, {"sha": "fa42f87786de913c477daf8ebcb1d764e6a4196f", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -63,9 +63,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_generics(self, g)\n     }\n-    fn visit_fn(&mut self, fk: visit::FnKind<'_>, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'_>, _: Span, _: NodeId) {\n         self.count += 1;\n-        walk_fn(self, fk, s)\n+        walk_fn(self, fk)\n     }\n     fn visit_assoc_item(&mut self, ti: &AssocItem, ctxt: AssocCtxt) {\n         self.count += 1;"}, {"sha": "b06075aad4b84fb537e46f46261853eb09950ad7", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -361,8 +361,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_fn_decl(&mut self, fd: &'v FnDecl<'v>) {\n         walk_fn_decl(self, fd)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, s: Span, id: HirId) {\n-        walk_fn(self, fk, fd, b, s, id)\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, _: Span, id: HirId) {\n+        walk_fn(self, fk, fd, b, id)\n     }\n     fn visit_use(&mut self, path: &'v Path<'v>, hir_id: HirId) {\n         walk_use(self, path, hir_id)\n@@ -898,7 +898,6 @@ pub fn walk_fn<'v, V: Visitor<'v>>(\n     function_kind: FnKind<'v>,\n     function_declaration: &'v FnDecl<'v>,\n     body_id: BodyId,\n-    _span: Span,\n     id: HirId,\n ) {\n     visitor.visit_id(id);"}, {"sha": "46afc36d996a6c0feec8a28263762953799dc317", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -147,7 +147,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, span: Span, id: ast::NodeId) {\n         run_early_pass!(self, check_fn, fk, span, id);\n         self.check_id(id);\n-        ast_visit::walk_fn(self, fk, span);\n+        ast_visit::walk_fn(self, fk);\n \n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node"}, {"sha": "0a002ac429885ae0cd042c92c6e244a6938eccbe", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -187,7 +187,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         let old_cached_typeck_results = self.context.cached_typeck_results.take();\n         let body = self.context.tcx.hir().body(body_id);\n         lint_callback!(self, check_fn, fk, decl, body, span, id);\n-        hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n+        hir_visit::walk_fn(self, fk, decl, body_id, id);\n         self.context.enclosing_body = old_enclosing_body;\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }"}, {"sha": "0be2fc05344679875b189d312f086c7fe282b4ad", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -362,11 +362,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         fk: hir_visit::FnKind<'v>,\n         fd: &'v hir::FnDecl<'v>,\n         b: hir::BodyId,\n-        s: Span,\n+        _: Span,\n         id: hir::HirId,\n     ) {\n         self.record(\"FnDecl\", Id::None, fd);\n-        hir_visit::walk_fn(self, fk, fd, b, s, id)\n+        hir_visit::walk_fn(self, fk, fd, b, id)\n     }\n \n     fn visit_use(&mut self, p: &'v hir::Path<'v>, hir_id: hir::HirId) {\n@@ -612,9 +612,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_where_predicate(self, p)\n     }\n \n-    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, _: Span, _: NodeId) {\n         self.record(\"FnDecl\", Id::None, fk.decl());\n-        ast_visit::walk_fn(self, fk, s)\n+        ast_visit::walk_fn(self, fk)\n     }\n \n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {"}, {"sha": "3f88f44ff21a331a1b3233001ac4e21d91021997", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n             }\n         }\n \n-        visit::walk_fn(self, fn_kind, span);\n+        visit::walk_fn(self, fn_kind);\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {"}, {"sha": "751ca24d5f5985844efbe79884d349d808fc5eaf", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -425,7 +425,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: HirId) {\n         if self.has_unsafe {\n             return;\n         }\n@@ -438,7 +438,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n             }\n         }\n \n-        walk_fn(self, kind, decl, body_id, span, id);\n+        walk_fn(self, kind, decl, body_id, id);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "bf487c7ca20c89b833004962495f853e0c15ab4f", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "3ef2655807974fa794ed45e77b94a5c582b1aea7", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925363f13d0027d12d5a92eae6e5950beb293950/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=925363f13d0027d12d5a92eae6e5950beb293950", "patch": "@@ -326,6 +326,6 @@ impl<'tcx> LateLintPass<'tcx> for Unwrap {\n             unwrappables: Vec::new(),\n         };\n \n-        walk_fn(&mut v, kind, decl, body.id(), span, fn_id);\n+        walk_fn(&mut v, kind, decl, body.id(), fn_id);\n     }\n }"}]}