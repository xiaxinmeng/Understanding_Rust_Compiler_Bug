{"sha": "e89da32bb7cf7388946964e1e34df722527d0838", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWRhMzJiYjdjZjczODg5NDY5NjRlMWUzNGRmNzIyNTI3ZDA4Mzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T09:48:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T10:33:16Z"}, "message": "move tests to separate file", "tree": {"sha": "38a83dd5404067d145dd37f057ac725846363de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a83dd5404067d145dd37f057ac725846363de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89da32bb7cf7388946964e1e34df722527d0838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89da32bb7cf7388946964e1e34df722527d0838", "html_url": "https://github.com/rust-lang/rust/commit/e89da32bb7cf7388946964e1e34df722527d0838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89da32bb7cf7388946964e1e34df722527d0838/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a16d3fb0b2165e19098f3298916f78a14535388", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a16d3fb0b2165e19098f3298916f78a14535388", "html_url": "https://github.com/rust-lang/rust/commit/6a16d3fb0b2165e19098f3298916f78a14535388"}], "stats": {"total": 192, "additions": 95, "deletions": 97}, "files": [{"sha": "5e4bb76690609d35940ae5d7056dd8767eac5fac", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 1, "deletions": 97, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e89da32bb7cf7388946964e1e34df722527d0838/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89da32bb7cf7388946964e1e34df722527d0838/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=e89da32bb7cf7388946964e1e34df722527d0838", "patch": "@@ -312,7 +312,6 @@ where\n         let mut segments = import.path.segments.iter().enumerate();\n \n         let mut curr = match import.path.kind {\n-            // TODO: handle extern crates\n             PathKind::Plain => {\n                 let root_id = module_id.crate_root(&self.module_tree);\n                 let file_id = root_id.source(&self.module_tree).file_id();\n@@ -389,99 +388,4 @@ where\n }\n \n #[cfg(test)]\n-mod tests {\n-    use std::sync::Arc;\n-\n-    use salsa::Database;\n-    use ra_db::FilesDatabase;\n-    use ra_syntax::SmolStr;\n-\n-    use crate::{\n-        self as hir,\n-        db::HirDatabase,\n-        mock::MockDatabase,\n-};\n-\n-    fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n-        let (db, pos) = MockDatabase::with_position(fixture);\n-        let source_root = db.file_source_root(pos.file_id);\n-        let module = hir::source_binder::module_from_position(&db, pos)\n-            .unwrap()\n-            .unwrap();\n-        let module_id = module.module_id;\n-        (db.item_map(source_root).unwrap(), module_id)\n-    }\n-\n-    #[test]\n-    fn test_item_map() {\n-        let (item_map, module_id) = item_map(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-\n-            use crate::foo::bar::Baz;\n-            <|>\n-\n-            //- /foo/mod.rs\n-            pub mod bar;\n-\n-            //- /foo/bar.rs\n-            pub struct Baz;\n-        \",\n-        );\n-        let name = SmolStr::from(\"Baz\");\n-        let resolution = &item_map.per_module[&module_id].items[&name];\n-        assert!(resolution.def_id.is_some());\n-    }\n-\n-    #[test]\n-    fn typing_inside_a_function_should_not_invalidate_item_map() {\n-        let (mut db, pos) = MockDatabase::with_position(\n-            \"\n-            //- /lib.rs\n-            mod foo;<|>\n-\n-            use crate::foo::bar::Baz;\n-\n-            fn foo() -> i32 {\n-                1 + 1\n-            }\n-            //- /foo/mod.rs\n-            pub mod bar;\n-\n-            //- /foo/bar.rs\n-            pub struct Baz;\n-        \",\n-        );\n-        let source_root = db.file_source_root(pos.file_id);\n-        {\n-            let events = db.log_executed(|| {\n-                db.item_map(source_root).unwrap();\n-            });\n-            assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n-        }\n-\n-        let new_text = \"\n-            mod foo;\n-\n-            use crate::foo::bar::Baz;\n-\n-            fn foo() -> i32 { 92 }\n-        \"\n-        .to_string();\n-\n-        db.query_mut(ra_db::FileTextQuery)\n-            .set(pos.file_id, Arc::new(new_text));\n-\n-        {\n-            let events = db.log_executed(|| {\n-                db.item_map(source_root).unwrap();\n-            });\n-            assert!(\n-                !format!(\"{:?}\", events).contains(\"_item_map\"),\n-                \"{:#?}\",\n-                events\n-            )\n-        }\n-    }\n-}\n+mod tests;"}, {"sha": "060683e2761724ba7c72f1727785badf0d21357e", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e89da32bb7cf7388946964e1e34df722527d0838/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89da32bb7cf7388946964e1e34df722527d0838/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=e89da32bb7cf7388946964e1e34df722527d0838", "patch": "@@ -0,0 +1,94 @@\n+use std::sync::Arc;\n+\n+use salsa::Database;\n+use ra_db::FilesDatabase;\n+use ra_syntax::SmolStr;\n+\n+use crate::{\n+    self as hir,\n+    db::HirDatabase,\n+    mock::MockDatabase,\n+};\n+\n+fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n+    let (db, pos) = MockDatabase::with_position(fixture);\n+    let source_root = db.file_source_root(pos.file_id);\n+    let module = hir::source_binder::module_from_position(&db, pos)\n+        .unwrap()\n+        .unwrap();\n+    let module_id = module.module_id;\n+    (db.item_map(source_root).unwrap(), module_id)\n+}\n+\n+#[test]\n+fn test_item_map() {\n+    let (item_map, module_id) = item_map(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+\n+        use crate::foo::bar::Baz;\n+        <|>\n+\n+        //- /foo/mod.rs\n+        pub mod bar;\n+\n+        //- /foo/bar.rs\n+        pub struct Baz;\n+    \",\n+    );\n+    let name = SmolStr::from(\"Baz\");\n+    let resolution = &item_map.per_module[&module_id].items[&name];\n+    assert!(resolution.def_id.is_some());\n+}\n+\n+#[test]\n+fn typing_inside_a_function_should_not_invalidate_item_map() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;<|>\n+\n+        use crate::foo::bar::Baz;\n+\n+        fn foo() -> i32 {\n+            1 + 1\n+        }\n+        //- /foo/mod.rs\n+        pub mod bar;\n+\n+        //- /foo/bar.rs\n+        pub struct Baz;\n+    \",\n+    );\n+    let source_root = db.file_source_root(pos.file_id);\n+    {\n+        let events = db.log_executed(|| {\n+            db.item_map(source_root).unwrap();\n+        });\n+        assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n+    }\n+\n+    let new_text = \"\n+        mod foo;\n+\n+        use crate::foo::bar::Baz;\n+\n+        fn foo() -> i32 { 92 }\n+    \"\n+    .to_string();\n+\n+    db.query_mut(ra_db::FileTextQuery)\n+        .set(pos.file_id, Arc::new(new_text));\n+\n+    {\n+        let events = db.log_executed(|| {\n+            db.item_map(source_root).unwrap();\n+        });\n+        assert!(\n+            !format!(\"{:?}\", events).contains(\"_item_map\"),\n+            \"{:#?}\",\n+            events\n+        )\n+    }\n+}"}]}