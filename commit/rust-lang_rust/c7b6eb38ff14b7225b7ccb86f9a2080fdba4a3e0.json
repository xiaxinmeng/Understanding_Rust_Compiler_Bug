{"sha": "c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YjZlYjM4ZmYxNGI3MjI1YjdjY2I4NmY5YTIwODBmZGJhNGEzZTA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-06T17:05:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcore: use unboxed closures in `float_to_str_bytes_common`", "tree": {"sha": "6f0c2fae42a92e9c4964bd919b6beb1e698c4b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0c2fae42a92e9c4964bd919b6beb1e698c4b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "html_url": "https://github.com/rust-lang/rust/commit/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0/comments", "author": null, "committer": null, "parents": [{"sha": "5579692ce77df5f8227ab7a226145f7cf18ef747", "url": "https://api.github.com/repos/rust-lang/rust/commits/5579692ce77df5f8227ab7a226145f7cf18ef747", "html_url": "https://github.com/rust-lang/rust/commit/5579692ce77df5f8227ab7a226145f7cf18ef747"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "fb4d91e912a3b65c75706dd0d394f1d34d064c58", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=c7b6eb38ff14b7225b7ccb86f9a2080fdba4a3e0", "patch": "@@ -20,6 +20,7 @@ use fmt;\n use iter::{range, DoubleEndedIteratorExt};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num::cast;\n+use ops::FnOnce;\n use result::Result::Ok;\n use slice::{mod, SlicePrelude};\n use str::StrPrelude;\n@@ -84,16 +85,18 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n ///   between digit and exponent sign `'e'`.\n /// - Panics if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n ///   between digit and exponent sign `'p'`.\n-pub fn float_to_str_bytes_common<T: Float, U>(\n+pub fn float_to_str_bytes_common<T: Float, U, F>(\n     num: T,\n     radix: uint,\n     negative_zero: bool,\n     sign: SignFormat,\n     digits: SignificantDigits,\n     exp_format: ExponentFormat,\n     exp_upper: bool,\n-    f: |&[u8]| -> U\n-) -> U {\n+    f: F\n+) -> U where\n+    F: FnOnce(&[u8]) -> U,\n+{\n     assert!(2 <= radix && radix <= 36);\n     match exp_format {\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'"}]}