{"sha": "c1a31d4261afda9839020f772fd6a97a12d9c941", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTMxZDQyNjFhZmRhOTgzOTAyMGY3NzJmZDZhOTdhMTJkOWM5NDE=", "commit": {"author": {"name": "Andrew Gallant", "email": "jamslam@gmail.com", "date": "2020-04-25T03:30:49Z"}, "committer": {"name": "Andrew Gallant", "email": "jamslam@gmail.com", "date": "2020-04-25T13:28:34Z"}, "message": "main: eagerly prime goto-definition caches\n\nThis commit makes RA more aggressive about eagerly priming the caches.\nIn particular, this fixes an issue where even after RA was done priming\nits caches, an initial goto-definition request would have very high\nlatency. This fixes that issue by requesting syntax highlighting for\neverything. It is presumed that this is a tad wasteful, but not overly\nso.\n\nThis commit also tweaks the logic that determines when the cache is\nprimed. Namely, instead of just priming it when the state is loaded\ninitially, we attempt to prime it whenever some state changes. This\nfixes an issue where if a modification notification is seen before cache\npriming is done, it would stop the cache priming early.", "tree": {"sha": "63a25a71915e58b5996fed3b9f4062ac2b317a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a25a71915e58b5996fed3b9f4062ac2b317a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a31d4261afda9839020f772fd6a97a12d9c941", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFGBAABCAAwFiEELYER4UEVHAcu6audsuOkkj+LDUQFAl6kPAMSHGphbXNsYW1A\nZ21haWwuY29tAAoJELLjpJI/iw1EusYH/1xOZlbFgZLZKmFy4mmDPUmCI9Ik27YL\nJLT46HsSWKRiBtYqn0gK+r+ftL51cgt7Cfri4dNaRf32T698Gla6fAiEmDn8ti01\niSyc8reAn/goTw5tEKYLgnl//N8a4DSe711JQj+fu3S8xVTbpFwYfya8xHJbPO2r\nYFe/+l8Kc31Tk7m5jm3io+cuCjbRL+Cr2k1W/hycVFFSasOUa+pnRU7bmmgU6mMt\n3oapQn79TZB55Za4Ay9KZckDfyOcLQcK2obzeY8D9mUA5Av6gsOkTMLiB0WxH1j/\n7UmsP6Z1FiuhEJ7R5g9qvIjk/1Z7JLydKzAwkMeCcuQ6g/hiNiizw1w=\n=8xt9\n-----END PGP SIGNATURE-----", "payload": "tree 63a25a71915e58b5996fed3b9f4062ac2b317a00\nparent 27a7718880d93f55f905da606d108d3b3c682ab4\nauthor Andrew Gallant <jamslam@gmail.com> 1587785449 -0400\ncommitter Andrew Gallant <jamslam@gmail.com> 1587821314 -0400\n\nmain: eagerly prime goto-definition caches\n\nThis commit makes RA more aggressive about eagerly priming the caches.\nIn particular, this fixes an issue where even after RA was done priming\nits caches, an initial goto-definition request would have very high\nlatency. This fixes that issue by requesting syntax highlighting for\neverything. It is presumed that this is a tad wasteful, but not overly\nso.\n\nThis commit also tweaks the logic that determines when the cache is\nprimed. Namely, instead of just priming it when the state is loaded\ninitially, we attempt to prime it whenever some state changes. This\nfixes an issue where if a modification notification is seen before cache\npriming is done, it would stop the cache priming early.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a31d4261afda9839020f772fd6a97a12d9c941", "html_url": "https://github.com/rust-lang/rust/commit/c1a31d4261afda9839020f772fd6a97a12d9c941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a31d4261afda9839020f772fd6a97a12d9c941/comments", "author": {"login": "BurntSushi", "id": 456674, "node_id": "MDQ6VXNlcjQ1NjY3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/456674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BurntSushi", "html_url": "https://github.com/BurntSushi", "followers_url": "https://api.github.com/users/BurntSushi/followers", "following_url": "https://api.github.com/users/BurntSushi/following{/other_user}", "gists_url": "https://api.github.com/users/BurntSushi/gists{/gist_id}", "starred_url": "https://api.github.com/users/BurntSushi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BurntSushi/subscriptions", "organizations_url": "https://api.github.com/users/BurntSushi/orgs", "repos_url": "https://api.github.com/users/BurntSushi/repos", "events_url": "https://api.github.com/users/BurntSushi/events{/privacy}", "received_events_url": "https://api.github.com/users/BurntSushi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BurntSushi", "id": 456674, "node_id": "MDQ6VXNlcjQ1NjY3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/456674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BurntSushi", "html_url": "https://github.com/BurntSushi", "followers_url": "https://api.github.com/users/BurntSushi/followers", "following_url": "https://api.github.com/users/BurntSushi/following{/other_user}", "gists_url": "https://api.github.com/users/BurntSushi/gists{/gist_id}", "starred_url": "https://api.github.com/users/BurntSushi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BurntSushi/subscriptions", "organizations_url": "https://api.github.com/users/BurntSushi/orgs", "repos_url": "https://api.github.com/users/BurntSushi/repos", "events_url": "https://api.github.com/users/BurntSushi/events{/privacy}", "received_events_url": "https://api.github.com/users/BurntSushi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a7718880d93f55f905da606d108d3b3c682ab4", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a7718880d93f55f905da606d108d3b3c682ab4", "html_url": "https://github.com/rust-lang/rust/commit/27a7718880d93f55f905da606d108d3b3c682ab4"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "90bf7d25f20c7b17f65bc4637c4b0d4605f2bfb4", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1a31d4261afda9839020f772fd6a97a12d9c941/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a31d4261afda9839020f772fd6a97a12d9c941/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=c1a31d4261afda9839020f772fd6a97a12d9c941", "patch": "@@ -3,13 +3,10 @@\n //! request takes longer to compute. This modules implemented prepopulating of\n //! various caches, it's not really advanced at the moment.\n \n-use hir::Semantics;\n-\n use crate::{FileId, RootDatabase};\n \n pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n-    let sema = Semantics::new(db);\n     for file in files {\n-        let _ = sema.to_module_def(file);\n+        let _ = crate::syntax_highlighting::highlight(db, file, None);\n     }\n }"}, {"sha": "c03d3db7593cd3017bb657674914386c50f0a2d9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1a31d4261afda9839020f772fd6a97a12d9c941/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a31d4261afda9839020f772fd6a97a12d9c941/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c1a31d4261afda9839020f772fd6a97a12d9c941", "patch": "@@ -417,28 +417,29 @@ fn loop_turn(\n         && loop_state.pending_libraries.is_empty()\n         && loop_state.in_flight_libraries == 0\n     {\n+        state_changed = true;\n         loop_state.workspace_loaded = true;\n         if let Some(flycheck) = &world_state.flycheck {\n             flycheck.update();\n         }\n-        pool.execute({\n-            let subs = loop_state.subscriptions.subscriptions();\n-            let snap = world_state.snapshot();\n-            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n-        });\n     }\n \n     if show_progress {\n         send_startup_progress(&connection.sender, loop_state);\n     }\n \n-    if state_changed {\n+    if state_changed && loop_state.workspace_loaded {\n         update_file_notifications_on_threadpool(\n             pool,\n             world_state.snapshot(),\n             task_sender.clone(),\n             loop_state.subscriptions.subscriptions(),\n-        )\n+        );\n+        pool.execute({\n+            let subs = loop_state.subscriptions.subscriptions();\n+            let snap = world_state.snapshot();\n+            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n+        });\n     }\n \n     let loop_duration = loop_start.elapsed();"}]}