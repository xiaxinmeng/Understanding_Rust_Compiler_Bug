{"sha": "da700cba08a2b194d19e63d3c51ebadce96fe46b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNzAwY2JhMDhhMmIxOTRkMTllNjNkM2M1MWViYWRjZTk2ZmU0NmI=", "commit": {"author": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-30T18:59:56Z"}, "committer": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-09-15T06:23:05Z"}, "message": "Stabilize move_ref_pattern", "tree": {"sha": "d82a84c2a57ae3fd83b3dad017c5bad572cd3e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82a84c2a57ae3fd83b3dad017c5bad572cd3e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da700cba08a2b194d19e63d3c51ebadce96fe46b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da700cba08a2b194d19e63d3c51ebadce96fe46b", "html_url": "https://github.com/rust-lang/rust/commit/da700cba08a2b194d19e63d3c51ebadce96fe46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da700cba08a2b194d19e63d3c51ebadce96fe46b/comments", "author": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715e9340a1006e37aed381e320ddf30311c2c2a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/715e9340a1006e37aed381e320ddf30311c2c2a6", "html_url": "https://github.com/rust-lang/rust/commit/715e9340a1006e37aed381e320ddf30311c2c2a6"}], "stats": {"total": 763, "additions": 271, "deletions": 492}, "files": [{"sha": "ce002ac3cdf6417ddc93990a45d8216159062e2f", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -270,6 +270,9 @@ declare_features! (\n     (accepted, track_caller, \"1.46.0\", Some(47809), None),\n     /// Allows `#[doc(alias = \"...\")]`.\n     (accepted, doc_alias, \"1.48.0\", Some(50146), None),\n+    /// Allows patterns with concurrent by-move and by-ref bindings.\n+    /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n+    (accepted, move_ref_pattern, \"1.48.0\", Some(68354), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "ed5560bb6d706b34b876326a818de91606d8aab2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -527,10 +527,6 @@ declare_features! (\n     /// For example, you can write `x @ Some(y)`.\n     (active, bindings_after_at, \"1.41.0\", Some(65490), None),\n \n-    /// Allows patterns with concurrent by-move and by-ref bindings.\n-    /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n-    (active, move_ref_pattern, \"1.42.0\", Some(68354), None),\n-\n     /// Allows `impl const Trait for T` syntax.\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n "}, {"sha": "1a7b8474411b8532737ea4e4d8b3bcfa5ab50814", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 66, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -71,13 +71,13 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n             hir::LocalSource::AwaitDesugar => (\"`await` future binding\", None),\n         };\n         self.check_irrefutable(&loc.pat, msg, sp);\n-        self.check_patterns(false, &loc.pat);\n+        self.check_patterns(&loc.pat);\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         intravisit::walk_param(self, param);\n         self.check_irrefutable(&param.pat, \"function argument\", None);\n-        self.check_patterns(false, &param.pat);\n+        self.check_patterns(&param.pat);\n     }\n }\n \n@@ -119,10 +119,7 @@ impl PatCtxt<'_, '_> {\n }\n \n impl<'tcx> MatchVisitor<'_, 'tcx> {\n-    fn check_patterns(&mut self, has_guard: bool, pat: &Pat<'_>) {\n-        if !self.tcx.features().move_ref_pattern {\n-            check_legality_of_move_bindings(self, has_guard, pat);\n-        }\n+    fn check_patterns(&mut self, pat: &Pat<'_>) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n         if !self.tcx.features().bindings_after_at {\n             check_legality_of_bindings_in_at_patterns(self, pat);\n@@ -165,7 +162,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     ) {\n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n-            self.check_patterns(arm.guard.is_some(), &arm.pat);\n+            self.check_patterns(&arm.pat);\n         }\n \n         let mut cx = self.new_cx(scrut.hir_id);\n@@ -601,65 +598,6 @@ fn is_binding_by_move(cx: &MatchVisitor<'_, '_>, hir_id: HirId, span: Span) -> b\n     !cx.typeck_results.node_type(hir_id).is_copy_modulo_regions(cx.tcx.at(span), cx.param_env)\n }\n \n-/// Check the legality of legality of by-move bindings.\n-fn check_legality_of_move_bindings(cx: &mut MatchVisitor<'_, '_>, has_guard: bool, pat: &Pat<'_>) {\n-    let sess = cx.tcx.sess;\n-    let typeck_results = cx.typeck_results;\n-\n-    // Find all by-ref spans.\n-    let mut by_ref_spans = Vec::new();\n-    pat.each_binding(|_, hir_id, span, _| {\n-        if let Some(ty::BindByReference(_)) =\n-            typeck_results.extract_binding_mode(sess, hir_id, span)\n-        {\n-            by_ref_spans.push(span);\n-        }\n-    });\n-\n-    // Find bad by-move spans:\n-    let by_move_spans = &mut Vec::new();\n-    let mut check_move = |p: &Pat<'_>, sub: Option<&Pat<'_>>| {\n-        // Check legality of moving out of the enum.\n-        //\n-        // `x @ Foo(..)` is legal, but `x @ Foo(y)` isn't.\n-        if sub.map_or(false, |p| p.contains_bindings()) {\n-            struct_span_err!(sess, p.span, E0007, \"cannot bind by-move with sub-bindings\")\n-                .span_label(p.span, \"binds an already bound by-move value by moving it\")\n-                .emit();\n-        } else if !has_guard && !by_ref_spans.is_empty() {\n-            by_move_spans.push(p.span);\n-        }\n-    };\n-    pat.walk_always(|p| {\n-        if let hir::PatKind::Binding(.., sub) = &p.kind {\n-            if let Some(ty::BindByValue(_)) =\n-                typeck_results.extract_binding_mode(sess, p.hir_id, p.span)\n-            {\n-                if is_binding_by_move(cx, p.hir_id, p.span) {\n-                    check_move(p, sub.as_deref());\n-                }\n-            }\n-        }\n-    });\n-\n-    // Found some bad by-move spans, error!\n-    if !by_move_spans.is_empty() {\n-        let mut err = feature_err(\n-            &sess.parse_sess,\n-            sym::move_ref_pattern,\n-            by_move_spans.clone(),\n-            \"binding by-move and by-ref in the same pattern is unstable\",\n-        );\n-        for span in by_ref_spans.iter() {\n-            err.span_label(*span, \"by-ref pattern here\");\n-        }\n-        for span in by_move_spans.iter() {\n-            err.span_label(*span, \"by-move pattern here\");\n-        }\n-        err.emit();\n-    }\n-}\n-\n /// Check that there are no borrow or move conflicts in `binding @ subpat` patterns.\n ///\n /// For example, this would reject:"}, {"sha": "97f96ab69295fc06222ba745e1bb96eba4919bfe", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -3,8 +3,6 @@\n #![feature(or_patterns)]\n #![feature(box_patterns)]\n \n-#![feature(move_ref_pattern)]\n-\n enum Test {\n     Foo,\n     Bar,"}, {"sha": "96e313b39ed1ebc6e50863a2b92001d498a29e8d", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:40:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:38:9\n    |\n LL |         ref foo @ [.., ref mut bar] => (),\n    |         -------^^^^^^^^-----------^\n@@ -8,7 +8,7 @@ LL |         ref foo @ [.., ref mut bar] => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:124:9\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:122:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n    |         -------^^^^^^^^^^^^---------^\n@@ -17,7 +17,7 @@ LL |         ref foo @ Some(box ref mut s) => (),\n    |         immutable borrow, by `foo`, occurs here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:22:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:20:5\n    |\n LL | fn bindings_after_at_slice_patterns_move_binding(x: [String; 4]) {\n    |                                                  - move occurs because `x` has type `[String; 4]`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:32:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:30:5\n    |\n LL |         ref mut foo @ [.., _] => Some(foo),\n    |         --------------------- mutable borrow occurs here\n@@ -41,7 +41,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:54:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:52:5\n    |\n LL |         [ref foo @ .., ref bar] => Some(foo),\n    |          ------------ immutable borrow occurs here\n@@ -53,7 +53,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:66:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:64:5\n    |\n LL |         ref foo @ [.., ref bar] => Some(foo),\n    |         ----------------------- immutable borrow occurs here\n@@ -65,7 +65,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:80:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:78:5\n    |\n LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:90:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:88:5\n    |\n LL |         ref foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ------------------------------------- immutable borrow occurs here\n@@ -92,7 +92,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:102:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:100:5\n    |\n LL |         ref mut foo @ Some(Test::Foo | Test::Bar) => Some(foo),\n    |         ----------------------------------------- mutable borrow occurs here\n@@ -104,7 +104,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:116:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:114:5\n    |\n LL |         ref foo @ Some(box ref s) => Some(foo),\n    |         ------------------------- immutable borrow occurs here\n@@ -116,7 +116,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:138:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:136:5\n    |\n LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4]) {\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n@@ -131,7 +131,7 @@ LL |     &x;\n    |     ^^ value borrowed here after move\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:148:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:146:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(a),\n    |         ------------------------------------------------- immutable borrow occurs here\n@@ -143,7 +143,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:160:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:158:5\n    |\n LL |         ref a @ [ref b @ .., Some(Test::Foo | Test::Bar)] => Some(b),\n    |                  ---------- immutable borrow occurs here\n@@ -155,7 +155,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:174:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:172:5\n    |\n LL |         [_, ref a @ Some(box ref b), ..] => Some(a),\n    |             ----------------------- immutable borrow occurs here\n@@ -167,7 +167,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:190:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:188:5\n    |\n LL |         [_, ref a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ------------------------------------------- immutable borrow occurs here\n@@ -179,7 +179,7 @@ LL |     drop(r);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:204:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:202:5\n    |\n LL |         [_, ref mut a @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |             ----------------------------------------------- mutable borrow occurs here\n@@ -191,7 +191,7 @@ LL |     drop(r);\n    |          - mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:218:5\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:216:5\n    |\n LL |         ref a @ [_, ref b @ Some(box Test::Foo | box Test::Bar), ..] => Some(a),\n    |         ------------------------------------------------------------ immutable borrow occurs here"}, {"sha": "b027faa9d7c3a2ba3f8f684252af589f9cd6bcb3", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -7,8 +7,6 @@\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(move_ref_pattern)]\n-\n #![allow(unused)]\n \n use std::{"}, {"sha": "ada61bf0df04cb7e08f563802a4ec2449440da68", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -2,7 +2,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n-#![feature(move_ref_pattern)]\n #![feature(bindings_after_at)]\n \n #![allow(unused_assignments)]"}, {"sha": "022ac5fc113ddbf6a631ed1529ea1b4543a53924", "filename": "src/test/ui/error-codes/E0007.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.rs?ref=715e9340a1006e37aed381e320ddf30311c2c2a6", "patch": "@@ -1,11 +0,0 @@\n-#![feature(bindings_after_at)]\n-\n-fn main() {\n-    let x = Some(\"s\".to_string());\n-    match x {\n-        op_string @ Some(s) => {},\n-        //~^ ERROR E0007\n-        //~| ERROR E0382\n-        None => {},\n-    }\n-}"}, {"sha": "89c1051619438bc3b4533f52151b79df8e3daf32", "filename": "src/test/ui/error-codes/E0007.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0007.stderr?ref=715e9340a1006e37aed381e320ddf30311c2c2a6", "patch": "@@ -1,22 +0,0 @@\n-error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/E0007.rs:6:9\n-   |\n-LL |         op_string @ Some(s) => {},\n-   |         ^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n-\n-error[E0382]: use of moved value\n-  --> $DIR/E0007.rs:6:26\n-   |\n-LL |     let x = Some(\"s\".to_string());\n-   |         - move occurs because `x` has type `Option<String>`, which does not implement the `Copy` trait\n-LL |     match x {\n-LL |         op_string @ Some(s) => {},\n-   |         -----------------^-\n-   |         |                |\n-   |         |                value used here after move\n-   |         value moved here\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0007, E0382.\n-For more information about an error, try `rustc --explain E0007`."}, {"sha": "ba9543bf738697fd36c0e26795f1a9bc609e480d", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -3,7 +3,6 @@\n // where one side is by-ref and the other is by-move.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n struct X {\n     x: (),"}, {"sha": "44dbcb9a75466420d8036963d2fd966ffcc32123", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:15:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:14:14\n    |\n LL |         Some(ref _y @ _z) => {}\n    |              ------^^^--\n@@ -8,7 +8,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:20:14\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              --^^^------\n@@ -18,7 +18,7 @@ LL |         Some(_z @ ref _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:29:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:28:14\n    |\n LL |         Some(ref mut _y @ _z) => {}\n    |              ----------^^^--\n@@ -27,7 +27,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed, by `_y`, here\n \n error: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:14\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:34:14\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              --^^^----------\n@@ -37,7 +37,7 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:21:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:20:19\n    |\n LL |         Some(_z @ ref _y) => {}\n    |              -----^^^^^^\n@@ -52,7 +52,7 @@ LL |         Some(ref _z @ ref _y) => {}\n    |              ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:35:19\n+  --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:34:19\n    |\n LL |         Some(_z @ ref mut _y) => {}\n    |              -----^^^^^^^^^^"}, {"sha": "3ab6f40725cfb2426c270895f5825d7e13da05d4", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // See issue #12534.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {}\n "}, {"sha": "f25d5a2d9b82d6cdbac5478796015a81fa092157", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-no-subbindings-fun-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-no-subbindings-fun-param.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value\n-  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:10:12\n+  --> $DIR/bind-by-move-no-subbindings-fun-param.rs:9:12\n    |\n LL | fn f(a @ A(u): A) -> Box<u8> {\n    |      ------^-"}, {"sha": "d014c9828da2a04bf1bb7ee2ebd31b41315b38ee", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test that moving on both sides of an `@` pattern is not allowed.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U; // Not copy!"}, {"sha": "5039f580ff6eac482d617ee67f2db16d00ae217a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:14:13\n+  --> $DIR/borrowck-move-and-move.rs:13:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -8,7 +8,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:16:17\n+  --> $DIR/borrowck-move-and-move.rs:15:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n@@ -17,7 +17,7 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:18:17\n+  --> $DIR/borrowck-move-and-move.rs:17:17\n    |\n LL |     let a @ (b, c) = (u(), u());\n    |         --------^-   ---------- move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n@@ -26,7 +26,7 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:21:16\n+  --> $DIR/borrowck-move-and-move.rs:20:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n@@ -37,7 +37,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:21:29\n+  --> $DIR/borrowck-move-and-move.rs:20:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<U, U>`, which does not implement the `Copy` trait\n@@ -48,7 +48,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:28:22\n+  --> $DIR/borrowck-move-and-move.rs:27:22\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[U; 4]`, which does not implement the `Copy` trait\n@@ -59,7 +59,7 @@ LL |         xs @ [a, .., b] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:32:18\n+  --> $DIR/borrowck-move-and-move.rs:31:18\n    |\n LL |     match [u(), u(), u(), u()] {\n    |           -------------------- move occurs because value has type `[U; 4]`, which does not implement the `Copy` trait\n@@ -70,7 +70,7 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:25:16\n+  --> $DIR/borrowck-move-and-move.rs:24:16\n    |\n LL |     fn fun(a @ b: U) {}\n    |            ----^"}, {"sha": "f1ee87bc9c69b40671e55458aa4a3d25b3eb9378", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box-pass.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -3,7 +3,6 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "236710ed85493d75876d2e704eb7d2af1837387c", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test `@` patterns combined with `box` patterns.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n #![feature(box_patterns)]\n \n #[derive(Copy, Clone)]"}, {"sha": "d9a8bbfb6b103f473a4cf655c8488d29c95c654f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:36:9\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed, by `a`, here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:39:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:40:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:46:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:52:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:51:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -53,7 +53,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:66:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:65:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n@@ -62,7 +62,7 @@ LL |         ref mut a @ box ref b => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:58:11\n+  --> $DIR/borrowck-pat-at-and-box.rs:57:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n@@ -71,7 +71,7 @@ LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           mutable borrow, by `a`, occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:21:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:20:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `Box<&C>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:24:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:23:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n@@ -89,7 +89,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:34:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:33:17\n    |\n LL |     match Box::new(C) {\n    |           ----------- move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n@@ -100,7 +100,7 @@ LL |         a @ box b => {}\n    |         value moved here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:46:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:45:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -112,7 +112,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:52:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:51:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -124,7 +124,7 @@ LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:66:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:65:25\n    |\n LL |         ref mut a @ box ref b => {\n    |         ----------------^^^^^\n@@ -136,7 +136,7 @@ LL |             *a = Box::new(NC);\n    |             -- mutable borrow later used here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:27:20\n+  --> $DIR/borrowck-pat-at-and-box.rs:26:20\n    |\n LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           ---------^\n@@ -146,7 +146,7 @@ LL |     fn f1(a @ box &b: Box<&C>) {}\n    |           move occurs because value has type `Box<&C>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:30:19\n+  --> $DIR/borrowck-pat-at-and-box.rs:29:19\n    |\n LL |     fn f2(a @ box b: Box<C>) {}\n    |           --------^\n@@ -156,7 +156,7 @@ LL |     fn f2(a @ box b: Box<C>) {}\n    |           move occurs because value has type `Box<C>`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:58:27\n+  --> $DIR/borrowck-pat-at-and-box.rs:57:27\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ----------------^^^^^"}, {"sha": "a22d27763d261fee7cd722636194aeb82124eafe", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -2,7 +2,6 @@\n // Currently this logic exists in THIR match checking as opposed to borrowck.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U;"}, {"sha": "0e09d478e3a1044d41350df40981db51b7ff0e17", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:9:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse-promotion.rs:8:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----"}, {"sha": "3e5a543c4c36aa194bdd7d7efc220aa428eb4fb3", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test that `by_move_binding @ pat_with_by_ref_bindings` is prevented.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U;"}, {"sha": "282031aeb075413898a9a5e561527c2246d9d4c2", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:28:9\n    |\n LL |     let a @ ref b = U;\n    |         -^^^-----\n@@ -9,7 +9,7 @@ LL |     let a @ ref b = U;\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -20,7 +20,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              -----^^^---------\n@@ -30,7 +30,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 -^^^-----\n@@ -40,7 +40,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:9\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         -^^^^---------^^-----^\n@@ -51,7 +51,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:9\n    |\n LL |     let a @ ref b = u();\n    |         -^^^-----\n@@ -61,7 +61,7 @@ LL |     let a @ ref b = u();\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:9\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         -^^^^^^^^^^^^---------^^^^^^-----^\n@@ -72,7 +72,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:14\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:14\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              -----^^^---------\n@@ -82,7 +82,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 -^^^-----\n@@ -92,7 +92,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:9\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         -^^^^---------^^-----^\n@@ -103,7 +103,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:56:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -113,7 +113,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -124,7 +124,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -134,7 +134,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -144,7 +144,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -155,7 +155,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:9\n    |\n LL |         a @ Some(ref b) => {}\n    |         -^^^^^^^^-----^\n@@ -165,7 +165,7 @@ LL |         a @ Some(ref b) => {}\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:9\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         -^^^^^^^^^^^^^^^^^---------^^^^^^-----^^\n@@ -176,7 +176,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:19\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:19\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   -----^^^---------\n@@ -186,7 +186,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      -^^^-----\n@@ -196,7 +196,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:9\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:9\n    |\n LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         -----^^^^^^^^^-----^^---------^^\n@@ -207,7 +207,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:11\n    |\n LL |     fn f1(a @ ref b: U) {}\n    |           -^^^-----\n@@ -217,7 +217,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:11\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           -----^^^^^^^^-----^^^^^^^^^^-----^\n@@ -228,7 +228,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:20\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:20\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    -^^^-----\n@@ -238,7 +238,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               -----^^^-----\n@@ -248,7 +248,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:11\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:11\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           -^^^^---------^^-----^\n@@ -259,7 +259,7 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:22\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:22\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              --------^^^^^^^^^\n@@ -270,7 +270,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         ------------------------^^^^^^^^^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n@@ -279,7 +279,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:37\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:30:37\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 ----^^^^^\n@@ -290,7 +290,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:25\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:37:25\n    |\n LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         ----------------^^^^^-   ------ move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait\n@@ -299,7 +299,7 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:41:13\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:40:13\n    |\n LL |     let a @ ref b = u();\n    |         ----^^^^^   --- move occurs because value has type `U`, which does not implement the `Copy` trait\n@@ -308,7 +308,7 @@ LL |     let a @ ref b = u();\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:22\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:22\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              --------^^^^^^^^^\n@@ -319,7 +319,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:33\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:33\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         ------------------------^^^^^^^^^-   ---------- move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n@@ -328,7 +328,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:44:37\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:43:37\n    |\n LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 ----^^^^^\n@@ -339,7 +339,7 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:51:25\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:50:25\n    |\n LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         ----------------^^^^^-   ---------- move occurs because value has type `[U; 2]`, which does not implement the `Copy` trait\n@@ -348,7 +348,7 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:27\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:27\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   --------^^^^^^^^^\n@@ -363,7 +363,7 @@ LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n    |                   ^^^\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:38\n    |\n LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -374,7 +374,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:42\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:60:42\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      ----^^^^^\n@@ -389,7 +389,7 @@ LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n    |                                      ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:71:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:70:30\n    |\n LL |     match Some([U, U]) {\n    |           ------------ move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -400,7 +400,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:77:18\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:76:18\n    |\n LL |     match Some(u()) {\n    |           --------- move occurs because value has type `Option<U>`, which does not implement the `Copy` trait\n@@ -411,7 +411,7 @@ LL |         a @ Some(ref b) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:27\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:27\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   --------^^^^^^^^^\n@@ -426,7 +426,7 @@ LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n    |                   ^^^\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:38\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:38\n    |\n LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n@@ -437,7 +437,7 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:83:42\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:82:42\n    |\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      ----^^^^^\n@@ -452,7 +452,7 @@ LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n    |                                      ^^^\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:93:30\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:92:30\n    |\n LL |     match Some([u(), u()]) {\n    |           ---------------- move occurs because value has type `Option<[U; 2]>`, which does not implement the `Copy` trait\n@@ -463,7 +463,7 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:15\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:13:15\n    |\n LL |     fn f1(a @ ref b: U) {}\n    |           ----^^^^^\n@@ -473,7 +473,7 @@ LL |     fn f1(a @ ref b: U) {}\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:24\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:24\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    ----^^^^^\n@@ -484,7 +484,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:31\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:31\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           --------------------^^^^^^^^^^^^^-\n@@ -494,7 +494,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:18:39\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:17:39\n    |\n LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               --------^^^^^\n@@ -505,7 +505,7 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:25:27\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:27\n    |\n LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           ----------------^^^^^-"}, {"sha": "42c3290ddfbb21ee89630cb8adf53c0b0a421f1f", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test that `ref mut? @ pat_with_by_move_bindings` is prevented.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U;"}, {"sha": "a275705b19332fccffd2dd59ffea7af12b901634", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:23:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:22:9\n    |\n LL |     let ref a @ b = U;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = U;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -18,7 +18,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n@@ -27,7 +27,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:25:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:24:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n@@ -36,7 +36,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:29:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:28:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n@@ -46,7 +46,7 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:31:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n@@ -55,7 +55,7 @@ LL |     let ref a @ b = u();\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -65,7 +65,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:18\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:33:33\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:32:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n@@ -83,7 +83,7 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:37:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n@@ -93,7 +93,7 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:40:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -102,7 +102,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -112,7 +112,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -121,7 +121,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:46:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:45:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -130,7 +130,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -140,7 +140,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:58:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:57:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n@@ -149,7 +149,7 @@ LL |         ref a @ Some(b) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n@@ -159,7 +159,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:23\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n@@ -168,7 +168,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:63:38\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:62:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n@@ -177,7 +177,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:70:9\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n@@ -187,7 +187,7 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:13:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           -----^^^-\n@@ -196,7 +196,7 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n@@ -206,7 +206,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:20\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n@@ -215,7 +215,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    value borrowed, by `b`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:16:35\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:15:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n@@ -224,7 +224,7 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   value borrowed, by `d`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:19:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^"}, {"sha": "f67cd45ca95abcc05aa08f97d38ad37984921fa9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,4 @@\n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n enum Option<T> {\n     None,"}, {"sha": "e6231dd49badebafc514ba56e03ae3fa7cf546f0", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:9\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n@@ -8,7 +8,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow, by `z`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n@@ -18,7 +18,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n@@ -27,7 +27,7 @@ LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      immutable borrow, by `b`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:38:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -36,7 +36,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:40:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -45,7 +45,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:42:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -55,7 +55,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:44:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -65,7 +65,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:47:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n@@ -74,7 +74,7 @@ LL |     let ref mut a @ ref b = u();\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n@@ -83,7 +83,7 @@ LL |     let ref a @ ref mut b = u();\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:59:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:58:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -92,7 +92,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:63:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:62:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -101,7 +101,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -110,7 +110,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:69:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -119,7 +119,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -128,7 +128,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -137,7 +137,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -146,7 +146,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -155,7 +155,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -164,7 +164,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -173,7 +173,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -182,7 +182,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -191,7 +191,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -200,7 +200,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -209,7 +209,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:119:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:118:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -219,7 +219,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -229,7 +229,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -239,7 +239,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:136:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:135:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -249,7 +249,7 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n@@ -258,7 +258,7 @@ LL |     fn f1(ref a @ ref mut b: U) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n@@ -267,7 +267,7 @@ LL |     fn f2(ref mut a @ ref b: U) {}\n    |           mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:11\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n@@ -276,7 +276,7 @@ LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           immutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:22\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      -----^^^-------------\n@@ -286,7 +286,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      immutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:30\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:30:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              ---------^^^-\n@@ -295,7 +295,7 @@ LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              value borrowed, by `b`, here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:10:31\n    |\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ----------------------^^^^^-\n@@ -307,7 +307,7 @@ LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:48:21\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:47:21\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ------------^^^^^\n@@ -319,7 +319,7 @@ LL |     *a = u();\n    |     -------- mutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:53:17\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:17\n    |\n LL |     let ref a @ ref mut b = u();\n    |         --------^^^^^^^^^\n@@ -331,7 +331,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -343,7 +343,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:78:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:77:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -355,55 +355,55 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:88:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:95:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:102:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:111:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:110:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<U, U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -415,7 +415,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:124:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -427,7 +427,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -439,7 +439,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:131:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:130:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-"}, {"sha": "8faaa1c881fbf8a31ff673a844bef5d21807f00a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test that `ref mut x @ ref mut y` and varieties of that are not allowed.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct U;"}, {"sha": "2e0f5fcabddf3094d6eae4d884ac4b479e8a4ecc", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -8,7 +8,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:32:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:31:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:34:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -26,7 +26,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -35,7 +35,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:42:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -44,7 +44,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:46:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -66,7 +66,7 @@ LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:56:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:55:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -88,7 +88,7 @@ LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         -^^^^---------^^---------^\n@@ -99,7 +99,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:69:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         -^^^^-^^^-^^-^^\n@@ -111,7 +111,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         -^^^^^^^^---------\n@@ -121,7 +121,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n \n error: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:77:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         -^^^^^^^^^---------^^---------^\n@@ -132,7 +132,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:81:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -141,7 +141,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:81:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -150,7 +150,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:88:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:87:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -159,7 +159,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:88:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:87:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -168,7 +168,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -177,7 +177,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -186,7 +186,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -195,7 +195,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -204,7 +204,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -213,7 +213,7 @@ LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:11\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:12:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n@@ -222,7 +222,7 @@ LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           first mutable borrow, by `a`, occurs here\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n@@ -240,7 +240,7 @@ LL | |         ] : [[U; 4]; 5]\n    | |_________^\n \n error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:22\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:22\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ---------^^^-------------\n@@ -250,7 +250,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      first mutable borrow, by `a`, occurs here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:24:34\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  ---------^^^-\n@@ -259,7 +259,7 @@ LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  value borrowed, by `b`, here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:28:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -271,7 +271,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:38:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -283,7 +283,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(U, U)`, which does not implement the `Copy` trait\n@@ -292,7 +292,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:70:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:69:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (U, [U; 2])`, which does not implement the `Copy` trait\n@@ -301,7 +301,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:74:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:73:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut U`, which does not implement the `Copy` trait\n@@ -310,7 +310,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:77:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:76:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (U, U)`, which does not implement the `Copy` trait\n@@ -319,7 +319,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -331,7 +331,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:95:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:94:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -343,7 +343,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -355,7 +355,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:107:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:106:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-"}, {"sha": "3954d17e1c2bcca3dbab0b101b2ba98e941aee2f", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,6 @@\n // Test that mixing `Copy` and non-`Copy` types in `@` patterns is forbidden.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n #[derive(Copy, Clone)]\n struct C;"}, {"sha": "cc2786a13f4e8949d4631a09a76761a305bf0631", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:12:19\n+  --> $DIR/copy-and-move-mixed.rs:11:19\n    |\n LL |     let a @ NC(b, c) = NC(C, C);\n    |         ----------^-   -------- move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n@@ -8,7 +8,7 @@ LL |     let a @ NC(b, c) = NC(C, C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:15:19\n+  --> $DIR/copy-and-move-mixed.rs:14:19\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         ----------^^^^^^^^^^^^-   --------------- move occurs because value has type `NC<C, NC<C, C>>`, which does not implement the `Copy` trait\n@@ -17,7 +17,7 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/copy-and-move-mixed.rs:15:29\n+  --> $DIR/copy-and-move-mixed.rs:14:29\n    |\n LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |                   ----------^-"}, {"sha": "276088b9a9ee9c54f573d04a880142548c8313c9", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -8,7 +8,6 @@\n // this would create problems for the generalization aforementioned.\n \n #![feature(bindings_after_at)]\n-#![feature(move_ref_pattern)]\n \n fn main() {\n     struct NotCopy;"}, {"sha": "11d5e24f34e132df7ecd15d015d45241b0cf77a6", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:28:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:27:9\n    |\n LL |     let ref a @ b = NotCopy;\n    |         -----^^^-\n@@ -8,7 +8,7 @@ LL |     let ref a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:31:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:30:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ---------^^^-\n@@ -17,7 +17,7 @@ LL |     let ref mut a @ b = NotCopy;\n    |         value borrowed, by `a`, here\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:36:12\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:35:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            -----^^^-\n@@ -26,7 +26,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            value borrowed, by `a`, here\n \n error: borrow of moved value\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:36:29\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:35:29\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             -^^^-----\n@@ -36,7 +36,7 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n \n error: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:44:9\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:43:9\n    |\n LL |         ref a @ b => {\n    |         -----^^^-\n@@ -45,7 +45,7 @@ LL |         ref a @ b => {\n    |         value borrowed, by `a`, here\n \n error[E0505]: cannot move out of value because it is borrowed\n-  --> $DIR/default-binding-modes-both-sides-independent.rs:31:21\n+  --> $DIR/default-binding-modes-both-sides-independent.rs:30:21\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ------------^"}, {"sha": "5445696fdff7d3e6574c7856af642f233822e2a3", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern-pass.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(move_ref_pattern)]\n-\n fn main() {}\n \n struct U;"}, {"sha": "9c320edc4dc0ec0f6a6ac5021d0ef5fb6485b685", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(move_ref_pattern)]\n-\n fn main() {}\n \n struct U;"}, {"sha": "285c203f382df3b75e69c6e415741122779b937a", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `arr[..]` because it is borrowed\n-  --> $DIR/borrowck-move-ref-pattern.rs:10:24\n+  --> $DIR/borrowck-move-ref-pattern.rs:8:24\n    |\n LL |     let hold_all = &arr;\n    |                    ---- borrow of `arr` occurs here\n@@ -10,7 +10,7 @@ LL |     drop(hold_all);\n    |          -------- borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `_x1`\n-  --> $DIR/borrowck-move-ref-pattern.rs:11:5\n+  --> $DIR/borrowck-move-ref-pattern.rs:9:5\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                        ---\n@@ -21,7 +21,7 @@ LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n \n error[E0505]: cannot move out of `arr[..]` because it is borrowed\n-  --> $DIR/borrowck-move-ref-pattern.rs:13:10\n+  --> $DIR/borrowck-move-ref-pattern.rs:11:10\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |          ------------ borrow of `arr[..]` occurs here\n@@ -32,7 +32,7 @@ LL |     drop(_x0_hold);\n    |          -------- borrow later used here\n \n error[E0502]: cannot borrow `arr[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-move-ref-pattern.rs:15:16\n+  --> $DIR/borrowck-move-ref-pattern.rs:13:16\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                             ---------------- immutable borrow occurs here\n@@ -44,7 +44,7 @@ LL |     drop(xs_hold);\n    |          ------- immutable borrow later used here\n \n error[E0505]: cannot move out of `arr[..]` because it is borrowed\n-  --> $DIR/borrowck-move-ref-pattern.rs:15:29\n+  --> $DIR/borrowck-move-ref-pattern.rs:13:29\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                             ---------------- borrow of `arr[..]` occurs here\n@@ -56,7 +56,7 @@ LL |     drop(xs_hold);\n    |          ------- borrow later used here\n \n error[E0505]: cannot move out of `arr[..]` because it is borrowed\n-  --> $DIR/borrowck-move-ref-pattern.rs:15:34\n+  --> $DIR/borrowck-move-ref-pattern.rs:13:34\n    |\n LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                             ---------------- borrow of `arr[..]` occurs here\n@@ -68,7 +68,7 @@ LL |     drop(xs_hold);\n    |          ------- borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `_x1`\n-  --> $DIR/borrowck-move-ref-pattern.rs:25:5\n+  --> $DIR/borrowck-move-ref-pattern.rs:23:5\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |                   ---\n@@ -79,7 +79,7 @@ LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n \n error[E0502]: cannot borrow `tup.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-move-ref-pattern.rs:26:20\n+  --> $DIR/borrowck-move-ref-pattern.rs:24:20\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |          ------- immutable borrow occurs here\n@@ -91,7 +91,7 @@ LL |     *_x0 = U;\n    |     -------- immutable borrow later used here\n \n error[E0502]: cannot borrow `tup.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-move-ref-pattern.rs:27:10\n+  --> $DIR/borrowck-move-ref-pattern.rs:25:10\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |          ------- immutable borrow occurs here\n@@ -102,7 +102,7 @@ LL |     *_x0 = U;\n    |     -------- immutable borrow later used here\n \n error[E0594]: cannot assign to `*_x0` which is behind a `&` reference\n-  --> $DIR/borrowck-move-ref-pattern.rs:28:5\n+  --> $DIR/borrowck-move-ref-pattern.rs:26:5\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |          ------- help: consider changing this to be a mutable reference: `ref mut _x0`\n@@ -111,7 +111,7 @@ LL |     *_x0 = U;\n    |     ^^^^^^^^ `_x0` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*_x2` which is behind a `&` reference\n-  --> $DIR/borrowck-move-ref-pattern.rs:29:5\n+  --> $DIR/borrowck-move-ref-pattern.rs:27:5\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |                        ------- help: consider changing this to be a mutable reference: `ref mut _x2`\n@@ -120,7 +120,7 @@ LL |     *_x2 = U;\n    |     ^^^^^^^^ `_x2` is a `&` reference, so the data it refers to cannot be written\n \n error[E0382]: use of moved value: `tup.1`\n-  --> $DIR/borrowck-move-ref-pattern.rs:30:10\n+  --> $DIR/borrowck-move-ref-pattern.rs:28:10\n    |\n LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |                   --- value moved here\n@@ -131,7 +131,7 @@ LL |     drop(tup.1);\n    = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `tup.1`\n-  --> $DIR/borrowck-move-ref-pattern.rs:31:20\n+  --> $DIR/borrowck-move-ref-pattern.rs:29:20\n    |\n LL |     drop(tup.1);\n    |          ----- value moved here\n@@ -141,7 +141,7 @@ LL |     let _x1_hold = &tup.1;\n    = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `tup.3` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-move-ref-pattern.rs:33:20\n+  --> $DIR/borrowck-move-ref-pattern.rs:31:20\n    |\n LL |     let (.., ref mut _x3) = tup;\n    |              ----------- mutable borrow occurs here\n@@ -152,7 +152,7 @@ LL |     drop(_x3);\n    |          --- mutable borrow later used here\n \n error[E0499]: cannot borrow `tup.3` as mutable more than once at a time\n-  --> $DIR/borrowck-move-ref-pattern.rs:34:20\n+  --> $DIR/borrowck-move-ref-pattern.rs:32:20\n    |\n LL |     let (.., ref mut _x3) = tup;\n    |              ----------- first mutable borrow occurs here\n@@ -164,7 +164,7 @@ LL |     drop(_x3);\n    |          --- first borrow later used here\n \n error[E0499]: cannot borrow `tup.3` as mutable more than once at a time\n-  --> $DIR/borrowck-move-ref-pattern.rs:35:14\n+  --> $DIR/borrowck-move-ref-pattern.rs:33:14\n    |\n LL |     let (.., ref mut _x3) = tup;\n    |              ----------- first mutable borrow occurs here\n@@ -176,7 +176,7 @@ LL |     drop(_x3);\n    |          --- first borrow later used here\n \n error[E0502]: cannot borrow `tup.3` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-move-ref-pattern.rs:36:14\n+  --> $DIR/borrowck-move-ref-pattern.rs:34:14\n    |\n LL |     let (.., ref mut _x3) = tup;\n    |              ----------- mutable borrow occurs here\n@@ -187,7 +187,7 @@ LL |     drop(_x3);\n    |          --- mutable borrow later used here\n \n error[E0382]: use of moved value: `tup`\n-  --> $DIR/borrowck-move-ref-pattern.rs:45:14\n+  --> $DIR/borrowck-move-ref-pattern.rs:43:14\n    |\n LL |     let mut tup = (U, U, U);\n    |         ------- move occurs because `tup` has type `(U, U, U)`, which does not implement the `Copy` trait"}, {"sha": "18663c3fe3f9681b8eb770b542d8dcbbf2013969", "filename": "src/test/ui/pattern/move-ref-patterns/by-move-sub-pat-unreachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fby-move-sub-pat-unreachable.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -4,7 +4,6 @@\n \n // check-pass\n \n-#![feature(move_ref_pattern)]\n #![feature(bindings_after_at)]\n \n fn main() {"}, {"sha": "fb92eb1ba32e0e74be8face458034dc4804ba961", "filename": "src/test/ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.rs?ref=715e9340a1006e37aed381e320ddf30311c2c2a6", "patch": "@@ -1,23 +0,0 @@\n-fn main() {\n-    #[derive(Clone)]\n-    struct X {\n-        x: (),\n-    }\n-    let mut tup = (X { x: () }, X { x: () });\n-    match Some(tup.clone()) {\n-        Some((y, ref z)) => {}\n-        //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n-        None => panic!(),\n-    }\n-\n-    let (ref a, b) = tup.clone();\n-    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n-\n-    let (a, mut b) = &tup;\n-    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n-    //~| ERROR cannot move out of a shared reference\n-\n-    let (mut a, b) = &mut tup;\n-    //~^ ERROR binding by-move and by-ref in the same pattern is unstable\n-    //~| ERROR cannot move out of a mutable reference\n-}"}, {"sha": "5335569a972b2be307885ba1ff6c847761ba9423", "filename": "src/test/ui/pattern/move-ref-patterns/feature-gate-move_ref_pattern.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/715e9340a1006e37aed381e320ddf30311c2c2a6/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Ffeature-gate-move_ref_pattern.stderr?ref=715e9340a1006e37aed381e320ddf30311c2c2a6", "patch": "@@ -1,66 +0,0 @@\n-error[E0658]: binding by-move and by-ref in the same pattern is unstable\n-  --> $DIR/feature-gate-move_ref_pattern.rs:8:15\n-   |\n-LL |         Some((y, ref z)) => {}\n-   |               ^  ----- by-ref pattern here\n-   |               |\n-   |               by-move pattern here\n-   |\n-   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n-   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n-\n-error[E0658]: binding by-move and by-ref in the same pattern is unstable\n-  --> $DIR/feature-gate-move_ref_pattern.rs:13:17\n-   |\n-LL |     let (ref a, b) = tup.clone();\n-   |          -----  ^ by-move pattern here\n-   |          |\n-   |          by-ref pattern here\n-   |\n-   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n-   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n-\n-error[E0658]: binding by-move and by-ref in the same pattern is unstable\n-  --> $DIR/feature-gate-move_ref_pattern.rs:16:13\n-   |\n-LL |     let (a, mut b) = &tup;\n-   |          -  ^^^^^ by-move pattern here\n-   |          |\n-   |          by-ref pattern here\n-   |\n-   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n-   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n-\n-error[E0658]: binding by-move and by-ref in the same pattern is unstable\n-  --> $DIR/feature-gate-move_ref_pattern.rs:20:10\n-   |\n-LL |     let (mut a, b) = &mut tup;\n-   |          ^^^^^  - by-ref pattern here\n-   |          |\n-   |          by-move pattern here\n-   |\n-   = note: see issue #68354 <https://github.com/rust-lang/rust/issues/68354> for more information\n-   = help: add `#![feature(move_ref_pattern)]` to the crate attributes to enable\n-\n-error[E0507]: cannot move out of a shared reference\n-  --> $DIR/feature-gate-move_ref_pattern.rs:16:22\n-   |\n-LL |     let (a, mut b) = &tup;\n-   |             -----    ^^^^\n-   |             |\n-   |             data moved here\n-   |             move occurs because `b` has type `X`, which does not implement the `Copy` trait\n-\n-error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/feature-gate-move_ref_pattern.rs:20:22\n-   |\n-LL |     let (mut a, b) = &mut tup;\n-   |          -----       ^^^^^^^^\n-   |          |\n-   |          data moved here\n-   |          move occurs because `a` has type `X`, which does not implement the `Copy` trait\n-\n-error: aborting due to 6 previous errors\n-\n-Some errors have detailed explanations: E0507, E0658.\n-For more information about an error, try `rustc --explain E0507`."}, {"sha": "80effc497ed93ae75c323ce344417b671d68ab2a", "filename": "src/test/ui/pattern/move-ref-patterns/issue-53840.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fissue-53840.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(move_ref_pattern)]\n-\n enum E {\n     Foo(String, String, String),\n }"}, {"sha": "ebb1683af7de626ab4cdf1b3c88fa25b1d010330", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-inside.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(move_ref_pattern)]\n-\n fn main() {\n     struct S; // Not `Copy`.\n "}, {"sha": "f19fed0891740604b5abcb1b3f70c280505eee44", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-inside.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-inside.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: borrow of moved value: `tup0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:33:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:31:10\n    |\n LL |     let mut tup0 = (S, S);\n    |         -------- move occurs because `tup0` has type `(S, S)`, which does not implement the `Copy` trait\n@@ -14,7 +14,7 @@ LL |     drop(&tup0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:34:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:32:10\n    |\n LL |     let mut tup1 = (S, S, S);\n    |         -------- move occurs because `tup1` has type `(S, S, S)`, which does not implement the `Copy` trait\n@@ -29,7 +29,7 @@ LL |     drop(&tup1);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:35:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:33:10\n    |\n LL |     let tup2 = (S, S);\n    |         ---- move occurs because `tup2` has type `(S, S)`, which does not implement the `Copy` trait\n@@ -44,7 +44,7 @@ LL |     drop(&tup2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:36:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:34:10\n    |\n LL |     let tup3 = (S, S, S);\n    |         ---- move occurs because `tup3` has type `(S, S, S)`, which does not implement the `Copy` trait\n@@ -59,7 +59,7 @@ LL |     drop(&tup3);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup4`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:41:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:39:10\n    |\n LL |     let tup4 = (S, S);\n    |         ---- move occurs because `tup4` has type `(S, S)`, which does not implement the `Copy` trait\n@@ -74,7 +74,7 @@ LL |     drop(&tup4.0);\n    |          ^^^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:43:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:41:10\n    |\n LL |     let mut arr0 = [S, S, S];\n    |         -------- move occurs because `arr0` has type `[S; 3]`, which does not implement the `Copy` trait\n@@ -89,7 +89,7 @@ LL |     drop(&arr0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:44:36\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:42:36\n    |\n LL |     let mut arr1 = [S, S, S, S, S];\n    |         -------- move occurs because `arr1` has type `[S; 5]`, which does not implement the `Copy` trait\n@@ -104,7 +104,7 @@ LL |     let [_, mov1, mov2, mov3, _] = &arr1;\n    |                                    ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:45:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:43:10\n    |\n LL |     let arr2 = [S, S, S];\n    |         ---- move occurs because `arr2` has type `[S; 3]`, which does not implement the `Copy` trait\n@@ -119,7 +119,7 @@ LL |     drop(&arr2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:46:36\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:44:36\n    |\n LL |     let arr3 = [S, S, S, S, S];\n    |         ---- move occurs because `arr3` has type `[S; 5]`, which does not implement the `Copy` trait\n@@ -134,7 +134,7 @@ LL |     let [_, mov1, mov2, mov3, _] = &arr3;\n    |                                    ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:77:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:75:10\n    |\n LL |     let mut tup0: Option<(S, S)> = None;\n    |         -------- move occurs because `tup0` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -148,7 +148,7 @@ LL |     drop(&tup0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:78:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:76:10\n    |\n LL |     let mut tup1: Option<(S, S, S)> = None;\n    |         -------- move occurs because `tup1` has type `Option<(S, S, S)>`, which does not implement the `Copy` trait\n@@ -163,7 +163,7 @@ LL |     drop(&tup1);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:79:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:77:10\n    |\n LL |     let tup2: Option<(S, S)> = None;\n    |         ---- move occurs because `tup2` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -178,7 +178,7 @@ LL |     drop(&tup2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:80:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:78:10\n    |\n LL |     let tup3: Option<(S, S, S)> = None;\n    |         ---- move occurs because `tup3` has type `Option<(S, S, S)>`, which does not implement the `Copy` trait\n@@ -193,7 +193,7 @@ LL |     drop(&tup3);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup4`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:81:21\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:79:21\n    |\n LL |     let tup4: Option<(S, S)> = None;\n    |         ---- move occurs because `tup4` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -208,7 +208,7 @@ LL |     m!((ref x, _) = &tup4);\n    |                     ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:82:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:80:10\n    |\n LL |     let mut arr0: Option<[S; 3]> = None;\n    |         -------- move occurs because `arr0` has type `Option<[S; 3]>`, which does not implement the `Copy` trait\n@@ -223,7 +223,7 @@ LL |     drop(&arr0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:83:35\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:81:35\n    |\n LL |     let mut arr1: Option<[S; 5]> = None;\n    |         -------- move occurs because `arr1` has type `Option<[S; 5]>`, which does not implement the `Copy` trait\n@@ -238,7 +238,7 @@ LL |     m!([_, mov1, mov2, mov3, _] = &arr1);\n    |                                   ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:84:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:82:10\n    |\n LL |     let arr2: Option<[S; 3]> = None;\n    |         ---- move occurs because `arr2` has type `Option<[S; 3]>`, which does not implement the `Copy` trait\n@@ -253,7 +253,7 @@ LL |     drop(&arr2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:85:35\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:83:35\n    |\n LL |     let arr3: Option<[S; 5]> = None;\n    |         ---- move occurs because `arr3` has type `Option<[S; 5]>`, which does not implement the `Copy` trait\n@@ -267,7 +267,7 @@ LL |     m!([_, mov1, mov2, mov3, _] = &arr3);\n    |                                   ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:113:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:111:10\n    |\n LL |     let mut tup0: Option<(S, S)> = None;\n    |         -------- move occurs because `tup0` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -281,7 +281,7 @@ LL |     drop(&tup0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:114:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:112:10\n    |\n LL |     let mut tup1: Option<(S, S, S)> = None;\n    |         -------- move occurs because `tup1` has type `Option<(S, S, S)>`, which does not implement the `Copy` trait\n@@ -296,7 +296,7 @@ LL |     drop(&tup1);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:115:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:113:10\n    |\n LL |     let tup2: Option<(S, S)> = None;\n    |         ---- move occurs because `tup2` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -311,7 +311,7 @@ LL |     drop(&tup2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:116:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:114:10\n    |\n LL |     let tup3: Option<(S, S, S)> = None;\n    |         ---- move occurs because `tup3` has type `Option<(S, S, S)>`, which does not implement the `Copy` trait\n@@ -326,7 +326,7 @@ LL |     drop(&tup3);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `tup4`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:117:21\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:115:21\n    |\n LL |     let tup4: Option<(S, S)> = None;\n    |         ---- move occurs because `tup4` has type `Option<(S, S)>`, which does not implement the `Copy` trait\n@@ -341,7 +341,7 @@ LL |     m!((ref x, _) = &tup4);\n    |                     ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr0`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:118:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:116:10\n    |\n LL |     let mut arr0: Option<[S; 3]> = None;\n    |         -------- move occurs because `arr0` has type `Option<[S; 3]>`, which does not implement the `Copy` trait\n@@ -356,7 +356,7 @@ LL |     drop(&arr0);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr1`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:119:35\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:117:35\n    |\n LL |     let mut arr1: Option<[S; 5]> = None;\n    |         -------- move occurs because `arr1` has type `Option<[S; 5]>`, which does not implement the `Copy` trait\n@@ -371,7 +371,7 @@ LL |     m!([_, mov1, mov2, mov3, _] = &arr1);\n    |                                   ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr2`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:120:10\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:118:10\n    |\n LL |     let arr2: Option<[S; 3]> = None;\n    |         ---- move occurs because `arr2` has type `Option<[S; 3]>`, which does not implement the `Copy` trait\n@@ -386,7 +386,7 @@ LL |     drop(&arr2);\n    |          ^^^^^ value borrowed here after move\n \n error[E0382]: borrow of moved value: `arr3`\n-  --> $DIR/move-ref-patterns-closure-captures-inside.rs:121:35\n+  --> $DIR/move-ref-patterns-closure-captures-inside.rs:119:35\n    |\n LL |     let arr3: Option<[S; 5]> = None;\n    |         ---- move occurs because `arr3` has type `Option<[S; 5]>`, which does not implement the `Copy` trait"}, {"sha": "583f70f41aa70e1c30c560070296f69cf1fbfdee", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures-pass.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(move_ref_pattern)]\n-\n fn main() {\n     struct U;\n     fn accept_fn_once(_: impl FnOnce()) {}"}, {"sha": "cd619cc41eb27cee082a09fe49517e57ef6392fd", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(move_ref_pattern)]\n-\n fn main() {\n     struct U;\n     fn accept_fn_once(_: &impl FnOnce()) {}"}, {"sha": "d96e863939c0229589ba938d3fbd0c1a1c09cb67", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0525]: expected a closure that implements the `FnMut` trait, but this closure only implements `FnOnce`\n-  --> $DIR/move-ref-patterns-closure-captures.rs:11:14\n+  --> $DIR/move-ref-patterns-closure-captures.rs:9:14\n    |\n LL |     let c1 = || {\n    |              ^^ this closure implements `FnOnce`, not `FnMut`\n@@ -11,7 +11,7 @@ LL |     accept_fn_mut(&c1);\n    |     ------------- the requirement to implement `FnMut` derives from here\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n-  --> $DIR/move-ref-patterns-closure-captures.rs:11:14\n+  --> $DIR/move-ref-patterns-closure-captures.rs:9:14\n    |\n LL |     let c1 = || {\n    |              ^^ this closure implements `FnOnce`, not `Fn`\n@@ -23,7 +23,7 @@ LL |     accept_fn(&c1);\n    |     --------- the requirement to implement `Fn` derives from here\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n-  --> $DIR/move-ref-patterns-closure-captures.rs:22:14\n+  --> $DIR/move-ref-patterns-closure-captures.rs:20:14\n    |\n LL |     let c2 = || {\n    |              ^^ this closure implements `FnMut`, not `Fn`"}, {"sha": "1dd66aad57a33f71afe27f1c0362f54c064db53b", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(move_ref_pattern)]\n-\n fn main() {\n     struct U;\n "}, {"sha": "6952c743a3069e5d6dd1f8072abcb8d47e24f6bb", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-default-binding-modes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-default-binding-modes.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/move-ref-patterns-default-binding-modes.rs:10:22\n+  --> $DIR/move-ref-patterns-default-binding-modes.rs:8:22\n    |\n LL |     let (a, mut b) = &p;\n    |             -----    ^^\n@@ -8,7 +8,7 @@ LL |     let (a, mut b) = &p;\n    |             move occurs because `b` has type `U`, which does not implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n-  --> $DIR/move-ref-patterns-default-binding-modes.rs:14:22\n+  --> $DIR/move-ref-patterns-default-binding-modes.rs:12:22\n    |\n LL |     let (a, mut b) = &mut p;\n    |             -----    ^^^^^^"}, {"sha": "1d6d9acead1d44478b94dc291f8e7b06dd50b967", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-dynamic-semantics.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -3,8 +3,6 @@\n // This test checks the dynamic semantics and drop order of pattern matching\n // where a product pattern has both a by-move and by-ref binding.\n \n-#![feature(move_ref_pattern)]\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "d6c5a13b1bdb03fe465fc06b26874dd32d691af2", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.rs?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(move_ref_pattern)]\n-\n struct Foo {}\n \n pub fn main() {"}, {"sha": "9cc20a7bf3144ffa05e86a1452db184d4a4fbc9e", "filename": "src/test/ui/rfc-2005-default-binding-mode/for.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da700cba08a2b194d19e63d3c51ebadce96fe46b/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Ffor.stderr?ref=da700cba08a2b194d19e63d3c51ebadce96fe46b", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of a shared reference\n-  --> $DIR/for.rs:8:23\n+  --> $DIR/for.rs:6:23\n    |\n LL |     for (n, mut m) in &tups {\n    |             -----     ^^^^^"}]}