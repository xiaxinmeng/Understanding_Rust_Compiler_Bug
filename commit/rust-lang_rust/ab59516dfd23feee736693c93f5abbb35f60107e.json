{"sha": "ab59516dfd23feee736693c93f5abbb35f60107e", "node_id": "C_kwDOAAsO6NoAKGFiNTk1MTZkZmQyM2ZlZWU3MzY2OTNjOTNmNWFiYmIzNWY2MDEwN2U", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T12:43:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T12:43:15Z"}, "message": "Rollup merge of #94493 - oribenshir:feature/ISSUE-78543_async_fn_in_foreign_crate_diag_2, r=davidtwco\n\nImproved diagnostic on failure to meet send bound on future in a foreign crate\n\nProvide a better diagnostic on failure to meet send bound on futures in a foreign crate.\n\nfixes #78543", "tree": {"sha": "b7c7769998085b9d9747c5fa5d00d276edb78b26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c7769998085b9d9747c5fa5d00d276edb78b26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab59516dfd23feee736693c93f5abbb35f60107e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXq5jCRBK7hj4Ov3rIwAAD8gIAJbJb4dg7E5MpXTlaMxaISZS\nCWXVgtI2VZnUoNAlLYhwcuXhnbdcbdHbFIvjiAM9PmaM5QikW/JTk2lO9UfByZRh\nmtTKnS5qoFj8vGUjCBD5/KSyeaVhXbuglxiahwxaGp1lPN4xRxe5Shbs9QjbUafL\nA4MOfem8S7ZrEz4MiP5pBnzQpfDtZ8LD+REf/m2A1qh+ZzqJkLm9Q7nDTHOLSHli\nDal8lbzlczj59DigHJjJJ4ZZfUUiymcpurs1GDF+GaIKNjfoFJ37hHDKQ7pr9zxK\n99DshGpmzh8JNnynZ5ZjAry0iGgintZDIJ0GkE7XBU4xlHs0mSBal2dl5x3EAPA=\n=yEhy\n-----END PGP SIGNATURE-----\n", "payload": "tree b7c7769998085b9d9747c5fa5d00d276edb78b26\nparent e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357\nparent ebe3c56c6eeca6db4a62ebb99e2ffe35f33ea4de\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650372195 +0200\ncommitter GitHub <noreply@github.com> 1650372195 +0200\n\nRollup merge of #94493 - oribenshir:feature/ISSUE-78543_async_fn_in_foreign_crate_diag_2, r=davidtwco\n\nImproved diagnostic on failure to meet send bound on future in a foreign crate\n\nProvide a better diagnostic on failure to meet send bound on futures in a foreign crate.\n\nfixes #78543\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab59516dfd23feee736693c93f5abbb35f60107e", "html_url": "https://github.com/rust-lang/rust/commit/ab59516dfd23feee736693c93f5abbb35f60107e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab59516dfd23feee736693c93f5abbb35f60107e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357", "html_url": "https://github.com/rust-lang/rust/commit/e2661bac6d8ae6b9e2a26cd08e9c087ab59e1357"}, {"sha": "ebe3c56c6eeca6db4a62ebb99e2ffe35f33ea4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe3c56c6eeca6db4a62ebb99e2ffe35f33ea4de", "html_url": "https://github.com/rust-lang/rust/commit/ebe3c56c6eeca6db4a62ebb99e2ffe35f33ea4de"}], "stats": {"total": 300, "additions": 247, "deletions": 53}, "files": [{"sha": "c0f2319f003a035706343401b9315d91156bb7b4", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -28,6 +28,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n+use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -1725,6 +1726,24 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .collect()\n         })\n     }\n+\n+    fn get_generator_diagnostic_data(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        id: DefIndex,\n+    ) -> Option<GeneratorDiagnosticData<'tcx>> {\n+        self.root\n+            .tables\n+            .generator_diagnostic_data\n+            .get(self, id)\n+            .map(|param| param.decode((self, tcx)))\n+            .map(|generator_data| GeneratorDiagnosticData {\n+                generator_interior_types: generator_data.generator_interior_types,\n+                hir_owner: generator_data.hir_owner,\n+                nodes_types: generator_data.nodes_types,\n+                adjustments: generator_data.adjustments,\n+            })\n+    }\n }\n \n impl CrateMetadata {"}, {"sha": "ba6c4a2af77e1de216fd618be7a122eae9dca8ea", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -246,6 +246,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n     expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n+    generator_diagnostic_data => { cdata.get_generator_diagnostic_data(tcx, def_id.index) }\n }\n \n pub(in crate::rmeta) fn provide(providers: &mut Providers) {"}, {"sha": "619c90eea7e1351b538f5e8d33e178a043e5d3c1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -1556,16 +1556,17 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {\n         let def_id = self.tcx.hir().local_def_id(hir_id);\n         debug!(\"EncodeContext::encode_info_for_closure({:?})\", def_id);\n-\n         // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,\n         // including on the signature, which is inferred in `typeck.\n-        let ty = self.tcx.typeck(def_id).node_type(hir_id);\n-\n+        let typeck_result: &'tcx ty::TypeckResults<'tcx> = self.tcx.typeck(def_id);\n+        let ty = typeck_result.node_type(hir_id);\n         match ty.kind() {\n             ty::Generator(..) => {\n                 let data = self.tcx.generator_kind(def_id).unwrap();\n+                let generator_diagnostic_data = typeck_result.get_generator_diagnostic_data();\n                 record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator);\n                 record!(self.tables.generator_kind[def_id.to_def_id()] <- data);\n+                record!(self.tables.generator_diagnostic_data[def_id.to_def_id()]  <- generator_diagnostic_data);\n             }\n \n             ty::Closure(..) => {"}, {"sha": "e1a1589adb322f4c09da35f4752af35f62ca28a9", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::mir;\n use rustc_middle::thir;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n@@ -358,6 +359,7 @@ define_tables! {\n     def_keys: Table<DefIndex, Lazy<DefKey>>,\n     def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, Lazy<Span>>,\n+    generator_diagnostic_data: Table<DefIndex, Lazy<GeneratorDiagnosticData<'tcx>>>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]"}, {"sha": "78a3383243306b42187e2cf48fab7dea0867e254", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -1969,4 +1969,10 @@ rustc_queries! {\n         eval_always\n         desc { \"computing the backend features for CLI flags\" }\n     }\n+\n+    query generator_diagnostic_data(key: DefId) -> Option<GeneratorDiagnosticData<'tcx>> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { |tcx| \"looking up generator diagnostic data of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n+    }\n }"}, {"sha": "30fe3ffa7e3c46c0b438269ebf430942b85397c8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -367,6 +367,16 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub expr: Option<hir::HirId>,\n }\n \n+// This type holds diagnostic information on generators and async functions across crate boundaries\n+// and is used to provide better error messages\n+#[derive(TyEncodable, TyDecodable, Clone, Debug, HashStable)]\n+pub struct GeneratorDiagnosticData<'tcx> {\n+    pub generator_interior_types: ty::Binder<'tcx, Vec<GeneratorInteriorTypeCause<'tcx>>>,\n+    pub hir_owner: DefId,\n+    pub nodes_types: ItemLocalMap<Ty<'tcx>>,\n+    pub adjustments: ItemLocalMap<Vec<ty::adjustment::Adjustment<'tcx>>>,\n+}\n+\n #[derive(TyEncodable, TyDecodable, Debug, HashStable)]\n pub struct TypeckResults<'tcx> {\n     /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.\n@@ -623,6 +633,28 @@ impl<'tcx> TypeckResults<'tcx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }\n     }\n \n+    pub fn get_generator_diagnostic_data(&self) -> GeneratorDiagnosticData<'tcx> {\n+        let generator_interior_type = self.generator_interior_types.map_bound_ref(|vec| {\n+            vec.iter()\n+                .map(|item| {\n+                    GeneratorInteriorTypeCause {\n+                        ty: item.ty,\n+                        span: item.span,\n+                        scope_span: item.scope_span,\n+                        yield_span: item.yield_span,\n+                        expr: None, //FIXME: Passing expression over crate boundaries is impossible at the moment\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+        });\n+        GeneratorDiagnosticData {\n+            generator_interior_types: generator_interior_type,\n+            hir_owner: self.hir_owner.to_def_id(),\n+            nodes_types: self.node_types.clone(),\n+            adjustments: self.adjustments.clone(),\n+        }\n+    }\n+\n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(|| {\n             bug!(\"node_type: no type for node `{}`\", tls::with(|tcx| tcx.hir().node_to_string(id)))"}, {"sha": "a0d0e4b9c2c64b06f220783a54a836780b334dcc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -67,8 +67,9 @@ pub use self::consts::{\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-    CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorInteriorTypeCause, GlobalCtxt,\n-    Lift, OnDiskCache, TyCtxt, TypeckResults, UserType, UserTypeAnnotationIndex,\n+    CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n+    UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;"}, {"sha": "7629d7a8259b8b841598e95c2c70519f186a04cc", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -31,8 +31,11 @@ use crate::traits::{self, ImplSource};\n use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n+use crate::ty::GeneratorDiagnosticData;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n+use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n@@ -49,13 +52,10 @@ use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Limits;\n-use rustc_target::abi;\n-use rustc_target::spec::PanicStrategy;\n-\n-use rustc_ast as ast;\n-use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi;\n+use rustc_target::spec::PanicStrategy;\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;"}, {"sha": "0c1ca65c48f6adb9230785eb5e494973c04cc70c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 160, "deletions": 40, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -19,9 +19,11 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n+use rustc_middle::hir::map;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, ToPredicate, Ty, TyCtxt,\n+    TypeFoldable,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;\n@@ -44,6 +46,123 @@ pub enum GeneratorInteriorOrUpvar {\n     Upvar(Span),\n }\n \n+// This type provides a uniform interface to retrieve data on generators, whether it originated from\n+// the local crate being compiled or from a foreign crate.\n+#[derive(Debug)]\n+pub enum GeneratorData<'tcx, 'a> {\n+    Local(&'a TypeckResults<'tcx>),\n+    Foreign(&'tcx GeneratorDiagnosticData<'tcx>),\n+}\n+\n+impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n+    // Try to get information about variables captured by the generator that matches a type we are\n+    // looking for with `ty_matches` function. We uses it to find upvar which causes a failure to\n+    // meet an obligation\n+    fn try_get_upvar_span<F>(\n+        &self,\n+        infer_context: &InferCtxt<'a, 'tcx>,\n+        generator_did: DefId,\n+        ty_matches: F,\n+    ) -> Option<GeneratorInteriorOrUpvar>\n+    where\n+        F: Fn(ty::Binder<'tcx, Ty<'tcx>>) -> bool,\n+    {\n+        match self {\n+            GeneratorData::Local(typeck_results) => {\n+                infer_context.tcx.upvars_mentioned(generator_did).and_then(|upvars| {\n+                    upvars.iter().find_map(|(upvar_id, upvar)| {\n+                        let upvar_ty = typeck_results.node_type(*upvar_id);\n+                        let upvar_ty = infer_context.resolve_vars_if_possible(upvar_ty);\n+                        if ty_matches(ty::Binder::dummy(upvar_ty)) {\n+                            Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                })\n+            }\n+            GeneratorData::Foreign(_) => None,\n+        }\n+    }\n+\n+    // Try to get the span of a type being awaited on that matches the type we are looking with the\n+    // `ty_matches` function. We uses it to find awaited type which causes a failure to meet an\n+    // obligation\n+    fn get_from_await_ty<F>(\n+        &self,\n+        visitor: AwaitsVisitor,\n+        hir: map::Map<'tcx>,\n+        ty_matches: F,\n+    ) -> Option<Span>\n+    where\n+        F: Fn(ty::Binder<'tcx, Ty<'tcx>>) -> bool,\n+    {\n+        match self {\n+            GeneratorData::Local(typeck_results) => visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    ty_matches(ty::Binder::dummy(typeck_results.expr_ty_adjusted(&await_expr)))\n+                })\n+                .map(|expr| expr.span),\n+            GeneratorData::Foreign(generator_diagnostic_data) => visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    ty_matches(ty::Binder::dummy(\n+                        generator_diagnostic_data\n+                            .adjustments\n+                            .get(&await_expr.hir_id.local_id)\n+                            .map_or::<&[ty::adjustment::Adjustment<'tcx>], _>(&[], |a| &a[..])\n+                            .last()\n+                            .map_or_else::<Ty<'tcx>, _, _>(\n+                                || {\n+                                    generator_diagnostic_data\n+                                        .nodes_types\n+                                        .get(&await_expr.hir_id.local_id)\n+                                        .cloned()\n+                                        .unwrap_or_else(|| {\n+                                            bug!(\n+                                                \"node_type: no type for node `{}`\",\n+                                                ty::tls::with(|tcx| tcx\n+                                                    .hir()\n+                                                    .node_to_string(await_expr.hir_id))\n+                                            )\n+                                        })\n+                                },\n+                                |adj| adj.target,\n+                            ),\n+                    ))\n+                })\n+                .map(|expr| expr.span),\n+        }\n+    }\n+\n+    /// Get the type, expression, span and optional scope span of all types\n+    /// that are live across the yield of this generator\n+    fn get_generator_interior_types(\n+        &self,\n+    ) -> ty::Binder<'tcx, &Vec<GeneratorInteriorTypeCause<'tcx>>> {\n+        match self {\n+            GeneratorData::Local(typeck_result) => typeck_result.generator_interior_types.as_ref(),\n+            GeneratorData::Foreign(generator_diagnostic_data) => {\n+                generator_diagnostic_data.generator_interior_types.as_ref()\n+            }\n+        }\n+    }\n+\n+    // Used to get the source of the data, note we don't have as much information for generators\n+    // originated from foreign crates\n+    fn is_foreign(&self) -> bool {\n+        match self {\n+            GeneratorData::Local(_) => false,\n+            GeneratorData::Foreign(_) => true,\n+        }\n+    }\n+}\n+\n // This trait is public to expose the diagnostics methods to clippy.\n pub trait InferCtxtExt<'tcx> {\n     fn suggest_restricting_param_bound(\n@@ -152,7 +271,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n-        inner_generator_body: Option<&hir::Body<'tcx>>,\n+        is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n         target_ty: Ty<'tcx>,\n@@ -1642,6 +1761,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             .map(|def_id| hir.local_def_id_to_hir_id(def_id))\n             .and_then(|hir_id| hir.maybe_body_owned_by(hir_id))\n             .map(|body_id| hir.body(body_id));\n+        let is_async = match generator_did.as_local() {\n+            Some(_) => generator_body\n+                .and_then(|body| body.generator_kind())\n+                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n+                .unwrap_or(false),\n+            None => self\n+                .tcx\n+                .generator_kind(generator_did)\n+                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n+                .unwrap_or(false),\n+        };\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -1682,61 +1812,55 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // type-checking; otherwise, get them by performing a query.  This is needed to avoid\n         // cycles. If we can't use resolved types because the generator comes from another crate,\n         // we still provide a targeted error but without all the relevant spans.\n-        let query_typeck_results;\n-        let typeck_results: Option<&TypeckResults<'tcx>> = match &in_progress_typeck_results {\n-            Some(t) if t.hir_owner.to_def_id() == generator_did_root => Some(&t),\n+        let generator_data: Option<GeneratorData<'tcx, '_>> = match &in_progress_typeck_results {\n+            Some(t) if t.hir_owner.to_def_id() == generator_did_root => {\n+                Some(GeneratorData::Local(&t))\n+            }\n             _ if generator_did.is_local() => {\n-                query_typeck_results = self.tcx.typeck(generator_did.expect_local());\n-                Some(&query_typeck_results)\n+                Some(GeneratorData::Local(self.tcx.typeck(generator_did.expect_local())))\n             }\n-            _ => None, // Do not ICE on closure typeck (#66868).\n+            _ => self\n+                .tcx\n+                .generator_diagnostic_data(generator_did)\n+                .as_ref()\n+                .map(|generator_diag_data| GeneratorData::Foreign(generator_diag_data)),\n         };\n-        if let Some(typeck_results) = typeck_results {\n-            if let Some(upvars) = self.tcx.upvars_mentioned(generator_did) {\n-                interior_or_upvar_span = upvars.iter().find_map(|(upvar_id, upvar)| {\n-                    let upvar_ty = typeck_results.node_type(*upvar_id);\n-                    let upvar_ty = self.resolve_vars_if_possible(upvar_ty);\n-                    if ty_matches(ty::Binder::dummy(upvar_ty)) {\n-                        Some(GeneratorInteriorOrUpvar::Upvar(upvar.span))\n-                    } else {\n-                        None\n-                    }\n-                });\n-            };\n+\n+        if let Some(generator_data) = generator_data.as_ref() {\n+            interior_or_upvar_span =\n+                generator_data.try_get_upvar_span(&self, generator_did, ty_matches);\n \n             // The generator interior types share the same binders\n             if let Some(cause) =\n-                typeck_results.generator_interior_types.as_ref().skip_binder().iter().find(\n+                generator_data.get_generator_interior_types().skip_binder().iter().find(\n                     |ty::GeneratorInteriorTypeCause { ty, .. }| {\n-                        ty_matches(typeck_results.generator_interior_types.rebind(*ty))\n+                        ty_matches(generator_data.get_generator_interior_types().rebind(*ty))\n                     },\n                 )\n             {\n-                // Check to see if any awaited expressions have the target type.\n-                let from_awaited_ty = visitor\n-                    .awaits\n-                    .into_iter()\n-                    .map(|id| hir.expect_expr(id))\n-                    .find(|await_expr| {\n-                        ty_matches(ty::Binder::dummy(typeck_results.expr_ty_adjusted(&await_expr)))\n-                    })\n-                    .map(|expr| expr.span);\n+                let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n                 let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n                     cause;\n \n                 interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n                 interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            };\n-        } else {\n-            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n+            }\n+\n+            if interior_or_upvar_span.is_none() && generator_data.is_foreign() {\n+                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n+            }\n         }\n \n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n+            let typeck_results = generator_data.and_then(|generator_data| match generator_data {\n+                GeneratorData::Local(typeck_results) => Some(typeck_results),\n+                GeneratorData::Foreign(_) => None,\n+            });\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 interior_or_upvar_span,\n                 interior_extra_info,\n-                generator_body,\n+                is_async,\n                 outer_generator,\n                 trait_ref,\n                 target_ty,\n@@ -1757,7 +1881,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n         interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n-        inner_generator_body: Option<&hir::Body<'tcx>>,\n+        is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n         target_ty: Ty<'tcx>,\n@@ -1767,10 +1891,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let source_map = self.tcx.sess.source_map();\n \n-        let is_async = inner_generator_body\n-            .and_then(|body| body.generator_kind())\n-            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-            .unwrap_or(false);\n         let (await_or_yield, an_await_or_yield) =\n             if is_async { (\"await\", \"an await\") } else { (\"yield\", \"a yield\") };\n         let future_or_generator = if is_async { \"future\" } else { \"generator\" };"}, {"sha": "d73772e5fa0d9b3616287e11efad261464f9dfbf", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -7,5 +7,5 @@ fn g(_: impl Send) {}\n \n fn main() {\n     g(issue_67893::run())\n-    //~^ ERROR generator cannot be sent between threads safely\n+    //~^ ERROR future cannot be sent between threads safely\n }"}, {"sha": "316b6d06f932ac1189cbbe6370beb920c259a178", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab59516dfd23feee736693c93f5abbb35f60107e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab59516dfd23feee736693c93f5abbb35f60107e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=ab59516dfd23feee736693c93f5abbb35f60107e", "patch": "@@ -1,10 +1,22 @@\n-error: generator cannot be sent between threads safely\n+error: future cannot be sent between threads safely\n   --> $DIR/issue-67893.rs:9:7\n    |\n LL |     g(issue_67893::run())\n-   |       ^^^^^^^^^^^^^^^^^^ generator is not `Send`\n+   |       ^^^^^^^^^^^^^^^^^^ future is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/auxiliary/issue_67893.rs:9:26\n+   |\n+LL |     f(*x.lock().unwrap()).await;\n+   |        ----------------- ^^^^^^ await occurs here, with `x.lock().unwrap()` maybe used later\n+   |        |\n+   |        has type `MutexGuard<'_, ()>` which is not `Send`\n+note: `x.lock().unwrap()` is later dropped here\n+  --> $DIR/auxiliary/issue_67893.rs:9:32\n+   |\n+LL |     f(*x.lock().unwrap()).await;\n+   |                                ^\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |"}]}