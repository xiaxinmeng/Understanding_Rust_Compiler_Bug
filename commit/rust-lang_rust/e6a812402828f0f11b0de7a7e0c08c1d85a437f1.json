{"sha": "e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTgxMjQwMjgyOGYwZjExYjBkZTdhN2UwYzA4YzFkODVhNDM3ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-14T00:07:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-14T00:07:50Z"}, "message": "Auto merge of #24251 - alexcrichton:unsafe-from-raw-fd, r=aturon\n\nAs pointed out in [RFC issue 1043][rfc] it is quite useful to have the standard\r\nI/O types to provide the contract that they are the sole owner of the underlying\r\nobject they represent. This guarantee enables writing safe interfaces like the\r\n`MemoryMap` API sketched out in that issue.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/issues/1043\r\n\r\nAs constructing objects from these raw handles may end up violating these\r\nownership gurantees, the functions for construction are now marked unsafe.\r\n\r\n[breaking-change]\r\nCloses rust-lang/rfcs#1043", "tree": {"sha": "f2570188dcccb4c7c362ae047e3411fa1e1baa1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2570188dcccb4c7c362ae047e3411fa1e1baa1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "html_url": "https://github.com/rust-lang/rust/commit/e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a812402828f0f11b0de7a7e0c08c1d85a437f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55e66aaed42589dcda0221a4545dbaaec68e577", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55e66aaed42589dcda0221a4545dbaaec68e577", "html_url": "https://github.com/rust-lang/rust/commit/f55e66aaed42589dcda0221a4545dbaaec68e577"}, {"sha": "2705051e2067e8f467b4cb9bc75e801a5cd4f0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2705051e2067e8f467b4cb9bc75e801a5cd4f0e7", "html_url": "https://github.com/rust-lang/rust/commit/2705051e2067e8f467b4cb9bc75e801a5cd4f0e7"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "fa0f14b480789131ca3a1f67d95e513fee0b5f2c", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e6a812402828f0f11b0de7a7e0c08c1d85a437f1/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a812402828f0f11b0de7a7e0c08c1d85a437f1/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "patch": "@@ -74,9 +74,12 @@ pub mod io {\n         /// descriptor. The returned object will take responsibility for closing\n         /// it when the object goes out of scope.\n         ///\n-        /// Callers should normally only pass in a valid file descriptor to this\n-        /// method or otherwise methods will return errors.\n-        fn from_raw_fd(fd: RawFd) -> Self;\n+        /// This function is also unsafe as the primitives currently returned\n+        /// have the contract that they are the sole owner of the file\n+        /// descriptor they are wrapping. Usage of this function could\n+        /// accidentally allow violating this contract which can cause memory\n+        /// unsafety in code that relies on it being true.\n+        unsafe fn from_raw_fd(fd: RawFd) -> Self;\n     }\n \n     #[allow(deprecated)]\n@@ -95,7 +98,7 @@ pub mod io {\n     }\n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawFd for fs::File {\n-        fn from_raw_fd(fd: RawFd) -> fs::File {\n+        unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n             fs::File::from_inner(sys::fs2::File::from_inner(fd))\n         }\n     }\n@@ -179,21 +182,21 @@ pub mod io {\n \n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawFd for net::TcpStream {\n-        fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n+        unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n             let socket = sys::net::Socket::from_inner(fd);\n             net::TcpStream::from_inner(net2::TcpStream::from_inner(socket))\n         }\n     }\n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawFd for net::TcpListener {\n-        fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n+        unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n             let socket = sys::net::Socket::from_inner(fd);\n             net::TcpListener::from_inner(net2::TcpListener::from_inner(socket))\n         }\n     }\n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawFd for net::UdpSocket {\n-        fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n+        unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n             let socket = sys::net::Socket::from_inner(fd);\n             net::UdpSocket::from_inner(net2::UdpSocket::from_inner(socket))\n         }"}, {"sha": "5f6e74d4b7251461a2e75f059f16c441cf85e04f", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6a812402828f0f11b0de7a7e0c08c1d85a437f1/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a812402828f0f11b0de7a7e0c08c1d85a437f1/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=e6a812402828f0f11b0de7a7e0c08c1d85a437f1", "patch": "@@ -52,7 +52,13 @@ pub mod io {\n         /// This function will **consume ownership** of the handle given,\n         /// passing responsibility for closing the handle to the returned\n         /// object.\n-        fn from_raw_handle(handle: RawHandle) -> Self;\n+        ///\n+        /// This function is also unsafe as the primitives currently returned\n+        /// have the contract that they are the sole owner of the file\n+        /// descriptor they are wrapping. Usage of this function could\n+        /// accidentally allow violating this contract which can cause memory\n+        /// unsafety in code that relies on it being true.\n+        unsafe fn from_raw_handle(handle: RawHandle) -> Self;\n     }\n \n     #[allow(deprecated)]\n@@ -72,7 +78,7 @@ pub mod io {\n \n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawHandle for fs::File {\n-        fn from_raw_handle(handle: RawHandle) -> fs::File {\n+        unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n             fs::File::from_inner(sys::fs2::File::from_inner(handle))\n         }\n     }\n@@ -124,7 +130,13 @@ pub mod io {\n         ///\n         /// This function will **consume ownership** of the socket provided and\n         /// it will be closed when the returned object goes out of scope.\n-        fn from_raw_socket(sock: RawSocket) -> Self;\n+        ///\n+        /// This function is also unsafe as the primitives currently returned\n+        /// have the contract that they are the sole owner of the file\n+        /// descriptor they are wrapping. Usage of this function could\n+        /// accidentally allow violating this contract which can cause memory\n+        /// unsafety in code that relies on it being true.\n+        unsafe fn from_raw_socket(sock: RawSocket) -> Self;\n     }\n \n     #[allow(deprecated)]\n@@ -180,21 +192,21 @@ pub mod io {\n \n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawSocket for net::TcpStream {\n-        fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n+        unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n             let sock = sys::net::Socket::from_inner(sock);\n             net::TcpStream::from_inner(net2::TcpStream::from_inner(sock))\n         }\n     }\n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawSocket for net::TcpListener {\n-        fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n+        unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n             let sock = sys::net::Socket::from_inner(sock);\n             net::TcpListener::from_inner(net2::TcpListener::from_inner(sock))\n         }\n     }\n     #[unstable(feature = \"from_raw_os\", reason = \"trait is unstable\")]\n     impl FromRawSocket for net::UdpSocket {\n-        fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n+        unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n             let sock = sys::net::Socket::from_inner(sock);\n             net::UdpSocket::from_inner(net2::UdpSocket::from_inner(sock))\n         }"}]}