{"sha": "08f3685a82b337cf3359efa09b25826b8be4df04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZjM2ODVhODJiMzM3Y2YzMzU5ZWZhMDliMjU4MjZiOGJlNGRmMDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T01:08:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T15:08:49Z"}, "message": "Remove unnecessary TyKind::s", "tree": {"sha": "3c59413eb4fd625029698999a1059eeaec697f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c59413eb4fd625029698999a1059eeaec697f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f3685a82b337cf3359efa09b25826b8be4df04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f3685a82b337cf3359efa09b25826b8be4df04", "html_url": "https://github.com/rust-lang/rust/commit/08f3685a82b337cf3359efa09b25826b8be4df04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f3685a82b337cf3359efa09b25826b8be4df04/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5dccde2adca594db2ecd684484410139842c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5dccde2adca594db2ecd684484410139842c29", "html_url": "https://github.com/rust-lang/rust/commit/8a5dccde2adca594db2ecd684484410139842c29"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "ba04842ac7c0a1bcda1021f2682ca354eadbbceb", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -236,7 +236,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 self.handle_field_access(&lhs, expr.id);\n             }\n             hir::ExprKind::Struct(_, ref fields, _) => {\n-                if let ty::TyKind::Adt(ref adt, _) = self.tables.expr_ty(expr).sty {\n+                if let ty::Adt(ref adt, _) = self.tables.expr_ty(expr).sty {\n                     self.mark_as_used_if_union(adt, fields);\n                 }\n             }"}, {"sha": "0aa15a4ae0c2552db3ebab60dd5b9326a075563c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -802,7 +802,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let expected = match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n                     ty::Tuple(ref tys) => tys.iter()\n                         .map(|t| match t.sty {\n-                            ty::TyKind::Tuple(ref tys) => ArgKind::Tuple(\n+                            ty::Tuple(ref tys) => ArgKind::Tuple(\n                                 Some(span),\n                                 tys.iter()\n                                     .map(|ty| (\"_\".to_owned(), ty.sty.to_string()))\n@@ -899,7 +899,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             let mut trait_type = trait_ref.self_ty();\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::TyKind::Ref(_, t_type, _) = trait_type.sty {\n+                if let ty::Ref(_, t_type, _) = trait_type.sty {\n                     trait_type = t_type;\n \n                     let substs = self.tcx.mk_substs_trait(trait_type, &[]);"}, {"sha": "938cdf3048b1c47d9d87750919e0a0464844df54", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     UnpackedKind::Type(&ty::TyS {\n-                        sty: ty::TyKind::Param(ref pt), ..\n+                        sty: ty::Param(ref pt), ..\n                     }) => {\n                         !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }"}, {"sha": "a3ca329b92d7f5dcc1ae23707c6f147e456f0685", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -697,7 +697,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                              Some(nl.to_string()),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n-                    ty::TyKind::Closure(id, _) => {\n+                    ty::Closure(id, _) => {\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n                         if let Some((span, name)) = self.tables.closure_kind_origins().get(hir_id) {"}, {"sha": "f1df135f7ee8357a4bd05bc294b4c53d6523fe93", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -134,7 +134,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let Some(ty) = self.retrieve_type_for_place(place) {\n                 let needs_note = match ty.sty {\n-                    ty::TyKind::Closure(id, _) => {\n+                    ty::Closure(id, _) => {\n                         let tables = self.tcx.typeck_tables_of(id);\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);"}, {"sha": "ae68584f2446f617cf0c4440f273059049ead174", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::Lit(ref lt) => {\n                 let ty = self.check_expr(lt);\n                 match ty.sty {\n-                    ty::TyKind::Ref(..) => false,\n+                    ty::Ref(..) => false,\n                     _ => true,\n                 }\n             }\n@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             expected = loop {\n                 debug!(\"inspecting {:?} with type {:?}\", exp_ty, exp_ty.sty);\n                 match exp_ty.sty {\n-                    ty::TyKind::Ref(_, inner_ty, inner_mutability) => {\n+                    ty::Ref(_, inner_ty, inner_mutability) => {\n                         debug!(\"current discriminant is Ref, inserting implicit deref\");\n                         // Preserve the reference type. We'll need it later during HAIR lowering.\n                         pat_adjustments.push(exp_ty);"}, {"sha": "52e5e57f74759a64f9a18fffe86fe1b6db13048c", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -477,12 +477,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (RPtr(p), Int(_)) |\n             (RPtr(p), Float) => {\n                 match p.ty.sty {\n-                    ty::TyKind::Int(_) |\n-                    ty::TyKind::Uint(_) |\n-                    ty::TyKind::Float(_) => {\n+                    ty::Int(_) |\n+                    ty::Uint(_) |\n+                    ty::Float(_) => {\n                         Err(CastError::NeedDeref)\n                     }\n-                    ty::TyKind::Infer(t) => {\n+                    ty::Infer(t) => {\n                         match t {\n                             ty::InferTy::IntVar(_) |\n                             ty::InferTy::FloatVar(_) => Err(CastError::NeedDeref),"}, {"sha": "e7e371cd5678569fafbbc64bf074eaf495daf8df", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f3685a82b337cf3359efa09b25826b8be4df04/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=08f3685a82b337cf3359efa09b25826b8be4df04", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                                              .expect(\"Cannot get impl trait\");\n \n                     match trait_ref.self_ty().sty {\n-                        ty::TyParam(_) => {},\n+                        ty::Param(_) => {},\n                         _ => return,\n                     }\n "}]}