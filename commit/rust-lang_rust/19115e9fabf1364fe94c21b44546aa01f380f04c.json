{"sha": "19115e9fabf1364fe94c21b44546aa01f380f04c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MTE1ZTlmYWJmMTM2NGZlOTRjMjFiNDQ1NDZhYTAxZjM4MGYwNGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T10:38:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-04T10:55:25Z"}, "message": "Support cross-crate marks", "tree": {"sha": "a4986faf51c39bf9fd28a78525c9c1199f238ffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4986faf51c39bf9fd28a78525c9c1199f238ffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19115e9fabf1364fe94c21b44546aa01f380f04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19115e9fabf1364fe94c21b44546aa01f380f04c", "html_url": "https://github.com/rust-lang/rust/commit/19115e9fabf1364fe94c21b44546aa01f380f04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19115e9fabf1364fe94c21b44546aa01f380f04c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/437329d3f5b7bb5b703b93c75a97d349eb77d6c7", "html_url": "https://github.com/rust-lang/rust/commit/437329d3f5b7bb5b703b93c75a97d349eb77d6c7"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "87c2883469e153eac30578c8d14cb83c4ed2946c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -1068,6 +1068,7 @@ dependencies = [\n  \"rayon\",\n  \"rustc-hash\",\n  \"superslice\",\n+ \"test_utils\",\n ]\n \n [[package]]"}, {"sha": "a55a13ffcab043583383c92c36d48d9affd1f99a", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -96,7 +96,7 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::assert_eq_text;\n+    use test_utils::{assert_eq_text, covers};\n \n     use crate::mock_analysis::analysis_and_position;\n \n@@ -208,6 +208,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros() {\n+        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -224,6 +225,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros_from_other_crates() {\n+        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -335,6 +337,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_methods() {\n+        covers!(ra_ide_db::goto_def_for_methods);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -354,6 +357,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_fields() {\n+        covers!(ra_ide_db::goto_def_for_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -372,6 +376,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_fields() {\n+        covers!(ra_ide_db::goto_def_for_record_fields);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -784,6 +789,7 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n+        covers!(ra_ide_db::goto_def_for_field_init_shorthand);\n         check_goto(\n             \"\n             //- /lib.rs"}, {"sha": "7ff1a536e344572111d7081b6eadb09bb2f81b14", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -21,6 +21,7 @@ ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n ra_prof = { path = \"../ra_prof\" }\n+test_utils = { path = \"../test_utils\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "97961bb6d3446f010e2fd25eb752ed9658a15147", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -14,6 +14,7 @@ use ra_syntax::{\n     ast::{self, AstNode, VisibilityOwner},\n     match_ast,\n };\n+use test_utils::tested_by;\n \n use crate::RootDatabase;\n \n@@ -217,18 +218,22 @@ pub fn classify_name_ref(\n     let parent = name_ref.syntax().parent()?;\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n+        tested_by!(goto_def_for_methods; force);\n         if let Some(func) = sema.resolve_method_call(&method_call) {\n             return Some(NameRefClass::Definition(Definition::ModuleDef(func.into())));\n         }\n     }\n \n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n+        tested_by!(goto_def_for_fields; force);\n         if let Some(field) = sema.resolve_field(&field_expr) {\n             return Some(NameRefClass::Definition(Definition::StructField(field)));\n         }\n     }\n \n     if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n+        tested_by!(goto_def_for_record_fields; force);\n+        tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n             let field = Definition::StructField(field);\n             let res = match local {\n@@ -240,6 +245,7 @@ pub fn classify_name_ref(\n     }\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n+        tested_by!(goto_def_for_macros; force);\n         if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n             return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n         }"}, {"sha": "aa312c140344f3f159ef4406d850226008fe66ab", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -2,6 +2,7 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n+pub mod marks;\n pub mod line_index;\n pub mod line_index_utils;\n pub mod feature_flags;"}, {"sha": "d088fa2577fae333bcff09feeca7f86fedcf03e1", "filename": "crates/ra_ide_db/src/marks.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -0,0 +1,9 @@\n+//! See test_utils/src/marks.rs\n+\n+test_utils::marks![\n+    goto_def_for_macros\n+    goto_def_for_methods\n+    goto_def_for_fields\n+    goto_def_for_record_fields\n+    goto_def_for_field_init_shorthand\n+];"}, {"sha": "c3185e860c86ddbf49a922098ab1a6c78f476100", "filename": "crates/test_utils/src/marks.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19115e9fabf1364fe94c21b44546aa01f380f04c/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fmarks.rs?ref=19115e9fabf1364fe94c21b44546aa01f380f04c", "patch": "@@ -30,6 +30,12 @@ use std::sync::atomic::{AtomicUsize, Ordering};\n \n #[macro_export]\n macro_rules! tested_by {\n+    ($ident:ident; force) => {{\n+        {\n+            // sic! use call-site crate\n+            crate::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n+        }\n+    }};\n     ($ident:ident) => {{\n         #[cfg(test)]\n         {\n@@ -41,9 +47,12 @@ macro_rules! tested_by {\n \n #[macro_export]\n macro_rules! covers {\n+    // sic! use call-site crate\n     ($ident:ident) => {\n-        // sic! use call-site crate\n-        let _checker = $crate::marks::MarkChecker::new(&crate::marks::$ident);\n+        $crate::covers!(crate::$ident)\n+    };\n+    ($krate:ident :: $ident:ident) => {\n+        let _checker = $crate::marks::MarkChecker::new(&$krate::marks::$ident);\n     };\n }\n \n@@ -52,7 +61,7 @@ macro_rules! marks {\n     ($($ident:ident)*) => {\n         $(\n         #[allow(bad_style)]\n-        pub(crate) static $ident: std::sync::atomic::AtomicUsize =\n+        pub static $ident: std::sync::atomic::AtomicUsize =\n             std::sync::atomic::AtomicUsize::new(0);\n         )*\n     };"}]}