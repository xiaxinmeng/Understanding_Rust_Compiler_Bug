{"sha": "7dc186ff7efd4526316fe48845dad581706ea529", "node_id": "C_kwDOAAsO6NoAKDdkYzE4NmZmN2VmZDQ1MjYzMTZmZTQ4ODQ1ZGFkNTgxNzA2ZWE1Mjk", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-14T17:28:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-01T13:54:52Z"}, "message": "rustc_target: Add a compatibility layer to separate internal and user-facing linker flavors", "tree": {"sha": "b108a814979ab84e2c43108ff209bbd2fc3c6d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b108a814979ab84e2c43108ff209bbd2fc3c6d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc186ff7efd4526316fe48845dad581706ea529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc186ff7efd4526316fe48845dad581706ea529", "html_url": "https://github.com/rust-lang/rust/commit/7dc186ff7efd4526316fe48845dad581706ea529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc186ff7efd4526316fe48845dad581706ea529/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9898a7947059433d08357cdaaba84c4705873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9898a7947059433d08357cdaaba84c4705873d", "html_url": "https://github.com/rust-lang/rust/commit/4f9898a7947059433d08357cdaaba84c4705873d"}], "stats": {"total": 213, "additions": 152, "deletions": 61}, "files": [{"sha": "efad767edef22b92ba27b2e34dd838a8e7c2ba0b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7dc186ff7efd4526316fe48845dad581706ea529", "patch": "@@ -1236,7 +1236,8 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n+    let linker_flavor = sess.opts.cg.linker_flavor.map(LinkerFlavor::from_cli);\n+    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }\n "}, {"sha": "c894b20e1a7da7af2687ec40f59700e12b949e58", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=7dc186ff7efd4526316fe48845dad581706ea529", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n+use rustc_target::spec::{LinkerFlavorCli, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n@@ -2379,7 +2379,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n-    if cg.linker_flavor == Some(LinkerFlavor::L4Bender)\n+    if cg.linker_flavor == Some(LinkerFlavorCli::L4Bender)\n         && !nightly_options::is_unstable_enabled(matches)\n     {\n         early_error("}, {"sha": "9f07394b61ab8fc0808ee5397d4bfd7e20b5deec", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=7dc186ff7efd4526316fe48845dad581706ea529", "patch": "@@ -5,7 +5,7 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n use rustc_errors::LanguageIdentifier;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n     RelocModel, RelroLevel, SplitDebuginfo, StackProtector, TargetTriple, TlsModel,\n };\n@@ -382,7 +382,7 @@ mod desc {\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n     pub const parse_cfprotection: &str = \"`none`|`no`|`n` (default), `branch`, `return`, or `full`|`yes`|`y` (equivalent to `branch` and `return`)\";\n     pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n-    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n+    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n     pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n     pub const parse_instrument_coverage: &str =\n@@ -763,8 +763,8 @@ mod parse {\n         true\n     }\n \n-    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n-        match v.and_then(LinkerFlavor::from_str) {\n+    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavorCli>, v: Option<&str>) -> bool {\n+        match v.and_then(LinkerFlavorCli::from_str) {\n             Some(lf) => *slot = Some(lf),\n             _ => return false,\n         }\n@@ -1139,7 +1139,7 @@ options! {\n         on C toolchain installed in the system\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n-    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n+    linker_flavor: Option<LinkerFlavorCli> = (None, parse_linker_flavor, [UNTRACKED],\n         \"linker flavor\"),\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],"}, {"sha": "168fd154cf001ccc97a034fedc66f05787c84769", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 139, "deletions": 51, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=7dc186ff7efd4526316fe48845dad581706ea529", "patch": "@@ -102,6 +102,18 @@ pub enum LinkerFlavor {\n     BpfLinker,\n }\n \n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub enum LinkerFlavorCli {\n+    Em,\n+    Gcc,\n+    L4Bender,\n+    Ld,\n+    Msvc,\n+    Lld(LldFlavor),\n+    PtxLinker,\n+    BpfLinker,\n+}\n+\n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LldFlavor {\n     Wasm,\n@@ -137,14 +149,37 @@ impl ToJson for LldFlavor {\n     }\n }\n \n-impl ToJson for LinkerFlavor {\n-    fn to_json(&self) -> Json {\n-        self.desc().to_json()\n+impl LinkerFlavor {\n+    pub fn from_cli(cli: LinkerFlavorCli) -> LinkerFlavor {\n+        match cli {\n+            LinkerFlavorCli::Em => LinkerFlavor::Em,\n+            LinkerFlavorCli::Gcc => LinkerFlavor::Gcc,\n+            LinkerFlavorCli::L4Bender => LinkerFlavor::L4Bender,\n+            LinkerFlavorCli::Ld => LinkerFlavor::Ld,\n+            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n+            LinkerFlavorCli::Lld(lld_flavor) => LinkerFlavor::Lld(lld_flavor),\n+            LinkerFlavorCli::PtxLinker => LinkerFlavor::PtxLinker,\n+            LinkerFlavorCli::BpfLinker => LinkerFlavor::BpfLinker,\n+        }\n+    }\n+\n+    fn to_cli(self) -> LinkerFlavorCli {\n+        match self {\n+            LinkerFlavor::Em => LinkerFlavorCli::Em,\n+            LinkerFlavor::Gcc => LinkerFlavorCli::Gcc,\n+            LinkerFlavor::L4Bender => LinkerFlavorCli::L4Bender,\n+            LinkerFlavor::Ld => LinkerFlavorCli::Ld,\n+            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n+            LinkerFlavor::Lld(lld_flavor) => LinkerFlavorCli::Lld(lld_flavor),\n+            LinkerFlavor::PtxLinker => LinkerFlavorCli::PtxLinker,\n+            LinkerFlavor::BpfLinker => LinkerFlavorCli::BpfLinker,\n+        }\n     }\n }\n+\n macro_rules! flavor_mappings {\n     ($((($($flavor:tt)*), $string:expr),)*) => (\n-        impl LinkerFlavor {\n+        impl LinkerFlavorCli {\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n@@ -166,17 +201,23 @@ macro_rules! flavor_mappings {\n }\n \n flavor_mappings! {\n-    ((LinkerFlavor::Em), \"em\"),\n-    ((LinkerFlavor::Gcc), \"gcc\"),\n-    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n-    ((LinkerFlavor::Ld), \"ld\"),\n-    ((LinkerFlavor::Msvc), \"msvc\"),\n-    ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n-    ((LinkerFlavor::BpfLinker), \"bpf-linker\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n+    ((LinkerFlavorCli::Em), \"em\"),\n+    ((LinkerFlavorCli::Gcc), \"gcc\"),\n+    ((LinkerFlavorCli::L4Bender), \"l4-bender\"),\n+    ((LinkerFlavorCli::Ld), \"ld\"),\n+    ((LinkerFlavorCli::Msvc), \"msvc\"),\n+    ((LinkerFlavorCli::PtxLinker), \"ptx-linker\"),\n+    ((LinkerFlavorCli::BpfLinker), \"bpf-linker\"),\n+    ((LinkerFlavorCli::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n+    ((LinkerFlavorCli::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n+    ((LinkerFlavorCli::Lld(LldFlavor::Ld)), \"ld.lld\"),\n+    ((LinkerFlavorCli::Lld(LldFlavor::Link)), \"lld-link\"),\n+}\n+\n+impl ToJson for LinkerFlavorCli {\n+    fn to_json(&self) -> Json {\n+        self.desc().to_json()\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash, Encodable, Decodable, HashStable_Generic)]\n@@ -467,6 +508,7 @@ impl fmt::Display for LinkOutputKind {\n }\n \n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n+pub type LinkArgsCli = BTreeMap<LinkerFlavorCli, Vec<StaticCow<str>>>;\n \n /// Which kind of debuginfo does the target use?\n ///\n@@ -1213,6 +1255,7 @@ pub struct TargetOptions {\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n+    linker_flavor_json: LinkerFlavorCli,\n \n     /// Linker to invoke\n     pub linker: Option<StaticCow<str>>,\n@@ -1223,6 +1266,7 @@ pub struct TargetOptions {\n \n     /// Linker arguments that are passed *before* any user-defined libraries.\n     pub pre_link_args: LinkArgs,\n+    pre_link_args_json: LinkArgsCli,\n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n     pub post_link_objects: CrtObjects,\n@@ -1235,15 +1279,19 @@ pub struct TargetOptions {\n     /// user-defined but before post-link objects. Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n+    late_link_args_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if at least one\n     /// Rust dependency is dynamically linked.\n     pub late_link_args_dynamic: LinkArgs,\n+    late_link_args_dynamic_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if all Rust\n     /// dependencies are statically linked.\n     pub late_link_args_static: LinkArgs,\n+    late_link_args_static_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    post_link_args_json: LinkArgsCli,\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n@@ -1554,6 +1602,36 @@ impl TargetOptions {\n     fn add_post_link_args(&mut self, flavor: LinkerFlavor, args: &[&'static str]) {\n         add_link_args(&mut self.post_link_args, flavor, args);\n     }\n+\n+    fn update_from_cli(&mut self) {\n+        self.linker_flavor = LinkerFlavor::from_cli(self.linker_flavor_json);\n+        for (args, args_json) in [\n+            (&mut self.pre_link_args, &self.pre_link_args_json),\n+            (&mut self.late_link_args, &self.late_link_args_json),\n+            (&mut self.late_link_args_dynamic, &self.late_link_args_dynamic_json),\n+            (&mut self.late_link_args_static, &self.late_link_args_static_json),\n+            (&mut self.post_link_args, &self.post_link_args_json),\n+        ] {\n+            *args = args_json\n+                .iter()\n+                .map(|(flavor, args)| (LinkerFlavor::from_cli(*flavor), args.clone()))\n+                .collect();\n+        }\n+    }\n+\n+    fn update_to_cli(&mut self) {\n+        self.linker_flavor_json = self.linker_flavor.to_cli();\n+        for (args, args_json) in [\n+            (&self.pre_link_args, &mut self.pre_link_args_json),\n+            (&self.late_link_args, &mut self.late_link_args_json),\n+            (&self.late_link_args_dynamic, &mut self.late_link_args_dynamic_json),\n+            (&self.late_link_args_static, &mut self.late_link_args_static_json),\n+            (&self.post_link_args, &mut self.post_link_args_json),\n+        ] {\n+            *args_json =\n+                args.iter().map(|(flavor, args)| (flavor.to_cli(), args.clone())).collect();\n+        }\n+    }\n }\n \n impl Default for TargetOptions {\n@@ -1569,10 +1647,13 @@ impl Default for TargetOptions {\n             abi: \"\".into(),\n             vendor: \"unknown\".into(),\n             linker_flavor: LinkerFlavor::Gcc,\n+            linker_flavor_json: LinkerFlavorCli::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n             lld_flavor: LldFlavor::Ld,\n             pre_link_args: LinkArgs::new(),\n+            pre_link_args_json: LinkArgsCli::new(),\n             post_link_args: LinkArgs::new(),\n+            post_link_args_json: LinkArgsCli::new(),\n             link_script: None,\n             asm_args: cvs![],\n             cpu: \"generic\".into(),\n@@ -1613,8 +1694,11 @@ impl Default for TargetOptions {\n             post_link_objects_self_contained: Default::default(),\n             link_self_contained: LinkSelfContainedDefault::False,\n             late_link_args: LinkArgs::new(),\n+            late_link_args_json: LinkArgsCli::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n+            late_link_args_dynamic_json: LinkArgsCli::new(),\n             late_link_args_static: LinkArgs::new(),\n+            late_link_args_static_json: LinkArgsCli::new(),\n             link_env: cvs![],\n             link_env_remove: cvs![],\n             archive_format: \"gnu\".into(),\n@@ -2019,13 +2103,13 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n-            ($key_name:ident, LinkerFlavor) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n-                    match LinkerFlavor::from_str(s) {\n+            ($key_name:ident = $json_name:expr, LinkerFlavor) => ( {\n+                let name = $json_name;\n+                obj.remove(name).and_then(|o| o.as_str().and_then(|s| {\n+                    match LinkerFlavorCli::from_str(s) {\n                         Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n-                                                      Use {}\", s, LinkerFlavor::one_of()))),\n+                                                      Use {}\", s, LinkerFlavorCli::one_of()))),\n                     }\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n@@ -2106,14 +2190,14 @@ impl Target {\n                     base.$key_name = args;\n                 }\n             } );\n-            ($key_name:ident, link_args) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove(&name) {\n+            ($key_name:ident = $json_name:expr, link_args) => ( {\n+                let name = $json_name;\n+                if let Some(val) = obj.remove(name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per linker-flavor.\", name))?;\n-                    let mut args = LinkArgs::new();\n+                    let mut args = LinkArgsCli::new();\n                     for (k, v) in obj {\n-                        let flavor = LinkerFlavor::from_str(&k).ok_or_else(|| {\n+                        let flavor = LinkerFlavorCli::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for linker-flavor. \\\n                                      Use 'em', 'gcc', 'ld' or 'msvc'\", name, k)\n                         })?;\n@@ -2199,19 +2283,19 @@ impl Target {\n         key!(env);\n         key!(abi);\n         key!(vendor);\n-        key!(linker_flavor, LinkerFlavor)?;\n+        key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n         key!(linker, optional);\n         key!(lld_flavor, LldFlavor)?;\n         key!(pre_link_objects = \"pre-link-objects\", link_objects);\n         key!(post_link_objects = \"post-link-objects\", link_objects);\n         key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n         key!(post_link_objects_self_contained = \"post-link-objects-fallback\", link_objects);\n         key!(link_self_contained = \"crt-objects-fallback\", link_self_contained)?;\n-        key!(pre_link_args, link_args);\n-        key!(late_link_args, link_args);\n-        key!(late_link_args_dynamic, link_args);\n-        key!(late_link_args_static, link_args);\n-        key!(post_link_args, link_args);\n+        key!(pre_link_args_json = \"pre-link-args\", link_args);\n+        key!(late_link_args_json = \"late-link-args\", link_args);\n+        key!(late_link_args_dynamic_json = \"late-link-args-dynamic\", link_args);\n+        key!(late_link_args_static_json = \"late-link-args-static\", link_args);\n+        key!(post_link_args_json = \"post-link-args\", link_args);\n         key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n@@ -2296,6 +2380,8 @@ impl Target {\n             // This can cause unfortunate ICEs later down the line.\n             return Err(\"may not set is_builtin for targets not built-in\".into());\n         }\n+        base.update_from_cli();\n+\n         // Each field should have been read using `Json::remove` so any keys remaining are unused.\n         let remaining_keys = obj.keys();\n         Ok((\n@@ -2387,42 +2473,44 @@ impl ToJson for Target {\n     fn to_json(&self) -> Json {\n         let mut d = serde_json::Map::new();\n         let default: TargetOptions = Default::default();\n+        let mut target = self.clone();\n+        target.update_to_cli();\n \n         macro_rules! target_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                d.insert(name, self.$attr.to_json());\n+                d.insert(name, target.$attr.to_json());\n             }};\n         }\n \n         macro_rules! target_option_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    d.insert(name, self.$attr.to_json());\n+                if default.$attr != target.$attr {\n+                    d.insert(name, target.$attr.to_json());\n                 }\n             }};\n-            ($attr:ident, $key_name:expr) => {{\n-                let name = $key_name;\n-                if default.$attr != self.$attr {\n-                    d.insert(name.into(), self.$attr.to_json());\n+            ($attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    d.insert(name.into(), target.$attr.to_json());\n                 }\n             }};\n-            (link_args - $attr:ident) => {{\n-                let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+            (link_args - $attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_string(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n-                    d.insert(name, obj.to_json());\n+                    d.insert(name.to_string(), obj.to_json());\n                 }\n             }};\n             (env - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|&(ref k, ref v)| format!(\"{k}={v}\"))\n@@ -2444,19 +2532,19 @@ impl ToJson for Target {\n         target_option_val!(env);\n         target_option_val!(abi);\n         target_option_val!(vendor);\n-        target_option_val!(linker_flavor);\n+        target_option_val!(linker_flavor_json, \"linker-flavor\");\n         target_option_val!(linker);\n         target_option_val!(lld_flavor);\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n         target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");\n         target_option_val!(post_link_objects_self_contained, \"post-link-objects-fallback\");\n         target_option_val!(link_self_contained, \"crt-objects-fallback\");\n-        target_option_val!(link_args - pre_link_args);\n-        target_option_val!(link_args - late_link_args);\n-        target_option_val!(link_args - late_link_args_dynamic);\n-        target_option_val!(link_args - late_link_args_static);\n-        target_option_val!(link_args - post_link_args);\n+        target_option_val!(link_args - pre_link_args_json, \"pre-link-args\");\n+        target_option_val!(link_args - late_link_args_json, \"late-link-args\");\n+        target_option_val!(link_args - late_link_args_dynamic_json, \"late-link-args-dynamic\");\n+        target_option_val!(link_args - late_link_args_static_json, \"late-link-args-static\");\n+        target_option_val!(link_args - post_link_args_json, \"post-link-args\");\n         target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);"}, {"sha": "244f8262428502897ec26664fa9026da08ad4ffd", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc186ff7efd4526316fe48845dad581706ea529/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=7dc186ff7efd4526316fe48845dad581706ea529", "patch": "@@ -2,9 +2,11 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(target: Target, triple: &str) {\n+pub(super) fn test_target(mut target: Target, triple: &str) {\n+    let recycled_target = Target::from_json(target.to_json()).map(|(j, _)| j);\n+    target.update_to_cli();\n     target.check_consistency(triple);\n-    assert_eq!(Target::from_json(target.to_json()).map(|(j, _)| j), Ok(target));\n+    assert_eq!(recycled_target, Ok(target));\n }\n \n impl Target {"}]}