{"sha": "77263db96f30a5bc2c4b74d0546803ad9d79b865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MjYzZGI5NmYzMGE1YmMyYzRiNzRkMDU0NjgwM2FkOWQ3OWI4NjU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-13T19:03:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T19:03:31Z"}, "message": "Rollup merge of #69954 - RalfJung:panic_if-assert, r=Centril,eddyb\n\nrename panic_if_ intrinsics to assert_\n\n[Suggested by @eddyb](https://github.com/rust-lang/miri/issues/1222#issuecomment-598087523)", "tree": {"sha": "ff45923861f82fc8b1979d3fe906b8f2dfdfd11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff45923861f82fc8b1979d3fe906b8f2dfdfd11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77263db96f30a5bc2c4b74d0546803ad9d79b865", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea9kDCRBK7hj4Ov3rIwAAdHIIAC9vDnxAaGXhXrn7+x62HPTH\nCAzuIPUiwiWsIaZsAPXeLxQ5LgHNr5UCBcCrjEynFVOKm5bqk7ioy5/n6oPk8eKT\n7CQIfjeSBgw63AowR5k5GATfuV+4LZkN9dwExOWe8b20j0m+9G+0jWz9fqjINIBN\nGvs+QZebFB+YfgGnG1X+tfSmL0nkNdTuaJ7aL4MImrghTfkunoCB984nzYiHY6ll\nsYA+Az2K9i/pBh9Z1jwa1CBWEDx4qYdrtsD1+4mwAo+BXCaaueQALgPxO7RHspwu\nAuRy8c2AydA6gGEJf8VtNnuPpklrN8rJCJji+2/NJcJajkaGNVus7hdJ51rg5J8=\n=0DR5\n-----END PGP SIGNATURE-----\n", "payload": "tree ff45923861f82fc8b1979d3fe906b8f2dfdfd11a\nparent 995e58467820e01562e8322d26281e042567c641\nparent f61fb53af40daf55764f2f2644604fd22498cb13\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1584126211 +0900\ncommitter GitHub <noreply@github.com> 1584126211 +0900\n\nRollup merge of #69954 - RalfJung:panic_if-assert, r=Centril,eddyb\n\nrename panic_if_ intrinsics to assert_\n\n[Suggested by @eddyb](https://github.com/rust-lang/miri/issues/1222#issuecomment-598087523)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77263db96f30a5bc2c4b74d0546803ad9d79b865", "html_url": "https://github.com/rust-lang/rust/commit/77263db96f30a5bc2c4b74d0546803ad9d79b865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77263db96f30a5bc2c4b74d0546803ad9d79b865/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995e58467820e01562e8322d26281e042567c641", "url": "https://api.github.com/repos/rust-lang/rust/commits/995e58467820e01562e8322d26281e042567c641", "html_url": "https://github.com/rust-lang/rust/commit/995e58467820e01562e8322d26281e042567c641"}, {"sha": "f61fb53af40daf55764f2f2644604fd22498cb13", "url": "https://api.github.com/repos/rust-lang/rust/commits/f61fb53af40daf55764f2f2644604fd22498cb13", "html_url": "https://github.com/rust-lang/rust/commit/f61fb53af40daf55764f2f2644604fd22498cb13"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "953b7a986514d36a89e173f302fe09fa6ee21452", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=77263db96f30a5bc2c4b74d0546803ad9d79b865", "patch": "@@ -1005,17 +1005,23 @@ extern \"rust-intrinsic\" {\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n+    #[cfg(bootstrap)]\n     pub fn panic_if_uninhabited<T>();\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n+    /// This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn assert_inhabited<T>();\n+\n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n     #[cfg(not(bootstrap))]\n-    pub fn panic_if_zero_invalid<T>();\n+    pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     #[cfg(not(bootstrap))]\n-    pub fn panic_if_any_invalid<T>();\n+    pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]"}, {"sha": "bf39d56fc115c6e8bea5760a28a877e0a3d1a25f", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=77263db96f30a5bc2c4b74d0546803ad9d79b865", "patch": "@@ -495,7 +495,10 @@ impl<T> MaybeUninit<T> {\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     pub unsafe fn assume_init(self) -> T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n \n@@ -559,7 +562,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub unsafe fn read(&self) -> T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         self.as_ptr().read()\n     }\n \n@@ -621,7 +627,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         &*self.value\n     }\n \n@@ -739,7 +748,10 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n+        #[cfg(bootstrap)]\n         intrinsics::panic_if_uninhabited::<T>();\n+        #[cfg(not(bootstrap))]\n+        intrinsics::assert_inhabited::<T>();\n         &mut *self.value\n     }\n "}, {"sha": "e65150af59f81ab96f86fd749f63b3158fca9b2c", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=77263db96f30a5bc2c4b74d0546803ad9d79b865", "patch": "@@ -497,7 +497,7 @@ pub const fn needs_drop<T>() -> bool {\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n     #[cfg(not(bootstrap))]\n-    intrinsics::panic_if_zero_invalid::<T>();\n+    intrinsics::assert_zero_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n@@ -533,7 +533,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n     #[cfg(not(bootstrap))]\n-    intrinsics::panic_if_any_invalid::<T>();\n+    intrinsics::assert_uninit_valid::<T>();\n     #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()"}, {"sha": "798d22ccd764cb4f8ad1e16fd82777ecbc8762e8", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=77263db96f30a5bc2c4b74d0546803ad9d79b865", "patch": "@@ -449,38 +449,38 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n     ) -> bool {\n-        // Emit a panic or a no-op for `panic_if_uninhabited`.\n+        // Emit a panic or a no-op for `assert_*` intrinsics.\n         // These are intrinsics that compile to panics so that we can get a message\n         // which mentions the offending type, even from a const context.\n         #[derive(Debug, PartialEq)]\n-        enum PanicIntrinsic {\n-            IfUninhabited,\n-            IfZeroInvalid,\n-            IfAnyInvalid,\n+        enum AssertIntrinsic {\n+            Inhabited,\n+            ZeroValid,\n+            UninitValid,\n         };\n         let panic_intrinsic = intrinsic.and_then(|i| match i {\n             // FIXME: Move to symbols instead of strings.\n-            \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n-            \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n-            \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            \"assert_inhabited\" => Some(AssertIntrinsic::Inhabited),\n+            \"assert_zero_valid\" => Some(AssertIntrinsic::ZeroValid),\n+            \"assert_uninit_valid\" => Some(AssertIntrinsic::UninitValid),\n             _ => None,\n         });\n         if let Some(intrinsic) = panic_intrinsic {\n-            use PanicIntrinsic::*;\n+            use AssertIntrinsic::*;\n             let ty = instance.unwrap().substs.type_at(0);\n             let layout = bx.layout_of(ty);\n             let do_panic = match intrinsic {\n-                IfUninhabited => layout.abi.is_uninhabited(),\n+                Inhabited => layout.abi.is_uninhabited(),\n                 // We unwrap as the error type is `!`.\n-                IfZeroInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n+                ZeroValid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n                 // We unwrap as the error type is `!`.\n-                IfAnyInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n+                UninitValid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n             };\n             if do_panic {\n                 let msg_str = if layout.abi.is_uninhabited() {\n                     // Use this error even for the other intrinsics as it is more precise.\n                     format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                } else if intrinsic == IfZeroInvalid {\n+                } else if intrinsic == ZeroValid {\n                     format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n                 } else {\n                     format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)"}, {"sha": "dac67c2f5a27d6de650fffc1a9b7788ae3aac6cf", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77263db96f30a5bc2c4b74d0546803ad9d79b865/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=77263db96f30a5bc2c4b74d0546803ad9d79b865", "patch": "@@ -147,7 +147,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             ),\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n-            \"panic_if_uninhabited\" | \"panic_if_zero_invalid\" | \"panic_if_any_invalid\" => {\n+            \"assert_inhabited\" | \"assert_zero_valid\" | \"assert_uninit_valid\" => {\n                 (1, Vec::new(), tcx.mk_unit())\n             }\n             \"init\" => (1, Vec::new(), param(0)),"}]}