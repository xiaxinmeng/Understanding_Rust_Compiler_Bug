{"sha": "96236a9be542be461550083373be3d0cb0bd8406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MjM2YTliZTU0MmJlNDYxNTUwMDgzMzczYmUzZDBjYjBiZDg0MDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T11:21:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T11:21:29Z"}, "message": "assist to convert if-let to match", "tree": {"sha": "82cfc789fcfeea452e6fb729c6af3d7c840be173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82cfc789fcfeea452e6fb729c6af3d7c840be173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96236a9be542be461550083373be3d0cb0bd8406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96236a9be542be461550083373be3d0cb0bd8406", "html_url": "https://github.com/rust-lang/rust/commit/96236a9be542be461550083373be3d0cb0bd8406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96236a9be542be461550083373be3d0cb0bd8406/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0948a509e8f6ec7cbb5e2ef77669325fee0637", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0948a509e8f6ec7cbb5e2ef77669325fee0637", "html_url": "https://github.com/rust-lang/rust/commit/1e0948a509e8f6ec7cbb5e2ef77669325fee0637"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "f839f6a7aba342054e1ee9ddc2e5712a7b92cc04", "filename": "crates/ra_editor/src/assists.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fassists.rs?ref=96236a9be542be461550083373be3d0cb0bd8406", "patch": "@@ -9,12 +9,15 @@ mod add_impl;\n mod introduce_variable;\n mod change_visibility;\n mod split_import;\n+mod replace_if_let_with_match;\n \n use ra_text_edit::{TextEdit, TextEditBuilder};\n use ra_syntax::{\n     Direction, SyntaxNode, TextUnit, TextRange, SourceFile, AstNode,\n     algo::{find_leaf_at_offset, find_covering_node, LeafAtOffset},\n+    ast::{self, AstToken},\n };\n+use itertools::Itertools;\n \n use crate::find_node_at_offset;\n \n@@ -25,6 +28,7 @@ pub use self::{\n     introduce_variable::introduce_variable,\n     change_visibility::change_visibility,\n     split_import::split_import,\n+    replace_if_let_with_match::replace_if_let_with_match,\n };\n \n /// Return all the assists applicable at the given position.\n@@ -37,6 +41,7 @@ pub fn assists(file: &SourceFile, range: TextRange) -> Vec<LocalEdit> {\n         introduce_variable,\n         change_visibility,\n         split_import,\n+        replace_if_let_with_match,\n     ]\n     .iter()\n     .filter_map(|&assist| ctx.clone().apply(assist))\n@@ -160,6 +165,13 @@ impl AssistBuilder {\n     fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n     }\n+    fn replace_node_and_indent(&mut self, node: &SyntaxNode, replace_with: impl Into<String>) {\n+        let mut replace_with = replace_with.into();\n+        if let Some(indent) = calc_indent(node) {\n+            replace_with = reindent(&replace_with, indent)\n+        }\n+        self.replace(node.range(), replace_with)\n+    }\n     #[allow(unused)]\n     fn delete(&mut self, range: TextRange) {\n         self.edit.delete(range)\n@@ -172,6 +184,17 @@ impl AssistBuilder {\n     }\n }\n \n+fn calc_indent(node: &SyntaxNode) -> Option<&str> {\n+    let prev = node.prev_sibling()?;\n+    let ws_text = ast::Whitespace::cast(prev)?.text();\n+    ws_text.rfind('\\n').map(|pos| &ws_text[pos + 1..])\n+}\n+\n+fn reindent(text: &str, indent: &str) -> String {\n+    let indent = format!(\"\\n{}\", indent);\n+    text.lines().intersperse(&indent).collect()\n+}\n+\n #[cfg(test)]\n fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n     crate::test_utils::check_action(before, after, |file, off| {"}, {"sha": "30c37148010d3ea7fbeaac6a36bf576fb36d4b55", "filename": "crates/ra_editor/src/assists/replace_if_let_with_match.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=96236a9be542be461550083373be3d0cb0bd8406", "patch": "@@ -0,0 +1,92 @@\n+use ra_syntax::{\n+    AstNode, SyntaxKind::{L_CURLY, R_CURLY, WHITESPACE},\n+    ast,\n+};\n+\n+use crate::assists::{AssistCtx, Assist};\n+\n+pub fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n+    let if_expr: &ast::IfExpr = ctx.node_at_offset()?;\n+    let cond = if_expr.condition()?;\n+    let pat = cond.pat()?;\n+    let expr = cond.expr()?;\n+    let then_block = if_expr.then_branch()?;\n+    let else_block = if_expr.else_branch()?;\n+\n+    ctx.build(\"replace with match\", |edit| {\n+        let match_expr = build_match_expr(expr, pat, then_block, else_block);\n+        edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n+        edit.set_cursor(if_expr.syntax().range().start())\n+    })\n+}\n+\n+fn build_match_expr(\n+    expr: &ast::Expr,\n+    pat1: &ast::Pat,\n+    arm1: &ast::Block,\n+    arm2: &ast::Block,\n+) -> String {\n+    let mut buf = String::new();\n+    buf.push_str(&format!(\"match {} {{\\n\", expr.syntax().text()));\n+    buf.push_str(&format!(\n+        \"    {} => {}\\n\",\n+        pat1.syntax().text(),\n+        format_arm(arm1)\n+    ));\n+    buf.push_str(&format!(\"    _ => {}\\n\", format_arm(arm2)));\n+    buf.push_str(\"}\");\n+    buf\n+}\n+\n+fn format_arm(block: &ast::Block) -> String {\n+    match extract_expression(block) {\n+        None => block.syntax().text().to_string(),\n+        Some(e) => format!(\"{},\", e.syntax().text()),\n+    }\n+}\n+\n+fn extract_expression(block: &ast::Block) -> Option<&ast::Expr> {\n+    let expr = block.expr()?;\n+    let non_trivial_children = block.syntax().children().filter(|it| {\n+        !(it == &expr.syntax()\n+            || it.kind() == L_CURLY\n+            || it.kind() == R_CURLY\n+            || it.kind() == WHITESPACE)\n+    });\n+    if non_trivial_children.count() > 0 {\n+        return None;\n+    }\n+    Some(expr)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::assists::check_assist;\n+\n+    #[test]\n+    fn test_replace_if_let_with_match_unwraps_simple_expressions() {\n+        check_assist(\n+            replace_if_let_with_match,\n+            \"\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if <|>let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}           \",\n+            \"\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        <|>match *self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+}           \",\n+        )\n+    }\n+}"}, {"sha": "dc2470aa30b522aedb2f8eb6e559efd864fdc79e", "filename": "crates/ra_editor/src/test_utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs?ref=96236a9be542be461550083373be3d0cb0bd8406", "patch": "@@ -13,7 +13,10 @@ pub fn check_action<F: Fn(&SourceFile, TextUnit) -> Option<LocalEdit>>(\n     let result = f(&file, before_cursor_pos).expect(\"code action is not applicable\");\n     let actual = result.edit.apply(&before);\n     let actual_cursor_pos = match result.cursor_position {\n-        None => result.edit.apply_to_offset(before_cursor_pos).unwrap(),\n+        None => result\n+            .edit\n+            .apply_to_offset(before_cursor_pos)\n+            .expect(\"cursor position is affected by the edit\"),\n         Some(off) => off,\n     };\n     let actual = add_cursor(&actual, actual_cursor_pos);"}, {"sha": "d25b5642b0b1ef0d6d56217cfc3cf1c7d260631e", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96236a9be542be461550083373be3d0cb0bd8406/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=96236a9be542be461550083373be3d0cb0bd8406", "patch": "@@ -225,7 +225,7 @@ impl Whitespace {\n     }\n \n     pub fn has_newlines(&self) -> bool {\n-        self.count_newlines_lazy().count() > 0\n+        self.text().contains('\\n')\n     }\n }\n "}]}