{"sha": "e881d655c4ea13649d60013a0d62ec2ec59d3797", "node_id": "C_kwDOAAsO6NoAKGU4ODFkNjU1YzRlYTEzNjQ5ZDYwMDEzYTBkNjJlYzJlYzU5ZDM3OTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-08T15:40:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-08T15:40:50Z"}, "message": "Rollup merge of #93732 - lcnr:hrlt-backcompa, r=Mark-Simulacrum\n\nadd fut/back compat tests for implied trait bounds\n\nthe `guard` test was tested to cause a segfault with `-Zchalk`, very nice\n\ncc ``@nikomatsakis`` #44491 #25860", "tree": {"sha": "3d274af2efac552935d153843e3d9e23c0c54108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d274af2efac552935d153843e3d9e23c0c54108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e881d655c4ea13649d60013a0d62ec2ec59d3797", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiAo8CCRBK7hj4Ov3rIwAALeQIAD9NsliyroCUk6Beay/KiofR\nwQoaxcVH1jBlcntLjxnYJ1i2MBGXAzgoOK5fdyRe+a2sjYpMafWIW+UbibEQw8++\nydlEev/C7/gbrYurYLHBe8e95U9WzF1TF5Bn/tQc0y8MF/COJSQ+xN58JSpcPZUG\nZHZWC7ZNYLEOqVgWz82ikN4KtS6jZtdI/WYlv2N43/1wUtDJOCPMr8YMsc3wws7x\niOMqpdzjXJ9H2ZsmyZ5CBWDzGfYwhTaZk4avoUYotiu1ftVz5ezClJEZaGRlc8VH\n7a+RPECgf/+vu4Z6vZdUzVa+H6cZS3Uf3lx44n+wk4x9J71Ad7wcPs+HNs2WAHU=\n=HEtC\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d274af2efac552935d153843e3d9e23c0c54108\nparent 9cb39a6083c34f2266ec4f2235deda7bdab60b06\nparent af9e30a326b56bca01ef3a7694ab8a117d791885\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644334850 +0100\ncommitter GitHub <noreply@github.com> 1644334850 +0100\n\nRollup merge of #93732 - lcnr:hrlt-backcompa, r=Mark-Simulacrum\n\nadd fut/back compat tests for implied trait bounds\n\nthe `guard` test was tested to cause a segfault with `-Zchalk`, very nice\n\ncc ``@nikomatsakis`` #44491 #25860\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e881d655c4ea13649d60013a0d62ec2ec59d3797", "html_url": "https://github.com/rust-lang/rust/commit/e881d655c4ea13649d60013a0d62ec2ec59d3797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e881d655c4ea13649d60013a0d62ec2ec59d3797/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb39a6083c34f2266ec4f2235deda7bdab60b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb39a6083c34f2266ec4f2235deda7bdab60b06", "html_url": "https://github.com/rust-lang/rust/commit/9cb39a6083c34f2266ec4f2235deda7bdab60b06"}, {"sha": "af9e30a326b56bca01ef3a7694ab8a117d791885", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9e30a326b56bca01ef3a7694ab8a117d791885", "html_url": "https://github.com/rust-lang/rust/commit/af9e30a326b56bca01ef3a7694ab8a117d791885"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "d9de73a38efff0bca0b7d3cd867d464d04462d90", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.rs?ref=e881d655c4ea13649d60013a0d62ec2ec59d3797", "patch": "@@ -0,0 +1,51 @@\n+// A test exploiting the bug behind #25860 except with\n+// implied trait bounds which currently don't exist without `-Zchalk`.\n+use std::marker::PhantomData;\n+struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+where\n+    T: Convert<'a, 'b>;\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'short> for T {\n+    fn cast(&'long self) -> &'short T {\n+        self\n+    }\n+}\n+\n+// This function will compile once we add implied trait bounds.\n+//\n+// If we're not careful with our impl, the transformations\n+// in `bad` would succeed, which is unsound \u2728\n+//\n+// FIXME: the error is pretty bad, this should say\n+//\n+//     `T: Convert<'in_, 'out>` is not implemented\n+//\n+// help: needed by `Foo<'in_, 'out, T>`\n+//\n+// Please ping @lcnr if your changes end up causing `badboi` to compile.\n+fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ T) -> &'out T {\n+    //~^ ERROR lifetime mismatch\n+    sadness.cast()\n+}\n+\n+fn bad<'short, T>(value: &'short T) -> &'static T {\n+    let x: for<'in_, 'out> fn(Foo<'in_, 'out, T>, &'in_ T) -> &'out T = badboi;\n+    let x: for<'out> fn(Foo<'short, 'out, T>, &'short T) -> &'out T = x;\n+    let x: for<'out> fn(Foo<'static, 'out, T>, &'short T) -> &'out T = x;\n+    let x: fn(Foo<'static, 'static, T>, &'short T) -> &'static T = x;\n+    x(Foo(PhantomData), value)\n+}\n+\n+// Use `bad` to cause a segfault.\n+fn main() {\n+    let mut outer: Option<&'static u32> = Some(&3);\n+    let static_ref: &'static &'static u32 = match outer {\n+        Some(ref reference) => bad(reference),\n+        None => unreachable!(),\n+    };\n+    outer = None;\n+    println!(\"{}\", static_ref);\n+}"}, {"sha": "b020ea64bf46ef6cdacd8eb82ea045de1fec4312", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-guard.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-guard.stderr?ref=e881d655c4ea13649d60013a0d62ec2ec59d3797", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/hrlt-implied-trait-bounds-guard.rs:29:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ T) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^                       -------\n+   |                             |\n+   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             ...but data from `x` is returned here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "69847d6a8bb53be9140f060fda6950608e42fe70", "filename": "src/test/ui/implied-bounds/hrlt-implied-trait-bounds-roundtrip.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e881d655c4ea13649d60013a0d62ec2ec59d3797/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fhrlt-implied-trait-bounds-roundtrip.rs?ref=e881d655c4ea13649d60013a0d62ec2ec59d3797", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+struct Foo<'a>(&'a ())\n+where\n+    (): Trait<'a>;\n+\n+trait Trait<'a> {\n+    fn id<T>(value: &'a T) -> &'static T;\n+}\n+\n+impl Trait<'static> for () {\n+    fn id<T>(value: &'static T) -> &'static T {\n+        value\n+    }\n+}\n+\n+fn could_use_implied_bounds<'a, T>(_: Foo<'a>, x: &'a T) -> &'static T\n+where\n+    (): Trait<'a>, // This could be an implied bound\n+{\n+    <()>::id(x)\n+}\n+\n+fn main() {\n+    let bar: for<'a, 'b> fn(Foo<'a>, &'b ()) = |_, _| {};\n+\n+    // If `could_use_implied_bounds` were to use implied bounds,\n+    // keeping 'a late-bound, then we could assign that function\n+    // to this variable.\n+    let bar: for<'a> fn(Foo<'a>, &'a ()) = bar;\n+\n+    // In this case, the subtyping relation here would be unsound,\n+    // allowing us to transmute lifetimes. This currently compiles\n+    // because we incorrectly deal with implied bounds inside of binders.\n+    let _bar: for<'a, 'b> fn(Foo<'a>, &'b ()) = bar;\n+}"}]}