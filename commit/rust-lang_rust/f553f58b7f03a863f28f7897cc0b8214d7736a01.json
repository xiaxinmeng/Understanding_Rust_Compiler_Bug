{"sha": "f553f58b7f03a863f28f7897cc0b8214d7736a01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTNmNThiN2YwM2E4NjNmMjhmNzg5N2NjMGI4MjE0ZDc3MzZhMDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:44:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-28T21:44:35Z"}, "message": "Rollup merge of 21681 - japaric:no-warn, r=alexcrichton", "tree": {"sha": "04f9f1e4f8b1f1eb3e696034d1b16eae3b2c8df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f9f1e4f8b1f1eb3e696034d1b16eae3b2c8df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f553f58b7f03a863f28f7897cc0b8214d7736a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f553f58b7f03a863f28f7897cc0b8214d7736a01", "html_url": "https://github.com/rust-lang/rust/commit/f553f58b7f03a863f28f7897cc0b8214d7736a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f553f58b7f03a863f28f7897cc0b8214d7736a01/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7abbc96e6694c1e395171df8492ba48fa14c935f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7abbc96e6694c1e395171df8492ba48fa14c935f", "html_url": "https://github.com/rust-lang/rust/commit/7abbc96e6694c1e395171df8492ba48fa14c935f"}, {"sha": "57dd4ea78d527f1c81f6009d0132bf210dd8fdfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/57dd4ea78d527f1c81f6009d0132bf210dd8fdfd", "html_url": "https://github.com/rust-lang/rust/commit/57dd4ea78d527f1c81f6009d0132bf210dd8fdfd"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "1fb6290c7a3dfca9ca714e71eb2212ae0614e401", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(not(test))]\n use core::ptr::PtrExt;\n \n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`"}, {"sha": "9bc7acb67ad45497d79e6df0930cc35baf1a0881", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -447,7 +447,7 @@ mod tests {\n     use super::*;\n \n     fn same(fmt: &'static str, p: &[Piece<'static>]) {\n-        let mut parser = Parser::new(fmt);\n+        let parser = Parser::new(fmt);\n         assert!(p == parser.collect::<Vec<Piece<'static>>>());\n     }\n "}, {"sha": "47b909df5e8da77a402c765d288ac83deb15992b", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -151,7 +151,6 @@ fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n mod test {\n     use super::{RPathConfig};\n     use super::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};\n-    use syntax::abi;\n \n     #[test]\n     fn test_rpaths_to_flags() {"}, {"sha": "f6c76f2c7b86b70259739b38c4e981ed4f0957ca", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -2618,7 +2618,7 @@ mod tests {\n     use super::JsonEvent::*;\n     use super::{Json, from_str, DecodeResult, DecoderError, JsonEvent, Parser,\n                 StackElement, Stack, Decoder, Encoder, EncoderError};\n-    use std::{i64, u64, f32, f64, old_io};\n+    use std::{i64, u64, f32, f64};\n     use std::collections::BTreeMap;\n     use std::num::Float;\n     use std::string;\n@@ -3928,7 +3928,6 @@ mod tests {\n \n     #[test]\n     fn test_encode_hashmap_with_arbitrary_key() {\n-        use std::str::from_utf8;\n         use std::old_io::Writer;\n         use std::collections::HashMap;\n         use std::fmt;"}, {"sha": "acf0fe7f6cde36a470e7131ad20d6a35df8f7084", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -1433,15 +1433,12 @@ mod test {\n     use super::{pattern_bindings, expand_crate};\n     use super::{PatIdentFinder, IdentRenamer, PatIdentRenamer, ExpansionConfig};\n     use ast;\n-    use ast::{Attribute_, AttrOuter, MetaWord, Name};\n-    use attr;\n+    use ast::Name;\n     use codemap;\n-    use codemap::Spanned;\n     use ext::mtwt;\n     use fold::Folder;\n     use parse;\n     use parse::token;\n-    use ptr::P;\n     use util::parser_testing::{string_to_parser};\n     use util::parser_testing::{string_to_pat, string_to_crate, strs_to_idents};\n     use visit;"}, {"sha": "f9a202523b56222e1b7c38bb602b6aecc2e4542d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -2975,7 +2975,6 @@ mod test {\n     use ast_util;\n     use codemap;\n     use parse::token;\n-    use ptr::P;\n \n     #[test]\n     fn test_fun_to_string() {"}, {"sha": "6a773125763a48f09b54a076d10e665cfa4ded0f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553f58b7f03a863f28f7897cc0b8214d7736a01/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f553f58b7f03a863f28f7897cc0b8214d7736a01", "patch": "@@ -1126,9 +1126,8 @@ pub mod bench {\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn, TestOpts, run_test,\n-               Metric, MetricMap,\n+               MetricMap,\n                StaticTestName, DynTestName, DynTestFn, ShouldFail};\n-    use std::old_io::TempDir;\n     use std::thunk::Thunk;\n     use std::sync::mpsc::channel;\n "}]}