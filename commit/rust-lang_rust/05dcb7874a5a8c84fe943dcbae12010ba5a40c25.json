{"sha": "05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGNiNzg3NGE1YThjODRmZTk0M2RjYmFlMTIwMTBiYTVhNDBjMjU=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-06-23T17:18:32Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-07-10T15:43:39Z"}, "message": "Dont provide all parent generics to cgdefaults", "tree": {"sha": "429e8cf8657cd191de2fa0b73400be2714f92728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429e8cf8657cd191de2fa0b73400be2714f92728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "html_url": "https://github.com/rust-lang/rust/commit/05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84d1b21aea9863f0fc5f436b4982d145dade646", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84d1b21aea9863f0fc5f436b4982d145dade646", "html_url": "https://github.com/rust-lang/rust/commit/a84d1b21aea9863f0fc5f436b4982d145dade646"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "16ec935ba1ad07ec25a79b468fa632a82ef1cf3f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "patch": "@@ -85,7 +85,10 @@ impl<'tcx> Const<'tcx> {\n             _ => expr,\n         };\n \n-        use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n+        use hir::{\n+            def::DefKind::ConstParam, def::Res, ExprKind, GenericParam, GenericParamKind, Node,\n+            Path, QPath,\n+        };\n         let val = match expr.kind {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n@@ -100,7 +103,33 @@ impl<'tcx> Const<'tcx> {\n             }\n             _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def: def.to_global(),\n-                substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                substs: {\n+                    let ct_hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n+                    let parent_id = tcx.hir().get_parent_node(ct_hir_id);\n+                    match tcx.hir().get(parent_id) {\n+                        // If this anon ct is a cg default we should only provide non-fwd declared params\n+                        // https://github.com/rust-lang/rust/issues/83938\n+                        Node::GenericParam(GenericParam {\n+                            hir_id: param_id,\n+                            kind: GenericParamKind::Const { .. },\n+                            ..\n+                        }) => {\n+                            let item_id = tcx.hir().get_parent_node(*param_id);\n+                            let item_def_id = tcx.hir().local_def_id(item_id);\n+                            let generics = tcx.generics_of(item_def_id.to_def_id());\n+                            let param_def = tcx.hir().local_def_id(*param_id).to_def_id();\n+                            let param_def_idx = generics.param_def_id_to_index[&param_def];\n+                            let substs = generics\n+                                .params\n+                                .iter()\n+                                .map(|param| tcx.mk_param_from_def(param))\n+                                .take(param_def_idx as usize)\n+                                .collect::<smallvec::SmallVec<[_; 8]>>();\n+                            tcx.intern_substs(&substs)\n+                        }\n+                        _ => InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+                    }\n+                },\n                 promoted: None,\n             }),\n         };"}, {"sha": "d43e136d5748ae06a2f86caad81b4ca614cd042a", "filename": "src/test/ui/const-generics/defaults/cec-build-subst-ice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.rs?ref=05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_evaluatable_checked, const_generics, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Bar<const N: usize, const M: usize = { N + 1 }>;\n+pub fn foo<const N1: usize>() -> Bar<N1> { \n+    loop {} \n+}\n+//~^ error: unconstrained generic constant\n+\n+fn main() {}"}, {"sha": "0508007412c7d0f91d6d61ad0335b2e04d4518a0", "filename": "src/test/ui/const-generics/defaults/cec-build-subst-ice.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05dcb7874a5a8c84fe943dcbae12010ba5a40c25/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr?ref=05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "patch": "@@ -0,0 +1,12 @@\n+error: unconstrained generic constant\n+  --> $DIR/cec-build-subst-ice.rs:5:34\n+   |\n+LL | pub struct Bar<const N: usize, const M: usize = { N + 1 }>;\n+   |                                                 --------- required by this bound in `Bar`\n+LL | pub fn foo<const N1: usize>() -> Bar<N1> { loop {} }\n+   |                                  ^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { N + 1 }]:`\n+\n+error: aborting due to previous error\n+"}]}