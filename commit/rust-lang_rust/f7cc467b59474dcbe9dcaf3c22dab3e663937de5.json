{"sha": "f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2M0NjdiNTk0NzRkY2JlOWRjYWYzYzIyZGFiM2U2NjM5MzdkZTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-28T17:00:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-28T18:23:53Z"}, "message": "rustbuild: Tweak how stage1 compilers are selected\n\nThis commit furthers the previous one to ensure that we don't build an\nextra stage of the compiler in CI. A test has been added to rustbuild to\nensure that this doesn't regress, and then in debugging this test it was\nhunted down that the `dist::Std` target was the one erroneously pulling\nin the wrong compiler.\n\nThe `dist::Std` step was updated to instead account for the \"full\nbootstrap\" or not flag, ensuring that the correct compiler for compiling\nthe final standard library was used. This was another use of the\n`force_use_stage1` function which was in theory supposed to be pretty\ncentral, so existing users were all evaluated and a new function,\n`Builder::compiler_for`, was introduced. All existing users of\n`force_use_stage1` have been updated to use `compiler_for`, where the\nsemantics of `compiler_for` are similar to that of `compiler` except\nthat it doesn't guarantee the presence of a sysroot for the arguments\npassed (as they may be modified).\n\nPerhaps one day we can unify `compiler` and `compiler_for`, but the\nusage of `Builder::compiler` is so ubiquitous it would take quite some\ntime to evaluate whether each one needs the sysroot or not, so it's\nhoped that can be done in parallel.", "tree": {"sha": "80fb877d7801f6820713faa530b7c823349affb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80fb877d7801f6820713faa530b7c823349affb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "html_url": "https://github.com/rust-lang/rust/commit/f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad52c77a46593f2ebd4ae5a291f1a698527bb123", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad52c77a46593f2ebd4ae5a291f1a698527bb123", "html_url": "https://github.com/rust-lang/rust/commit/ad52c77a46593f2ebd4ae5a291f1a698527bb123"}], "stats": {"total": 196, "additions": 98, "deletions": 98}, "files": [{"sha": "4369b64b7394cdb4dc8fc9e8e782286dedff44b2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 63, "deletions": 38, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "patch": "@@ -577,6 +577,25 @@ impl<'a> Builder<'a> {\n         })\n     }\n \n+    /// Similar to `compiler`, except handles the full-bootstrap option to\n+    /// silently use the stage1 compiler instead of a stage2 compiler if one is\n+    /// requested.\n+    ///\n+    /// Note that this does *not* have the side effect of creating\n+    /// `compiler(stage, host)`, unlike `compiler` above which does have such\n+    /// a side effect. The returned compiler here can only be used to compile\n+    /// new artifacts, it can't be used to rely on the presence of a particular\n+    /// sysroot.\n+    ///\n+    /// See `force_use_stage1` for documentation on what each argument is.\n+    pub fn compiler_for(&self, stage: u32, host: Interned<String>, target: Interned<String>) -> Compiler {\n+        if self.build.force_use_stage1(Compiler { stage, host }, target) {\n+            self.compiler(1, self.config.build)\n+        } else {\n+            self.compiler(stage, host)\n+        }\n+    }\n+\n     pub fn sysroot(&self, compiler: Compiler) -> Interned<PathBuf> {\n         self.ensure(compile::Sysroot { compiler })\n     }\n@@ -750,11 +769,7 @@ impl<'a> Builder<'a> {\n         // This is for the original compiler, but if we're forced to use stage 1, then\n         // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n         // we copy the libs forward.\n-        let cmp = if self.force_use_stage1(compiler, target) {\n-            self.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let cmp = self.compiler_for(compiler.stage, compiler.host, target);\n \n         let libstd_stamp = match cmd {\n             \"check\" => check::libstd_stamp(self, cmp, target),\n@@ -1371,7 +1386,7 @@ mod __test {\n         assert_eq!(\n             first(builder.cache.all::<dist::Std>()),\n             &[dist::Std {\n-                compiler: Compiler { host: a, stage: 2 },\n+                compiler: Compiler { host: a, stage: 1 },\n                 target: a,\n             },]\n         );\n@@ -1408,7 +1423,7 @@ mod __test {\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n                 dist::Std {\n@@ -1455,18 +1470,51 @@ mod __test {\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n             ]\n         );\n         assert_eq!(first(builder.cache.all::<dist::Src>()), &[dist::Src]);\n     }\n \n+    #[test]\n+    fn dist_only_cross_host() {\n+        let a = INTERNER.intern_str(\"A\");\n+        let b = INTERNER.intern_str(\"B\");\n+        let mut build = Build::new(configure(&[\"B\"], &[]));\n+        build.config.docs = false;\n+        build.hosts = vec![b];\n+        let mut builder = Builder::new(&build);\n+        builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Dist), &[]);\n+\n+        assert_eq!(\n+            first(builder.cache.all::<dist::Rustc>()),\n+            &[\n+                dist::Rustc {\n+                    compiler: Compiler { host: b, stage: 2 }\n+                },\n+            ]\n+        );\n+        assert_eq!(\n+            first(builder.cache.all::<compile::Rustc>()),\n+            &[\n+                compile::Rustc {\n+                    compiler: Compiler { host: a, stage: 0 },\n+                    target: a,\n+                },\n+                compile::Rustc {\n+                    compiler: Compiler { host: a, stage: 1 },\n+                    target: b,\n+                },\n+            ]\n+        );\n+    }\n+\n     #[test]\n     fn dist_with_targets_and_hosts() {\n         let build = Build::new(configure(&[\"B\"], &[\"C\"]));\n@@ -1508,11 +1556,11 @@ mod __test {\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n                 dist::Std {\n@@ -1557,11 +1605,11 @@ mod __test {\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n                 dist::Std {\n@@ -1608,11 +1656,11 @@ mod __test {\n             first(builder.cache.all::<dist::Std>()),\n             &[\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n                 dist::Std {\n-                    compiler: Compiler { host: a, stage: 2 },\n+                    compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n             ]\n@@ -1662,10 +1710,6 @@ mod __test {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n                 },\n-                compile::Test {\n-                    compiler: Compiler { host: a, stage: 2 },\n-                    target: b,\n-                },\n             ]\n         );\n         assert_eq!(\n@@ -1718,10 +1762,6 @@ mod __test {\n                     compiler: Compiler { host: b, stage: 2 },\n                     target: a,\n                 },\n-                compile::Rustc {\n-                    compiler: Compiler { host: a, stage: 0 },\n-                    target: b,\n-                },\n                 compile::Rustc {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n@@ -1756,10 +1796,6 @@ mod __test {\n                     compiler: Compiler { host: b, stage: 2 },\n                     target: a,\n                 },\n-                compile::Test {\n-                    compiler: Compiler { host: a, stage: 0 },\n-                    target: b,\n-                },\n                 compile::Test {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n@@ -1806,9 +1842,6 @@ mod __test {\n                 compile::Assemble {\n                     target_compiler: Compiler { host: a, stage: 1 },\n                 },\n-                compile::Assemble {\n-                    target_compiler: Compiler { host: b, stage: 1 },\n-                },\n                 compile::Assemble {\n                     target_compiler: Compiler { host: a, stage: 2 },\n                 },\n@@ -1828,10 +1861,6 @@ mod __test {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: a,\n                 },\n-                compile::Rustc {\n-                    compiler: Compiler { host: a, stage: 0 },\n-                    target: b,\n-                },\n                 compile::Rustc {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,\n@@ -1858,10 +1887,6 @@ mod __test {\n                     compiler: Compiler { host: b, stage: 2 },\n                     target: a,\n                 },\n-                compile::Test {\n-                    compiler: Compiler { host: a, stage: 0 },\n-                    target: b,\n-                },\n                 compile::Test {\n                     compiler: Compiler { host: a, stage: 1 },\n                     target: b,"}, {"sha": "057dcea7f24a6f7ecb0e1d9e6a589282ff1fcf1c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "patch": "@@ -70,20 +70,20 @@ impl Step for Std {\n \n         builder.ensure(StartupObjects { compiler, target });\n \n-        if builder.force_use_stage1(compiler, target) {\n-            let from = builder.compiler(1, builder.config.build);\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        if compiler_to_use != compiler {\n             builder.ensure(Std {\n-                compiler: from,\n+                compiler: compiler_to_use,\n                 target,\n             });\n-            builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", from.host, target));\n+            builder.info(&format!(\"Uplifting stage1 std ({} -> {})\", compiler_to_use.host, target));\n \n             // Even if we're not building std this stage, the new sysroot must\n             // still contain the third party objects needed by various targets.\n             copy_third_party_objects(builder, &compiler, target);\n \n             builder.ensure(StdLink {\n-                compiler: from,\n+                compiler: compiler_to_use,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -402,15 +402,16 @@ impl Step for Test {\n             return;\n         }\n \n-        if builder.force_use_stage1(compiler, target) {\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        if compiler_to_use != compiler {\n             builder.ensure(Test {\n-                compiler: builder.compiler(1, builder.config.build),\n+                compiler: compiler_to_use,\n                 target,\n             });\n             builder.info(\n                 &format!(\"Uplifting stage1 test ({} -> {})\", builder.config.build, target));\n             builder.ensure(TestLink {\n-                compiler: builder.compiler(1, builder.config.build),\n+                compiler: compiler_to_use,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -527,15 +528,16 @@ impl Step for Rustc {\n             return;\n         }\n \n-        if builder.force_use_stage1(compiler, target) {\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        if compiler_to_use != compiler {\n             builder.ensure(Rustc {\n-                compiler: builder.compiler(1, builder.config.build),\n+                compiler: compiler_to_use,\n                 target,\n             });\n             builder.info(&format!(\"Uplifting stage1 rustc ({} -> {})\",\n                 builder.config.build, target));\n             builder.ensure(RustcLink {\n-                compiler: builder.compiler(1, builder.config.build),\n+                compiler: compiler_to_use,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -691,9 +693,10 @@ impl Step for CodegenBackend {\n             return;\n         }\n \n-        if builder.force_use_stage1(compiler, target) {\n+        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n+        if compiler_to_use != compiler {\n             builder.ensure(CodegenBackend {\n-                compiler: builder.compiler(1, builder.config.build),\n+                compiler: compiler_to_use,\n                 target,\n                 backend,\n             });"}, {"sha": "8a96e9a27d88807a29499f96bcbf67a1a086c92e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "patch": "@@ -647,7 +647,11 @@ impl Step for Std {\n \n     fn make_run(run: RunConfig<'_>) {\n         run.builder.ensure(Std {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.builder.config.build),\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n             target: run.target,\n         });\n     }\n@@ -757,13 +761,10 @@ impl Step for Analysis {\n \n         builder.ensure(Std { compiler, target });\n \n-        // Package save-analysis from stage1 if not doing a full bootstrap, as the\n-        // stage2 artifacts is simply copied from stage1 in that case.\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler.clone()\n-        };\n+        // Find the actual compiler (handling the full bootstrap option) which\n+        // produced the save-analysis data because that data isn't copied\n+        // through the sysroot uplifting.\n+        let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n "}, {"sha": "7985abf1eb18229a461ccd26bd21feed7b68b6d1", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "patch": "@@ -475,12 +475,7 @@ impl Step for Std {\n         builder.info(&format!(\"Documenting stage{} std ({})\", stage, target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(stage, builder.config.build);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let compiler = builder.compiler_for(stage, builder.config.build, target);\n \n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = builder.stage_out(compiler, Mode::Std)\n@@ -563,12 +558,7 @@ impl Step for Test {\n         builder.info(&format!(\"Documenting stage{} test ({})\", stage, target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(stage, builder.config.build);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let compiler = builder.compiler_for(stage, builder.config.build, target);\n \n         // Build libstd docs so that we generate relative links\n         builder.ensure(Std { stage, target });\n@@ -632,12 +622,7 @@ impl Step for WhitelistedRustc {\n         builder.info(&format!(\"Documenting stage{} whitelisted compiler ({})\", stage, target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(stage, builder.config.build);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let compiler = builder.compiler_for(stage, builder.config.build, target);\n \n         // Build libstd docs so that we generate relative links\n         builder.ensure(Std { stage, target });\n@@ -706,12 +691,7 @@ impl Step for Rustc {\n         t!(fs::create_dir_all(&out));\n \n         // Get the correct compiler for this stage.\n-        let compiler = builder.compiler(stage, builder.config.build);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let compiler = builder.compiler_for(stage, builder.config.build, target);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n@@ -807,12 +787,7 @@ impl Step for Rustdoc {\n         t!(fs::create_dir_all(&out));\n \n         // Get the correct compiler for this stage.\n-        let compiler = builder.compiler(stage, builder.config.build);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n+        let compiler = builder.compiler_for(stage, builder.config.build, target);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");"}, {"sha": "51b23e5801a8d794781dae02c7b44e278cfc775c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc467b59474dcbe9dcaf3c22dab3e663937de5/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f7cc467b59474dcbe9dcaf3c22dab3e663937de5", "patch": "@@ -1707,15 +1707,11 @@ impl Step for Crate {\n         builder.ensure(compile::Test { compiler, target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n-        // If we're not doing a full bootstrap but we're testing a stage2 version of\n-        // libstd, then what we're actually testing is the libstd produced in\n-        // stage1. Reflect that here by updating the compiler that we're working\n-        // with automatically.\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler.clone()\n-        };\n+        // If we're not doing a full bootstrap but we're testing a stage2\n+        // version of libstd, then what we're actually testing is the libstd\n+        // produced in stage1. Reflect that here by updating the compiler that\n+        // we're working with automatically.\n+        let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {"}]}