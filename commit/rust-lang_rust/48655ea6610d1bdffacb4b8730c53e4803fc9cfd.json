{"sha": "48655ea6610d1bdffacb4b8730c53e4803fc9cfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjU1ZWE2NjEwZDFiZGZmYWNiNGI4NzMwYzUzZTQ4MDNmYzljZmQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-09T21:03:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-11-09T21:03:41Z"}, "message": "add a bunch of debug logging to transform::inline", "tree": {"sha": "4d072cd4ff14c1850a3071d69a77e59295e61d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d072cd4ff14c1850a3071d69a77e59295e61d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48655ea6610d1bdffacb4b8730c53e4803fc9cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48655ea6610d1bdffacb4b8730c53e4803fc9cfd", "html_url": "https://github.com/rust-lang/rust/commit/48655ea6610d1bdffacb4b8730c53e4803fc9cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48655ea6610d1bdffacb4b8730c53e4803fc9cfd/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2977499bc9075fcc50f03e155303db53583f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2977499bc9075fcc50f03e155303db53583f90", "html_url": "https://github.com/rust-lang/rust/commit/6e2977499bc9075fcc50f03e155303db53583f90"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "95e9c8f6df882a5244aa3b9c192c5efb745fbbd4", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/48655ea6610d1bdffacb4b8730c53e4803fc9cfd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48655ea6610d1bdffacb4b8730c53e4803fc9cfd/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=48655ea6610d1bdffacb4b8730c53e4803fc9cfd", "patch": "@@ -37,7 +37,7 @@ const UNKNOWN_SIZE_COST: usize = 10;\n \n pub struct Inline;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n struct CallSite<'tcx> {\n     callee: DefId,\n     substs: &'tcx Substs<'tcx>,\n@@ -113,7 +113,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         loop {\n             local_change = false;\n             while let Some(callsite) = callsites.pop_front() {\n+                debug!(\"checking whether to inline callsite {:?}\", callsite);\n                 if !self.tcx.is_mir_available(callsite.callee) {\n+                    debug!(\"checking whether to inline callsite {:?} - MIR unavailable\", callsite);\n                     continue;\n                 }\n \n@@ -133,10 +135,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 };\n \n                 let start = caller_mir.basic_blocks().len();\n-\n+                debug!(\"attempting to inline callsite {:?} - mir={:?}\", callsite, callee_mir);\n                 if !self.inline_call(callsite, caller_mir, callee_mir) {\n+                    debug!(\"attempting to inline callsite {:?} - failure\", callsite);\n                     continue;\n                 }\n+                debug!(\"attempting to inline callsite {:?} - success\", callsite);\n \n                 // Add callsites from inlined function\n                 for (bb, bb_data) in caller_mir.basic_blocks().iter_enumerated().skip(start) {\n@@ -180,16 +184,19 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                      callee_mir: &Mir<'tcx>)\n                      -> bool\n     {\n+        debug!(\"should_inline({:?})\", callsite);\n         let tcx = self.tcx;\n \n         // Don't inline closures that have captures\n         // FIXME: Handle closures better\n         if callee_mir.upvar_decls.len() > 0 {\n+            debug!(\"    upvar decls present - not inlining\");\n             return false;\n         }\n \n         // Cannot inline generators which haven't been transformed yet\n         if callee_mir.yield_ty.is_some() {\n+            debug!(\"    yield ty present - not inlining\");\n             return false;\n         }\n \n@@ -201,7 +208,10 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             // there are cases that prevent inlining that we\n             // need to check for first.\n             attr::InlineAttr::Always => true,\n-            attr::InlineAttr::Never => return false,\n+            attr::InlineAttr::Never => {\n+                debug!(\"#[inline(never)] present - not inlining\");\n+                return false\n+            }\n             attr::InlineAttr::Hint => true,\n             attr::InlineAttr::None => false,\n         };\n@@ -211,6 +221,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         // reference unexported symbols\n         if callsite.callee.is_local() {\n             if callsite.substs.types().count() == 0 && !hinted {\n+                debug!(\"    callee is an exported function - not inlining\");\n                 return false;\n             }\n         }\n@@ -232,6 +243,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         if callee_mir.basic_blocks().len() <= 3 {\n             threshold += threshold / 4;\n         }\n+        debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n \n@@ -327,12 +339,17 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             }\n         }\n \n-        debug!(\"Inline cost for {:?} is {}\", callsite.callee, cost);\n-\n         if let attr::InlineAttr::Always = hint {\n+            debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n             true\n         } else {\n-            cost <= threshold\n+            if cost <= threshold {\n+                debug!(\"INLINING {:?} [cost={} <= threshold={}]\", callsite, cost, threshold);\n+                true\n+            } else {\n+                debug!(\"NOT inlining {:?} [cost={} > threshold={}]\", callsite, cost, threshold);\n+                false\n+            }\n         }\n     }\n "}]}