{"sha": "c5721759bbc6677be3f401d0f54dd53c9063d305", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NzIxNzU5YmJjNjY3N2JlM2Y0MDFkMGY1NGRkNTNjOTA2M2QzMDU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-14T01:22:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T22:52:48Z"}, "message": "Add fannkuchredux shootout benchmark", "tree": {"sha": "9769e421a90e8aa11cede2060f39fbacf0165615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9769e421a90e8aa11cede2060f39fbacf0165615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5721759bbc6677be3f401d0f54dd53c9063d305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5721759bbc6677be3f401d0f54dd53c9063d305", "html_url": "https://github.com/rust-lang/rust/commit/c5721759bbc6677be3f401d0f54dd53c9063d305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5721759bbc6677be3f401d0f54dd53c9063d305/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba00ac2a1365093c74afee15b9a6634f7870f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba00ac2a1365093c74afee15b9a6634f7870f1a", "html_url": "https://github.com/rust-lang/rust/commit/cba00ac2a1365093c74afee15b9a6634f7870f1a"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "74359c006327272ecd0d6b78284c5e8de7160c20", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5721759bbc6677be3f401d0f54dd53c9063d305/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c5721759bbc6677be3f401d0f54dd53c9063d305/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=c5721759bbc6677be3f401d0f54dd53c9063d305", "patch": "@@ -575,6 +575,7 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         wrong-ret-type.rs \\\n                         ), \\\n                       $(wildcard test/*fail/*.rs test/*fail/*.rc)) \\\n+                     test/bench/shootout/fannkuchredux.rs \\\n                      test/bench/shootout/fasta.rs \\\n                      test/bench/shootout/binarytrees.rs \\\n                      $(wildcard test/bench/99-bottles/*rs)"}, {"sha": "2d44067bec33ca9c41a5558481b2df0aafb75e1c", "filename": "src/test/bench/shootout/fannkuchredux.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c5721759bbc6677be3f401d0f54dd53c9063d305/src%2Ftest%2Fbench%2Fshootout%2Ffannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5721759bbc6677be3f401d0f54dd53c9063d305/src%2Ftest%2Fbench%2Fshootout%2Ffannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Ffannkuchredux.rs?ref=c5721759bbc6677be3f401d0f54dd53c9063d305", "patch": "@@ -0,0 +1,99 @@\n+// Based on Isaac Gouy's fannkuchredux.csharp\n+\n+use std;\n+\n+import std._int;\n+import std._vec;\n+\n+impure fn fannkuch(int n) -> int {\n+\n+  fn perm1init(uint i) -> mutable int {\n+    ret i as int;\n+  }\n+  auto perm1init_ = perm1init; // Rustboot workaround\n+\n+  auto perm = _vec.init_elt[mutable int](0, n as uint);\n+  auto perm1 = _vec.init_fn[mutable int](perm1init_, n as uint);\n+  auto count = _vec.init_elt[mutable int](0, n as uint);\n+\n+  auto f = 0;\n+  auto i = 0;\n+  auto k = 0;\n+  auto r = 0;\n+  auto flips = 0;\n+  auto nperm = 0;\n+  auto checksum = 0;\n+\n+  r = n;\n+  while (r > 0) {\n+    i = 0;\n+\n+    while (r != 1) {\n+      count.(r - 1) = r;\n+      r -=1;\n+    }\n+\n+    while (i < n) {\n+      perm.(i) = perm1.(i);\n+      i += 1;\n+    }\n+\n+    // Count flips and update max and checksum\n+    f = 0;\n+    k = perm.(0);\n+    while (k != 0) {\n+      i = 0;\n+      while (2 * i < k) {\n+        auto t = perm.(i);\n+        perm.(i) = perm.(k - i);\n+        perm.(k - i) = t;\n+        i += 1;\n+      }\n+      k = perm.(0);\n+      f += 1;\n+    }\n+\n+    if (f > flips) {\n+      flips = f;\n+    }\n+\n+    if ((nperm & 0x1) == 0) {\n+      checksum += f;\n+    } else {\n+      checksum -= f;\n+    }\n+\n+    // Use incremental change to generate another permutation\n+    auto go = true;\n+    while (go) {\n+      if (r == n) {\n+        log checksum;\n+        ret flips;\n+      }\n+      auto p0 = perm1.(0);\n+      i = 0;\n+      while (i < r) {\n+        auto j = i + 1;\n+        perm1.(i) = perm1.(j);\n+        i = j;\n+      }\n+      perm1.(r) = p0;\n+\n+      count.(r) -= 1;\n+      if (count.(r) > 0) {\n+        go = false;\n+      } else {\n+        r += 1;\n+      }\n+    }\n+\n+    nperm += 1;\n+  }\n+\n+  ret flips;\n+}\n+\n+impure fn main(vec[str] args) {\n+  auto n = 7;\n+  log #fmt(\"Pfannkuchen(%d) = %d\", n, fannkuch(n));\n+}\n\\ No newline at end of file"}]}