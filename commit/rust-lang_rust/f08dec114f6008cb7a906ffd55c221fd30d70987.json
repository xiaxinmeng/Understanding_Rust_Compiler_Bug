{"sha": "f08dec114f6008cb7a906ffd55c221fd30d70987", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOGRlYzExNGY2MDA4Y2I3YTkwNmZmZDU1YzIyMWZkMzBkNzA5ODc=", "commit": {"author": {"name": "oberien", "email": "jaro.fietz@gmx.de", "date": "2018-01-19T20:07:01Z"}, "committer": {"name": "oberien", "email": "jaro.fietz@gmx.de", "date": "2018-01-19T20:07:01Z"}, "message": "Handle Overflow", "tree": {"sha": "933de65aec9c7b95e4e090032a86779b5d84f662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/933de65aec9c7b95e4e090032a86779b5d84f662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08dec114f6008cb7a906ffd55c221fd30d70987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08dec114f6008cb7a906ffd55c221fd30d70987", "html_url": "https://github.com/rust-lang/rust/commit/f08dec114f6008cb7a906ffd55c221fd30d70987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08dec114f6008cb7a906ffd55c221fd30d70987/comments", "author": {"login": "oberien", "id": 4820508, "node_id": "MDQ6VXNlcjQ4MjA1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4820508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oberien", "html_url": "https://github.com/oberien", "followers_url": "https://api.github.com/users/oberien/followers", "following_url": "https://api.github.com/users/oberien/following{/other_user}", "gists_url": "https://api.github.com/users/oberien/gists{/gist_id}", "starred_url": "https://api.github.com/users/oberien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oberien/subscriptions", "organizations_url": "https://api.github.com/users/oberien/orgs", "repos_url": "https://api.github.com/users/oberien/repos", "events_url": "https://api.github.com/users/oberien/events{/privacy}", "received_events_url": "https://api.github.com/users/oberien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oberien", "id": 4820508, "node_id": "MDQ6VXNlcjQ4MjA1MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4820508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oberien", "html_url": "https://github.com/oberien", "followers_url": "https://api.github.com/users/oberien/followers", "following_url": "https://api.github.com/users/oberien/following{/other_user}", "gists_url": "https://api.github.com/users/oberien/gists{/gist_id}", "starred_url": "https://api.github.com/users/oberien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oberien/subscriptions", "organizations_url": "https://api.github.com/users/oberien/orgs", "repos_url": "https://api.github.com/users/oberien/repos", "events_url": "https://api.github.com/users/oberien/events{/privacy}", "received_events_url": "https://api.github.com/users/oberien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33cc12eed3df459db3c9ae2dd89df9cc6e45dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d33cc12eed3df459db3c9ae2dd89df9cc6e45dd6", "html_url": "https://github.com/rust-lang/rust/commit/d33cc12eed3df459db3c9ae2dd89df9cc6e45dd6"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "57e7e03a6cebc8ac5bbce4175f3c2bb61ce019b1", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f08dec114f6008cb7a906ffd55c221fd30d70987/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08dec114f6008cb7a906ffd55c221fd30d70987/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=f08dec114f6008cb7a906ffd55c221fd30d70987", "patch": "@@ -705,9 +705,34 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n             }\n             n -= 1;\n         }\n-        // n and self.step are indices, thus we need to add 1 before multiplying.\n-        // After that we need to subtract 1 from the result to convert it back to an index.\n-        self.iter.nth((n + 1) * (self.step + 1) - 1)\n+        // n and self.step are indices, we need to add 1 to get the amount of elements\n+        // When calling `.nth`, we need to subtract 1 again to convert back to an index\n+        // step + 1 can't overflow because `.step_by` sets `self.step` to `step - 1`\n+        let mut step = self.step + 1;\n+        // n + 1 could overflow\n+        // thus, if n is usize::MAX, instead of adding one, we call .nth(step)\n+        if n == usize::MAX {\n+            self.iter.nth(step - 1);\n+        } else {\n+            n += 1;\n+        }\n+\n+        // overflow handling\n+        while n.checked_mul(step).is_none() {\n+            let div_n = usize::MAX / n;\n+            let div_step = usize::MAX / step;\n+            let nth_n = div_n * n;\n+            let nth_step = div_step * step;\n+            let nth = if nth_n > nth_step {\n+                step -= div_n;\n+                nth_n\n+            } else {\n+                n -= div_step;\n+                nth_step\n+            };\n+            self.iter.nth(nth - 1);\n+        }\n+        self.iter.nth(n * step - 1)\n     }\n }\n "}, {"sha": "e52e119ff59b954389dbd2ec87266f57e22c9b09", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f08dec114f6008cb7a906ffd55c221fd30d70987/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08dec114f6008cb7a906ffd55c221fd30d70987/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=f08dec114f6008cb7a906ffd55c221fd30d70987", "patch": "@@ -179,6 +179,50 @@ fn test_iterator_step_by_nth() {\n     assert_eq!(it.clone().nth(42), None);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth_overflow() {\n+    #[cfg(target_pointer_width = \"8\")]\n+    type Bigger = u16;\n+    #[cfg(target_pointer_width = \"16\")]\n+    type Bigger = u32;\n+    #[cfg(target_pointer_width = \"32\")]\n+    type Bigger = u64;\n+    #[cfg(target_pointer_width = \"64\")]\n+    type Bigger = u128;\n+\n+    #[derive(Clone)]\n+    struct Test(Bigger);\n+    impl<'a> Iterator for &'a mut Test {\n+        type Item = i32;\n+        fn next(&mut self) -> Option<Self::Item> { Some(21) }\n+        fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+            self.0 += n as Bigger + 1;\n+            Some(42)\n+        }\n+    }\n+\n+    let mut it = Test(0);\n+    let root = usize::MAX >> (::std::mem::size_of::<usize>() * 8 / 2);\n+    let n = root + 20;\n+    (&mut it).step_by(n).nth(n);\n+    assert_eq!(it.0, n as Bigger * n as Bigger);\n+\n+    // large step\n+    let mut it = Test(0);\n+    (&mut it).step_by(usize::MAX).nth(5);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 5);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(2).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 2);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(1).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n+}\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {"}]}