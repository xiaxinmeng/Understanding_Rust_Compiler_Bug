{"sha": "b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NjFkMmI1MzA1OTk4ZGJhZWMzYWM4YjhkNGFhOWE4YzZlMzMzMGI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-24T23:13:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-24T23:13:11Z"}, "message": "Rollup merge of #40636 - nikomatsakis:revert-39485, r=eddyb\n\nRevert #39485, fixing type-inference regressions\n\nThis reverts PR #39485, which should fix the immediate regressions. Eventually I'd like to land https://github.com/rust-lang/rust/pull/40224 -- or some variant of it -- which revisits the question fo dead-code and inference.\n\nr? @eddyb\ncc @canndrew", "tree": {"sha": "503195d0663871a29fcd37be53bf8dfa27d13b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503195d0663871a29fcd37be53bf8dfa27d13b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "html_url": "https://github.com/rust-lang/rust/commit/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf5988651b3220a6d674b2c3581eeef841a631b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf5988651b3220a6d674b2c3581eeef841a631b", "html_url": "https://github.com/rust-lang/rust/commit/6cf5988651b3220a6d674b2c3581eeef841a631b"}, {"sha": "0f1eb8a70f0f877eba4b55151949df8861377c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1eb8a70f0f877eba4b55151949df8861377c65", "html_url": "https://github.com/rust-lang/rust/commit/0f1eb8a70f0f877eba4b55151949df8861377c65"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "9c62fd486d45a6f7574133a2e5fa387767e27a50", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -4099,6 +4099,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if self.diverges.get().always() {\n+                if let ExpectHasType(ety) = expected {\n+                    // Avoid forcing a type (only `!` for now) in unreachable code.\n+                    // FIXME(aburka) do we need this special case? and should it be is_uninhabited?\n+                    if !ety.is_never() {\n+                        if let Some(ref e) = blk.expr {\n+                            // Coerce the tail expression to the right type.\n+                            self.demand_coerce(e, ty, ety);\n+                        }\n+                    }\n+                }\n+\n                 ty = self.next_diverging_ty_var(TypeVariableOrigin::DivergingBlockExpr(blk.span));\n             } else if let ExpectHasType(ety) = expected {\n                 if let Some(ref e) = blk.expr {"}, {"sha": "434b795ff31f54404c489ae3491aaaf4a81d4ead", "filename": "src/test/compile-fail/issue-10176.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn g() {\n-    &panic!()\n-}\n-\n fn f() -> isize {\n     (return 1, return 2)\n+//~^ ERROR mismatched types\n+//~| expected type `isize`\n+//~| found type `(_, _)`\n+//~| expected isize, found tuple\n }\n \n fn main() {}", "previous_filename": "src/test/run-pass/inference-changes-39485.rs"}, {"sha": "1cbb7588e17df5e5fdddb3d8f0ff54f5e2608bbf", "filename": "src/test/compile-fail/issue-5500.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    &panic!()\n+    //~^ ERROR mismatched types\n+    //~| expected type `()`\n+    //~| found type `&_`\n+    //~| expected (), found reference\n+}"}, {"sha": "0baaaac26768571ca91c8d118794d0bb2a4d5c50", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_features)]\n-#![allow(unreachable_code)]\n+#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]\n@@ -29,14 +28,14 @@ struct Foo {\n }\n \n fn foo() -> Result<Foo, isize> {\n-    return Ok::<Foo, isize>(Foo {\n+    return Ok(Foo {\n         x: Bar { x: 22 },\n         a: return Err(32)\n     });\n }\n \n fn baz() -> Result<Foo, isize> {\n-    Ok::<Foo, isize>(Foo {\n+    Ok(Foo {\n         x: Bar { x: 22 },\n         a: return Err(32)\n     })"}, {"sha": "a0019e7215c98a4243a059fef2c3116e7decd38d", "filename": "src/test/run-pass/issue-39984.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fissue-39984.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fissue-39984.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39984.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #39984.\n+//\n+// The key here is that the error type of the `Ok` call ought to be\n+// constrained to `String`, even though it is dead-code.\n+\n+fn main() {}\n+\n+fn t() -> Result<(), String> {\n+    return Err(\"\".into());\n+    Ok(())\n+}"}, {"sha": "9a6ea2272fea7c5ca453595a1c0f3343eed99212", "filename": "src/test/run-pass/project-defer-unification.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs?ref=b561d2b5305998dbaec3ac8b8d4aa9a8c6e3330b", "patch": "@@ -11,8 +11,6 @@\n // A regression test extracted from image-0.3.11. The point of\n // failure was in `index_colors` below.\n \n-#![allow(unused)]\n-\n use std::ops::{Deref, DerefMut};\n \n #[derive(Copy, Clone)]\n@@ -94,7 +92,7 @@ pub fn index_colors<Pix>(image: &ImageBuffer<Pix, Vec<u8>>)\n                          -> ImageBuffer<Luma<u8>, Vec<u8>>\n where Pix: Pixel<Subpixel=u8> + 'static,\n {\n-    let mut indices: ImageBuffer<Luma<u8>, Vec<u8>> = loop { };\n+    let mut indices: ImageBuffer<_,Vec<_>> = loop { };\n     for (pixel, idx) in image.pixels().zip(indices.pixels_mut()) {\n         // failured occurred here ^^ because we were requiring that we\n         // could project Pixel or Subpixel from `T_indices` (type of"}]}