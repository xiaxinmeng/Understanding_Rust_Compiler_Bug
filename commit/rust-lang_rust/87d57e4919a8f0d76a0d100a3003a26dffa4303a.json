{"sha": "87d57e4919a8f0d76a0d100a3003a26dffa4303a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZDU3ZTQ5MTlhOGYwZDc2YTBkMTAwYTMwMDNhMjZkZmZhNDMwM2E=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-08T21:37:55Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-11T17:16:17Z"}, "message": "Don't treat all class fields as mutable, except in trans\n\nCloses #2550", "tree": {"sha": "3c9e239fba62a0d086902cb8b968ab7b58cd7d4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c9e239fba62a0d086902cb8b968ab7b58cd7d4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d57e4919a8f0d76a0d100a3003a26dffa4303a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d57e4919a8f0d76a0d100a3003a26dffa4303a", "html_url": "https://github.com/rust-lang/rust/commit/87d57e4919a8f0d76a0d100a3003a26dffa4303a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d57e4919a8f0d76a0d100a3003a26dffa4303a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75adeaadb841fdd238e88d90f1da499c1413458f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75adeaadb841fdd238e88d90f1da499c1413458f", "html_url": "https://github.com/rust-lang/rust/commit/75adeaadb841fdd238e88d90f1da499c1413458f"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "2a8e27208938a60f83b9d8cb514ad6b89368c443", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=87d57e4919a8f0d76a0d100a3003a26dffa4303a", "patch": "@@ -776,7 +776,8 @@ fn trans_class_drop(bcx: block, v0: ValueRef, dtor_did: ast::def_id,\n      let args = [bcx.fcx.llretptr, self_arg];\n      Call(bcx, dtor_addr, args);\n      // Drop the fields\n-     for vec::eachi(ty::class_items_as_fields(bcx.tcx(), class_did, substs))\n+     for vec::eachi(ty::class_items_as_mutable_fields(bcx.tcx(), class_did,\n+                                                      substs))\n      {|i, fld|\n         let llfld_a = GEPi(bcx, classptr, [0u, i]);\n         bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n@@ -1114,7 +1115,8 @@ fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n         ret next_cx;\n       }\n       ty::ty_class(did, substs) {\n-        for vec::eachi(ty::class_items_as_fields(cx.tcx(), did, substs))\n+        for vec::eachi(ty::class_items_as_mutable_fields(cx.tcx(), did,\n+                                                         substs))\n            {|i, fld|\n                let llfld_a = GEPi(cx, av, [0u, i]);\n                cx = f(cx, llfld_a, fld.mt.ty);\n@@ -2523,7 +2525,7 @@ fn trans_rec_field_inner(bcx: block, val: ValueRef, ty: ty::t,\n          if option::is_some(ty::ty_dtor(bcx.tcx(), did)) {\n            deref = true;\n          }\n-         ty::class_items_as_fields(bcx.tcx(), did, substs)\n+         ty::class_items_as_mutable_fields(bcx.tcx(), did, substs)\n        }\n        // Constraint?\n        _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n@@ -4815,7 +4817,7 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n   else { selfptr };\n \n   // initialize fields to zero\n-  let fields = ty::class_items_as_fields(bcx_top.tcx(), parent_id,\n+  let fields = ty::class_items_as_mutable_fields(bcx_top.tcx(), parent_id,\n                                          dummy_substs(psubsts.tys));\n   let mut bcx = bcx_top;\n   // Initialize fields to zero so init assignments can validly"}, {"sha": "7ac885422a1b6a08ba3eab648fa55f9886daf4b2", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=87d57e4919a8f0d76a0d100a3003a26dffa4303a", "patch": "@@ -351,7 +351,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n              add_substr(s, shape_of(ccx, tp));\n           }\n         };\n-        for ty::class_items_as_fields(ccx.tcx, did, substs).each {|f|\n+        for ty::class_items_as_mutable_fields(ccx.tcx, did, substs).each {|f|\n             sub += shape_of(ccx, f.mt.ty);\n         }\n         add_substr(s, sub);"}, {"sha": "bbbdafa6a7a053ac6fd460de410124c0774832db", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=87d57e4919a8f0d76a0d100a3003a26dffa4303a", "patch": "@@ -26,7 +26,7 @@ export arg;\n export args_eq;\n export ast_constr_to_constr;\n export block_ty;\n-export class_items_as_fields;\n+export class_items_as_fields, class_items_as_mutable_fields;\n export constr;\n export constr_general;\n export constr_table;\n@@ -2864,15 +2864,34 @@ fn class_field_tys(items: [@class_member]) -> [field_ty] {\n // Return a list of fields corresponding to the class's items\n // (as if the class was a record). trans uses this\n // Takes a list of substs with which to instantiate field types\n+// Keep in mind that this function reports that all fields are\n+// mutable, regardless of how they were declared. It's meant to\n+// be used in trans.\n+fn class_items_as_mutable_fields(cx:ctxt, did: ast::def_id,\n+                         substs: substs) -> [field] {\n+    class_item_fields(cx, did, substs, {|_mt| m_mutbl})\n+}\n+\n+// Same as class_items_as_mutable_fields, but doesn't change\n+// mutability.\n fn class_items_as_fields(cx:ctxt, did: ast::def_id,\n                          substs: substs) -> [field] {\n+    class_item_fields(cx, did, substs, {|mt| alt mt {\n+      class_mutable { m_mutbl }\n+      class_immutable { m_imm }}})\n+}\n+\n+\n+fn class_item_fields(cx:ctxt, did: ast::def_id,\n+  substs: substs, frob_mutability: fn(class_mutability) -> mutability)\n+    -> [field] {\n     let mut rslt = [];\n     for lookup_class_fields(cx, did).each {|f|\n        // consider all instance vars mut, because the\n        // constructor may mutate all vars\n        rslt += [{ident: f.ident, mt:\n                {ty: lookup_field_type(cx, did, f.id, substs),\n-                    mutbl: m_mutbl}}];\n+                    mutbl: frob_mutability(f.mutability)}}];\n     }\n     rslt\n }"}, {"sha": "103d8589f3b0c38fb5f786c4e8b9af4d5e31e32e", "filename": "src/test/run-pass/issue-2550.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57e4919a8f0d76a0d100a3003a26dffa4303a/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=87d57e4919a8f0d76a0d100a3003a26dffa4303a", "patch": "@@ -0,0 +1,15 @@\n+class C {\n+    let x: uint;\n+\n+    new(x: uint) {\n+        self.x = x;\n+    }\n+}\n+\n+fn f<T:copy>(_x: T) {\n+}\n+\n+#[warn(err_non_implicitly_copyable_typarams)]\n+fn main() {\n+    f(C(1u));\n+}"}]}