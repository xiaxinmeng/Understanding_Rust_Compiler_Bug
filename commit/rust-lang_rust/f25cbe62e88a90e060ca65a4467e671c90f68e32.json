{"sha": "f25cbe62e88a90e060ca65a4467e671c90f68e32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNWNiZTYyZTg4YTkwZTA2MGNhNjVhNDQ2N2U2NzFjOTBmNjhlMzI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-05-04T21:00:43Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-05-06T17:47:57Z"}, "message": "Add detailed error explanation for E0389\n\nCleanup of E0389\n\nAdded type-d out version of type in E0389 description", "tree": {"sha": "a59a8431aff83127b77c33db0a5a9030df48416b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59a8431aff83127b77c33db0a5a9030df48416b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f25cbe62e88a90e060ca65a4467e671c90f68e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f25cbe62e88a90e060ca65a4467e671c90f68e32", "html_url": "https://github.com/rust-lang/rust/commit/f25cbe62e88a90e060ca65a4467e671c90f68e32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f25cbe62e88a90e060ca65a4467e671c90f68e32/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3157691f963a86776cb7e6a7842f566032890aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3157691f963a86776cb7e6a7842f566032890aba", "html_url": "https://github.com/rust-lang/rust/commit/3157691f963a86776cb7e6a7842f566032890aba"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "d2569f0f07449a8d0861d7f82365fe31fce3836c", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f25cbe62e88a90e060ca65a4467e671c90f68e32/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f25cbe62e88a90e060ca65a4467e671c90f68e32/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=f25cbe62e88a90e060ca65a4467e671c90f68e32", "patch": "@@ -286,6 +286,70 @@ You can read more about cell types in the API documentation:\n https://doc.rust-lang.org/std/cell/\n \"##,\n \n+E0389: r##\"\n+An attempt was made to mutate data using a non-mutable reference. This\n+commonly occurs when attempting to assign to a non-mutable reference of a\n+mutable reference (`&(&mut T)`).\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let mut fancy = FancyNum{ num: 5 };\n+    let fancy_ref = &(&mut fancy);\n+    fancy_ref.num = 6; // error: cannot assign to data in a `&` reference\n+    println!(\"{}\", fancy_ref.num);\n+}\n+```\n+\n+Here, `&mut fancy` is mutable, but `&(&mut fancy)` is not. Creating an\n+immutable reference to a value borrows it immutably. There can be multiple\n+references of type `&(&mut T)` that point to the same value, so they must be\n+immutable to prevent multiple mutable references to the same value.\n+\n+To fix this, either remove the outer reference:\n+\n+```\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let mut fancy = FancyNum{ num: 5 };\n+\n+    let fancy_ref = &mut fancy;\n+    // `fancy_ref` is now &mut FancyNum, rather than &(&mut FancyNum)\n+\n+    fancy_ref.num = 6; // No error!\n+\n+    println!(\"{}\", fancy_ref.num);\n+}\n+```\n+\n+Or make the outer reference mutable:\n+\n+```\n+struct FancyNum {\n+    num: u8\n+}\n+\n+fn main() {\n+    let mut fancy = FancyNum{ num: 5 };\n+\n+    let fancy_ref = &mut (&mut fancy);\n+    // `fancy_ref` is now &mut(&mut FancyNum), rather than &(&mut FancyNum)\n+\n+    fancy_ref.num = 6; // No error!\n+\n+    println!(\"{}\", fancy_ref.num);\n+}\n+```\n+\"##,\n+\n E0499: r##\"\n A variable was borrowed as mutable more than once. Erroneous code example:\n \n@@ -434,7 +498,6 @@ http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n register_diagnostics! {\n     E0385, // {} in an aliasable location\n     E0388, // {} in a static location\n-    E0389, // {} in a `&` reference\n     E0500, // closure requires unique access to `..` but .. is already borrowed\n     E0501, // cannot borrow `..`.. as .. because previous closure requires unique access\n     E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ..."}]}