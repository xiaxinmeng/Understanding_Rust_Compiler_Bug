{"sha": "92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "node_id": "C_kwDOAAsO6NoAKDkyZjVkZWEwZWJlMmUzNGFkODQxMWU4Y2Q4YTBjOTdkZDQ1YjM0MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T00:41:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-19T00:41:32Z"}, "message": "Auto merge of #109602 - bvanjoi:fix-issue-109343, r=petrochenkov\n\nfix(resolve): replace bindings to dummy for unresolved imports\n\nclose #109343\n\nIn #109343, `f` in `pub use f as g` points to:\n\n|namespace| binding|\n|-|-|\n|type| `external crate f`|\n|value| `None` |\n|macro| `None` |\n\nWhen resolve `value_ns` during `resolve_doc_links`, the value of the binding of single_import `pub use f as g` goes to `pub use inner::f`, and since it does not satisfy [!self.is_accessible_from(binding.vis, single_import.parent_scope.module)](https://github.com/rust-lang/rust/blob/master/compiler/rustc_resolve/src/ident.rs#L971) and returns `Err(Undetermined)`, which eventually goes to `PathResult::Indeterminate => unreachable!`.\n\nThis PR replace all namespace binding to `dummy_binding` for indeterminate import, so, the bindings of `pub use f as g` had been changed to followings after finalize:\n\n|namespace| binding|\n|-|-|\n|type| `dummy`|\n|value| `dummy` |\n|macro| `dummy` |\n\nr?`@petrochenkov`", "tree": {"sha": "599b16ef1b643e5f18ea1b8d4baacd3fc1b5067c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599b16ef1b643e5f18ea1b8d4baacd3fc1b5067c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "html_url": "https://github.com/rust-lang/rust/commit/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "html_url": "https://github.com/rust-lang/rust/commit/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e"}, {"sha": "f34678c0976086523f56a0f974e76cfc5ca2fc40", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34678c0976086523f56a0f974e76cfc5ca2fc40", "html_url": "https://github.com/rust-lang/rust/commit/f34678c0976086523f56a0f974e76cfc5ca2fc40"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "7c4c05d4b9452617b0fd9030c739db872f8644e6", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "patch": "@@ -405,11 +405,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         t\n     }\n \n-    // Define a dummy resolution containing a `Res::Err` as a placeholder for a failed resolution,\n-    // also mark such failed imports as used to avoid duplicate diagnostics.\n-    fn import_dummy_binding(&mut self, import: &'a Import<'a>) {\n+    // Define a dummy resolution containing a `Res::Err` as a placeholder for a failed\n+    // or indeterminate resolution, also mark such failed imports as used to avoid duplicate diagnostics.\n+    fn import_dummy_binding(&mut self, import: &'a Import<'a>, is_indeterminate: bool) {\n         if let ImportKind::Single { target, ref target_bindings, .. } = import.kind {\n-            if target_bindings.iter().any(|binding| binding.get().is_some()) {\n+            if !(is_indeterminate || target_bindings.iter().all(|binding| binding.get().is_none()))\n+            {\n                 return; // Has resolution, do not create the dummy binding\n             }\n             let dummy_binding = self.dummy_binding;\n@@ -474,7 +475,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             // If this import is unresolved then create a dummy import\n             // resolution for it so that later resolve stages won't complain.\n-            self.import_dummy_binding(import);\n+            self.import_dummy_binding(import, is_indeterminate);\n \n             if let Some(err) = unresolved_import_error {\n                 if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {"}, {"sha": "3cdc3f0ecf89273762cb4c9219d788713f9af597", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "patch": "@@ -85,6 +85,7 @@ pub mod rustdoc;\n \n fluent_messages! { \"../messages.ftl\" }\n \n+#[derive(Debug)]\n enum Weak {\n     Yes,\n     No,"}, {"sha": "a328447aca9ded1921086eee981d4df0e7878689", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "patch": "@@ -421,7 +421,7 @@ pub enum TrimmedDefPaths {\n     GoodPath,\n }\n \n-#[derive(Clone, Hash)]\n+#[derive(Clone, Hash, Debug)]\n pub enum ResolveDocLinks {\n     /// Do not resolve doc links.\n     None,"}, {"sha": "0c10259bcd71669397035df08851ddcb39add3a7", "filename": "tests/ui/imports/issue-109343.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/tests%2Fui%2Fimports%2Fissue-109343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/tests%2Fui%2Fimports%2Fissue-109343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109343.rs?ref=92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+\n+pub mod f {}\n+pub use unresolved::f;\n+//~^ ERROR unresolved import `unresolved`\n+\n+/// [g]\n+pub use f as g;\n+\n+fn main() {}"}, {"sha": "8d9a3aee98024267bd02aecc9119ea51d51c7623", "filename": "tests/ui/imports/issue-109343.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/tests%2Fui%2Fimports%2Fissue-109343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400/tests%2Fui%2Fimports%2Fissue-109343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-109343.stderr?ref=92f5dea0ebe2e34ad8411e8cd8a0c97dd45b3400", "patch": "@@ -0,0 +1,11 @@\n+error[E0432]: unresolved import `unresolved`\n+  --> $DIR/issue-109343.rs:4:9\n+   |\n+LL | pub use unresolved::f;\n+   |         ^^^^^^^^^^ maybe a missing crate `unresolved`?\n+   |\n+   = help: consider adding `extern crate unresolved` to use the `unresolved` crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0432`."}]}