{"sha": "939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWYwNWYzZTMzZTlmMDBkNTIwNWQ2MGFmM2E4NjJhZTRkNThiZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T11:43:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T11:43:56Z"}, "message": "Move to a crate", "tree": {"sha": "5de7e04d907c8e1cb0e101529abaad3d6f7beba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de7e04d907c8e1cb0e101529abaad3d6f7beba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "html_url": "https://github.com/rust-lang/rust/commit/939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bfb111cf9ab938a8795f1ad2089cdd8b8c4b7a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfb111cf9ab938a8795f1ad2089cdd8b8c4b7a5", "html_url": "https://github.com/rust-lang/rust/commit/1bfb111cf9ab938a8795f1ad2089cdd8b8c4b7a5"}], "stats": {"total": 142, "additions": 111, "deletions": 31}, "files": [{"sha": "3ddf01dbfa42574a4928c9c5e231c800546e55a2", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -1122,6 +1122,37 @@ dependencies = [\n [[package]]\n name = \"ra_ide\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"either\",\n+ \"format-buf\",\n+ \"fst\",\n+ \"indexmap\",\n+ \"insta\",\n+ \"itertools\",\n+ \"join_to_string\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proptest\",\n+ \"ra_assists\",\n+ \"ra_cfg\",\n+ \"ra_db\",\n+ \"ra_fmt\",\n+ \"ra_hir\",\n+ \"ra_ide_db\",\n+ \"ra_prof\",\n+ \"ra_syntax\",\n+ \"ra_text_edit\",\n+ \"rand 0.7.3\",\n+ \"rayon\",\n+ \"rustc-hash\",\n+ \"superslice\",\n+ \"test_utils\",\n+ \"unicase\",\n+]\n+\n+[[package]]\n+name = \"ra_ide_db\"\n+version = \"0.1.0\"\n dependencies = [\n  \"either\",\n  \"format-buf\","}, {"sha": "9ace35229da7867fdc61efcbc6d9d188e3466190", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -28,6 +28,7 @@ once_cell = \"1.2.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }"}, {"sha": "1527b27d41734575dedef9891b593156841f0717", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -10,7 +10,9 @@\n // For proving that RootDatabase is RefUnwindSafe.\n #![recursion_limit = \"128\"]\n \n-mod ide_db;\n+mod ide_db {\n+    pub use ra_ide_db::*;\n+}\n \n mod db;\n pub mod mock_analysis;\n@@ -39,7 +41,6 @@ mod typing;\n mod matching_brace;\n mod display;\n mod inlay_hints;\n-mod wasm_shims;\n mod expand;\n mod expand_macro;\n "}, {"sha": "1b7905eb3d61b738677043134035afdfca2b50b2", "filename": "crates/ra_ide_db/Cargo.toml", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -0,0 +1,48 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_ide_db\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[lib]\n+doctest = false\n+\n+[features]\n+wasm = []\n+\n+[dependencies]\n+either = \"1.5\"\n+format-buf = \"1.0.0\"\n+indexmap = \"1.3.0\"\n+itertools = \"0.8.0\"\n+join_to_string = \"0.1.3\"\n+log = \"0.4.5\"\n+rayon = \"1.0.2\"\n+fst = { version = \"0.3.1\", default-features = false }\n+rustc-hash = \"1.0\"\n+unicase = \"2.2.0\"\n+superslice = \"1.0.0\"\n+rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n+once_cell = \"1.2.0\"\n+\n+ra_syntax = { path = \"../ra_syntax\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n+ra_db = { path = \"../ra_db\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n+ra_fmt = { path = \"../ra_fmt\" }\n+ra_prof = { path = \"../ra_prof\" }\n+test_utils = { path = \"../test_utils\" }\n+ra_assists = { path = \"../ra_assists\" }\n+\n+# ra_ide should depend only on the top-level `hir` package. if you need\n+# something from some `hir_xxx` subpackage, reexport the API via `hir`.\n+hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+\n+[dev-dependencies]\n+insta = \"0.13.0\"\n+\n+[dev-dependencies.proptest]\n+version = \"0.9.0\"\n+# Disable `fork` feature to allow compiling on webassembly\n+default-features = false\n+features = [\"std\", \"bit-set\", \"break-dead-code\"]"}, {"sha": "95a6ff287841af9ca2c6c04b18484908803db572", "filename": "crates/ra_ide_db/src/change.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::SourceFile;\n use rayon::prelude::*;\n use rustc_hash::FxHashMap;\n \n-use crate::ide_db::{\n+use crate::{\n     symbol_index::{SymbolIndex, SymbolsDatabase},\n     DebugData, RootDatabase,\n };\n@@ -168,12 +168,12 @@ impl LibraryData {\n const GC_COOLDOWN: time::Duration = time::Duration::from_millis(100);\n \n impl RootDatabase {\n-    pub(crate) fn request_cancellation(&mut self) {\n+    pub fn request_cancellation(&mut self) {\n         let _p = profile(\"RootDatabase::request_cancellation\");\n         self.salsa_runtime_mut().synthetic_write(Durability::LOW);\n     }\n \n-    pub(crate) fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: AnalysisChange) {\n         let _p = profile(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n         log::info!(\"apply_change {:?}\", change);\n@@ -245,7 +245,7 @@ impl RootDatabase {\n         self.set_source_root_with_durability(root_id, Arc::new(source_root), durability);\n     }\n \n-    pub(crate) fn maybe_collect_garbage(&mut self) {\n+    pub fn maybe_collect_garbage(&mut self) {\n         if cfg!(feature = \"wasm\") {\n             return;\n         }\n@@ -255,7 +255,7 @@ impl RootDatabase {\n         }\n     }\n \n-    pub(crate) fn collect_garbage(&mut self) {\n+    pub fn collect_garbage(&mut self) {\n         if cfg!(feature = \"wasm\") {\n             return;\n         }\n@@ -282,7 +282,7 @@ impl RootDatabase {\n         self.query(hir::db::BodyQuery).sweep(sweep);\n     }\n \n-    pub(crate) fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n+    pub fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n         let mut acc: Vec<(String, Bytes)> = vec![];\n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n         macro_rules! sweep_each_query {", "previous_filename": "crates/ra_ide/src/ide_db/change.rs"}, {"sha": "85617640d67615475ddd16d287780f459c1736df", "filename": "crates/ra_ide_db/src/feature_flags.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "previous_filename": "crates/ra_ide/src/ide_db/feature_flags.rs"}, {"sha": "d04c59a4a1e29f29c5b2d45f66202c21dc3b4f3e", "filename": "crates/ra_ide_db/src/lib.rs", "status": "renamed", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -5,6 +5,7 @@ pub mod line_index_utils;\n pub mod feature_flags;\n pub mod symbol_index;\n pub mod change;\n+mod wasm_shims;\n \n use std::sync::Arc;\n \n@@ -15,9 +16,7 @@ use ra_db::{\n };\n use rustc_hash::FxHashMap;\n \n-use crate::ide_db::{\n-    feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::SymbolsDatabase,\n-};\n+use crate::{feature_flags::FeatureFlags, line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,\n@@ -30,12 +29,12 @@ use crate::ide_db::{\n     hir::db::HirDatabaseStorage\n )]\n #[derive(Debug)]\n-pub(crate) struct RootDatabase {\n+pub struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n-    pub(crate) feature_flags: Arc<FeatureFlags>,\n+    pub feature_flags: Arc<FeatureFlags>,\n     pub(crate) debug_data: Arc<DebugData>,\n-    pub(crate) last_gc: crate::wasm_shims::Instant,\n-    pub(crate) last_gc_check: crate::wasm_shims::Instant,\n+    pub last_gc: crate::wasm_shims::Instant,\n+    pub last_gc_check: crate::wasm_shims::Instant,\n }\n \n impl FileLoader for RootDatabase {\n@@ -114,7 +113,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n }\n \n #[salsa::query_group(LineIndexDatabaseStorage)]\n-pub(crate) trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n+pub trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n     fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n }\n ", "previous_filename": "crates/ra_ide/src/ide_db/mod.rs"}, {"sha": "6f99ca3a7b1d28b4fa5a3f7e036119000854abdc", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "previous_filename": "crates/ra_ide/src/ide_db/line_index.rs"}, {"sha": "daf9d8ab9f4fdb419b84273c7f4105c554b0f14e", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -3,7 +3,7 @@\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n \n-use crate::ide_db::line_index::{LineCol, LineIndex, Utf16Char};\n+use crate::line_index::{LineCol, LineIndex, Utf16Char};\n \n #[derive(Debug, Clone)]\n enum Step {\n@@ -297,7 +297,7 @@ mod test {\n     use ra_text_edit::test_utils::{arb_offset, arb_text_with_edit};\n     use ra_text_edit::TextEdit;\n \n-    use crate::ide_db::line_index;\n+    use crate::line_index;\n \n     use super::*;\n ", "previous_filename": "crates/ra_ide/src/ide_db/line_index_utils.rs"}, {"sha": "33f042d88093d7cde00b30dd451d61dd1b9aba5e", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -40,7 +40,7 @@ use ra_syntax::{\n #[cfg(not(feature = \"wasm\"))]\n use rayon::prelude::*;\n \n-use crate::ide_db::RootDatabase;\n+use crate::RootDatabase;\n \n #[derive(Debug)]\n pub struct Query {\n@@ -83,7 +83,7 @@ impl Query {\n }\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n-pub(crate) trait SymbolsDatabase: hir::db::HirDatabase {\n+pub trait SymbolsDatabase: hir::db::HirDatabase {\n     fn file_symbols(&self, file_id: FileId) -> Arc<SymbolIndex>;\n     #[salsa::input]\n     fn library_symbols(&self, id: SourceRootId) -> Arc<SymbolIndex>;\n@@ -108,7 +108,7 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n-pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n+pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n     struct Snap(salsa::Snapshot<RootDatabase>);\n     impl Clone for Snap {\n@@ -150,7 +150,7 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n     query.search(&buf)\n }\n \n-pub(crate) fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n+pub fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n     let name = name_ref.text();\n     let mut query = Query::new(name.to_string());\n     query.exact();\n@@ -159,7 +159,7 @@ pub(crate) fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<F\n }\n \n #[derive(Default)]\n-pub(crate) struct SymbolIndex {\n+pub struct SymbolIndex {\n     symbols: Vec<FileSymbol>,\n     map: fst::Map,\n }\n@@ -218,11 +218,11 @@ impl SymbolIndex {\n         SymbolIndex { symbols, map }\n     }\n \n-    pub(crate) fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.symbols.len()\n     }\n \n-    pub(crate) fn memory_size(&self) -> usize {\n+    pub fn memory_size(&self) -> usize {\n         self.map.as_fst().size() + self.symbols.len() * mem::size_of::<FileSymbol>()\n     }\n \n@@ -302,12 +302,12 @@ fn is_type(kind: SyntaxKind) -> bool {\n /// The actual data that is stored in the index. It should be as compact as\n /// possible.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub(crate) struct FileSymbol {\n-    pub(crate) file_id: FileId,\n-    pub(crate) name: SmolStr,\n-    pub(crate) ptr: SyntaxNodePtr,\n-    pub(crate) name_range: Option<TextRange>,\n-    pub(crate) container_name: Option<SmolStr>,\n+pub struct FileSymbol {\n+    pub file_id: FileId,\n+    pub name: SmolStr,\n+    pub ptr: SyntaxNodePtr,\n+    pub name_range: Option<TextRange>,\n+    pub container_name: Option<SmolStr>,\n }\n \n fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec<FileSymbol> {", "previous_filename": "crates/ra_ide/src/ide_db/symbol_index.rs"}, {"sha": "088cc9be40f10639d744a60c43438365aec15d71", "filename": "crates/ra_ide_db/src/wasm_shims.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fwasm_shims.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "previous_filename": "crates/ra_ide/src/wasm_shims.rs"}]}