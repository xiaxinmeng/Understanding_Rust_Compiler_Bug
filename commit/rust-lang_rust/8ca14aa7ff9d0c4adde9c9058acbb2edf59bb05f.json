{"sha": "8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "node_id": "C_kwDOAAsO6NoAKDhjYTE0YWE3ZmY5ZDBjNGFkZGU5YzkwNThhY2JiMmVkZjU5YmIwNWY", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-07-30T21:11:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-08-19T13:04:47Z"}, "message": "Refactor if-available setting to work in CI\n\nThis verifies if the HEAD sha matches with the detected LLVM SHA, and if not,\npermits usage of the detected LLVM. Otherwise, we fallback on regular\nnon-downloaded LLVM (currently still cached with sccache, though that's still\n10+ minutes on macOS).", "tree": {"sha": "cbb84233641f58d133195c05cd877241ad96a08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb84233641f58d133195c05cd877241ad96a08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "html_url": "https://github.com/rust-lang/rust/commit/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2769d6b9cc08038c2fe4ac657a7991a720f6f3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2769d6b9cc08038c2fe4ac657a7991a720f6f3c0", "html_url": "https://github.com/rust-lang/rust/commit/2769d6b9cc08038c2fe4ac657a7991a720f6f3c0"}], "stats": {"total": 123, "additions": 79, "deletions": 44}, "files": [{"sha": "56a0c1b2d9158d6f83f1ce2b63b0f495eaba6e95", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "patch": "@@ -990,41 +990,7 @@ impl Config {\n             config.llvm_from_ci = match llvm.download_ci_llvm {\n                 Some(StringOrBool::String(s)) => {\n                     assert!(s == \"if-available\", \"unknown option `{}` for download-ci-llvm\", s);\n-                    // This is currently all tier 1 targets and tier 2 targets with host tools\n-                    // (since others may not have CI artifacts)\n-                    // https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n-                    let supported_platforms = [\n-                        // tier 1\n-                        \"aarch64-unknown-linux-gnu\",\n-                        \"i686-pc-windows-gnu\",\n-                        \"i686-pc-windows-msvc\",\n-                        \"i686-unknown-linux-gnu\",\n-                        \"x86_64-unknown-linux-gnu\",\n-                        \"x86_64-apple-darwin\",\n-                        \"x86_64-pc-windows-gnu\",\n-                        \"x86_64-pc-windows-msvc\",\n-                        // tier 2 with host tools\n-                        \"aarch64-apple-darwin\",\n-                        \"aarch64-pc-windows-msvc\",\n-                        \"aarch64-unknown-linux-musl\",\n-                        \"arm-unknown-linux-gnueabi\",\n-                        \"arm-unknown-linux-gnueabihf\",\n-                        \"armv7-unknown-linux-gnueabihf\",\n-                        \"mips-unknown-linux-gnu\",\n-                        \"mips64-unknown-linux-gnuabi64\",\n-                        \"mips64el-unknown-linux-gnuabi64\",\n-                        \"mipsel-unknown-linux-gnu\",\n-                        \"powerpc-unknown-linux-gnu\",\n-                        \"powerpc64-unknown-linux-gnu\",\n-                        \"powerpc64le-unknown-linux-gnu\",\n-                        \"riscv64gc-unknown-linux-gnu\",\n-                        \"s390x-unknown-linux-gnu\",\n-                        \"x86_64-unknown-freebsd\",\n-                        \"x86_64-unknown-illumos\",\n-                        \"x86_64-unknown-linux-musl\",\n-                        \"x86_64-unknown-netbsd\",\n-                    ];\n-                    supported_platforms.contains(&&*config.build.triple)\n+                    crate::native::is_ci_llvm_available(&config)\n                 }\n                 Some(StringOrBool::Bool(b)) => b,\n                 None => false,"}, {"sha": "6a33b264015f3f0c1969c5f9620bc03c8c684b70", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 74, "deletions": 9, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "patch": "@@ -114,23 +114,20 @@ pub fn prebuilt_llvm_config(\n     Err(Meta { stamp, build_llvm_config, out_dir, root: root.into() })\n }\n \n-pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n-    let config = &builder.config;\n-    if !config.llvm_from_ci {\n-        return;\n-    }\n+/// This retrieves the LLVM sha we *want* to use, according to git history.\n+pub(crate) fn detect_llvm_sha(config: &crate::config::Config) -> String {\n     let mut rev_list = config.git();\n     rev_list.args(&[\n         PathBuf::from(\"rev-list\"),\n-        format!(\"--author={}\", builder.config.stage0_metadata.config.git_merge_commit_email).into(),\n+        format!(\"--author={}\", config.stage0_metadata.config.git_merge_commit_email).into(),\n         \"-n1\".into(),\n         \"--first-parent\".into(),\n         \"HEAD\".into(),\n         \"--\".into(),\n-        builder.src.join(\"src/llvm-project\"),\n-        builder.src.join(\"src/bootstrap/download-ci-llvm-stamp\"),\n+        config.src.join(\"src/llvm-project\"),\n+        config.src.join(\"src/bootstrap/download-ci-llvm-stamp\"),\n         // the LLVM shared object file is named `LLVM-12-rust-{version}-nightly`\n-        builder.src.join(\"src/version\"),\n+        config.src.join(\"src/version\"),\n     ]);\n     let llvm_sha = output(&mut rev_list);\n     let llvm_sha = llvm_sha.trim();\n@@ -143,8 +140,76 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n         panic!();\n     }\n \n+    llvm_sha.to_owned()\n+}\n+\n+/// Returns whether the CI-found LLVM is currently usable.\n+///\n+/// This checks both the build triple platform to confirm we're usable at all,\n+/// and then verifies if the current HEAD matches the detected LLVM SHA head,\n+/// in which case LLVM is indicated as not available.\n+pub(crate) fn is_ci_llvm_available(config: &crate::config::Config) -> bool {\n+    // This is currently all tier 1 targets and tier 2 targets with host tools\n+    // (since others may not have CI artifacts)\n+    // https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n+    let supported_platforms = [\n+        // tier 1\n+        \"aarch64-unknown-linux-gnu\",\n+        \"i686-pc-windows-gnu\",\n+        \"i686-pc-windows-msvc\",\n+        \"i686-unknown-linux-gnu\",\n+        \"x86_64-unknown-linux-gnu\",\n+        \"x86_64-apple-darwin\",\n+        \"x86_64-pc-windows-gnu\",\n+        \"x86_64-pc-windows-msvc\",\n+        // tier 2 with host tools\n+        \"aarch64-apple-darwin\",\n+        \"aarch64-pc-windows-msvc\",\n+        \"aarch64-unknown-linux-musl\",\n+        \"arm-unknown-linux-gnueabi\",\n+        \"arm-unknown-linux-gnueabihf\",\n+        \"armv7-unknown-linux-gnueabihf\",\n+        \"mips-unknown-linux-gnu\",\n+        \"mips64-unknown-linux-gnuabi64\",\n+        \"mips64el-unknown-linux-gnuabi64\",\n+        \"mipsel-unknown-linux-gnu\",\n+        \"powerpc-unknown-linux-gnu\",\n+        \"powerpc64-unknown-linux-gnu\",\n+        \"powerpc64le-unknown-linux-gnu\",\n+        \"riscv64gc-unknown-linux-gnu\",\n+        \"s390x-unknown-linux-gnu\",\n+        \"x86_64-unknown-freebsd\",\n+        \"x86_64-unknown-illumos\",\n+        \"x86_64-unknown-linux-musl\",\n+        \"x86_64-unknown-netbsd\",\n+    ];\n+    if !supported_platforms.contains(&&*config.build.triple) {\n+        return false;\n+    }\n+\n+    if crate::util::CiEnv::is_ci() {\n+        let llvm_sha = detect_llvm_sha(config);\n+        let head_sha = output(config.git().arg(\"rev-parse\").arg(\"HEAD\"));\n+        let head_sha = head_sha.trim();\n+        if llvm_sha == head_sha {\n+            eprintln!(\n+                \"Detected LLVM as non-available: running in CI and modified LLVM in this change\"\n+            );\n+            return false;\n+        }\n+    }\n+\n+    true\n+}\n+\n+pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n+    let config = &builder.config;\n+    if !config.llvm_from_ci {\n+        return;\n+    }\n     let llvm_root = config.ci_llvm_root();\n     let llvm_stamp = llvm_root.join(\".llvm-stamp\");\n+    let llvm_sha = detect_llvm_sha(&config);\n     let key = format!(\"{}{}\", llvm_sha, config.llvm_assertions);\n     if program_out_of_date(&llvm_stamp, &key) && !config.dry_run {\n         download_ci_llvm(builder, &llvm_sha);"}, {"sha": "3a00e258e00e5b142ac82b3e73ad6f21c7e7ce61", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=8ca14aa7ff9d0c4adde9c9058acbb2edf59bb05f", "patch": "@@ -258,6 +258,10 @@ impl CiEnv {\n         }\n     }\n \n+    pub fn is_ci() -> bool {\n+        Self::current() != CiEnv::None\n+    }\n+\n     /// If in a CI environment, forces the command to run with colors.\n     pub fn force_coloring_in_ci(self, cmd: &mut Command) {\n         if self != CiEnv::None {"}]}