{"sha": "610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMGJjYWY2ZjM1YjA3Njc0OWY1YjA5YzJjMGVjNmYwMWY5NzRlZWI=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-18T02:14:07Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-22T04:42:50Z"}, "message": "Stabilize Pin", "tree": {"sha": "dfab1aa60ec8a9bf35311be6c07247a8fc758afc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfab1aa60ec8a9bf35311be6c07247a8fc758afc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "html_url": "https://github.com/rust-lang/rust/commit/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20d694a95f0110fe253bfca7e9929bfdc6440c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/20d694a95f0110fe253bfca7e9929bfdc6440c7e", "html_url": "https://github.com/rust-lang/rust/commit/20d694a95f0110fe253bfca7e9929bfdc6440c7e"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "6a63bee2795ead822bc885483d0bd975f5b93ee7", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -111,7 +111,7 @@ impl<T> Box<T> {\n         box x\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn pinned(x: T) -> Pin<Box<T>> {\n         (box x).into()\n@@ -446,7 +446,7 @@ impl<T> From<T> for Box<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T> From<Box<T>> for Pin<Box<T>> {\n     fn from(boxed: Box<T>) -> Self {\n         // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n@@ -813,7 +813,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n  *  implementation of `Unpin` (where `T: Unpin`) would be valid/safe, and\n  *  could have a method to project a Pin<T> from it.\n  */\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> { }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]"}, {"sha": "368e2cc00aae14c840b20019f64b28248b9df757", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -100,7 +100,6 @@\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n-#![feature(pin)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]"}, {"sha": "a8574e82c270e5d0112fbd88847b1d4b9bb8a295", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -325,7 +325,7 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn pinned(value: T) -> Pin<Rc<T>> {\n         unsafe { Pin::new_unchecked(Rc::new(value)) }\n     }\n@@ -1931,5 +1931,5 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Rc<T> { }"}, {"sha": "ac709a15aaa3cc106b73723b0ad1752c94a7149d", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -303,7 +303,7 @@ impl<T> Arc<T> {\n         Arc { ptr: Box::into_raw_non_null(x), phantom: PhantomData }\n     }\n \n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn pinned(data: T) -> Pin<Arc<T>> {\n         unsafe { Pin::new_unchecked(Arc::new(data)) }\n     }\n@@ -2047,5 +2047,5 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Arc<T> { }"}, {"sha": "181623f4932ee79099ff343eb59979f1e58a0866", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -637,23 +637,23 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`replace`]: ../../std/mem/fn.replace.html\n /// [`Pin`]: ../pin/struct.Pin.html\n /// [`pin module`]: ../../std/pin/index.html\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n pub auto trait Unpin {}\n \n /// A marker type which does not implement `Unpin`.\n ///\n /// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n pub struct PhantomPinned;\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl !Unpin for PhantomPinned {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a T {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a mut T {}\n \n /// Implementations of `Copy` for primitive types."}, {"sha": "2f248d5276c777972f44cb86e537e4c07ba83758", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -273,7 +273,7 @@ impl<T> Option<T> {\n \n     /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n     #[inline]\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n         unsafe {\n             Pin::get_ref(self).as_ref().map(|x| Pin::new_unchecked(x))\n@@ -282,7 +282,7 @@ impl<T> Option<T> {\n \n     /// Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`\n     #[inline]\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n         unsafe {\n             Pin::get_unchecked_mut(self).as_mut().map(|x| Pin::new_unchecked(x))"}, {"sha": "b55d6a3b9bca0d190301c0b18b1880a51db6ed8a", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -97,7 +97,7 @@\n //! // std::mem::swap(&mut *still_unmoved, &mut *new_unmoved);\n //! ```\n \n-#![unstable(feature = \"pin\", issue = \"49150\")]\n+#![stable(feature = \"pin\", since = \"1.33.0\")]\n \n use fmt;\n use marker::{Sized, Unpin};\n@@ -116,7 +116,7 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n //\n // Note: the derives below are allowed because they all only use `&P`, so they\n // cannot move the value behind `pointer`.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n #[fundamental]\n #[repr(transparent)]\n #[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n@@ -130,7 +130,7 @@ where\n {\n     /// Construct a new `Pin` around a pointer to some data of a type that\n     /// implements `Unpin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn new(pointer: P) -> Pin<P> {\n         // Safety: the value pointed to is `Unpin`, and so has no requirements\n@@ -152,14 +152,14 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// If `pointer` dereferences to an `Unpin` type, `Pin::new` should be used\n     /// instead.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n         Pin { pointer }\n     }\n \n     /// Get a pinned shared reference from this pinned pointer.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_ref(self: &Pin<P>) -> Pin<&P::Target> {\n         unsafe { Pin::new_unchecked(&*self.pointer) }\n@@ -168,14 +168,14 @@ impl<P: Deref> Pin<P> {\n \n impl<P: DerefMut> Pin<P> {\n     /// Get a pinned mutable reference from this pinned pointer.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_mut(self: &mut Pin<P>) -> Pin<&mut P::Target> {\n         unsafe { Pin::new_unchecked(&mut *self.pointer) }\n     }\n \n     /// Assign a new value to the memory behind the pinned reference.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn set(mut self: Pin<P>, value: P::Target)\n     where\n@@ -197,7 +197,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub unsafe fn map_unchecked<U, F>(self: Pin<&'a T>, func: F) -> Pin<&'a U> where\n         F: FnOnce(&T) -> &U,\n     {\n@@ -213,7 +213,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn get_ref(self: Pin<&'a T>) -> &'a T {\n         self.pointer\n@@ -222,7 +222,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n \n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn into_ref(self: Pin<&'a mut T>) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n@@ -237,7 +237,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// that lives for as long as the borrow of the `Pin`, not the lifetime of\n     /// the `Pin` itself. This method allows turning the `Pin` into a reference\n     /// with the same lifetime as the original `Pin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn get_mut(self: Pin<&'a mut T>) -> &'a mut T\n         where T: Unpin,\n@@ -255,7 +255,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     ///\n     /// If the underlying data is `Unpin`, `Pin::get_mut` should be used\n     /// instead.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub unsafe fn get_unchecked_mut(self: Pin<&'a mut T>) -> &'a mut T {\n         self.pointer\n@@ -272,7 +272,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub unsafe fn map_unchecked_mut<U, F>(self: Pin<&'a mut T>, func: F) -> Pin<&'a mut U> where\n         F: FnOnce(&mut T) -> &mut U,\n     {\n@@ -282,15 +282,15 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: Deref> Deref for Pin<P> {\n     type Target = P::Target;\n     fn deref(&self) -> &P::Target {\n         Pin::get_ref(Pin::as_ref(self))\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: DerefMut> DerefMut for Pin<P>\n where\n     P::Target: Unpin\n@@ -303,21 +303,21 @@ where\n #[unstable(feature = \"receiver_trait\", issue = \"0\")]\n impl<P: Receiver> Receiver for Pin<P> {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Debug> fmt::Debug for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&self.pointer, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Display> fmt::Display for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&self.pointer, f)\n     }\n }\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.pointer, f)\n@@ -329,13 +329,13 @@ impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n // `Deref<Target=Unpin>` is unsound. Any such impl would probably be unsound\n // for other reasons, though, so we just need to take care not to allow such\n // impls to land in std.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P, U> CoerceUnsized<Pin<U>> for Pin<P>\n where\n     P: CoerceUnsized<U>,\n {}\n \n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<'a, P, U> DispatchFromDyn<Pin<U>> for Pin<P>\n where\n     P: DispatchFromDyn<U>,"}, {"sha": "436cb100e0875c252adb1eb5626536512b2aaa5e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -281,7 +281,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n-#![feature(pin)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(raw)]\n@@ -433,7 +432,7 @@ pub use alloc_crate::borrow;\n pub use alloc_crate::fmt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::format;\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[stable(feature = \"pin\", since = \"1.33.0\")]\n pub use core::pin;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use alloc_crate::slice;"}, {"sha": "7e446fdaeaf41740b32530035826090189f4d1de", "filename": "src/test/compile-fail/must_use-in-stdlib-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmust_use-in-stdlib-traits.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -1,5 +1,5 @@\n #![deny(unused_must_use)]\n-#![feature(futures_api, pin, arbitrary_self_types)]\n+#![feature(arbitrary_self_types, futures_api)]\n \n use std::iter::Iterator;\n use std::future::Future;"}, {"sha": "e5ee2233b766d2c78bae653a86713321ddb1d21e", "filename": "src/test/run-pass/arbitrary_self_types_stdlib_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(pin)]\n+#![feature(arbitrary_self_types)]\n #![feature(rustc_attrs)]\n \n use std::{"}, {"sha": "996709fa86c33fe7e889f3e8a394d899326018a8", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -10,7 +10,7 @@\n \n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n+#![feature(arbitrary_self_types, async_await, await_macro, futures_api)]\n \n use std::pin::Pin;\n use std::future::Future;"}, {"sha": "ac67488924993c8137132cdad7d24da4687e7330", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/610bcaf6f35b076749f5b09c2c0ec6f01f974eeb/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=610bcaf6f35b076749f5b09c2c0ec6f01f974eeb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(arbitrary_self_types, futures_api, pin)]\n+#![feature(arbitrary_self_types, futures_api)]\n #![allow(unused)]\n \n use std::future::Future;"}]}