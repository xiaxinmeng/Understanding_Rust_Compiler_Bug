{"sha": "e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MGVhZjU5ZGZiMDgwMzE3ZTlhOGY4YjNiMzAxZmNhMGI0MzBmZWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-18T22:13:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-24T23:35:07Z"}, "message": "Fix naming conventions for new lints", "tree": {"sha": "a3babe75993fdc086f6f53f3e4208cf7c8680853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3babe75993fdc086f6f53f3e4208cf7c8680853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "html_url": "https://github.com/rust-lang/rust/commit/e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d46037fa6617408155dcba6251d7c4e123b4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d46037fa6617408155dcba6251d7c4e123b4f5", "html_url": "https://github.com/rust-lang/rust/commit/c2d46037fa6617408155dcba6251d7c4e123b4f5"}], "stats": {"total": 219, "additions": 111, "deletions": 108}, "files": [{"sha": "7768b41f85ee44c7d906a06fc7d6bb84a7057f99", "filename": "src/doc/rustc/src/lints/listing/allowed-by-default.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fallowed-by-default.md?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -64,7 +64,7 @@ To fix it, do as the help message suggests:\n \n ```rust\n #![feature(dyn_trait)]\n-#![deny(bare_trait_object)]\n+#![deny(bare_trait_objects)]\n \n trait Trait { }\n "}, {"sha": "d20cea8331fdd841b59840ade655c4c25be23dab", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -4125,7 +4125,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn maybe_lint_bare_trait(&self, span: Span, id: NodeId, is_global: bool) {\n         self.sess.buffer_lint_with_diagnostic(\n-            builtin::BARE_TRAIT_OBJECT,\n+            builtin::BARE_TRAIT_OBJECTS,\n             id,\n             span,\n             \"trait objects without an explicit `dyn` are deprecated\","}, {"sha": "de583e81ca83185b730a07769ac94294d6e0294e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -225,13 +225,13 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub SINGLE_USE_LIFETIME,\n+    pub SINGLE_USE_LIFETIMES,\n     Allow,\n     \"detects lifetime parameters that are only used once\"\n }\n \n declare_lint! {\n-    pub UNUSED_LIFETIME,\n+    pub UNUSED_LIFETIMES,\n     Allow,\n     \"detects lifetime parameters that are never used\"\n }\n@@ -243,19 +243,19 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub ELIDED_LIFETIME_IN_PATH,\n+    pub ELIDED_LIFETIMES_IN_PATHS,\n     Allow,\n     \"hidden lifetime parameters are deprecated, try `Foo<'_>`\"\n }\n \n declare_lint! {\n-    pub BARE_TRAIT_OBJECT,\n+    pub BARE_TRAIT_OBJECTS,\n     Allow,\n     \"suggest using `dyn Trait` for trait objects\"\n }\n \n declare_lint! {\n-    pub ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n+    pub ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n     Allow,\n     \"fully qualified paths that start with a module name \\\n      instead of `crate`, `self`, or an extern crate name\"\n@@ -268,7 +268,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub UNSTABLE_NAME_COLLISION,\n+    pub UNSTABLE_NAME_COLLISIONS,\n     Warn,\n     \"detects name collision with an existing but unstable method\"\n }\n@@ -328,14 +328,14 @@ impl LintPass for HardwiredLints {\n             DEPRECATED,\n             UNUSED_UNSAFE,\n             UNUSED_MUT,\n-            SINGLE_USE_LIFETIME,\n-            UNUSED_LIFETIME,\n+            SINGLE_USE_LIFETIMES,\n+            UNUSED_LIFETIMES,\n             UNUSED_LABELS,\n             TYVAR_BEHIND_RAW_POINTER,\n-            ELIDED_LIFETIME_IN_PATH,\n-            BARE_TRAIT_OBJECT,\n-            ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n-            UNSTABLE_NAME_COLLISION,\n+            ELIDED_LIFETIMES_IN_PATHS,\n+            BARE_TRAIT_OBJECTS,\n+            ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n+            UNSTABLE_NAME_COLLISIONS,\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n         )\n     }"}, {"sha": "5c9f7f476864112c545311431b6d37b04bf112bb", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -505,7 +505,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             \"this was previously accepted by the compiler but is being phased out; \\\n              it will become a hard error\";\n \n-        let explanation = if lint_id == LintId::of(::lint::builtin::UNSTABLE_NAME_COLLISION) {\n+        let explanation = if lint_id == LintId::of(::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n             \"once this method is added to the standard library, \\\n              the ambiguity may cause an error or change in behavior!\"\n                 .to_owned()"}, {"sha": "966000ccd908a2454f43a916cc97a197234370e0", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -1344,7 +1344,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         self.tcx\n                             .struct_span_lint_node(\n-                                lint::builtin::SINGLE_USE_LIFETIME,\n+                                lint::builtin::SINGLE_USE_LIFETIMES,\n                                 id,\n                                 span,\n                                 &format!(\n@@ -1366,7 +1366,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         self.tcx\n                             .struct_span_lint_node(\n-                                lint::builtin::UNUSED_LIFETIME,\n+                                lint::builtin::UNUSED_LIFETIMES,\n                                 id,\n                                 span,\n                                 &format!(\n@@ -1981,7 +1981,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         if deprecated {\n             self.tcx\n                 .struct_span_lint_node(\n-                    lint::builtin::ELIDED_LIFETIME_IN_PATH,\n+                    lint::builtin::ELIDED_LIFETIMES_IN_PATHS,\n                     id,\n                     span,\n                     &format!(\"hidden lifetime parameters are deprecated, try `Foo<'_>`\"),"}, {"sha": "5951fd478d89f1f3104bd5b1539838e76d26e75e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -694,7 +694,7 @@ impl EarlyLintPass for DeprecatedAttr {\n }\n \n declare_lint! {\n-    pub UNUSED_DOC_COMMENT,\n+    pub UNUSED_DOC_COMMENTS,\n     Warn,\n     \"detects doc comments that aren't used by rustdoc\"\n }\n@@ -704,7 +704,7 @@ pub struct UnusedDocComment;\n \n impl LintPass for UnusedDocComment {\n     fn get_lints(&self) -> LintArray {\n-        lint_array![UNUSED_DOC_COMMENT]\n+        lint_array![UNUSED_DOC_COMMENTS]\n     }\n }\n \n@@ -713,7 +713,7 @@ impl UnusedDocComment {\n                    I: Iterator<Item=&'a ast::Attribute>,\n                    C: LintContext<'tcx>>(&self, mut attrs: I, cx: &C) {\n         if let Some(attr) = attrs.find(|a| a.is_value_str() && a.check_name(\"doc\")) {\n-            cx.struct_span_lint(UNUSED_DOC_COMMENT, attr.span, \"doc comment not used by rustdoc\")\n+            cx.struct_span_lint(UNUSED_DOC_COMMENTS, attr.span, \"doc comment not used by rustdoc\")\n               .emit();\n         }\n     }\n@@ -1527,7 +1527,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n }\n \n declare_lint! {\n-    pub UNNECESSARY_EXTERN_CRATE,\n+    pub UNNECESSARY_EXTERN_CRATES,\n     Allow,\n     \"suggest removing `extern crate` for the 2018 edition\"\n }\n@@ -1542,7 +1542,7 @@ impl ExternCrate {\n \n impl LintPass for ExternCrate {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNECESSARY_EXTERN_CRATE)\n+        lint_array!(UNNECESSARY_EXTERN_CRATES)\n     }\n }\n \n@@ -1555,7 +1555,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n             if it.attrs.iter().any(|a| a.check_name(\"macro_use\")) {\n                 return\n             }\n-            let mut err = cx.struct_span_lint(UNNECESSARY_EXTERN_CRATE,\n+            let mut err = cx.struct_span_lint(UNNECESSARY_EXTERN_CRATES,\n                 it.span, \"`extern crate` is unnecessary in the new edition\");\n             if it.vis == hir::Visibility::Public || self.0 > 1 || orig.is_some() {\n                 let pub_ = if it.vis == hir::Visibility::Public {"}, {"sha": "07bb7b5276441c1df5f6ce16fb4323a5c0570cff", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -40,7 +40,7 @@ extern crate rustc_target;\n extern crate syntax_pos;\n \n use rustc::lint;\n-use rustc::lint::builtin::{BARE_TRAIT_OBJECT, ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE};\n+use rustc::lint::builtin::{BARE_TRAIT_OBJECTS, ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE};\n use rustc::session;\n use rustc::util;\n \n@@ -174,17 +174,17 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_ATTRIBUTES,\n                     UNUSED_MACROS,\n                     UNUSED_ALLOCATION,\n-                    UNUSED_DOC_COMMENT,\n+                    UNUSED_DOC_COMMENTS,\n                     UNUSED_EXTERN_CRATES,\n                     UNUSED_FEATURES,\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n \n     add_lint_group!(sess,\n                     \"rust_2018_idioms\",\n-                    BARE_TRAIT_OBJECT,\n+                    BARE_TRAIT_OBJECTS,\n                     UNREACHABLE_PUB,\n-                    UNNECESSARY_EXTERN_CRATE);\n+                    UNNECESSARY_EXTERN_CRATES);\n \n     // Guidelines for creating a future incompatibility lint:\n     //\n@@ -272,14 +272,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             edition: Some(Edition::Edition2018),\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(UNSTABLE_NAME_COLLISION),\n+            id: LintId::of(UNSTABLE_NAME_COLLISIONS),\n             reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n             edition: None,\n             // Note: this item represents future incompatibility of all unstable functions in the\n             //       standard library, and thus should never be removed or changed to an error.\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE),\n+            id: LintId::of(ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE),\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n@@ -291,6 +291,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         ]);\n \n     // Register renamed and removed lints\n+    store.register_renamed(\"single_use_lifetime\", \"single_use_lifetimes\");\n+    store.register_renamed(\"elided_lifetime_in_path\", \"elided_lifetimes_in_paths\");\n+    store.register_renamed(\"bare_trait_object\", \"bare_trait_objects\");\n+    store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n+    store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n     store.register_renamed(\"unknown_features\", \"unused_features\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n@@ -325,6 +330,4 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n-    store.register_removed(\"absolute_path_starting_with_module\",\n-        \"renamed to `absolute_path_not_starting_with_crate`\");\n }"}, {"sha": "84b17f155a0e97ed2ac73a7448d71b0a1e4f3443", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -3486,7 +3486,7 @@ impl<'a> Resolver<'a> {\n         let diag = lint::builtin::BuiltinLintDiagnostics\n             ::AbsPathWithModule(span);\n         self.session.buffer_lint_with_diagnostic(\n-            lint::builtin::ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n+            lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             id, span,\n             \"absolute paths must start with `self`, `super`, \\\n             `crate`, or an external crate name in the 2018 edition\","}, {"sha": "d129298b35b03481e32e55e90fcef81c939f1060", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -1057,7 +1057,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         unstable_candidates: &[(&Candidate<'tcx>, Symbol)],\n     ) {\n         let mut diag = self.tcx.struct_span_lint_node(\n-            lint::builtin::UNSTABLE_NAME_COLLISION,\n+            lint::builtin::UNSTABLE_NAME_COLLISIONS,\n             self.fcx.body_id,\n             self.span,\n             \"a method with this name may be added to the standard library in the future\","}, {"sha": "76bbca606580dec4cd24843116fb156d4f6d7bd9", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(bare_trait_object)]\n+#![allow(bare_trait_objects)]\n \n struct Foo;\n "}, {"sha": "645514971dacd64d73fc3a3385d65c508a12bc91", "filename": "src/test/compile-fail/useless_comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless_comment.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unused_doc_comment)]\n+#![deny(unused_doc_comments)]\n \n fn foo() {\n     /// a //~ ERROR doc comment not used by rustdoc"}, {"sha": "fc6cb6bd053e6402c23e48870f08b308b8259eda", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: --edition 2018\n \n-#![deny(unnecessary_extern_crate)]\n+#![deny(unnecessary_extern_crates)]\n #![feature(alloc, test, libc)]\n \n extern crate alloc;"}, {"sha": "b9ccf5b19e03a50c44879f83c1fb19ad2c9e717c", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | extern crate alloc;\n note: lint level defined here\n   --> $DIR/unnecessary-extern-crate.rs:13:9\n    |\n-LL | #![deny(unnecessary_extern_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(unnecessary_extern_crates)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern crate` is unnecessary in the new edition\n   --> $DIR/unnecessary-extern-crate.rs:19:1"}, {"sha": "3739ffe6a2648535f22c1f27fca83d3df9d744bc", "filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n #![allow(warnings)]\n #![allow(unused_variables, dead_code, unused, bad_style)]\n-#![deny(elided_lifetime_in_path)]\n+#![deny(elided_lifetimes_in_paths)]\n \n struct Foo<'a> { x: &'a u32 }\n fn foo(x: &Foo) {"}, {"sha": "c2bd2c261ac46df8fe9a9d76685c641d417019f1", "filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | fn foo(x: &Foo) {\n note: lint level defined here\n   --> $DIR/ellided-lifetimes.rs:12:9\n    |\n-LL | #![deny(elided_lifetime_in_path)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(elided_lifetimes_in_paths)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3a5cb6f2b2e0f064a4af8b01be5c269ed472e89e", "filename": "src/test/ui/inference_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Finference_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Finference_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference_unstable.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -4,7 +4,7 @@ warning: a method with this name may be added to the standard library in the fut\n LL |     assert_eq!('x'.ipu_flatten(), 1);\n    |                    ^^^^^^^^^^^\n    |\n-   = note: #[warn(unstable_name_collision)] on by default\n+   = note: #[warn(unstable_name_collisions)] on by default\n    = warning: once this method is added to the standard library, the ambiguity may cause an error or change in behavior!\n    = note: for more information, see issue #48919 <https://github.com/rust-lang/rust/issues/48919>\n    = help: call with fully qualified syntax `inference_unstable_itertools::IpuItertools::ipu_flatten(...)` to keep using the current method"}, {"sha": "279d4e9a806221741f67632fa268898de984e8d2", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n mod foo {\n     crate trait Foo {"}, {"sha": "ff290555a695c747090ea32b27c41f9762a30fd7", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n mod foo {\n     crate trait Foo {"}, {"sha": "9b893f9f15cf5de1036e2ec92c6f010d24c446bf", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL |     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n note: lint level defined here\n   --> $DIR/edition-lint-fully-qualified-paths.rs:14:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "929b7cd061b3eef3c2c1061b5fe26953c828090f", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n #![allow(unused_imports)]\n #![allow(dead_code)]\n "}, {"sha": "b5693c4bb93ad348bf34cc10aee74af65fea35a9", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n #![allow(unused_imports)]\n #![allow(dead_code)]\n "}, {"sha": "439db84045eb984249baad41d22d26dfc377ff2c", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | use foo::{bar::{baz::{}}};\n note: lint level defined here\n   --> $DIR/edition-lint-nested-empty-paths.rs:14:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "06f6b6d75a700aa51eea0b67b0b206957de7e107", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n use crate::foo::{a, b};\n //~^ ERROR absolute paths must start with"}, {"sha": "c2831ec04b797ff8b6a5cadd9b51dcd126524b15", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n use foo::{a, b};\n //~^ ERROR absolute paths must start with"}, {"sha": "333d27c3819278e4dc1064834ad319fa8ab66402", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | use foo::{a, b};\n note: lint level defined here\n   --> $DIR/edition-lint-nested-paths.rs:14:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "ecc71909334091eba1be8814470cf49207d663b1", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -12,7 +12,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n #![allow(unused)]\n \n extern crate edition_lint_paths;"}, {"sha": "c08be85531d5ec42244704a1d962df0fd1b604e4", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -12,7 +12,7 @@\n // run-rustfix\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n #![allow(unused)]\n \n extern crate edition_lint_paths;"}, {"sha": "37c9041b724c766413bc2617beda883b81967207", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL |     use ::bar::Bar;\n note: lint level defined here\n   --> $DIR/edition-lint-paths.rs:15:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "a874a62220298c7f81c4c051f09aa2daffcd714d", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -16,7 +16,7 @@\n // but we don't.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths;\n "}, {"sha": "a874a62220298c7f81c4c051f09aa2daffcd714d", "filename": "src/test/ui/rust-2018/extern-crate-idiomatic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-idiomatic.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -16,7 +16,7 @@\n // but we don't.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths;\n "}, {"sha": "6f38978ae8ac616ffdb9019abe62ad7a9960300c", "filename": "src/test/ui/rust-2018/extern-crate-referenced-by-self-path.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -17,7 +17,7 @@\n // we can't drop the extern crate.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths;\n use self::edition_lint_paths::foo;"}, {"sha": "6f38978ae8ac616ffdb9019abe62ad7a9960300c", "filename": "src/test/ui/rust-2018/extern-crate-referenced-by-self-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-referenced-by-self-path.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -17,7 +17,7 @@\n // we can't drop the extern crate.\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths;\n use self::edition_lint_paths::foo;"}, {"sha": "e54fe1966e056b91d8877285827befd3817aad79", "filename": "src/test/ui/rust-2018/extern-crate-rename.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -15,7 +15,7 @@\n // paths. We don't (and we leave the `extern crate` in place).\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths as my_crate;\n "}, {"sha": "549f8efb7a472b8b9c4c5c6a9fa8e3f0b5302748", "filename": "src/test/ui/rust-2018/extern-crate-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -15,7 +15,7 @@\n // paths. We don't (and we leave the `extern crate` in place).\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n extern crate edition_lint_paths as my_crate;\n "}, {"sha": "d739ad360ed7b399c1618c538dd3c192071cb8a9", "filename": "src/test/ui/rust-2018/extern-crate-rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | use my_crate::foo;\n note: lint level defined here\n   --> $DIR/extern-crate-rename.rs:18:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "5d36c12103ab1a36dc0db1a7d63d89e407338e4c", "filename": "src/test/ui/rust-2018/extern-crate-submod.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -16,7 +16,7 @@\n // place).\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n mod m {\n     // Because this extern crate does not appear at the root, we"}, {"sha": "5951e12d545f57aae37fb0c199b80f7cb0bfbe32", "filename": "src/test/ui/rust-2018/extern-crate-submod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -16,7 +16,7 @@\n // place).\n \n #![feature(rust_2018_preview)]\n-#![deny(absolute_path_not_starting_with_crate)]\n+#![deny(absolute_paths_not_starting_with_crate)]\n \n mod m {\n     // Because this extern crate does not appear at the root, we"}, {"sha": "17da9feaeab7beae183e8367fa9016e9d30fbe29", "filename": "src/test/ui/rust-2018/extern-crate-submod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | use m::edition_lint_paths::foo;\n note: lint level defined here\n   --> $DIR/extern-crate-submod.rs:19:9\n    |\n-LL | #![deny(absolute_path_not_starting_with_crate)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(absolute_paths_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n "}, {"sha": "53fb4cf21f5ec90085529e1f76ae4ee124aa521e", "filename": "src/test/ui/single-use-lifetime/fn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "6b8417bf9db6d8b131ff6479fdb787b195f20f2e", "filename": "src/test/ui/single-use-lifetime/fn-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL |   a: for<'a> fn(&'a u32), //~ ERROR `'a` only used once\n note: lint level defined here\n   --> $DIR/fn-types.rs:11:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n   --> $DIR/fn-types.rs:22:22"}, {"sha": "1aad3265cbe0af54f541d7d5f7a5607b199ef258", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![feature(in_band_lifetimes)]\n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "3694c2452f34c0ecb810728cea63d099a5a2c4fe", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | fn a(x: &'a u32, y: &'b u32) {\n note: lint level defined here\n   --> $DIR/one-use-in-fn-argument-in-band.rs:12:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'a` only used once\n   --> $DIR/one-use-in-fn-argument-in-band.rs:19:10"}, {"sha": "9ac813a24ded3cb07597e11a388ee41a071eabab", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "f1304568fe72cb6a32b32642191eb77cd8cc3ab4", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | fn a<'a>(x: &'a u32) { //~ ERROR `'a` only used once\n note: lint level defined here\n   --> $DIR/one-use-in-fn-argument.rs:11:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "23275e47b5e2857246ade8ee76ee1afa521ea897", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-return.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "a862bbbe30c09e4ebb32e45e27fd6c830e4ab0ed", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-impl-header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "8f91ca0ce54c32a27899ea479c1725c7c614faa2", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-impl-header.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n note: lint level defined here\n   --> $DIR/one-use-in-inherent-impl-header.rs:11:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "863d8faef6ea17ea964a091408dd4014840a4519", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "4811a65ced91975849b5ffc96f30fd4cfb301f4a", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL |     fn inherent_a<'a>(&self, data: &'a u32) { //~ ERROR `'a` only used once\n note: lint level defined here\n   --> $DIR/one-use-in-inherent-method-argument.rs:11:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: lifetime parameter `'f` only used once\n   --> $DIR/one-use-in-inherent-method-argument.rs:21:6"}, {"sha": "92e4ff3436b044024eb3d34792d2e8626b2e3c87", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "b552c8475d8900800ddabc0a77f1581c6277325e", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n note: lint level defined here\n   --> $DIR/one-use-in-inherent-method-return.rs:11:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1e1426c145b11d773507d830d46a3892ab5a9f94", "filename": "src/test/ui/single-use-lifetime/one-use-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-struct.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -14,7 +14,7 @@\n //\n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "389ba5c873ad8e3681a794f5c8d92dd2392de90d", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // Test that we DO warn for a lifetime on an impl used only in `&self`\n // in a trait method.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "de74800ff60140a2aa97b15e241d6f804dd27b0e", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL |     fn next<'g>(&'g mut self) -> Option<Self::Item> { //~ ERROR `'g` only u\n note: lint level defined here\n   --> $DIR/one-use-in-trait-method-argument.rs:14:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a6183e3d5c8e1b53fa84a340c95842692b472f05", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-argument-and-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-argument-and-return.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -13,7 +13,7 @@\n //\n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "4706b9cbb092c21fa3323368b22a429484316cb6", "filename": "src/test/ui/single-use-lifetime/two-uses-in-fn-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-fn-arguments.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -13,7 +13,7 @@\n //\n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "ca5c519e05a16b3b75039c79180aa681c143a834", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-impl-header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-impl-header.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -12,7 +12,7 @@\n //\n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "9345fe59d9449f54f6470db2385a455b4ed1d2bd", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-method-argument-and-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -11,7 +11,7 @@\n // Test that we DO NOT warn for a lifetime used twice in an impl method and\n // header.\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "ca0b050b696793dca7c44879adc245fcf3ed885a", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-method-argument-and-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | impl<'f> Foo<'f> { //~ ERROR `'f` only used once\n note: lint level defined here\n   --> $DIR/two-uses-in-inherent-method-argument-and-return.rs:14:9\n    |\n-LL | #![deny(single_use_lifetime)]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(single_use_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c298c958ef0f90e54b7a55a84dbec25c9b5cec6b", "filename": "src/test/ui/single-use-lifetime/two-uses-in-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-trait-impl.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -13,7 +13,7 @@\n //\n // compile-pass\n \n-#![deny(single_use_lifetime)]\n+#![deny(single_use_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "7152d122f79a351b54c2a5df2972a095d37c49a1", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we DO warn when lifetime name is not used at all.\n \n-#![deny(unused_lifetime)]\n+#![deny(unused_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "322351a0a8e5b4485e1b691cbca7a27444d22d25", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-fn.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | fn d<'a>() { } //~ ERROR `'a` never used\n note: lint level defined here\n   --> $DIR/zero-uses-in-fn.rs:13:9\n    |\n-LL | #![deny(unused_lifetime)]\n-   |         ^^^^^^^^^^^^^^^\n+LL | #![deny(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a231c0bf003311ca348746f9481cda5ad78b9578", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.rs?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we DO warn when lifetime name is not used at all.\n \n-#![deny(unused_lifetime)]\n+#![deny(unused_lifetimes)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "34cb15c1339d8837c7b842fb95f58157b8a989b6", "filename": "src/test/ui/single-use-lifetime/zero-uses-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fzero-uses-in-impl.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -7,8 +7,8 @@ LL | impl<'a> Foo { } //~ ERROR `'a` never used\n note: lint level defined here\n   --> $DIR/zero-uses-in-impl.rs:13:9\n    |\n-LL | #![deny(unused_lifetime)]\n-   |         ^^^^^^^^^^^^^^^\n+LL | #![deny(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "39d22de02776c915dab94cd6ce9e5f5f62876270", "filename": "src/test/ui/suggestions/removing-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e60eaf59dfb080317e9a8f8b3b301fca0b430fea/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoving-extern-crate.stderr?ref=e60eaf59dfb080317e9a8f8b3b301fca0b430fea", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(rust_2018_idioms)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[warn(unnecessary_extern_crate)] implied by #[warn(rust_2018_idioms)]\n+   = note: #[warn(unnecessary_extern_crates)] implied by #[warn(rust_2018_idioms)]\n \n warning: `extern crate` is unnecessary in the new edition\n   --> $DIR/removing-extern-crate.rs:20:1"}]}