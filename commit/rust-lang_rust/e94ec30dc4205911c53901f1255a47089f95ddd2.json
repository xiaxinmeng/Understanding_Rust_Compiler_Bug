{"sha": "e94ec30dc4205911c53901f1255a47089f95ddd2", "node_id": "C_kwDOAAsO6NoAKGU5NGVjMzBkYzQyMDU5MTFjNTM5MDFmMTI1NWE0NzA4OWY5NWRkZDI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-10T13:41:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-13T09:32:24Z"}, "message": "resolve: Remove redundant item lifetime ribs\n\nand cleanup lifetime rib walking loops", "tree": {"sha": "c5563965a02a98d67bdcda3a12566f64c7e72106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5563965a02a98d67bdcda3a12566f64c7e72106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94ec30dc4205911c53901f1255a47089f95ddd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94ec30dc4205911c53901f1255a47089f95ddd2", "html_url": "https://github.com/rust-lang/rust/commit/e94ec30dc4205911c53901f1255a47089f95ddd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94ec30dc4205911c53901f1255a47089f95ddd2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "html_url": "https://github.com/rust-lang/rust/commit/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b"}], "stats": {"total": 65, "additions": 28, "deletions": 37}, "files": [{"sha": "194d057c870eb4e856a0fa1fcd4bcc24d8359625", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e94ec30dc4205911c53901f1255a47089f95ddd2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94ec30dc4205911c53901f1255a47089f95ddd2/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e94ec30dc4205911c53901f1255a47089f95ddd2", "patch": "@@ -748,35 +748,31 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n             ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n-                self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-                    this.with_generic_param_rib(\n-                        &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n-                        LifetimeRibKind::Generics {\n-                            binder: foreign_item.id,\n-                            kind: LifetimeBinderKind::Item,\n-                            span: generics.span,\n-                        },\n-                        |this| visit::walk_foreign_item(this, foreign_item),\n-                    )\n-                });\n+                self.with_generic_param_rib(\n+                    &generics.params,\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    LifetimeRibKind::Generics {\n+                        binder: foreign_item.id,\n+                        kind: LifetimeBinderKind::Item,\n+                        span: generics.span,\n+                    },\n+                    |this| visit::walk_foreign_item(this, foreign_item),\n+                );\n             }\n             ForeignItemKind::Fn(box Fn { ref generics, .. }) => {\n-                self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-                    this.with_generic_param_rib(\n-                        &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n-                        LifetimeRibKind::Generics {\n-                            binder: foreign_item.id,\n-                            kind: LifetimeBinderKind::Function,\n-                            span: generics.span,\n-                        },\n-                        |this| visit::walk_foreign_item(this, foreign_item),\n-                    )\n-                });\n+                self.with_generic_param_rib(\n+                    &generics.params,\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    LifetimeRibKind::Generics {\n+                        binder: foreign_item.id,\n+                        kind: LifetimeBinderKind::Function,\n+                        span: generics.span,\n+                    },\n+                    |this| visit::walk_foreign_item(this, foreign_item),\n+                );\n             }\n             ForeignItemKind::Static(..) => {\n-                self.with_item_rib(|this| {\n+                self.with_static_rib(|this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n@@ -1391,9 +1387,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             return self.resolve_anonymous_lifetime(lifetime, false);\n         }\n \n-        let mut indices = (0..self.lifetime_ribs.len()).rev();\n-        for i in &mut indices {\n-            let rib = &self.lifetime_ribs[i];\n+        let mut lifetime_rib_iter = self.lifetime_ribs.iter().rev();\n+        while let Some(rib) = lifetime_rib_iter.next() {\n             let normalized_ident = ident.normalize_to_macros_2_0();\n             if let Some(&(_, res)) = rib.bindings.get(&normalized_ident) {\n                 self.record_lifetime_res(lifetime.id, res, LifetimeElisionCandidate::Named);\n@@ -1470,8 +1465,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n \n         let mut outer_res = None;\n-        for i in indices {\n-            let rib = &self.lifetime_ribs[i];\n+        for rib in lifetime_rib_iter {\n             let normalized_ident = ident.normalize_to_macros_2_0();\n             if let Some((&outer, _)) = rib.bindings.get_key_value(&normalized_ident) {\n                 outer_res = Some(outer);\n@@ -1498,8 +1492,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             count: 1,\n         };\n         let elision_candidate = LifetimeElisionCandidate::Missing(missing_lifetime);\n-        for i in (0..self.lifetime_ribs.len()).rev() {\n-            let rib = &mut self.lifetime_ribs[i];\n+        for rib in self.lifetime_ribs.iter().rev() {\n             debug!(?rib.kind);\n             match rib.kind {\n                 LifetimeRibKind::AnonymousCreateParameter { binder, .. } => {\n@@ -2213,7 +2206,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n-                self.with_item_rib(|this| {\n+                self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n                     });\n@@ -2408,11 +2401,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.label_ribs.pop();\n     }\n \n-    fn with_item_rib(&mut self, f: impl FnOnce(&mut Self)) {\n+    fn with_static_rib(&mut self, f: impl FnOnce(&mut Self)) {\n         let kind = ItemRibKind(HasGenericParams::No);\n-        self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-            this.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n-        })\n+        self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n     // HACK(min_const_generics,const_evaluatable_unchecked): We"}]}