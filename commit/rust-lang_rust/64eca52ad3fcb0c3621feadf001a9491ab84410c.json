{"sha": "64eca52ad3fcb0c3621feadf001a9491ab84410c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWNhNTJhZDNmY2IwYzM2MjFmZWFkZjAwMWE5NDkxYWI4NDQxMGM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-07-01T03:33:24Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-07-01T03:33:24Z"}, "message": "Run Mir passes (copied from rustc pre-trans).", "tree": {"sha": "5185c838a1cc50865412a01fbacac529f45f1316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5185c838a1cc50865412a01fbacac529f45f1316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64eca52ad3fcb0c3621feadf001a9491ab84410c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64eca52ad3fcb0c3621feadf001a9491ab84410c", "html_url": "https://github.com/rust-lang/rust/commit/64eca52ad3fcb0c3621feadf001a9491ab84410c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64eca52ad3fcb0c3621feadf001a9491ab84410c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "url": "https://api.github.com/repos/rust-lang/rust/commits/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be", "html_url": "https://github.com/rust-lang/rust/commit/756d73b3ca9a64a8d0d6e3b7d0dd29b6cac853be"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "cdd1412204f99019ba4435a10f6323bfc6473faa", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -4,8 +4,9 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate test;\n \n-use self::miri::eval_main;\n+use self::miri::{eval_main, run_mir_passes};\n use self::rustc::session::Session;\n+use self::rustc::mir::mir_map::MirMap;\n use self::rustc_driver::{driver, CompilerCalls, Compilation};\n use std::cell::RefCell;\n use std::rc::Rc;\n@@ -55,7 +56,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n             let (node_id, _) = state.session.entry_fn.borrow()\n                 .expect(\"no main or start function found\");\n \n-            bencher.borrow_mut().iter(|| { eval_main(tcx, mir_map, node_id); });\n+            let mut mir_map = MirMap { map: mir_map.map.clone() };\n+            run_mir_passes(tcx, &mut mir_map);\n+            bencher.borrow_mut().iter(|| { eval_main(tcx, &mir_map, node_id); });\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "4340729d7e02a3a2dd68ffe0f77ed40311e2ff76", "filename": "src/bin/miri.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -9,8 +9,9 @@ extern crate log_settings;\n extern crate syntax;\n #[macro_use] extern crate log;\n \n-use miri::eval_main;\n+use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n+use rustc::mir::mir_map::MirMap;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n \n struct MiriCompilerCalls;\n@@ -31,7 +32,10 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             let mir_map = state.mir_map.unwrap();\n             let (node_id, _) = state.session.entry_fn.borrow()\n                 .expect(\"no main or start function found\");\n-            eval_main(tcx, mir_map, node_id);\n+\n+            let mut mir_map = MirMap { map: mir_map.map.clone() };\n+            run_mir_passes(tcx, &mut mir_map);\n+            eval_main(tcx, &mir_map, node_id);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "a572c9b2c70baafaf74d03c6e51c0e736622c61e", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -980,6 +980,25 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     err.emit();\n }\n \n+pub fn run_mir_passes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &mut MirMap<'tcx>) {\n+    let mut passes = ::rustc::mir::transform::Passes::new();\n+    passes.push_hook(Box::new(::rustc_mir::transform::dump_mir::DumpMir));\n+    passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n+    passes.push_pass(Box::new(::rustc_mir::transform::simplify_cfg::SimplifyCfg::new(\"no-landing-pads\")));\n+\n+    passes.push_pass(Box::new(::rustc_mir::transform::erase_regions::EraseRegions));\n+\n+    passes.push_pass(Box::new(::rustc_mir::transform::add_call_guards::AddCallGuards));\n+    passes.push_pass(Box::new(::rustc_borrowck::ElaborateDrops));\n+    passes.push_pass(Box::new(::rustc_mir::transform::no_landing_pads::NoLandingPads));\n+    passes.push_pass(Box::new(::rustc_mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\")));\n+\n+    passes.push_pass(Box::new(::rustc_mir::transform::add_call_guards::AddCallGuards));\n+    passes.push_pass(Box::new(::rustc_mir::transform::dump_mir::Marker(\"PreMiri\")));\n+\n+    passes.run_passes(tcx, mir_map);\n+}\n+\n // TODO(solson): Upstream these methods into rustc::ty::layout.\n \n trait IntegerExt {"}, {"sha": "46bca86e5c5329111f549c07285f86c873f343ad", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -9,6 +9,7 @@\n \n // From rustc.\n #[macro_use] extern crate rustc;\n+extern crate rustc_borrowck;\n extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_trans;\n@@ -35,6 +36,7 @@ pub use interpreter::{\n     EvalContext,\n     Frame,\n     eval_main,\n+    run_mir_passes,\n };\n \n pub use memory::{"}, {"sha": "054f91b3cf924db76c6cd14a57c6ce8c59ca78c7", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -1,8 +1,8 @@\n #![feature(box_syntax)]\n \n-fn main() {\n-    //FIXME: this span is wrong\n-    let x = box 42; //~ ERROR: tried to treat a memory pointer as a function pointer\n+// FIXME: This span is wrong.\n+fn main() { //~ ERROR: tried to treat a memory pointer as a function pointer\n+    let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n         f()"}, {"sha": "fef6ff66c3071261e85d692bba2cb6de300a7927", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64eca52ad3fcb0c3621feadf001a9491ab84410c/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eca52ad3fcb0c3621feadf001a9491ab84410c/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=64eca52ad3fcb0c3621feadf001a9491ab84410c", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation 29 which has size 2\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation 31 which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}]}