{"sha": "410679285b3dcad6e4610813a74615f8dc11d74d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMDY3OTI4NWIzZGNhZDZlNDYxMDgxM2E3NDYxNWY4ZGMxMWQ3NGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-26T17:16:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-26T17:17:10Z"}, "message": "internal: prepare to track changes to mem_docs", "tree": {"sha": "cad94538c1c3f8c1d28a9935c873e53ae4035120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad94538c1c3f8c1d28a9935c873e53ae4035120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/410679285b3dcad6e4610813a74615f8dc11d74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/410679285b3dcad6e4610813a74615f8dc11d74d", "html_url": "https://github.com/rust-lang/rust/commit/410679285b3dcad6e4610813a74615f8dc11d74d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/410679285b3dcad6e4610813a74615f8dc11d74d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0db648cb6785930fa4027fc941c0f1692b5ad59", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0db648cb6785930fa4027fc941c0f1692b5ad59", "html_url": "https://github.com/rust-lang/rust/commit/f0db648cb6785930fa4027fc941c0f1692b5ad59"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "cf091510ffad1785f6d8a822636beaa4d8f1edae", "filename": "crates/rust-analyzer/src/document.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0db648cb6785930fa4027fc941c0f1692b5ad59/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0db648cb6785930fa4027fc941c0f1692b5ad59/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdocument.rs?ref=f0db648cb6785930fa4027fc941c0f1692b5ad59", "patch": "@@ -1,16 +0,0 @@\n-//! In-memory document information.\n-\n-/// Information about a document that the Language Client\n-/// knows about.\n-/// Its lifetime is driven by the textDocument/didOpen and textDocument/didClose\n-/// client notifications.\n-#[derive(Debug, Clone)]\n-pub(crate) struct DocumentData {\n-    pub(crate) version: i32,\n-}\n-\n-impl DocumentData {\n-    pub(crate) fn new(version: i32) -> Self {\n-        DocumentData { version }\n-    }\n-}"}, {"sha": "b21fff7071a961b20ca0b25871a32fb9199732b7", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=410679285b3dcad6e4610813a74615f8dc11d74d", "patch": "@@ -8,7 +8,7 @@ use std::{sync::Arc, time::Instant};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n-use ide_db::base_db::{CrateId, VfsPath};\n+use ide_db::base_db::CrateId;\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{\n@@ -20,11 +20,11 @@ use vfs::AnchoredPathBuf;\n use crate::{\n     config::Config,\n     diagnostics::{CheckFixes, DiagnosticCollection},\n-    document::DocumentData,\n     from_proto,\n     line_index::{LineEndings, LineIndex},\n     lsp_ext,\n     main_loop::Task,\n+    mem_docs::MemDocs,\n     op_queue::OpQueue,\n     reload::SourceRootConfig,\n     request_metrics::{LatestRequests, RequestMetrics},\n@@ -57,7 +57,7 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Arc<Config>,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n-    pub(crate) mem_docs: FxHashMap<VfsPath, DocumentData>,\n+    pub(crate) mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     pub(crate) shutdown_requested: bool,\n     pub(crate) last_reported_status: Option<lsp_ext::ServerStatusParams>,\n@@ -115,7 +115,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) analysis: Analysis,\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n-    mem_docs: FxHashMap<VfsPath, DocumentData>,\n+    mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n@@ -147,7 +147,7 @@ impl GlobalState {\n             config: Arc::new(config.clone()),\n             analysis_host,\n             diagnostics: Default::default(),\n-            mem_docs: FxHashMap::default(),\n+            mem_docs: MemDocs::default(),\n             semantic_tokens_cache: Arc::new(Default::default()),\n             shutdown_requested: false,\n             last_reported_status: None,"}, {"sha": "a5997d69d9ae88b3c674df8cca990b329baeb059", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=410679285b3dcad6e4610813a74615f8dc11d74d", "patch": "@@ -33,7 +33,7 @@ mod line_index;\n mod request_metrics;\n mod lsp_utils;\n mod thread_pool;\n-mod document;\n+mod mem_docs;\n mod diff;\n mod op_queue;\n pub mod lsp_ext;"}, {"sha": "0518a17f3073885f31ce24d23dadd67a9a9b02c7", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=410679285b3dcad6e4610813a74615f8dc11d74d", "patch": "@@ -17,11 +17,11 @@ use vfs::ChangeKind;\n use crate::{\n     config::Config,\n     dispatch::{NotificationDispatcher, RequestDispatcher},\n-    document::DocumentData,\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState},\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, is_cancelled, notification_is, Progress},\n+    mem_docs::DocumentData,\n     reload::{BuildDataProgress, ProjectWorkspaceProgress},\n     Result,\n };\n@@ -305,7 +305,7 @@ impl GlobalState {\n                             let vfs = &mut self.vfs.write().0;\n                             for (path, contents) in files {\n                                 let path = VfsPath::from(path);\n-                                if !self.mem_docs.contains_key(&path) {\n+                                if !self.mem_docs.contains(&path) {\n                                     vfs.set_file_contents(path, contents);\n                                 }\n                             }\n@@ -582,7 +582,7 @@ impl GlobalState {\n                     if this\n                         .mem_docs\n                         .insert(path.clone(), DocumentData::new(params.text_document.version))\n-                        .is_some()\n+                        .is_err()\n                     {\n                         log::error!(\"duplicate DidOpenTextDocument: {}\", path)\n                     }\n@@ -628,7 +628,7 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidCloseTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    if this.mem_docs.remove(&path).is_none() {\n+                    if this.mem_docs.remove(&path).is_err() {\n                         log::error!(\"orphan DidCloseTextDocument: {}\", path);\n                     }\n \n@@ -719,7 +719,7 @@ impl GlobalState {\n     fn maybe_update_diagnostics(&mut self) {\n         let subscriptions = self\n             .mem_docs\n-            .keys()\n+            .iter()\n             .map(|path| self.vfs.read().0.file_id(path).unwrap())\n             .collect::<Vec<_>>();\n "}, {"sha": "8989d7d9e44e10eef3154317361aef9a1065978c", "filename": "crates/rust-analyzer/src/mem_docs.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs?ref=410679285b3dcad6e4610813a74615f8dc11d74d", "patch": "@@ -0,0 +1,56 @@\n+//! In-memory document information.\n+\n+use rustc_hash::FxHashMap;\n+use vfs::VfsPath;\n+\n+/// Holds the set of in-memory documents.\n+///\n+/// For these document, there true contents is maintained by the client. It\n+/// might be different from what's on disk.\n+#[derive(Default, Clone)]\n+pub(crate) struct MemDocs {\n+    mem_docs: FxHashMap<VfsPath, DocumentData>,\n+}\n+\n+impl MemDocs {\n+    pub(crate) fn contains(&self, path: &VfsPath) -> bool {\n+        self.mem_docs.contains_key(path)\n+    }\n+    pub(crate) fn insert(&mut self, path: VfsPath, data: DocumentData) -> Result<(), ()> {\n+        match self.mem_docs.insert(path, data) {\n+            Some(_) => Err(()),\n+            None => Ok(()),\n+        }\n+    }\n+    pub(crate) fn remove(&mut self, path: &VfsPath) -> Result<(), ()> {\n+        match self.mem_docs.remove(path) {\n+            Some(_) => Ok(()),\n+            None => Err(()),\n+        }\n+    }\n+    pub(crate) fn get(&self, path: &VfsPath) -> Option<&DocumentData> {\n+        self.mem_docs.get(path)\n+    }\n+    pub(crate) fn get_mut(&mut self, path: &VfsPath) -> Option<&mut DocumentData> {\n+        self.mem_docs.get_mut(path)\n+    }\n+\n+    pub(crate) fn iter(&self) -> impl Iterator<Item = &VfsPath> {\n+        self.mem_docs.keys()\n+    }\n+}\n+\n+/// Information about a document that the Language Client\n+/// knows about.\n+/// Its lifetime is driven by the textDocument/didOpen and textDocument/didClose\n+/// client notifications.\n+#[derive(Debug, Clone)]\n+pub(crate) struct DocumentData {\n+    pub(crate) version: i32,\n+}\n+\n+impl DocumentData {\n+    pub(crate) fn new(version: i32) -> Self {\n+        DocumentData { version }\n+    }\n+}"}, {"sha": "0530bf14fc873a85e96653105279135ed3e45fb0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/410679285b3dcad6e4610813a74615f8dc11d74d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=410679285b3dcad6e4610813a74615f8dc11d74d", "patch": "@@ -403,7 +403,7 @@ impl GlobalState {\n             let mut load = |path: &AbsPath| {\n                 let _p = profile::span(\"GlobalState::load\");\n                 let vfs_path = vfs::VfsPath::from(path.to_path_buf());\n-                if !mem_docs.contains_key(&vfs_path) {\n+                if !mem_docs.contains(&vfs_path) {\n                     let contents = loader.handle.load_sync(path);\n                     vfs.set_file_contents(vfs_path.clone(), contents);\n                 }"}]}