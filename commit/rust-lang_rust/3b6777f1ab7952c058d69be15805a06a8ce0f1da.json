{"sha": "3b6777f1ab7952c058d69be15805a06a8ce0f1da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjc3N2YxYWI3OTUyYzA1OGQ2OWJlMTU4MDVhMDZhOGNlMGYxZGE=", "commit": {"author": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-08-30T17:02:15Z"}, "committer": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-08-30T17:42:52Z"}, "message": "add `TcpStream::set_linger` and `TcpStream::linger`", "tree": {"sha": "17a4583493e121efefb07ad58e1e7b711a9b93f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a4583493e121efefb07ad58e1e7b711a9b93f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6777f1ab7952c058d69be15805a06a8ce0f1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6777f1ab7952c058d69be15805a06a8ce0f1da", "html_url": "https://github.com/rust-lang/rust/commit/3b6777f1ab7952c058d69be15805a06a8ce0f1da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6777f1ab7952c058d69be15805a06a8ce0f1da/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfa773583bb5123e630668f5bfe466716225546", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfa773583bb5123e630668f5bfe466716225546", "html_url": "https://github.com/rust-lang/rust/commit/6cfa773583bb5123e630668f5bfe466716225546"}], "stats": {"total": 167, "additions": 166, "deletions": 1}, "files": [{"sha": "d5e7668e47ce466e67c120a77af73afd311a0408", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -321,6 +321,7 @@\n #![feature(stdsimd)]\n #![feature(stmt_expr_attributes)]\n #![feature(str_internals)]\n+#![feature(tcp_linger)]\n #![feature(test)]\n #![feature(thread_local)]\n #![feature(thread_local_internals)]"}, {"sha": "5b4a9fa7979de644cb0cc043114071cc53dfb480", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -401,6 +401,53 @@ impl TcpStream {\n         self.0.peek(buf)\n     }\n \n+    /// Sets the value of the `SO_LINGER` option on this socket.\n+    ///\n+    /// This value controls how the socket is closed when data remains\n+    /// to be sent. If `SO_LINGER` is set, the socket will remain open\n+    /// for the specified duration as the system attempts to send pending data.\n+    /// Otherwise, the system may close the socket immediately, or wait for a\n+    /// default timeout.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcp_linger)]\n+    ///\n+    /// use std::net::TcpStream;\n+    /// use std::time::Duration;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n+    ///                        .expect(\"Couldn't connect to the server...\");\n+    /// stream.set_linger(Some(Duration::from_secs(0))).expect(\"set_linger call failed\");\n+    /// ```\n+    #[unstable(feature = \"tcp_linger\", issue = \"88494\")]\n+    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+        self.0.set_linger(linger)\n+    }\n+\n+    /// Gets the value of the `SO_LINGER` option on this socket.\n+    ///\n+    /// For more information about this option, see [`TcpStream::set_linger`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(tcp_linger)]\n+    ///\n+    /// use std::net::TcpStream;\n+    /// use std::time::Duration;\n+    ///\n+    /// let stream = TcpStream::connect(\"127.0.0.1:8080\")\n+    ///                        .expect(\"Couldn't connect to the server...\");\n+    /// stream.set_linger(Some(Duration::from_secs(0))).expect(\"set_linger call failed\");\n+    /// assert_eq!(stream.linger().unwrap(), Some(Duration::from_secs(0)));\n+    /// ```\n+    #[unstable(feature = \"tcp_linger\", issue = \"88494\")]\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        self.0.linger()\n+    }\n+\n     /// Sets the value of the `TCP_NODELAY` option on this socket.\n     ///\n     /// If set, this option disables the Nagle algorithm. This means that"}, {"sha": "c2061c1351262595cf9f9d804da9a87f1a606f0e", "filename": "library/std/src/net/tcp/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp%2Ftests.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -767,6 +767,21 @@ fn test_timeout_zero_duration() {\n     drop(listener);\n }\n \n+#[test]\n+#[cfg_attr(target_env = \"sgx\", ignore)]\n+fn linger() {\n+    let addr = next_test_ip4();\n+    let _listener = t!(TcpListener::bind(&addr));\n+\n+    let stream = t!(TcpStream::connect(&(\"localhost\", addr.port())));\n+\n+    assert_eq!(None, t!(stream.linger()));\n+    t!(stream.set_linger(Some(Duration::from_secs(1))));\n+    assert_eq!(Some(Duration::from_secs(1)), t!(stream.linger()));\n+    t!(stream.set_linger(None));\n+    assert_eq!(None, t!(stream.linger()));\n+}\n+\n #[test]\n #[cfg_attr(target_env = \"sgx\", ignore)]\n fn nodelay() {"}, {"sha": "880ef678a4f7a2f704635cbdd35dd863cec37bad", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -182,6 +182,14 @@ impl TcpStream {\n         Ok(self.clone())\n     }\n \n+    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+        unsupported()\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        unsupported()\n+    }\n+\n     pub fn set_nodelay(&self, mode: bool) -> io::Result<()> {\n         abi::tcpstream::set_nodelay(*self.0.as_inner(), mode)\n             .map_err(|_| io::Error::new_const(ErrorKind::Uncategorized, &\"set_nodelay failed\"))"}, {"sha": "89c5af6124f201bfdb8225a5306b494a4080099b", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -183,6 +183,14 @@ impl TcpStream {\n         Ok(self.clone())\n     }\n \n+    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {\n+        sgx_ineffective(())\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        sgx_ineffective(None)\n+    }\n+\n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n         sgx_ineffective(())\n     }"}, {"sha": "ba63b41534c1a4f55deca27ad7c99d67ec85158d", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -98,6 +98,14 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn linger(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n         pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n             unimpl!();\n         }\n@@ -214,6 +222,14 @@ pub mod net {\n             unimpl!();\n         }\n \n+        pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {\n+            unimpl!();\n+        }\n+\n+        pub fn linger(&self) -> io::Result<Option<Duration>> {\n+            unimpl!();\n+        }\n+\n         pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n             unimpl!();\n         }"}, {"sha": "d2e8c43a665954f57500935b5f508a73574a9cc0", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -12,6 +12,14 @@ use crate::time::{Duration, Instant};\n \n use libc::{c_int, c_void, size_t, sockaddr, socklen_t, MSG_PEEK};\n \n+cfg_if::cfg_if! {\n+    if #[cfg(target_vendor = \"apple\")] {\n+        use libc::SO_LINGER_SEC as SO_LINGER;\n+    } else {\n+        use libc::SO_LINGER;\n+    }\n+}\n+\n pub use crate::sys::{cvt, cvt_r};\n \n #[allow(unused_extern_crates)]\n@@ -376,6 +384,21 @@ impl Socket {\n         Ok(())\n     }\n \n+    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+        let linger = libc::linger {\n+            l_onoff: linger.is_some() as libc::c_int,\n+            l_linger: linger.map(|dur| dur.as_secs() as libc::c_int).unwrap_or_default(),\n+        };\n+\n+        setsockopt(self, libc::SOL_SOCKET, SO_LINGER, linger)\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        let val: libc::linger = getsockopt(self, libc::SOL_SOCKET, SO_LINGER)?;\n+\n+        Ok((val.l_onoff != 0).then(|| Duration::from_secs(val.l_linger as u64)))\n+    }\n+\n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n         setsockopt(self, libc::IPPROTO_TCP, libc::TCP_NODELAY, nodelay as c_int)\n     }"}, {"sha": "dbb6ce22c22de18cd99c6df1483a4efeb2e835cc", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -76,6 +76,14 @@ impl TcpStream {\n         self.0\n     }\n \n+    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {\n+        self.0\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        self.0\n+    }\n+\n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n         self.0\n     }"}, {"sha": "a4dbb225376eee1d7e0b0c63fcf65ae80cd6450e", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -127,6 +127,14 @@ impl TcpStream {\n         unsupported()\n     }\n \n+    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {\n+        unsupported()\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        unsupported()\n+    }\n+\n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n         unsupported()\n     }"}, {"sha": "cedf389fbf503b85b0ef7770ec17c0ba7974baf5", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -197,6 +197,7 @@ pub const SOCK_DGRAM: c_int = 2;\n pub const SOCK_STREAM: c_int = 1;\n pub const SOCKET_ERROR: c_int = -1;\n pub const SOL_SOCKET: c_int = 0xffff;\n+pub const SO_LINGER: c_int = 0x0080;\n pub const SO_RCVTIMEO: c_int = 0x1006;\n pub const SO_SNDTIMEO: c_int = 0x1005;\n pub const IPPROTO_IP: c_int = 0;\n@@ -216,6 +217,13 @@ pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n pub const MSG_PEEK: c_int = 0x2;\n \n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct linger {\n+    pub l_onoff: c_ushort,\n+    pub l_linger: c_ushort,\n+}\n+\n #[repr(C)]\n pub struct ip_mreq {\n     pub imr_multiaddr: in_addr,"}, {"sha": "1ad4f0c70a3c6748dbbd62bf0f01a27a9396575f", "filename": "library/std/src/sys/windows/net.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -15,7 +15,7 @@ use crate::sys_common::net;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n-use libc::{c_int, c_long, c_ulong};\n+use libc::{c_int, c_long, c_ulong, c_ushort};\n \n pub type wrlen_t = i32;\n \n@@ -446,6 +446,21 @@ impl Socket {\n         cvt(result).map(drop)\n     }\n \n+    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+        let linger = c::linger {\n+            l_onoff: linger.is_some() as c_ushort,\n+            l_linger: linger.map(|dur| dur.as_secs() as c_ushort).unwrap_or_default(),\n+        };\n+\n+        net::setsockopt(self, c::SOL_SOCKET, c::SO_LINGER, linger)\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        let val: c::linger = net::getsockopt(self, c::SOL_SOCKET, c::SO_LINGER)?;\n+\n+        Ok((val.l_onoff != 0).then(|| Duration::from_secs(val.l_linger as u64)))\n+    }\n+\n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n         net::setsockopt(self, c::IPPROTO_TCP, c::TCP_NODELAY, nodelay as c::BYTE)\n     }"}, {"sha": "c5c3df361f34bf86066eee932b74817ae83f2a43", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6777f1ab7952c058d69be15805a06a8ce0f1da/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=3b6777f1ab7952c058d69be15805a06a8ce0f1da", "patch": "@@ -297,6 +297,14 @@ impl TcpStream {\n         self.inner.duplicate().map(|s| TcpStream { inner: s })\n     }\n \n+    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {\n+        self.inner.set_linger(linger)\n+    }\n+\n+    pub fn linger(&self) -> io::Result<Option<Duration>> {\n+        self.inner.linger()\n+    }\n+\n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n         self.inner.set_nodelay(nodelay)\n     }"}]}