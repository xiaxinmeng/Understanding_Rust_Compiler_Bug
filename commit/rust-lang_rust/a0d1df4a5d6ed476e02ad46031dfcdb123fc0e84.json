{"sha": "a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "node_id": "C_kwDOAAsO6NoAKGEwZDFkZjRhNWQ2ZWQ0NzZlMDJhZDQ2MDMxZGZjZGIxMjNmYzBlODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T05:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T05:21:14Z"}, "message": "Auto merge of #101709 - nnethercote:simplify-visitors-more, r=cjgillot\n\nSimplify visitors more\n\nA successor to #100392.\n\nr? `@cjgillot`", "tree": {"sha": "2ef5cd9fbe79ec1310bb3c1622033710115c551d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef5cd9fbe79ec1310bb3c1622033710115c551d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "html_url": "https://github.com/rust-lang/rust/commit/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b58addae4d629734ebbfc9c69f4e0653b99569", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b58addae4d629734ebbfc9c69f4e0653b99569", "html_url": "https://github.com/rust-lang/rust/commit/a5b58addae4d629734ebbfc9c69f4e0653b99569"}, {"sha": "b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "html_url": "https://github.com/rust-lang/rust/commit/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9"}], "stats": {"total": 271, "additions": 115, "deletions": 156}, "files": [{"sha": "a71e055a4b3e54100ca1dc7f6fa94778543beabf", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -156,8 +156,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'ast>, s: Span, _: NodeId) {\n-        walk_fn(self, fk, s)\n+    fn visit_fn(&mut self, fk: FnKind<'ast>, _: Span, _: NodeId) {\n+        walk_fn(self, fk)\n     }\n     fn visit_assoc_item(&mut self, i: &'ast AssocItem, ctxt: AssocCtxt) {\n         walk_assoc_item(self, i, ctxt)\n@@ -201,11 +201,11 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_use_tree(&mut self, use_tree: &'ast UseTree, id: NodeId, _nested: bool) {\n         walk_use_tree(self, use_tree, id)\n     }\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n-        walk_path_segment(self, path_span, path_segment)\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n+        walk_path_segment(self, path_segment)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n-        walk_generic_args(self, path_span, generic_args)\n+    fn visit_generic_args(&mut self, generic_args: &'ast GenericArgs) {\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n         walk_generic_arg(self, generic_arg)\n@@ -435,7 +435,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n \n pub fn walk_path<'a, V: Visitor<'a>>(visitor: &mut V, path: &'a Path) {\n     for segment in &path.segments {\n-        visitor.visit_path_segment(path.span, segment);\n+        visitor.visit_path_segment(segment);\n     }\n }\n \n@@ -457,18 +457,14 @@ pub fn walk_use_tree<'a, V: Visitor<'a>>(visitor: &mut V, use_tree: &'a UseTree,\n     }\n }\n \n-pub fn walk_path_segment<'a, V: Visitor<'a>>(\n-    visitor: &mut V,\n-    path_span: Span,\n-    segment: &'a PathSegment,\n-) {\n+pub fn walk_path_segment<'a, V: Visitor<'a>>(visitor: &mut V, segment: &'a PathSegment) {\n     visitor.visit_ident(segment.ident);\n     if let Some(ref args) = segment.args {\n-        visitor.visit_generic_args(path_span, args);\n+        visitor.visit_generic_args(args);\n     }\n }\n \n-pub fn walk_generic_args<'a, V>(visitor: &mut V, _path_span: Span, generic_args: &'a GenericArgs)\n+pub fn walk_generic_args<'a, V>(visitor: &mut V, generic_args: &'a GenericArgs)\n where\n     V: Visitor<'a>,\n {\n@@ -502,7 +498,7 @@ where\n pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'a AssocConstraint) {\n     visitor.visit_ident(constraint.ident);\n     if let Some(ref gen_args) = constraint.gen_args {\n-        visitor.visit_generic_args(gen_args.span(), gen_args);\n+        visitor.visit_generic_args(gen_args);\n     }\n     match constraint.kind {\n         AssocConstraintKind::Equality { ref term } => match term {\n@@ -659,7 +655,7 @@ pub fn walk_fn_decl<'a, V: Visitor<'a>>(visitor: &mut V, function_declaration: &\n     visitor.visit_fn_ret_ty(&function_declaration.output);\n }\n \n-pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Span) {\n+pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>) {\n     match kind {\n         FnKind::Fn(_, _, sig, _, generics, body) => {\n             visitor.visit_generics(generics);\n@@ -800,7 +796,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _span) => {\n-            visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_path_segment(segment);\n             visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "85846b56762e4cc0331b417f9fb28fe829a7907a", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -246,9 +246,9 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'hir PathSegment<'hir>) {\n-        self.insert(path_span, path_segment.hir_id, Node::PathSegment(path_segment));\n-        intravisit::walk_path_segment(self, path_span, path_segment);\n+    fn visit_path_segment(&mut self, path_segment: &'hir PathSegment<'hir>) {\n+        self.insert(path_segment.ident.span, path_segment.hir_id, Node::PathSegment(path_segment));\n+        intravisit::walk_path_segment(self, path_segment);\n     }\n \n     fn visit_ty(&mut self, ty: &'hir Ty<'hir>) {\n@@ -280,12 +280,12 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         fk: intravisit::FnKind<'hir>,\n         fd: &'hir FnDecl<'hir>,\n         b: BodyId,\n-        s: Span,\n+        _: Span,\n         id: HirId,\n     ) {\n         assert_eq!(self.owner, id.owner);\n         assert_eq!(self.parent_node, id.local_id);\n-        intravisit::walk_fn(self, fk, fd, b, s, id);\n+        intravisit::walk_fn(self, fk, fd, b, id);\n     }\n \n     fn visit_block(&mut self, block: &'hir Block<'hir>) {"}, {"sha": "914fc5f58da140a7110f3a380b9e0788ad4db42c", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -63,9 +63,9 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n         self.record_lifetime_use(*lifetime);\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n-        self.record_elided_anchor(path_segment.id, path_span);\n-        visit::walk_path_segment(self, path_span, path_segment);\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n+        self.record_elided_anchor(path_segment.id, path_segment.ident.span);\n+        visit::walk_path_segment(self, path_segment);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef) {"}, {"sha": "b1d10e07ad0fbc63fa74586c66176aa8387c36f1", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -223,11 +223,9 @@ impl<'a> AstValidator<'a> {\n                 for (i, segment) in path.segments.iter().enumerate() {\n                     // Allow `impl Trait` iff we're on the final path segment\n                     if i == path.segments.len() - 1 {\n-                        self.visit_path_segment(path.span, segment);\n+                        self.visit_path_segment(segment);\n                     } else {\n-                        self.with_banned_impl_trait(|this| {\n-                            this.visit_path_segment(path.span, segment)\n-                        });\n+                        self.with_banned_impl_trait(|this| this.visit_path_segment(segment));\n                     }\n                 }\n             }\n@@ -1293,7 +1291,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     // Mirrors `visit::walk_generic_args`, but tracks relevant state.\n-    fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n+    fn visit_generic_args(&mut self, generic_args: &'a GenericArgs) {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 self.check_generic_args_before_constraints(data);\n@@ -1529,7 +1527,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             matches!(fk.header(), Some(FnHeader { constness: Const::Yes(_), .. }))\n                 || matches!(fk.ctxt(), Some(FnCtxt::Assoc(_)));\n \n-        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk, span));\n+        self.with_tilde_const(tilde_const_allowed, |this| visit::walk_fn(this, fk));\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {"}, {"sha": "bd16fc92c65f498ce3820258d937417f18a2071b", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -680,7 +680,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n \n-        visit::walk_fn(self, fn_kind, span)\n+        visit::walk_fn(self, fn_kind)\n     }\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {"}, {"sha": "fa42f87786de913c477daf8ebcb1d764e6a4196f", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -63,9 +63,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_generics(self, g)\n     }\n-    fn visit_fn(&mut self, fk: visit::FnKind<'_>, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: visit::FnKind<'_>, _: Span, _: NodeId) {\n         self.count += 1;\n-        walk_fn(self, fk, s)\n+        walk_fn(self, fk)\n     }\n     fn visit_assoc_item(&mut self, ti: &AssocItem, ctxt: AssocCtxt) {\n         self.count += 1;\n@@ -115,9 +115,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_use_tree(self, use_tree, id)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &GenericArgs) {\n+    fn visit_generic_args(&mut self, generic_args: &GenericArgs) {\n         self.count += 1;\n-        walk_generic_args(self, path_span, generic_args)\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_assoc_constraint(&mut self, constraint: &AssocConstraint) {\n         self.count += 1;"}, {"sha": "8f5f314ecae1d309323611c8f4116494eb20edb3", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -298,7 +298,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_id(&mut self, _hir_id: HirId) {\n         // Nothing to do.\n     }\n-    fn visit_name(&mut self, _span: Span, _name: Symbol) {\n+    fn visit_name(&mut self, _name: Symbol) {\n         // Nothing to do.\n     }\n     fn visit_ident(&mut self, ident: Ident) {\n@@ -361,8 +361,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_fn_decl(&mut self, fd: &'v FnDecl<'v>) {\n         walk_fn_decl(self, fd)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, s: Span, id: HirId) {\n-        walk_fn(self, fk, fd, b, s, id)\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, _: Span, id: HirId) {\n+        walk_fn(self, fk, fd, b, id)\n     }\n     fn visit_use(&mut self, path: &'v Path<'v>, hir_id: HirId) {\n         walk_use(self, path, hir_id)\n@@ -388,8 +388,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_param_bound(&mut self, bounds: &'v GenericBound<'v>) {\n         walk_param_bound(self, bounds)\n     }\n-    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {\n-        walk_poly_trait_ref(self, t, m)\n+    fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>) {\n+        walk_poly_trait_ref(self, t)\n     }\n     fn visit_variant_data(&mut self, s: &'v VariantData<'v>) {\n         walk_struct_def(self, s)\n@@ -420,17 +420,18 @@ pub trait Visitor<'v>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, span: Span) {\n-        walk_qpath(self, qpath, id, span)\n+    // The span is that of the surrounding type/pattern/expr/whatever.\n+    fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, _span: Span) {\n+        walk_qpath(self, qpath, id)\n     }\n     fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {\n         walk_path(self, path)\n     }\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment<'v>) {\n-        walk_path_segment(self, path_span, path_segment)\n+    fn visit_path_segment(&mut self, path_segment: &'v PathSegment<'v>) {\n+        walk_path_segment(self, path_segment)\n     }\n-    fn visit_generic_args(&mut self, path_span: Span, generic_args: &'v GenericArgs<'v>) {\n-        walk_generic_args(self, path_span, generic_args)\n+    fn visit_generic_args(&mut self, generic_args: &'v GenericArgs<'v>) {\n+        walk_generic_args(self, generic_args)\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding<'v>) {\n         walk_assoc_type_binding(self, type_binding)\n@@ -472,7 +473,7 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {\n }\n \n pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, ident: Ident) {\n-    visitor.visit_name(ident.span, ident.name);\n+    visitor.visit_name(ident.name);\n }\n \n pub fn walk_label<'v, V: Visitor<'v>>(visitor: &mut V, label: &'v Label) {\n@@ -494,11 +495,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n     }\n }\n \n-pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    trait_ref: &'v PolyTraitRef<'v>,\n-    _modifier: TraitBoundModifier,\n-) {\n+pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v PolyTraitRef<'v>) {\n     walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n@@ -519,7 +516,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n         ItemKind::ExternCrate(orig_name) => {\n             visitor.visit_id(item.hir_id());\n             if let Some(orig_name) = orig_name {\n-                visitor.visit_name(item.span, orig_name);\n+                visitor.visit_name(orig_name);\n             }\n         }\n         ItemKind::Use(ref path, _) => {\n@@ -680,7 +677,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         }\n         TyKind::TraitObject(bounds, ref lifetime, _syntax) => {\n             for bound in bounds {\n-                visitor.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n+                visitor.visit_poly_trait_ref(bound);\n             }\n             visitor.visit_lifetime(lifetime);\n         }\n@@ -693,48 +690,35 @@ pub fn walk_inf<'v, V: Visitor<'v>>(visitor: &mut V, inf: &'v InferArg) {\n     visitor.visit_id(inf.hir_id);\n }\n \n-pub fn walk_qpath<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    qpath: &'v QPath<'v>,\n-    id: HirId,\n-    span: Span,\n-) {\n+pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath<'v>, id: HirId) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n             walk_list!(visitor, visit_ty, maybe_qself);\n             visitor.visit_path(path, id)\n         }\n         QPath::TypeRelative(ref qself, ref segment) => {\n             visitor.visit_ty(qself);\n-            visitor.visit_path_segment(span, segment);\n+            visitor.visit_path_segment(segment);\n         }\n         QPath::LangItem(..) => {}\n     }\n }\n \n pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>) {\n     for segment in path.segments {\n-        visitor.visit_path_segment(path.span, segment);\n+        visitor.visit_path_segment(segment);\n     }\n }\n \n-pub fn walk_path_segment<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    path_span: Span,\n-    segment: &'v PathSegment<'v>,\n-) {\n+pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V, segment: &'v PathSegment<'v>) {\n     visitor.visit_ident(segment.ident);\n     visitor.visit_id(segment.hir_id);\n     if let Some(ref args) = segment.args {\n-        visitor.visit_generic_args(path_span, args);\n+        visitor.visit_generic_args(args);\n     }\n }\n \n-pub fn walk_generic_args<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    _path_span: Span,\n-    generic_args: &'v GenericArgs<'v>,\n-) {\n+pub fn walk_generic_args<'v, V: Visitor<'v>>(visitor: &mut V, generic_args: &'v GenericArgs<'v>) {\n     walk_list!(visitor, visit_generic_arg, generic_args.args);\n     walk_list!(visitor, visit_assoc_type_binding, generic_args.bindings);\n }\n@@ -745,7 +729,7 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n ) {\n     visitor.visit_id(type_binding.hir_id);\n     visitor.visit_ident(type_binding.ident);\n-    visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n+    visitor.visit_generic_args(type_binding.gen_args);\n     match type_binding.kind {\n         TypeBindingKind::Equality { ref term } => match term {\n             Term::Ty(ref ty) => visitor.visit_ty(ty),\n@@ -819,12 +803,12 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n \n pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound<'v>) {\n     match *bound {\n-        GenericBound::Trait(ref typ, modifier) => {\n-            visitor.visit_poly_trait_ref(typ, modifier);\n+        GenericBound::Trait(ref typ, _modifier) => {\n+            visitor.visit_poly_trait_ref(typ);\n         }\n-        GenericBound::LangItemTrait(_, span, hir_id, args) => {\n+        GenericBound::LangItemTrait(_, _span, hir_id, args) => {\n             visitor.visit_id(hir_id);\n-            visitor.visit_generic_args(span, args);\n+            visitor.visit_generic_args(args);\n         }\n         GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n@@ -910,7 +894,6 @@ pub fn walk_fn<'v, V: Visitor<'v>>(\n     function_kind: FnKind<'v>,\n     function_declaration: &'v FnDecl<'v>,\n     body_id: BodyId,\n-    _span: Span,\n     id: HirId,\n ) {\n     visitor.visit_id(id);\n@@ -1095,7 +1078,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::MethodCall(ref segment, receiver, arguments, _) => {\n-            visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_path_segment(segment);\n             visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }"}, {"sha": "d8f540b74465d46c1ad725a6c18b27c86330d2f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n             hir::TyKind::TraitObject(bounds, ..) => {\n                 for bound in bounds {\n                     self.current_index.shift_in(1);\n-                    self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                    self.visit_poly_trait_ref(bound);\n                     self.current_index.shift_out(1);\n                 }\n             }"}, {"sha": "0ff2ef5cda39177b9708e8753381fb8d9ec4a3f9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1467,7 +1467,7 @@ impl TypeAliasBounds {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help(span, fluent::lint::builtin_type_alias_bounds_help);\n                 }\n-                intravisit::walk_qpath(self, qpath, id, span)\n+                intravisit::walk_qpath(self, qpath, id)\n             }\n         }\n \n@@ -2000,7 +2000,7 @@ impl KeywordIdents {\n }\n \n impl EarlyLintPass for KeywordIdents {\n-    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef) {\n         self.check_tokens(cx, mac_def.body.inner_tokens());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {"}, {"sha": "96ecd79a69cfb3603cae46f45a7c06064ab331a8", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -147,7 +147,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, span: Span, id: ast::NodeId) {\n         run_early_pass!(self, check_fn, fk, span, id);\n         self.check_id(id);\n-        ast_visit::walk_fn(self, fk, span);\n+        ast_visit::walk_fn(self, fk);\n \n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n@@ -266,17 +266,17 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         ast_visit::walk_path(self, p);\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, s: &'a ast::PathSegment) {\n+    fn visit_path_segment(&mut self, s: &'a ast::PathSegment) {\n         self.check_id(s.id);\n-        ast_visit::walk_path_segment(self, path_span, s);\n+        ast_visit::walk_path_segment(self, s);\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n         run_early_pass!(self, check_attribute, attr);\n     }\n \n     fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n-        run_early_pass!(self, check_mac_def, mac, id);\n+        run_early_pass!(self, check_mac_def, mac);\n         self.check_id(id);\n     }\n "}, {"sha": "da6f1c5eeccfd1112d25b7a27c63cecdba145e16", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -76,8 +76,8 @@ impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n         self.context.param_env = old_param_env;\n     }\n \n-    fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n-        lint_callback!(self, check_mod, m, s, n);\n+    fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, n: hir::HirId) {\n+        lint_callback!(self, check_mod, m, n);\n         hir_visit::walk_mod(self, m, n);\n     }\n }\n@@ -187,7 +187,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         let old_cached_typeck_results = self.context.cached_typeck_results.take();\n         let body = self.context.tcx.hir().body(body_id);\n         lint_callback!(self, check_fn, fk, decl, body, span, id);\n-        hir_visit::walk_fn(self, fk, decl, body_id, span, id);\n+        hir_visit::walk_fn(self, fk, decl, body_id, id);\n         self.context.enclosing_body = old_enclosing_body;\n         self.context.cached_typeck_results.set(old_cached_typeck_results);\n     }\n@@ -220,9 +220,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_inf(self, inf);\n     }\n \n-    fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n+    fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, _: Span, n: hir::HirId) {\n         if !self.context.only_module {\n-            self.process_mod(m, s, n);\n+            self.process_mod(m, n);\n         }\n     }\n \n@@ -258,13 +258,9 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_where_predicate(self, p);\n     }\n \n-    fn visit_poly_trait_ref(\n-        &mut self,\n-        t: &'tcx hir::PolyTraitRef<'tcx>,\n-        m: hir::TraitBoundModifier,\n-    ) {\n-        lint_callback!(self, check_poly_trait_ref, t, m);\n-        hir_visit::walk_poly_trait_ref(self, t, m);\n+    fn visit_poly_trait_ref(&mut self, t: &'tcx hir::PolyTraitRef<'tcx>) {\n+        lint_callback!(self, check_poly_trait_ref, t);\n+        hir_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n@@ -358,8 +354,8 @@ fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n \n     let mut cx = LateContextAndPass { context, pass };\n \n-    let (module, span, hir_id) = tcx.hir().get_module(module_def_id);\n-    cx.process_mod(module, span, hir_id);\n+    let (module, _span, hir_id) = tcx.hir().get_module(module_def_id);\n+    cx.process_mod(module, hir_id);\n \n     // Visit the crate attributes\n     if hir_id == hir::CRATE_HIR_ID {"}, {"sha": "768ad84838b154cb0e8ceebc91d323ab72ca74e5", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -327,13 +327,7 @@ impl NonSnakeCase {\n }\n \n impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n-    fn check_mod(\n-        &mut self,\n-        cx: &LateContext<'_>,\n-        _: &'tcx hir::Mod<'tcx>,\n-        _: Span,\n-        id: hir::HirId,\n-    ) {\n+    fn check_mod(&mut self, cx: &LateContext<'_>, _: &'tcx hir::Mod<'tcx>, id: hir::HirId) {\n         if id != hir::CRATE_HIR_ID {\n             return;\n         }"}, {"sha": "1c6a057d1a85b56e3faf054f711aa52888572623", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -16,7 +16,7 @@ macro_rules! late_lint_methods {\n             fn check_body_post(a: &$hir hir::Body<$hir>);\n             fn check_crate();\n             fn check_crate_post();\n-            fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n+            fn check_mod(a: &$hir hir::Mod<$hir>, b: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n@@ -31,7 +31,7 @@ macro_rules! late_lint_methods {\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n-            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>, b: hir::TraitBoundModifier);\n+            fn check_poly_trait_ref(a: &$hir hir::PolyTraitRef<$hir>);\n             fn check_fn(\n                 a: rustc_hir::intravisit::FnKind<$hir>,\n                 b: &$hir hir::FnDecl<$hir>,\n@@ -162,7 +162,7 @@ macro_rules! early_lint_methods {\n             fn check_impl_item(a: &ast::AssocItem);\n             fn check_variant(a: &ast::Variant);\n             fn check_attribute(a: &ast::Attribute);\n-            fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n+            fn check_mac_def(a: &ast::MacroDef);\n             fn check_mac(a: &ast::MacCall);\n \n             /// Called when entering a syntax node that can have lint attributes such"}, {"sha": "0be2fc05344679875b189d312f086c7fe282b4ad", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -362,11 +362,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         fk: hir_visit::FnKind<'v>,\n         fd: &'v hir::FnDecl<'v>,\n         b: hir::BodyId,\n-        s: Span,\n+        _: Span,\n         id: hir::HirId,\n     ) {\n         self.record(\"FnDecl\", Id::None, fd);\n-        hir_visit::walk_fn(self, fk, fd, b, s, id)\n+        hir_visit::walk_fn(self, fk, fd, b, id)\n     }\n \n     fn visit_use(&mut self, p: &'v hir::Path<'v>, hir_id: hir::HirId) {\n@@ -447,14 +447,14 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_path(self, path)\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v hir::PathSegment<'v>) {\n+    fn visit_path_segment(&mut self, path_segment: &'v hir::PathSegment<'v>) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n-        hir_visit::walk_path_segment(self, path_span, path_segment)\n+        hir_visit::walk_path_segment(self, path_segment)\n     }\n \n-    fn visit_generic_args(&mut self, sp: Span, ga: &'v hir::GenericArgs<'v>) {\n+    fn visit_generic_args(&mut self, ga: &'v hir::GenericArgs<'v>) {\n         self.record(\"GenericArgs\", Id::None, ga);\n-        hir_visit::walk_generic_args(self, sp, ga)\n+        hir_visit::walk_generic_args(self, ga)\n     }\n \n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding<'v>) {\n@@ -612,9 +612,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_where_predicate(self, p)\n     }\n \n-    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, s: Span, _: NodeId) {\n+    fn visit_fn(&mut self, fk: ast_visit::FnKind<'v>, _: Span, _: NodeId) {\n         self.record(\"FnDecl\", Id::None, fk.decl());\n-        ast_visit::walk_fn(self, fk, s)\n+        ast_visit::walk_fn(self, fk)\n     }\n \n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n@@ -652,21 +652,21 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // one non-inline use (in `ast::Path::segments`). The latter case is more\n     // common than the former case, so we implement this visitor and tolerate\n     // the double counting in the former case.\n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {\n+    fn visit_path_segment(&mut self, path_segment: &'v ast::PathSegment) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n-        ast_visit::walk_path_segment(self, path_span, path_segment)\n+        ast_visit::walk_path_segment(self, path_segment)\n     }\n \n     // `GenericArgs` has one inline use (in `ast::AssocConstraint::gen_args`) and one\n     // non-inline use (in `ast::PathSegment::args`). The latter case is more\n     // common, so we implement `visit_generic_args` and tolerate the double\n     // counting in the former case.\n-    fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n+    fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n             [AngleBracketed, Parenthesized]\n         );\n-        ast_visit::walk_generic_args(self, sp, g)\n+        ast_visit::walk_generic_args(self, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {"}, {"sha": "92ef61fe64c3784ccc66d0a93c286f6196933a23", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1314,7 +1314,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n             }\n         }\n \n-        intravisit::walk_qpath(self, qpath, id, span);\n+        intravisit::walk_qpath(self, qpath, id);\n     }\n \n     // Check types of patterns."}, {"sha": "3f88f44ff21a331a1b3233001ac4e21d91021997", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n             }\n         }\n \n-        visit::walk_fn(self, fn_kind, span);\n+        visit::walk_fn(self, fn_kind);\n     }\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {"}, {"sha": "0aea90bb5aaf3e19a619365c21ef039bb1d8a746", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1030,7 +1030,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         if let Some(ref gen_args) = constraint.gen_args {\n             // Forbid anonymous lifetimes in GAT parameters until proper semantics are decided.\n             self.with_lifetime_rib(LifetimeRibKind::AnonymousReportError, |this| {\n-                this.visit_generic_args(gen_args.span(), gen_args)\n+                this.visit_generic_args(gen_args)\n             });\n         }\n         match constraint.kind {\n@@ -1044,10 +1044,10 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n-    fn visit_path_segment(&mut self, path_span: Span, path_segment: &'ast PathSegment) {\n+    fn visit_path_segment(&mut self, path_segment: &'ast PathSegment) {\n         if let Some(ref args) = path_segment.args {\n             match &**args {\n-                GenericArgs::AngleBracketed(..) => visit::walk_generic_args(self, path_span, args),\n+                GenericArgs::AngleBracketed(..) => visit::walk_generic_args(self, args),\n                 GenericArgs::Parenthesized(p_args) => {\n                     // Probe the lifetime ribs to know how to behave.\n                     for rib in self.lifetime_ribs.iter().rev() {\n@@ -1078,7 +1078,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // We have nowhere to introduce generics.  Code is malformed,\n                             // so use regular lifetime resolution to avoid spurious errors.\n                             LifetimeRibKind::Item | LifetimeRibKind::Generics { .. } => {\n-                                visit::walk_generic_args(self, path_span, args);\n+                                visit::walk_generic_args(self, args);\n                                 break;\n                             }\n                             LifetimeRibKind::AnonymousCreateParameter { .. }\n@@ -3798,7 +3798,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 for argument in arguments {\n                     self.resolve_expr(argument, None);\n                 }\n-                self.visit_path_segment(expr.span, segment);\n+                self.visit_path_segment(segment);\n             }\n \n             ExprKind::Call(ref callee, ref arguments) => {"}, {"sha": "4d97046171231c7d9be27cdfa6246be7e552770c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let scope = Scope::TraitRefBoundary { s: self.scope };\n                 self.with(scope, |this| {\n                     for bound in bounds {\n-                        this.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n+                        this.visit_poly_trait_ref(bound);\n                     }\n                 });\n                 match lifetime.name {\n@@ -1105,11 +1105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_poly_trait_ref(\n-        &mut self,\n-        trait_ref: &'tcx hir::PolyTraitRef<'tcx>,\n-        _modifier: hir::TraitBoundModifier,\n-    ) {\n+    fn visit_poly_trait_ref(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) {\n         debug!(\"visit_poly_trait_ref(trait_ref={:?})\", trait_ref);\n \n         let (mut binders, scope_type) = self.poly_trait_ref_binder_info();\n@@ -1827,7 +1823,7 @@ fn is_late_bound_map(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<&FxIndexSet<\n                     // is, those would be potentially inputs to\n                     // projections\n                     if let Some(last_segment) = path.segments.last() {\n-                        self.visit_path_segment(path.span, last_segment);\n+                        self.visit_path_segment(last_segment);\n                     }\n                 }\n "}, {"sha": "8bd42d8d21653fa77b57ed4284351ea76ea86ce0", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1306,7 +1306,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 if let hir::QPath::Resolved(_, path) = path {\n                     self.write_sub_paths_truncated(path);\n                 }\n-                intravisit::walk_qpath(self, path, t.hir_id, t.span);\n+                intravisit::walk_qpath(self, path, t.hir_id);\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 self.visit_ty(ty);"}, {"sha": "fe74ed28aa5cc340caa8aee06d8b2201ee2611ba", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1346,16 +1346,12 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             }\n         }\n \n-        fn visit_poly_trait_ref(\n-            &mut self,\n-            tr: &'tcx hir::PolyTraitRef<'tcx>,\n-            m: hir::TraitBoundModifier,\n-        ) {\n+        fn visit_poly_trait_ref(&mut self, tr: &'tcx hir::PolyTraitRef<'tcx>) {\n             if self.has_late_bound_regions.is_some() {\n                 return;\n             }\n             self.outer_index.shift_in(1);\n-            intravisit::walk_poly_trait_ref(self, tr, m);\n+            intravisit::walk_poly_trait_ref(self, tr);\n             self.outer_index.shift_out(1);\n         }\n "}, {"sha": "751ca24d5f5985844efbe79884d349d808fc5eaf", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -425,7 +425,7 @@ struct UnsafeVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, _: Span, id: HirId) {\n         if self.has_unsafe {\n             return;\n         }\n@@ -438,7 +438,7 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n             }\n         }\n \n-        walk_fn(self, kind, decl, body_id, span, id);\n+        walk_fn(self, kind, decl, body_id, id);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "28dbfbab2e19bd511908dc8b2f8da751a4d2932b", "filename": "src/tools/clippy/clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_then;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n-    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n+    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -120,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>, _: TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &LateContext<'tcx>, poly: &'tcx PolyTraitRef<'tcx>) {\n         self.check_res_emit(cx, &poly.trait_ref.path.res, poly.trait_ref.path.span);\n     }\n }"}, {"sha": "643a7cfd577b796a193593b12702861f4f184894", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n     ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -422,7 +422,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n-    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>, tbm: TraitBoundModifier) {\n+    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>) {\n         let trait_ref = &poly_tref.trait_ref;\n         if CLOSURE_TRAIT_BOUNDS.iter().any(|&item| {\n             self.cx\n@@ -435,7 +435,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             sub_visitor.visit_trait_ref(trait_ref);\n             self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n         } else {\n-            walk_poly_trait_ref(self, poly_tref, tbm);\n+            walk_poly_trait_ref(self, poly_tref);\n         }\n     }\n \n@@ -466,7 +466,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                     self.unelided_trait_object_lifetime = true;\n                 }\n                 for bound in bounds {\n-                    self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n+                    self.visit_poly_trait_ref(bound);\n                 }\n             },\n             _ => walk_ty(self, ty),"}, {"sha": "bf487c7ca20c89b833004962495f853e0c15ab4f", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n     ) {\n         if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n-            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+            walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "3ef2655807974fa794ed45e77b94a5c582b1aea7", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -326,6 +326,6 @@ impl<'tcx> LateLintPass<'tcx> for Unwrap {\n             unwrappables: Vec::new(),\n         };\n \n-        walk_fn(&mut v, kind, decl, body.id(), span, fn_id);\n+        walk_fn(&mut v, kind, decl, body.id(), fn_id);\n     }\n }"}, {"sha": "23b51ec2d08494e1b5deedb1699689fd3caf3c67", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=a0d1df4a5d6ed476e02ad46031dfcdb123fc0e84", "patch": "@@ -1121,7 +1121,7 @@ pub struct ContainsName {\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n-    fn visit_name(&mut self, _: Span, name: Symbol) {\n+    fn visit_name(&mut self, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }"}]}