{"sha": "1191ae87dbf301a26379ca1b9797c352ab082b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOTFhZTg3ZGJmMzAxYTI2Mzc5Y2ExYjk3OTdjMzUyYWIwODJiODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-04T12:11:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-04T12:11:26Z"}, "message": "auto merge of #10793 : chris-morgan/rust/2013-12-04-vim-updates, r=Aatch\n\n- Implement comment nesting (the implementation is quite ugly at present\r\n  and is not quite correct; note the big comment in that area).\r\n\r\n- Highlight invalid escape sequences as errors.\r\n\r\n- Fix up various inconsistencies and incorrectnesses in number\r\n  highlighting.\r\n\r\n- Update prelude items (``std::io::{Buffer, Writer, Reader, Seek}``).\r\n\r\n- Highlight the ``proc`` keyword.\r\n\r\n- Remove %-formatting sequence highlighting (a relic of old formatting).\r\n\r\n- Don't highlight TODO in strings (it's unconventional).", "tree": {"sha": "fc3a3d2064090ec0a063060e902c6814c5172bc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc3a3d2064090ec0a063060e902c6814c5172bc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1191ae87dbf301a26379ca1b9797c352ab082b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1191ae87dbf301a26379ca1b9797c352ab082b85", "html_url": "https://github.com/rust-lang/rust/commit/1191ae87dbf301a26379ca1b9797c352ab082b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1191ae87dbf301a26379ca1b9797c352ab082b85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9635c763ba5edc8c8ea2868b895548b52f640e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9635c763ba5edc8c8ea2868b895548b52f640e5a", "html_url": "https://github.com/rust-lang/rust/commit/9635c763ba5edc8c8ea2868b895548b52f640e5a"}, {"sha": "c9eed5742e15e8c6ee24376970623a246477b8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9eed5742e15e8c6ee24376970623a246477b8f0", "html_url": "https://github.com/rust-lang/rust/commit/c9eed5742e15e8c6ee24376970623a246477b8f0"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "72daa4db37c2263d2ed3f184bfa47ff5c4566fc5", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1191ae87dbf301a26379ca1b9797c352ab082b85/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/1191ae87dbf301a26379ca1b9797c352ab082b85/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=1191ae87dbf301a26379ca1b9797c352ab082b85", "patch": "@@ -3,7 +3,7 @@\n \" Maintainer:   Patrick Walton <pcwalton@mozilla.com>\n \" Maintainer:   Ben Blum <bblum@cs.cmu.edu>\n \" Maintainer:   Chris Morgan <me@chrismorgan.info>\n-\" Last Change:  2013 Oct 29\n+\" Last Change:  2013 Dec 04\n \n if version < 600\n   syntax clear\n@@ -28,6 +28,7 @@ syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite\n \" FIXME: Scoped impl's name is also fallen in this category\n syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite\n syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite\n+syn keyword   rustKeyword     proc\n syn keyword   rustStorage     const mut ref static\n \n syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n@@ -89,6 +90,7 @@ syn keyword rustTrait Orderable Signed Unsigned Round\n syn keyword rustTrait Primitive Int Float ToStrRadix ToPrimitive FromPrimitive\n syn keyword rustTrait GenericPath Path PosixPath WindowsPath\n syn keyword rustTrait RawPtr\n+syn keyword rustTrait Buffer Writer Reader Seek\n syn keyword rustTrait SendStr SendStrOwned SendStrStatic IntoSendStr\n syn keyword rustTrait Str StrVector StrSlice OwnedStr\n syn keyword rustTrait IterBytes\n@@ -143,38 +145,29 @@ syn match     rustOperator     display \"&&\\|||\"\n syn match     rustMacro       '\\w\\(\\w\\)*!' contains=rustAssert,rustFail\n syn match     rustMacro       '#\\w\\(\\w\\)*' contains=rustAssert,rustFail\n \n-syn match     rustFormat      display \"%\\(\\d\\+\\$\\)\\=[-+' #0*]*\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\(\\.\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\)\\=\\([hlLjzt]\\|ll\\|hh\\)\\=\\([aAbdiuoxXDOUfFeEgGcCsSpn?]\\|\\[\\^\\=.[^]]*\\]\\)\" contained\n-syn match     rustFormat      display \"%%\" contained\n+syn match     rustSpecialError display contained /\\\\./\n syn match     rustSpecial     display contained /\\\\\\([nrt0\\\\'\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)/\n syn match     rustStringContinuation display contained /\\\\\\n\\s*/\n-syn region    rustString      start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustTodo,rustFormat,rustSpecial,rustStringContinuation\n+syn region    rustString      start=+\"+ skip=+\\\\\\\\\\|\\\\\"+ end=+\"+ contains=rustSpecial,rustSpecialError,rustStringContinuation\n syn region    rustString      start='r\\z(#*\\)\"' end='\"\\z1'\n \n syn region    rustAttribute   start=\"#\\[\" end=\"\\]\" contains=rustString,rustDeriving\n syn region    rustDeriving    start=\"deriving(\" end=\")\" contained contains=rustTrait\n \n \" Number literals\n-syn match     rustNumber      display \"\\<[0-9][0-9_]*\\>\"\n-syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustNumber      display \"\\<[0-9][0-9_]*\\(i\\|i8\\|i16\\|i32\\|i64\\)\\>\"\n-\n-syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\>\"\n-syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n-syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\>\"\n-syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n-syn match     rustBinNumber   display \"\\<0b[01_]\\+\\>\"\n-syn match     rustBinNumber   display \"\\<0b[01_]\\+\\(u\\|u8\\|u16\\|u32\\|u64\\)\\>\"\n-syn match     rustBinNumber   display \"\\<0b[01_]\\+\\(i8\\|i16\\|i32\\|i64\\)\\>\"\n-\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\(f\\|f32\\|f64\\)\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\([eE][+-]\\=[0-9_]\\+\\)\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\([eE][+-]\\=[0-9_]\\+\\)\\(f\\|f32\\|f64\\)\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\(f\\|f32\\|f64\\)\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\%([eE][+-]\\=[0-9_]\\+\\)\\>\"\n-syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.[0-9_]\\+\\%([eE][+-]\\=[0-9_]\\+\\)\\(f\\|f32\\|f64\\)\\>\"\n+syn match     rustDecNumber   display \"\\<[0-9][0-9_]*\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n+syn match     rustHexNumber   display \"\\<0x[a-fA-F0-9_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n+syn match     rustOctNumber   display \"\\<0o[0-7_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n+syn match     rustBinNumber   display \"\\<0b[01_]\\+\\%([iu]\\%(8\\|16\\|32\\|64\\)\\=\\)\\=\"\n+\n+\" To mark it as a float, it must have at least one of the three things integral values don't have:\n+\" a decimal point and more numbers; an exponent; and a type suffix.\n+syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\\=\"\n+syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\(f32\\|f64\\)\\=\"\n+syn match     rustFloat       display \"\\<[0-9][0-9_]*\\%(\\.[0-9][0-9_]*\\)\\=\\%([eE][+-]\\=[0-9_]\\+\\)\\=\\(f32\\|f64\\)\"\n+\" Special case for numbers of the form \"1.\" which are float literals, unless followed by\n+\" an identifier, which makes them integer literals with a method call or field access.\n+syn match     rustFloat       display \"\\<[0-9][0-9_]*\\.\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\@!\"\n \n \" For the benefit of delimitMate\n syn region rustLifetimeCandidate display start=/&'\\%(\\([^'\\\\]\\|\\\\\\(['nrt0\\\\\\\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'\\)\\@!/ end=/[[:cntrl:][:space:][:punct:]]\\@=\\|$/ contains=rustSigil,rustLifetime\n@@ -183,12 +176,24 @@ syn region rustGenericLifetimeCandidate display start=/\\%(<\\|,\\s*\\)\\@<='/ end=/[\n \n \"rustLifetime must appear before rustCharacter, or chars will get the lifetime highlighting\n syn match     rustLifetime    display \"\\'\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\"\n-syn match   rustCharacter   /'\\([^'\\\\]\\|\\\\\\([nrt0\\\\'\"]\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'/ contains=rustSpecial\n-\n-syn region    rustCommentML   start=\"/\\*\" end=\"\\*/\" contains=rustTodo\n-syn region    rustComment     start=\"//\" end=\"$\" contains=rustTodo keepend\n-syn region    rustCommentMLDoc start=\"/\\*\\%(!\\|\\*[*/]\\@!\\)\" end=\"\\*/\" contains=rustTodo\n-syn region    rustCommentDoc  start=\"//\\%(//\\@!\\|!\\)\" end=\"$\" contains=rustTodo keepend\n+syn match   rustCharacter   /'\\([^'\\\\]\\|\\\\\\(.\\|x\\x\\{2}\\|u\\x\\{4}\\|U\\x\\{8}\\)\\)'/ contains=rustSpecial,rustSpecialError\n+\n+syn cluster rustComment contains=rustCommentLine,rustCommentLineDoc,rustCommentBlock,rustCommentBlockDoc\n+syn region rustCommentLine                                    start=\"//\"                      end=\"$\"   contains=rustTodo\n+syn region rustCommentLineDoc                                 start=\"//\\%(//\\@!\\|!\\)\"         end=\"$\"   contains=rustTodo\n+syn region rustCommentBlock    matchgroup=rustCommentBlock    start=\"/\\*\\%(!\\|\\*[*/]\\@!\\)\\@!\" end=\"\\*/\" contains=rustTodo,@rustComment keepend extend\n+syn region rustCommentBlockDoc matchgroup=rustCommentBlockDoc start=\"/\\*\\%(!\\|\\*[*/]\\@!\\)\"    end=\"\\*/\" contains=rustTodo,@rustComment keepend extend\n+\" FIXME: this is a really ugly and not fully correct implementation. Most\n+\" importantly, a case like ``/* */*`` should have the final ``*`` not being in\n+\" a comment, but in practice at present it leaves comments open two levels\n+\" deep. But as long as you stay away from that particular case, I *believe*\n+\" the highlighting is correct. Due to the way Vim's syntax engine works\n+\" (greedy for start matches, unlike Rust's tokeniser which is searching for\n+\" the earliest-starting match, start or end), I believe this cannot be solved.\n+\" Oh you who would fix it, don't bother with things like duplicating the Block\n+\" rules and putting ``\\*\\@<!`` at the start of them; it makes it worse, as\n+\" then you must deal with cases like ``/*/**/*/``. And don't try making it\n+\" worse with ``\\%(/\\@<!\\*\\)\\@<!``, either...\n \n syn keyword rustTodo contained TODO FIXME XXX NB NOTE\n \n@@ -200,15 +205,16 @@ syn region rustFoldBraces start=\"{\" end=\"}\" transparent fold\n \" It's not enabled by default as it would drive some people mad.\n \n \" Default highlighting {{{1\n+hi def link rustDecNumber       rustNumber\n hi def link rustHexNumber       rustNumber\n hi def link rustOctNumber       rustNumber\n hi def link rustBinNumber       rustNumber\n hi def link rustIdentifierPrime rustIdentifier\n hi def link rustTrait           rustType\n \n hi def link rustSigil         StorageClass\n-hi def link rustFormat        Special\n hi def link rustSpecial       Special\n+hi def link rustSpecialError  Error\n hi def link rustStringContinuation Special\n hi def link rustString        String\n hi def link rustCharacter     Character\n@@ -229,10 +235,10 @@ hi def link rustModPathSep    Delimiter\n hi def link rustFunction      Function\n hi def link rustFuncName      Function\n hi def link rustFuncCall      Function\n-hi def link rustCommentMLDoc  rustCommentDoc\n-hi def link rustCommentDoc    SpecialComment\n-hi def link rustCommentML     rustComment\n-hi def link rustComment       Comment\n+hi def link rustCommentLine   Comment\n+hi def link rustCommentLineDoc SpecialComment\n+hi def link rustCommentBlock  rustCommentLine\n+hi def link rustCommentBlockDoc rustCommentLineDoc\n hi def link rustAssert        PreCondit\n hi def link rustFail          PreCondit\n hi def link rustMacro         Macro"}]}