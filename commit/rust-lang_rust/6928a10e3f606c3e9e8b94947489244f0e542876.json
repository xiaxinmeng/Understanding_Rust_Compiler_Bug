{"sha": "6928a10e3f606c3e9e8b94947489244f0e542876", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MjhhMTBlM2Y2MDZjM2U5ZThiOTQ5NDc0ODkyNDRmMGU1NDI4NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-09T12:35:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-09T12:35:06Z"}, "message": "auto merge of #8362 : sfackler/rust/env, r=alexcrichton\n\nenv! aborts compilation of the specified environment variable is not\r\ndefined and takes an optional second argument containing a custom\r\nerror message. option_env! creates an Option<&'static str> containing\r\nthe value of the environment variable.\r\n\r\nThere are no run-pass tests that check the behavior when the environment\r\nvariable is defined since the test framework doesn't support setting\r\nenvironment variables at compile time as opposed to runtime. However,\r\nboth env! and option_env! are used inside of rustc itself, which should\r\nact as a sufficient test.\r\n\r\nFixes #2248.", "tree": {"sha": "75c6623ff2651debff3c938efa80aaf00aeacb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c6623ff2651debff3c938efa80aaf00aeacb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6928a10e3f606c3e9e8b94947489244f0e542876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6928a10e3f606c3e9e8b94947489244f0e542876", "html_url": "https://github.com/rust-lang/rust/commit/6928a10e3f606c3e9e8b94947489244f0e542876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6928a10e3f606c3e9e8b94947489244f0e542876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe2e59c67842b37de212bf63466b6280c2bf498", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe2e59c67842b37de212bf63466b6280c2bf498", "html_url": "https://github.com/rust-lang/rust/commit/2fe2e59c67842b37de212bf63466b6280c2bf498"}, {"sha": "c3825c835197a97ff4f254802efde80335d3833b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3825c835197a97ff4f254802efde80335d3833b", "html_url": "https://github.com/rust-lang/rust/commit/c3825c835197a97ff4f254802efde80335d3833b"}], "stats": {"total": 200, "additions": 168, "deletions": 32}, "files": [{"sha": "6aac627729c39f704336038b4f3a12dd2db3d567", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -168,6 +168,7 @@ pub fn get_absolute_rpath(lib: &Path) -> Path {\n     os::make_absolute(lib).dir_path()\n }\n \n+#[cfg(stage0)]\n pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n@@ -179,6 +180,14 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     os::make_absolute(&Path(install_prefix).push_rel(&tlib))\n }\n \n+#[cfg(not(stage0))]\n+pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n+    let install_prefix = env!(\"CFG_PREFIX\");\n+\n+    let tlib = filesearch::relative_target_lib_path(target_triple);\n+    os::make_absolute(&Path(install_prefix).push_rel(&tlib))\n+}\n+\n pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n     let mut set = HashSet::new();\n     let mut minimized = ~[];"}, {"sha": "e349502d143c0b0432104190834e75621dc25d0f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -578,6 +578,7 @@ pub fn build_target_config(sopts: @session::options,\n     return target_cfg;\n }\n \n+#[cfg(stage0)]\n pub fn host_triple() -> ~str {\n     // Get the host triple out of the build environment. This ensures that our\n     // idea of the host triple is the same as for the set of libraries we've\n@@ -595,6 +596,19 @@ pub fn host_triple() -> ~str {\n         };\n }\n \n+#[cfg(not(stage0))]\n+pub fn host_triple() -> ~str {\n+    // Get the host triple out of the build environment. This ensures that our\n+    // idea of the host triple is the same as for the set of libraries we've\n+    // actually built.  We can't just take LLVM's host triple because they\n+    // normalize all ix86 architectures to i386.\n+    //\n+    // Instead of grabbing the host triple (for the current host), we grab (at\n+    // compile time) the target triple that this rustc is built with and\n+    // calling that (at runtime) the host triple.\n+    (env!(\"CFG_COMPILER_TRIPLE\")).to_owned()\n+}\n+\n pub fn build_session_options(binary: @str,\n                              matches: &getopts::Matches,\n                              demitter: diagnostic::Emitter)"}, {"sha": "e18879464e892eac378c2e59c82ac1233c39c87b", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -186,10 +186,16 @@ fn get_rustpkg_lib_path_nearest() -> Result<Path, ~str> {\n \n // The name of the directory rustc expects libraries to be located.\n // On Unix should be \"lib\", on windows \"bin\"\n+#[cfg(stage0)]\n pub fn libdir() -> ~str {\n    let libdir = env!(\"CFG_LIBDIR\");\n    if libdir.is_empty() {\n       fail!(\"rustc compiled without CFG_LIBDIR environment variable\");\n    }\n    libdir.to_owned()\n }\n+\n+#[cfg(not(stage0))]\n+pub fn libdir() -> ~str {\n+    (env!(\"CFG_LIBDIR\")).to_owned()\n+}"}, {"sha": "43953a50e15c2e3d57c13e5525b215b56afff13a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -4994,7 +4994,9 @@ impl Resolver {\n                             if self.structs.contains(&class_id) => {\n                         self.record_def(expr.id, definition);\n                     }\n-                    _ => {\n+                    result => {\n+                        debug!(\"(resolving expression) didn't find struct \\\n+                                def: %?\", result);\n                         self.session.span_err(\n                             path.span,\n                             fmt!(\"`%s` does not name a structure\","}, {"sha": "369045500ad9bad0950e2bd6681abfc742e9bf7d", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -117,6 +117,7 @@ mod std {\n }\n */\n \n+#[cfg(stage0)]\n pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n     let env_vers = env!(\"CFG_VERSION\");\n@@ -125,6 +126,16 @@ pub fn version(argv0: &str) {\n     printfln!(\"host: %s\", host_triple());\n }\n \n+#[cfg(not(stage0))]\n+pub fn version(argv0: &str) {\n+    let vers = match option_env!(\"CFG_VERSION\") {\n+        Some(vers) => vers,\n+        None => \"unknown version\"\n+    };\n+    printfln!(\"%s %s\", argv0, vers);\n+    printfln!(\"host: %s\", host_triple());\n+}\n+\n pub fn usage(argv0: &str) {\n     let message = fmt!(\"Usage: %s [OPTIONS] INPUT\", argv0);\n     printfln!(\"%s\\"}, {"sha": "b5d97427baf29737216b2d2d472c9fd296d18bef", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -59,7 +59,7 @@ pub fn expand_asm(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n-                                  ~\"inline assembly must be a string literal.\");\n+                                  \"inline assembly must be a string literal.\");\n             }\n             Outputs => {\n                 while *p.token != token::EOF &&"}, {"sha": "1e696451701726593cfccd1b6deda0ebf1fcd72e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -148,7 +148,9 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n         intern(&\"auto_decode\"),\n         @SE(ItemDecorator(ext::auto_encode::expand_auto_decode)));\n     syntax_expanders.insert(intern(&\"env\"),\n-                            builtin_normal_tt(ext::env::expand_syntax_ext));\n+                            builtin_normal_tt(ext::env::expand_env));\n+    syntax_expanders.insert(intern(&\"option_env\"),\n+                            builtin_normal_tt(ext::env::expand_option_env));\n     syntax_expanders.insert(intern(\"bytes\"),\n                             builtin_normal_tt(ext::bytes::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"concat_idents\"),\n@@ -313,7 +315,7 @@ impl ExtCtxt {\n     }\n }\n \n-pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::expr, err_msg: ~str) -> @str {\n+pub fn expr_to_str(cx: @ExtCtxt, expr: @ast::expr, err_msg: &str) -> @str {\n     match expr.node {\n       ast::expr_lit(l) => match l.node {\n         ast::lit_str(s) => s,\n@@ -538,8 +540,8 @@ mod test {\n         a.insert (@\"abc\",@15);\n         let m = MapChain::new(~a);\n         m.insert (@\"def\",@16);\n-        // FIXME: #4492 (ICE)  assert_eq!(m.find(&@\"abc\"),Some(@15));\n-        //  ....               assert_eq!(m.find(&@\"def\"),Some(@16));\n+        assert_eq!(m.find(&@\"abc\"),Some(@15));\n+        assert_eq!(m.find(&@\"def\"),Some(@16));\n         assert_eq!(*(m.find(&@\"abc\").unwrap()),15);\n         assert_eq!(*(m.find(&@\"def\").unwrap()),16);\n         let n = m.push_frame();\n@@ -551,8 +553,8 @@ mod test {\n         assert_eq!(*(n.find(&@\"abc\").unwrap()),15);\n         assert_eq!(*(n.find(&@\"def\").unwrap()),17);\n         // ... but m still has the old ones\n-        // FIXME: #4492: assert_eq!(m.find(&@\"abc\"),Some(@15));\n-        // FIXME: #4492: assert_eq!(m.find(&@\"def\"),Some(@16));\n+        assert_eq!(m.find(&@\"abc\"),Some(@15));\n+        assert_eq!(m.find(&@\"def\"),Some(@16));\n         assert_eq!(*(m.find(&@\"abc\").unwrap()),15);\n         assert_eq!(*(m.find(&@\"def\").unwrap()),16);\n     }"}, {"sha": "c9e01b0f0d596d3ed1a41f645b9538d052641418", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -22,17 +22,35 @@ use ext::build::AstBuilder;\n \n use std::os;\n \n-pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n+pub fn expand_option_env(ext_cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n+    let var = get_single_str_from_tts(ext_cx, sp, tts, \"option_env!\");\n \n-    let var = get_single_str_from_tts(cx, sp, tts, \"env!\");\n+    let e = match os::getenv(var) {\n+      None => quote_expr!(::std::option::None),\n+      Some(s) => quote_expr!(::std::option::Some($s))\n+    };\n+    MRExpr(e)\n+}\n \n-    // FIXME (#2248): if this was more thorough it would manufacture an\n-    // Option<str> rather than just an maybe-empty string.\n+pub fn expand_env(ext_cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n+    -> base::MacResult {\n+    let exprs = get_exprs_from_tts(ext_cx, sp, tts);\n+\n+    if exprs.len() == 0 {\n+        ext_cx.span_fatal(sp, \"env! takes 1 or 2 arguments\");\n+    }\n+\n+    let var = expr_to_str(ext_cx, exprs[0], \"expected string literal\");\n+    let msg = match exprs.len() {\n+        1 => fmt!(\"Environment variable %s not defined\", var).to_managed(),\n+        2 => expr_to_str(ext_cx, exprs[1], \"expected string literal\"),\n+        _ => ext_cx.span_fatal(sp, \"env! takes 1 or 2 arguments\")\n+    };\n \n     let e = match os::getenv(var) {\n-      None => cx.expr_str(sp, @\"\"),\n-      Some(s) => cx.expr_str(sp, s.to_managed())\n+        None => ext_cx.span_fatal(sp, msg),\n+        Some(s) => ext_cx.expr_str(sp, s.to_managed())\n     };\n     MRExpr(e)\n }"}, {"sha": "008545c9729b15390d367b7951af3a19c7f00b68", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -32,7 +32,7 @@ pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     }\n     let fmt =\n         expr_to_str(cx, args[0],\n-                    ~\"first argument to fmt! must be a string literal.\");\n+                    \"first argument to fmt! must be a string literal.\");\n     let fmtspan = args[0].span;\n     debug!(\"Format string: %s\", fmt);\n     fn parse_fmt_err_(cx: @ExtCtxt, sp: span, msg: &str) -> ! {"}, {"sha": "c2362689721ace56198d1533f25cba82b7ad2319", "filename": "src/test/compile-fail/extenv-arg-2-not-string-literal.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-arg-2-not-string-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-arg-2-not-string-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-arg-2-not-string-literal.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { env!(\"one\", 10); } //~ ERROR: expected string literal"}, {"sha": "afa47dbe744661ca773ba0c271f28eaa5d700c65", "filename": "src/test/compile-fail/extenv-no-args.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-no-args.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: env! takes 1 argument\n-\n-fn main() { env!(); }\n+fn main() { env!(); } //~ ERROR: env! takes 1 or 2 arguments"}, {"sha": "485b6c09f0a49389ecd83826e25274fe229e3e23", "filename": "src/test/compile-fail/extenv-not-defined-custom.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-custom.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { env!(\"__HOPEFULLY_NOT_DEFINED__\", \"my error message\"); } //~ ERROR: my error message"}, {"sha": "d7a543c045a9024aeecfab061efe1a191e3b0ae0", "filename": "src/test/compile-fail/extenv-not-defined-default.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-not-defined-default.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { env!(\"__HOPEFULLY_NOT_DEFINED__\"); } //~ ERROR: Environment variable __HOPEFULLY_NOT_DEFINED__ not defined"}, {"sha": "07ce47a14d83d5aa39cc4e33e8abf633a957829d", "filename": "src/test/compile-fail/extenv-not-string-literal.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-string-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-not-string-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-not-string-literal.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:requires a string\n-\n-fn main() { env!(10); }\n+fn main() { env!(10, \"two\"); } //~ ERROR: expected string literal"}, {"sha": "c6c4f0ec6b8076c8ca0b7320ea175c4abd2d0488", "filename": "src/test/compile-fail/extenv-too-many-args.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextenv-too-many-args.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: env! takes 1 argument\n-\n-fn main() { env!(\"one\", \"two\"); }\n+fn main() { env!(\"one\", \"two\", \"three\"); } //~ ERROR: env! takes 1 or 2 arguments"}, {"sha": "fd56756584ae353c0d9e6e599a141dfac12e40a7", "filename": "src/test/compile-fail/extoption_env-no-args.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextoption_env-no-args.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { option_env!(); } //~ ERROR: option_env! takes 1 argument"}, {"sha": "10f6c34980e486596f97f127721f5241af410a4d", "filename": "src/test/compile-fail/extoption_env-not-string-literal.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-not-string-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-not-string-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextoption_env-not-string-literal.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { option_env!(10); } //~ ERROR: requires a string"}, {"sha": "b31e857c14e13704a36bace315cbb9f399caa6a7", "filename": "src/test/compile-fail/extoption_env-too-many-args.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-too-many-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Fcompile-fail%2Fextoption_env-too-many-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextoption_env-too-many-args.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { option_env!(\"one\", \"two\"); } //~ ERROR: option_env! takes 1 argument"}, {"sha": "412efcc25a877434ae6379c71a53d4627b0bacaf", "filename": "src/test/run-pass/extoption_env-not-defined.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6928a10e3f606c3e9e8b94947489244f0e542876/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs?ref=6928a10e3f606c3e9e8b94947489244f0e542876", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let opt: Option<&'static str> = option_env!(\"__HOPEFULLY_DOESNT_EXIST__\");\n+    assert!(opt.is_none());\n+}"}]}