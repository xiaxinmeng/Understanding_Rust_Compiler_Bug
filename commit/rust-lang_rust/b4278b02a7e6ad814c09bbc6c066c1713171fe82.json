{"sha": "b4278b02a7e6ad814c09bbc6c066c1713171fe82", "node_id": "C_kwDOAAsO6NoAKGI0Mjc4YjAyYTdlNmFkODE0YzA5YmJjNmMwNjZjMTcxMzE3MWZlODI", "commit": {"author": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-11-24T02:16:28Z"}, "committer": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-12-05T23:05:43Z"}, "message": "Reimplement weak! using Option.", "tree": {"sha": "234e2f7e866fe33060609c4a201b674dc97fadcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/234e2f7e866fe33060609c4a201b674dc97fadcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4278b02a7e6ad814c09bbc6c066c1713171fe82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4278b02a7e6ad814c09bbc6c066c1713171fe82", "html_url": "https://github.com/rust-lang/rust/commit/b4278b02a7e6ad814c09bbc6c066c1713171fe82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4278b02a7e6ad814c09bbc6c066c1713171fe82/comments", "author": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f44a0153bc4efbb93933c9859168315883d6edc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f44a0153bc4efbb93933c9859168315883d6edc2", "html_url": "https://github.com/rust-lang/rust/commit/f44a0153bc4efbb93933c9859168315883d6edc2"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "f5a4ce929b2a9219311c6c6d1298fad26c695b0c", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b4278b02a7e6ad814c09bbc6c066c1713171fe82/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4278b02a7e6ad814c09bbc6c066c1713171fe82/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=b4278b02a7e6ad814c09bbc6c066c1713171fe82", "patch": "@@ -29,7 +29,21 @@ use crate::ptr;\n use crate::sync::atomic::{self, AtomicPtr, Ordering};\n \n // We can use true weak linkage on ELF targets.\n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n+#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), not(bootstrap)))]\n+pub(crate) macro weak {\n+    (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n+        let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n+            extern \"C\" {\n+                #[linkage = \"extern_weak\"]\n+                static $name: Option<unsafe extern \"C\" fn($($t),*) -> $ret>;\n+            }\n+            #[allow(unused_unsafe)]\n+            ExternWeak::new(unsafe { $name })\n+        };\n+    )\n+}\n+\n+#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), bootstrap))]\n pub(crate) macro weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n         let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n@@ -47,18 +61,39 @@ pub(crate) macro weak {\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub(crate) use self::dlsym as weak;\n \n+#[cfg(not(bootstrap))]\n+pub(crate) struct ExternWeak<F: Copy> {\n+    weak_ptr: Option<F>,\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<F: Copy> ExternWeak<F> {\n+    #[inline]\n+    pub(crate) fn new(weak_ptr: Option<F>) -> Self {\n+        ExternWeak { weak_ptr }\n+    }\n+\n+    #[inline]\n+    pub(crate) fn get(&self) -> Option<F> {\n+        self.weak_ptr\n+    }\n+}\n+\n+#[cfg(bootstrap)]\n pub(crate) struct ExternWeak<F> {\n     weak_ptr: *const libc::c_void,\n     _marker: PhantomData<F>,\n }\n \n+#[cfg(bootstrap)]\n impl<F> ExternWeak<F> {\n     #[inline]\n     pub(crate) fn new(weak_ptr: *const libc::c_void) -> Self {\n         ExternWeak { weak_ptr, _marker: PhantomData }\n     }\n }\n \n+#[cfg(bootstrap)]\n impl<F> ExternWeak<F> {\n     #[inline]\n     pub(crate) fn get(&self) -> Option<F> {"}]}