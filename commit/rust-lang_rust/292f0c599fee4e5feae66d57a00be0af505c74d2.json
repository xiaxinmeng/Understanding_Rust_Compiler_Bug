{"sha": "292f0c599fee4e5feae66d57a00be0af505c74d2", "node_id": "C_kwDOAAsO6NoAKDI5MmYwYzU5OWZlZTRlNWZlYWU2NmQ1N2EwMGJlMGFmNTA1Yzc0ZDI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-29T10:14:39Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-29T10:32:22Z"}, "message": "only allow `ConstEquate` with `feature(gce)`", "tree": {"sha": "55b06ec5fad20741c8d8bad8e3edf87c60a74039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b06ec5fad20741c8d8bad8e3edf87c60a74039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292f0c599fee4e5feae66d57a00be0af505c74d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292f0c599fee4e5feae66d57a00be0af505c74d2", "html_url": "https://github.com/rust-lang/rust/commit/292f0c599fee4e5feae66d57a00be0af505c74d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292f0c599fee4e5feae66d57a00be0af505c74d2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1536a53ea4798df052dc31a611c2f29c8f529be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536a53ea4798df052dc31a611c2f29c8f529be7", "html_url": "https://github.com/rust-lang/rust/commit/1536a53ea4798df052dc31a611c2f29c8f529be7"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "19efc29762143adf4506618b16bf6fba8bb32513", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/292f0c599fee4e5feae66d57a00be0af505c74d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292f0c599fee4e5feae66d57a00be0af505c74d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=292f0c599fee4e5feae66d57a00be0af505c74d2", "patch": "@@ -495,19 +495,20 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.selcx.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"equating consts\");\n-                    let tcx = self.selcx.tcx();\n-                    if tcx.features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return ProcessResult::Changed(vec![]);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return ProcessResult::Changed(vec![]);\n                         }\n                     }\n "}, {"sha": "256102eb98c08e7c97d5715784d133bfa564d985", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/292f0c599fee4e5feae66d57a00be0af505c74d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292f0c599fee4e5feae66d57a00be0af505c74d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=292f0c599fee4e5feae66d57a00be0af505c74d2", "patch": "@@ -677,19 +677,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n+                    assert!(\n+                        self.tcx().features().generic_const_exprs,\n+                        \"`ConstEquate` without a feature gate: {c1:?} {c2:?}\",\n+                    );\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n-                    if self.tcx().features().generic_const_exprs {\n-                        // FIXME: we probably should only try to unify abstract constants\n-                        // if the constants depend on generic parameters.\n-                        //\n-                        // Let's just see where this breaks :shrug:\n-                        if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n-                            (c1.kind(), c2.kind())\n-                        {\n-                            if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n-                                return Ok(EvaluatedToOk);\n-                            }\n+                    // FIXME: we probably should only try to unify abstract constants\n+                    // if the constants depend on generic parameters.\n+                    //\n+                    // Let's just see where this breaks :shrug:\n+                    if let (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) =\n+                        (c1.kind(), c2.kind())\n+                    {\n+                        if self.infcx.try_unify_abstract_consts(a, b, obligation.param_env) {\n+                            return Ok(EvaluatedToOk);\n                         }\n                     }\n "}]}