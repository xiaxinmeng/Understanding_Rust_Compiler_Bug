{"sha": "d911b640d173cda72e937de78310f4a021034045", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTFiNjQwZDE3M2NkYTcyZTkzN2RlNzgzMTBmNGEwMjEwMzQwNDU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-16T23:18:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-16T23:18:10Z"}, "message": "Merge pull request #2823 from fwalch/default-newline-style\n\nChange default newline style to \"Native\"", "tree": {"sha": "dd6966b5eff0e7d3c24a4806554294c23e319e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6966b5eff0e7d3c24a4806554294c23e319e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d911b640d173cda72e937de78310f4a021034045", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbTSezCRBK7hj4Ov3rIwAAdHIIAExSq8WBN4DzxH8tqVppBcSA\n7ayb+1VcT18oPw00/hjJR6DYBk1otti/SUvmB+FelugGytAN4VCbHW5aDYSRudgz\naJsrBfoFdRLuaTsJYrG8AvCdEgk8lkzkZ5lJjkHUQqX3aWlcKi+t1liE7NWmcGqo\n/C39ftbGoqC4aRmFpZVrTdB7NH3+HD7VDrow9ODlaZCNKvm6793wjjrHIQRCBVOG\nOrSYT6FKNQtfBoZxFHSY5d3oAxAdeilAErjdSKw7lFblezISEIvIlvHUZyBW2Jf1\n2vvw7AU0hePjETYIgDssvmDthOD8ycN1lAaK/+Xu9+CXaS0b7SBML2VDNBkz/sA=\n=FG7Y\n-----END PGP SIGNATURE-----\n", "payload": "tree dd6966b5eff0e7d3c24a4806554294c23e319e19\nparent ca57ff5b765a44535bf3e29b76ff49a0c22189b1\nparent 363363d06644738a4310122db8f855a4099822f7\nauthor Nick Cameron <nrc@ncameron.org> 1531783090 +1200\ncommitter GitHub <noreply@github.com> 1531783090 +1200\n\nMerge pull request #2823 from fwalch/default-newline-style\n\nChange default newline style to \"Native\""}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d911b640d173cda72e937de78310f4a021034045", "html_url": "https://github.com/rust-lang/rust/commit/d911b640d173cda72e937de78310f4a021034045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d911b640d173cda72e937de78310f4a021034045/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca57ff5b765a44535bf3e29b76ff49a0c22189b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca57ff5b765a44535bf3e29b76ff49a0c22189b1", "html_url": "https://github.com/rust-lang/rust/commit/ca57ff5b765a44535bf3e29b76ff49a0c22189b1"}, {"sha": "363363d06644738a4310122db8f855a4099822f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/363363d06644738a4310122db8f855a4099822f7", "html_url": "https://github.com/rust-lang/rust/commit/363363d06644738a4310122db8f855a4099822f7"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "58740d0fb90e7b640072d87bd45d5d0d92f21fcf", "filename": "Configurations.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d911b640d173cda72e937de78310f4a021034045/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/d911b640d173cda72e937de78310f4a021034045/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=d911b640d173cda72e937de78310f4a021034045", "patch": "@@ -1250,7 +1250,7 @@ fn main() {\n \n Unix or Windows line endings\n \n-- **Default value**: `\"Unix\"`\n+- **Default value**: `\"Native\"`\n - **Possible values**: `\"Native\"`, `\"Unix\"`, `\"Windows\"`\n - **Stable**: Yes\n "}, {"sha": "baf1982639c0b828730941f184b6f1fd21477bbd", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d911b640d173cda72e937de78310f4a021034045/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d911b640d173cda72e937de78310f4a021034045/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=d911b640d173cda72e937de78310f4a021034045", "patch": "@@ -40,7 +40,7 @@ create_config! {\n     max_width: usize, 100, true, \"Maximum width of each line\";\n     hard_tabs: bool, false, true, \"Use tab characters for indentation, spaces for alignment\";\n     tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n-    newline_style: NewlineStyle, NewlineStyle::Unix, true, \"Unix or Windows line endings\";\n+    newline_style: NewlineStyle, NewlineStyle::Native, true, \"Unix or Windows line endings\";\n     use_small_heuristics: Heuristics, Heuristics::Default, true, \"Whether to use different \\\n         formatting for items and expressions if they satisfy a heuristic notion of 'small'.\";\n     indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";"}, {"sha": "e2a8052531291f311317b20f4c3026b612b255b0", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d911b640d173cda72e937de78310f4a021034045/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d911b640d173cda72e937de78310f4a021034045/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d911b640d173cda72e937de78310f4a021034045", "patch": "@@ -1041,9 +1041,14 @@ mod unit_tests {\n     #[test]\n     fn test_format_snippet() {\n         let snippet = \"fn main() { println!(\\\"hello, world\\\"); }\";\n+        #[cfg(not(windows))]\n         let expected = \"fn main() {\\n    \\\n                         println!(\\\"hello, world\\\");\\n\\\n                         }\\n\";\n+        #[cfg(windows)]\n+        let expected = \"fn main() {\\r\\n    \\\n+                        println!(\\\"hello, world\\\");\\r\\n\\\n+                        }\\r\\n\";\n         assert!(test_format_inner(format_snippet, snippet, expected));\n     }\n "}, {"sha": "47b801011bf9539bdfb587ae9087905593279927", "filename": "src/test/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d911b640d173cda72e937de78310f4a021034045/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d911b640d173cda72e937de78310f4a021034045/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=d911b640d173cda72e937de78310f4a021034045", "patch": "@@ -247,7 +247,10 @@ fn stdin_formatting_smoke_test() {\n     let (error_summary, _) = format_input(input, &config, Some(&mut buf)).unwrap();\n     assert!(error_summary.has_no_errors());\n     //eprintln!(\"{:?}\", );\n+    #[cfg(not(windows))]\n     assert_eq!(buf, \"fn main() {}\\n\".as_bytes());\n+    #[cfg(windows)]\n+    assert_eq!(buf, \"fn main() {}\\r\\n\".as_bytes());\n }\n \n // FIXME(#1990) restore this test"}]}