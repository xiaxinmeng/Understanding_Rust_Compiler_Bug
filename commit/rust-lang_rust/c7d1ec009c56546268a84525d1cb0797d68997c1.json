{"sha": "c7d1ec009c56546268a84525d1cb0797d68997c1", "node_id": "C_kwDOAAsO6NoAKGM3ZDFlYzAwOWM1NjU0NjI2OGE4NDUyNWQxY2IwNzk3ZDY4OTk3YzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-02T19:20:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-02T19:21:06Z"}, "message": "Don't ICE when trying to copy unsized value in const prop", "tree": {"sha": "45c0bc1122164adeaec59b784ac328c0b15b2d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c0bc1122164adeaec59b784ac328c0b15b2d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d1ec009c56546268a84525d1cb0797d68997c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d1ec009c56546268a84525d1cb0797d68997c1", "html_url": "https://github.com/rust-lang/rust/commit/c7d1ec009c56546268a84525d1cb0797d68997c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d1ec009c56546268a84525d1cb0797d68997c1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f914b82a754c6d85c0a909ab152f5b611defef73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f914b82a754c6d85c0a909ab152f5b611defef73", "html_url": "https://github.com/rust-lang/rust/commit/f914b82a754c6d85c0a909ab152f5b611defef73"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "eeeb7d6d3e5cc1e86766e92222bbb88c6e0b0ddd", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7d1ec009c56546268a84525d1cb0797d68997c1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d1ec009c56546268a84525d1cb0797d68997c1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=c7d1ec009c56546268a84525d1cb0797d68997c1", "patch": "@@ -640,11 +640,17 @@ where\n         // avoid force_allocation.\n         let src = match self.read_immediate_raw(src)? {\n             Ok(src_val) => {\n-                assert!(!src.layout.is_unsized(), \"cannot copy unsized immediates\");\n-                assert!(\n-                    !dest.layout.is_unsized(),\n-                    \"the src is sized, so the dest must also be sized\"\n-                );\n+                // FIXME(const_prop): Const-prop can possibly evaluate an\n+                // unsized copy operation when it thinks that the type is\n+                // actually sized, due to a trivially false where-clause\n+                // predicate like `where Self: Sized` with `Self = dyn Trait`.\n+                // See #102553 for an example of such a predicate.\n+                if src.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(src.layout.ty));\n+                }\n+                if dest.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(dest.layout.ty));\n+                }\n                 assert_eq!(src.layout.size, dest.layout.size);\n                 // Yay, we got a value that we can write directly.\n                 return if layout_compat {"}, {"sha": "523a9d7ac72045b5d758cd707f5f3a41dafabb79", "filename": "src/test/ui/const_prop/issue-102553.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7d1ec009c56546268a84525d1cb0797d68997c1/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d1ec009c56546268a84525d1cb0797d68997c1/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs?ref=c7d1ec009c56546268a84525d1cb0797d68997c1", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+\n+pub trait Widget<E> {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w;\n+}\n+\n+pub trait WidgetDyn<E> {}\n+\n+impl<T, E> WidgetDyn<E> for T where T: Widget<E> {}\n+\n+impl<E> Widget<E> for dyn WidgetDyn<E> + '_ {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w,\n+    {\n+        // Even though this is illegal to const evaluate, this should never\n+        // trigger an ICE because it can never be called from actual code\n+        // (due to the trivially false where-clause predicate).\n+        Box::new(self)\n+    }\n+}"}]}