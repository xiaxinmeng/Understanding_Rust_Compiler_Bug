{"sha": "8382f39b6b5820927ccf5380d8240a0c02311645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODJmMzliNmI1ODIwOTI3Y2NmNTM4MGQ4MjQwYTBjMDIzMTE2NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T08:39:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T08:39:58Z"}, "message": "Auto merge of #45299 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #45113, #45250, #45255, #45258, #45263, #45264, #45269, #45280, #45289\n- Failed merges:", "tree": {"sha": "24c4c0fe60d8a18ca039729bfcdca85a16e8c3f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24c4c0fe60d8a18ca039729bfcdca85a16e8c3f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8382f39b6b5820927ccf5380d8240a0c02311645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8382f39b6b5820927ccf5380d8240a0c02311645", "html_url": "https://github.com/rust-lang/rust/commit/8382f39b6b5820927ccf5380d8240a0c02311645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8382f39b6b5820927ccf5380d8240a0c02311645/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0d50f9fabe78fa8497041c14ce73787a4aef87", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0d50f9fabe78fa8497041c14ce73787a4aef87", "html_url": "https://github.com/rust-lang/rust/commit/6c0d50f9fabe78fa8497041c14ce73787a4aef87"}, {"sha": "5ebad25b0845845fc199b9c2a46592d718881a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebad25b0845845fc199b9c2a46592d718881a95", "html_url": "https://github.com/rust-lang/rust/commit/5ebad25b0845845fc199b9c2a46592d718881a95"}], "stats": {"total": 149, "additions": 108, "deletions": 41}, "files": [{"sha": "6eb074605fc1493e70919edf5e94a728c3be3aef", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -126,7 +126,7 @@ install a nightly, presumably using `rustup`. You will then want to\n configure your directory to use this build, like so:\n \n ```\n-# configure to use local rust instead of downloding a beta.\n+# configure to use local rust instead of downloading a beta.\n # `--local-rust-root` is optional here. If elided, we will\n # use whatever rustc we find on your PATH.\n > configure --enable-rustbuild --local-rust-root=~/.cargo/ --enable-local-rebuild"}, {"sha": "cc260382f494628102f7c2f59bc7f8f56ea5f4fc", "filename": "src/ci/docker/cross2/Dockerfile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fci%2Fdocker%2Fcross2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fci%2Fdocker%2Fcross2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross2%2FDockerfile?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -37,12 +37,12 @@ ENV \\\n     AR_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-ar \\\n     CC_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang \\\n     CXX_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang++ \\\n-    AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.11-ar \\\n-    CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.11-gcc \\\n-    CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.11-g++ \\\n-    AR_x86_64_sun_solaris=x86_64-sun-solaris2.11-ar \\\n-    CC_x86_64_sun_solaris=x86_64-sun-solaris2.11-gcc \\\n-    CXX_x86_64_sun_solaris=x86_64-sun-solaris2.11-g++\n+    AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-ar \\\n+    CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-gcc \\\n+    CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-g++ \\\n+    AR_x86_64_sun_solaris=x86_64-sun-solaris2.10-ar \\\n+    CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n+    CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++\n \n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia"}, {"sha": "935cbe5d61b58eff77992c5df1cee66d300425c8", "filename": "src/ci/docker/cross2/build-solaris-toolchain.sh", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fci%2Fdocker%2Fcross2%2Fbuild-solaris-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fci%2Fdocker%2Fcross2%2Fbuild-solaris-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross2%2Fbuild-solaris-toolchain.sh?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -25,7 +25,7 @@ cd binutils\n curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.xz | tar xJf -\n mkdir binutils-build\n cd binutils-build\n-hide_output ../binutils-$BINUTILS/configure --target=$ARCH-sun-solaris2.11\n+hide_output ../binutils-$BINUTILS/configure --target=$ARCH-sun-solaris2.10\n hide_output make -j10\n hide_output make install\n \n@@ -58,13 +58,17 @@ for deb in *$APT_ARCH.deb; do\n   dpkg -x $deb .\n done\n \n-mkdir                  /usr/local/$ARCH-sun-solaris2.11/usr\n-mv usr/include         /usr/local/$ARCH-sun-solaris2.11/usr/include\n-mv usr/lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.11/lib\n-mv     lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.11/lib\n+# Strip Solaris 11 functions that are optionally used by libbacktrace.\n+# This is for Solaris 10 compatibility.\n+$ARCH-sun-solaris2.10-strip -N dl_iterate_phdr -N strnlen lib/$LIB_ARCH/libc.so\n \n-ln -s /usr/local/$ARCH-sun-solaris2.11/usr/include /usr/local/$ARCH-sun-solaris2.11/sys-include\n-ln -s /usr/local/$ARCH-sun-solaris2.11/usr/include /usr/local/$ARCH-sun-solaris2.11/include\n+mkdir                  /usr/local/$ARCH-sun-solaris2.10/usr\n+mv usr/include         /usr/local/$ARCH-sun-solaris2.10/usr/include\n+mv usr/lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.10/lib\n+mv     lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.10/lib\n+\n+ln -s /usr/local/$ARCH-sun-solaris2.10/usr/include /usr/local/$ARCH-sun-solaris2.10/sys-include\n+ln -s /usr/local/$ARCH-sun-solaris2.10/usr/include /usr/local/$ARCH-sun-solaris2.10/include\n \n cd ..\n rm -rf solaris\n@@ -80,7 +84,7 @@ mkdir ../gcc-build\n cd ../gcc-build\n hide_output ../gcc-$GCC/configure \\\n   --enable-languages=c,c++        \\\n-  --target=$ARCH-sun-solaris2.11  \\\n+  --target=$ARCH-sun-solaris2.10  \\\n   --with-gnu-as                   \\\n   --with-gnu-ld                   \\\n   --disable-multilib              \\\n@@ -94,7 +98,7 @@ hide_output ../gcc-$GCC/configure \\\n   --disable-libsanitizer          \\\n   --disable-libquadmath-support   \\\n   --disable-lto                   \\\n-  --with-sysroot=/usr/local/$ARCH-sun-solaris2.11\n+  --with-sysroot=/usr/local/$ARCH-sun-solaris2.10\n \n hide_output make -j10\n hide_output make install"}, {"sha": "efb5495fe26acf32334ddd188aaa9db53c644a0b", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -15,4 +15,34 @@ The `non_ascii_idents` feature adds support for non-ASCII identifiers.\n \n const \u03b5: f64 = 0.00001f64;\n const \u03a0: f64 = 3.14f64;\n-```\n\\ No newline at end of file\n+```\n+\n+## Changes to the language reference\n+\n+> **<sup>Lexer:<sup>**  \n+> IDENTIFIER :  \n+> &nbsp;&nbsp; &nbsp;&nbsp; XID_start XID_continue<sup>\\*</sup>  \n+> &nbsp;&nbsp; | `_` XID_continue<sup>+</sup>  \n+\n+An identifier is any nonempty Unicode string of the following form:\n+\n+Either\n+\n+   * The first character has property [`XID_start`]\n+   * The remaining characters have property [`XID_continue`]\n+\n+Or\n+\n+   * The first character is `_`\n+   * The identifier is more than one character, `_` alone is not an identifier\n+   * The remaining characters have property [`XID_continue`]\n+\n+that does _not_ occur in the set of [strict keywords].\n+\n+> **Note**: [`XID_start`] and [`XID_continue`] as character properties cover the\n+> character ranges used to form the more familiar C and Java language-family\n+> identifiers.\n+\n+[`XID_start`]:  http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=\n+[`XID_continue`]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=\n+[strict keywords]: ../reference/keywords.html#strict-keywords"}, {"sha": "873d978b9cb84b960cb58f47b099e32aafa884c8", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -97,9 +97,9 @@ r##\"<!DOCTYPE html>\n                     <dd>Show this help dialog</dd>\n                     <dt>S</dt>\n                     <dd>Focus the search field</dd>\n-                    <dt>&larrb;</dt>\n+                    <dt>\u2191</dt>\n                     <dd>Move up in search results</dd>\n-                    <dt>&rarrb;</dt>\n+                    <dt>\u2193</dt>\n                     <dd>Move down in search results</dd>\n                     <dt>&#9166;</dt>\n                     <dd>Go to active search result</dd>"}, {"sha": "a132223a051017a90956060d345a6487da152ae7", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -831,6 +831,10 @@ span.since {\n \t.toggle-wrapper {\n \t\theight: 1.5em;\n \t}\n+\n+\t#search {\n+\t\tmargin-left: 0;\n+\t}\n }\n \n @media print {"}, {"sha": "7e623a0af17c3c1bab2db1c7948cb2b5f3974aad", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -717,26 +717,25 @@ fn calculate_offsets(hashes_size: usize,\n     (pairs_offset, end_of_pairs, oflo)\n }\n \n-// Returns a tuple of (minimum required malloc alignment, hash_offset,\n+// Returns a tuple of (minimum required malloc alignment,\n // array_size), from the start of a mallocated array.\n fn calculate_allocation(hash_size: usize,\n                         hash_align: usize,\n                         pairs_size: usize,\n                         pairs_align: usize)\n-                        -> (usize, usize, usize, bool) {\n-    let hash_offset = 0;\n+                        -> (usize, usize, bool) {\n     let (_, end_of_pairs, oflo) = calculate_offsets(hash_size, pairs_size, pairs_align);\n \n     let align = cmp::max(hash_align, pairs_align);\n \n-    (align, hash_offset, end_of_pairs, oflo)\n+    (align, end_of_pairs, oflo)\n }\n \n #[test]\n fn test_offset_calculation() {\n-    assert_eq!(calculate_allocation(128, 8, 16, 8), (8, 0, 144, false));\n-    assert_eq!(calculate_allocation(3, 1, 2, 1), (1, 0, 5, false));\n-    assert_eq!(calculate_allocation(6, 2, 12, 4), (4, 0, 20, false));\n+    assert_eq!(calculate_allocation(128, 8, 16, 8), (8, 144, false));\n+    assert_eq!(calculate_allocation(3, 1, 2, 1), (1, 5, false));\n+    assert_eq!(calculate_allocation(6, 2, 12, 4), (4, 20, false));\n     assert_eq!(calculate_offsets(128, 15, 4), (128, 143, false));\n     assert_eq!(calculate_offsets(3, 2, 4), (4, 6, false));\n     assert_eq!(calculate_offsets(6, 12, 4), (8, 20, false));\n@@ -768,10 +767,10 @@ impl<K, V> RawTable<K, V> {\n         // This is great in theory, but in practice getting the alignment\n         // right is a little subtle. Therefore, calculating offsets has been\n         // factored out into a different function.\n-        let (alignment, hash_offset, size, oflo) = calculate_allocation(hashes_size,\n-                                                                        align_of::<HashUint>(),\n-                                                                        pairs_size,\n-                                                                        align_of::<(K, V)>());\n+        let (alignment, size, oflo) = calculate_allocation(hashes_size,\n+                                                           align_of::<HashUint>(),\n+                                                           pairs_size,\n+                                                           align_of::<(K, V)>());\n         assert!(!oflo, \"capacity overflow\");\n \n         // One check for overflow that covers calculation and rounding of size.\n@@ -784,7 +783,7 @@ impl<K, V> RawTable<K, V> {\n         let buffer = Heap.alloc(Layout::from_size_align(size, alignment).unwrap())\n             .unwrap_or_else(|e| Heap.oom(e));\n \n-        let hashes = buffer.offset(hash_offset as isize) as *mut HashUint;\n+        let hashes = buffer as *mut HashUint;\n \n         RawTable {\n             capacity_mask: capacity.wrapping_sub(1),\n@@ -1157,6 +1156,7 @@ impl<K: Clone, V: Clone> Clone for RawTable<K, V> {\n             }\n \n             new_ht.size = self.size();\n+            new_ht.set_tag(self.tag());\n \n             new_ht\n         }\n@@ -1183,10 +1183,10 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n \n         let hashes_size = self.capacity() * size_of::<HashUint>();\n         let pairs_size = self.capacity() * size_of::<(K, V)>();\n-        let (align, _, size, oflo) = calculate_allocation(hashes_size,\n-                                                          align_of::<HashUint>(),\n-                                                          pairs_size,\n-                                                          align_of::<(K, V)>());\n+        let (align, size, oflo) = calculate_allocation(hashes_size,\n+                                                       align_of::<HashUint>(),\n+                                                       pairs_size,\n+                                                       align_of::<(K, V)>());\n \n         debug_assert!(!oflo, \"should be impossible\");\n "}, {"sha": "4656cc5a7a78137aec9eb51c5c5eeab96083b4d2", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -1579,6 +1579,21 @@ mod tests {\n                 \"bad error: {} {:?}\", e, e.kind());\n     }\n \n+    #[test]\n+    fn connect_timeout_unbound() {\n+        // bind and drop a socket to track down a \"probably unassigned\" port\n+        let socket = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n+        let addr = socket.local_addr().unwrap();\n+        drop(socket);\n+\n+        let timeout = Duration::from_secs(1);\n+        let e = TcpStream::connect_timeout(&addr, timeout).unwrap_err();\n+        assert!(e.kind() == io::ErrorKind::ConnectionRefused ||\n+                e.kind() == io::ErrorKind::TimedOut ||\n+                e.kind() == io::ErrorKind::Other,\n+                \"bad error: {} {:?}\", e, e.kind());\n+    }\n+\n     #[test]\n     fn connect_timeout_valid() {\n         let listener = TcpListener::bind(\"127.0.0.1:0\").unwrap();"}, {"sha": "f448cffd3725c30ae6709205aa1f87976cbf710a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -702,6 +702,15 @@ impl AsInnerMut<imp::Command> for Command {\n }\n \n /// The output of a finished process.\n+///\n+/// This is returned in a Result by either the [`output`] method of a\n+/// [`Command`], or the [`wait_with_output`] method of a [`Child`]\n+/// process.\n+///\n+/// [`Command`]: struct.Command.html\n+/// [`Child`]: struct.Child.html\n+/// [`output`]: struct.Command.html#method.output\n+/// [`wait_with_output`]: struct.Child.html#method.wait_with_output\n #[derive(PartialEq, Eq, Clone)]\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Output {"}, {"sha": "e775f857f2b40a84b8df717f9ed6d30649a02b3c", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -176,11 +176,16 @@ impl Socket {\n                 }\n                 0 => {}\n                 _ => {\n-                    if pollfd.revents & libc::POLLOUT == 0 {\n-                        if let Some(e) = self.take_error()? {\n-                            return Err(e);\n-                        }\n+                    // linux returns POLLOUT|POLLERR|POLLHUP for refused connections (!), so look\n+                    // for POLLHUP rather than read readiness\n+                    if pollfd.revents & libc::POLLHUP != 0 {\n+                        let e = self.take_error()?\n+                            .unwrap_or_else(|| {\n+                                io::Error::new(io::ErrorKind::Other, \"no error set after POLLHUP\")\n+                            });\n+                        return Err(e);\n                     }\n+\n                     return Ok(());\n                 }\n             }"}, {"sha": "251dd4d5edb4e672782c1322598be7e4579bd855", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -45,7 +45,7 @@ impl FromStr for ErrorKind {\n impl fmt::Display for ErrorKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            ErrorKind::Help => write!(f, \"help\"),\n+            ErrorKind::Help => write!(f, \"help message\"),\n             ErrorKind::Error => write!(f, \"error\"),\n             ErrorKind::Note => write!(f, \"note\"),\n             ErrorKind::Suggestion => write!(f, \"suggestion\"),"}, {"sha": "60acc20e692a2a0d5184d1bee673b04178be5e4c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8382f39b6b5820927ccf5380d8240a0c02311645/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8382f39b6b5820927ccf5380d8240a0c02311645", "patch": "@@ -1041,7 +1041,7 @@ actual:\\n\\\n                 None => {\n                     if self.is_unexpected_compiler_message(actual_error, expect_help, expect_note) {\n                         self.error(\n-                            &format!(\"{}:{}: unexpected {:?}: '{}'\",\n+                            &format!(\"{}:{}: unexpected {}: '{}'\",\n                                      file_name,\n                                      actual_error.line_num,\n                                      actual_error.kind.as_ref()"}]}