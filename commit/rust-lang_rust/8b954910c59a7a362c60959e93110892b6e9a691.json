{"sha": "8b954910c59a7a362c60959e93110892b6e9a691", "node_id": "C_kwDOAAsO6NoAKDhiOTU0OTEwYzU5YTdhMzYyYzYwOTU5ZTkzMTEwODkyYjZlOWE2OTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-29T10:34:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-29T10:34:52Z"}, "message": "Auto merge of #91350 - matthiaskrgr:rollup-nleabdj, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #91049 (Add a caveat to std::os::windows::fs::symlink_file)\n - #91281 (Add demonstration test for #91161)\n - #91327 (Delete an unreachable codepath from format_args implementation)\n - #91336 (Remove unused root_parent.)\n - #91349 (Accumulate all values of `-C remark` option)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c566894c6cc248435e1871f774f73c61b5fea4b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c566894c6cc248435e1871f774f73c61b5fea4b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b954910c59a7a362c60959e93110892b6e9a691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b954910c59a7a362c60959e93110892b6e9a691", "html_url": "https://github.com/rust-lang/rust/commit/8b954910c59a7a362c60959e93110892b6e9a691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b954910c59a7a362c60959e93110892b6e9a691/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44723c5d59ff00daeefbf2a01f67089acd75730d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44723c5d59ff00daeefbf2a01f67089acd75730d", "html_url": "https://github.com/rust-lang/rust/commit/44723c5d59ff00daeefbf2a01f67089acd75730d"}, {"sha": "e15e0ba45c5d004345ab4def70d88af068ed54c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15e0ba45c5d004345ab4def70d88af068ed54c7", "html_url": "https://github.com/rust-lang/rust/commit/e15e0ba45c5d004345ab4def70d88af068ed54c7"}], "stats": {"total": 113, "additions": 77, "deletions": 36}, "files": [{"sha": "62a55c0e49ed08ed94a0263688f01e6ceedba9ba", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -88,8 +88,8 @@ struct Context<'a, 'b> {\n     /// * Implicit argument resolution: `\"{1:.0$} {2:.foo$} {1:.3$} {4:.0$}\"`\n     /// * Name resolution: `\"{1:.0$} {2:.5$} {1:.3$} {4:.0$}\"`\n     /// * `count_positions` (in JSON): `{0: 0, 5: 1, 3: 2}`\n-    /// * `count_args`: `vec![Exact(0), Exact(5), Exact(3)]`\n-    count_args: Vec<Position>,\n+    /// * `count_args`: `vec![0, 5, 3]`\n+    count_args: Vec<usize>,\n     /// Relative slot numbers for count arguments.\n     count_positions: FxHashMap<usize, usize>,\n     /// Number of count slots assigned.\n@@ -513,7 +513,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         if let Entry::Vacant(e) = self.count_positions.entry(arg) {\n                             let i = self.count_positions_count;\n                             e.insert(i);\n-                            self.count_args.push(Exact(arg));\n+                            self.count_args.push(arg);\n                             self.count_positions_count += 1;\n                         }\n                     }\n@@ -774,11 +774,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             // (the span is otherwise unavailable in MIR)\n             heads.push(self.ecx.expr_addr_of(e.span.with_ctxt(self.macsp.ctxt()), e));\n         }\n-        for pos in self.count_args {\n-            let index = match pos {\n-                Exact(i) => i,\n-                _ => panic!(\"should never happen\"),\n-            };\n+        for index in self.count_args {\n             let span = spans_pos[index];\n             args.push(Context::format_arg(self.ecx, self.macsp, span, &Count, index));\n         }"}, {"sha": "39ca41c92ff7569f749f4371fef9696591020bb3", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -7,13 +7,12 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n use crate::ty::TyCtxt;\n-use rustc_hir as hir;\n-use rustc_hir::Node;\n-use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_hir as hir;\n+use rustc_hir::Node;\n use rustc_macros::HashStable;\n+use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -210,11 +209,6 @@ pub struct ScopeTree {\n     /// If not empty, this body is the root of this region hierarchy.\n     pub root_body: Option<hir::HirId>,\n \n-    /// The parent of the root body owner, if the latter is an\n-    /// an associated const or method, as impls/traits can also\n-    /// have lifetime parameters free in this body.\n-    pub root_parent: Option<hir::HirId>,\n-\n     /// Maps from a scope ID to the enclosing scope id;\n     /// this is usually corresponding to the lexical nesting, though\n     /// in the case of closures the parent scope is the innermost\n@@ -445,7 +439,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let ScopeTree {\n             root_body,\n-            root_parent,\n             ref body_expr_count,\n             ref parent_map,\n             ref var_map,\n@@ -455,8 +448,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            root_body.hash_stable(hcx, hasher);\n-            root_parent.hash_stable(hcx, hasher);\n+            root_body.hash_stable(hcx, hasher)\n         });\n \n         body_expr_count.hash_stable(hcx, hasher);"}, {"sha": "ae423070392e1804d9a0baf249a976c5d20b4c58", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Arm, Block, Expr, Local, Node, Pat, PatKind, Stmt};\n+use rustc_hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use rustc_index::vec::Idx;\n use rustc_middle::middle::region::*;\n use rustc_middle::ty::query::Providers;\n@@ -837,19 +837,7 @@ fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n \n         let body = tcx.hir().body(body_id);\n         visitor.scope_tree.root_body = Some(body.value.hir_id);\n-\n-        // If the item is an associated const or a method,\n-        // record its impl/trait parent, as it can also have\n-        // lifetime parameters free in this body.\n-        match tcx.hir().get(id) {\n-            Node::ImplItem(_) | Node::TraitItem(_) => {\n-                visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));\n-            }\n-            _ => {}\n-        }\n-\n         visitor.visit_body(body);\n-\n         visitor.scope_tree\n     } else {\n         ScopeTree::default()"}, {"sha": "16b68d95858b87b9c63ef82cc17def481aa69aed", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -833,6 +833,13 @@ impl Passes {\n             Passes::All => false,\n         }\n     }\n+\n+    pub fn extend(&mut self, passes: impl IntoIterator<Item = String>) {\n+        match *self {\n+            Passes::Some(ref mut v) => v.extend(passes),\n+            Passes::All => {}\n+        }\n+    }\n }\n \n pub const fn default_lib_output() -> CrateType {"}, {"sha": "779f29e3dfedf32824e7b9cb558bc58e01f3436b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -567,7 +567,7 @@ mod parse {\n             v => {\n                 let mut passes = vec![];\n                 if parse_list(&mut passes, v) {\n-                    *slot = Passes::Some(passes);\n+                    slot.extend(passes);\n                     true\n                 } else {\n                     false"}, {"sha": "31d1e3c1e42ee5b3af37470867aea9f20087fa89", "filename": "library/std/src/os/windows/fs.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Ffs.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -543,6 +543,16 @@ impl FileTypeExt for fs::FileType {\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// # Limitations\n+///\n+/// Windows treats symlink creation as a [privileged action][symlink-security],\n+/// therefore this function is likely to fail unless the user makes changes to\n+/// their system to permit symlink creation. Users can try enabling Developer\n+/// Mode, granting the `SeCreateSymbolicLinkPrivilege` privilege, or running\n+/// the process as an administrator.\n+///\n+/// [symlink-security]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {\n     sys::fs::symlink_inner(original.as_ref(), link.as_ref(), false)\n@@ -572,6 +582,16 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io:\n ///     Ok(())\n /// }\n /// ```\n+///\n+/// # Limitations\n+///\n+/// Windows treats symlink creation as a [privileged action][symlink-security],\n+/// therefore this function is likely to fail unless the user makes changes to\n+/// their system to permit symlink creation. Users can try enabling Developer\n+/// Mode, granting the `SeCreateSymbolicLinkPrivilege` privilege, or running\n+/// the process as an administrator.\n+///\n+/// [symlink-security]: https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/create-symbolic-links\n #[stable(feature = \"symlink\", since = \"1.1.0\")]\n pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {\n     sys::fs::symlink_inner(original.as_ref(), link.as_ref(), true)"}, {"sha": "36549cbc554bfdd1a6b504989006afbb6c51750f", "filename": "src/test/ui/optimization-remark.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Foptimization-remark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Foptimization-remark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-remark.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -1,10 +1,19 @@\n // build-pass\n // ignore-pass\n // no-system-llvm\n-// revisions: all inline\n-//          compile-flags: --crate-type=lib -Cdebuginfo=1 -Copt-level=2\n+// revisions: all inline merge1 merge2\n+// compile-flags: --crate-type=lib -Cdebuginfo=1 -Copt-level=2\n+//\n+// Check that remarks can be enabled individually or with \"all\":\n+//\n // [all]    compile-flags: -Cremark=all\n // [inline] compile-flags: -Cremark=inline\n+//\n+// Check that values of -Cremark flag are accumulated:\n+//\n+// [merge1] compile-flags: -Cremark=all    -Cremark=giraffe\n+// [merge2] compile-flags: -Cremark=inline -Cremark=giraffe\n+//\n // error-pattern: inline: f not inlined into g\n // dont-check-compiler-stderr\n "}, {"sha": "cb2b585ab96a8cd7680b5b006228e1cee1936a09", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -30,3 +30,15 @@ pub enum VariantNonExhaustive {\n pub enum NonExhaustiveSingleVariant {\n     A(bool),\n }\n+\n+#[repr(u8)]\n+pub enum FieldLessWithNonExhaustiveVariant {\n+    A,\n+    B,\n+    #[non_exhaustive]\n+    C,\n+}\n+\n+impl Default for FieldLessWithNonExhaustiveVariant {\n+    fn default() -> Self { Self::A }\n+}"}, {"sha": "d9657bac776850916b972c148ce2b56bb18421e2", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum-as-cast.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b954910c59a7a362c60959e93110892b6e9a691/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum-as-cast.rs?ref=8b954910c59a7a362c60959e93110892b6e9a691", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:enums.rs\n+// run-pass\n+\n+extern crate enums;\n+\n+use enums::FieldLessWithNonExhaustiveVariant;\n+\n+fn main() {\n+    let e = FieldLessWithNonExhaustiveVariant::default();\n+    // FIXME: https://github.com/rust-lang/rust/issues/91161\n+    // This `as` cast *should* be an error, since it would fail\n+    // if the non-exhaustive variant got fields.  But today it\n+    // doesn't.  The fix for that will update this test to\n+    // show an error (and not be run-pass any more).\n+    let d = e as u8;\n+    assert_eq!(d, 0);\n+}"}]}