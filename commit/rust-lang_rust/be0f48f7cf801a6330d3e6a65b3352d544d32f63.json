{"sha": "be0f48f7cf801a6330d3e6a65b3352d544d32f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMGY0OGY3Y2Y4MDFhNjMzMGQzZTZhNjViMzM1MmQ1NDRkMzJmNjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T13:48:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T13:48:20Z"}, "message": "move public stuff to top", "tree": {"sha": "e5952af91b284397a25c8d648d19593dffbeba0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5952af91b284397a25c8d648d19593dffbeba0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0f48f7cf801a6330d3e6a65b3352d544d32f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0f48f7cf801a6330d3e6a65b3352d544d32f63", "html_url": "https://github.com/rust-lang/rust/commit/be0f48f7cf801a6330d3e6a65b3352d544d32f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0f48f7cf801a6330d3e6a65b3352d544d32f63/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73532e900e2ea3b012d540d6dd9df9b564fb5852", "url": "https://api.github.com/repos/rust-lang/rust/commits/73532e900e2ea3b012d540d6dd9df9b564fb5852", "html_url": "https://github.com/rust-lang/rust/commit/73532e900e2ea3b012d540d6dd9df9b564fb5852"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "149d1403fec57768a7ab916712ce943d6fa44bc3", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/be0f48f7cf801a6330d3e6a65b3352d544d32f63/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0f48f7cf801a6330d3e6a65b3352d544d32f63/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=be0f48f7cf801a6330d3e6a65b3352d544d32f63", "patch": "@@ -14,6 +14,31 @@ use crate::{\n     AssistId,\n };\n \n+// This function produces sequence of text edits into edit\n+// to import the target path in the most appropriate scope given\n+// the cursor position\n+pub fn auto_import_text_edit(\n+    // Ideally the position of the cursor, used to\n+    position: &SyntaxNode,\n+    // The statement to use as anchor (last resort)\n+    anchor: &SyntaxNode,\n+    // The path to import as a sequence of strings\n+    target: &[SmolStr],\n+    edit: &mut TextEditBuilder,\n+) {\n+    let container = position.ancestors().find_map(|n| {\n+        if let Some(module) = ast::Module::cast(n.clone()) {\n+            return module.item_list().map(|it| it.syntax().clone());\n+        }\n+        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n+    });\n+\n+    if let Some(container) = container {\n+        let action = best_action_for_target(container, anchor.clone(), target);\n+        make_assist(&action, target, edit);\n+    }\n+}\n+\n pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n@@ -552,7 +577,7 @@ fn apply_auto_import(\n     }\n }\n \n-pub fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n+fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     let mut ps = Vec::<SmolStr>::with_capacity(10);\n     match path.kind {\n         hir::PathKind::Abs => ps.push(\"\".into()),\n@@ -568,31 +593,6 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     Some(ps)\n }\n \n-// This function produces sequence of text edits into edit\n-// to import the target path in the most appropriate scope given\n-// the cursor position\n-pub fn auto_import_text_edit(\n-    // Ideally the position of the cursor, used to\n-    position: &SyntaxNode,\n-    // The statement to use as anchor (last resort)\n-    anchor: &SyntaxNode,\n-    // The path to import as a sequence of strings\n-    target: &[SmolStr],\n-    edit: &mut TextEditBuilder,\n-) {\n-    let container = position.ancestors().find_map(|n| {\n-        if let Some(module) = ast::Module::cast(n.clone()) {\n-            return module.item_list().map(|it| it.syntax().clone());\n-        }\n-        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n-    });\n-\n-    if let Some(container) = container {\n-        let action = best_action_for_target(container, anchor.clone(), target);\n-        make_assist(&action, target, edit);\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}