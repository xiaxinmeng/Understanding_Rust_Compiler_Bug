{"sha": "2bde6949f955f59dacd72de3732c48f1c6d5b673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZGU2OTQ5Zjk1NWY1OWRhY2Q3MmRlMzczMmM0OGYxYzZkNWI2NzM=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-15T01:13:36Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-15T01:26:06Z"}, "message": "bring TyCtxt into scope", "tree": {"sha": "4a3d6e0d0be75955ee23a2960b91a180d35cfe21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3d6e0d0be75955ee23a2960b91a180d35cfe21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bde6949f955f59dacd72de3732c48f1c6d5b673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bde6949f955f59dacd72de3732c48f1c6d5b673", "html_url": "https://github.com/rust-lang/rust/commit/2bde6949f955f59dacd72de3732c48f1c6d5b673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bde6949f955f59dacd72de3732c48f1c6d5b673/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3bbce79d0c0b3b4525f65e3bc75a8fa2863634a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3bbce79d0c0b3b4525f65e3bc75a8fa2863634a", "html_url": "https://github.com/rust-lang/rust/commit/d3bbce79d0c0b3b4525f65e3bc75a8fa2863634a"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "5c011042deeee26ebcd8c420c480ce28c852351b", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -13,7 +13,7 @@ use hir::def_id::DefId;\n use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n-use ty;\n+use ty::TyCtxt;\n use util::nodemap::{NodeMap, ItemLocalMap};\n \n use std::hash as std_hash;\n@@ -34,7 +34,7 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n /// a reference to the TyCtxt) and it holds a few caches for speeding up various\n /// things (e.g. each DefId/DefPath is only hashed once).\n pub struct StableHashingContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     codemap: CachingCodemapView<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -53,7 +53,7 @@ pub enum NodeIdHashingMode {\n \n impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n \n-    pub fn new(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Self {\n         let hash_spans_initial = tcx.sess.opts.debuginfo != NoDebugInfo;\n         let check_overflow_initial = tcx.sess.overflow_checks();\n \n@@ -111,7 +111,7 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn tcx(&self) -> ty::TyCtxt<'a, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "b645a49949eeca8de7c6f35c020853b9f814d67a", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -340,7 +340,7 @@ language_item_table! {\n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n }\n \n-impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> {\n+impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             self.sess.fatal(&msg)"}, {"sha": "d43504b77ba0c40c9ef182b5f40cd398df9be471", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use ty::subst::{Subst, Substs};\n-use ty::{self, AdtDef, ClosureSubsts, Region, Ty, GeneratorInterior};\n+use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n use rustc_back::slice;\n@@ -644,7 +644,7 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> TerminatorKind<'tcx> {\n-    pub fn if_<'a, 'gcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n+    pub fn if_<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, cond: Operand<'tcx>,\n                          t: BasicBlock, f: BasicBlock) -> TerminatorKind<'tcx> {\n         static BOOL_SWITCH_FALSE: &'static [ConstInt] = &[ConstInt::U8(0)];\n         TerminatorKind::SwitchInt {\n@@ -1182,7 +1182,7 @@ impl<'tcx> Debug for Operand<'tcx> {\n \n impl<'tcx> Operand<'tcx> {\n     pub fn function_handle<'a>(\n-        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         span: Span,"}, {"sha": "84d7745a64f0a2218f81ff4d646da86b9553f602", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -386,7 +386,7 @@ impl Integer {\n         }\n     }\n \n-    pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub fn to_ty<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>,\n                            signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n             (I1, false) => tcx.types.u8,"}, {"sha": "ade2612855e02e8462deb2dc7e7a48d3eefeb8a5", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -14,7 +14,7 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::hir;\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Ast<'tcx> {\n@@ -59,7 +59,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n }\n \n struct NestedBodyCollector<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     bodies_found: Vec<&'tcx hir::Body>,\n }\n "}, {"sha": "dfddbfe485dd961fd2fd373d78b3c22e4a7cd391", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -16,7 +16,7 @@\n use build::CFG;\n use rustc::middle::region;\n use rustc::mir::*;\n-use rustc::ty;\n+use rustc::ty::TyCtxt;\n \n impl<'tcx> CFG<'tcx> {\n     pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -46,7 +46,7 @@ impl<'tcx> CFG<'tcx> {\n     }\n \n     pub fn push_end_region<'a, 'gcx:'a+'tcx>(&mut self,\n-                                             tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+                                             tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                              block: BasicBlock,\n                                              source_info: SourceInfo,\n                                              region_scope: region::Scope) {"}, {"sha": "a141ff3153fd1dbddcb032ab7075d9b1bea7bd52", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -14,7 +14,7 @@ use rustc::infer;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::maps::Providers;\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -36,7 +36,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn make_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        instance: ty::InstanceDef<'tcx>)\n                        -> &'tcx Mir<'tcx>\n {\n@@ -154,7 +154,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              ty: Option<Ty<'tcx>>)\n                              -> Mir<'tcx>\n@@ -235,7 +235,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n pub struct DropShimElaborator<'a, 'tcx: 'a> {\n     pub mir: &'a Mir<'tcx>,\n     pub patch: MirPatch<'tcx>,\n-    pub tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -250,7 +250,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx> { &mut self.patch }\n     fn mir(&self) -> &'a Mir<'tcx> { self.mir }\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> { self.tcx }\n     fn param_env(&self) -> ty::ParamEnv<'tcx> { self.param_env }\n \n     fn drop_style(&self, _path: Self::Path, mode: DropFlagMode) -> DropStyle {\n@@ -280,7 +280,7 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Build a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               def_id: DefId,\n                               self_ty: ty::Ty<'tcx>)\n                               -> Mir<'tcx>\n@@ -306,7 +306,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n struct CloneShimBuilder<'a, 'tcx: 'a> {\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -315,7 +315,7 @@ struct CloneShimBuilder<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n-    fn new(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Self {\n         let sig = tcx.fn_sig(def_id);\n         let sig = tcx.erase_late_bound_regions(&sig);\n         let span = tcx.def_span(def_id);\n@@ -666,7 +666,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n-fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId,\n                              rcvr_adjustment: Adjustment,\n                              call_kind: CallKind,"}, {"sha": "c833904adbaea6b7dab2067a375887e9ff8f37e3", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         self.ctxt.mir\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx> {\n         self.ctxt.tcx\n     }\n "}, {"sha": "3b9772079adb9c90546cdec00bb07b5137010d8f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -13,7 +13,7 @@ use rustc::hir;\n use rustc::mir::*;\n use rustc::middle::const_val::{ConstInt, ConstVal};\n use rustc::middle::lang_items;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -84,7 +84,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n \n     fn patch(&mut self) -> &mut MirPatch<'tcx>;\n     fn mir(&self) -> &'a Mir<'tcx>;\n-    fn tcx(&self) -> ty::TyCtxt<'a, 'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n     fn param_env(&self) -> ty::ParamEnv<'tcx>;\n \n     fn drop_style(&self, path: Self::Path, mode: DropFlagMode) -> DropStyle;\n@@ -133,7 +133,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         lvalue.ty(self.elaborator.mir(), self.tcx()).to_ty(self.tcx())\n     }\n \n-    fn tcx(&self) -> ty::TyCtxt<'b, 'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'b, 'tcx, 'tcx> {\n         self.elaborator.tcx()\n     }\n "}, {"sha": "d179b390a291868130709077558d33211a1ce055", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -45,7 +45,7 @@ use super::FnCtxt;\n use middle::expr_use_visitor as euv;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Categorization;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::infer::UpvarRegion;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -586,7 +586,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'gcx, 'tcx> {\n     }\n }\n \n-fn var_name(tcx: ty::TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n+fn var_name(tcx: TyCtxt, var_hir_id: hir::HirId) -> ast::Name {\n     let var_node_id = tcx.hir.hir_to_node_id(var_hir_id);\n     tcx.hir.name(var_node_id)\n }"}, {"sha": "5f55b9b06ef1b122d804e090a99b53c6be398b38", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bde6949f955f59dacd72de3732c48f1c6d5b673/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=2bde6949f955f59dacd72de3732c48f1c6d5b673", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::util::nodemap::FxHashSet;\n \n@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n+pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt,\n                                               predicates: &[ty::Predicate<'tcx>],\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)\n@@ -136,7 +136,7 @@ pub fn identify_constrained_type_params<'tcx>(tcx: ty::TyCtxt,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(tcx: ty::TyCtxt,\n+pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt,\n                                            predicates: &mut [ty::Predicate<'tcx>],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut FxHashSet<Parameter>)"}]}