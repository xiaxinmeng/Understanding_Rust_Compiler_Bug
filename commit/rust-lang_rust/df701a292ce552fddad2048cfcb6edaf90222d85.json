{"sha": "df701a292ce552fddad2048cfcb6edaf90222d85", "node_id": "C_kwDOAAsO6NoAKGRmNzAxYTI5MmNlNTUyZmRkYWQyMDQ4Y2ZjYjZlZGFmOTAyMjJkODU", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-09-24T15:02:02Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2022-02-28T23:57:25Z"}, "message": "Querify `global_backend_features`\n\nAt the very least this serves to deduplicate the diagnostics that are\noutput about unknown target features provided via CLI.", "tree": {"sha": "7e299460e96c3f5eb09851ef56e729332caedff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e299460e96c3f5eb09851ef56e729332caedff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df701a292ce552fddad2048cfcb6edaf90222d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df701a292ce552fddad2048cfcb6edaf90222d85", "html_url": "https://github.com/rust-lang/rust/commit/df701a292ce552fddad2048cfcb6edaf90222d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df701a292ce552fddad2048cfcb6edaf90222d85/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97c216efd542fbec5a7ccf9555f3cebb3198cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97c216efd542fbec5a7ccf9555f3cebb3198cec", "html_url": "https://github.com/rust-lang/rust/commit/c97c216efd542fbec5a7ccf9555f3cebb3198cec"}], "stats": {"total": 106, "additions": 58, "deletions": 48}, "files": [{"sha": "20b9b659f1504089615bf797528766b236f78605", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -132,7 +132,7 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         base::compile_codegen_unit(tcx, cgu_name)\n     }\n \n-    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel) -> TargetMachineFactoryFn<Self> {\n+    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel, _features: &[String]) -> TargetMachineFactoryFn<Self> {\n         // TODO(antoyo): set opt level.\n         Arc::new(|_| {\n             Ok(())"}, {"sha": "8f30f0895f488e6a994daef53653b4c56a71a563", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -79,13 +79,11 @@ pub fn sanitize_attrs<'ll>(\n     }\n     if enabled.contains(SanitizerSet::MEMTAG) {\n         // Check to make sure the mte target feature is actually enabled.\n-        let sess = cx.tcx.sess;\n-        let features = llvm_util::llvm_global_features(sess).join(\",\");\n-        let mte_feature_enabled = features.rfind(\"+mte\");\n-        let mte_feature_disabled = features.rfind(\"-mte\");\n-\n-        if mte_feature_enabled.is_none() || (mte_feature_disabled > mte_feature_enabled) {\n-            sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+        let features = cx.tcx.global_backend_features(());\n+        let mte_feature =\n+            features.iter().map(|s| &s[..]).rfind(|n| [\"+mte\", \"-mte\"].contains(&&n[..]));\n+        if let None | Some(\"-mte\") = mte_feature {\n+            cx.tcx.sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n         }\n \n         attrs.push(llvm::AttributeKind::SanitizeMemTag.create_attr(cx.llcx));\n@@ -415,10 +413,11 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n \n     if !function_features.is_empty() {\n-        let mut global_features = llvm_util::llvm_global_features(cx.tcx.sess);\n-        global_features.extend(function_features.into_iter());\n-        let features = global_features.join(\",\");\n-        let val = CString::new(features).unwrap();\n+        let global_features = cx.tcx.global_backend_features(()).iter().map(|s| &s[..]);\n+        let val = global_features\n+            .chain(function_features.iter().map(|s| &s[..]))\n+            .intersperse(\",\")\n+            .collect::<SmallCStr>();\n         to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"target-features\"), &val));\n     }\n "}, {"sha": "c18719d4ad7391c7aa52c7ee129df4f4f0638729", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -100,7 +100,10 @@ pub fn write_output_file<'ll>(\n \n pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm::TargetMachine {\n     let config = TargetMachineFactoryConfig { split_dwarf_file: None };\n-    target_machine_factory(sess, config::OptLevel::No)(config)\n+    // Can't use query system here quite yet because this function is invoked before the query\n+    // system/tcx is set up.\n+    let features = llvm_util::global_llvm_features(sess, false);\n+    target_machine_factory(sess, config::OptLevel::No, &features)(config)\n         .unwrap_or_else(|err| llvm_err(sess.diagnostic(), &err).raise())\n }\n \n@@ -115,8 +118,12 @@ pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut ll\n         None\n     };\n     let config = TargetMachineFactoryConfig { split_dwarf_file };\n-    target_machine_factory(tcx.sess, tcx.backend_optimization_level(()))(config)\n-        .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n+    target_machine_factory(\n+        &tcx.sess,\n+        tcx.backend_optimization_level(()),\n+        tcx.global_backend_features(()),\n+    )(config)\n+    .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n \n pub fn to_llvm_opt_settings(\n@@ -171,6 +178,7 @@ pub(crate) fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeMod\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n+    target_features: &[String],\n ) -> TargetMachineFactoryFn<LlvmCodegenBackend> {\n     let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n@@ -195,8 +203,7 @@ pub fn target_machine_factory(\n \n     let triple = SmallCStr::new(&sess.target.llvm_target);\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n-    let features = llvm_util::llvm_global_features(sess).join(\",\");\n-    let features = CString::new(features).unwrap();\n+    let features = CString::new(target_features.join(\",\")).unwrap();\n     let abi = SmallCStr::new(&sess.target.llvm_abiname);\n     let trap_unreachable =\n         sess.opts.debugging_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);"}, {"sha": "09c2c4ec7712ae8c71baa77920a2710ba2314753", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -11,6 +11,7 @@\n #![feature(extern_types)]\n #![feature(once_cell)]\n #![feature(nll)]\n+#![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n@@ -32,6 +33,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n@@ -126,8 +128,9 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         sess: &Session,\n         optlvl: OptLevel,\n+        target_features: &[String],\n     ) -> TargetMachineFactoryFn<Self> {\n-        back::write::target_machine_factory(sess, optlvl)\n+        back::write::target_machine_factory(sess, optlvl, target_features)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n@@ -251,6 +254,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n         llvm_util::init(sess); // Make sure llvm is inited\n     }\n \n+    fn provide(&self, providers: &mut Providers) {\n+        providers.global_backend_features =\n+            |tcx, ()| llvm_util::global_llvm_features(tcx.sess, true)\n+    }\n+\n     fn print(&self, req: PrintRequest, sess: &Session) {\n         match req {\n             PrintRequest::RelocationModels => {"}, {"sha": "e23572104c4756b1fc486285cba57dff2746b30e", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -1033,6 +1033,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     } else {\n         tcx.backend_optimization_level(())\n     };\n+    let backend_features = tcx.global_backend_features(());\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n         crate_types: sess.crate_types().to_vec(),\n@@ -1054,7 +1055,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: backend.target_machine_factory(tcx.sess, ol),\n+        tm_factory: backend.target_machine_factory(tcx.sess, ol, backend_features),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         is_pe_coff: tcx.sess.target.is_like_windows,"}, {"sha": "a71eadd3d75fc2050c911a6a71b1cf4ae39de4e2", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -134,6 +134,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         &self,\n         sess: &Session,\n         opt_level: config::OptLevel,\n+        target_features: &[String],\n     ) -> TargetMachineFactoryFn<Self>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n     fn tune_cpu<'b>(&self, sess: &'b Session) -> Option<&'b str>;"}, {"sha": "cd9025245628e628c1f66b3e712eef03777e4162", "filename": "compiler/rustc_data_structures/src/small_c_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -66,3 +66,15 @@ impl Deref for SmallCStr {\n         self.as_c_str()\n     }\n }\n+\n+impl<'a> FromIterator<&'a str> for SmallCStr {\n+    fn from_iter<T: IntoIterator<Item = &'a str>>(iter: T) -> Self {\n+        let mut data =\n+            iter.into_iter().flat_map(|s| s.as_bytes()).copied().collect::<SmallVec<_>>();\n+        data.push(0);\n+        if let Err(e) = ffi::CStr::from_bytes_with_nul(&data) {\n+            panic!(\"The iterator {:?} cannot be converted into a CStr: {}\", data, e);\n+        }\n+        Self { data }\n+    }\n+}"}, {"sha": "1dc01e122520c9bc977fcd72a0689f3e0a3c7d15", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -1944,4 +1944,13 @@ rustc_queries! {\n         no_hash\n         desc { \"performing HIR wf-checking for predicate {:?} at item {:?}\", key.0, key.1 }\n     }\n+\n+\n+    /// The list of backend features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n+    /// `--target` and similar).\n+    query global_backend_features(_: ()) -> Vec<String> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        eval_always\n+        desc { \"computing the backend features for CLI flags\" }\n+    }\n }"}, {"sha": "93abf3508057934695c42aecea7a368e58e951d0", "filename": "src/test/ui/target-feature/missing-plusminus.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -2,17 +2,5 @@ warning: unknown feature specified for `-Ctarget-feature`: `banana`\n    |\n    = note: features must begin with a `+` to enable or `-` to disable it\n \n-warning: unknown feature specified for `-Ctarget-feature`: `banana`\n-   |\n-   = note: features must begin with a `+` to enable or `-` to disable it\n-\n-warning: unknown feature specified for `-Ctarget-feature`: `banana`\n-   |\n-   = note: features must begin with a `+` to enable or `-` to disable it\n-\n-warning: unknown feature specified for `-Ctarget-feature`: `banana`\n-   |\n-   = note: features must begin with a `+` to enable or `-` to disable it\n-\n-warning: 4 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "2f376065fdfb048cf858e5f13e2cacf343230f49", "filename": "src/test/ui/target-feature/similar-feature-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df701a292ce552fddad2048cfcb6edaf90222d85/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df701a292ce552fddad2048cfcb6edaf90222d85/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr?ref=df701a292ce552fddad2048cfcb6edaf90222d85", "patch": "@@ -3,20 +3,5 @@ warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n    = note: it is still passed through to the codegen backend\n    = help: you might have meant: `rdrand`\n \n-warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n-   |\n-   = note: it is still passed through to the codegen backend\n-   = help: did you mean: `rdrand`\n-\n-warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n-   |\n-   = note: it is still passed through to the codegen backend\n-   = help: did you mean: `rdrand`\n-\n-warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n-   |\n-   = note: it is still passed through to the codegen backend\n-   = help: did you mean: `rdrand`\n-\n-warning: 4 warnings emitted\n+warning: 1 warning emitted\n "}]}