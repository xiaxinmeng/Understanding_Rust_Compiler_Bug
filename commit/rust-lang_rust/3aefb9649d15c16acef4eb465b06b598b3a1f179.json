{"sha": "3aefb9649d15c16acef4eb465b06b598b3a1f179", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWZiOTY0OWQxNWMxNmFjZWY0ZWI0NjViMDZiNTk4YjNhMWYxNzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:26:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:26:59Z"}, "message": "librustc: Convert from `@Object` to `@mut Object` as needed", "tree": {"sha": "9239a86787ceebfe98e0d09d36dab587ce95b195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9239a86787ceebfe98e0d09d36dab587ce95b195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aefb9649d15c16acef4eb465b06b598b3a1f179", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aefb9649d15c16acef4eb465b06b598b3a1f179", "html_url": "https://github.com/rust-lang/rust/commit/3aefb9649d15c16acef4eb465b06b598b3a1f179", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aefb9649d15c16acef4eb465b06b598b3a1f179/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96254b4090a86767d1a3b387158464ece44160fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/96254b4090a86767d1a3b387158464ece44160fa", "html_url": "https://github.com/rust-lang/rust/commit/96254b4090a86767d1a3b387158464ece44160fa"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "0e7dc3b2fcd914cd2da363cb745e7cef291e04b9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -785,7 +785,7 @@ pub fn build_session(sopts: @session::options,\n pub fn build_session_(sopts: @session::options,\n                       cm: @codemap::CodeMap,\n                       demitter: diagnostic::Emitter,\n-                      span_diagnostic_handler: @diagnostic::span_handler)\n+                      span_diagnostic_handler: @mut diagnostic::span_handler)\n                    -> Session {\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,"}, {"sha": "cf62e35488b1fb37959877743f7df59f64e71609", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -192,7 +192,7 @@ pub struct Session_ {\n     // For a library crate, this is always none\n     entry_fn: @mut Option<(NodeId, codemap::span)>,\n     entry_type: @mut Option<EntryFnType>,\n-    span_diagnostic: @diagnostic::span_handler,\n+    span_diagnostic: @mut diagnostic::span_handler,\n     filesearch: @filesearch::FileSearch,\n     building_library: @mut bool,\n     working_dir: Path,\n@@ -261,7 +261,7 @@ impl Session_ {\n     pub fn next_node_id(@self) -> ast::NodeId {\n         return syntax::parse::next_node_id(self.parse_sess);\n     }\n-    pub fn diagnostic(@self) -> @diagnostic::span_handler {\n+    pub fn diagnostic(@self) -> @mut diagnostic::span_handler {\n         self.span_diagnostic\n     }\n     pub fn debugging_opt(@self, opt: uint) -> bool {"}, {"sha": "eaf01241c8165d0b9eebc00a591edccb5d233b3e", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -29,7 +29,7 @@ use syntax::oldvisit;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n-pub fn read_crates(diag: @span_handler,\n+pub fn read_crates(diag: @mut span_handler,\n                    crate: &ast::Crate,\n                    cstore: @mut cstore::CStore,\n                    filesearch: @FileSearch,\n@@ -74,7 +74,7 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n }\n \n fn warn_if_multiple_versions(e: @mut Env,\n-                             diag: @span_handler,\n+                             diag: @mut span_handler,\n                              crate_cache: &[cache_entry]) {\n     use std::either::*;\n \n@@ -113,7 +113,7 @@ fn warn_if_multiple_versions(e: @mut Env,\n }\n \n struct Env {\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n     filesearch: @FileSearch,\n     cstore: @mut cstore::CStore,\n     os: loader::os,"}, {"sha": "9366d757dd476befc73bda2253cb9311e929aaa0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -55,7 +55,7 @@ pub type encode_inlined_item<'self> = &'self fn(ecx: &EncodeContext,\n                                    ii: ast::inlined_item);\n \n pub struct EncodeParams<'self> {\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'self HashMap<ast::NodeId, ~str>,\n@@ -82,7 +82,7 @@ struct Stats {\n }\n \n pub struct EncodeContext<'self> {\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n     tcx: ty::ctxt,\n     stats: @mut Stats,\n     reexports2: middle::resolve::ExportMap2,"}, {"sha": "554cdf4b2b4feb13a9055357ec18cd10316e375f", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -43,7 +43,7 @@ pub enum os {\n }\n \n pub struct Context {\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n     filesearch: @FileSearch,\n     span: span,\n     ident: @str,\n@@ -163,7 +163,7 @@ pub fn package_id_from_metas(metas: &[@ast::MetaItem]) -> Option<@str> {\n }\n \n pub fn note_linkage_attrs(intr: @ident_interner,\n-                          diag: @span_handler,\n+                          diag: @mut span_handler,\n                           attrs: ~[ast::Attribute]) {\n     let r = attr::find_linkage_metas(attrs);\n     for mi in r.iter() {"}, {"sha": "915729d254f94a7c602421e3055a9ceda56a94e4", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -25,7 +25,7 @@ use syntax::diagnostic::span_handler;\n use syntax::print::pprust::*;\n \n pub struct ctxt {\n-    diag: @span_handler,\n+    diag: @mut span_handler,\n     // Def -> str Callback:\n     ds: @fn(def_id) -> ~str,\n     // The type context."}, {"sha": "76532b5cd22d6c6c835c71464b8cfff089ee2e1d", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -301,7 +301,7 @@ enum AnyVisitor {\n     // recursive call can use the original visitor's method, although the\n     // recursing visitor supplied to the method is the item stopping visitor.\n     OldVisitor(oldvisit::vt<@mut Context>, oldvisit::vt<@mut Context>),\n-    NewVisitor(@visit::Visitor<()>),\n+    NewVisitor(@mut visit::Visitor<()>),\n }\n \n struct Context {\n@@ -465,7 +465,7 @@ impl Context {\n         self.visitors.push(OldVisitor(v, item_stopping_visitor(v)));\n     }\n \n-    fn add_lint(&mut self, v: @visit::Visitor<()>) {\n+    fn add_lint(&mut self, v: @mut visit::Visitor<()>) {\n         self.visitors.push(NewVisitor(v));\n     }\n \n@@ -989,7 +989,7 @@ fn lint_unused_mut() -> oldvisit::vt<@mut Context> {\n     })\n }\n \n-fn lint_session(cx: @mut Context) -> @visit::Visitor<()> {\n+fn lint_session(cx: @mut Context) -> @mut visit::Visitor<()> {\n     ast_util::id_visitor(|id| {\n         match cx.tcx.sess.lints.pop(&id) {\n             None => {},"}, {"sha": "5685af2b74e810c1bb17d51e325eff5f1ea12347", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aefb9649d15c16acef4eb465b06b598b3a1f179/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3aefb9649d15c16acef4eb465b06b598b3a1f179", "patch": "@@ -226,13 +226,16 @@ pub enum AutoRef {\n     AutoBorrowFn(Region),\n \n     /// Convert from T to *T\n-    AutoUnsafe(ast::mutability)\n+    AutoUnsafe(ast::mutability),\n+\n+    /// Convert from @Trait/~Trait/&Trait to &Trait\n+    AutoBorrowObj(Region, ast::mutability),\n }\n \n pub type ctxt = @ctxt_;\n \n struct ctxt_ {\n-    diag: @syntax::diagnostic::span_handler,\n+    diag: @mut syntax::diagnostic::span_handler,\n     interner: @mut HashMap<intern_key, ~t_box_>,\n     next_id: @mut uint,\n     cstore: @mut metadata::cstore::CStore,"}]}