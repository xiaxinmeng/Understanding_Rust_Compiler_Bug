{"sha": "b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2OWNkNzNiN2JkNDQ4ZGJmZGU0Y2YwNzRiNzNhNGI4Mzg0Y2FkMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-21T11:37:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-21T11:37:14Z"}, "message": "auto merge of #17508 : vberger/rust/stability_lint_for_nested_macros, r=pnkfelix\n\nFinishes the job of #17286.\r\n\r\nNow the stability lint will successfully detect patterns such as:\r\n```\r\nfirst_macro!(second_macro!(deprecated_function()));\r\n```\r\n```\r\nmacro_rules! foo (\r\n    ($e: expr) => (bar!($e))\r\n)\r\nfoo!(deprected_function());\r\n```\r\nand\r\n```\r\nprintln!(\"{}\", deprecated_function());\r\n```\r\neven with more levels of nesting, such as\r\n```\r\nprintln!(\"{}\", foo!(bar!(deprecated_function())));\r\n```", "tree": {"sha": "cd67057c778592286a506b7d0adea3c61b52f60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd67057c778592286a506b7d0adea3c61b52f60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "html_url": "https://github.com/rust-lang/rust/commit/b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b69cd73b7bd448dbfde4cf074b73a4b8384cad38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8cc3f26ec998181a883d79c9a668fe55695e681", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cc3f26ec998181a883d79c9a668fe55695e681", "html_url": "https://github.com/rust-lang/rust/commit/e8cc3f26ec998181a883d79c9a668fe55695e681"}, {"sha": "dd55c8003cb9c4b065e8a8e54bbc0496ac0a3dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd55c8003cb9c4b065e8a8e54bbc0496ac0a3dfd", "html_url": "https://github.com/rust-lang/rust/commit/dd55c8003cb9c4b065e8a8e54bbc0496ac0a3dfd"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "69575e51e0f444d4ea11e8a89cec6c3f7e297948", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b69cd73b7bd448dbfde4cf074b73a4b8384cad38/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69cd73b7bd448dbfde4cf074b73a4b8384cad38/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "patch": "@@ -43,7 +43,7 @@ use syntax::abi;\n use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n-use syntax::codemap::{Span, NO_EXPANSION};\n+use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::{ast, ast_util, visit};\n use syntax::ptr::P;\n@@ -1473,27 +1473,33 @@ impl LintPass for Stability {\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n-        // skip if `e` is not from macro arguments\n-        let skip = cx.tcx.sess.codemap().with_expn_info(e.span.expn_id, |expninfo| {\n+        // first, check if the given expression was generated by a macro or not\n+        // we need to go back the expn_info tree to check only the arguments\n+        // of the initial macro call, not the nested ones.\n+        let mut expnid = e.span.expn_id;\n+        let mut is_internal = false;\n+        while cx.tcx.sess.codemap().with_expn_info(expnid, |expninfo| {\n             match expninfo {\n                 Some(ref info) => {\n-                    if info.call_site.expn_id != NO_EXPANSION ||\n-                       !( e.span.lo > info.call_site.lo && e.span.hi < info.call_site.hi ) {\n-                        // This code is not from the arguments,\n-                        // or this macro call was generated by an other macro\n-                        // We can't handle it.\n-                        true\n-                    } else if info.callee.span.is_none() {\n-                        // We don't want to mess with compiler builtins.\n-                        true\n+                    // save the parent expn_id for next loop iteration\n+                    expnid = info.call_site.expn_id;\n+                    if info.callee.span.is_none() {\n+                        // it's a compiler built-in, we *really* don't want to mess with it\n+                        // so we skip it, unless it was called by a regular macro, in which case\n+                        // we will handle the caller macro next turn\n+                        is_internal = true;\n+                        true // continue looping\n                     } else {\n-                        false\n+                        // was this expression from the current macro arguments ?\n+                        is_internal = !( e.span.lo > info.call_site.lo &&\n+                                         e.span.hi < info.call_site.hi );\n+                        true // continue looping\n                     }\n                 },\n-                _ => { false }\n+                _ => false // stop looping\n             }\n-        });\n-        if skip { return; }\n+        }) { /* empty while loop body */ }\n+        if is_internal { return; }\n \n         let mut span = e.span;\n "}, {"sha": "fdb0d801164bf39e96e4576c3ceeb778466dee7a", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b69cd73b7bd448dbfde4cf074b73a4b8384cad38/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b69cd73b7bd448dbfde4cf074b73a4b8384cad38/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=b69cd73b7bd448dbfde4cf074b73a4b8384cad38", "patch": "@@ -116,6 +116,7 @@ mod cross_crate {\n         // on macros themselves are not yet linted.\n         macro_test!();\n         macro_test_arg!(deprecated_text()); //~ ERROR use of deprecated item: text\n+        macro_test_arg!(macro_test_arg!(deprecated_text())); //~ ERROR use of deprecated item: text\n         macro_test_arg_nested!(deprecated_text);\n     }\n "}]}