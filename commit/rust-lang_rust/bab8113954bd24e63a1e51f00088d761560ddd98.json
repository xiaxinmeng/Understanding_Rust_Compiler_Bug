{"sha": "bab8113954bd24e63a1e51f00088d761560ddd98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYjgxMTM5NTRiZDI0ZTYzYTFlNTFmMDAwODhkNzYxNTYwZGRkOTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T16:18:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T16:18:51Z"}, "message": "Fix discriminant_value intrinsic\n\nFixes #349", "tree": {"sha": "73e49e99530007d646127901ae48721218ff9d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73e49e99530007d646127901ae48721218ff9d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bab8113954bd24e63a1e51f00088d761560ddd98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bab8113954bd24e63a1e51f00088d761560ddd98", "html_url": "https://github.com/rust-lang/rust/commit/bab8113954bd24e63a1e51f00088d761560ddd98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bab8113954bd24e63a1e51f00088d761560ddd98/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf07adbfb51cd1d98c3ab70488bb6a880ba63e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf07adbfb51cd1d98c3ab70488bb6a880ba63e2", "html_url": "https://github.com/rust-lang/rust/commit/ccf07adbfb51cd1d98c3ab70488bb6a880ba63e2"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "ce74efee8a8841fa338d74a1a61472fce6b8719c", "filename": "example/std_example.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bab8113954bd24e63a1e51f00088d761560ddd98/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab8113954bd24e63a1e51f00088d761560ddd98/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=bab8113954bd24e63a1e51f00088d761560ddd98", "patch": "@@ -15,4 +15,12 @@ fn main() {\n \n     static ONCE: std::sync::Once = std::sync::ONCE_INIT;\n     ONCE.call_once(|| {});\n+\n+    LoopState::Continue(()) == LoopState::Break(());\n+}\n+\n+#[derive(PartialEq)]\n+enum LoopState {\n+    Continue(()),\n+    Break(())\n }"}, {"sha": "5eb1819e3ccc769ec6d4cc2fefb7efd4dfcecaf1", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bab8113954bd24e63a1e51f00088d761560ddd98/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab8113954bd24e63a1e51f00088d761560ddd98/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bab8113954bd24e63a1e51f00088d761560ddd98", "patch": "@@ -570,7 +570,9 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n                         }\n                         (ty::Adt(adt_def, _substs), ty::Uint(_)) | (ty::Adt(adt_def, _substs), ty::Int(_)) if adt_def.is_enum() => {\n-                            let discr = trans_get_discriminant(fx, operand, fx.layout_of(to_ty));\n+                            // FIXME avoid forcing to stack\n+                            let place = CPlace::Addr(operand.force_stack(fx), None, operand.layout());\n+                            let discr = trans_get_discriminant(fx, place, fx.layout_of(to_ty));\n                             lval.write_cvalue(fx, discr);\n                         }\n                         _ => unimpl!(\"rval misc {:?} {:?}\", from_ty, to_ty),\n@@ -584,7 +586,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     operand.unsize_value(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n-                    let place = trans_place(fx, place).to_cvalue(fx);\n+                    let place = trans_place(fx, place);\n                     let discr = trans_get_discriminant(fx, place, dest_layout);\n                     lval.write_cvalue(fx, discr);\n                 }\n@@ -680,10 +682,10 @@ fn codegen_array_len<'a, 'tcx: 'a>(\n \n pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-    value: CValue<'tcx>,\n+    place: CPlace<'tcx>,\n     dest_layout: TyLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let layout = value.layout();\n+    let layout = place.layout();\n \n     if layout.abi == layout::Abi::Uninhabited {\n         trap_unreachable(&mut fx.bcx);\n@@ -701,7 +703,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n         layout::Variants::Tagged { .. } | layout::Variants::NicheFilling { .. } => {}\n     }\n \n-    let discr = value.value_field(fx, mir::Field::new(0));\n+    let discr = place.place_field(fx, mir::Field::new(0)).to_cvalue(fx);\n     let discr_ty = discr.layout().ty;\n     let lldiscr = discr.load_scalar(fx);\n     match layout.variants {"}, {"sha": "2068bd9e508e6d41bb7bb974f5f265caccf8f644", "filename": "src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bab8113954bd24e63a1e51f00088d761560ddd98/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bab8113954bd24e63a1e51f00088d761560ddd98/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=bab8113954bd24e63a1e51f00088d761560ddd98", "patch": "@@ -141,7 +141,9 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             }\n         };\n         discriminant_value, (c val) {\n-            let discr = crate::base::trans_get_discriminant(fx, val, ret.layout());\n+            let pointee_layout = fx.layout_of(val.layout().ty.builtin_deref(true).unwrap().ty);\n+            let place = CPlace::Addr(val.load_scalar(fx), None, pointee_layout);\n+            let discr = crate::base::trans_get_discriminant(fx, place, ret.layout());\n             ret.write_cvalue(fx, discr);\n         };\n         size_of, <T> () {"}]}