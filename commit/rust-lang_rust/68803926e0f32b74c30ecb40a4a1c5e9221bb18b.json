{"sha": "68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "node_id": "C_kwDOAAsO6NoAKDY4ODAzOTI2ZTBmMzJiNzRjMzBlY2I0MGE0YTFjNWU5MjIxYmIxOGI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-21T21:33:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-21T22:12:05Z"}, "message": "rustdoc: Use `DefId(Map,Set)` instead of `FxHash(Map,Set)`\n\nNot all uses are converted, a few cases iterating through maps/sets and requiring nontrivial changes are kept.", "tree": {"sha": "55a803885e820f921591f785d45c729837e1f17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a803885e820f921591f785d45c729837e1f17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "html_url": "https://github.com/rust-lang/rust/commit/68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52372f9c71d8ade4cb815524f179119656f0aa2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52372f9c71d8ade4cb815524f179119656f0aa2e", "html_url": "https://github.com/rust-lang/rust/commit/52372f9c71d8ade4cb815524f179119656f0aa2e"}], "stats": {"total": 120, "additions": 55, "deletions": 65}, "files": [{"sha": "da300b89a4e9b1273a168fdd4b57908834f14ae0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -9,7 +9,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdSet, LocalDefId};\n use rustc_hir::Mutability;\n use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -45,7 +45,7 @@ pub(crate) fn try_inline(\n     res: Res,\n     name: Symbol,\n     attrs: Option<&[ast::Attribute]>,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n ) -> Option<Vec<clean::Item>> {\n     let did = res.opt_def_id()?;\n     if did.is_local() {\n@@ -163,7 +163,7 @@ pub(crate) fn try_inline_glob(\n     cx: &mut DocContext<'_>,\n     res: Res,\n     current_mod: LocalDefId,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n ) -> Option<Vec<clean::Item>> {\n     let did = res.opt_def_id()?;\n@@ -568,11 +568,7 @@ pub(crate) fn build_impl(\n     ));\n }\n \n-fn build_module(\n-    cx: &mut DocContext<'_>,\n-    did: DefId,\n-    visited: &mut FxHashSet<DefId>,\n-) -> clean::Module {\n+fn build_module(cx: &mut DocContext<'_>, did: DefId, visited: &mut DefIdSet) -> clean::Module {\n     let items = build_module_items(cx, did, visited, &mut FxHashSet::default(), None);\n \n     let span = clean::Span::new(cx.tcx.def_span(did));\n@@ -582,9 +578,9 @@ fn build_module(\n fn build_module_items(\n     cx: &mut DocContext<'_>,\n     did: DefId,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n-    allowed_def_ids: Option<&FxHashSet<DefId>>,\n+    allowed_def_ids: Option<&DefIdSet>,\n ) -> Vec<clean::Item> {\n     let mut items = Vec::new();\n "}, {"sha": "34a7068e5da53b84b75f5e5147027801a2fd9d36", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -15,7 +15,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet, IndexEntry};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc_hir::PredicateOrigin;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n@@ -1528,7 +1528,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n     let hir::ItemKind::TyAlias(ty, generics) = alias else { return None };\n \n     let provided_params = &path.segments.last().expect(\"segments were empty\");\n-    let mut substs = FxHashMap::default();\n+    let mut substs = DefIdMap::default();\n     let generic_args = provided_params.args();\n \n     let mut indices: hir::GenericParamCount = Default::default();\n@@ -2321,7 +2321,7 @@ fn clean_extern_crate<'tcx>(\n \n     let krate_owner_def_id = krate.owner_id.to_def_id();\n     if please_inline {\n-        let mut visited = FxHashSet::default();\n+        let mut visited = DefIdSet::default();\n \n         let res = Res::Def(DefKind::Mod, crate_def_id);\n \n@@ -2440,7 +2440,7 @@ fn clean_use_statement_inner<'tcx>(\n     let path = clean_path(path, cx);\n     let inner = if kind == hir::UseKind::Glob {\n         if !denied {\n-            let mut visited = FxHashSet::default();\n+            let mut visited = DefIdSet::default();\n             if let Some(items) =\n                 inline::try_inline_glob(cx, path.res, current_mod, &mut visited, inlined_names)\n             {\n@@ -2459,7 +2459,7 @@ fn clean_use_statement_inner<'tcx>(\n             }\n         }\n         if !denied {\n-            let mut visited = FxHashSet::default();\n+            let mut visited = DefIdSet::default();\n             let import_def_id = import.owner_id.to_def_id();\n \n             if let Some(mut items) = inline::try_inline("}, {"sha": "10b606f425ea41fcd4839ff72fd0d95806428d04", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::{Namespace, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Path, TraitCandidate};\n use rustc_interface::interface;\n@@ -60,11 +60,11 @@ pub(crate) struct DocContext<'tcx> {\n     pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n-    pub(crate) active_extern_traits: FxHashSet<DefId>,\n+    pub(crate) active_extern_traits: DefIdSet,\n     // The current set of parameter substitutions,\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n-    pub(crate) substs: FxHashMap<DefId, clean::SubstParam>,\n+    pub(crate) substs: DefIdMap<clean::SubstParam>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     pub(crate) impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -108,11 +108,7 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    pub(crate) fn enter_alias<F, R>(\n-        &mut self,\n-        substs: FxHashMap<DefId, clean::SubstParam>,\n-        f: F,\n-    ) -> R\n+    pub(crate) fn enter_alias<F, R>(&mut self, substs: DefIdMap<clean::SubstParam>, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {"}, {"sha": "24752cddb337ceeade25dcacdde3e9370d2af23e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -1,7 +1,7 @@\n use std::mem;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n \n@@ -33,7 +33,7 @@ pub(crate) struct Cache {\n     ///\n     /// The values of the map are a list of implementations and documentation\n     /// found on that implementation.\n-    pub(crate) impls: FxHashMap<DefId, Vec<Impl>>,\n+    pub(crate) impls: DefIdMap<Vec<Impl>>,\n \n     /// Maintains a mapping of local crate `DefId`s to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n@@ -56,7 +56,7 @@ pub(crate) struct Cache {\n     /// to the path used if the corresponding type is inlined. By\n     /// doing this, we can detect duplicate impls on a trait page, and only display\n     /// the impl for the inlined type.\n-    pub(crate) exact_paths: FxHashMap<DefId, Vec<Symbol>>,\n+    pub(crate) exact_paths: DefIdMap<Vec<Symbol>>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n@@ -127,7 +127,7 @@ pub(crate) struct Cache {\n struct CacheBuilder<'a, 'tcx> {\n     cache: &'a mut Cache,\n     /// This field is used to prevent duplicated impl blocks.\n-    impl_ids: FxHashMap<DefId, FxHashSet<DefId>>,\n+    impl_ids: DefIdMap<DefIdSet>,\n     tcx: TyCtxt<'tcx>,\n }\n \n@@ -173,7 +173,7 @@ impl Cache {\n \n         let (krate, mut impl_ids) = {\n             let mut cache_builder =\n-                CacheBuilder { tcx, cache: &mut cx.cache, impl_ids: FxHashMap::default() };\n+                CacheBuilder { tcx, cache: &mut cx.cache, impl_ids: Default::default() };\n             krate = cache_builder.fold_crate(krate);\n             (krate, cache_builder.impl_ids)\n         };"}, {"sha": "15258a467a228106abf2a18d728c066681b2bc6a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -6,7 +6,7 @@ use std::rc::Rc;\n use std::sync::mpsc::{channel, Receiver};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefIdMap, LOCAL_CRATE};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -56,7 +56,7 @@ pub(crate) struct Context<'tcx> {\n     pub(super) render_redirect_pages: bool,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n     /// body and the sidebar.\n-    pub(super) deref_id_map: FxHashMap<DefId, String>,\n+    pub(super) deref_id_map: DefIdMap<String>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     pub(super) id_map: IdMap,\n     /// Shared mutable state.\n@@ -544,7 +544,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             dst,\n             render_redirect_pages: false,\n             id_map,\n-            deref_id_map: FxHashMap::default(),\n+            deref_id_map: Default::default(),\n             shared: Rc::new(scx),\n             include_sources,\n             types_with_notable_traits: FxHashSet::default(),\n@@ -572,7 +572,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            deref_id_map: FxHashMap::default(),\n+            deref_id_map: Default::default(),\n             id_map: IdMap::new(),\n             shared: Rc::clone(&self.shared),\n             include_sources: self.include_sources,"}, {"sha": "d644293d3ef12c0174da5c7f83fb499ab8373983", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -50,7 +50,7 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::CtorKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n@@ -1115,7 +1115,7 @@ fn render_assoc_items(\n     it: DefId,\n     what: AssocItemRender<'_>,\n ) {\n-    let mut derefs = FxHashSet::default();\n+    let mut derefs = DefIdSet::default();\n     derefs.insert(it);\n     render_assoc_items_inner(w, cx, containing_item, it, what, &mut derefs)\n }\n@@ -1126,7 +1126,7 @@ fn render_assoc_items_inner(\n     containing_item: &clean::Item,\n     it: DefId,\n     what: AssocItemRender<'_>,\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n ) {\n     info!(\"Documenting associated items of {:?}\", containing_item.name);\n     let shared = Rc::clone(&cx.shared);\n@@ -1215,7 +1215,7 @@ fn render_deref_methods(\n     impl_: &Impl,\n     container_item: &clean::Item,\n     deref_mut: bool,\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n ) {\n     let cache = cx.cache();\n     let deref_type = impl_.inner_impl().trait_.as_ref().unwrap();\n@@ -2175,7 +2175,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             if let Some(impl_) =\n                 v.iter().find(|i| i.trait_did() == cx.tcx().lang_items().deref_trait())\n             {\n-                let mut derefs = FxHashSet::default();\n+                let mut derefs = DefIdSet::default();\n                 derefs.insert(did);\n                 sidebar_deref_methods(cx, out, impl_, v, &mut derefs, &mut used_links);\n             }\n@@ -2195,7 +2195,7 @@ fn sidebar_deref_methods(\n     out: &mut Buffer,\n     impl_: &Impl,\n     v: &[Impl],\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n     used_links: &mut FxHashSet<String>,\n ) {\n     let c = cx.cache();"}, {"sha": "982370aa21c43b2ef4960f73714b2993710e2748", "filename": "src/librustdoc/json/import_finder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -1,5 +1,4 @@\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::DefIdSet;\n \n use crate::{\n     clean::{self, Import, ImportSource, Item},\n@@ -14,14 +13,15 @@ use crate::{\n /// See [#100973](https://github.com/rust-lang/rust/issues/100973) and\n /// [#101103](https://github.com/rust-lang/rust/issues/101103) for times when\n /// this information is needed.\n-pub(crate) fn get_imports(krate: clean::Crate) -> (clean::Crate, FxHashSet<DefId>) {\n-    let mut finder = ImportFinder { imported: FxHashSet::default() };\n+pub(crate) fn get_imports(krate: clean::Crate) -> (clean::Crate, DefIdSet) {\n+    let mut finder = ImportFinder::default();\n     let krate = finder.fold_crate(krate);\n     (krate, finder.imported)\n }\n \n+#[derive(Default)]\n struct ImportFinder {\n-    imported: FxHashSet<DefId>,\n+    imported: DefIdSet,\n }\n \n impl DocFolder for ImportFinder {"}, {"sha": "5adc0d2a40e41bf2944e0aa079c169decf4fb253", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -13,8 +13,8 @@ use std::io::{BufWriter, Write};\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::def_id::LOCAL_CRATE;\n@@ -40,7 +40,7 @@ pub(crate) struct JsonRenderer<'tcx> {\n     /// The directory where the blob will be written to.\n     out_path: PathBuf,\n     cache: Rc<Cache>,\n-    imported_items: FxHashSet<DefId>,\n+    imported_items: DefIdSet,\n }\n \n impl<'tcx> JsonRenderer<'tcx> {"}, {"sha": "7d15a207d06524b06bf3415f3621d60f6d647113", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -7,8 +7,8 @@ use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::visit::DocVisitor;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_span::symbol::sym;\n \n@@ -126,14 +126,14 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n     });\n \n     let mut cleaner = BadImplStripper { prims, items: crate_items, cache: &cx.cache };\n-    let mut type_did_to_deref_target: FxHashMap<DefId, &Type> = FxHashMap::default();\n+    let mut type_did_to_deref_target: DefIdMap<&Type> = DefIdMap::default();\n \n     // Follow all `Deref` targets of included items and recursively add them as valid\n     fn add_deref_target(\n         cx: &DocContext<'_>,\n-        map: &FxHashMap<DefId, &Type>,\n+        map: &DefIdMap<&Type>,\n         cleaner: &mut BadImplStripper<'_>,\n-        targets: &mut FxHashSet<DefId>,\n+        targets: &mut DefIdSet,\n         type_did: DefId,\n     ) {\n         if let Some(target) = map.get(&type_did) {\n@@ -177,7 +177,7 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n                         // `Deref` target type and the impl for type positions, this map of types is keyed by\n                         // `DefId` and for convenience uses a special cleaner that accepts `DefId`s directly.\n                         if cleaner.keep_impl_with_def_id(for_did.into()) {\n-                            let mut targets = FxHashSet::default();\n+                            let mut targets = DefIdSet::default();\n                             targets.insert(for_did);\n                             add_deref_target(\n                                 cx,"}, {"sha": "00ea6ca4152c8ee460c09434fa3350911b7f950a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -1,12 +1,11 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::Node;\n-use rustc_hir::CRATE_HIR_ID;\n+use rustc_hir::def_id::{DefId, DefIdMap};\n+use rustc_hir::{HirIdSet, Node, CRATE_HIR_ID};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -62,24 +61,24 @@ pub(crate) fn inherits_doc_hidden(tcx: TyCtxt<'_>, mut node: hir::HirId) -> bool\n \n pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     cx: &'a mut core::DocContext<'tcx>,\n-    view_item_stack: FxHashSet<hir::HirId>,\n+    view_item_stack: HirIdSet,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n-    exact_paths: FxHashMap<DefId, Vec<Symbol>>,\n+    exact_paths: DefIdMap<Vec<Symbol>>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub(crate) fn new(cx: &'a mut core::DocContext<'tcx>) -> RustdocVisitor<'a, 'tcx> {\n         // If the root is re-exported, terminate all recursion.\n-        let mut stack = FxHashSet::default();\n+        let mut stack = HirIdSet::default();\n         stack.insert(hir::CRATE_HIR_ID);\n         RustdocVisitor {\n             cx,\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n-            exact_paths: FxHashMap::default(),\n+            exact_paths: Default::default(),\n         }\n     }\n "}, {"sha": "fd4f9254107caee8baa3b9837b7260f115a1737b", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68803926e0f32b74c30ecb40a4a1c5e9221bb18b/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=68803926e0f32b74c30ecb40a4a1c5e9221bb18b", "patch": "@@ -1,14 +1,13 @@\n use crate::core::DocContext;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::ty::TyCtxt;\n \n // FIXME: this may not be exhaustive, but is sufficient for rustdocs current uses\n \n #[derive(Default)]\n pub(crate) struct RustdocEffectiveVisibilities {\n-    extern_public: FxHashSet<DefId>,\n+    extern_public: DefIdSet,\n }\n \n macro_rules! define_method {\n@@ -43,9 +42,9 @@ pub(crate) fn lib_embargo_visit_item(cx: &mut DocContext<'_>, def_id: DefId) {\n struct LibEmbargoVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     // Effective visibilities for reachable nodes\n-    extern_public: &'a mut FxHashSet<DefId>,\n+    extern_public: &'a mut DefIdSet,\n     // Keeps track of already visited modules, in case a module re-exports its parent\n-    visited_mods: FxHashSet<DefId>,\n+    visited_mods: DefIdSet,\n }\n \n impl LibEmbargoVisitor<'_, '_> {"}]}