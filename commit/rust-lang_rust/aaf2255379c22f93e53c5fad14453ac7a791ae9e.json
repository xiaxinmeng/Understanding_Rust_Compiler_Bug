{"sha": "aaf2255379c22f93e53c5fad14453ac7a791ae9e", "node_id": "C_kwDOAAsO6NoAKGFhZjIyNTUzNzljMjJmOTNlNTNjNWZhZDE0NDUzYWM3YTc5MWFlOWU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-16T02:34:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-16T02:34:35Z"}, "message": "Rollup merge of #94974 - c410-f3r:let-chain-dashufwrqwemkf-let-else, r=joshtriplett\n\nEnsure that `let_else` does not interact with `let_chains`\n\nAs requested on https://github.com/rust-lang/rust/pull/94927.\n\ncc `@joshtriplett` `@estebank`", "tree": {"sha": "54a6a9c71193e87ad3ccaf056d231d88a8084fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a6a9c71193e87ad3ccaf056d231d88a8084fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf2255379c22f93e53c5fad14453ac7a791ae9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMUy8CRBK7hj4Ov3rIwAABmAIAG+ImLv7NuJZqwhogMA00ULZ\nrZK5FnDEUunBAylRPL3EZICQg1ztl0y5lbnnJ8B6HSEEHfY+vDlo+4JR2X8z98Bw\nInjw39b34Fwf1ty7G85BjjJiqW+dY+pKYjheVzQArkVA1INFKAhUTAstDOSQG7X4\naV6p/Vd4o6WyS7Fr+RoaG5uK2NCGOyewcsi6ZzHLHbfyq8yWVPV0XEl8UhaPovDp\nFP/P6hCE0N+zNxAQmx1ClP2RNgGB6ODnYXIFJWqQGidqqi0saWs2mZ0nvaKwLFxK\nkubmYt4cY8C9k6+Pf5s+FOgDvf50tl1hlZ/dCJU5uY+wUco0sqRtc4xWIhYaiwM=\n=zJs6\n-----END PGP SIGNATURE-----\n", "payload": "tree 54a6a9c71193e87ad3ccaf056d231d88a8084fc9\nparent 0732ea2f3ed277283972da124d070ba6d4d19d10\nparent 261d5fc95bf1ad5ec45e464492f7d6583d0af80f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647398075 +0100\ncommitter GitHub <noreply@github.com> 1647398075 +0100\n\nRollup merge of #94974 - c410-f3r:let-chain-dashufwrqwemkf-let-else, r=joshtriplett\n\nEnsure that `let_else` does not interact with `let_chains`\n\nAs requested on https://github.com/rust-lang/rust/pull/94927.\n\ncc `@joshtriplett` `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf2255379c22f93e53c5fad14453ac7a791ae9e", "html_url": "https://github.com/rust-lang/rust/commit/aaf2255379c22f93e53c5fad14453ac7a791ae9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf2255379c22f93e53c5fad14453ac7a791ae9e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0732ea2f3ed277283972da124d070ba6d4d19d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/0732ea2f3ed277283972da124d070ba6d4d19d10", "html_url": "https://github.com/rust-lang/rust/commit/0732ea2f3ed277283972da124d070ba6d4d19d10"}, {"sha": "261d5fc95bf1ad5ec45e464492f7d6583d0af80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/261d5fc95bf1ad5ec45e464492f7d6583d0af80f", "html_url": "https://github.com/rust-lang/rust/commit/261d5fc95bf1ad5ec45e464492f7d6583d0af80f"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "e24649ea044f549b70d6be1fa6baced6679010ba", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/aaf2255379c22f93e53c5fad14453ac7a791ae9e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf2255379c22f93e53c5fad14453ac7a791ae9e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=aaf2255379c22f93e53c5fad14453ac7a791ae9e", "patch": "@@ -0,0 +1,54 @@\n+#![feature(let_chains, let_else)]\n+\n+fn main() {\n+    let opt = Some(1i32);\n+\n+    let Some(n) = opt else {\n+        return;\n+    };\n+    let Some(n) = opt && n == 1 else {\n+    //~^ ERROR a `&&` expression cannot be directly assigned in `let...else`\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+        return;\n+    };\n+    let Some(n) = opt && let another = n else {\n+    //~^ ERROR a `&&` expression cannot be directly assigned in `let...else`\n+    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+        return;\n+    };\n+\n+    if let Some(n) = opt else {\n+    //~^ ERROR missing condition for `if` expression\n+        return;\n+    };\n+    if let Some(n) = opt && n == 1 else {\n+    //~^ ERROR missing condition for `if` expression\n+        return;\n+    };\n+    if let Some(n) = opt && let another = n else {\n+    //~^ ERROR missing condition for `if` expression\n+        return;\n+    };\n+\n+    {\n+        while let Some(n) = opt else {\n+        //~^ ERROR expected `{`, found keyword `else`\n+            return;\n+        };\n+    }\n+    {\n+        while let Some(n) = opt && n == 1 else {\n+        //~^ ERROR expected `{`, found keyword `else`\n+            return;\n+        };\n+    }\n+    {\n+        while let Some(n) = opt && let another = n else {\n+        //~^ ERROR expected `{`, found keyword `else`\n+            return;\n+        };\n+    }\n+}"}, {"sha": "992c34eb402d8e9742f843715edc140a0b4d0c86", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/aaf2255379c22f93e53c5fad14453ac7a791ae9e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf2255379c22f93e53c5fad14453ac7a791ae9e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=aaf2255379c22f93e53c5fad14453ac7a791ae9e", "patch": "@@ -0,0 +1,119 @@\n+error: a `&&` expression cannot be directly assigned in `let...else`\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19\n+   |\n+LL |     let Some(n) = opt && n == 1 else {\n+   |                   ^^^^^^^^^^^^^\n+   |\n+help: wrap the expression in parentheses\n+   |\n+LL |     let Some(n) = (opt && n == 1) else {\n+   |                   +             +\n+\n+error: a `&&` expression cannot be directly assigned in `let...else`\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: wrap the expression in parentheses\n+   |\n+LL |     let Some(n) = (opt && let another = n) else {\n+   |                   +                      +\n+\n+error: missing condition for `if` expression\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:23:7\n+   |\n+LL |     if let Some(n) = opt else {\n+   |       ^ expected if condition here\n+\n+error: missing condition for `if` expression\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:27:7\n+   |\n+LL |     if let Some(n) = opt && n == 1 else {\n+   |       ^ expected if condition here\n+\n+error: missing condition for `if` expression\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:31:7\n+   |\n+LL |     if let Some(n) = opt && let another = n else {\n+   |       ^ expected if condition here\n+\n+error: expected `{`, found keyword `else`\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:37:33\n+   |\n+LL |         while let Some(n) = opt else {\n+   |         ----- ----------------- ^^^^ expected `{`\n+   |         |     |\n+   |         |     this `while` condition successfully parsed\n+   |         while parsing the body of this `while` expression\n+\n+error: expected `{`, found keyword `else`\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:43:43\n+   |\n+LL |         while let Some(n) = opt && n == 1 else {\n+   |         ----- --------------------------- ^^^^ expected `{`\n+   |         |     |\n+   |         |     this `while` condition successfully parsed\n+   |         while parsing the body of this `while` expression\n+\n+error: expected `{`, found keyword `else`\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:49:52\n+   |\n+LL |         while let Some(n) = opt && let another = n else {\n+   |         ----- ------------------------------------ ^^^^ expected `{`\n+   |         |     |\n+   |         |     this `while` condition successfully parsed\n+   |         while parsing the body of this `while` expression\n+\n+error: `let` expressions are not supported here\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:26\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |                          ^^^^^^^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+   = note: as well as when nested within `&&` and parentheses in those conditions\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19\n+   |\n+LL |     let Some(n) = opt && n == 1 else {\n+   |                   ^^^ expected `bool`, found enum `Option`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<i32>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:9\n+   |\n+LL |     let Some(n) = opt && n == 1 else {\n+   |         ^^^^^^^   ------------- this expression has type `bool`\n+   |         |\n+   |         expected `bool`, found enum `Option`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<_>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |                   ^^^ expected `bool`, found enum `Option`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<i32>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:9\n+   |\n+LL |     let Some(n) = opt && let another = n else {\n+   |         ^^^^^^^   ---------------------- this expression has type `bool`\n+   |         |\n+   |         expected `bool`, found enum `Option`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<_>`\n+\n+error: aborting due to 13 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}