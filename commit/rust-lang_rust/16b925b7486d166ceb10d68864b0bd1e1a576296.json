{"sha": "16b925b7486d166ceb10d68864b0bd1e1a576296", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YjkyNWI3NDg2ZDE2NmNlYjEwZDY4ODY0YjBiZDFlMWE1NzYyOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-10T21:05:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-10T21:05:46Z"}, "message": "Auto merge of #5299 - JohnTitor:contrib, r=flip1995\n\nClean-up docs\n\nFixes #5268\n\nchangelog: none", "tree": {"sha": "a74dfe3f63dca90a5e75973232f8f2dfd99c4f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74dfe3f63dca90a5e75973232f8f2dfd99c4f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b925b7486d166ceb10d68864b0bd1e1a576296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b925b7486d166ceb10d68864b0bd1e1a576296", "html_url": "https://github.com/rust-lang/rust/commit/16b925b7486d166ceb10d68864b0bd1e1a576296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b925b7486d166ceb10d68864b0bd1e1a576296/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557f6848bd5b7183f55c1e1522a326e9e1df6030", "url": "https://api.github.com/repos/rust-lang/rust/commits/557f6848bd5b7183f55c1e1522a326e9e1df6030", "html_url": "https://github.com/rust-lang/rust/commit/557f6848bd5b7183f55c1e1522a326e9e1df6030"}, {"sha": "0de71b0e3acaed1042fb173262916644111463c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de71b0e3acaed1042fb173262916644111463c5", "html_url": "https://github.com/rust-lang/rust/commit/0de71b0e3acaed1042fb173262916644111463c5"}], "stats": {"total": 297, "additions": 152, "deletions": 145}, "files": [{"sha": "b52266ac4f1b86fa45a1ddea322a8a742a7e73a4", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 74, "deletions": 77, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/16b925b7486d166ceb10d68864b0bd1e1a576296/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/16b925b7486d166ceb10d68864b0bd1e1a576296/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=16b925b7486d166ceb10d68864b0bd1e1a576296", "patch": "@@ -8,10 +8,9 @@ something. We appreciate any sort of contributions, and don't want a wall of rul\n \n Clippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document\n explains how you can contribute and how to get started.  If you have any questions about contributing or need help with\n-anything, feel free to ask questions on issues or visit the `#clippy` IRC channel on `irc.mozilla.org` or meet us in\n-`#clippy` on [Discord](https://discord.gg/rust-lang).\n+anything, feel free to ask questions on issues or visit the `#clippy` on [Discord].\n \n-All contributors are expected to follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n+All contributors are expected to follow the [Rust Code of Conduct].\n \n * [Getting started](#getting-started)\n   * [Finding something to fix/improve](#finding-something-to-fiximprove)\n@@ -22,6 +21,9 @@ All contributors are expected to follow the [Rust Code of Conduct](http://www.ru\n * [Bors and Homu](#bors-and-homu)\n * [Contributions](#contributions)\n \n+[Discord]: https://discord.gg/rust-lang\n+[Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n+\n ## Getting started\n \n High level approach:\n@@ -36,57 +38,61 @@ High level approach:\n \n All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n \n-Some issues are easier than others. The [`good first issue`](https://github.com/rust-lang/rust-clippy/labels/good%20first%20issue)\n-label can be used to find the easy issues. If you want to work on an issue, please leave a comment\n-so that we can assign it to you!\n+Some issues are easier than others. The [`good first issue`] label can be used to find the easy issues.\n+If you want to work on an issue, please leave a comment so that we can assign it to you!\n \n-There are also some abandoned PRs, marked with\n-[`S-inactive-closed`](https://github.com/rust-lang/rust-clippy/pulls?q=is%3Aclosed+label%3AS-inactive-closed).\n+There are also some abandoned PRs, marked with [`S-inactive-closed`].\n Pretty often these PRs are nearly completed and just need some extra steps\n (formatting, addressing review comments, ...) to be merged. If you want to\n complete such a PR, please leave a comment in the PR and open a new one based\n on it.\n \n-Issues marked [`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) involve simple\n-matching of the syntax tree structure, and are generally easier than\n-[`T-middle`](https://github.com/rust-lang/rust-clippy/labels/T-middle) issues, which involve types\n+Issues marked [`T-AST`] involve simple matching of the syntax tree structure,\n+and are generally easier than [`T-middle`] issues, which involve types\n and resolved paths.\n \n-[`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) issues will generally need you to match against a\n-predefined syntax structure. To figure out how this syntax structure is encoded in the AST, it is recommended to run\n-`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST\n-docs](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast). Usually the lint will end up to be a nested series of\n-matches and ifs, [like\n-so](https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n+[`T-AST`] issues will generally need you to match against a predefined syntax structure.\n+To figure out how this syntax structure is encoded in the AST, it is recommended to run\n+`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST docs].\n+Usually the lint will end up to be a nested series of matches and ifs, [like so].\n \n-[`E-medium`](https://github.com/rust-lang/rust-clippy/labels/E-medium) issues are generally\n-pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n-as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n+[`E-medium`] issues are generally pretty easy too, though it's recommended you work on an E-easy issue first.\n+They are mostly classified as [`E-medium`], since they might be somewhat involved code wise,\n+but not difficult per-se.\n \n-[`T-middle`](https://github.com/rust-lang/rust-clippy/labels/T-middle) issues can\n-be more involved and require verifying types. The\n-[`ty`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty) module contains a\n+[`T-middle`] issues can be more involved and require verifying types. The [`ty`] module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n+[`good first issue`]: https://github.com/rust-lang/rust-clippy/labels/good%20first%20issue\n+[`S-inactive-closed`]: https://github.com/rust-lang/rust-clippy/pulls?q=is%3Aclosed+label%3AS-inactive-closed\n+[`T-AST`]: https://github.com/rust-lang/rust-clippy/labels/T-AST\n+[`T-middle`]: https://github.com/rust-lang/rust-clippy/labels/T-middle\n+[`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n+[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty\n+[nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n+[like so]: https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34\n+\n ## Writing code\n \n-Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on\n-lints](https://llogiq.github.io/2015/06/04/workflows.html) is also a nice primer to lint-writing, though it does get\n-into advanced stuff and may be a bit outdated.\n+Have a look at the [docs for writing lints][adding_lints] for more details. [Llogiq's blog post on lints]\n+is also a nice primer to lint-writing, though it does get into advanced stuff and may be a bit outdated.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n [lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n quick read.\n \n-## How Clippy works\n+[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[Llogiq's blog post on lints]: https://llogiq.github.io/2015/06/04/workflows.html\n+[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n+[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n+[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n \n-Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there,\n-the lint registration is delegated to the [`clippy_lints`][lint_crate] crate.\n+## How Clippy works\n \n-[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers them with the rustc\n-plugin registry. For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n+[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers in the [`LintStore`].\n+For example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n \n ```rust\n // ./clippy_lints/src/lib.rs\n@@ -95,25 +101,24 @@ plugin registry. For example, the [`else_if_without_else`][else_if_without_else]\n pub mod else_if_without_else;\n // ...\n \n-pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry) {\n+pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     // ...\n-    reg.register_early_lint_pass(box else_if_without_else::ElseIfWithoutElse);\n+    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n     // ...\n \n-    reg.register_lint_group(\"clippy::restriction\", vec![\n+    store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         // ...\n-        else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         // ...\n     ]);\n }\n ```\n \n-The [`plugin::PluginRegistry`][plugin_registry] provides two methods to register lints:\n-[register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].  Both take an object\n+The [`rustc_lint::LintStore`][`LintStore`] provides two methods to register lints:\n+[register_early_pass][reg_early_pass] and [register_late_pass][reg_late_pass]. Both take an object\n that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in\n every single lint. It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev\n-update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to\n-save you some time.\n+update_lints`. When you are writing your own lint, you can use that script to save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs\n@@ -135,8 +140,16 @@ The difference between `EarlyLintPass` and `LateLintPass` is that the methods of\n AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information\n via the `LateContext` parameter.\n \n-That's why the `else_if_without_else` example uses the `register_early_lint_pass` function. Because the [actual lint\n-logic][else_if_without_else] does not depend on any type information.\n+That's why the `else_if_without_else` example uses the `register_early_pass` function. Because the\n+[actual lint logic][else_if_without_else] does not depend on any type information.\n+\n+[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n+[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/4253aa7137cb7378acc96133c787e49a345c2b3c/clippy_lints/src/else_if_without_else.rs\n+[`LintStore`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html\n+[reg_early_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_early_pass\n+[reg_late_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_late_pass\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n \n ## Fixing build failures caused by Rust\n \n@@ -145,8 +158,9 @@ the times we have to adapt to the changes and only very rarely there's an actual\n caused by Rust updates, can be a good way to learn about Rust internals.\n \n In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit\n-history][toolstate_commit_history].  You will then have to look for the last commit that contains `test-pass ->\n-build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component. [Here][toolstate_commit] is an example.\n+history][toolstate_commit_history]. You will then have to look for the last commit that contains\n+`test-pass -> build-fail` or `test-pass -> test-fail` for the `clippy-driver` component.\n+[Here][toolstate_commit] is an example.\n \n The commit message contains a link to the PR. The PRs are usually small enough to discover the breaking API change and\n if they are bigger, they likely include some discussion that may help you to fix Clippy.\n@@ -158,14 +172,8 @@ If you decide to make Clippy work again with a Rust commit that breaks it,\n you probably want to install the latest Rust from master locally and run Clippy\n using that version of Rust.\n \n-You can use [rustup-toolchain-install-master][rtim] to do that:\n-\n-```bash\n-cargo install rustup-toolchain-install-master\n-rustup-toolchain-install-master --force -n master -c rustc-dev\n-rustup override set master\n-cargo test\n-```\n+You can set up the master toolchain by running `./setup-toolchain.sh`. That script will install\n+[rustup-toolchain-install-master][rtim] and master toolchain, then run `rustup override set master`.\n \n After fixing the build failure on this repository, we can submit a pull request\n to [`rust-lang/rust`] to fix the toolstate.\n@@ -182,6 +190,12 @@ git commit -m \"Update Clippy\"\n # Open a PR in rust-lang/rust\n ```\n \n+[rustup_component_history]: https://rust-lang.github.io/rustup-components-history\n+[toolstate_commit_history]: https://github.com/rust-lang-nursery/rust-toolstate/commits/master\n+[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/aad74d8294e198a7cf8ac81a91aebb7f3bbcf727\n+[rtim]: https://github.com/kennytm/rustup-toolchain-install-master\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust\n+\n ## Issue and PR triage\n \n Clippy is following the [Rust triage procedure][triage] for issues and pull\n@@ -206,39 +220,22 @@ You can find the Clippy bors queue [here][homu_queue].\n If you have @bors permissions, you can find an overview of the available\n commands [here][homu_instructions].\n \n+[triage]: https://forge.rust-lang.org/triage-procedure.html\n+[l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n+[l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n+[homu]: https://github.com/rust-lang/homu\n+[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n+[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n \n ## Contributions\n \n Contributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\n be reviewed by a core contributor (someone with permission to land patches) and either landed in the\n main tree or given feedback for changes that would be required.\n \n-All code in this repository is under the [Apache-2.0](http://www.apache.org/licenses/LICENSE-2.0>)\n-or the [MIT](http://opensource.org/licenses/MIT) license.\n+All code in this repository is under the [Apache-2.0] or the [MIT] license.\n \n <!-- adapted from https://github.com/servo/servo/blob/master/CONTRIBUTING.md -->\n \n-[main_entry]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/src/lib.rs#L14\n-[lint_crate]: https://github.com/rust-lang/rust-clippy/tree/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src\n-[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/lib.rs\n-[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429/clippy_lints/src/else_if_without_else.rs\n-[compiler_plugin]: https://doc.rust-lang.org/unstable-book/language-features/plugin.html#lint-plugins\n-[plugin_registry]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html\n-[reg_early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html#method.register_early_lint_pass\n-[reg_late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_plugin_impl/registry/struct.Registry.html#method.register_late_lint_pass\n-[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n-[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html\n-[toolstate_commit_history]: https://github.com/rust-lang-nursery/rust-toolstate/commits/master\n-[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/6ce0459f6bfa7c528ae1886492a3e0b5ef0ee547\n-[rtim]: https://github.com/kennytm/rustup-toolchain-install-master\n-[rustup_component_history]: https://mexus.github.io/rustup-components-history\n-[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n-[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n-[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n-[triage]: https://forge.rust-lang.org/triage-procedure.html\n-[l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n-[l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n-[homu]: https://github.com/servo/homu\n-[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n-[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n-[`rust-lang/rust`]: https://github.com/rust-lang/rust\n+[Apache-2.0]: https://www.apache.org/licenses/LICENSE-2.0\n+[MIT]: https://opensource.org/licenses/MIT"}, {"sha": "1d78a27820a677d07fb421a0ae6dd4965e1f2fbd", "filename": "doc/adding_lints.md", "status": "modified", "additions": 78, "deletions": 68, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/16b925b7486d166ceb10d68864b0bd1e1a576296/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/16b925b7486d166ceb10d68864b0bd1e1a576296/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=16b925b7486d166ceb10d68864b0bd1e1a576296", "patch": "@@ -1,4 +1,4 @@\n-## Adding a new lint\n+# Adding a new lint\n \n You are probably here because you want to add a new lint to Clippy. If this is\n the first time you're contributing to Clippy, this document guides you through\n@@ -25,14 +25,14 @@ because that's clearly a non-descriptive name.\n   - [PR Checklist](#pr-checklist)\n   - [Cheatsheet](#cheatsheet)\n \n-### Setup\n+## Setup\n \n When working on Clippy, you will need the current git master version of rustc,\n which can change rapidly. Make sure you're working near rust-clippy's master,\n and use the `setup-toolchain.sh` script to configure the appropriate toolchain\n for the Clippy directory.\n \n-### Getting Started\n+## Getting Started\n \n There is a bit of boilerplate code that needs to be set up when creating a new\n lint. Fortunately, you can use the clippy dev tools to handle this for you. We\n@@ -45,7 +45,7 @@ two files: `tests/ui/foo_functions.rs` and `clippy_lints/src/foo_functions.rs`,\n as well as run `cargo dev update_lints` to register the new lint. Next, we'll\n open up these files and add our lint!\n \n-### Testing\n+## Testing\n \n Let's write some tests first that we can execute while we iterate on our lint.\n \n@@ -88,12 +88,10 @@ fn main() {\n     let a = A;\n     a.foo();\n }\n-\n ```\n \n-Now we can run the test with `TESTNAME=foo_functions cargo uitest`.\n-Currently this test will fail. If you go through the output you will see that we\n-are told that `clippy::foo_functions` is an unknown lint, which is expected.\n+Now we can run the test with `TESTNAME=foo_functions cargo uitest`,\n+currently this test is meaningless though.\n \n While we are working on implementing our lint, we can keep running the UI\n test. That allows us to check if the output is turning into what we want.\n@@ -105,24 +103,26 @@ every time before running `tests/ui/update-all-references.sh`.\n Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n our lint, we need to commit the generated `.stderr` files, too.\n \n-### Rustfix tests\n+## Rustfix tests\n \n If the lint you are working on is making use of structured suggestions, the\n test file should include a `// run-rustfix` comment at the top. This will\n-additionally run [rustfix](https://github.com/rust-lang-nursery/rustfix) for\n-that test. Rustfix will apply the suggestions from the lint to the code of the\n-test file and compare that to the contents of a `.fixed` file.\n+additionally run [rustfix] for that test. Rustfix will apply the suggestions\n+from the lint to the code of the test file and compare that to the contents of\n+a `.fixed` file.\n \n Use `tests/ui/update-all-references.sh` to automatically generate the\n `.fixed` file after running the tests.\n \n-### Edition 2018 tests\n+[rustfix]: https://github.com/rust-lang/rustfix\n+\n+## Edition 2018 tests\n \n Some features require the 2018 edition to work (e.g. `async_await`), but\n compile-test tests run on the 2015 edition by default. To change this behavior\n-add `// compile-flags: --edition 2018` at the top of the test file.\n+add `// edition:2018` at the top of the test file (note that it's space-sensitive).\n \n-### Testing manually\n+## Testing manually\n \n Manually testing against an example file can be useful if you have added some\n `println!`s and the test suite output becomes unreadable. To try Clippy with\n@@ -131,7 +131,7 @@ clippy-driver -- -L ./target/debug input.rs` from the working copy root.\n \n With tests in place, let's have a look at implementing our lint now.\n \n-### Lint declaration\n+## Lint declaration\n \n Let's start by opening the new file created in the `clippy_lints` crate\n at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n@@ -140,7 +140,7 @@ lint code is. This file has already imported some initial things we will need:\n ```rust\n use rustc_lint::{EarlyLintPass, EarlyContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use syntax::ast::*;\n+use rustc_ast::ast::*;\n ```\n \n The next step is to update the lint declaration. Lints are declared using the\n@@ -167,12 +167,12 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-  section. This is the default documentation style and will be displayed at\n-  https://rust-lang.github.io/rust-clippy/master/index.html.\n-* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n-  guidelines][lint_naming] here when naming your lint. In short, the name should\n-  state the thing that is being checked for and read well when used with\n-  `allow`/`warn`/`deny`.\n+  section. This is the default documentation style and will be displayed\n+  [like this][example_lint_page].\n+* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the\n+  [lint naming guidelines][lint_naming] here when naming your lint.\n+  In short, the name should state the thing that is being checked for and\n+  read well when used with `allow`/`warn`/`deny`.\n * `pedantic` sets the lint level to `Allow`.\n   The exact mapping can be found [here][category_level_mapping]\n * The last part should be a text that explains what exactly is wrong with the\n@@ -199,14 +199,15 @@ automate everything. We will have to register our lint pass manually in the\n `register_plugins` function in `clippy_lints/src/lib.rs`:\n \n ```rust\n-store.register_early_pass(box foo_functions::FooFunctions);\n+store.register_early_pass(|| box foo_functions::FooFunctions);\n ```\n \n-This should fix the `unknown clippy lint: clippy::foo_functions` error that we\n-saw when we executed our tests the first time. The next decision we have to make\n-is which lint pass our lint is going to need.\n+[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L60\n+[example_lint_page]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n+[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n+[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/lib.rs#L110\n \n-### Lint passes\n+## Lint passes\n \n Writing a lint that only checks for the name of a function means that we only\n have to deal with the AST and don't have to deal with the type system at all.\n@@ -224,7 +225,10 @@ Since we don't need type information for checking the function name, we used\n `--pass=early` when running the new lint automation and all the imports were\n added accordingly.\n \n-### Emitting a lint\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n+\n+## Emitting a lint\n \n With UI tests and the lint declaration in place, we can start working on the\n implementation of the lint logic.\n@@ -233,7 +237,7 @@ Let's start by implementing the `EarlyLintPass` for our `FooFunctions`:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         // TODO: Emit lint here\n     }\n }\n@@ -255,7 +259,7 @@ automatically. This is how it looks:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         span_lint_and_help(\n             cx,\n             FOO_FUNCTIONS,\n@@ -269,20 +273,23 @@ impl EarlyLintPass for FooFunctions {\n \n Running our UI test should now produce output that contains the lint message.\n \n-### Adding the lint logic\n+[check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n+[diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/diagnostics.rs\n+\n+## Adding the lint logic\n \n Writing the logic for your lint will most likely be different from our example,\n so this section is kept rather short.\n \n Using the [`check_fn`][check_fn] method gives us access to [`FnKind`][fn_kind]\n-that has two relevant variants for us `FnKind::ItemFn` and `FnKind::Method`.\n-Both provide access to the name of the function/method via an [`Ident`][ident].\n+that has the [`FnKind::Fn`] variant. It provides access to the name of the\n+function/method via an [`Ident`][ident].\n \n With that we can expand our `check_fn` method to:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         if is_foo_fn(fn_kind) {\n             span_lint_and_help(\n                 cx,\n@@ -307,9 +314,11 @@ In our example, `is_foo_fn` looks like:\n \n fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n     match fn_kind {\n-        FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) => {\n-            ident.name == \"foo\"\n-        },\n+        FnKind::Fn(_, ident, ..) => {\n+            // check if `fn` name is `foo`\n+            ident.name.as_str() == \"foo\"\n+        }\n+        // ignore closures\n         FnKind::Closure(..) => false\n     }\n }\n@@ -325,13 +334,18 @@ implementation is not violating any Clippy lints itself.\n That should be it for the lint implementation. Running `cargo test` should now\n pass.\n \n-### Author lint\n+[fn_kind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/enum.FnKind.html\n+[`FnKind::Fn`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/visit/enum.FnKind.html#variant.Fn\n+[ident]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.Ident.html\n+\n+## Author lint\n \n If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-The quickest way to use it, is the [Rust playground: play.rust-lang.org][Play].\n+The quickest way to use it, is the\n+[Rust playground: play.rust-lang.org][author_example].\n Put the code you want to lint into the editor and add the `#[clippy::author]`\n attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n see the generated code in the output below.\n@@ -341,7 +355,9 @@ see the generated code in the output below.\n If the command was executed successfully, you can copy the code over to where\n you are implementing your lint.\n \n-### Documentation\n+[author_example]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=9a12cb60e5c6ad4e3003ac6d5e63cf55\n+\n+## Documentation\n \n The final thing before submitting our PR is to add some documentation to our\n lint declaration.\n@@ -374,11 +390,13 @@ declare_clippy_lint! {\n Once your lint is merged, this documentation will show up in the [lint\n list][lint_list].\n \n-### Running rustfmt\n+[lint_list]: https://rust-lang.github.io/rust-clippy/master/index.html\n+\n+## Running rustfmt\n \n-[Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust\n-code according to style guidelines. Your code has to be formatted by `rustfmt`\n-before a PR can be merged. Clippy uses nightly `rustfmt` in the CI.\n+[Rustfmt] is a tool for formatting Rust code according to style guidelines.\n+Your code has to be formatted by `rustfmt` before a PR can be merged.\n+Clippy uses nightly `rustfmt` in the CI.\n \n It can be installed via `rustup`:\n \n@@ -389,13 +407,17 @@ rustup component add rustfmt --toolchain=nightly\n Use `cargo dev fmt` to format the whole codebase. Make sure that `rustfmt` is\n installed for the nightly toolchain.\n \n-### Debugging\n+[Rustfmt]: https://github.com/rust-lang/rustfmt\n+\n+## Debugging\n \n-If you want to debug parts of your lint implementation, you can use the `dbg!`\n+If you want to debug parts of your lint implementation, you can use the [`dbg!`]\n macro anywhere in your code. Running the tests should then include the debug\n output in the `stdout` part.\n \n-### PR Checklist\n+[`dbg!`]: https://doc.rust-lang.org/std/macro.dbg.html\n+\n+## PR Checklist\n \n Before submitting your PR make sure you followed all of the basic requirements:\n \n@@ -408,7 +430,7 @@ Before submitting your PR make sure you followed all of the basic requirements:\n - [ ] Added lint documentation\n - [ ] Run `cargo dev fmt`\n \n-### Cheatsheet\n+## Cheatsheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n@@ -426,38 +448,26 @@ Here are some pointers to things you are likely going to need for every lint:\n For `EarlyLintPass` lints:\n \n * [`EarlyLintPass`][early_lint_pass]\n-* [`syntax::ast`][ast]\n+* [`rustc_ast::ast`][ast]\n \n For `LateLintPass` lints:\n \n * [`LateLintPass`][late_lint_pass]\n * [`Ty::TyKind`][ty]\n \n-\n While most of Clippy's lint utils are documented, most of rustc's internals lack\n documentation currently. This is unfortunate, but in most cases you can probably\n get away with copying things from existing similar lints. If you are stuck,\n-don't hesitate to ask on Discord, IRC or in the issue/PR.\n+don't hesitate to ask on [Discord] or in the issue/PR.\n \n-[lint_list]: https://rust-lang.github.io/rust-clippy/master/index.html\n-[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n-[category_level_mapping]: https://github.com/rust-lang/rust-clippy/blob/bd23cb89ec0ea63403a17d3fc5e50c88e38dd54f/clippy_lints/src/lib.rs#L43\n-[declare_clippy_lint]: https://github.com/rust-lang/rust-clippy/blob/a71acac1da7eaf667ab90a1d65d10e5cc4b80191/clippy_lints/src/lib.rs#L39\n-[check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html#method.check_fn\n-[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.EarlyLintPass.html\n-[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/trait.LateLintPass.html\n-[fn_kind]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/visit/enum.FnKind.html\n-[diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/diagnostics.rs\n [utils]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/mod.rs\n-[ident]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/source_map/symbol/struct.Ident.html\n-[span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html\n-[applicability]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/enum.Applicability.html\n [if_chain]: https://docs.rs/if_chain/*/if_chain/\n-[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n-[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n-[play]: https://play.rust-lang.org\n-[author_example]: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f093b986e80ad62f3b67a1f24f5e66e2\n+[span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html\n+[applicability]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/enum.Applicability.html\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n [nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n+[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html\n+[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n+[Discord]: https://discord.gg/rust-lang"}]}