{"sha": "087c2337c156af2f7e408145737b2415e66693da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2MyMzM3YzE1NmFmMmY3ZTQwODE0NTczN2IyNDE1ZTY2NjkzZGE=", "commit": {"author": {"name": "Shawn Walker-Salas", "email": "shawn.walker@oracle.com", "date": "2017-02-15T20:51:26Z"}, "committer": {"name": "Shawn Walker-Salas", "email": "shawn.walker@oracle.com", "date": "2017-02-15T20:51:26Z"}, "message": "use bash when invoking dist shell scripts on solaris\n\nPartially fixes #25845", "tree": {"sha": "71d59b21b693633639f83d65ccbd7077b5a16490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d59b21b693633639f83d65ccbd7077b5a16490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087c2337c156af2f7e408145737b2415e66693da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087c2337c156af2f7e408145737b2415e66693da", "html_url": "https://github.com/rust-lang/rust/commit/087c2337c156af2f7e408145737b2415e66693da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087c2337c156af2f7e408145737b2415e66693da/comments", "author": {"login": "binarycrusader", "id": 541114, "node_id": "MDQ6VXNlcjU0MTExNA==", "avatar_url": "https://avatars.githubusercontent.com/u/541114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/binarycrusader", "html_url": "https://github.com/binarycrusader", "followers_url": "https://api.github.com/users/binarycrusader/followers", "following_url": "https://api.github.com/users/binarycrusader/following{/other_user}", "gists_url": "https://api.github.com/users/binarycrusader/gists{/gist_id}", "starred_url": "https://api.github.com/users/binarycrusader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/binarycrusader/subscriptions", "organizations_url": "https://api.github.com/users/binarycrusader/orgs", "repos_url": "https://api.github.com/users/binarycrusader/repos", "events_url": "https://api.github.com/users/binarycrusader/events{/privacy}", "received_events_url": "https://api.github.com/users/binarycrusader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "binarycrusader", "id": 541114, "node_id": "MDQ6VXNlcjU0MTExNA==", "avatar_url": "https://avatars.githubusercontent.com/u/541114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/binarycrusader", "html_url": "https://github.com/binarycrusader", "followers_url": "https://api.github.com/users/binarycrusader/followers", "following_url": "https://api.github.com/users/binarycrusader/following{/other_user}", "gists_url": "https://api.github.com/users/binarycrusader/gists{/gist_id}", "starred_url": "https://api.github.com/users/binarycrusader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/binarycrusader/subscriptions", "organizations_url": "https://api.github.com/users/binarycrusader/orgs", "repos_url": "https://api.github.com/users/binarycrusader/repos", "events_url": "https://api.github.com/users/binarycrusader/events{/privacy}", "received_events_url": "https://api.github.com/users/binarycrusader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62eb6056d332be09206dc664f2e949ae64341e64", "url": "https://api.github.com/repos/rust-lang/rust/commits/62eb6056d332be09206dc664f2e949ae64341e64", "html_url": "https://github.com/rust-lang/rust/commit/62eb6056d332be09206dc664f2e949ae64341e64"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "319c61ece29bd88993a4fb337357f00b555c1543", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/087c2337c156af2f7e408145737b2415e66693da/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c2337c156af2f7e408145737b2415e66693da/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=087c2337c156af2f7e408145737b2415e66693da", "patch": "@@ -26,6 +26,12 @@ use std::process::{Command, Stdio};\n \n use build_helper::output;\n \n+#[cfg(not(target_os = \"solaris\"))]\n+const SH_CMD: &'static str = \"sh\";\n+// On Solaris, sh is the historical bourne shell, not a POSIX shell, or bash.\n+#[cfg(target_os = \"solaris\")]\n+const SH_CMD: &'static str = \"bash\";\n+\n use {Build, Compiler, Mode};\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy};\n \n@@ -69,7 +75,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     let src = build.out.join(host).join(\"doc\");\n     cp_r(&src, &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust-Documentation\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -119,7 +125,7 @@ pub fn mingw(build: &Build, host: &str) {\n        .arg(host);\n     build.run(&mut cmd);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust-MinGW\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -185,7 +191,7 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     }\n \n     // Finally, wrap everything up in a nice tarball!\n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -290,7 +296,7 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     let src = build.sysroot(compiler).join(\"lib/rustlib\");\n     cp_r(&src.join(target), &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -343,9 +349,10 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     let image_src = src.join(\"save-analysis\");\n     let dst = image.join(\"lib/rustlib\").join(target).join(\"analysis\");\n     t!(fs::create_dir_all(&dst));\n+    println!(\"image_src: {:?}, dst: {:?}\", image_src, dst);\n     cp_r(&image_src, &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -452,7 +459,7 @@ pub fn rust_src(build: &Build) {\n     build.run(&mut cmd);\n \n     // Create source tarball in rust-installer format\n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -610,7 +617,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         input_tarballs.push_str(&sanitize_sh(&mingw_installer));\n     }\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/combine-installers.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")"}]}