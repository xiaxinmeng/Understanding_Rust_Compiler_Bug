{"sha": "ab7b3456d00d13e52fa6631eb745bd1a472b5731", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiN2IzNDU2ZDAwZDEzZTUyZmE2NjMxZWI3NDViZDFhNDcyYjU3MzE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-02T22:58:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-02T22:58:41Z"}, "message": "Parens + issue number + typo", "tree": {"sha": "53fd25dc5d8c84bfdcd32276a3cffb0c6a6aee5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53fd25dc5d8c84bfdcd32276a3cffb0c6a6aee5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7b3456d00d13e52fa6631eb745bd1a472b5731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7b3456d00d13e52fa6631eb745bd1a472b5731", "html_url": "https://github.com/rust-lang/rust/commit/ab7b3456d00d13e52fa6631eb745bd1a472b5731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7b3456d00d13e52fa6631eb745bd1a472b5731/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61cbc84480e4d3bf525836cef715ad2a904452f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/61cbc84480e4d3bf525836cef715ad2a904452f4", "html_url": "https://github.com/rust-lang/rust/commit/61cbc84480e4d3bf525836cef715ad2a904452f4"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f939bab3808537514f132d9f59960bb22c491ec0", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab7b3456d00d13e52fa6631eb745bd1a472b5731/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7b3456d00d13e52fa6631eb745bd1a472b5731/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ab7b3456d00d13e52fa6631eb745bd1a472b5731", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // `pub` is explicitly listed.\n             _ => {\n                 self.prev_public = self.prev_public && item.vis == hir::Public;\n-                self.prev_exported = self.prev_exported && item.vis == hir::Public ||\n+                self.prev_exported = (self.prev_exported && item.vis == hir::Public) ||\n                                      self.reexports.contains(&item.id);\n \n                 self.maybe_insert_id(item.id);\n@@ -275,7 +275,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // It's not known until monomorphization if a trait impl item should be reachable\n             // from external crates or not. So, we conservatively mark all of them exported and\n             // the reachability pass (middle::reachable) marks all exported items as reachable.\n-            // For example of private trait impl for private type that shoud be reachable see\n+            // For example of private trait impl for private type that should be reachable see\n             // src/test/auxiliary/issue-11225-3.rs\n             hir::ItemImpl(_, _, _, Some(ref trait_ref), ref ty, ref impl_items) => {\n                 let (public_ty, _exported_ty) = self.is_public_exported_ty(&ty);\n@@ -344,7 +344,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemForeignMod(ref foreign_mod) => {\n                 for foreign_item in &foreign_mod.items {\n                     let public = self.prev_public && foreign_item.vis == hir::Public;\n-                    let exported = self.prev_exported && foreign_item.vis == hir::Public ||\n+                    let exported = (self.prev_exported && foreign_item.vis == hir::Public) ||\n                                    self.reexports.contains(&foreign_item.id);\n \n                     if public {\n@@ -1471,7 +1471,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     // expression/block context can't possibly contain exported things.\n     // (Making them no-ops stops us from traversing the whole AST without\n     // having to be super careful about our `walk_...` calls above.)\n-    // FIXME: Unfortunately this ^^^ is not true, blocks can contain\n+    // FIXME(#29524): Unfortunately this ^^^ is not true, blocks can contain\n     // exported items (e.g. impls) and actual code in rustc itself breaks\n     // if we don't traverse blocks in `EmbargoVisitor`\n     fn visit_block(&mut self, _: &hir::Block) {}"}]}