{"sha": "4f6f4eb7c386b01dec8c0337a600365407ba6a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmY0ZWI3YzM4NmIwMWRlYzhjMDMzN2E2MDAzNjU0MDdiYTZhNTY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-11T22:36:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-11T22:36:12Z"}, "message": "Rollup merge of #40377 - camlorn:optimization_fuel, r=eddyb\n\nImplement optimization fuel and re-enable struct field reordering\n\nSee [this discussion](https://internals.rust-lang.org/t/rolling-out-or-unrolling-struct-field-reorderings/4485) for background.\n\nThis pull request adds two new compilation options: `-Z print-fuel=crate` prints the optimization fuel used by a crate and `-Z fuel=crate=n` sets the optimization fuel for a crate.\n\nIt also turns field reordering back on.  There is no way to test this feature without something consuming fuel.  We can roll this back if we want, but then the optimization fuel bits will be dead code.\n\nThe one notable absence from this PR is a test case.  I'm not sure how to do one that's worth having.  The only thing I can think of to test is `-Z fuel=foo=0`.  The problem with other tests is that either (1) they're so big that future optimizations will apply, thus breaking them or (2) we don't know which order the optimizations will be applied in, so we can't guess the message that will be printed.  If someone has a useful proposal for a good test, I certainly want to add one.", "tree": {"sha": "3c34d9a1d4bb22373d693f0c6e5749a0ea98eaa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c34d9a1d4bb22373d693f0c6e5749a0ea98eaa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6f4eb7c386b01dec8c0337a600365407ba6a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f4eb7c386b01dec8c0337a600365407ba6a56", "html_url": "https://github.com/rust-lang/rust/commit/4f6f4eb7c386b01dec8c0337a600365407ba6a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6f4eb7c386b01dec8c0337a600365407ba6a56/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c928e658d2e45f816fd05796a964aa83759da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c928e658d2e45f816fd05796a964aa83759da", "html_url": "https://github.com/rust-lang/rust/commit/c58c928e658d2e45f816fd05796a964aa83759da"}, {"sha": "e18c59fd48a8387767d44fdd4d36208dfd33f762", "url": "https://api.github.com/repos/rust-lang/rust/commits/e18c59fd48a8387767d44fdd4d36208dfd33f762", "html_url": "https://github.com/rust-lang/rust/commit/e18c59fd48a8387767d44fdd4d36208dfd33f762"}], "stats": {"total": 264, "additions": 219, "deletions": 45}, "files": [{"sha": "b9a974045bced110527e953ebffe296dccceb6b6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -643,6 +643,8 @@ macro_rules! options {\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_linker_flavor: Option<&'static str> =\n             Some(::rustc_back::LinkerFlavor::one_of());\n+        pub const parse_optimization_fuel: Option<&'static str> =\n+            Some(\"crate=integer\");\n     }\n \n     #[allow(dead_code)]\n@@ -787,6 +789,21 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_optimization_fuel(slot: &mut Option<(String, u64)>, v: Option<&str>) -> bool {\n+            match v {\n+                None => false,\n+                Some(s) => {\n+                    let parts = s.split('=').collect::<Vec<_>>();\n+                    if parts.len() != 2 { return false; }\n+                    let crate_name = parts[0].to_string();\n+                    let fuel = parts[1].parse::<u64>();\n+                    if fuel.is_err() { return false; }\n+                    *slot = Some((crate_name, fuel.unwrap()));\n+                    true\n+                }\n+            }\n+        }\n     }\n ) }\n \n@@ -991,6 +1008,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                                    \"Use a sanitizer\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n+    fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n+        \"Set the optimization fuel quota for a crate.\"),\n+    print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Make Rustc print the total optimization fuel used by a crate.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -1784,11 +1805,13 @@ mod dep_tracking {\n \n     impl_dep_tracking_hash_via_hash!(bool);\n     impl_dep_tracking_hash_via_hash!(usize);\n+    impl_dep_tracking_hash_via_hash!(u64);\n     impl_dep_tracking_hash_via_hash!(String);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n+    impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n@@ -1810,6 +1833,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n                                                  Option<cstore::NativeLibraryKind>));\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self"}, {"sha": "039db3d9ee9117484aa69847768089bbfcdf608b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -123,6 +123,20 @@ pub struct Session {\n     pub code_stats: RefCell<CodeStats>,\n \n     next_node_id: Cell<ast::NodeId>,\n+\n+    /// If -zfuel=crate=n is specified, Some(crate).\n+    optimization_fuel_crate: Option<String>,\n+    /// If -zfuel=crate=n is specified, initially set to n. Otherwise 0.\n+    optimization_fuel_limit: Cell<u64>,\n+    /// We're rejecting all further optimizations.\n+    out_of_fuel: Cell<bool>,\n+\n+    // The next two are public because the driver needs to read them.\n+\n+    /// If -zprint-fuel=crate, Some(crate).\n+    pub print_fuel_crate: Option<String>,\n+    /// Always set to zero and incremented so that we can print fuel expended by a crate.\n+    pub print_fuel: Cell<u64>,\n }\n \n pub struct PerfStats {\n@@ -507,6 +521,32 @@ impl Session {\n         println!(\"Total time spent decoding DefPath tables:      {}\",\n                  duration_to_secs_str(self.perf_stats.decode_def_path_tables_time.get()));\n     }\n+\n+    /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n+    /// This expends fuel if applicable, and records fuel if applicable.\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n+        let mut ret = true;\n+        match self.optimization_fuel_crate {\n+            Some(ref c) if c == crate_name => {\n+                let fuel = self.optimization_fuel_limit.get();\n+                ret = fuel != 0;\n+                if fuel == 0 && !self.out_of_fuel.get() {\n+                    println!(\"optimization-fuel-exhausted: {}\", msg());\n+                    self.out_of_fuel.set(true);\n+                } else if fuel > 0 {\n+                    self.optimization_fuel_limit.set(fuel-1);\n+                }\n+            }\n+            _ => {}\n+        }\n+        match self.print_fuel_crate {\n+            Some(ref c) if c == crate_name=> {\n+                self.print_fuel.set(self.print_fuel.get()+1);\n+            },\n+            _ => {}\n+        }\n+        ret\n+    }\n }\n \n pub fn build_session(sopts: config::Options,\n@@ -602,6 +642,12 @@ pub fn build_session_(sopts: config::Options,\n         }\n     );\n \n+    let optimization_fuel_crate = sopts.debugging_opts.fuel.as_ref().map(|i| i.0.clone());\n+    let optimization_fuel_limit = Cell::new(sopts.debugging_opts.fuel.as_ref()\n+        .map(|i| i.1).unwrap_or(0));\n+    let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n+    let print_fuel = Cell::new(0);\n+\n     let sess = Session {\n         dep_graph: dep_graph.clone(),\n         target: target_cfg,\n@@ -643,6 +689,11 @@ pub fn build_session_(sopts: config::Options,\n             decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n         },\n         code_stats: RefCell::new(CodeStats::new()),\n+        optimization_fuel_crate: optimization_fuel_crate,\n+        optimization_fuel_limit: optimization_fuel_limit,\n+        print_fuel_crate: print_fuel_crate,\n+        print_fuel: print_fuel,\n+        out_of_fuel: Cell::new(false),\n     };\n \n     init_llvm(&sess);"}, {"sha": "8b7438c0bfad2ed5f73efbfece42ffbbd22978d4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -732,6 +732,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n        }, f)\n     }\n+\n+    pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n+        let cname = self.crate_name(LOCAL_CRATE).as_str();\n+        self.sess.consider_optimizing(&cname, msg)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {"}, {"sha": "d7a4b3fda63bb84054d49fde393e1f2ef62e9fe3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -580,7 +580,6 @@ enum StructKind {\n }\n \n impl<'a, 'gcx, 'tcx> Struct {\n-    // FIXME(camlorn): reprs need a better representation to deal with multiple reprs on one type.\n     fn new(dl: &TargetDataLayout, fields: &Vec<&'a Layout>,\n                   repr: &ReprOptions, kind: StructKind,\n                   scapegoat: Ty<'gcx>) -> Result<Struct, LayoutError<'gcx>> {\n@@ -598,12 +597,8 @@ impl<'a, 'gcx, 'tcx> Struct {\n         // Neither do  1-member and 2-member structs.\n         // In addition, code in trans assume that 2-element structs can become pairs.\n         // It's easier to just short-circuit here.\n-        let mut can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n-            && ! (repr.c || repr.packed);\n-\n-        // Disable field reordering until we can decide what to do.\n-        // The odd pattern here avoids a warning about the value never being read.\n-        if can_optimize { can_optimize = false; }\n+        let can_optimize = (fields.len() > 2 || StructKind::EnumVariant == kind)\n+            && !(repr.c || repr.packed || repr.linear || repr.simd);\n \n         let (optimize, sort_ascending) = match kind {\n             StructKind::AlwaysSizedUnivariant => (can_optimize, false),"}, {"sha": "a2c356c20db09d563afa0e532dc964c39f139138", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -1411,13 +1411,16 @@ pub struct ReprOptions {\n     pub packed: bool,\n     pub simd: bool,\n     pub int: Option<attr::IntType>,\n+    // Internal only for now. If true, don't reorder fields.\n+    pub linear: bool,\n }\n \n impl_stable_hash_for!(struct ReprOptions {\n     c,\n     packed,\n     simd,\n-    int\n+    int,\n+    linear\n });\n \n impl ReprOptions {\n@@ -1440,6 +1443,9 @@ impl ReprOptions {\n             ret.simd = true;\n         }\n \n+        // This is here instead of layout because the choice must make it into metadata.\n+        ret.linear = !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\",\n+            tcx.item_path_str(did)));\n         ret\n     }\n "}, {"sha": "1a892b73aa5d771c86f6f2dd1c09796763647997", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -517,6 +517,16 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.make_glob_map = resolve::MakeGlobMap::Yes;\n         }\n \n+        if sess.print_fuel_crate.is_some() {\n+            let old_callback = control.compilation_done.callback;\n+            control.compilation_done.callback = box move |state| {\n+                old_callback(state);\n+                let sess = state.session;\n+                println!(\"Fuel used by {}: {}\",\n+                    sess.print_fuel_crate.as_ref().unwrap(),\n+                    sess.print_fuel.get());\n+            }\n+        }\n         control\n     }\n }"}, {"sha": "7cfc28622c443a63c9dd0943e5af4a73d44af7a9", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -16,7 +16,7 @@ use llvm;\n use llvm::{ValueRef};\n use abi::{Abi, FnType};\n use adt;\n-use mir::lvalue::LvalueRef;\n+use mir::lvalue::{LvalueRef, Alignment};\n use base::*;\n use common::*;\n use declare;\n@@ -36,8 +36,6 @@ use syntax_pos::Span;\n use std::cmp::Ordering;\n use std::iter;\n \n-use mir::lvalue::Alignment;\n-\n fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     let llvm_name = match name {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n@@ -622,7 +620,10 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n                     for i in 0..elems.len() {\n                         let val = bcx.extract_value(val, i);\n-                        bcx.store(val, bcx.struct_gep(llresult, i), None);\n+                        let lval = LvalueRef::new_sized_ty(llresult, ret_ty,\n+                                                           Alignment::AbiAligned);\n+                        let (dest, align) = lval.trans_field_ptr(bcx, i);\n+                        bcx.store(val, dest, align.to_align());\n                     }\n                     C_nil(ccx)\n                 }"}, {"sha": "f4c9a136ace3c9516e9857fb20651f1976455e3a", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -386,7 +386,7 @@ fn arg_local_refs<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n \n             let lvalue = LvalueRef::alloca(bcx, arg_ty, &format!(\"arg{}\", arg_index));\n             for (i, &tupled_arg_ty) in tupled_arg_tys.iter().enumerate() {\n-                let dst = bcx.struct_gep(lvalue.llval, i);\n+                let (dst, _) = lvalue.trans_field_ptr(bcx, i);\n                 let arg = &mircx.fn_ty.args[idx];\n                 idx += 1;\n                 if common::type_is_fat_ptr(bcx.ccx, tupled_arg_ty) {"}, {"sha": "3832c040108f8f0b0ad35306357929331a479255", "filename": "src/test/run-pass/optimization-fuel-0.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-0.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+\n+use std::mem::size_of;\n+\n+// compile-flags: -Z fuel=foo=0\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+\n+fn main() {\n+    assert_eq!(size_of::<S1>(), 6);\n+    assert_eq!(size_of::<S2>(), 6);\n+}\n+"}, {"sha": "5f294e26aa53efce4bb6337b82328d8b32365388", "filename": "src/test/run-pass/optimization-fuel-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foptimization-fuel-1.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+\n+use std::mem::size_of;\n+\n+// compile-flags: -Z fuel=foo=1\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+\n+fn main() {\n+    let optimized = (size_of::<S1>() == 4) as usize\n+        +(size_of::<S2>() == 4) as usize;\n+    assert_eq!(optimized, 1);\n+}\n+\n+"}, {"sha": "2f50e63153ea4bf8722b3bec2458aaa40d6168be", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -31,6 +31,17 @@ enum e3 {\n     a([u16; 0], u8), b\n }\n \n+struct ReorderedStruct {\n+    a: u8,\n+    b: u16,\n+    c: u8\n+}\n+\n+enum ReorderedEnum {\n+    A(u8, u16, u8),\n+    B(u8, u16, u8),\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -54,4 +65,6 @@ pub fn main() {\n     assert_eq!(size_of::<e1>(), 8 as usize);\n     assert_eq!(size_of::<e2>(), 8 as usize);\n     assert_eq!(size_of::<e3>(), 4 as usize);\n+    assert_eq!(size_of::<ReorderedStruct>(), 4);\n+    assert_eq!(size_of::<ReorderedEnum>(), 6);\n }"}, {"sha": "0d9e243763f78257a8ed92d54dda8de39fd2d498", "filename": "src/test/ui/print-fuel/print-fuel.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.rs?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"foo\"]\n+#![allow(dead_code)]\n+\n+// compile-flags: -Z print-fuel=foo\n+\n+struct S1(u8, u16, u8);\n+struct S2(u8, u16, u8);\n+struct S3(u8, u16, u8);\n+\n+fn main() {\n+}"}, {"sha": "cc88cc077bb219a372491432f57bdb0f76b8ba62", "filename": "src/test/ui/print-fuel/print-fuel.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint-fuel%2Fprint-fuel.stdout?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -0,0 +1 @@\n+Fuel used by foo: 3"}, {"sha": "830678f174f88cf38e0d76836bac2cc7c9a9ee96", "filename": "src/test/ui/print_type_sizes/nullable.stdout", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fnullable.stdout?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -1,25 +1,22 @@\n-print-type-size type: `IndirectNonZero<u32>`: 20 bytes, alignment: 4 bytes\n-print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.nested`: 12 bytes, alignment: 4 bytes\n+print-type-size type: `IndirectNonZero<u32>`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.nested`: 8 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `MyOption<IndirectNonZero<u32>>`: 20 bytes, alignment: 4 bytes\n-print-type-size     variant `Some`: 20 bytes\n-print-type-size         field `.0`: 20 bytes\n-print-type-size type: `EmbeddedDiscr`: 12 bytes, alignment: 4 bytes\n-print-type-size     variant `Record`: 10 bytes\n-print-type-size         field `.pre`: 1 bytes\n-print-type-size         padding: 3 bytes\n-print-type-size         field `.val`: 4 bytes, alignment: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n-print-type-size type: `NestedNonZero<u32>`: 12 bytes, alignment: 4 bytes\n print-type-size     field `.pre`: 1 bytes\n-print-type-size     padding: 3 bytes\n-print-type-size     field `.val`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `MyOption<IndirectNonZero<u32>>`: 12 bytes, alignment: 4 bytes\n+print-type-size     variant `Some`: 12 bytes\n+print-type-size         field `.0`: 12 bytes\n+print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     variant `Record`: 7 bytes\n+print-type-size         field `.val`: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n+print-type-size type: `NestedNonZero<u32>`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n-print-type-size     end padding: 2 bytes\n+print-type-size     field `.pre`: 1 bytes\n+print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes"}, {"sha": "83fd333c9c7fc45dba547de22add55c477521ef9", "filename": "src/test/ui/print_type_sizes/packed.stdout", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.stdout?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -1,13 +1,11 @@\n-print-type-size type: `Padded`: 16 bytes, alignment: 4 bytes\n+print-type-size type: `Padded`: 12 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n+print-type-size     field `.h`: 2 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.c`: 1 bytes\n-print-type-size     padding: 1 bytes\n-print-type-size     field `.h`: 2 bytes, alignment: 2 bytes\n print-type-size     field `.d`: 1 bytes\n-print-type-size     end padding: 3 bytes\n+print-type-size     end padding: 2 bytes\n print-type-size type: `Packed`: 10 bytes, alignment: 1 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes"}, {"sha": "0eaff7118b35c38a528dab7052d2cd498acb15aa", "filename": "src/test/ui/print_type_sizes/padding.stdout", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4f6f4eb7c386b01dec8c0337a600365407ba6a56/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.stdout?ref=4f6f4eb7c386b01dec8c0337a600365407ba6a56", "patch": "@@ -1,10 +1,12 @@\n print-type-size type: `E1`: 12 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 4 bytes\n-print-type-size     variant `A`: 5 bytes\n-print-type-size         field `.0`: 4 bytes\n+print-type-size     discriminant: 1 bytes\n+print-type-size     variant `A`: 7 bytes\n print-type-size         field `.1`: 1 bytes\n-print-type-size     variant `B`: 8 bytes\n-print-type-size         field `.0`: 8 bytes\n+print-type-size         padding: 2 bytes\n+print-type-size         field `.0`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `B`: 11 bytes\n+print-type-size         padding: 3 bytes\n+print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `E2`: 12 bytes, alignment: 4 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `A`: 7 bytes\n@@ -15,7 +17,7 @@ print-type-size     variant `B`: 11 bytes\n print-type-size         padding: 3 bytes\n print-type-size         field `.0`: 8 bytes, alignment: 4 bytes\n print-type-size type: `S`: 8 bytes, alignment: 4 bytes\n+print-type-size     field `.g`: 4 bytes\n print-type-size     field `.a`: 1 bytes\n print-type-size     field `.b`: 1 bytes\n-print-type-size     padding: 2 bytes\n-print-type-size     field `.g`: 4 bytes, alignment: 4 bytes\n+print-type-size     end padding: 2 bytes"}]}