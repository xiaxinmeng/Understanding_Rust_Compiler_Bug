{"sha": "85d428101dc757f7aa41e47696c94683d8398903", "node_id": "C_kwDOAAsO6NoAKDg1ZDQyODEwMWRjNzU3ZjdhYTQxZTQ3Njk2Yzk0NjgzZDgzOTg5MDM", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-03-18T10:34:30Z"}, "committer": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-03-22T10:01:51Z"}, "message": "Pull `is_full_range` method from `iter_with_drain`\n\nRename method to `is_range_full` because the type is actually\n`RangeFull`.\n\nMethod moved to `clippy_utils` for reuse in `clear_with_drain`.", "tree": {"sha": "a3740ad148642a8e8b39a412913440ab422205db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3740ad148642a8e8b39a412913440ab422205db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85d428101dc757f7aa41e47696c94683d8398903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85d428101dc757f7aa41e47696c94683d8398903", "html_url": "https://github.com/rust-lang/rust/commit/85d428101dc757f7aa41e47696c94683d8398903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85d428101dc757f7aa41e47696c94683d8398903/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f44530f54002401ba771bcc19f56f4950b22bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f44530f54002401ba771bcc19f56f4950b22bb1", "html_url": "https://github.com/rust-lang/rust/commit/7f44530f54002401ba771bcc19f56f4950b22bb1"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "ea92e3a549f4954cd4dc5e0723b5017b68173788", "filename": "clippy_lints/src/methods/iter_with_drain.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/85d428101dc757f7aa41e47696c94683d8398903/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d428101dc757f7aa41e47696c94683d8398903/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs?ref=85d428101dc757f7aa41e47696c94683d8398903", "patch": "@@ -1,9 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher::Range;\n-use clippy_utils::is_integer_const;\n-use rustc_ast::ast::RangeLimits;\n+use clippy_utils::is_range_full;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -16,7 +15,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n         && let Some(ty_name) = cx.tcx.get_diagnostic_name(adt.did())\n         && matches!(ty_name, sym::Vec | sym::VecDeque)\n         && let Some(range) = Range::hir(arg)\n-        && is_full_range(cx, recv, range)\n+        && is_range_full(cx, recv, range)\n     {\n         span_lint_and_sugg(\n             cx,\n@@ -29,19 +28,3 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n         );\n     };\n }\n-\n-fn is_full_range(cx: &LateContext<'_>, container: &Expr<'_>, range: Range<'_>) -> bool {\n-    range.start.map_or(true, |e| is_integer_const(cx, e, 0))\n-        && range.end.map_or(true, |e| {\n-            if range.limits == RangeLimits::HalfOpen\n-                && let ExprKind::Path(QPath::Resolved(None, container_path)) = container.kind\n-                && let ExprKind::MethodCall(name, self_arg, [], _) = e.kind\n-                && name.ident.name == sym::len\n-                && let ExprKind::Path(QPath::Resolved(None, path)) = self_arg.kind\n-            {\n-                container_path.res == path.res\n-            } else {\n-                false\n-            }\n-        })\n-}"}, {"sha": "0fdbd7a63411d22faf501f18d112da736eb6c5a4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85d428101dc757f7aa41e47696c94683d8398903/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85d428101dc757f7aa41e47696c94683d8398903/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=85d428101dc757f7aa41e47696c94683d8398903", "patch": "@@ -78,7 +78,7 @@ use std::sync::OnceLock;\n use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n-use rustc_ast::ast::{self, LitKind};\n+use rustc_ast::ast::{self, LitKind, RangeLimits};\n use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n@@ -115,6 +115,7 @@ use rustc_span::Span;\n use rustc_target::abi::Integer;\n \n use crate::consts::{constant, Constant};\n+use crate::higher::Range;\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n@@ -1491,6 +1492,24 @@ pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n     }\n }\n \n+/// Checks whether the given `Range` is equivalent to a `RangeFull`.\n+/// Inclusive ranges are not considered because they already constitute a lint.\n+pub fn is_range_full(cx: &LateContext<'_>, container: &Expr<'_>, range: Range<'_>) -> bool {\n+    range.start.map_or(true, |e| is_integer_const(cx, e, 0))\n+        && range.end.map_or(true, |e| {\n+            if range.limits == RangeLimits::HalfOpen\n+                && let ExprKind::Path(QPath::Resolved(None, container_path)) = container.kind\n+                && let ExprKind::MethodCall(name, self_arg, [], _) = e.kind\n+                && name.ident.name == sym::len\n+                && let ExprKind::Path(QPath::Resolved(None, path)) = self_arg.kind\n+            {\n+                container_path.res == path.res\n+            } else {\n+                false\n+            }\n+        })\n+}\n+\n /// Checks whether the given expression is a constant integer of the given value.\n /// unlike `is_integer_literal`, this version does const folding\n pub fn is_integer_const(cx: &LateContext<'_>, e: &Expr<'_>, value: u128) -> bool {"}]}