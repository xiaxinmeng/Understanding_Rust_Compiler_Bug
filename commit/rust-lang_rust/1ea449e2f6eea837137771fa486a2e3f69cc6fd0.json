{"sha": "1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTQ0OWUyZjZlZWE4MzcxMzc3NzFmYTQ4NmEyZTNmNjljYzZmZDA=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-12T22:27:17Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-12T22:27:36Z"}, "message": "Updating and unXFAILing somet communication tests.", "tree": {"sha": "b9ce952ad2f84268e6daa1f00db4905222c92399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ce952ad2f84268e6daa1f00db4905222c92399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "html_url": "https://github.com/rust-lang/rust/commit/1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/comments", "author": null, "committer": null, "parents": [{"sha": "598b50e10a347b29d235bb99110975b96fdab160", "url": "https://api.github.com/repos/rust-lang/rust/commits/598b50e10a347b29d235bb99110975b96fdab160", "html_url": "https://github.com/rust-lang/rust/commit/598b50e10a347b29d235bb99110975b96fdab160"}], "stats": {"total": 185, "additions": 80, "deletions": 105}, "files": [{"sha": "a96b3062d9ff9cab174d208615eb47ac200ad01f", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,6 +1,10 @@\n // xfail-stage0\n // xfail-stage1\n // xfail-stage2\n+\n+use std;\n+import std::task;\n+\n fn start(chan[chan[str]] c) {\n     let port[str] p = port();\n     c <| chan(p);\n@@ -10,9 +14,9 @@ fn start(chan[chan[str]] c) {\n \n fn main() {\n     let port[chan[str]] p = port();\n-    auto child = spawn \"start\" start(chan(p));\n+    auto child = spawn start(chan(p));\n     auto c; p |> c;\n     c <| \"A\";\n     c <| \"B\";\n-    yield;\n+    task::yield();\n }"}, {"sha": "723966082c1ec7e8fcdb2c211c904721269e56b2", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,13 +1,14 @@\n // xfail-stage0\n // xfail-stage1\n // xfail-stage2\n+\n fn start(chan[chan[str]] c) {\n     let port[str] p = port();\n     c <| chan(p);\n }\n \n fn main() {\n     let port[chan[str]] p = port();\n-    auto child = spawn \"child\" start(chan(p));\n+    auto child = spawn start(chan(p));\n     auto c; p |> c;\n }"}, {"sha": "4c8fc4c2ebf480d3e0d9b6792f0b4318a0c8c96c", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,8 +1,7 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n use std;\n-import std::_task;\n+import std::task;\n \n fn main() -> () {\n     test00();\n@@ -14,13 +13,13 @@ fn start(int task_number) {\n     \n fn test00() {    \n     let int i = 0;\n-    let task t = spawn thread \"child\" start(i);\n+    let task t = spawn start(i);\n     \n     // Sleep long enough for the task to finish.\n-    _task::sleep(10000u);\n+    task::sleep(10000u);\n     \n     // Try joining tasks that have already finished.\n-    join t;\n+    task::join(t);\n     \n     log \"Joined task.\";\n }\n\\ No newline at end of file"}, {"sha": "72f3c9568fef30f35dbc705aa032b4298f5146b0", "filename": "src/test/run-pass/task-comm-13-thread.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/598b50e10a347b29d235bb99110975b96fdab160/src%2Ftest%2Frun-pass%2Ftask-comm-13-thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598b50e10a347b29d235bb99110975b96fdab160/src%2Ftest%2Frun-pass%2Ftask-comm-13-thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13-thread.rs?ref=598b50e10a347b29d235bb99110975b96fdab160", "patch": "@@ -1,21 +0,0 @@\n-// xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-use std;\n-import std::_task;\n-\n-fn start(chan[int] c, int start, int number_of_messages) {\n-    let int i = 0;\n-    while (i < number_of_messages) {\n-        c <| start + i;\n-        i += 1;\n-    }    \n-}\n-\n-fn main() -> () {\n-    log \"Check that we don't deadlock.\";\n-    let port[int] p = port();\n-    let task a = spawn thread \"start\" start(chan(p), 0, 10);\n-    join a;\n-    log \"Joined task\";\n-}\n\\ No newline at end of file"}, {"sha": "50b667e8a2fb279ca74bce054fface04a90fae61", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,8 +1,7 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n use std;\n-import std::_task;\n+import std::task;\n \n fn start(chan[int] c, int start, int number_of_messages) {\n     let int i = 0;\n@@ -15,7 +14,7 @@ fn start(chan[int] c, int start, int number_of_messages) {\n fn main() -> () {\n     log \"Check that we don't deadlock.\";\n     let port[int] p = port();\n-    let task a = spawn \"start\" start(chan(p), 0, 10);\n-    join a;\n+    let task a = spawn start(chan(p), 0, 10);\n+    task::join(a);\n     log \"Joined task\";\n }\n\\ No newline at end of file"}, {"sha": "58de577e274a1e9735561de40dbdaeb914d43b3b", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,6 +1,5 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n fn start(chan[int] c, int n) {\n     let int i = n;\n \n@@ -16,6 +15,6 @@ fn main() {\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    auto child = spawn thread \"child\" start(chan(p), 10);\n+    auto child = spawn start(chan(p), 10);\n     auto c; p |> c;\n }"}, {"sha": "73d67ef61e3f1362d0bc275e84ff0e0d0770d2d4", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,11 +1,12 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+\n+import std::task;\n+\n fn main() -> () {    \n-    log \"===== SPAWNING and JOINING TASKS =====\";\n-    test00(false);\n     log \"===== SPAWNING and JOINING THREAD TASKS =====\";\n-    test00(true);\n+    test00();\n }\n \n fn start(int task_number) {\n@@ -17,22 +18,18 @@ fn start(int task_number) {\n     log \"Finished task.\";\n }\n     \n-fn test00(bool create_threads) {\n+fn test00() {\n     let int number_of_tasks = 8;\n     \n     let int i = 0;\n     let vec[task] tasks = [];\n     while (i < number_of_tasks) {\n         i = i + 1;\n-        if (create_threads) {\n-            tasks += [spawn thread start(i)];\n-        } else {\n-            tasks += [spawn start(i)];\n-        }\n+        tasks += [spawn start(i)];\n     }\n     \n     for (task t in tasks) {\n-        join t;\n+        task::join(t);\n     }\n     \n     log \"Joined all task.\";"}, {"sha": "198d04f44fd4bdf470550aaf169b269c445aa44f", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,11 +1,11 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+import std::task;\n+\n fn main() -> () {\n    log \"===== WITHOUT THREADS =====\";\n-   test00(false);\n-   log \"====== WITH THREADS ======\";\n-   test00(true);\n+   test00();\n }\n \n fn test00_start(chan[int] ch, int message, int count) {\n@@ -19,7 +19,7 @@ fn test00_start(chan[int] ch, int message, int count) {\n     log \"Ending test00_start\";\n }\n \n-fn test00(bool is_multithreaded) {\n+fn test00() {\n     let int number_of_tasks = 16;\n     let int number_of_messages = 4;\n     \n@@ -33,12 +33,7 @@ fn test00(bool is_multithreaded) {\n     // Create and spawn tasks...\n     let vec[task] tasks = [];\n     while (i < number_of_tasks) {\n-        if (is_multithreaded) {\n-            tasks += [\n-                spawn thread test00_start(ch, i, number_of_messages)];\n-        } else {\n-            tasks += [spawn test00_start(ch, i, number_of_messages)];\n-        }\n+        tasks += [spawn test00_start(ch, i, number_of_messages)];\n         i = i + 1;\n     }\n     \n@@ -55,7 +50,7 @@ fn test00(bool is_multithreaded) {\n \n     // Join spawned tasks...\n     for (task t in tasks) {\n-        join t;\n+        task::join(t);\n     }\n     \n     log \"Completed: Final number is: \";"}, {"sha": "9953faf0b4cfed32f5d9bf29864a7a2e49699894", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,6 +1,8 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+import std::task;\n+\n fn main() -> () {\n    test00();\n }\n@@ -37,10 +39,10 @@ fn test00() {\n         i += 1;\n     }\n             \n-    join t0;\n-    join t1;\n-    join t2;\n-    join t3;\n+    task::join(t0);\n+    task::join(t1);\n+    task::join(t2);\n+    task::join(t3);\n     \n     assert (sum == (((number_of_messages * 4) * \n                    ((number_of_messages * 4) - 1)) / 2));"}, {"sha": "9953faf0b4cfed32f5d9bf29864a7a2e49699894", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,6 +1,8 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+import std::task;\n+\n fn main() -> () {\n    test00();\n }\n@@ -19,14 +21,14 @@ fn test00() {\n     let port[int] p = port();\n     let int number_of_messages = 10;\n         \n-    let task t0 = spawn thread test00_start(chan(p), \n-                               number_of_messages * 0, number_of_messages);\n-    let task t1 = spawn thread test00_start(chan(p), \n-                               number_of_messages * 1, number_of_messages);\n-    let task t2 = spawn thread test00_start(chan(p), \n-                               number_of_messages * 2, number_of_messages);\n-    let task t3 = spawn thread test00_start(chan(p), \n-                               number_of_messages * 3, number_of_messages);\n+    let task t0 = spawn test00_start(chan(p), \n+                        number_of_messages * 0, number_of_messages);\n+    let task t1 = spawn test00_start(chan(p), \n+                        number_of_messages * 1, number_of_messages);\n+    let task t2 = spawn test00_start(chan(p), \n+                        number_of_messages * 2, number_of_messages);\n+    let task t3 = spawn test00_start(chan(p), \n+                        number_of_messages * 3, number_of_messages);\n     \n     let int i = 0;\n     while (i < number_of_messages) {\n@@ -37,10 +39,10 @@ fn test00() {\n         i += 1;\n     }\n             \n-    join t0;\n-    join t1;\n-    join t2;\n-    join t3;\n+    task::join(t0);\n+    task::join(t1);\n+    task::join(t2);\n+    task::join(t3);\n     \n     assert (sum == (((number_of_messages * 4) * \n                    ((number_of_messages * 4) - 1)) / 2));"}, {"sha": "3f93537e2d897665225f55b0aaa61e1fe0b67a31", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,6 +1,8 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+import std::task;\n+\n fn main() -> () {\n    test00();\n }\n@@ -19,7 +21,7 @@ fn test00() {\n     let port[int] p = port();\n     let int number_of_messages = 10;\n         \n-    let task t0 = spawn thread \"child\"\n+    let task t0 = spawn\n         test00_start(chan(p), number_of_messages);\n     \n     let int i = 0;\n@@ -28,7 +30,7 @@ fn test00() {\n         i += 1;\n     }\n             \n-    join t0;\n+    task::join(t0);\n     \n     assert (sum == (number_of_messages * (number_of_messages - 1)) / 2);\n }\n\\ No newline at end of file"}, {"sha": "16d255ab0460299c7289787bb61ab6bd9de2c42e", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea449e2f6eea837137771fa486a2e3f69cc6fd0/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=1ea449e2f6eea837137771fa486a2e3f69cc6fd0", "patch": "@@ -1,9 +1,11 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+\n+import std::task;\n \n fn main() -> () {\n-    test00(true);\n+    test00();\n     // test01();\n     test02();\n     test03();\n@@ -23,7 +25,7 @@ fn test00_start(chan[int] ch, int message, int count) {\n     log \"Ending test00_start\";\n }\n \n-fn test00(bool is_multithreaded) {\n+fn test00() {\n     let int number_of_tasks = 1;\n     let int number_of_messages = 4;\n     log \"Creating tasks\";\n@@ -36,12 +38,7 @@ fn test00(bool is_multithreaded) {\n     let vec[task] tasks = [];\n     while (i < number_of_tasks) {\n         i = i + 1;\n-        if (is_multithreaded) {\n-            tasks += [\n-                spawn thread test00_start(ch, i, number_of_messages)];\n-        } else {\n-            tasks += [spawn test00_start(ch, i, number_of_messages)];\n-        }\n+        tasks += [spawn test00_start(ch, i, number_of_messages)];\n     }\n     \n     let int sum = 0;\n@@ -55,7 +52,7 @@ fn test00(bool is_multithreaded) {\n     }\n \n     for (task t in tasks) {\n-        join t;\n+        task::join(t);\n     }\n     \n     log \"Completed: Final number is: \";\n@@ -89,9 +86,9 @@ obj vector(mutable int x, int y) {\n \n fn test03() {\n     log \"Creating object ...\";\n-    let mutable vector v = vector(1, 2);\n+    let vector v = vector(1, 2);\n     log \"created object ...\";\n-    let mutable vector t = v;\n+    let vector t = v;\n     log v.length();\n }\n \n@@ -109,7 +106,7 @@ fn test04() {\n     let int i = 4;\n     while (i > 0) {\n         i = i - 1;\n-        spawn thread test04_start();\n+        spawn test04_start();\n     }\n     log \"Finishing up.\";\n }\n@@ -125,7 +122,7 @@ fn test05_start(chan[int] ch) {\n fn test05() {\n     let port[int] po = port();\n     let chan[int] ch = chan(po);\n-    spawn thread test05_start(ch);\n+    spawn test05_start(ch);\n     let int value; po |> value;\n     po |> value;\n     po |> value;\n@@ -150,12 +147,11 @@ fn test06() {\n     let vec[task] tasks = [];\n     while (i < number_of_tasks) {\n         i = i + 1;\n-        tasks += [spawn thread test06_start(i)];\n-        // tasks += [spawn test06_start(i)];\n+        tasks += [spawn test06_start(i)];\n     }\n     \n     for (task t in tasks) {\n-        join t;\n+        task::join(t);\n     }\n }\n "}]}