{"sha": "fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYTYyMzIxMWZhZmIyY2U3MTllZWI5ZWQ0N2NkYjk2MjRlMWZiZTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T17:48:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T17:48:02Z"}, "message": "rustc: Add a Link module; move crate writing to it to slim down trans slightly", "tree": {"sha": "6384aa2efacd0c81f293677e84d24516f568b536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6384aa2efacd0c81f293677e84d24516f568b536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "html_url": "https://github.com/rust-lang/rust/commit/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "729648282bf31a89cfdb9cbea47806ba4c05a1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/729648282bf31a89cfdb9cbea47806ba4c05a1db", "html_url": "https://github.com/rust-lang/rust/commit/729648282bf31a89cfdb9cbea47806ba4c05a1db"}], "stats": {"total": 370, "additions": 197, "deletions": 173}, "files": [{"sha": "5d9eb9d6e3cb93db7611065794d9e35ab9bc049f", "filename": "src/comp/back/Link.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fback%2FLink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fback%2FLink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2FLink.rs?ref=fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "patch": "@@ -0,0 +1,176 @@\n+import driver.session;\n+import lib.llvm.llvm;\n+import middle.trans;\n+import std._str;\n+\n+import lib.llvm.llvm.ModuleRef;\n+import lib.llvm.llvm.ValueRef;\n+import lib.llvm.mk_pass_manager;\n+import lib.llvm.mk_target_data;\n+import lib.llvm.mk_type_names;\n+\n+tag output_type {\n+    output_type_none;\n+    output_type_bitcode;\n+    output_type_assembly;\n+    output_type_object;\n+}\n+\n+mod Write {\n+    fn is_object_or_assembly(output_type ot) -> bool {\n+        if (ot == output_type_assembly) {\n+            ret true;\n+        }\n+        if (ot == output_type_object) {\n+            ret true;\n+        }\n+        ret false;\n+    }\n+\n+    // Decides what to call an intermediate file, given the name of the output\n+    // and the extension to use.\n+    fn mk_intermediate_name(str output_path, str extension) -> str {\n+        auto dot_pos = _str.index(output_path, '.' as u8);\n+        auto stem;\n+        if (dot_pos < 0) {\n+            stem = output_path;\n+        } else {\n+            stem = _str.substr(output_path, 0u, dot_pos as uint);\n+        }\n+        ret stem + \".\" + extension;\n+    }\n+\n+    fn run_passes(session.session sess, ModuleRef llmod, str output) {\n+        auto pm = mk_pass_manager();\n+        auto opts = sess.get_opts();\n+\n+        // TODO: run the linter here also, once there are llvm-c bindings for\n+        // it.\n+\n+        // Generate a pre-optimization intermediate file if -save-temps was\n+        // specified.\n+        if (opts.save_temps) {\n+            alt (opts.output_type) {\n+                case (output_type_bitcode) {\n+                    if (opts.optimize) {\n+                        auto filename = mk_intermediate_name(output,\n+                                                             \"no-opt.bc\");\n+                        llvm.LLVMWriteBitcodeToFile(llmod,\n+                                                    _str.buf(filename));\n+                    }\n+                }\n+                case (_) {\n+                    auto filename = mk_intermediate_name(output, \"bc\");\n+                    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n+                }\n+            }\n+        }\n+\n+        // FIXME: This is mostly a copy of the bits of opt's -O2 that are\n+        // available in the C api.\n+        // FIXME2: We might want to add optimization levels like -O1, -O2,\n+        // -Os, etc\n+        // FIXME3: Should we expose and use the pass lists used by the opt\n+        // tool?\n+        if (opts.optimize) {\n+            auto fpm = mk_pass_manager();\n+\n+            // createStandardFunctionPasses\n+            llvm.LLVMAddTypeBasedAliasAnalysisPass(fpm.llpm);\n+            llvm.LLVMAddBasicAliasAnalysisPass(fpm.llpm);\n+            llvm.LLVMAddCFGSimplificationPass(fpm.llpm);\n+            llvm.LLVMAddScalarReplAggregatesPass(fpm.llpm);\n+            llvm.LLVMAddEarlyCSEPass(fpm.llpm);\n+\n+            llvm.LLVMRunPassManager(fpm.llpm, llmod);\n+\n+            // createStandardModulePasses\n+            llvm.LLVMAddTypeBasedAliasAnalysisPass(pm.llpm);\n+            llvm.LLVMAddBasicAliasAnalysisPass(pm.llpm);\n+            llvm.LLVMAddGlobalOptimizerPass(pm.llpm);\n+            llvm.LLVMAddIPSCCPPass(pm.llpm);\n+            llvm.LLVMAddDeadArgEliminationPass(pm.llpm);\n+            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+            llvm.LLVMAddPruneEHPass(pm.llpm);\n+            llvm.LLVMAddFunctionInliningPass(pm.llpm);\n+            llvm.LLVMAddFunctionAttrsPass(pm.llpm);\n+            llvm.LLVMAddScalarReplAggregatesPassSSA(pm.llpm);\n+            llvm.LLVMAddEarlyCSEPass(pm.llpm);\n+            llvm.LLVMAddSimplifyLibCallsPass(pm.llpm);\n+            llvm.LLVMAddJumpThreadingPass(pm.llpm);\n+            llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n+            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+            llvm.LLVMAddTailCallEliminationPass(pm.llpm);\n+            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+            llvm.LLVMAddReassociatePass(pm.llpm);\n+            llvm.LLVMAddLoopRotatePass(pm.llpm);\n+            llvm.LLVMAddLICMPass(pm.llpm);\n+            llvm.LLVMAddLoopUnswitchPass(pm.llpm);\n+            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+            llvm.LLVMAddIndVarSimplifyPass(pm.llpm);\n+            llvm.LLVMAddLoopIdiomPass(pm.llpm);\n+            llvm.LLVMAddLoopDeletionPass(pm.llpm);\n+            llvm.LLVMAddLoopUnrollPass(pm.llpm);\n+            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+            llvm.LLVMAddGVNPass(pm.llpm);\n+            llvm.LLVMAddMemCpyOptPass(pm.llpm);\n+            llvm.LLVMAddSCCPPass(pm.llpm);\n+            llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n+            llvm.LLVMAddJumpThreadingPass(pm.llpm);\n+            llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n+            llvm.LLVMAddDeadStoreEliminationPass(pm.llpm);\n+            llvm.LLVMAddAggressiveDCEPass(pm.llpm);\n+            llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n+            llvm.LLVMAddStripDeadPrototypesPass(pm.llpm);\n+            llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n+            llvm.LLVMAddConstantMergePass(pm.llpm);\n+        }\n+\n+        if (opts.verify) {\n+            llvm.LLVMAddVerifierPass(pm.llpm);\n+        }\n+\n+        // TODO: Write .s if -c was specified and -save-temps was on.\n+        if (is_object_or_assembly(opts.output_type)) {\n+            let int LLVMAssemblyFile = 0;\n+            let int LLVMObjectFile = 1;\n+            let int LLVMNullFile = 2;\n+            auto FileType;\n+            if (opts.output_type == output_type_object) {\n+                FileType = LLVMObjectFile;\n+            } else {\n+                FileType = LLVMAssemblyFile;\n+            }\n+\n+            // Write optimized bitcode if --save-temps was on.\n+            if (opts.save_temps) {\n+                alt (opts.output_type) {\n+                    case (output_type_bitcode) { /* nothing to do */ }\n+                    case (_) {\n+                        auto filename = mk_intermediate_name(output,\n+                                                             \"opt.bc\");\n+                        llvm.LLVMRunPassManager(pm.llpm, llmod);\n+                        llvm.LLVMWriteBitcodeToFile(llmod,\n+                                                    _str.buf(filename));\n+                        pm = mk_pass_manager();\n+                    }\n+                }\n+            }\n+\n+            llvm.LLVMRustWriteOutputFile(pm.llpm, llmod,\n+                                         _str.buf(x86.get_target_triple()),\n+                                         _str.buf(output),\n+                                         FileType);\n+            llvm.LLVMDisposeModule(llmod);\n+            ret;\n+        }\n+\n+        llvm.LLVMRunPassManager(pm.llpm, llmod);\n+\n+        llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n+        llvm.LLVMDisposeModule(llmod);\n+    }\n+}\n+"}, {"sha": "dd10eee56219797c8786be34413b921fe6a69e3e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "patch": "@@ -11,6 +11,7 @@ import middle.capture;\n import middle.ty;\n import middle.typeck;\n import middle.typestate_check;\n+import back.Link;\n import lib.llvm;\n import util.common;\n \n@@ -30,6 +31,8 @@ import std.GetOpts.optmulti;\n import std.GetOpts.optflag;\n import std.GetOpts.opt_present;\n \n+import back.Link.output_type;\n+\n fn default_environment(session.session sess,\n                        str argv0,\n                        str input) -> eval.env {\n@@ -86,7 +89,7 @@ fn compile_input(session.session sess,\n     auto p = parser.new_parser(sess, env, def, input, 0u);\n     auto crate = time[@ast.crate](time_passes, \"parsing\",\n                                   bind parse_input(sess, p, input));\n-    if (sess.get_opts().output_type == trans.output_type_none) {ret;}\n+    if (sess.get_opts().output_type == Link.output_type_none) {ret;}\n \n     crate = time[@ast.crate](time_passes, \"external crate reading\",\n                              bind creader.read_crates(sess, crate));\n@@ -111,7 +114,7 @@ fn compile_input(session.session sess,\n         bind trans.trans_crate(sess, crate, ty_cx, type_cache, output));\n \n     time[()](time_passes, \"LLVM passes\",\n-             bind trans.run_passes(sess, llmod, output));\n+             bind Link.Write.run_passes(sess, llmod, output));\n }\n \n fn pretty_print_input(session.session sess,\n@@ -197,14 +200,16 @@ fn main(vec[str] args) {\n     auto shared = opt_present(match, \"shared\");\n     auto output_file = GetOpts.opt_maybe_str(match, \"o\");\n     auto library_search_paths = GetOpts.opt_strs(match, \"L\");\n-    auto output_type = trans.output_type_bitcode;\n+\n+    auto output_type = Link.output_type_bitcode;\n     if (opt_present(match, \"parse-only\")) {\n-        output_type = trans.output_type_none;\n+        output_type = Link.output_type_none;\n     } else if (opt_present(match, \"S\")) {\n-        output_type = trans.output_type_assembly;\n+        output_type = Link.output_type_assembly;\n     } else if (opt_present(match, \"c\")) {\n-        output_type = trans.output_type_object;\n+        output_type = Link.output_type_object;\n     }\n+\n     auto verify = !opt_present(match, \"noverify\");\n     auto save_temps = opt_present(match, \"save-temps\");\n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n@@ -268,14 +273,10 @@ fn main(vec[str] args) {\n                 let vec[str] parts = _str.split(ifile, '.' as u8);\n                 _vec.pop[str](parts);\n                 alt (output_type) {\n-                    case (trans.output_type_none)\n-                        { parts += vec(\"pp\"); }\n-                    case (trans.output_type_bitcode)\n-                        { parts += vec(\"bc\"); }\n-                    case (trans.output_type_assembly)\n-                        { parts += vec(\"s\"); }\n-                    case (trans.output_type_object)\n-                        { parts += vec(\"o\"); }\n+                    case (Link.output_type_none) { parts += vec(\"pp\"); }\n+                    case (Link.output_type_bitcode) { parts += vec(\"bc\"); }\n+                    case (Link.output_type_assembly) { parts += vec(\"s\"); }\n+                    case (Link.output_type_object) { parts += vec(\"o\"); }\n                 }\n                 auto ofile = _str.connect(parts, \".\");\n                 compile_input(sess, env, ifile, ofile);"}, {"sha": "cf34bb7cf8ff6be03de603e730ff6bd6be7a9ce4", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "patch": "@@ -32,7 +32,7 @@ type options = rec(bool shared,\n                    bool run_typestate,\n                    bool save_temps,\n                    bool time_passes,\n-                   middle.trans.output_type output_type,\n+                   back.Link.output_type output_type,\n                    vec[str] library_search_paths,\n                    str sysroot);\n "}, {"sha": "b479efef2a503b1d6341e25b1f93f217c6b3fda2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 158, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "patch": "@@ -15,6 +15,7 @@ import front.creader;\n import pretty.pprust;\n import driver.session;\n import middle.ty;\n+import back.Link;\n import back.x86;\n import back.abi;\n \n@@ -32,7 +33,6 @@ import lib.llvm.builder;\n import lib.llvm.target_data;\n import lib.llvm.type_handle;\n import lib.llvm.type_names;\n-import lib.llvm.mk_pass_manager;\n import lib.llvm.mk_target_data;\n import lib.llvm.mk_type_handle;\n import lib.llvm.mk_type_names;\n@@ -7217,161 +7217,6 @@ fn trap(@block_ctxt bcx) {\n     let vec[ValueRef] v = vec();\n     bcx.build.Call(bcx.fcx.lcx.ccx.intrinsics.get(\"llvm.trap\"), v);\n }\n-tag output_type {\n-    output_type_none;\n-    output_type_bitcode;\n-    output_type_assembly;\n-    output_type_object;\n-}\n-\n-// Decides what to call an intermediate file, given the name of the output and\n-// the extension to use.\n-fn mk_intermediate_name(str output_path, str extension) -> str {\n-    auto dot_pos = _str.index(output_path, '.' as u8);\n-    auto stem;\n-    if (dot_pos < 0) {\n-        stem = output_path;\n-    } else {\n-        stem = _str.substr(output_path, 0u, dot_pos as uint);\n-    }\n-    ret stem + \".\" + extension;\n-}\n-\n-fn is_object_or_assembly(output_type ot) -> bool {\n-    if (ot == output_type_assembly) {\n-        ret true;\n-    }\n-    if (ot == output_type_object) {\n-        ret true;\n-    }\n-    ret false;\n-}\n-\n-fn run_passes(session.session sess, ModuleRef llmod, str output) {\n-    auto pm = mk_pass_manager();\n-    auto opts = sess.get_opts();\n-\n-    // TODO: run the linter here also, once there are llvm-c bindings for it.\n-\n-    // Generate a pre-optimization intermediate file if -save-temps was\n-    // specified.\n-    if (opts.save_temps) {\n-        alt (opts.output_type) {\n-            case (output_type_bitcode) {\n-                if (opts.optimize) {\n-                    auto filename = mk_intermediate_name(output, \"no-opt.bc\");\n-                    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n-                }\n-            }\n-            case (_) {\n-                auto filename = mk_intermediate_name(output, \"bc\");\n-                llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n-            }\n-        }\n-    }\n-\n-    // FIXME: This is mostly a copy of the bits of opt's -O2 that are\n-    // available in the C api.\n-    // FIXME2: We might want to add optmization levels like -O1, -O2, -Os, etc\n-    // FIXME3: Should we expose and use the pass lists used by the opt tool?\n-    if (opts.optimize) {\n-        auto fpm = mk_pass_manager();\n-\n-        // createStandardFunctionPasses\n-        llvm.LLVMAddTypeBasedAliasAnalysisPass(fpm.llpm);\n-        llvm.LLVMAddBasicAliasAnalysisPass(fpm.llpm);\n-        llvm.LLVMAddCFGSimplificationPass(fpm.llpm);\n-        llvm.LLVMAddScalarReplAggregatesPass(fpm.llpm);\n-        llvm.LLVMAddEarlyCSEPass(fpm.llpm);\n-\n-        llvm.LLVMRunPassManager(fpm.llpm, llmod);\n-\n-        // createStandardModulePasses\n-        llvm.LLVMAddTypeBasedAliasAnalysisPass(pm.llpm);\n-        llvm.LLVMAddBasicAliasAnalysisPass(pm.llpm);\n-        llvm.LLVMAddGlobalOptimizerPass(pm.llpm);\n-        llvm.LLVMAddIPSCCPPass(pm.llpm);\n-        llvm.LLVMAddDeadArgEliminationPass(pm.llpm);\n-        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-        llvm.LLVMAddPruneEHPass(pm.llpm);\n-        llvm.LLVMAddFunctionInliningPass(pm.llpm);\n-        llvm.LLVMAddFunctionAttrsPass(pm.llpm);\n-        llvm.LLVMAddScalarReplAggregatesPassSSA(pm.llpm);\n-        llvm.LLVMAddEarlyCSEPass(pm.llpm);\n-        llvm.LLVMAddSimplifyLibCallsPass(pm.llpm);\n-        llvm.LLVMAddJumpThreadingPass(pm.llpm);\n-        llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n-        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-        llvm.LLVMAddTailCallEliminationPass(pm.llpm);\n-        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-        llvm.LLVMAddReassociatePass(pm.llpm);\n-        llvm.LLVMAddLoopRotatePass(pm.llpm);\n-        llvm.LLVMAddLICMPass(pm.llpm);\n-        llvm.LLVMAddLoopUnswitchPass(pm.llpm);\n-        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-        llvm.LLVMAddIndVarSimplifyPass(pm.llpm);\n-        llvm.LLVMAddLoopIdiomPass(pm.llpm);\n-        llvm.LLVMAddLoopDeletionPass(pm.llpm);\n-        llvm.LLVMAddLoopUnrollPass(pm.llpm);\n-        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-        llvm.LLVMAddGVNPass(pm.llpm);\n-        llvm.LLVMAddMemCpyOptPass(pm.llpm);\n-        llvm.LLVMAddSCCPPass(pm.llpm);\n-        llvm.LLVMAddInstructionCombiningPass(pm.llpm);\n-        llvm.LLVMAddJumpThreadingPass(pm.llpm);\n-        llvm.LLVMAddCorrelatedValuePropagationPass(pm.llpm);\n-        llvm.LLVMAddDeadStoreEliminationPass(pm.llpm);\n-        llvm.LLVMAddAggressiveDCEPass(pm.llpm);\n-        llvm.LLVMAddCFGSimplificationPass(pm.llpm);\n-        llvm.LLVMAddStripDeadPrototypesPass(pm.llpm);\n-        llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n-        llvm.LLVMAddConstantMergePass(pm.llpm);\n-    }\n-\n-    if (opts.verify) {\n-        llvm.LLVMAddVerifierPass(pm.llpm);\n-    }\n-\n-    // TODO: Write .s if -c was specified and -save-temps was on.\n-    if (is_object_or_assembly(opts.output_type)) {\n-        let int LLVMAssemblyFile = 0;\n-        let int LLVMObjectFile = 1;\n-        let int LLVMNullFile = 2;\n-        auto FileType;\n-        if (opts.output_type == output_type_object) {\n-            FileType = LLVMObjectFile;\n-        } else {\n-            FileType = LLVMAssemblyFile;\n-        }\n-\n-        // Write optimized bitcode if --save-temps was on.\n-        if (opts.save_temps) {\n-            alt (opts.output_type) {\n-                case (output_type_bitcode) { /* nothing to do */ }\n-                case (_) {\n-                    auto filename = mk_intermediate_name(output, \"opt.bc\");\n-                    llvm.LLVMRunPassManager(pm.llpm, llmod);\n-                    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n-                    pm = mk_pass_manager();\n-                }\n-            }\n-        }\n-\n-        llvm.LLVMRustWriteOutputFile(pm.llpm, llmod,\n-                                     _str.buf(x86.get_target_triple()),\n-                                     _str.buf(output),\n-                                     FileType);\n-        llvm.LLVMDisposeModule(llmod);\n-        ret;\n-    }\n-\n-    llvm.LLVMRunPassManager(pm.llpm, llmod);\n-\n-    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n-    llvm.LLVMDisposeModule(llmod);\n-}\n \n fn decl_no_op_type_glue(ModuleRef llmod, type_names tn) -> ValueRef {\n     auto ty = T_fn(vec(T_taskptr(tn), T_ptr(T_i8())), T_void());\n@@ -7736,9 +7581,10 @@ fn make_common_glue(session.session sess, str output) {\n     make_memcpy_glue(glues.memcpy_glue);\n     make_bzero_glue(glues.bzero_glue);\n \n-    trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n+    trans.trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn,\n+                               llmod);\n \n-    run_passes(sess, llmod, output);\n+    Link.Write.run_passes(sess, llmod, output);\n }\n \n fn create_module_map(@crate_ctxt ccx) -> ValueRef {"}, {"sha": "4f4b084934fff667d324ff500770677141638bd1", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "patch": "@@ -33,6 +33,7 @@ mod front {\n }\n \n mod back {\n+    mod Link;\n     mod abi;\n     mod x86;\n }"}]}