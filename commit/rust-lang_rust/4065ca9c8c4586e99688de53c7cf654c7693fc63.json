{"sha": "4065ca9c8c4586e99688de53c7cf654c7693fc63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjVjYTljOGM0NTg2ZTk5Njg4ZGU1M2M3Y2Y2NTRjNzY5M2ZjNjM=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-23T08:04:11Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Move `manual_mul_add` into `suboptimal_flops` lint", "tree": {"sha": "5e5600d2173fbb02691ee68fe87f9768f11d073e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5600d2173fbb02691ee68fe87f9768f11d073e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4065ca9c8c4586e99688de53c7cf654c7693fc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4065ca9c8c4586e99688de53c7cf654c7693fc63", "html_url": "https://github.com/rust-lang/rust/commit/4065ca9c8c4586e99688de53c7cf654c7693fc63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4065ca9c8c4586e99688de53c7cf654c7693fc63/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454e505c12d6ca2d3c360e9d33d629c2e5652514", "url": "https://api.github.com/repos/rust-lang/rust/commits/454e505c12d6ca2d3c360e9d33d629c2e5652514", "html_url": "https://github.com/rust-lang/rust/commit/454e505c12d6ca2d3c360e9d33d629c2e5652514"}], "stats": {"total": 469, "additions": 179, "deletions": 290}, "files": [{"sha": "ce696aa85501f17dc0944b0fc681cc09f4e0f544", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -1210,7 +1210,6 @@ Released 2018-09-13\n [`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n-[`manual_mul_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_mul_add\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names"}, {"sha": "fbc375c655e6dc56f89e9e6687554af16331af4d", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -2,11 +2,11 @@ use crate::consts::{\n     constant, Constant,\n     Constant::{F32, F64},\n };\n-use crate::utils::*;\n+use crate::utils::{span_lint_and_sugg, sugg};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_errors::Applicability;\n-use rustc_hir::*;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::f32::consts as f32_consts;\n@@ -39,6 +39,7 @@ declare_clippy_lint! {\n     /// let _ = (1.0 + a).ln();\n     /// let _ = a.exp() - 1.0;\n     /// let _ = a.powf(2.0);\n+    /// let _ = a * 2.0 + 4.0;\n     /// ```\n     ///\n     /// is better expressed as\n@@ -57,6 +58,7 @@ declare_clippy_lint! {\n     /// let _ = a.ln_1p();\n     /// let _ = a.exp_m1();\n     /// let _ = a.powi(2);\n+    /// let _ = a.mul_add(2.0, 4.0);\n     /// ```\n     pub SUBOPTIMAL_FLOPS,\n     nursery,\n@@ -211,12 +213,12 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n         let (help, suggestion) = if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n             (\n                 \"square-root of a number can be computed more efficiently and accurately\",\n-                format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\"))\n+                format!(\"{}.sqrt()\", Sugg::hir(cx, &args[0], \"..\")),\n             )\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n             (\n                 \"cube-root of a number can be computed more accurately\",\n-                format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\"))\n+                format!(\"{}.cbrt()\", Sugg::hir(cx, &args[0], \"..\")),\n             )\n         } else if let Some(exponent) = get_integer_from_float_constant(&value) {\n             (\n@@ -225,7 +227,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n                     \"{}.powi({})\",\n                     Sugg::hir(cx, &args[0], \"..\"),\n                     format_numeric_literal(&exponent.to_string(), None, false)\n-                )\n+                ),\n             )\n         } else {\n             return;\n@@ -272,6 +274,52 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn is_float_mul_expr<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'a>) -> Option<(&'a Expr<'a>, &'a Expr<'a>)> {\n+    if_chain! {\n+        if let ExprKind::Binary(op, ref lhs, ref rhs) = &expr.kind;\n+        if let BinOpKind::Mul = op.node;\n+        if cx.tables.expr_ty(lhs).is_floating_point();\n+        if cx.tables.expr_ty(rhs).is_floating_point();\n+        then {\n+            return Some((lhs, rhs));\n+        }\n+    }\n+\n+    None\n+}\n+\n+// TODO: Fix rust-lang/rust-clippy#4735\n+fn check_fma(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Binary(op, lhs, rhs) = &expr.kind;\n+        if let BinOpKind::Add = op.node;\n+        then {\n+            let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n+                (inner_lhs, inner_rhs, rhs)\n+            } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n+                (inner_lhs, inner_rhs, lhs)\n+            } else {\n+                return;\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"multiply and add expressions can be calculated more efficiently and accurately\",\n+                \"consider using\",\n+                format!(\n+                    \"{}.mul_add({}, {})\",\n+                    prepare_receiver_sugg(cx, recv),\n+                    Sugg::hir(cx, arg1, \"..\"),\n+                    Sugg::hir(cx, arg2, \"..\"),\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n@@ -287,6 +335,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n             }\n         } else {\n             check_expm1(cx, expr);\n+            check_fma(cx, expr);\n         }\n     }\n }"}, {"sha": "503eb9ec10d6e85389d2d946ea335f66496f2c96", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -208,6 +208,7 @@ pub mod exit;\n pub mod explicit_write;\n pub mod fallible_impl_from;\n pub mod float_literal;\n+pub mod floating_point_arithmetic;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n@@ -248,7 +249,6 @@ pub mod missing_const_for_fn;\n pub mod missing_doc;\n pub mod missing_inline;\n pub mod modulo_arithmetic;\n-pub mod mul_add;\n pub mod multiple_crate_versions;\n pub mod mut_key;\n pub mod mut_mut;\n@@ -691,7 +691,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         &missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n         &modulo_arithmetic::MODULO_ARITHMETIC,\n-        &mul_add::MANUAL_MUL_ADD,\n         &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n         &mut_key::MUTABLE_KEY_TYPE,\n         &mut_mut::MUT_MUT,\n@@ -967,7 +966,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box inherent_to_string::InherentToString);\n     store.register_late_pass(|| box trait_bounds::TraitBounds);\n     store.register_late_pass(|| box comparison_chain::ComparisonChain);\n-    store.register_late_pass(|| box mul_add::MulAddCheck);\n     store.register_late_pass(|| box mut_key::MutableKeyType);\n     store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n     store.register_early_pass(|| box reference::DerefAddrOf);\n@@ -1652,7 +1650,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&floating_point_arithmetic::SUBOPTIMAL_FLOPS),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n-        LintId::of(&mul_add::MANUAL_MUL_ADD),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),"}, {"sha": "57e56d8f959a3421c637459c4ce77bb6cbd71fe5", "filename": "clippy_lints/src/mul_add.rs", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/clippy_lints%2Fsrc%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/clippy_lints%2Fsrc%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmul_add.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,111 +0,0 @@\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-use crate::utils::{snippet, span_lint_and_sugg};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for expressions of the form `a * b + c`\n-    /// or `c + a * b` where `a`, `b`, `c` are floats and suggests using\n-    /// `a.mul_add(b, c)` instead.\n-    ///\n-    /// **Why is this bad?** Calculating `a * b + c` may lead to slight\n-    /// numerical inaccuracies as `a * b` is rounded before being added to\n-    /// `c`. Depending on the target architecture, `mul_add()` may be more\n-    /// performant.\n-    ///\n-    /// **Known problems:** This lint can emit semantic incorrect suggestions.\n-    /// For example, for `a * b * c + d` the suggestion `a * b.mul_add(c, d)`\n-    /// is emitted, which is equivalent to `a * (b * c + d)`. (#4735)\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// # let a = 0_f32;\n-    /// # let b = 0_f32;\n-    /// # let c = 0_f32;\n-    /// let foo = (a * b) + c;\n-    /// ```\n-    ///\n-    /// can be written as\n-    ///\n-    /// ```rust\n-    /// # let a = 0_f32;\n-    /// # let b = 0_f32;\n-    /// # let c = 0_f32;\n-    /// let foo = a.mul_add(b, c);\n-    /// ```\n-    pub MANUAL_MUL_ADD,\n-    nursery,\n-    \"Using `a.mul_add(b, c)` for floating points has higher numerical precision than `a * b + c`\"\n-}\n-\n-declare_lint_pass!(MulAddCheck => [MANUAL_MUL_ADD]);\n-\n-fn is_float<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr<'_>) -> bool {\n-    cx.tables.expr_ty(expr).is_floating_point()\n-}\n-\n-// Checks whether expression is multiplication of two floats\n-fn is_float_mult_expr<'a, 'tcx, 'b>(\n-    cx: &LateContext<'a, 'tcx>,\n-    expr: &'b Expr<'b>,\n-) -> Option<(&'b Expr<'b>, &'b Expr<'b>)> {\n-    if let ExprKind::Binary(op, lhs, rhs) = &expr.kind {\n-        if let BinOpKind::Mul = op.node {\n-            if is_float(cx, &lhs) && is_float(cx, &rhs) {\n-                return Some((&lhs, &rhs));\n-            }\n-        }\n-    }\n-\n-    None\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Binary(op, lhs, rhs) = &expr.kind {\n-            if let BinOpKind::Add = op.node {\n-                //Converts mult_lhs * mult_rhs + rhs to mult_lhs.mult_add(mult_rhs, rhs)\n-                if let Some((mult_lhs, mult_rhs)) = is_float_mult_expr(cx, lhs) {\n-                    if is_float(cx, rhs) {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            MANUAL_MUL_ADD,\n-                            expr.span,\n-                            \"consider using `mul_add()` for better numerical precision\",\n-                            \"try\",\n-                            format!(\n-                                \"{}.mul_add({}, {})\",\n-                                snippet(cx, mult_lhs.span, \"_\"),\n-                                snippet(cx, mult_rhs.span, \"_\"),\n-                                snippet(cx, rhs.span, \"_\"),\n-                            ),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n-                //Converts lhs + mult_lhs * mult_rhs to mult_lhs.mult_add(mult_rhs, lhs)\n-                if let Some((mult_lhs, mult_rhs)) = is_float_mult_expr(cx, rhs) {\n-                    if is_float(cx, lhs) {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            MANUAL_MUL_ADD,\n-                            expr.span,\n-                            \"consider using `mul_add()` for better numerical precision\",\n-                            \"try\",\n-                            format!(\n-                                \"{}.mul_add({}, {})\",\n-                                snippet(cx, mult_lhs.span, \"_\"),\n-                                snippet(cx, mult_rhs.span, \"_\"),\n-                                snippet(cx, lhs.span, \"_\"),\n-                            ),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "5b4aad347af2029d67cca40801d7068115d1fe42", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -1022,13 +1022,6 @@ pub const ALL_LINTS: [Lint; 357] = [\n         deprecation: None,\n         module: \"loops\",\n     },\n-    Lint {\n-        name: \"manual_mul_add\",\n-        group: \"nursery\",\n-        desc: \"Using `a.mul_add(b, c)` for floating points has higher numerical precision than `a * b + c`\",\n-        deprecation: None,\n-        module: \"mul_add\",\n-    },\n     Lint {\n         name: \"manual_saturating_arithmetic\",\n         group: \"style\","}, {"sha": "e343c37740da5f8207c5999238b2f48655914e35", "filename": "tests/ui/floating_point_fma.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_fma.fixed?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+    let d: f64 = 0.0001;\n+\n+    let _ = a.mul_add(b, c);\n+    let _ = a.mul_add(b, c);\n+    let _ = 2.0f64.mul_add(4.0, a);\n+    let _ = 2.0f64.mul_add(4., a);\n+\n+    let _ = a.mul_add(b, c);\n+    let _ = a.mul_add(b, c);\n+    let _ = (a * b).mul_add(c, d);\n+\n+    let _ = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n+    let _ = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n+}"}, {"sha": "810f929c8568b9bc1573e6c0ad976ac55933a785", "filename": "tests/ui/floating_point_fma.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_fma.rs?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let a: f64 = 1234.567;\n+    let b: f64 = 45.67834;\n+    let c: f64 = 0.0004;\n+    let d: f64 = 0.0001;\n+\n+    let _ = a * b + c;\n+    let _ = c + a * b;\n+    let _ = a + 2.0 * 4.0;\n+    let _ = a + 2. * 4.;\n+\n+    let _ = (a * b) + c;\n+    let _ = c + (a * b);\n+    let _ = a * b * c + d;\n+\n+    let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n+    let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+}"}, {"sha": "5c653360ebc8f084fc9571278096e34e7616918f", "filename": "tests/ui/floating_point_fma.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_fma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_fma.stderr?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -0,0 +1,58 @@\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:10:13\n+   |\n+LL |     let _ = a * b + c;\n+   |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:11:13\n+   |\n+LL |     let _ = c + a * b;\n+   |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:12:13\n+   |\n+LL |     let _ = a + 2.0 * 4.0;\n+   |             ^^^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4.0, a)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:13:13\n+   |\n+LL |     let _ = a + 2. * 4.;\n+   |             ^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4., a)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:15:13\n+   |\n+LL |     let _ = (a * b) + c;\n+   |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:16:13\n+   |\n+LL |     let _ = c + (a * b);\n+   |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:17:13\n+   |\n+LL |     let _ = a * b * c + d;\n+   |             ^^^^^^^^^^^^^ help: consider using: `(a * b).mul_add(c, d)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:19:13\n+   |\n+LL |     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_fma.rs:20:13\n+   |\n+LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "afe72a8dd110dce3f04531eea199994d1aa3e571", "filename": "tests/ui/floating_point_log.fixed", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.fixed?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -24,34 +24,34 @@ fn check_ln1p() {\n     let _ = 2.0f32.ln_1p();\n     let _ = 2.0f32.ln_1p();\n     let _ = x.ln_1p();\n-    let _ = (x * 2.0).ln_1p();\n+    let _ = (x / 2.0).ln_1p();\n     let _ = x.powi(2).ln_1p();\n-    let _ = (x.powi(2) * 2.0).ln_1p();\n+    let _ = (x.powi(2) / 2.0).ln_1p();\n     let _ = ((std::f32::consts::E - 1.0)).ln_1p();\n     let _ = x.ln_1p();\n     let _ = x.powi(2).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n-    let _ = (x * 2.0).ln_1p();\n+    let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n     let _ = (x + 1.0 + 2.0).ln();\n-    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (x + 1.0 / 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n \n     let x = 1f64;\n     let _ = 2.0f64.ln_1p();\n     let _ = 2.0f64.ln_1p();\n     let _ = x.ln_1p();\n-    let _ = (x * 2.0).ln_1p();\n+    let _ = (x / 2.0).ln_1p();\n     let _ = x.powi(2).ln_1p();\n     let _ = x.ln_1p();\n     let _ = x.powi(2).ln_1p();\n     let _ = (x + 2.0).ln_1p();\n-    let _ = (x * 2.0).ln_1p();\n+    let _ = (x / 2.0).ln_1p();\n     // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n     let _ = (x + 1.0 + 2.0).ln();\n-    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (x + 1.0 / 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n }\n "}, {"sha": "785b5a3bc4872980b06694264696f43c08b0541e", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -24,34 +24,34 @@ fn check_ln1p() {\n     let _ = (1f32 + 2.).ln();\n     let _ = (1f32 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n-    let _ = (1.0 + x * 2.0).ln();\n+    let _ = (1.0 + x / 2.0).ln();\n     let _ = (1.0 + x.powi(2)).ln();\n-    let _ = (1.0 + x.powi(2) * 2.0).ln();\n+    let _ = (1.0 + x.powi(2) / 2.0).ln();\n     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n     let _ = (x + 1.0).ln();\n     let _ = (x.powi(2) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n-    let _ = (x * 2.0 + 1.0).ln();\n+    let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n     let _ = (x + 1.0 + 2.0).ln();\n-    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (x + 1.0 / 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n \n     let x = 1f64;\n     let _ = (1f64 + 2.).ln();\n     let _ = (1f64 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n-    let _ = (1.0 + x * 2.0).ln();\n+    let _ = (1.0 + x / 2.0).ln();\n     let _ = (1.0 + x.powi(2)).ln();\n     let _ = (x + 1.0).ln();\n     let _ = (x.powi(2) + 1.0).ln();\n     let _ = (x + 2.0 + 1.0).ln();\n-    let _ = (x * 2.0 + 1.0).ln();\n+    let _ = (x / 2.0 + 1.0).ln();\n     // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n     let _ = (x + 1.0 + 2.0).ln();\n-    let _ = (x + 1.0 * 2.0).ln();\n+    let _ = (x + 1.0 / 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n }\n "}, {"sha": "cb0bb6d652a8f12954f5bbd8bcb69f2291825727", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4065ca9c8c4586e99688de53c7cf654c7693fc63/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=4065ca9c8c4586e99688de53c7cf654c7693fc63", "patch": "@@ -69,8 +69,8 @@ LL |     let _ = (1.0 + x).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:27:13\n    |\n-LL |     let _ = (1.0 + x * 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:28:13\n@@ -81,8 +81,8 @@ LL |     let _ = (1.0 + x.powi(2)).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:29:13\n    |\n-LL |     let _ = (1.0 + x.powi(2) * 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) * 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x.powi(2) / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:30:13\n@@ -111,8 +111,8 @@ LL |     let _ = (x + 2.0 + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:34:13\n    |\n-LL |     let _ = (x * 2.0 + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+LL |     let _ = (x / 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:42:13\n@@ -135,8 +135,8 @@ LL |     let _ = (1.0 + x).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:45:13\n    |\n-LL |     let _ = (1.0 + x * 2.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+LL |     let _ = (1.0 + x / 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:46:13\n@@ -165,8 +165,8 @@ LL |     let _ = (x + 2.0 + 1.0).ln();\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:50:13\n    |\n-LL |     let _ = (x * 2.0 + 1.0).ln();\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+LL |     let _ = (x / 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x / 2.0).ln_1p()`\n \n error: aborting due to 28 previous errors\n "}, {"sha": "1322e002c64131f1530ea88ddce87a65c1018714", "filename": "tests/ui/mul_add.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,16 +0,0 @@\n-#![warn(clippy::manual_mul_add)]\n-#![allow(unused_variables)]\n-\n-fn mul_add_test() {\n-    let a: f64 = 1234.567;\n-    let b: f64 = 45.67834;\n-    let c: f64 = 0.0004;\n-\n-    // Examples of not auto-fixable expressions\n-    let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n-    let test2 = 1234.567 * 45.67834 + 0.0004;\n-}\n-\n-fn main() {\n-    mul_add_test();\n-}"}, {"sha": "3b21646f7c3012ed987d58de03b965285a0439c3", "filename": "tests/ui/mul_add.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add.stderr?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,34 +0,0 @@\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add.rs:10:17\n-   |\n-LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(a * b + c).mul_add((c + a * b), (c + (a * b) + c))`\n-   |\n-   = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add.rs:10:17\n-   |\n-LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n-   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add.rs:10:31\n-   |\n-LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n-   |                               ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add.rs:10:46\n-   |\n-LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n-   |                                              ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add.rs:11:17\n-   |\n-LL |     let test2 = 1234.567 * 45.67834 + 0.0004;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1234.567.mul_add(45.67834, 0.0004)`\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "4af7c7e3e1a5d04f342e74bb252b314420a5fd8d", "filename": "tests/ui/mul_add_fixable.fixed", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.fixed?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,24 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::manual_mul_add)]\n-#![allow(unused_variables)]\n-\n-fn mul_add_test() {\n-    let a: f64 = 1234.567;\n-    let b: f64 = 45.67834;\n-    let c: f64 = 0.0004;\n-\n-    // Auto-fixable examples\n-    let test1 = a.mul_add(b, c);\n-    let test2 = a.mul_add(b, c);\n-\n-    let test3 = a.mul_add(b, c);\n-    let test4 = a.mul_add(b, c);\n-\n-    let test5 = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n-    let test6 = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n-}\n-\n-fn main() {\n-    mul_add_test();\n-}"}, {"sha": "8b42f6f184a4c32b747d10852c5f724c1ea0018f", "filename": "tests/ui/mul_add_fixable.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.rs?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,24 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::manual_mul_add)]\n-#![allow(unused_variables)]\n-\n-fn mul_add_test() {\n-    let a: f64 = 1234.567;\n-    let b: f64 = 45.67834;\n-    let c: f64 = 0.0004;\n-\n-    // Auto-fixable examples\n-    let test1 = a * b + c;\n-    let test2 = c + a * b;\n-\n-    let test3 = (a * b) + c;\n-    let test4 = c + (a * b);\n-\n-    let test5 = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n-    let test6 = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n-}\n-\n-fn main() {\n-    mul_add_test();\n-}"}, {"sha": "235443f4b02b3ef9c19d41c9f13e89b321c10982", "filename": "tests/ui/mul_add_fixable.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/454e505c12d6ca2d3c360e9d33d629c2e5652514/tests%2Fui%2Fmul_add_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.stderr?ref=454e505c12d6ca2d3c360e9d33d629c2e5652514", "patch": "@@ -1,40 +0,0 @@\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:12:17\n-   |\n-LL |     let test1 = a * b + c;\n-   |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-   |\n-   = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:13:17\n-   |\n-LL |     let test2 = c + a * b;\n-   |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:15:17\n-   |\n-LL |     let test3 = (a * b) + c;\n-   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:16:17\n-   |\n-LL |     let test4 = c + (a * b);\n-   |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:18:17\n-   |\n-LL |     let test5 = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n-\n-error: consider using `mul_add()` for better numerical precision\n-  --> $DIR/mul_add_fixable.rs:19:17\n-   |\n-LL |     let test6 = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n-\n-error: aborting due to 6 previous errors\n-"}]}