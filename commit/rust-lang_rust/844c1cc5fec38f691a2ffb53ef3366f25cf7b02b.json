{"sha": "844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "node_id": "C_kwDOAAsO6NoAKDg0NGMxY2M1ZmVjMzhmNjkxYTJmZmI1M2VmMzM2NmYyNWNmN2IwMmI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T17:30:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T17:40:46Z"}, "message": "Remove DesugaringKind::Replace.", "tree": {"sha": "0994331e0ebf6a9fd5c3e94f3e7bf22615381b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0994331e0ebf6a9fd5c3e94f3e7bf22615381b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "html_url": "https://github.com/rust-lang/rust/commit/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d300bffa4f0036e9138ef752610d08fc63f87a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d300bffa4f0036e9138ef752610d08fc63f87a77", "html_url": "https://github.com/rust-lang/rust/commit/d300bffa4f0036e9138ef752610d08fc63f87a77"}], "stats": {"total": 160, "additions": 78, "deletions": 82}, "files": [{"sha": "15d73ed732f502b7db33c80d4c3f024c858c59ac", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -1635,34 +1635,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             })\n     }\n \n-    /// Reports StorageDeadOrDrop of `place` conflicts with `borrow`.\n-    ///\n-    /// Depending on the origin of the StorageDeadOrDrop, this may be\n-    /// reported as either a drop or an illegal mutation of a borrowed value.\n-    /// The latter is preferred when the this is a drop triggered by a\n-    /// reassignment, as it's more user friendly to report a problem with the\n-    /// explicit assignment than the implicit drop.\n-    #[instrument(level = \"debug\", skip(self))]\n-    pub(crate) fn report_storage_dead_or_drop_of_borrowed(\n-        &mut self,\n-        location: Location,\n-        place_span: (Place<'tcx>, Span),\n-        borrow: &BorrowData<'tcx>,\n-    ) {\n-        // It's sufficient to check the last desugaring as Replace is the last\n-        // one to be applied.\n-        if let Some(DesugaringKind::Replace) = place_span.1.desugaring_kind() {\n-            self.report_illegal_mutation_of_borrowed(location, place_span, borrow)\n-        } else {\n-            self.report_borrowed_value_does_not_live_long_enough(\n-                location,\n-                borrow,\n-                place_span,\n-                Some(WriteKind::StorageDeadOrDrop),\n-            )\n-        }\n-    }\n-\n     /// This means that some data referenced by `borrow` needs to live\n     /// past the point where the StorageDeadOrDrop of `place` occurs.\n     /// This is usually interpreted as meaning that `place` has too"}, {"sha": "d0e17bf5a08489267b701fddb384161ad94c06a6", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -641,13 +641,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             let Some(hir::Node::Item(item)) = node else { return; };\n             let hir::ItemKind::Fn(.., body_id) = item.kind else { return; };\n             let body = self.infcx.tcx.hir().body(body_id);\n-            let mut assign_span = span;\n-            // Drop desugaring is done at MIR build so it's not in the HIR\n-            if let Some(DesugaringKind::Replace) = span.desugaring_kind() {\n-                assign_span.remove_mark();\n-            }\n \n-            let mut v = V { assign_span, err, ty, suggested: false };\n+            let mut v = V { assign_span: span, err, ty, suggested: false };\n             v.visit_body(body);\n             if !v.suggested {\n                 err.help(format!("}, {"sha": "b2ff25ecb96f4e47e1efeccaa0610a21d8d6320f", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -112,11 +112,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             TerminatorKind::SwitchInt { discr, targets: _ } => {\n                 self.consume_operand(location, discr);\n             }\n-            TerminatorKind::Drop { place: drop_place, target: _, unwind: _ } => {\n+            TerminatorKind::Drop { place: drop_place, target: _, unwind: _, replace } => {\n+                let write_kind =\n+                    if *replace { WriteKind::Replace } else { WriteKind::StorageDeadOrDrop };\n                 self.access_place(\n                     location,\n                     *drop_place,\n-                    (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),\n+                    (AccessDepth::Drop, Write(write_kind)),\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }"}, {"sha": "a53ea100c224219c8de6b4ac8bcd8ce7edc0da25", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -685,17 +685,19 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             TerminatorKind::SwitchInt { discr, targets: _ } => {\n                 self.consume_operand(loc, (discr, span), flow_state);\n             }\n-            TerminatorKind::Drop { place, target: _, unwind: _ } => {\n+            TerminatorKind::Drop { place, target: _, unwind: _, replace } => {\n                 debug!(\n                     \"visit_terminator_drop \\\n                      loc: {:?} term: {:?} place: {:?} span: {:?}\",\n                     loc, term, place, span\n                 );\n \n+                let write_kind =\n+                    if *replace { WriteKind::Replace } else { WriteKind::StorageDeadOrDrop };\n                 self.access_place(\n                     loc,\n                     (*place, span),\n-                    (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),\n+                    (AccessDepth::Drop, Write(write_kind)),\n                     LocalMutationIsAllowed::Yes,\n                     flow_state,\n                 );\n@@ -885,6 +887,7 @@ enum ReadKind {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum WriteKind {\n     StorageDeadOrDrop,\n+    Replace,\n     MutableBorrow(BorrowKind),\n     Mutate,\n     Move,\n@@ -1132,13 +1135,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             this.buffer_error(err);\n                         }\n                         WriteKind::StorageDeadOrDrop => this\n-                            .report_storage_dead_or_drop_of_borrowed(location, place_span, borrow),\n+                            .report_borrowed_value_does_not_live_long_enough(\n+                                location,\n+                                borrow,\n+                                place_span,\n+                                Some(WriteKind::StorageDeadOrDrop),\n+                            ),\n                         WriteKind::Mutate => {\n                             this.report_illegal_mutation_of_borrowed(location, place_span, borrow)\n                         }\n                         WriteKind::Move => {\n                             this.report_move_out_while_borrowed(location, place_span, borrow)\n                         }\n+                        WriteKind::Replace => {\n+                            this.report_illegal_mutation_of_borrowed(location, place_span, borrow)\n+                        }\n                     }\n                     Control::Break\n                 }\n@@ -1982,12 +1993,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             Reservation(\n                 WriteKind::Move\n+                | WriteKind::Replace\n                 | WriteKind::StorageDeadOrDrop\n                 | WriteKind::MutableBorrow(BorrowKind::Shared)\n                 | WriteKind::MutableBorrow(BorrowKind::Shallow),\n             )\n             | Write(\n                 WriteKind::Move\n+                | WriteKind::Replace\n                 | WriteKind::StorageDeadOrDrop\n                 | WriteKind::MutableBorrow(BorrowKind::Shared)\n                 | WriteKind::MutableBorrow(BorrowKind::Shallow),"}, {"sha": "fcfa0b862d4b5a8755a13374945a7e57766af4af", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -473,7 +473,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             | TerminatorKind::GeneratorDrop => {\n                 bug!(\"shouldn't exist at codegen {:?}\", bb_data.terminator());\n             }\n-            TerminatorKind::Drop { place, target, unwind: _ } => {\n+            TerminatorKind::Drop { place, target, unwind: _, replace: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n                 crate::abi::codegen_drop(fx, source_info, drop_place);\n "}, {"sha": "40843423701525159a8ae0f83c857f068aa171c2", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -1256,7 +1256,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 MergingSucc::False\n             }\n \n-            mir::TerminatorKind::Drop { place, target, unwind } => {\n+            mir::TerminatorKind::Drop { place, target, unwind, replace: _ } => {\n                 self.codegen_drop_terminator(helper, bx, place, target, unwind, mergeable_succ())\n             }\n "}, {"sha": "586e8f063eeefa588f58d75981f177904be37049", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -114,7 +114,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n             }\n \n-            Drop { place, target, unwind } => {\n+            Drop { place, target, unwind, replace: _ } => {\n                 let frame = self.frame();\n                 let ty = place.ty(&frame.body.local_decls, *self.tcx).ty;\n                 let ty = self.subst_from_frame_and_normalize_erasing_regions(frame, ty)?;"}, {"sha": "6d6d71bc87b1438a1108cf79f7ec1ee81fa87ca9", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -603,7 +603,11 @@ pub enum TerminatorKind<'tcx> {\n     /// > The drop glue is executed if, among all statements executed within this `Body`, an assignment to\n     /// > the place or one of its \"parents\" occurred more recently than a move out of it. This does not\n     /// > consider indirect assignments.\n-    Drop { place: Place<'tcx>, target: BasicBlock, unwind: UnwindAction },\n+    ///\n+    /// The `replace` flag indicates whether this terminator was created as part of an assignment.\n+    /// This should only be used for diagnostic purposes, and does not have any operational\n+    /// meaning.\n+    Drop { place: Place<'tcx>, target: BasicBlock, unwind: UnwindAction, replace: bool },\n \n     /// Roughly speaking, evaluates the `func` operand and the arguments, and starts execution of\n     /// the referred to function. The operand types must match the argument types of the function."}, {"sha": "942654b30749c3c1ea7792140713c6b07291141b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -504,6 +504,7 @@ macro_rules! make_mir_visitor {\n                         place,\n                         target: _,\n                         unwind: _,\n+                        replace: _,\n                     } => {\n                         self.visit_place(\n                             place,"}, {"sha": "ebf830cb9c1f6a2da2120a1266adb3b82cf1ba50", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -57,6 +57,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n                     place: self.parse_place(args[0])?,\n                     target: self.parse_block(args[1])?,\n                     unwind: UnwindAction::Continue,\n+                    replace: false,\n                 })\n             },\n             @call(\"mir_call\", args) => {"}, {"sha": "3742d640e3b58927caa09c5af385c5661cddfad2", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -725,6 +725,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         place: to_drop,\n                         target: success,\n                         unwind: UnwindAction::Continue,\n+                        replace: false,\n                     },\n                 );\n                 this.diverge_from(block);"}, {"sha": "7c0fbc6f81c94721d0a7ad2d1df4f35260921728", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -91,7 +91,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{Expr, LintLevel};\n \n-use rustc_span::{DesugaringKind, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n #[derive(Debug)]\n pub struct Scopes<'tcx> {\n@@ -371,6 +371,7 @@ impl DropTree {\n                         // The caller will handle this if needed.\n                         unwind: UnwindAction::Terminate,\n                         place: drop_data.0.local.into(),\n+                        replace: false,\n                     };\n                     cfg.terminate(block, drop_data.0.source_info, terminator);\n                 }\n@@ -1128,9 +1129,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         place: Place<'tcx>,\n         value: Rvalue<'tcx>,\n     ) -> BlockAnd<()> {\n-        let span = self.tcx.with_stable_hashing_context(|hcx| {\n-            span.mark_with_reason(None, DesugaringKind::Replace, self.tcx.sess.edition(), hcx)\n-        });\n         let source_info = self.source_info(span);\n \n         // create the new block for the assignment\n@@ -1148,6 +1146,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 place,\n                 target: assign,\n                 unwind: UnwindAction::Cleanup(assign_unwind),\n+                replace: true,\n             },\n         );\n         self.diverge_from(block);\n@@ -1261,6 +1260,7 @@ fn build_scope_drops<'tcx>(\n                         place: local.into(),\n                         target: next,\n                         unwind: UnwindAction::Continue,\n+                        replace: false,\n                     },\n                 );\n                 block = next;"}, {"sha": "d615c83d621915e6bf05235b840d3f55394d1ac1", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -237,6 +237,7 @@ where\n                         place: self.place,\n                         target: self.succ,\n                         unwind: self.unwind.into_action(),\n+                        replace: false,\n                     },\n                 );\n             }\n@@ -719,6 +720,7 @@ where\n                 place: tcx.mk_place_deref(ptr),\n                 target: loop_block,\n                 unwind: unwind.into_action(),\n+                replace: false,\n             },\n         );\n \n@@ -963,8 +965,12 @@ where\n     }\n \n     fn drop_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n-        let block =\n-            TerminatorKind::Drop { place: self.place, target, unwind: unwind.into_action() };\n+        let block = TerminatorKind::Drop {\n+            place: self.place,\n+            target,\n+            unwind: unwind.into_action(),\n+            replace: false,\n+        };\n         self.new_block(unwind, block)\n     }\n "}, {"sha": "ba328e78040a51e06b9e29d987607ae779215ceb", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -479,7 +479,7 @@ impl Direction for Forward {\n             Goto { target } => propagate(target, exit_state),\n \n             Assert { target, unwind, expected: _, msg: _, cond: _ }\n-            | Drop { target, unwind, place: _ }\n+            | Drop { target, unwind, place: _, replace: _ }\n             | FalseUnwind { real_target: target, unwind } => {\n                 if let UnwindAction::Cleanup(unwind) = unwind {\n                     propagate(unwind, exit_state);"}, {"sha": "ef2a0c790e9459eab462aee9a09ed8b9c5b2c73f", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -80,7 +80,7 @@ fn add_move_for_packed_drop<'tcx>(\n     is_cleanup: bool,\n ) {\n     debug!(\"add_move_for_packed_drop({:?} @ {:?})\", terminator, loc);\n-    let TerminatorKind::Drop { ref place, target, unwind } = terminator.kind else {\n+    let TerminatorKind::Drop { ref place, target, unwind, replace } = terminator.kind else {\n         unreachable!();\n     };\n \n@@ -98,6 +98,11 @@ fn add_move_for_packed_drop<'tcx>(\n     patch.add_assign(loc, Place::from(temp), Rvalue::Use(Operand::Move(*place)));\n     patch.patch_terminator(\n         loc.block,\n-        TerminatorKind::Drop { place: Place::from(temp), target: storage_dead_block, unwind },\n+        TerminatorKind::Drop {\n+            place: Place::from(temp),\n+            target: storage_dead_block,\n+            unwind,\n+            replace,\n+        },\n     );\n }"}, {"sha": "fda0e1023f7c58fc9696a44af29ec3a1648de52e", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -14,7 +14,7 @@ use rustc_mir_dataflow::un_derefer::UnDerefer;\n use rustc_mir_dataflow::MoveDataParamEnv;\n use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n-use rustc_span::{DesugaringKind, Span};\n+use rustc_span::Span;\n use rustc_target::abi::{FieldIdx, VariantIdx};\n use std::fmt;\n \n@@ -401,7 +401,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             let terminator = data.terminator();\n \n             match terminator.kind {\n-                TerminatorKind::Drop { mut place, target, unwind } => {\n+                TerminatorKind::Drop { mut place, target, unwind, replace } => {\n                     if let Some(new_place) = self.un_derefer.derefer(place.as_ref(), self.body) {\n                         place = new_place;\n                     }\n@@ -434,10 +434,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                             )\n                         }\n                         LookupResult::Parent(..) => {\n-                            if !matches!(\n-                                terminator.source_info.span.desugaring_kind(),\n-                                Some(DesugaringKind::Replace),\n-                            ) {\n+                            if !replace {\n                                 self.tcx.sess.delay_span_bug(\n                                     terminator.source_info.span,\n                                     format!(\"drop of untracked value {:?}\", bb),"}, {"sha": "89567ed0ab88278c8cc51ccbf608a32fc7bcb9ed", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -1045,7 +1045,10 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     for (block, block_data) in body.basic_blocks.iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n-            Terminator { source_info, kind: TerminatorKind::Drop { place, target, unwind } } => {\n+            Terminator {\n+                source_info,\n+                kind: TerminatorKind::Drop { place, target, unwind, replace: _ },\n+            } => {\n                 if let Some(local) = place.as_local() {\n                     if local == SELF_ARG {\n                         (target, unwind, source_info)\n@@ -1304,6 +1307,7 @@ fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n         place: Place::from(SELF_ARG),\n         target: return_block,\n         unwind: UnwindAction::Continue,\n+        replace: false,\n     };\n     let source_info = SourceInfo::outermost(body.span);\n "}, {"sha": "6c5e182ed06f9f8f5e270db97468ba12e1cf9749", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -450,16 +450,16 @@ impl<'tcx> Inliner<'tcx> {\n             checker.visit_basic_block_data(bb, blk);\n \n             let term = blk.terminator();\n-            if let TerminatorKind::Drop { ref place, target, unwind } = term.kind {\n+            if let TerminatorKind::Drop { ref place, target, unwind, replace: _ } = term.kind {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = callsite\n                     .callee\n                     .subst_mir(self.tcx, ty::EarlyBinder(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n-                        work_list.push(unwind);\n-                    }\n+                    work_list.push(unwind);\n+                }\n             } else if callee_attrs.instruction_set != self.codegen_fn_attrs.instruction_set\n                 && matches!(term.kind, TerminatorKind::InlineAsm { .. })\n             {"}, {"sha": "0eb27c23105f5ba24c106dfbb1c07dffd49854ac", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -544,6 +544,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n                     place: dest_field,\n                     target: unwind,\n                     unwind: UnwindAction::Terminate,\n+                    replace: false,\n                 },\n                 true,\n             );\n@@ -800,6 +801,7 @@ fn build_call_shim<'tcx>(\n                 place: rcvr_place(),\n                 target: BasicBlock::new(2),\n                 unwind: UnwindAction::Continue,\n+                replace: false,\n             },\n             false,\n         );\n@@ -815,6 +817,7 @@ fn build_call_shim<'tcx>(\n                 place: rcvr_place(),\n                 target: BasicBlock::new(4),\n                 unwind: UnwindAction::Terminate,\n+                replace: false,\n             },\n             true,\n         );"}, {"sha": "5572108f49567ea5b84f5f40a3dd2e288da4da69", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -309,7 +309,7 @@ fn rustc_terminator_to_terminator(\n         Terminate => Terminator::Abort,\n         Return => Terminator::Return,\n         Unreachable => Terminator::Unreachable,\n-        Drop { place, target, unwind } => Terminator::Drop {\n+        Drop { place, target, unwind, replace: _ } => Terminator::Drop {\n             place: rustc_place_to_place(place),\n             target: target.as_usize(),\n             unwind: rustc_unwind_to_unwind(unwind),"}, {"sha": "70ddac086850d248ae64d73d02c6d901ce017c30", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -1151,7 +1151,6 @@ pub enum DesugaringKind {\n     Await,\n     ForLoop,\n     WhileLoop,\n-    Replace,\n }\n \n impl DesugaringKind {\n@@ -1167,7 +1166,6 @@ impl DesugaringKind {\n             DesugaringKind::OpaqueTy => \"`impl Trait`\",\n             DesugaringKind::ForLoop => \"`for` loop\",\n             DesugaringKind::WhileLoop => \"`while` loop\",\n-            DesugaringKind::Replace => \"drop and replace\",\n         }\n     }\n }"}, {"sha": "1bda7a4971375491003540a23cfc68c4a02887f5", "filename": "tests/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -8,7 +8,6 @@ fn a() {\n         //~^ NOTE `vec[_]` is borrowed here\n             vec[0] = Box::new(4); //~ ERROR cannot assign\n             //~^ NOTE `vec[_]` is assigned to here\n-            //~| NOTE in this expansion of desugaring of drop and replace\n             _a.use_ref();\n             //~^ NOTE borrow later used here\n         }\n@@ -23,7 +22,6 @@ fn b() {\n         //~^ `vec[_]` is borrowed here\n             vec[0] = Box::new(4); //~ ERROR cannot assign\n             //~^ NOTE `vec[_]` is assigned to here\n-            //~| NOTE in this expansion of desugaring of drop and replace\n             _b.use_ref();\n             //~^ NOTE borrow later used here\n         }"}, {"sha": "70b9e4f4433b34e8ae6926e2fd507c658bf92c15", "filename": "tests/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -6,24 +6,24 @@ LL |         [box ref _a, _, _] => {\n LL |\n LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ `vec[_]` is assigned to here but it was already borrowed\n-...\n+LL |\n LL |             _a.use_ref();\n    |             ------------ borrow later used here\n \n error[E0506]: cannot assign to `vec[_]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:24:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b @ ..] => {\n    |               ------ `vec[_]` is borrowed here\n LL |\n LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ `vec[_]` is assigned to here but it was already borrowed\n-...\n+LL |\n LL |             _b.use_ref();\n    |             ------------ borrow later used here\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:36:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:34:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -41,7 +41,7 @@ LL +         [_a,\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:48:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:46:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n@@ -55,7 +55,7 @@ LL |     let a = &vec[0];\n    |             +\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:57:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:55:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -73,7 +73,7 @@ LL +         [\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:67:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:65:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^\n@@ -87,7 +87,7 @@ LL |     let a = &vec[0];\n    |             +\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:76:11\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:74:11\n    |\n LL |     match vec {\n    |           ^^^ cannot move out of here\n@@ -106,7 +106,7 @@ LL +         [_a, _b, _c] => {}\n    |\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:87:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:85:13\n    |\n LL |     let a = vec[0];\n    |             ^^^^^^"}, {"sha": "ded46e56e34514c8d9010dff9e0c203370091ab1", "filename": "tests/ui/borrowck/issue-45199.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fissue-45199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fissue-45199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-45199.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -5,7 +5,6 @@ fn test_drop_replace() {\n     b = Box::new(1);    //~ NOTE first assignment\n     b = Box::new(2);    //~ ERROR cannot assign twice to immutable variable `b`\n                         //~| NOTE cannot assign twice to immutable\n-                        //~| NOTE in this expansion of desugaring of drop and replace\n }\n \n fn test_call() {\n@@ -14,14 +13,12 @@ fn test_call() {\n                             //~| SUGGESTION mut b\n     b = Box::new(2);        //~ ERROR cannot assign twice to immutable variable `b`\n                             //~| NOTE cannot assign twice to immutable\n-                            //~| NOTE in this expansion of desugaring of drop and replace\n }\n \n fn test_args(b: Box<i32>) {  //~ HELP consider making this binding mutable\n                                 //~| SUGGESTION mut b\n     b = Box::new(2);            //~ ERROR cannot assign to immutable argument `b`\n                                 //~| NOTE cannot assign to immutable argument\n-                                //~| NOTE in this expansion of desugaring of drop and replace\n }\n \n fn main() {}"}, {"sha": "47aa30908270d91b7ac9107dcf7318ea259b5e6a", "filename": "tests/ui/borrowck/issue-45199.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fissue-45199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fborrowck%2Fissue-45199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-45199.stderr?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -10,7 +10,7 @@ LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `b`\n-  --> $DIR/issue-45199.rs:15:5\n+  --> $DIR/issue-45199.rs:14:5\n    |\n LL |     let b = Box::new(1);\n    |         -\n@@ -22,7 +22,7 @@ LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign to immutable argument `b`\n-  --> $DIR/issue-45199.rs:22:5\n+  --> $DIR/issue-45199.rs:20:5\n    |\n LL | fn test_args(b: Box<i32>) {\n    |              - help: consider making this binding mutable: `mut b`"}, {"sha": "c9b16e43910e8e9f6215acc0ed4ed4b3ecca2c64", "filename": "tests/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c1cc5fec38f691a2ffb53ef3366f25cf7b02b/tests%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs?ref=844c1cc5fec38f691a2ffb53ef3366f25cf7b02b", "patch": "@@ -5,7 +5,6 @@ fn test() {\n     drop(b);\n     b = Box::new(2); //~ ERROR cannot assign twice to immutable variable `b`\n                      //~| NOTE cannot assign twice to immutable\n-                     //~| NOTE in this expansion of desugaring of drop and replace\n     drop(b);\n }\n "}]}