{"sha": "45fd63a8b7b1fa0242d864f9592c05d06669b395", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmQ2M2E4YjdiMWZhMDI0MmQ4NjRmOTU5MmMwNWQwNjY2OWIzOTU=", "commit": {"author": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-25T03:25:04Z"}, "committer": {"name": "Bruno de Oliveira Abinader", "email": "bruno.d@partner.samsung.com", "date": "2014-02-27T12:35:47Z"}, "message": "Replaced list::has() with list::contains()", "tree": {"sha": "bacffcd7456a34457bef813b962120ff26a164f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacffcd7456a34457bef813b962120ff26a164f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fd63a8b7b1fa0242d864f9592c05d06669b395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd63a8b7b1fa0242d864f9592c05d06669b395", "html_url": "https://github.com/rust-lang/rust/commit/45fd63a8b7b1fa0242d864f9592c05d06669b395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fd63a8b7b1fa0242d864f9592c05d06669b395/comments", "author": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brunoabinader", "id": 76133, "node_id": "MDQ6VXNlcjc2MTMz", "avatar_url": "https://avatars.githubusercontent.com/u/76133?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brunoabinader", "html_url": "https://github.com/brunoabinader", "followers_url": "https://api.github.com/users/brunoabinader/followers", "following_url": "https://api.github.com/users/brunoabinader/following{/other_user}", "gists_url": "https://api.github.com/users/brunoabinader/gists{/gist_id}", "starred_url": "https://api.github.com/users/brunoabinader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brunoabinader/subscriptions", "organizations_url": "https://api.github.com/users/brunoabinader/orgs", "repos_url": "https://api.github.com/users/brunoabinader/repos", "events_url": "https://api.github.com/users/brunoabinader/events{/privacy}", "received_events_url": "https://api.github.com/users/brunoabinader/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "223f309fc3b0550803ec222bbb77f4ef129e915a", "url": "https://api.github.com/repos/rust-lang/rust/commits/223f309fc3b0550803ec222bbb77f4ef129e915a", "html_url": "https://github.com/rust-lang/rust/commit/223f309fc3b0550803ec222bbb77f4ef129e915a"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "05e60d07df85ee4e34845de3636701972c7e636a", "filename": "src/libcollections/list.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45fd63a8b7b1fa0242d864f9592c05d06669b395/src%2Flibcollections%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd63a8b7b1fa0242d864f9592c05d06669b395/src%2Flibcollections%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flist.rs?ref=45fd63a8b7b1fa0242d864f9592c05d06669b395", "patch": "@@ -63,13 +63,11 @@ impl<T> Container for List<T> {\n     fn is_empty(&self) -> bool { match *self { Nil => true, _ => false } }\n }\n \n-/// Returns true if a list contains an element with the given value\n-pub fn has<T:Eq>(list: @List<T>, element: T) -> bool {\n-    let mut found = false;\n-    each(list, |e| {\n-        if *e == element { found = true; false } else { true }\n-    });\n-    return found;\n+impl<T:Eq> List<T> {\n+    /// Returns true if a list contains an element with the given value\n+    pub fn contains(&self, element: T) -> bool {\n+        self.iter().any(|list_element| *list_element == element)\n+    }\n }\n \n /// Returns all but the first element of a list\n@@ -208,13 +206,14 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_has() {\n-        let list = @List::from_vec([5, 8, 6]);\n-        let empty = @list::Nil::<int>;\n-        assert!((list::has(list, 5)));\n-        assert!((!list::has(list, 7)));\n-        assert!((list::has(list, 8)));\n-        assert!((!list::has(empty, 5)));\n+    fn test_contains() {\n+        let empty = Nil::<int>;\n+        assert!((!empty.contains(5)));\n+\n+        let list = List::from_vec([5, 8, 6]);\n+        assert!((list.contains(5)));\n+        assert!((!list.contains(7)));\n+        assert!((list.contains(8)));\n     }\n \n     #[test]"}]}