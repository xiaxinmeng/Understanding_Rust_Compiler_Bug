{"sha": "2de7a7c9badf71978c53f07fc6b2db097a8d4213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTdhN2M5YmFkZjcxOTc4YzUzZjA3ZmM2YjJkYjA5N2E4ZDQyMTM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-25T16:43:39Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-25T17:34:50Z"}, "message": "impl IntoCow for Path[Buf]", "tree": {"sha": "ee039ab10f470535464b6b25759480bbcf47772c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee039ab10f470535464b6b25759480bbcf47772c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de7a7c9badf71978c53f07fc6b2db097a8d4213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de7a7c9badf71978c53f07fc6b2db097a8d4213", "html_url": "https://github.com/rust-lang/rust/commit/2de7a7c9badf71978c53f07fc6b2db097a8d4213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de7a7c9badf71978c53f07fc6b2db097a8d4213/comments", "author": null, "committer": null, "parents": [{"sha": "880fb89bde126aa43fc348d0b93839d3d18a1f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/880fb89bde126aa43fc348d0b93839d3d18a1f51", "html_url": "https://github.com/rust-lang/rust/commit/880fb89bde126aa43fc348d0b93839d3d18a1f51"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "b85a0dcec81805cb0a844a926531e5b2501c15dd", "filename": "src/libstd/path.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2de7a7c9badf71978c53f07fc6b2db097a8d4213/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de7a7c9badf71978c53f07fc6b2db097a8d4213/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=2de7a7c9badf71978c53f07fc6b2db097a8d4213", "patch": "@@ -108,7 +108,7 @@\n use core::prelude::*;\n \n use ascii::*;\n-use borrow::{Borrow, ToOwned, Cow};\n+use borrow::{Borrow, IntoCow, ToOwned, Cow};\n use cmp;\n use iter::{self, IntoIterator};\n use mem;\n@@ -987,6 +987,18 @@ impl Borrow<Path> for PathBuf {\n     }\n }\n \n+impl IntoCow<'static, Path> for PathBuf {\n+    fn into_cow(self) -> Cow<'static, Path> {\n+        Cow::Owned(self)\n+    }\n+}\n+\n+impl<'a> IntoCow<'a, Path> for &'a Path {\n+    fn into_cow(self) -> Cow<'a, Path> {\n+        Cow::Borrowed(self)\n+    }\n+}\n+\n impl ToOwned for Path {\n     type Owned = PathBuf;\n     fn to_owned(&self) -> PathBuf { self.to_path_buf() }\n@@ -1411,6 +1423,26 @@ mod tests {\n         );\n     );\n \n+    #[test]\n+    fn into_cow() {\n+        use borrow::{Cow, IntoCow};\n+\n+        let static_path = Path::new(\"/home/foo\");\n+        let static_cow_path: Cow<'static, Path> = static_path.into_cow();\n+        let pathbuf = PathBuf::new(\"/home/foo\");\n+\n+        {\n+            let path: &Path = &pathbuf;\n+            let borrowed_cow_path: Cow<Path> = path.into_cow();\n+\n+            assert_eq!(static_cow_path, borrowed_cow_path);\n+        }\n+\n+        let owned_cow_path: Cow<'static, Path> = pathbuf.into_cow();\n+\n+        assert_eq!(static_cow_path, owned_cow_path);\n+    }\n+\n     #[test]\n     #[cfg(unix)]\n     pub fn test_decompositions_unix() {"}]}