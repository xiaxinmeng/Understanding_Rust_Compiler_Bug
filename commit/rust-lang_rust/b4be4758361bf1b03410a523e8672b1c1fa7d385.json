{"sha": "b4be4758361bf1b03410a523e8672b1c1fa7d385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YmU0NzU4MzYxYmYxYjAzNDEwYTUyM2U4NjcyYjFjMWZhN2QzODU=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-04-06T11:57:40Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-04-06T11:57:40Z"}, "message": "Fix Markdown issues in the docs\n\n* Since the switch to pulldown-cmark reference links need a blank line\nbefore the URLs.\n* Reference link references are not case sensitive.\n* Doc comments need to be indented uniformly otherwise rustdoc gets\nconfused.", "tree": {"sha": "de2eb5ad9c527ac1d0ee2a6dfb7b88a0d64eb0b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2eb5ad9c527ac1d0ee2a6dfb7b88a0d64eb0b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4be4758361bf1b03410a523e8672b1c1fa7d385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4be4758361bf1b03410a523e8672b1c1fa7d385", "html_url": "https://github.com/rust-lang/rust/commit/b4be4758361bf1b03410a523e8672b1c1fa7d385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4be4758361bf1b03410a523e8672b1c1fa7d385/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e92753cc3e12c3c468b6badaf340fe4443145c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e92753cc3e12c3c468b6badaf340fe4443145c", "html_url": "https://github.com/rust-lang/rust/commit/e5e92753cc3e12c3c468b6badaf340fe4443145c"}], "stats": {"total": 70, "additions": 44, "deletions": 26}, "files": [{"sha": "35ecf411db4e0b2a998b03a18be4fcd7404ec701", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -1346,7 +1346,7 @@ impl<T: PartialEq> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    ///# #![feature(vec_remove_item)]\n+    /// # #![feature(vec_remove_item)]\n     /// let mut vec = vec![1, 2, 3, 1];\n     ///\n     /// vec.remove_item(&1);"}, {"sha": "2e1058bfc3413bd4efa59a5815c3fc1fae711541", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -153,8 +153,9 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Rust's memory orderings are [the same as\n /// LLVM's](http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations).\n ///\n-/// For more information see the [nomicon][1].\n-/// [1]: ../../../nomicon/atomics.html\n+/// For more information see the [nomicon].\n+///\n+/// [nomicon]: ../../../nomicon/atomics.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone, Debug)]\n pub enum Ordering {"}, {"sha": "6b1267d89b6d5730246c2f7d0ce6d797ded38968", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -1176,6 +1176,7 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n /// This function currently corresponds to the `unlink` function on Unix\n /// and the `DeleteFile` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1212,6 +1213,7 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function currently corresponds to the `stat` function on Unix\n /// and the `GetFileAttributesEx` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1245,6 +1247,7 @@ pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// This function currently corresponds to the `lstat` function on Unix\n /// and the `GetFileAttributesEx` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1287,6 +1290,7 @@ pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n /// on Windows, `from` can be anything, but `to` must *not* be a directory.\n ///\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1330,6 +1334,7 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// `O_CLOEXEC` is set for returned file descriptors.\n /// On Windows, this function currently corresponds to `CopyFileEx`.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1366,6 +1371,7 @@ pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n /// This function currently corresponds to the `link` function on Unix\n /// and the `CreateHardLink` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1424,6 +1430,7 @@ pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n /// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1457,6 +1464,7 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// This function currently corresponds to the `realpath` function on Unix\n /// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1489,6 +1497,7 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n /// This function currently corresponds to the `mkdir` function on Unix\n /// and the `CreateDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1522,6 +1531,7 @@ pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function currently corresponds to the `mkdir` function on Unix\n /// and the `CreateDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1562,6 +1572,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function currently corresponds to the `rmdir` function on Unix\n /// and the `RemoveDirectory` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1599,6 +1610,7 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// and the `FindFirstFile`, `GetFileAttributesEx`, `DeleteFile`, and `RemoveDirectory` functions\n /// on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1633,6 +1645,7 @@ pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This function currently corresponds to the `opendir` function on Unix\n /// and the `FindFirstFile` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors\n@@ -1679,6 +1692,7 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n /// This function currently corresponds to the `chmod` function on Unix\n /// and the `SetFileAttributes` function on Windows.\n /// Note that, this [may change in the future][changes].\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n ///\n /// # Errors"}, {"sha": "3b82412716e54f7346dbfc24c2732f56070f246c", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -21,12 +21,12 @@ use memchr;\n /// The `BufReader` struct adds buffering to any reader.\n ///\n /// It can be excessively inefficient to work directly with a [`Read`] instance.\n-/// For example, every call to [`read`] on [`TcpStream`] results in a system call.\n-/// A `BufReader` performs large, infrequent reads on the underlying [`Read`]\n-/// and maintains an in-memory buffer of the results.\n+/// For example, every call to [`read`][`TcpStream::read`] on [`TcpStream`]\n+/// results in a system call. A `BufReader` performs large, infrequent reads on\n+/// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n /// [`Read`]: ../../std/io/trait.Read.html\n-/// [`read`]: ../../std/net/struct.TcpStream.html#method.read\n+/// [`TcpStream::read`]: ../../std/net/struct.TcpStream.html#method.read\n /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n ///\n /// # Examples\n@@ -261,9 +261,10 @@ impl<R: Seek> Seek for BufReader<R> {\n /// Wraps a writer and buffers its output.\n ///\n /// It can be excessively inefficient to work directly with something that\n-/// implements [`Write`]. For example, every call to [`write`] on [`TcpStream`]\n-/// results in a system call. A `BufWriter` keeps an in-memory buffer of data\n-/// and writes it to an underlying writer in large, infrequent batches.\n+/// implements [`Write`]. For example, every call to\n+/// [`write`][`Tcpstream::write`] on [`TcpStream`] results in a system call. A\n+/// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n+/// writer in large, infrequent batches.\n ///\n /// The buffer will be written out when the writer is dropped.\n ///\n@@ -303,7 +304,7 @@ impl<R: Seek> Seek for BufReader<R> {\n /// the `stream` is dropped.\n ///\n /// [`Write`]: ../../std/io/trait.Write.html\n-/// [`write`]: ../../std/net/struct.TcpStream.html#method.write\n+/// [`Tcpstream::write`]: ../../std/net/struct.TcpStream.html#method.write\n /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {"}, {"sha": "cd096c115ba5a2a181f9a2275076915240bbaf13", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -21,7 +21,8 @@\n //! of other types, and you can implement them for your types too. As such,\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n-//! example, [`Read`] adds a [`read`] method, which we can use on `File`s:\n+//! example, [`Read`] adds a [`read`][`Read::read`] method, which we can use on\n+//! `File`s:\n //!\n //! ```\n //! use std::io;\n@@ -106,7 +107,7 @@\n //! ```\n //!\n //! [`BufWriter`] doesn't add any new ways of writing; it just buffers every call\n-//! to [`write`]:\n+//! to [`write`][`Write::write`]:\n //!\n //! ```\n //! use std::io;\n@@ -257,13 +258,13 @@\n //! [`Vec<T>`]: ../vec/struct.Vec.html\n //! [`BufReader`]: struct.BufReader.html\n //! [`BufWriter`]: struct.BufWriter.html\n-//! [`write`]: trait.Write.html#tymethod.write\n+//! [`Write::write`]: trait.Write.html#tymethod.write\n //! [`io::stdout`]: fn.stdout.html\n //! [`println!`]: ../macro.println.html\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n //! [`?` operator]: ../../book/syntax-index.html\n-//! [`read`]: trait.Read.html#tymethod.read\n+//! [`Read::read`]: trait.Read.html#tymethod.read\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "bc315d54100e42d1048a90baa96d64cda64d2722", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -58,7 +58,7 @@ pub struct TcpStream(net_imp::TcpStream);\n ///\n /// After creating a `TcpListener` by [`bind`]ing it to a socket address, it listens\n /// for incoming TCP connections. These can be accepted by calling [`accept`] or by\n-/// iterating over the [`Incoming`] iterator returned by [`incoming`].\n+/// iterating over the [`Incoming`] iterator returned by [`incoming`][`TcpListener::incoming`].\n ///\n /// The socket will be closed when the value is dropped.\n ///\n@@ -68,7 +68,7 @@ pub struct TcpStream(net_imp::TcpStream);\n /// [`bind`]: #method.bind\n /// [IETF RFC 793]: https://tools.ietf.org/html/rfc793\n /// [`Incoming`]: ../../std/net/struct.Incoming.html\n-/// [`incoming`]: #method.incoming\n+/// [`TcpListener::incoming`]: #method.incoming\n ///\n /// # Examples\n ///"}, {"sha": "86e661d7948f07dfb05a533f16e0077ae9c6ae13", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -56,14 +56,14 @@\n //!   traits indicate fundamental properties of types.\n //! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`], a convenience function for explicitly dropping a\n-//!   value.\n+//! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n+//!   dropping a value.\n //! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n //! * [`std::borrow`]::[`ToOwned`], The conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines [`clone`],\n-//!   the method for producing a copy of a value.\n+//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n+//!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n //! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }. The\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n@@ -117,8 +117,8 @@\n //! [`ToOwned`]: ../borrow/trait.ToOwned.html\n //! [`ToString`]: ../string/trait.ToString.html\n //! [`Vec`]: ../vec/struct.Vec.html\n-//! [`clone`]: ../clone/trait.Clone.html#tymethod.clone\n-//! [`drop`]: ../mem/fn.drop.html\n+//! [`Clone::clone`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [`mem::drop`]: ../mem/fn.drop.html\n //! [`std::borrow`]: ../borrow/index.html\n //! [`std::boxed`]: ../boxed/index.html\n //! [`std::clone`]: ../clone/index.html"}, {"sha": "d6e2fed56be96b1d5b640dacc05aecc73fe2295f", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -144,7 +144,7 @@ pub trait OpenOptionsExt {\n     /// `CreateFile`).\n     ///\n     /// If a _new_ file is created because it does not yet exist and\n-    ///`.create(true)` or `.create_new(true)` are specified, the new file is\n+    /// `.create(true)` or `.create_new(true)` are specified, the new file is\n     /// given the attributes declared with `.attributes()`.\n     ///\n     /// If an _existing_ file is opened with `.create(true).truncate(true)`, its"}, {"sha": "759f055c4b1236e4640982e21d4be19fd15b7155", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -104,6 +104,7 @@ pub trait CommandExt {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n     ///\n     /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`.\n+    ///\n     /// [1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\n     #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n     fn creation_flags(&mut self, flags: u32) -> &mut process::Command;"}, {"sha": "7ab6b82ada3445f6ca739fcd4439cc6a538c58c0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4be4758361bf1b03410a523e8672b1c1fa7d385/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b4be4758361bf1b03410a523e8672b1c1fa7d385", "patch": "@@ -90,7 +90,7 @@\n //! two ways:\n //!\n //! * By spawning a new thread, e.g. using the [`thread::spawn`][`spawn`]\n-//!   function, and calling [`thread`] on the [`JoinHandle`].\n+//!   function, and calling [`thread`][`JoinHandle::thread`] on the [`JoinHandle`].\n //! * By requesting the current thread, using the [`thread::current`] function.\n //!\n //! The [`thread::current`] function is available even for threads not spawned\n@@ -151,7 +151,7 @@\n //! [`Arc`]: ../../std/sync/struct.Arc.html\n //! [`spawn`]: ../../std/thread/fn.spawn.html\n //! [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-//! [`thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n+//! [`JoinHandle::thread`]: ../../std/thread/struct.JoinHandle.html#method.thread\n //! [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n //! [`Result`]: ../../std/result/enum.Result.html\n //! [`Ok`]: ../../std/result/enum.Result.html#variant.Ok"}]}