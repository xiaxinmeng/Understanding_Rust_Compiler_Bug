{"sha": "644774c1b15c107d8cb74c756ea69e342844a5c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NDc3NGMxYjE1YzEwN2Q4Y2I3NGM3NTZlYTY5ZTM0Mjg0NGE1Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-17T19:40:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-17T19:40:08Z"}, "message": "auto merge of #7192 : brson/rust/rpath, r=thestinger\n\nr? @thestinger\r\n\r\nThis reverts commit 708395d65d689080cc96dd091adab3fc4c5c3f27.\r\n\r\nFixes #7191.", "tree": {"sha": "66582f5c67fc7fb7389fd19deec1410374404e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66582f5c67fc7fb7389fd19deec1410374404e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644774c1b15c107d8cb74c756ea69e342844a5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644774c1b15c107d8cb74c756ea69e342844a5c9", "html_url": "https://github.com/rust-lang/rust/commit/644774c1b15c107d8cb74c756ea69e342844a5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644774c1b15c107d8cb74c756ea69e342844a5c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5bdd71cec39b31124d67fe912467e906a0d310", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5bdd71cec39b31124d67fe912467e906a0d310", "html_url": "https://github.com/rust-lang/rust/commit/9a5bdd71cec39b31124d67fe912467e906a0d310"}, {"sha": "fd09e40f970d996174d87d9feea9953e093368a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd09e40f970d996174d87d9feea9953e093368a5", "html_url": "https://github.com/rust-lang/rust/commit/fd09e40f970d996174d87d9feea9953e093368a5"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "ed70f41f3ec856dc04def271d4aab03f2c8b53ac", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/644774c1b15c107d8cb74c756ea69e342844a5c9/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644774c1b15c107d8cb74c756ea69e342844a5c9/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=644774c1b15c107d8cb74c756ea69e342844a5c9", "patch": "@@ -77,6 +77,10 @@ fn get_rpaths(os: session::os,\n     // crates they depend on.\n     let rel_rpaths = get_rpaths_relative_to_output(os, output, libs);\n \n+    // Make backup absolute paths to the libraries. Binaries can\n+    // be moved as long as the crates they link against don't move.\n+    let abs_rpaths = get_absolute_rpaths(libs);\n+\n     // And a final backup rpath to the global library location.\n     let fallback_rpaths = ~[get_install_prefix_rpath(target_triple)];\n \n@@ -88,9 +92,11 @@ fn get_rpaths(os: session::os,\n     }\n \n     log_rpaths(\"relative\", rel_rpaths);\n+    log_rpaths(\"absolute\", abs_rpaths);\n     log_rpaths(\"fallback\", fallback_rpaths);\n \n     let mut rpaths = rel_rpaths;\n+    rpaths.push_all(abs_rpaths);\n     rpaths.push_all(fallback_rpaths);\n \n     // Remove duplicates\n@@ -160,6 +166,14 @@ pub fn get_relative_to(abs1: &Path, abs2: &Path) -> Path {\n     }\n }\n \n+fn get_absolute_rpaths(libs: &[Path]) -> ~[Path] {\n+    vec::map(libs, |a| get_absolute_rpath(a) )\n+}\n+\n+pub fn get_absolute_rpath(lib: &Path) -> Path {\n+    os::make_absolute(lib).dir_path()\n+}\n+\n #[cfg(stage0)]\n pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n@@ -198,12 +212,13 @@ pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n #[cfg(unix, test)]\n mod test {\n     use core::prelude::*;\n+    use core::os;\n \n     // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n     // these redundant #[cfg(test)] blocks can be removed\n     #[cfg(test)]\n     #[cfg(test)]\n-    use back::rpath::{get_install_prefix_rpath};\n+    use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n     use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n     use back::rpath::{minimize_rpaths, rpaths_to_flags};\n     use driver::session;\n@@ -347,4 +362,14 @@ mod test {\n                                                &Path(\"lib/libstd.so\"));\n         assert_eq!(res.to_str(), ~\"@executable_path/../lib\");\n     }\n+\n+    #[test]\n+    fn test_get_absolute_rpath() {\n+        let res = get_absolute_rpath(&Path(\"lib/libstd.so\"));\n+        debug!(\"test_get_absolute_rpath: %s vs. %s\",\n+               res.to_str(),\n+               os::make_absolute(&Path(\"lib\")).to_str());\n+\n+        assert_eq!(res, os::make_absolute(&Path(\"lib\")));\n+    }\n }"}]}