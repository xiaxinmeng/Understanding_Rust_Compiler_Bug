{"sha": "6d1225981177587fbb68d9c4902c770c3dbaafb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTIyNTk4MTE3NzU4N2ZiYjY4ZDljNDkwMmM3NzBjM2RiYWFmYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T14:58:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-22T14:58:55Z"}, "message": "Auto merge of #4938 - flip1995:rustup, r=flip1995\n\nRustup to rust-lang/rust#66931\n\nchangelog: none", "tree": {"sha": "6676a3638e0da52006dbf19c360f945d8ebceca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6676a3638e0da52006dbf19c360f945d8ebceca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1225981177587fbb68d9c4902c770c3dbaafb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1225981177587fbb68d9c4902c770c3dbaafb0", "html_url": "https://github.com/rust-lang/rust/commit/6d1225981177587fbb68d9c4902c770c3dbaafb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1225981177587fbb68d9c4902c770c3dbaafb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8723eb603524c00df8a224740cb813cfca5c433f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8723eb603524c00df8a224740cb813cfca5c433f", "html_url": "https://github.com/rust-lang/rust/commit/8723eb603524c00df8a224740cb813cfca5c433f"}, {"sha": "f6a5b608ef81311030f9852e074bca3d290651cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a5b608ef81311030f9852e074bca3d290651cd", "html_url": "https://github.com/rust-lang/rust/commit/f6a5b608ef81311030f9852e074bca3d290651cd"}], "stats": {"total": 234, "additions": 117, "deletions": 117}, "files": [{"sha": "7653ba43459f2db068f24be9a778f71b2d65745c", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n         }\n     }\n \n-    fn check_body(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body) {\n+    fn check_body(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n \n         match cx.tcx.hir().body_owner_kind(body_owner) {\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n         }\n     }\n \n-    fn check_body_post(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body) {\n+    fn check_body_post(&mut self, cx: &LateContext<'_, '_>, body: &hir::Body<'_>) {\n         let body_owner = cx.tcx.hir().body_owner(body.id());\n         let body_span = cx.tcx.hir().span(body_owner);\n "}, {"sha": "410da312a5c0b9f33267cd6fe624398b509d0c8a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -224,15 +224,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n         }\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if is_relevant_item(cx, item) {\n             check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n                 let skip_unused_imports = item.attrs.iter().any(|attr| attr.check_name(sym!(macro_use)));\n \n-                for attr in &item.attrs {\n+                for attr in item.attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }\n@@ -295,13 +295,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n             check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n             check_attrs(cx, item.span, item.ident.name, &item.attrs)\n         }\n@@ -355,22 +355,22 @@ fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n     }\n }\n \n-fn is_relevant_item(cx: &LateContext<'_, '_>, item: &Item) -> bool {\n+fn is_relevant_item(cx: &LateContext<'_, '_>, item: &Item<'_>) -> bool {\n     if let ItemKind::Fn(_, _, eid) = item.kind {\n         is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value)\n     } else {\n         true\n     }\n }\n \n-fn is_relevant_impl(cx: &LateContext<'_, '_>, item: &ImplItem) -> bool {\n+fn is_relevant_impl(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) -> bool {\n     match item.kind {\n         ImplItemKind::Method(_, eid) => is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value),\n         _ => false,\n     }\n }\n \n-fn is_relevant_trait(cx: &LateContext<'_, '_>, item: &TraitItem) -> bool {\n+fn is_relevant_trait(cx: &LateContext<'_, '_>, item: &TraitItem<'_>) -> bool {\n     match item.kind {\n         TraitItemKind::Method(_, TraitMethod::Required(_)) => true,\n         TraitItemKind::Method(_, TraitMethod::Provided(eid)) => {"}, {"sha": "8767b92b43516ad5dafffc14a56ff94ec5261c4f", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n         cx: &LateContext<'a, 'tcx>,\n         _: intravisit::FnKind<'tcx>,\n         _: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n     ) {"}, {"sha": "a0cb1d633b94885a6006067bd64bca7da2d4506f", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -48,7 +48,7 @@ impl CognitiveComplexity {\n         cx: &'a LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         body_span: Span,\n     ) {\n         if body_span.from_expansion() {\n@@ -117,7 +117,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CognitiveComplexity {\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,\n     ) {"}, {"sha": "c8d8da487856dc0e743031fcda48e08ac144247c", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.kind {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n "}, {"sha": "140ad0ddd3da32ec118021e36cdd50c55dc4e870", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -66,7 +66,7 @@ declare_clippy_lint! {\n declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.kind {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n@@ -130,7 +130,7 @@ fn check_hash_peq<'a, 'tcx>(\n }\n \n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n-fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref: &TraitRef, ty: Ty<'tcx>) {\n+fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait_ref: &TraitRef, ty: Ty<'tcx>) {\n     if match_path(&trait_ref.path, &paths::CLONE_TRAIT) {\n         if !is_copy(cx, ty) {\n             return;"}, {"sha": "327c18e855d985fe867071e877e0e435bcc99b36", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -146,11 +146,11 @@ impl DocMarkdown {\n impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, MISSING_ERRORS_DOC, NEEDLESS_DOCTEST_MAIN]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate<'_>) {\n         check_attrs(cx, &self.valid_idents, &krate.attrs);\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ..) => {\n@@ -163,20 +163,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         }\n     }\n \n-    fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         if let hir::ItemKind::Impl(..) = item.kind {\n             self.in_trait_impl = false;\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n             lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if self.in_trait_impl {\n             return;"}, {"sha": "24ab0d5957195287591af9d7e1e590711b2f2208", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n declare_lint_pass!(EmptyEnum => [EMPTY_ENUM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EmptyEnum {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item<'_>) {\n         let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(..) = item.kind {\n             let ty = cx.tcx.type_of(did);"}, {"sha": "33ddf69fa51f06cd43abed6a3c7db641822e0d43", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -41,12 +41,12 @@ declare_lint_pass!(UnportableVariant => [ENUM_CLIKE_UNPORTABLE_VARIANT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n     #[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap, clippy::cast_sign_loss)]\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;\n         }\n         if let ItemKind::Enum(def, _) = &item.kind {\n-            for var in &def.variants {\n+            for var in def.variants {\n                 if let Some(anon_const) = &var.disr_expr {\n                     let param_env = ty::ParamEnv::empty();\n                     let def_id = cx.tcx.hir().body_owner_def_id(anon_const.body);"}, {"sha": "7f4f1d85941d8f90173fdb32fb5f205f33c78225", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -29,16 +29,16 @@ declare_clippy_lint! {\n declare_lint_pass!(EnumGlobUse => [ENUM_GLOB_USE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n-    fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: HirId) {\n+    fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod<'_>, _: Span, _: HirId) {\n         let map = cx.tcx.hir();\n         // only check top level `use` statements\n-        for item in &m.item_ids {\n+        for item in m.item_ids {\n             lint_item(cx, map.expect_item(item.id));\n         }\n     }\n }\n \n-fn lint_item(cx: &LateContext<'_, '_>, item: &Item) {\n+fn lint_item(cx: &LateContext<'_, '_>, item: &Item<'_>) {\n     if item.vis.node.is_pub() {\n         return; // re-exports are fine\n     }"}, {"sha": "c44f2c696580c311700f3a7bd4a51c0bde8b1187", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n         cx: &LateContext<'a, 'tcx>,\n         _: visit::FnKind<'tcx>,\n         _: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         _: Span,\n         hir_id: HirId,\n     ) {"}, {"sha": "d0ffc6c8eed971bb92bf1b268411a359d2a1fc4b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -32,11 +32,11 @@ declare_clippy_lint! {\n declare_lint_pass!(FallibleImplFrom => [FALLIBLE_IMPL_FROM]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         // check for `impl From<???> for ..`\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n-            if let hir::ItemKind::Impl(.., ref impl_items) = item.kind;\n+            if let hir::ItemKind::Impl(.., impl_items) = item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n             if match_def_path(cx, impl_trait_ref.def_id, &FROM_TRAIT);\n             then {\n@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &hir::HirVec<hir::ImplItemRef>) {\n+fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc::hir::*;\n "}, {"sha": "6191c41bb4491ecc8277ee5bcc70eaedf4ded6c3", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         cx: &LateContext<'a, 'tcx>,\n         kind: intravisit::FnKind<'tcx>,\n         decl: &'tcx hir::FnDecl,\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'_>,\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         self.check_line_number(cx, span, body);\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         let attr = must_use_attr(&item.attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             if let Some(attr) = attr {\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Method(ref sig, ref body_id) = item.kind {\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n@@ -272,7 +272,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Method(ref sig, ref eid) = item.kind {\n             // don't lint extern functions decls, it's not their fault\n             if sig.header.abi == Abi::Rust {\n@@ -317,7 +317,7 @@ impl<'a, 'tcx> Functions {\n         }\n     }\n \n-    fn check_line_number(self, cx: &LateContext<'_, '_>, span: Span, body: &'tcx hir::Body) {\n+    fn check_line_number(self, cx: &LateContext<'_, '_>, span: Span, body: &'tcx hir::Body<'_>) {\n         if in_external_macro(cx.sess(), span) {\n             return;\n         }\n@@ -375,7 +375,7 @@ impl<'a, 'tcx> Functions {\n         cx: &LateContext<'a, 'tcx>,\n         unsafety: hir::Unsafety,\n         decl: &'tcx hir::FnDecl,\n-        body: &'tcx hir::Body,\n+        body: &'tcx hir::Body<'_>,\n         hir_id: hir::HirId,\n     ) {\n         let expr = &body.value;\n@@ -439,7 +439,7 @@ fn check_needless_must_use(\n fn check_must_use_candidate<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     decl: &'tcx hir::FnDecl,\n-    body: &'tcx hir::Body,\n+    body: &'tcx hir::Body<'_>,\n     item_span: Span,\n     item_id: hir::HirId,\n     fn_span: Span,\n@@ -521,7 +521,7 @@ fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-fn has_mutable_arg(cx: &LateContext<'_, '_>, body: &hir::Body) -> bool {\n+fn has_mutable_arg(cx: &LateContext<'_, '_>, body: &hir::Body<'_>) -> bool {\n     let mut tys = FxHashSet::default();\n     body.params.iter().any(|param| is_mutable_pat(cx, &param.pat, &mut tys))\n }\n@@ -686,7 +686,7 @@ fn is_mutated_static(cx: &LateContext<'_, '_>, e: &hir::Expr) -> bool {\n     }\n }\n \n-fn mutates_static<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, body: &'tcx hir::Body) -> bool {\n+fn mutates_static<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, body: &'tcx hir::Body<'_>) -> bool {\n     let mut v = StaticMutVisitor {\n         cx,\n         mutates_static: false,"}, {"sha": "a09856dedaeac19e043823d6893209e8cdf63488", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -130,7 +130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n         _: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         span: Span,\n         _: HirId,\n     ) {"}, {"sha": "860c4e84eb366d5b86a56f3b10ac39df9f1a9c86", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -49,7 +49,7 @@ pub struct MultipleInherentImpl {\n impl_lint_pass!(MultipleInherentImpl => [MULTIPLE_INHERENT_IMPL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n-    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Impl(_, _, _, ref generics, None, _, _) = item.kind {\n             // Remember for each inherent implementation encoutered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n@@ -60,7 +60,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MultipleInherentImpl {\n         }\n     }\n \n-    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx Crate) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx Crate<'_>) {\n         if let Some(item) = krate.items.values().nth(0) {\n             // Retrieve all inherent implementations from the crate, grouped by type\n             for impls in cx"}, {"sha": "150a9ea9c96735fc646d0e4faac928334007c65c", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -94,7 +94,7 @@ declare_clippy_lint! {\n declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n     }\n }\n \n-fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem) {\n+fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n     let display_trait_id =\n         get_trait_def_id(cx, &[\"core\", \"fmt\", \"Display\"]).expect(\"Failed to get trait ID of `Display`!\");\n "}, {"sha": "c87fc2824de2b2ae61eca56e5ad459f70bde3f48", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Method(_, TraitMethod::Required(_)) = item.kind {\n             check_attrs(cx, item.ident.name, &item.attrs);\n         }"}, {"sha": "fe3bcf0ab826af6b466115c54ea27c9da0612ca3", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -47,7 +47,7 @@ impl LargeEnumVariant {\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n-    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item) {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item<'_>) {\n         let did = cx.tcx.hir().local_def_id(item.hir_id);\n         if let ItemKind::Enum(ref def, _) = item.kind {\n             let ty = cx.tcx.type_of(did);"}, {"sha": "ea2891f59ccc4208c5a2a24265ffbf50d9c6b4c0", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -73,7 +73,7 @@ declare_clippy_lint! {\n declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if item.span.from_expansion() {\n             return;\n         }\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n     }\n }\n \n-fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items: &[TraitItemRef]) {\n+fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_items: &[TraitItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Method { has_self } = item.kind {\n@@ -167,7 +167,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n     }\n }\n \n-fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplItemRef]) {\n+fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[ImplItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Method { has_self } = item.kind {"}, {"sha": "5edf1cb839f8e1d5e87d79e8a5b210062e886b3b", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -71,13 +71,13 @@ declare_clippy_lint! {\n declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, ref generics, id) = item.kind {\n             check_fn_inner(cx, &sig.decl, Some(id), generics, item.span, true);\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Method(ref sig, id) = item.kind {\n             let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n             check_fn_inner(\n@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Method(ref sig, ref body) = item.kind {\n             let body = match *body {\n                 TraitMethod::Required(_) => None,"}, {"sha": "54840702cb073369b64e484326017cfad425160e", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -35,7 +35,7 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_, '_> for MainRecursion {\n-    fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate) {\n+    fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate<'_>) {\n         self.has_no_std_attr = krate.attrs.iter().any(|attr| {\n             if let AttrKind::Normal(ref attr) = attr.kind {\n                 attr.path == sym::no_std"}, {"sha": "8a4d08ccb984bbf6a7a67eb3e7b3efee746bce21", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -1256,7 +1256,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         if in_external_macro(cx.sess(), impl_item.span) {\n             return;\n         }"}, {"sha": "9c4769fa67556963e6ca32fedee2d836084f7af3", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n         cx: &LateContext<'a, 'tcx>,\n         k: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n     ) {"}, {"sha": "568b9e90cced75bdfedd2ff92eefbc2f0c2c75e3", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         cx: &LateContext<'_, '_>,\n         kind: FnKind<'_>,\n         _: &FnDecl,\n-        _: &Body,\n+        _: &Body<'_>,\n         span: Span,\n         hir_id: HirId,\n     ) {"}, {"sha": "f1a11c5030c2704ab4b1b3ea2fea76d35e7a9357", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -125,11 +125,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate<'_>) {\n         self.check_missing_docs_attrs(cx, &krate.attrs, krate.span, \"crate\");\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item<'_>) {\n         let desc = match it.kind {\n             hir::ItemKind::Const(..) => \"a constant\",\n             hir::ItemKind::Enum(..) => \"an enum\",\n@@ -162,7 +162,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n             hir::TraitItemKind::Method(..) => \"a trait method\",\n@@ -172,7 +172,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n         let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n         match cx.tcx.associated_item(def_id).container {\n@@ -193,13 +193,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, sf: &'tcx hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, sf: &'tcx hir::StructField<'_>) {\n         if !sf.is_positional() {\n             self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a struct field\");\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant<'_>) {\n         self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a variant\");\n     }\n }"}, {"sha": "790f070e4940e83fd8c22ab300fec2f03d40e690", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -81,7 +81,7 @@ fn is_executable(cx: &LateContext<'_, '_>) -> bool {\n declare_lint_pass!(MissingInline => [MISSING_INLINE_IN_PUBLIC_ITEMS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item<'_>) {\n         if lint::in_external_macro(cx.sess(), it.span) || is_executable(cx) {\n             return;\n         }\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n                 let desc = \"a function\";\n                 check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n             },\n-            hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, ref trait_items) => {\n+            hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use\n                 // `LateLintPass::check_trait_item` here.\n                 for tit in trait_items {\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         use rustc::ty::{ImplContainer, TraitContainer};\n         if lint::in_external_macro(cx.sess(), impl_item.span) || is_executable(cx) {\n             return;"}, {"sha": "6e18501480b6043bc5d0ebaea57fd36446db195f", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -108,14 +108,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         }\n     }\n \n-    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if item.attrs.iter().any(|a| a.check_name(sym!(automatically_derived))) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.hir_id);\n         }\n     }\n \n-    fn check_item_post(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item_post(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let Some(id) = self.derived_item {\n             if item.hir_id == id {\n                 self.derived_item = None;"}, {"sha": "986cd94cfb3cb794f819004ad84003f1effa099b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,\n     ) {\n@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.params).enumerate() {\n+        for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             if span == input.span {\n                 return;"}, {"sha": "fea21ab1c46bbb9296eddb660bb29f4c0bd7db05", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -93,8 +93,8 @@ pub struct NewWithoutDefault {\n impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n-        if let hir::ItemKind::Impl(_, _, _, _, None, _, ref items) = item.kind {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n+        if let hir::ItemKind::Impl(_, _, _, _, None, _, items) = item.kind {\n             for assoc_item in items {\n                 if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);"}, {"sha": "40f1c2917165833ede7a53bda4b1696be040123b", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -143,14 +143,14 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n declare_lint_pass!(NonCopyConst => [DECLARE_INTERIOR_MUTABLE_CONST, BORROW_INTERIOR_MUTABLE_CONST]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx Item<'_>) {\n         if let ItemKind::Const(hir_ty, ..) = &it.kind {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             verify_ty_bound(cx, ty, Source::Item { item: it.span });\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Const(hir_ty, ..) = &trait_item.kind {\n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n             verify_ty_bound(\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, ..) = &impl_item.kind {\n             let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n             let item = cx.tcx.hir().expect_item(item_hir_id);"}, {"sha": "b84a8840d5ee76841ad887d940aeac37c5c11e97", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -32,9 +32,9 @@ declare_clippy_lint! {\n declare_lint_pass!(PartialEqNeImpl => [PARTIALEQ_NE_IMPL]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PartialEqNeImpl {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n-            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.kind;\n+            if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, impl_items) = item.kind;\n             if !is_automatically_derived(&*item.attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;"}, {"sha": "c741c43bc99a212421edb120592d344dae622f7c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -101,13 +101,13 @@ declare_clippy_lint! {\n declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n             check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Method(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n@@ -119,7 +119,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Method(ref sig, ref trait_method) = item.kind {\n             let body_id = if let TraitMethod::Provided(b) = *trait_method {\n                 Some(b)"}, {"sha": "583ebfe5c3e812a4e74d5f4bbfd1274576b99f77", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n         _: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n     ) {"}, {"sha": "e06ebe539e7b7bdf40c6222bf41401c9bcd609f9", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -76,7 +76,7 @@ pub struct Regex {\n impl_lint_pass!(Regex => [INVALID_REGEX, REGEX_MACRO, TRIVIAL_REGEX]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Regex {\n-    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n+    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx Crate<'_>) {\n         self.spans.clear();\n     }\n "}, {"sha": "15cf50f802129f68f32efb6bf931dd5f755ed1d5", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -22,8 +22,8 @@ declare_clippy_lint! {\n declare_lint_pass!(SerdeAPI => [SERDE_API_MISUSE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SerdeAPI {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, ref items) = item.kind {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, items) = item.kind {\n             let did = trait_ref.path.res.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {\n                 if did == visit_did {"}, {"sha": "cfb1900bb3cfc24e79abca46621a63e07076f327", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Shadow {\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n     ) {\n@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Shadow {\n     }\n }\n \n-fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: &'tcx Body) {\n+fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, body: &'tcx Body<'_>) {\n     let mut bindings = Vec::new();\n     for arg in iter_input_pats(decl, body) {\n         if let PatKind::Binding(.., ident, _) = arg.pat.kind {"}, {"sha": "cb445b89db45465f597a0e910fcb40205bd788e7", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         if item.span.from_expansion() {\n             return;\n         }\n@@ -143,7 +143,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        _body: &'tcx Body,\n+        _body: &'tcx Body<'_>,\n         span: Span,\n         hir_id: HirId,\n     ) {"}, {"sha": "143262b21cfc1a2ef7d82479474f6002d16d6ea8", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -170,7 +170,7 @@ declare_clippy_lint! {\n declare_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n-    fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body, _: Span, id: HirId) {\n+    fn check_fn(&mut self, cx: &LateContext<'_, '_>, _: FnKind<'_>, decl: &FnDecl, _: &Body<'_>, _: Span, id: HirId) {\n         // Skip trait implementations; see issue #605.\n         if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id)) {\n             if let ItemKind::Impl(_, _, _, _, Some(..), _, _) = item.kind {\n@@ -181,11 +181,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n         check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField<'_>) {\n         check_ty(cx, &field.ty, false);\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => check_ty(cx, ty, false),\n             TraitItemKind::Method(ref sig, _) => check_fn_decl(cx, &sig.decl),\n@@ -1395,27 +1395,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        _: &'tcx Body,\n+        _: &'tcx Body<'_>,\n         _: Span,\n         _: HirId,\n     ) {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField<'_>) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }\n \n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         match item.kind {\n             ItemKind::Static(ref ty, _, _) | ItemKind::Const(ref ty, _) => self.check_type(cx, ty),\n             // functions, enums, structs, impls and traits are covered\n             _ => (),\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n             TraitItemKind::Method(FnSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n@@ -1424,7 +1424,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n             ImplItemKind::Const(ref ty, _) | ImplItemKind::TyAlias(ref ty) => self.check_type(cx, ty),\n             // methods are covered by check_fn\n@@ -2036,7 +2036,7 @@ declare_lint_pass!(ImplicitHasher => [IMPLICIT_HASHER]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n     #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         use syntax_pos::BytePos;\n \n         fn suggestion<'a, 'tcx>(\n@@ -2291,7 +2291,7 @@ impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n-    fn visit_body(&mut self, body: &'tcx Body) {\n+    fn visit_body(&mut self, body: &'tcx Body<'_>) {\n         let prev_body = self.body;\n         self.body = self.cx.tcx.body_tables(body.id());\n         walk_body(self, body);"}, {"sha": "00c919ee863c1eaeadc0cb9a89dea7d75cd012d4", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -40,11 +40,11 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedSelf => [UNUSED_SELF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &Item<'_>) {\n         if item.span.from_expansion() {\n             return;\n         }\n-        if let ItemKind::Impl(_, _, _, _, None, _, ref impl_item_refs) = item.kind {\n+        if let ItemKind::Impl(_, _, _, _, None, _, impl_item_refs) = item.kind {\n             for impl_item_ref in impl_item_refs {\n                 if_chain! {\n                     if let ImplItemRef {"}, {"sha": "555a157c2751319b13f59d5667394cd5145749d2", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unwrap {\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,\n         decl: &'tcx FnDecl,\n-        body: &'tcx Body,\n+        body: &'tcx Body<'_>,\n         span: Span,\n         fn_id: HirId,\n     ) {"}, {"sha": "37b6c19ff2ba68101503f06eebd590a7ef52338d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n fn check_trait_method_impl_decl<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     item_type: Ty<'tcx>,\n-    impl_item: &ImplItem,\n+    impl_item: &ImplItem<'_>,\n     impl_decl: &'tcx FnDecl,\n     impl_trait_ref: &ty::TraitRef<'_>,\n ) {\n@@ -165,12 +165,12 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n         if_chain! {\n-            if let ItemKind::Impl(.., ref item_type, ref refs) = item.kind;\n+            if let ItemKind::Impl(.., ref item_type, refs) = item.kind;\n             if let TyKind::Path(QPath::Resolved(_, ref item_path)) = item_type.kind;\n             then {\n                 let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n@@ -257,7 +257,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn visit_item(&mut self, item: &'tcx Item) {\n+    fn visit_item(&mut self, item: &'tcx Item<'_>) {\n         match item.kind {\n             ItemKind::Use(..)\n             | ItemKind::Static(..)"}, {"sha": "4eb8bceba148daecab9870d1a32e23c7473f9920", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -64,7 +64,7 @@ fn done() {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }\n@@ -82,7 +82,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }\n@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant<'_>) {\n         if !has_attr(cx.sess(), &var.attrs) {\n             return;\n         }\n@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField<'_>) {\n         if !has_attr(cx.sess(), &field.attrs) {\n             return;\n         }\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Author {\n         done();\n     }\n \n-    fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ForeignItem<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }"}, {"sha": "bd8685cc487f0d67306b519b8afd080f73628f9d", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -34,14 +34,14 @@ declare_clippy_lint! {\n declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }\n         print_item(cx, item);\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if !has_attr(cx.sess(), &item.attrs) {\n             return;\n         }\n@@ -326,7 +326,7 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n     }\n }\n \n-fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n+fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n     let did = cx.tcx.hir().local_def_id(item.hir_id);\n     println!(\"item `{}`\", item.ident.name);\n     match item.vis.node {"}, {"sha": "a309dc8b8e29422306e552ac45dd59d4e70896e7", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -165,7 +165,7 @@ pub struct LintWithoutLintPass {\n impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n         if let hir::ItemKind::Static(ref ty, Mutability::Not, _) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 self.declared_lints.insert(item.ident.name, item.span);\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n         }\n     }\n \n-    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate<'_>) {\n         for (lint_name, &lint_span) in &self.declared_lints {\n             // When using the `declare_tool_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\"."}, {"sha": "1d3b7ea2c2e9581d41722da83d8961ef600b47a1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -901,7 +901,7 @@ pub fn is_self_ty(slf: &hir::Ty) -> bool {\n     false\n }\n \n-pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Param> {\n+pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body<'_>) -> impl Iterator<Item = &'tcx Param> {\n     (0..decl.inputs.len()).map(move |i| &body.params[i])\n }\n "}, {"sha": "dd713296592283ff26001b36ebada75e7a104db9", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1225981177587fbb68d9c4902c770c3dbaafb0/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=6d1225981177587fbb68d9c4902c770c3dbaafb0", "patch": "@@ -26,7 +26,7 @@ fn extract_clone_suggestions<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     name: Name,\n     replace: &[(&'static str, &'static str)],\n-    body: &'tcx Body,\n+    body: &'tcx Body<'_>,\n ) -> Option<Vec<(Span, Cow<'static, str>)>> {\n     let mut visitor = PtrCloneVisitor {\n         cx,"}]}