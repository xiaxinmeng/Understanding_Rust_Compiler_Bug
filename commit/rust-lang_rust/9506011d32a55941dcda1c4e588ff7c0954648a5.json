{"sha": "9506011d32a55941dcda1c4e588ff7c0954648a5", "node_id": "C_kwDOAAsO6NoAKDk1MDYwMTFkMzJhNTU5NDFkY2RhMWM0ZTU4OGZmN2MwOTU0NjQ4YTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-12T12:01:18Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:35:09Z"}, "message": "Fix allocator shim handling in miri", "tree": {"sha": "79c3e538ae2f4cc674f12a6230935e7491d0f988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c3e538ae2f4cc674f12a6230935e7491d0f988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9506011d32a55941dcda1c4e588ff7c0954648a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9506011d32a55941dcda1c4e588ff7c0954648a5", "html_url": "https://github.com/rust-lang/rust/commit/9506011d32a55941dcda1c4e588ff7c0954648a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9506011d32a55941dcda1c4e588ff7c0954648a5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea28a41326591852453730723cf06dbba7d73e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea28a41326591852453730723cf06dbba7d73e1", "html_url": "https://github.com/rust-lang/rust/commit/8ea28a41326591852453730723cf06dbba7d73e1"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "f95a0a981c2e3a8f75e862c588a6861e06a1ab90", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9506011d32a55941dcda1c4e588ff7c0954648a5/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9506011d32a55941dcda1c4e588ff7c0954648a5/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=9506011d32a55941dcda1c4e588ff7c0954648a5", "patch": "@@ -635,6 +635,10 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n \n     /// Sets up the \"extern statics\" for this machine.\n     fn init_extern_statics(this: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n+        // \"__rust_no_alloc_shim_is_unstable\"\n+        let val = ImmTy::from_int(0, this.machine.layouts.u8);\n+        Self::alloc_extern_static(this, \"__rust_no_alloc_shim_is_unstable\", val)?;\n+\n         match this.tcx.sess.target.os.as_ref() {\n             \"linux\" => {\n                 // \"environ\""}, {"sha": "cc2d4cd640a907b872d2ba123260205551fd02db", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9506011d32a55941dcda1c4e588ff7c0954648a5/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9506011d32a55941dcda1c4e588ff7c0954648a5/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=9506011d32a55941dcda1c4e588ff7c0954648a5", "patch": "@@ -347,7 +347,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Emulates calling the internal __rust_* allocator functions\n     fn emulate_allocator(\n         &mut self,\n-        symbol: Symbol,\n         default: impl FnOnce(&mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx, EmulateByNameResult<'mir, 'tcx>> {\n         let this = self.eval_context_mut();\n@@ -359,11 +358,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         match allocator_kind {\n             AllocatorKind::Global => {\n-                let (body, instance) = this\n-                    .lookup_exported_symbol(symbol)?\n-                    .expect(\"symbol should be present if there is a global allocator\");\n-\n-                Ok(EmulateByNameResult::MirBody(body, instance))\n+                // `__rust_*` is defined by `#[global_allocator]` if `#[global_allocator]` is used\n+                return Ok(EmulateByNameResult::NotSupported);\n             }\n             AllocatorKind::Default => {\n                 default(this)?;\n@@ -558,11 +554,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             // Rust allocation\n             \"__rust_alloc\" | \"miri_alloc\" => {\n-                let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_target_usize(size)?;\n-                let align = this.read_target_usize(align)?;\n-\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let size = this.read_target_usize(size)?;\n+                    let align = this.read_target_usize(align)?;\n+\n                     Self::check_alloc_request(size, align)?;\n \n                     let memory_kind = match link_name.as_str() {\n@@ -581,8 +577,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_alloc\" =>\n-                        return this.emulate_allocator(Symbol::intern(\"__rg_alloc\"), default),\n+                    \"__rust_alloc\" => return this.emulate_allocator(default),\n                     \"miri_alloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -591,11 +586,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_alloc_zeroed\" => {\n-                let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let size = this.read_target_usize(size)?;\n-                let align = this.read_target_usize(align)?;\n+                return this.emulate_allocator(|this| {\n+                    let [size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let size = this.read_target_usize(size)?;\n+                    let align = this.read_target_usize(align)?;\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_alloc_zeroed\"), |this| {\n                     Self::check_alloc_request(size, align)?;\n \n                     let ptr = this.allocate_ptr(\n@@ -614,12 +609,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 });\n             }\n             \"__rust_dealloc\" | \"miri_dealloc\" => {\n-                let [ptr, old_size, align] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_target_usize(old_size)?;\n-                let align = this.read_target_usize(align)?;\n-\n                 let default = |this: &mut MiriInterpCx<'mir, 'tcx>| {\n+                    let [ptr, old_size, align] =\n+                        this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let ptr = this.read_pointer(ptr)?;\n+                    let old_size = this.read_target_usize(old_size)?;\n+                    let align = this.read_target_usize(align)?;\n+\n                     let memory_kind = match link_name.as_str() {\n                         \"__rust_dealloc\" => MiriMemoryKind::Rust,\n                         \"miri_dealloc\" => MiriMemoryKind::Miri,\n@@ -635,8 +631,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 };\n \n                 match link_name.as_str() {\n-                    \"__rust_dealloc\" =>\n-                        return this.emulate_allocator(Symbol::intern(\"__rg_dealloc\"), default),\n+                    \"__rust_dealloc\" => {\n+                        return this.emulate_allocator(default);\n+                    }\n                     \"miri_dealloc\" => {\n                         default(this)?;\n                         return Ok(EmulateByNameResult::NeedsJumping);\n@@ -645,15 +642,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             \"__rust_realloc\" => {\n-                let [ptr, old_size, align, new_size] =\n-                    this.check_shim(abi, Abi::Rust, link_name, args)?;\n-                let ptr = this.read_pointer(ptr)?;\n-                let old_size = this.read_target_usize(old_size)?;\n-                let align = this.read_target_usize(align)?;\n-                let new_size = this.read_target_usize(new_size)?;\n-                // No need to check old_size; we anyway check that they match the allocation.\n+                return this.emulate_allocator(|this| {\n+                    let [ptr, old_size, align, new_size] =\n+                        this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                    let ptr = this.read_pointer(ptr)?;\n+                    let old_size = this.read_target_usize(old_size)?;\n+                    let align = this.read_target_usize(align)?;\n+                    let new_size = this.read_target_usize(new_size)?;\n+                    // No need to check old_size; we anyway check that they match the allocation.\n \n-                return this.emulate_allocator(Symbol::intern(\"__rg_realloc\"), |this| {\n                     Self::check_alloc_request(new_size, align)?;\n \n                     let align = Align::from_bytes(align).unwrap();"}]}