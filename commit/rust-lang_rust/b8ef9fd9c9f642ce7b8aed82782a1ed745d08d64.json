{"sha": "b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZWY5ZmQ5YzlmNjQyY2U3YjhhZWQ4Mjc4MmExZWQ3NDVkMDhkNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T22:51:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-31T22:51:33Z"}, "message": "auto merge of #13184 : alexcrichton/rust/priv-fields, r=brson\n\nThis is an implementation of a portion of [RFC #4](https://github.com/rust-lang/rfcs/blob/master/active/0004-private-fields.md). This PR makes named struct fields private by default (as opposed to inherited by default).\r\n\r\nThe only real meaty change is the first commit to `rustc`, all other commits are just fallout of that change.\r\n\r\nSummary of changes made:\r\n\r\n* Named fields are private by default *everywhere*\r\n* The `priv` keyword is now default-deny on named fields (done in a \"lint\" pass in privacy)\r\n\r\nChanges yet to be done (before the RFC is closed)\r\n\r\n* Change tuple structs to have private fields by default\r\n* Remove `priv` enum variants\r\n* Make `priv` a reserved keyword", "tree": {"sha": "1e66451d207e19694d62608a8e1724c71796dc00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e66451d207e19694d62608a8e1724c71796dc00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "html_url": "https://github.com/rust-lang/rust/commit/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e057d402a345f547e67a326871621472d04035", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e057d402a345f547e67a326871621472d04035", "html_url": "https://github.com/rust-lang/rust/commit/a7e057d402a345f547e67a326871621472d04035"}, {"sha": "37a3131640d0fa2633aa26db7f849d110250ce51", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a3131640d0fa2633aa26db7f849d110250ce51", "html_url": "https://github.com/rust-lang/rust/commit/37a3131640d0fa2633aa26db7f849d110250ce51"}], "stats": {"total": 5323, "additions": 2649, "deletions": 2674}, "files": [{"sha": "ea6e98fafa7cdda73649d32ad9925f62c905ae84", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,87 +21,87 @@ pub enum mode {\n #[deriving(Clone)]\n pub struct config {\n     // The library paths required for running the compiler\n-    compile_lib_path: ~str,\n+    pub compile_lib_path: ~str,\n \n     // The library paths required for running compiled programs\n-    run_lib_path: ~str,\n+    pub run_lib_path: ~str,\n \n     // The rustc executable\n-    rustc_path: Path,\n+    pub rustc_path: Path,\n \n     // The clang executable\n-    clang_path: Option<Path>,\n+    pub clang_path: Option<Path>,\n \n     // The llvm binaries path\n-    llvm_bin_path: Option<Path>,\n+    pub llvm_bin_path: Option<Path>,\n \n     // The directory containing the tests to run\n-    src_base: Path,\n+    pub src_base: Path,\n \n     // The directory where programs should be built\n-    build_base: Path,\n+    pub build_base: Path,\n \n     // Directory for auxiliary libraries\n-    aux_base: Path,\n+    pub aux_base: Path,\n \n     // The name of the stage being built (stage1, etc)\n-    stage_id: ~str,\n+    pub stage_id: ~str,\n \n     // The test mode, compile-fail, run-fail, run-pass\n-    mode: mode,\n+    pub mode: mode,\n \n     // Run ignored tests\n-    run_ignored: bool,\n+    pub run_ignored: bool,\n \n     // Only run tests that match this filter\n-    filter: Option<~str>,\n+    pub filter: Option<~str>,\n \n     // Write out a parseable log of tests that were run\n-    logfile: Option<Path>,\n+    pub logfile: Option<Path>,\n \n     // Write out a json file containing any metrics of the run\n-    save_metrics: Option<Path>,\n+    pub save_metrics: Option<Path>,\n \n     // Write and ratchet a metrics file\n-    ratchet_metrics: Option<Path>,\n+    pub ratchet_metrics: Option<Path>,\n \n     // Percent change in metrics to consider noise\n-    ratchet_noise_percent: Option<f64>,\n+    pub ratchet_noise_percent: Option<f64>,\n \n-    // \"Shard\" of the testsuite to run: this has the form of\n+    // \"Shard\" of the testsuite to pub run: this has the form of\n     // two numbers (a,b), and causes only those tests with\n     // positional order equal to a mod b to run.\n-    test_shard: Option<(uint,uint)>,\n+    pub test_shard: Option<(uint,uint)>,\n \n     // A command line to prefix program execution with,\n     // for running under valgrind\n-    runtool: Option<~str>,\n+    pub runtool: Option<~str>,\n \n     // Flags to pass to the compiler when building for the host\n-    host_rustcflags: Option<~str>,\n+    pub host_rustcflags: Option<~str>,\n \n     // Flags to pass to the compiler when building for the target\n-    target_rustcflags: Option<~str>,\n+    pub target_rustcflags: Option<~str>,\n \n     // Run tests using the JIT\n-    jit: bool,\n+    pub jit: bool,\n \n     // Target system to be tested\n-    target: ~str,\n+    pub target: ~str,\n \n     // Host triple for the compiler being invoked\n-    host: ~str,\n+    pub host: ~str,\n \n     // Extra parameter to run adb on arm-linux-androideabi\n-    adb_path: ~str,\n+    pub adb_path: ~str,\n \n     // Extra parameter to run test sute on arm-linux-androideabi\n-    adb_test_dir: ~str,\n+    pub adb_test_dir: ~str,\n \n     // status whether android device available or not\n-    adb_device_status: bool,\n+    pub adb_device_status: bool,\n \n     // Explain what's going on\n-    verbose: bool\n+    pub verbose: bool\n \n }"}, {"sha": "42b756271d43c52bc1ad842d2688dedc5e1a4385", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,11 @@\n \n use std::io::{BufferedReader, File};\n \n-pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n+pub struct ExpectedError {\n+    pub line: uint,\n+    pub kind: ~str,\n+    pub msg: ~str,\n+}\n \n // Load any test directives embedded in the file\n pub fn load_errors(testfile: &Path) -> Vec<ExpectedError> {"}, {"sha": "b45a68518a3ec4320c913728db232dfe1456648b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,26 +14,26 @@ use util;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n-    error_patterns: Vec<~str> ,\n+    pub error_patterns: Vec<~str> ,\n     // Extra flags to pass to the compiler\n-    compile_flags: Option<~str>,\n+    pub compile_flags: Option<~str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: Option<Path>,\n+    pub pp_exact: Option<Path>,\n     // Modules from aux directory that should be compiled\n-    aux_builds: Vec<~str> ,\n+    pub aux_builds: Vec<~str> ,\n     // Environment settings to use during execution\n-    exec_env: Vec<(~str,~str)> ,\n+    pub exec_env: Vec<(~str,~str)> ,\n     // Commands to be given to the debugger, when testing debug info\n-    debugger_cmds: Vec<~str> ,\n+    pub debugger_cmds: Vec<~str> ,\n     // Lines to check if they appear in the expected debugger output\n-    check_lines: Vec<~str> ,\n+    pub check_lines: Vec<~str> ,\n     // Flag to force a crate to be built with the host architecture\n-    force_host: bool,\n+    pub force_host: bool,\n     // Check stdout for error-pattern output as well as stderr\n-    check_stdout: bool,\n+    pub check_stdout: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n-    no_prefer_dynamic: bool,\n+    pub no_prefer_dynamic: bool,\n }\n \n // Load any test directives embedded in the file"}, {"sha": "e00b864f2e9ebf892d4deab3467911edceefe250", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -57,7 +57,7 @@ fn target_env(lib_path: &str, prog: &str) -> Vec<(~str,~str)> {\n     return env;\n }\n \n-pub struct Result {status: ProcessExit, out: ~str, err: ~str}\n+pub struct Result {pub status: ProcessExit, pub out: ~str, pub err: ~str}\n \n pub fn run(lib_path: &str,\n            prog: &str,"}, {"sha": "4c8e32982c10e75c8a84e721e427acb755728524", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -200,7 +200,7 @@ use std::ptr;\n // Unique<T> has the same semantics as ~T\n pub struct Unique<T> {\n     // It contains a single raw, mutable pointer to the object in question.\n-    priv ptr: *mut T\n+    ptr: *mut T\n }\n \n // Implement methods for creating and using the values in the box."}, {"sha": "98db4cb536791593e37e6910dc3b3751f7b08697", "filename": "src/doc/rust.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -1527,12 +1527,9 @@ of an item to see whether it should be allowed or not. This is where privacy\n warnings are generated, or otherwise \"you used a private item of another module\n and weren't allowed to.\"\n \n-By default, everything in rust is *private*, with two exceptions. The first\n-exception is that struct fields are public by default (but the struct itself is\n-still private by default), and the remaining exception is that enum variants in\n-a `pub` enum are the default visibility of the enum container itself.. You are\n-allowed to alter this default visibility with the `pub` keyword (or `priv`\n-keyword for struct fields and enum variants). When an item is declared as `pub`,\n+By default, everything in rust is *private*, with one exception. Enum variants\n+in a `pub` enum are also public by default. You are allowed to alter this\n+default visibility with the `priv` keyword. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ~~~~\n@@ -1542,7 +1539,7 @@ struct Foo;\n \n // Declare a public struct with a private field\n pub struct Bar {\n-    priv field: int\n+    field: int\n }\n \n // Declare a public enum with public and private variants\n@@ -2354,7 +2351,7 @@ The following are examples of structure expressions:\n ~~~~\n # struct Point { x: f64, y: f64 }\n # struct TuplePoint(f64, f64);\n-# mod game { pub struct User<'a> { name: &'a str, age: uint, score: uint } }\n+# mod game { pub struct User<'a> { pub name: &'a str, pub age: uint, pub score: uint } }\n # struct Cookie; fn some_fn<T>(t: T) {}\n Point {x: 10.0, y: 20.0};\n TuplePoint(10.0, 20.0);\n@@ -3140,7 +3137,7 @@ The types `char` and `str` hold textual data.\n A value of type `char` is a [Unicode scalar value](\n http://www.unicode.org/glossary/#unicode_scalar_value)\n (ie. a code point that is not a surrogate),\n-represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF \n+represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF\n or 0xE000 to 0x10FFFF range.\n A `[char]` vector is effectively an UCS-4 / UTF-32 string.\n "}, {"sha": "3423a5e090eea44719cdc19fc0c36fe19c987c0e", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -2657,8 +2657,8 @@ Rust doesn't support encapsulation: both struct fields and methods can\n be private. But this encapsulation is at the module level, not the\n struct level.\n \n-For convenience, fields are _public_ by default, and can be made _private_ with\n-the `priv` keyword:\n+Fields are _private_ by default, and can be made _public_ with\n+the `pub` keyword:\n \n ~~~\n mod farm {\n@@ -2667,8 +2667,8 @@ mod farm {\n # impl Human { pub fn rest(&self) { } }\n # pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], farmer: Human(0) } }\n     pub struct Farm {\n-        priv chickens: ~[Chicken],\n-        farmer: Human\n+        chickens: ~[Chicken],\n+        pub farmer: Human\n     }\n \n     impl Farm {"}, {"sha": "2099d3c01c4331b27f7daddca4e3ea015b5260e3", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -25,6 +25,8 @@\n #![allow(missing_doc)]\n #![feature(managed_boxes)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n extern crate collections;\n \n use std::cast::{transmute, transmute_mut, transmute_mut_region};\n@@ -83,9 +85,9 @@ pub struct Arena {\n     // The head is separated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n-    priv head: Chunk,\n-    priv copy_head: Chunk,\n-    priv chunks: RefCell<Vec<Chunk>>,\n+    head: Chunk,\n+    copy_head: Chunk,\n+    chunks: RefCell<Vec<Chunk>>,\n }\n \n impl Arena {\n@@ -333,14 +335,14 @@ fn test_arena_destructors_fail() {\n /// run again for these objects.\n pub struct TypedArena<T> {\n     /// A pointer to the next object to be allocated.\n-    priv ptr: *T,\n+    ptr: *T,\n \n     /// A pointer to the end of the allocated area. When this pointer is\n     /// reached, a new chunk is allocated.\n-    priv end: *T,\n+    end: *T,\n \n     /// A pointer to the first arena segment.\n-    priv first: Option<~TypedArenaChunk<T>>,\n+    first: Option<~TypedArenaChunk<T>>,\n }\n \n struct TypedArenaChunk<T> {"}, {"sha": "510e8908427c010a443fa0476d97c3edcc426d76", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -227,9 +227,9 @@ enum Op {Union, Intersect, Assign, Difference}\n #[deriving(Clone)]\n pub struct Bitv {\n     /// Internal representation of the bit vector (small or large)\n-    priv rep: BitvVariant,\n+    rep: BitvVariant,\n     /// The number of valid bits in the internal representation\n-    priv nbits: uint\n+    nbits: uint\n }\n \n fn die() -> ! {\n@@ -587,9 +587,9 @@ fn iterate_bits(base: uint, bits: uint, f: |uint| -> bool) -> bool {\n \n /// An iterator for `Bitv`.\n pub struct Bits<'a> {\n-    priv bitv: &'a Bitv,\n-    priv next_idx: uint,\n-    priv end_idx: uint,\n+    bitv: &'a Bitv,\n+    next_idx: uint,\n+    end_idx: uint,\n }\n \n impl<'a> Iterator<bool> for Bits<'a> {\n@@ -648,12 +648,12 @@ impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n /// as a `uint`.\n #[deriving(Clone)]\n pub struct BitvSet {\n-    priv size: uint,\n+    size: uint,\n \n     // In theory this is a `Bitv` instead of always a `BigBitv`, but knowing that\n     // there's an array of storage makes our lives a whole lot easier when\n     // performing union/intersection/etc operations\n-    priv bitv: BigBitv\n+    bitv: BigBitv\n }\n \n impl BitvSet {\n@@ -912,8 +912,8 @@ impl BitvSet {\n }\n \n pub struct BitPositions<'a> {\n-    priv set: &'a BitvSet,\n-    priv next_idx: uint\n+    set: &'a BitvSet,\n+    next_idx: uint\n }\n \n impl<'a> Iterator<uint> for BitPositions<'a> {"}, {"sha": "b516997b81e77aefa15359d3c03d6a05ba740243", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,10 +23,10 @@ use std::fmt::Show;\n \n #[allow(missing_doc)]\n pub struct BTree<K, V> {\n-    priv root: Node<K, V>,\n-    priv len: uint,\n-    priv lower_bound: uint,\n-    priv upper_bound: uint\n+    root: Node<K, V>,\n+    len: uint,\n+    lower_bound: uint,\n+    upper_bound: uint\n }\n \n impl<K: TotalOrd, V> BTree<K, V> {"}, {"sha": "1c3a01a355d3cbb7461d96ce326ede071bd7c6bc", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -32,9 +32,9 @@ use deque::Deque;\n \n /// A doubly-linked list.\n pub struct DList<T> {\n-    priv length: uint,\n-    priv list_head: Link<T>,\n-    priv list_tail: Rawlink<Node<T>>,\n+    length: uint,\n+    list_head: Link<T>,\n+    list_tail: Rawlink<Node<T>>,\n }\n \n type Link<T> = Option<~Node<T>>;\n@@ -48,9 +48,9 @@ struct Node<T> {\n \n /// Double-ended DList iterator\n pub struct Items<'a, T> {\n-    priv head: &'a Link<T>,\n-    priv tail: Rawlink<Node<T>>,\n-    priv nelem: uint,\n+    head: &'a Link<T>,\n+    tail: Rawlink<Node<T>>,\n+    nelem: uint,\n }\n \n // FIXME #11820: the &'a Option<> of the Link stops clone working.\n@@ -60,16 +60,16 @@ impl<'a, T> Clone for Items<'a, T> {\n \n /// Double-ended mutable DList iterator\n pub struct MutItems<'a, T> {\n-    priv list: &'a mut DList<T>,\n-    priv head: Rawlink<Node<T>>,\n-    priv tail: Rawlink<Node<T>>,\n-    priv nelem: uint,\n+    list: &'a mut DList<T>,\n+    head: Rawlink<Node<T>>,\n+    tail: Rawlink<Node<T>>,\n+    nelem: uint,\n }\n \n /// DList consuming iterator\n #[deriving(Clone)]\n pub struct MoveItems<T> {\n-    priv list: DList<T>\n+    list: DList<T>\n }\n \n /// Rawlink is a type like Option<T> but for holding a raw pointer"}, {"sha": "83ba09ac68b6ce6c0e13b2ffed47a3af20950ad2", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,7 +20,7 @@ use std::num::Bitwise;\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists\n-    priv bits: uint\n+    bits: uint\n }\n \n /// An interface for casting C-like enum to uint and back.\n@@ -102,8 +102,8 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n \n /// An iterator over an EnumSet\n pub struct Items<E> {\n-    priv index: uint,\n-    priv bits: uint,\n+    index: uint,\n+    bits: uint,\n }\n \n impl<E:CLike> Items<E> {"}, {"sha": "47100559f44983b8339abb089b582a73f419b979", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -100,25 +100,25 @@ mod table {\n     /// this and going \"what? of course there are debug-only asserts!\", then\n     /// please make this use them!\n     pub struct RawTable<K, V> {\n-        priv capacity: uint,\n-        priv size:     uint,\n-        priv hashes:   *mut u64,\n-        priv keys:     *mut K,\n-        priv vals:     *mut V,\n+        capacity: uint,\n+        size:     uint,\n+        hashes:   *mut u64,\n+        keys:     *mut K,\n+        vals:     *mut V,\n     }\n \n     /// Represents an index into a `RawTable` with no key or value in it.\n     pub struct EmptyIndex {\n-        priv idx:   int,\n-        priv nocopy: marker::NoCopy,\n+        idx:   int,\n+        nocopy: marker::NoCopy,\n     }\n \n     /// Represents an index into a `RawTable` with a key, value, and hash\n     /// in it.\n     pub struct FullIndex {\n-        priv idx:   int,\n-        priv hash:  SafeHash,\n-        priv nocopy: marker::NoCopy,\n+        idx:   int,\n+        hash:  SafeHash,\n+        nocopy: marker::NoCopy,\n     }\n \n     impl FullIndex {\n@@ -142,7 +142,7 @@ mod table {\n     /// A hash that is not zero, since we use that to represent empty buckets.\n     #[deriving(Eq)]\n     pub struct SafeHash {\n-        priv hash: u64,\n+        hash: u64,\n     }\n \n     impl SafeHash {\n@@ -376,18 +376,18 @@ mod table {\n     }\n \n     pub struct Entries<'a, K, V> {\n-        priv table: &'a RawTable<K, V>,\n-        priv idx: uint,\n+        table: &'a RawTable<K, V>,\n+        idx: uint,\n     }\n \n     pub struct MutEntries<'a, K, V> {\n-        priv table: &'a mut RawTable<K, V>,\n-        priv idx: uint,\n+        table: &'a mut RawTable<K, V>,\n+        idx: uint,\n     }\n \n     pub struct MoveEntries<K, V> {\n-        priv table: RawTable<K, V>,\n-        priv idx: uint,\n+        table: RawTable<K, V>,\n+        idx: uint,\n     }\n \n     impl<'a, K, V> Iterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n@@ -675,19 +675,19 @@ static INITIAL_LOAD_FACTOR: Fraction = (9, 10);\n #[deriving(Clone)]\n pub struct HashMap<K, V, H = sip::SipHasher> {\n     // All hashes are keyed on these values, to prevent hash collision attacks.\n-    priv hasher: H,\n+    hasher: H,\n \n     // When size == grow_at, we double the capacity.\n-    priv grow_at: uint,\n+    grow_at: uint,\n \n     // The capacity must never drop below this.\n-    priv minimum_capacity: uint,\n+    minimum_capacity: uint,\n \n-    priv table: table::RawTable<K, V>,\n+    table: table::RawTable<K, V>,\n \n     // We keep this at the end since it's 4-bytes, unlike everything else\n     // in this struct. Might as well save a word of padding!\n-    priv load_factor: Fraction,\n+    load_factor: Fraction,\n }\n \n /// Get the number of elements which will force the capacity to grow.\n@@ -1385,7 +1385,7 @@ pub type SetMoveItems<K> =\n /// requires that the elements implement the `Eq` and `Hash` traits.\n #[deriving(Clone)]\n pub struct HashSet<T, H = sip::SipHasher> {\n-    priv map: HashMap<T, (), H>\n+    map: HashMap<T, (), H>\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {"}, {"sha": "de8d1c999bd3c36e43221655e44f8a07925e7dd8", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,6 +22,8 @@\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n extern crate rand;\n \n #[cfg(test)] extern crate test;"}, {"sha": "bd40d183945557c05d84eca7f530fd44a0931e29", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -56,10 +56,10 @@ struct LruEntry<K, V> {\n \n /// An LRU Cache.\n pub struct LruCache<K, V> {\n-    priv map: HashMap<KeyRef<K>, ~LruEntry<K, V>>,\n-    priv max_size: uint,\n-    priv head: *mut LruEntry<K, V>,\n-    priv tail: *mut LruEntry<K, V>,\n+    map: HashMap<KeyRef<K>, ~LruEntry<K, V>>,\n+    max_size: uint,\n+    head: *mut LruEntry<K, V>,\n+    tail: *mut LruEntry<K, V>,\n }\n \n impl<S, K: Hash<S>> Hash<S> for KeyRef<K> {"}, {"sha": "8c7eb1c6033d081d3524ef77a23e6c08d4b3aa95", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -19,7 +19,7 @@ use std::slice;\n /// A priority queue implemented with a binary heap\n #[deriving(Clone)]\n pub struct PriorityQueue<T> {\n-    priv data: ~[T],\n+    data: ~[T],\n }\n \n impl<T:Ord> Container for PriorityQueue<T> {\n@@ -181,7 +181,7 @@ impl<T:Ord> PriorityQueue<T> {\n \n /// PriorityQueue iterator\n pub struct Items <'a, T> {\n-    priv iter: slice::Items<'a, T>,\n+    iter: slice::Items<'a, T>,\n }\n \n impl<'a, T> Iterator<&'a T> for Items<'a, T> {"}, {"sha": "705e0f7d3d486a15d8cd277ee69f70bae95c49dc", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -25,9 +25,9 @@ static MINIMUM_CAPACITY: uint = 2u;\n /// RingBuf is a circular buffer that implements Deque.\n #[deriving(Clone)]\n pub struct RingBuf<T> {\n-    priv nelts: uint,\n-    priv lo: uint,\n-    priv elts: ~[Option<T>]\n+    nelts: uint,\n+    lo: uint,\n+    elts: ~[Option<T>]\n }\n \n impl<T> Container for RingBuf<T> {\n@@ -230,10 +230,10 @@ impl<T> RingBuf<T> {\n \n /// RingBuf iterator\n pub struct Items<'a, T> {\n-    priv lo: uint,\n-    priv index: uint,\n-    priv rindex: uint,\n-    priv elts: &'a [Option<T>],\n+    lo: uint,\n+    index: uint,\n+    rindex: uint,\n+    elts: &'a [Option<T>],\n }\n \n impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n@@ -285,9 +285,9 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n \n /// RingBuf mutable iterator\n pub struct MutItems<'a, T> {\n-    priv remaining1: &'a mut [Option<T>],\n-    priv remaining2: &'a mut [Option<T>],\n-    priv nelts: uint,\n+    remaining1: &'a mut [Option<T>],\n+    remaining2: &'a mut [Option<T>],\n+    nelts: uint,\n }\n \n impl<'a, T> Iterator<&'a mut T> for MutItems<'a, T> {"}, {"sha": "db7fafe522b72bbd12c7eb6d94536cc4595e2a7a", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,7 +21,7 @@ use std::slice;\n \n #[allow(missing_doc)]\n pub struct SmallIntMap<T> {\n-    priv v: ~[Option<T>],\n+    v: ~[Option<T>],\n }\n \n impl<V> Container for SmallIntMap<V> {\n@@ -234,19 +234,19 @@ macro_rules! double_ended_iterator {\n }\n \n pub struct Entries<'a, T> {\n-    priv front: uint,\n-    priv back: uint,\n-    priv iter: slice::Items<'a, Option<T>>\n+    front: uint,\n+    back: uint,\n+    iter: slice::Items<'a, Option<T>>\n }\n \n iterator!(impl Entries -> (uint, &'a T), get_ref)\n double_ended_iterator!(impl Entries -> (uint, &'a T), get_ref)\n pub type RevEntries<'a, T> = Rev<Entries<'a, T>>;\n \n pub struct MutEntries<'a, T> {\n-    priv front: uint,\n-    priv back: uint,\n-    priv iter: slice::MutItems<'a, Option<T>>\n+    front: uint,\n+    back: uint,\n+    iter: slice::MutItems<'a, Option<T>>\n }\n \n iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)"}, {"sha": "0a5e653f8ebd69b9faa59c75529024ce49b682a6", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -36,8 +36,8 @@ use std::ptr;\n #[allow(missing_doc)]\n #[deriving(Clone)]\n pub struct TreeMap<K, V> {\n-    priv root: Option<~TreeNode<K, V>>,\n-    priv length: uint\n+    root: Option<~TreeNode<K, V>>,\n+    length: uint\n }\n \n impl<K: Eq + TotalOrd, V: Eq> Eq for TreeMap<K, V> {\n@@ -273,24 +273,24 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n \n /// Lazy forward iterator over a map\n pub struct Entries<'a, K, V> {\n-    priv stack: ~[&'a TreeNode<K, V>],\n+    stack: ~[&'a TreeNode<K, V>],\n     // See the comment on MutEntries; this is just to allow\n     // code-sharing (for this immutable-values iterator it *could* very\n     // well be Option<&'a TreeNode<K,V>>).\n-    priv node: *TreeNode<K, V>,\n-    priv remaining_min: uint,\n-    priv remaining_max: uint\n+    node: *TreeNode<K, V>,\n+    remaining_min: uint,\n+    remaining_max: uint\n }\n \n /// Lazy backward iterator over a map\n pub struct RevEntries<'a, K, V> {\n-    priv iter: Entries<'a, K, V>,\n+    iter: Entries<'a, K, V>,\n }\n \n /// Lazy forward iterator over a map that allows for the mutation of\n /// the values.\n pub struct MutEntries<'a, K, V> {\n-    priv stack: ~[&'a mut TreeNode<K, V>],\n+    stack: ~[&'a mut TreeNode<K, V>],\n     // Unfortunately, we require some unsafe-ness to get around the\n     // fact that we would be storing a reference *into* one of the\n     // nodes in the stack.\n@@ -310,14 +310,14 @@ pub struct MutEntries<'a, K, V> {\n     // it under control.\n     //\n     // (This field can legitimately be null.)\n-    priv node: *mut TreeNode<K, V>,\n-    priv remaining_min: uint,\n-    priv remaining_max: uint\n+    node: *mut TreeNode<K, V>,\n+    remaining_min: uint,\n+    remaining_max: uint\n }\n \n /// Lazy backward iterator over a map\n pub struct RevMutEntries<'a, K, V> {\n-    priv iter: MutEntries<'a, K, V>,\n+    iter: MutEntries<'a, K, V>,\n }\n \n \n@@ -482,8 +482,8 @@ fn mut_deref<K, V>(x: &mut Option<~TreeNode<K, V>>) -> *mut TreeNode<K, V> {\n \n /// Lazy forward iterator over a map that consumes the map while iterating\n pub struct MoveEntries<K, V> {\n-    priv stack: ~[TreeNode<K, V>],\n-    priv remaining: uint\n+    stack: ~[TreeNode<K, V>],\n+    remaining: uint\n }\n \n impl<K, V> Iterator<(K, V)> for MoveEntries<K,V> {\n@@ -551,7 +551,7 @@ impl<'a, T> Iterator<&'a T> for RevSetItems<'a, T> {\n /// `TotalOrd` trait.\n #[deriving(Clone)]\n pub struct TreeSet<T> {\n-    priv map: TreeMap<T, ()>\n+    map: TreeMap<T, ()>\n }\n \n impl<T: Eq + TotalOrd> Eq for TreeSet<T> {\n@@ -703,36 +703,36 @@ impl<T: TotalOrd> TreeSet<T> {\n \n /// Lazy forward iterator over a set\n pub struct SetItems<'a, T> {\n-    priv iter: Entries<'a, T, ()>\n+    iter: Entries<'a, T, ()>\n }\n \n /// Lazy backward iterator over a set\n pub struct RevSetItems<'a, T> {\n-    priv iter: RevEntries<'a, T, ()>\n+    iter: RevEntries<'a, T, ()>\n }\n \n /// Lazy iterator producing elements in the set difference (in-order)\n pub struct DifferenceItems<'a, T> {\n-    priv a: Peekable<&'a T, SetItems<'a, T>>,\n-    priv b: Peekable<&'a T, SetItems<'a, T>>,\n+    a: Peekable<&'a T, SetItems<'a, T>>,\n+    b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n /// Lazy iterator producing elements in the set symmetric difference (in-order)\n pub struct SymDifferenceItems<'a, T> {\n-    priv a: Peekable<&'a T, SetItems<'a, T>>,\n-    priv b: Peekable<&'a T, SetItems<'a, T>>,\n+    a: Peekable<&'a T, SetItems<'a, T>>,\n+    b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n /// Lazy iterator producing elements in the set intersection (in-order)\n pub struct IntersectionItems<'a, T> {\n-    priv a: Peekable<&'a T, SetItems<'a, T>>,\n-    priv b: Peekable<&'a T, SetItems<'a, T>>,\n+    a: Peekable<&'a T, SetItems<'a, T>>,\n+    b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n /// Lazy iterator producing elements in the set intersection (in-order)\n pub struct UnionItems<'a, T> {\n-    priv a: Peekable<&'a T, SetItems<'a, T>>,\n-    priv b: Peekable<&'a T, SetItems<'a, T>>,\n+    a: Peekable<&'a T, SetItems<'a, T>>,\n+    b: Peekable<&'a T, SetItems<'a, T>>,\n }\n \n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None"}, {"sha": "740a36377003ea4ae2d73b080a82c57e77ed51e8", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,8 +30,8 @@ enum Child<T> {\n \n #[allow(missing_doc)]\n pub struct TrieMap<T> {\n-    priv root: TrieNode<T>,\n-    priv length: uint\n+    root: TrieNode<T>,\n+    length: uint\n }\n \n impl<T> Container for TrieMap<T> {\n@@ -278,7 +278,7 @@ impl<T> Extendable<(uint, T)> for TrieMap<T> {\n \n #[allow(missing_doc)]\n pub struct TrieSet {\n-    priv map: TrieMap<()>\n+    map: TrieMap<()>\n }\n \n impl Container for TrieSet {\n@@ -474,19 +474,19 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n \n /// Forward iterator over a map\n pub struct Entries<'a, T> {\n-    priv stack: [slice::Items<'a, Child<T>>, .. NUM_CHUNKS],\n-    priv length: uint,\n-    priv remaining_min: uint,\n-    priv remaining_max: uint\n+    stack: [slice::Items<'a, Child<T>>, .. NUM_CHUNKS],\n+    length: uint,\n+    remaining_min: uint,\n+    remaining_max: uint\n }\n \n /// Forward iterator over the key-value pairs of a map, with the\n /// values being mutable.\n pub struct MutEntries<'a, T> {\n-    priv stack: [slice::MutItems<'a, Child<T>>, .. NUM_CHUNKS],\n-    priv length: uint,\n-    priv remaining_min: uint,\n-    priv remaining_max: uint\n+    stack: [slice::MutItems<'a, Child<T>>, .. NUM_CHUNKS],\n+    length: uint,\n+    remaining_min: uint,\n+    remaining_max: uint\n }\n \n // FIXME #5846: see `addr!` above.\n@@ -605,7 +605,7 @@ iterator_impl! { MutEntries, iter = mut_iter, mutability = mut }\n \n /// Forward iterator over a set\n pub struct SetItems<'a> {\n-    priv iter: Entries<'a, ()>\n+    iter: Entries<'a, ()>\n }\n \n impl<'a> Iterator<uint> for SetItems<'a> {"}, {"sha": "e8a40ed66a1f981bbfa720fac071a2fa5a1c9ff4", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -87,6 +87,8 @@\n #![deny(missing_doc)]\n #![deny(deprecated_owned_vector)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::cmp::Eq;\n@@ -130,31 +132,31 @@ pub enum Occur {\n #[deriving(Clone, Eq)]\n pub struct Opt {\n     /// Name of the option\n-    name: Name,\n+    pub name: Name,\n     /// Whether it has an argument\n-    hasarg: HasArg,\n+    pub hasarg: HasArg,\n     /// How often it can occur\n-    occur: Occur,\n+    pub occur: Occur,\n     /// Which options it aliases\n-    priv aliases: Vec<Opt> ,\n+    pub aliases: Vec<Opt> ,\n }\n \n /// One group of options, e.g., both -h and --help, along with\n /// their shared description and properties.\n #[deriving(Clone, Eq)]\n pub struct OptGroup {\n     /// Short Name of the `OptGroup`\n-    short_name: ~str,\n+    pub short_name: ~str,\n     /// Long Name of the `OptGroup`\n-    long_name: ~str,\n+    pub long_name: ~str,\n     /// Hint\n-    hint: ~str,\n+    pub hint: ~str,\n     /// Description\n-    desc: ~str,\n+    pub desc: ~str,\n     /// Whether it has an argument\n-    hasarg: HasArg,\n+    pub hasarg: HasArg,\n     /// How often it can occur\n-    occur: Occur\n+    pub occur: Occur\n }\n \n /// Describes wether an option is given at all or has a value.\n@@ -169,11 +171,12 @@ enum Optval {\n #[deriving(Clone, Eq)]\n pub struct Matches {\n     /// Options that matched\n-    priv opts: Vec<Opt> ,\n+    opts: Vec<Opt> ,\n     /// Values of the Options that matched\n-    priv vals: Vec<Vec<Optval> > ,\n+    vals: Vec<Vec<Optval> > ,\n     /// Free string fragments\n-    free: Vec<~str> }\n+    pub free: Vec<~str>,\n+}\n \n /// The type returned when the command line does not conform to the\n /// expected format. Call the `to_err_msg` method to retrieve the"}, {"sha": "7c2e5f7a5d9ada0114c277b07d4220adf2f761f3", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -41,10 +41,11 @@ use std::path::is_sep;\n  * pattern - see the `glob` function for more details.\n  */\n pub struct Paths {\n-    priv root: Path,\n-    priv dir_patterns: Vec<Pattern> ,\n-    priv options: MatchOptions,\n-    priv todo: Vec<(Path,uint)> }\n+    root: Path,\n+    dir_patterns: Vec<Pattern>,\n+    options: MatchOptions,\n+    todo: Vec<(Path,uint)>,\n+}\n \n ///\n /// Return an iterator that produces all the Paths that match the given pattern,\n@@ -176,7 +177,8 @@ fn list_dir_sorted(path: &Path) -> Vec<Path> {\n  */\n #[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, Hash, Default)]\n pub struct Pattern {\n-    priv tokens: Vec<PatternToken> }\n+    tokens: Vec<PatternToken>,\n+}\n \n #[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, Hash)]\n enum PatternToken {\n@@ -513,21 +515,21 @@ pub struct MatchOptions {\n      * currently only considers upper/lower case relationships between ASCII characters,\n      * but in future this might be extended to work with Unicode.\n      */\n-    priv case_sensitive: bool,\n+    case_sensitive: bool,\n \n     /**\n      * If this is true then path-component separator characters (e.g. `/` on Posix)\n      * must be matched by a literal `/`, rather than by `*` or `?` or `[...]`\n      */\n-    priv require_literal_separator: bool,\n+    require_literal_separator: bool,\n \n     /**\n      * If this is true then paths that contain components that start with a `.` will\n      * not match unless the `.` appears literally in the pattern: `*`, `?` or `[...]`\n      * will not match. This is useful because such files are conventionally considered\n      * hidden on Unix systems and it might be desirable to skip them when listing files.\n      */\n-    priv require_literal_leading_dot: bool\n+    require_literal_leading_dot: bool\n }\n \n impl MatchOptions {"}, {"sha": "a521c9bee8787e98787157d559448d9bd0d341b9", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,9 +22,9 @@ use std::raw;\n // then misalign the regs again.\n pub struct Context {\n     /// Hold the registers while the task or scheduler is suspended\n-    priv regs: ~Registers,\n+    regs: ~Registers,\n     /// Lower bound and upper bound for the stack\n-    priv stack_bounds: Option<(uint, uint)>,\n+    stack_bounds: Option<(uint, uint)>,\n }\n \n pub type InitFn = extern \"C\" fn(uint, *(), *()) -> !;"}, {"sha": "f2e64dc25a970423d442a5e3e8dbda92250ebb0f", "filename": "src/libgreen/coroutine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fcoroutine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fcoroutine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcoroutine.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,10 +22,10 @@ pub struct Coroutine {\n     ///\n     /// Servo needs this to be public in order to tell SpiderMonkey\n     /// about the stack bounds.\n-    current_stack_segment: Stack,\n+    pub current_stack_segment: Stack,\n \n     /// Always valid if the task is alive and not running.\n-    saved_context: Context\n+    pub saved_context: Context\n }\n \n impl Coroutine {"}, {"sha": "00081c82f5e7047edc890b5f48db97040593bb19", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -296,10 +296,10 @@ pub fn run(event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n /// Configuration of how an M:N pool of schedulers is spawned.\n pub struct PoolConfig {\n     /// The number of schedulers (OS threads) to spawn into this M:N pool.\n-    threads: uint,\n+    pub threads: uint,\n     /// A factory function used to create new event loops. If this is not\n     /// specified then the default event loop factory is used.\n-    event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n+    pub event_loop_factory: fn() -> ~rtio::EventLoop:Send,\n }\n \n impl PoolConfig {\n@@ -316,17 +316,17 @@ impl PoolConfig {\n /// A structure representing a handle to a pool of schedulers. This handle is\n /// used to keep the pool alive and also reap the status from the pool.\n pub struct SchedPool {\n-    priv id: uint,\n-    priv threads: ~[Thread<()>],\n-    priv handles: ~[SchedHandle],\n-    priv stealers: ~[deque::Stealer<~task::GreenTask>],\n-    priv next_friend: uint,\n-    priv stack_pool: StackPool,\n-    priv deque_pool: deque::BufferPool<~task::GreenTask>,\n-    priv sleepers: SleeperList,\n-    priv factory: fn() -> ~rtio::EventLoop:Send,\n-    priv task_state: TaskState,\n-    priv tasks_done: Receiver<()>,\n+    id: uint,\n+    threads: ~[Thread<()>],\n+    handles: ~[SchedHandle],\n+    stealers: ~[deque::Stealer<~task::GreenTask>],\n+    next_friend: uint,\n+    stack_pool: StackPool,\n+    deque_pool: deque::BufferPool<~task::GreenTask>,\n+    sleepers: SleeperList,\n+    factory: fn() -> ~rtio::EventLoop:Send,\n+    task_state: TaskState,\n+    tasks_done: Receiver<()>,\n }\n \n /// This is an internal state shared among a pool of schedulers. This is used to"}, {"sha": "50666b8c649bc3f3561d0ac90ae1e9bc92bf8758", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,11 +23,11 @@ pub fn queue<T: Send>() -> (Consumer<T>, Producer<T>) {\n }\n \n pub struct Producer<T> {\n-    priv inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: UnsafeArc<mpsc::Queue<T>>,\n }\n \n pub struct Consumer<T> {\n-    priv inner: UnsafeArc<mpsc::Queue<T>>,\n+    inner: UnsafeArc<mpsc::Queue<T>>,\n }\n \n impl<T: Send> Consumer<T> {"}, {"sha": "adfd5908de2ca8c8150affb7b02d7c471d7af638", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -39,7 +39,12 @@ pub struct Scheduler {\n     /// ID number of the pool that this scheduler is a member of. When\n     /// reawakening green tasks, this is used to ensure that tasks aren't\n     /// reawoken on the wrong pool of schedulers.\n-    pool_id: uint,\n+    pub pool_id: uint,\n+    /// The pool of stacks that this scheduler has cached\n+    pub stack_pool: StackPool,\n+    /// Bookkeeping for the number of tasks which are currently running around\n+    /// inside this pool of schedulers\n+    pub task_state: TaskState,\n     /// There are N work queues, one per scheduler.\n     work_queue: deque::Worker<~GreenTask>,\n     /// Work queues for the other schedulers. These are created by\n@@ -64,7 +69,6 @@ pub struct Scheduler {\n     /// A flag to indicate we've received the shutdown message and should\n     /// no longer try to go to sleep, but exit instead.\n     no_sleep: bool,\n-    stack_pool: StackPool,\n     /// The scheduler runs on a special task. When it is not running\n     /// it is stored here instead of the work queue.\n     sched_task: Option<~GreenTask>,\n@@ -87,9 +91,6 @@ pub struct Scheduler {\n     /// A flag to tell the scheduler loop it needs to do some stealing\n     /// in order to introduce randomness as part of a yield\n     steal_for_yield: bool,\n-    /// Bookkeeping for the number of tasks which are currently running around\n-    /// inside this pool of schedulers\n-    task_state: TaskState,\n \n     // n.b. currently destructors of an object are run in top-to-bottom in order\n     //      of field declaration. Due to its nature, the pausable idle callback\n@@ -99,7 +100,7 @@ pub struct Scheduler {\n     //      destroyed before it's actually destroyed.\n \n     /// The event loop used to drive the scheduler and perform I/O\n-    event_loop: ~EventLoop:Send,\n+    pub event_loop: ~EventLoop:Send,\n }\n \n /// An indication of how hard to work on a given operation, the difference\n@@ -893,9 +894,9 @@ pub enum SchedMessage {\n }\n \n pub struct SchedHandle {\n-    priv remote: ~RemoteCallback:Send,\n-    priv queue: msgq::Producer<SchedMessage>,\n-    sched_id: uint\n+    remote: ~RemoteCallback:Send,\n+    queue: msgq::Producer<SchedMessage>,\n+    pub sched_id: uint\n }\n \n impl SchedHandle {"}, {"sha": "5df866955e656101470378a26a3bcf5edb1f60b3", "filename": "src/libgreen/sleeper_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fsleeper_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fsleeper_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsleeper_list.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -16,7 +16,7 @@ use std::sync::mpmc_bounded_queue::Queue;\n use sched::SchedHandle;\n \n pub struct SleeperList {\n-    priv q: Queue<SchedHandle>,\n+    q: Queue<SchedHandle>,\n }\n \n impl SleeperList {"}, {"sha": "497c1dc664a72a7e537a350c95fc0c557a282482", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -15,9 +15,9 @@ use std::libc;\n \n /// A task's stack. The name \"Stack\" is a vestige of segmented stacks.\n pub struct Stack {\n-    priv buf: MemoryMap,\n-    priv min_size: uint,\n-    priv valgrind_id: libc::c_uint,\n+    buf: MemoryMap,\n+    min_size: uint,\n+    valgrind_id: libc::c_uint,\n }\n \n // Try to use MAP_STACK on platforms that support it (it's what we're doing\n@@ -126,7 +126,7 @@ impl Drop for Stack {\n pub struct StackPool {\n     // Ideally this would be some datastructure that preserved ordering on\n     // Stack.min_size.\n-    priv stacks: ~[Stack],\n+    stacks: ~[Stack],\n }\n \n impl StackPool {"}, {"sha": "6fa40c0e42b646c53fd62853b65086c3e1f4540a", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -42,32 +42,32 @@ pub struct GreenTask {\n     /// context and the stack that this task owns. This field is optional to\n     /// relinquish ownership back to a scheduler to recycle stacks at a later\n     /// date.\n-    coroutine: Option<Coroutine>,\n+    pub coroutine: Option<Coroutine>,\n \n     /// Optional handle back into the home sched pool of this task. This field\n     /// is lazily initialized.\n-    handle: Option<SchedHandle>,\n+    pub handle: Option<SchedHandle>,\n \n     /// Slot for maintaining ownership of a scheduler. If a task is running,\n     /// this value will be Some(sched) where the task is running on \"sched\".\n-    sched: Option<~Scheduler>,\n+    pub sched: Option<~Scheduler>,\n \n     /// Temporary ownership slot of a std::rt::task::Task object. This is used\n     /// to squirrel that libstd task away while we're performing green task\n     /// operations.\n-    task: Option<~Task>,\n+    pub task: Option<~Task>,\n \n     /// Dictates whether this is a sched task or a normal green task\n-    task_type: TaskType,\n+    pub task_type: TaskType,\n \n     /// Home pool that this task was spawned into. This field is lazily\n     /// initialized until when the task is initially scheduled, and is used to\n     /// make sure that tasks are always woken up in the correct pool of\n     /// schedulers.\n-    pool_id: uint,\n+    pub pool_id: uint,\n \n     // See the comments in the scheduler about why this is necessary\n-    nasty_deschedule_lock: NativeMutex,\n+    pub nasty_deschedule_lock: NativeMutex,\n }\n \n pub enum TaskType {"}, {"sha": "0d901d54e8529462815530e3fa28001c5804b9d9", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,8 +12,8 @@ use std::cmp;\n \n #[deriving(Show, Clone)]\n pub struct LogDirective {\n-    name: Option<~str>,\n-    level: u32,\n+    pub name: Option<~str>,\n+    pub level: u32,\n }\n \n static LOG_LEVEL_NAMES: [&'static str, ..4] = [\"error\", \"warn\", \"info\","}, {"sha": "143228b14e9e47581447d67236ac39f01d733fa8", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,7 +30,7 @@ struct Inner {\n }\n \n pub struct FileDesc {\n-    priv inner: UnsafeArc<Inner>\n+    inner: UnsafeArc<Inner>\n }\n \n impl FileDesc {\n@@ -216,8 +216,8 @@ impl Drop for Inner {\n }\n \n pub struct CFile {\n-    priv file: *libc::FILE,\n-    priv fd: FileDesc,\n+    file: *libc::FILE,\n+    fd: FileDesc,\n }\n \n impl CFile {"}, {"sha": "c19e81b5de4571b3057bfe28a9b07047e6759ae2", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -34,7 +34,7 @@ struct Inner {\n }\n \n pub struct FileDesc {\n-    priv inner: UnsafeArc<Inner>\n+    inner: UnsafeArc<Inner>\n }\n \n impl FileDesc {"}, {"sha": "e6e9cbb7ce34f656e7a9b1c8809c521a8830318e", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -215,7 +215,7 @@ fn keep_going(data: &[u8], f: |*u8, uint| -> i64) -> i64 {\n /// Implementation of rt::rtio's IoFactory trait to generate handles to the\n /// native I/O functionality.\n pub struct IoFactory {\n-    priv cannot_construct_outside_of_this_module: ()\n+    cannot_construct_outside_of_this_module: ()\n }\n \n impl IoFactory {"}, {"sha": "bf751be1f7fad13b7f295ef36e86b0adc3bd107a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -237,7 +237,7 @@ pub fn init() {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct TcpStream {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n struct Inner {\n@@ -373,7 +373,7 @@ impl Drop for Inner {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct TcpListener {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n impl TcpListener {\n@@ -430,7 +430,7 @@ impl rtio::RtioSocket for TcpListener {\n }\n \n pub struct TcpAcceptor {\n-    priv listener: TcpListener,\n+    listener: TcpListener,\n }\n \n impl TcpAcceptor {\n@@ -474,7 +474,7 @@ impl rtio::RtioTcpAcceptor for TcpAcceptor {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UdpSocket {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n impl UdpSocket {"}, {"sha": "fb9ac27d830676f3f5f352cf04a5a831eb7676c8", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -106,7 +106,7 @@ fn bind(addr: &CString, ty: libc::c_int) -> IoResult<Inner> {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixStream {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n impl UnixStream {\n@@ -160,7 +160,7 @@ impl rtio::RtioPipe for UnixStream {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixDatagram {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n impl UnixDatagram {\n@@ -231,7 +231,7 @@ impl UnixDatagram {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixListener {\n-    priv inner: Inner,\n+    inner: Inner,\n }\n \n impl UnixListener {\n@@ -256,7 +256,7 @@ impl rtio::RtioUnixListener for UnixListener {\n }\n \n pub struct UnixAcceptor {\n-    priv listener: UnixListener,\n+    listener: UnixListener,\n }\n \n impl UnixAcceptor {"}, {"sha": "36f2dc7d65c7362fe0030d73d501640c50b202fb", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -154,9 +154,9 @@ unsafe fn pipe(name: *u16, init: bool) -> libc::HANDLE {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixStream {\n-    priv inner: UnsafeArc<Inner>,\n-    priv write: Option<Event>,\n-    priv read: Option<Event>,\n+    inner: UnsafeArc<Inner>,\n+    write: Option<Event>,\n+    read: Option<Event>,\n }\n \n impl UnixStream {\n@@ -349,8 +349,8 @@ impl rtio::RtioPipe for UnixStream {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixListener {\n-    priv handle: libc::HANDLE,\n-    priv name: CString,\n+    handle: libc::HANDLE,\n+    name: CString,\n }\n \n impl UnixListener {\n@@ -389,8 +389,8 @@ impl rtio::RtioUnixListener for UnixListener {\n }\n \n pub struct UnixAcceptor {\n-    priv listener: UnixListener,\n-    priv event: Event,\n+    listener: UnixListener,\n+    event: Event,\n }\n \n impl UnixAcceptor {"}, {"sha": "c729473eecdf75afb0f74c55948a1483786495b4", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,15 +31,15 @@ use super::file;\n  */\n pub struct Process {\n     /// The unique id of the process (this should never be negative).\n-    priv pid: pid_t,\n+    pid: pid_t,\n \n     /// A handle to the process - on unix this will always be NULL, but on\n     /// windows it will be a HANDLE to the process, which will prevent the\n     /// pid being re-used until the handle is closed.\n-    priv handle: *(),\n+    handle: *(),\n \n     /// None until finish() is called.\n-    priv exit_code: Option<p::ProcessExit>,\n+    exit_code: Option<p::ProcessExit>,\n }\n \n impl Process {"}, {"sha": "ea237944bad9fd8af879e3a69b8b0e9ed211ac51", "filename": "src/libnative/io/timer_other.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_other.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -59,8 +59,8 @@ use io::IoResult;\n use io::timer_helper;\n \n pub struct Timer {\n-    priv id: uint,\n-    priv inner: Option<~Inner>,\n+    id: uint,\n+    inner: Option<~Inner>,\n }\n \n struct Inner {"}, {"sha": "d7202d9d765d425dc5dea8d78a4ffef7748b2f90", "filename": "src/libnative/io/timer_timerfd.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_timerfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_timerfd.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,8 +40,8 @@ use io::IoResult;\n use io::timer_helper;\n \n pub struct Timer {\n-    priv fd: FileDesc,\n-    priv on_worker: bool,\n+    fd: FileDesc,\n+    on_worker: bool,\n }\n \n #[allow(visible_private_types)]\n@@ -285,24 +285,24 @@ mod imp {\n     #[cfg(target_arch = \"x86_64\")]\n     #[packed]\n     pub struct epoll_event {\n-        events: u32,\n-        data: i64,\n+        pub events: u32,\n+        pub data: i64,\n     }\n \n     #[cfg(not(target_arch = \"x86_64\"))]\n     pub struct epoll_event {\n-        events: u32,\n-        data: i64,\n+        pub events: u32,\n+        pub data: i64,\n     }\n \n     pub struct timespec {\n-        tv_sec: libc::time_t,\n-        tv_nsec: libc::c_long,\n+        pub tv_sec: libc::time_t,\n+        pub tv_nsec: libc::c_long,\n     }\n \n     pub struct itimerspec {\n-        it_interval: timespec,\n-        it_value: timespec,\n+        pub it_interval: timespec,\n+        pub it_value: timespec,\n     }\n \n     extern {"}, {"sha": "a342afa685475fa6da8114b313e4b7888300c635", "filename": "src/libnative/io/timer_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Fio%2Ftimer_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_win32.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -29,8 +29,8 @@ use io::timer_helper;\n use io::IoResult;\n \n pub struct Timer {\n-    priv obj: libc::HANDLE,\n-    priv on_worker: bool,\n+    obj: libc::HANDLE,\n+    on_worker: bool,\n }\n \n pub enum Req {"}, {"sha": "06b51b563064c06d1875b04339240882fb17ab83", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -51,6 +51,8 @@\n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the\n //    answer is that you don't need them)"}, {"sha": "f6f0db4b6a964a6b831076adcf14e224bcf5c0c4", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -86,7 +86,7 @@ A `BigUint`-typed value `BigUint { data: ~[a, b, c] }` represents a number\n */\n #[deriving(Clone)]\n pub struct BigUint {\n-    priv data: Vec<BigDigit>\n+    data: Vec<BigDigit>\n }\n \n impl Eq for BigUint {\n@@ -863,8 +863,8 @@ impl Neg<Sign> for Sign {\n /// A big signed integer type.\n #[deriving(Clone)]\n pub struct BigInt {\n-    priv sign: Sign,\n-    priv data: BigUint\n+    sign: Sign,\n+    data: BigUint\n }\n \n impl Eq for BigInt {"}, {"sha": "e6b63f23741dc136555cd25fa29720b8aa558cd7", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,8 +22,8 @@ use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n #[deriving(Clone)]\n #[allow(missing_doc)]\n pub struct Ratio<T> {\n-    priv numer: T,\n-    priv denom: T\n+    numer: T,\n+    denom: T\n }\n \n /// Alias for a `Ratio` of machine-sized integers."}, {"sha": "5a6b925c53fdb442884a7e47eeb689f974323011", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -66,7 +66,7 @@ impl Rand for Exp1 {\n /// ```\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n-    priv lambda_inverse: f64\n+    lambda_inverse: f64\n }\n \n impl Exp {"}, {"sha": "1e9b5cbe99eac596b684a123b846872641f41967", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -236,11 +236,11 @@ impl IndependentSample<f64> for ChiSquared {\n /// println!(\"{} is from an F(2, 32) distribution\", v)\n /// ```\n pub struct FisherF {\n-    priv numer: ChiSquared,\n-    priv denom: ChiSquared,\n+    numer: ChiSquared,\n+    denom: ChiSquared,\n     // denom_dof / numer_dof so that this can just be a straight\n     // multiplication, rather than a division.\n-    priv dof_ratio: f64,\n+    dof_ratio: f64,\n }\n \n impl FisherF {\n@@ -279,8 +279,8 @@ impl IndependentSample<f64> for FisherF {\n /// println!(\"{} is from a t(11) distribution\", v)\n /// ```\n pub struct StudentT {\n-    priv chi: ChiSquared,\n-    priv dof: f64\n+    chi: ChiSquared,\n+    dof: f64\n }\n \n impl StudentT {"}, {"sha": "2323088027860faf0e1298d168a5abad6a2b103e", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -71,9 +71,9 @@ impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> {\n /// A value with a particular weight for use with `WeightedChoice`.\n pub struct Weighted<T> {\n     /// The numerical weight of this item\n-    weight: uint,\n+    pub weight: uint,\n     /// The actual item which is being weighted\n-    item: T,\n+    pub item: T,\n }\n \n /// A distribution that selects from a finite collection of weighted items.\n@@ -101,8 +101,8 @@ pub struct Weighted<T> {\n /// }\n /// ```\n pub struct WeightedChoice<T> {\n-    priv items: ~[Weighted<T>],\n-    priv weight_range: Range<uint>\n+    pub items: ~[Weighted<T>],\n+    pub weight_range: Range<uint>\n }\n \n impl<T: Clone> WeightedChoice<T> {"}, {"sha": "42fb76ad4eb48975e44cc0c58f1179fc4f756b06", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -82,8 +82,8 @@ impl Rand for StandardNormal {\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n pub struct Normal {\n-    priv mean: f64,\n-    priv std_dev: f64\n+    mean: f64,\n+    std_dev: f64,\n }\n \n impl Normal {\n@@ -124,7 +124,7 @@ impl IndependentSample<f64> for Normal {\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n pub struct LogNormal {\n-    priv norm: Normal\n+    norm: Normal\n }\n \n impl LogNormal {"}, {"sha": "cee80b62e3dec45b5358c158e8a82e1e11c4f035", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,9 +46,9 @@ use distributions::{Sample, IndependentSample};\n /// }\n /// ```\n pub struct Range<X> {\n-    priv low: X,\n-    priv range: X,\n-    priv accept_zone: X\n+    low: X,\n+    range: X,\n+    accept_zone: X\n }\n \n impl<X: SampleRange + Ord> Range<X> {"}, {"sha": "5c14d2c9f5bae76856d0f5fb626bf070e748052c", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -28,12 +28,12 @@ static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct IsaacRng {\n-    priv cnt: u32,\n-    priv rsl: [u32, .. RAND_SIZE],\n-    priv mem: [u32, .. RAND_SIZE],\n-    priv a: u32,\n-    priv b: u32,\n-    priv c: u32\n+    cnt: u32,\n+    rsl: [u32, .. RAND_SIZE],\n+    mem: [u32, .. RAND_SIZE],\n+    a: u32,\n+    b: u32,\n+    c: u32\n }\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n@@ -231,12 +231,12 @@ static RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n pub struct Isaac64Rng {\n-    priv cnt: uint,\n-    priv rsl: [u64, .. RAND_SIZE_64],\n-    priv mem: [u64, .. RAND_SIZE_64],\n-    priv a: u64,\n-    priv b: u64,\n-    priv c: u64,\n+    cnt: uint,\n+    rsl: [u64, .. RAND_SIZE_64],\n+    mem: [u64, .. RAND_SIZE_64],\n+    a: u64,\n+    b: u64,\n+    c: u64,\n }\n \n static EMPTY_64: Isaac64Rng = Isaac64Rng {"}, {"sha": "d9920501ab07138e6d10e72ed24c696f377595be", "filename": "src/librand/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -72,6 +72,8 @@ println!(\"{:?}\", tuple_ptr)\n \n #![feature(macro_rules, managed_boxes, phase)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;\n \n@@ -407,12 +409,12 @@ pub fn rng() -> StdRng {\n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(not(target_word_size=\"64\"))]\n-pub struct StdRng { priv rng: IsaacRng }\n+pub struct StdRng { rng: IsaacRng }\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(target_word_size=\"64\")]\n-pub struct StdRng { priv rng: Isaac64Rng }\n+pub struct StdRng { rng: Isaac64Rng }\n \n impl StdRng {\n     /// Create a randomly seeded instance of `StdRng`.\n@@ -489,10 +491,10 @@ pub fn weak_rng() -> XorShiftRng {\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n pub struct XorShiftRng {\n-    priv x: u32,\n-    priv y: u32,\n-    priv z: u32,\n-    priv w: u32,\n+    x: u32,\n+    y: u32,\n+    z: u32,\n+    w: u32,\n }\n \n impl Rng for XorShiftRng {\n@@ -573,8 +575,8 @@ pub struct TaskRng {\n     // The use of unsafe code here is OK if the invariants above are\n     // satisfied; and it allows us to avoid (unnecessarily) using a\n     // GC'd or RC'd pointer.\n-    priv rng: *mut TaskRngInner,\n-    priv marker: marker::NoSend,\n+    rng: *mut TaskRngInner,\n+    marker: marker::NoSend,\n }\n \n // used to make space in TLS for a random number generator"}, {"sha": "6ba919a7e65fa668759cd7b471af9d045f921de1", "filename": "src/librand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,7 +30,7 @@ mod imp {\n     /// This does not block.\n     #[cfg(unix)]\n     pub struct OSRng {\n-        priv inner: ReaderRng<File>\n+        inner: ReaderRng<File>\n     }\n \n     impl OSRng {\n@@ -77,7 +77,7 @@ mod imp {\n     ///\n     /// This does not block.\n     pub struct OSRng {\n-        priv hcryptprov: HCRYPTPROV\n+        hcryptprov: HCRYPTPROV\n     }\n \n     static PROV_RSA_FULL: DWORD = 1;"}, {"sha": "76a0efc92a99994022e45878c84791b05734d4dc", "filename": "src/librand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freader.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -27,7 +27,7 @@ use Rng;\n /// println!(\"{:x}\", rng.gen::<uint>());\n /// ```\n pub struct ReaderRng<R> {\n-    priv reader: R\n+    reader: R\n }\n \n impl<R: Reader> ReaderRng<R> {"}, {"sha": "70108d76b5644dec017de8412a10b82c6176eabc", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,11 +21,11 @@ static DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n /// A wrapper around any RNG which reseeds the underlying RNG after it\n /// has generated a certain number of random bytes.\n pub struct ReseedingRng<R, Rsdr> {\n-    priv rng: R,\n-    priv generation_threshold: uint,\n-    priv bytes_generated: uint,\n+    rng: R,\n+    generation_threshold: uint,\n+    bytes_generated: uint,\n     /// Controls the behaviour when reseeding the RNG.\n-    reseeder: Rsdr\n+    pub reseeder: Rsdr,\n }\n \n impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {"}, {"sha": "d6173176c160b8f604a42cd40711c23a447d3621", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -28,12 +28,12 @@ use syntax::abi;\n pub static METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n pub struct Archive<'a> {\n-    priv sess: &'a Session,\n-    priv dst: Path,\n+    sess: &'a Session,\n+    dst: Path,\n }\n \n pub struct ArchiveRO {\n-    priv ptr: ArchiveRef,\n+    ptr: ArchiveRef,\n }\n \n fn run_ar(sess: &Session, args: &str, cwd: Option<&Path>,"}, {"sha": "a2c579d13f43875bf061606671850ed2b8e9b384", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -54,7 +54,7 @@ use syntax::ast;\n \n #[deriving(Clone, Eq)]\n pub struct Svh {\n-    priv hash: ~str,\n+    hash: ~str,\n }\n \n impl Svh {"}, {"sha": "e8cdbbdad48cd01b8e5f0b004789e3293061bd72", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,9 +11,9 @@\n #![allow(non_camel_case_types)]\n \n pub struct t {\n-    module_asm: ~str,\n-    meta_sect_name: ~str,\n-    data_layout: ~str,\n-    target_triple: ~str,\n-    cc_args: Vec<~str> ,\n+    pub module_asm: ~str,\n+    pub meta_sect_name: ~str,\n+    pub data_layout: ~str,\n+    pub target_triple: ~str,\n+    pub cc_args: Vec<~str> ,\n }"}, {"sha": "d5dba02ed28f27d28747eaa655bc0e6646af7baa", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -270,12 +270,12 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n }\n \n pub struct CrateAnalysis {\n-    exp_map2: middle::resolve::ExportMap2,\n-    exported_items: middle::privacy::ExportedItems,\n-    public_items: middle::privacy::PublicItems,\n-    ty_cx: ty::ctxt,\n-    maps: astencode::Maps,\n-    reachable: NodeSet,\n+    pub exp_map2: middle::resolve::ExportMap2,\n+    pub exported_items: middle::privacy::ExportedItems,\n+    pub public_items: middle::privacy::PublicItems,\n+    pub ty_cx: ty::ctxt,\n+    pub maps: astencode::Maps,\n+    pub reachable: NodeSet,\n }\n \n /// Run the resolution, typechecking, region checking and other\n@@ -409,12 +409,12 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n }\n \n pub struct CrateTranslation {\n-    context: ContextRef,\n-    module: ModuleRef,\n-    metadata_module: ModuleRef,\n-    link: LinkMeta,\n-    metadata: Vec<u8> ,\n-    reachable: Vec<~str> ,\n+    pub context: ContextRef,\n+    pub module: ModuleRef,\n+    pub metadata_module: ModuleRef,\n+    pub link: LinkMeta,\n+    pub metadata: Vec<u8>,\n+    pub reachable: Vec<~str>,\n }\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n@@ -1124,9 +1124,9 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n }\n \n pub struct OutputFilenames {\n-    out_directory: Path,\n-    out_filestem: ~str,\n-    single_output_file: Option<Path>,\n+    pub out_directory: Path,\n+    pub out_filestem: ~str,\n+    pub single_output_file: Option<Path>,\n }\n \n impl OutputFilenames {"}, {"sha": "c2fec3871abcdbd82ed909df873f925e668c4188", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,11 +31,11 @@ use std::cell::{Cell, RefCell};\n use collections::HashSet;\n \n pub struct Config {\n-    os: abi::Os,\n-    arch: abi::Architecture,\n-    target_strs: target_strs::t,\n-    int_type: IntTy,\n-    uint_type: UintTy,\n+    pub os: abi::Os,\n+    pub arch: abi::Architecture,\n+    pub target_strs: target_strs::t,\n+    pub int_type: IntTy,\n+    pub uint_type: UintTy,\n }\n \n macro_rules! debugging_opts(\n@@ -124,34 +124,34 @@ pub enum DebugInfoLevel {\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n-    crate_types: Vec<CrateType> ,\n+    pub crate_types: Vec<CrateType> ,\n \n-    gc: bool,\n-    optimize: OptLevel,\n-    debuginfo: DebugInfoLevel,\n-    lint_opts: Vec<(lint::Lint, lint::level)> ,\n-    output_types: Vec<back::link::OutputType> ,\n+    pub gc: bool,\n+    pub optimize: OptLevel,\n+    pub debuginfo: DebugInfoLevel,\n+    pub lint_opts: Vec<(lint::Lint, lint::level)> ,\n+    pub output_types: Vec<back::link::OutputType> ,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n-    addl_lib_search_paths: RefCell<HashSet<Path>>,\n-    maybe_sysroot: Option<Path>,\n-    target_triple: ~str,\n+    pub addl_lib_search_paths: RefCell<HashSet<Path>>,\n+    pub maybe_sysroot: Option<Path>,\n+    pub target_triple: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n     // will be added to the crate AST node.  This should not be used for\n     // anything except building the full crate config prior to parsing.\n-    cfg: ast::CrateConfig,\n-    test: bool,\n-    parse_only: bool,\n-    no_trans: bool,\n-    no_analysis: bool,\n-    debugging_opts: u64,\n+    pub cfg: ast::CrateConfig,\n+    pub test: bool,\n+    pub parse_only: bool,\n+    pub no_trans: bool,\n+    pub no_analysis: bool,\n+    pub debugging_opts: u64,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n-    write_dependency_info: (bool, Option<Path>),\n+    pub write_dependency_info: (bool, Option<Path>),\n     /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n-    print_metas: (bool, bool, bool),\n-    cg: CodegenOptions,\n+    pub print_metas: (bool, bool, bool),\n+    pub cg: CodegenOptions,\n }\n \n // The type of entry function, so\n@@ -174,28 +174,28 @@ pub enum CrateType {\n }\n \n pub struct Session {\n-    targ_cfg: Config,\n-    opts: Options,\n-    cstore: metadata::cstore::CStore,\n-    parse_sess: ParseSess,\n+    pub targ_cfg: Config,\n+    pub opts: Options,\n+    pub cstore: metadata::cstore::CStore,\n+    pub parse_sess: ParseSess,\n     // For a library crate, this is always none\n-    entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n-    entry_type: Cell<Option<EntryFnType>>,\n-    macro_registrar_fn: RefCell<Option<ast::DefId>>,\n-    default_sysroot: Option<Path>,\n-    building_library: Cell<bool>,\n+    pub entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n+    pub entry_type: Cell<Option<EntryFnType>>,\n+    pub macro_registrar_fn: RefCell<Option<ast::DefId>>,\n+    pub default_sysroot: Option<Path>,\n+    pub building_library: Cell<bool>,\n     // The name of the root source file of the crate, in the local file system. The path is always\n     // expected to be absolute. `None` means that there is no source file.\n-    local_crate_source_file: Option<Path>,\n-    working_dir: Path,\n-    lints: RefCell<NodeMap<Vec<(lint::Lint, codemap::Span, ~str)>>>,\n-    node_id: Cell<ast::NodeId>,\n-    crate_types: RefCell<Vec<CrateType>>,\n-    features: front::feature_gate::Features,\n+    pub local_crate_source_file: Option<Path>,\n+    pub working_dir: Path,\n+    pub lints: RefCell<NodeMap<Vec<(lint::Lint, codemap::Span, ~str)>>>,\n+    pub node_id: Cell<ast::NodeId>,\n+    pub crate_types: RefCell<Vec<CrateType>>,\n+    pub features: front::feature_gate::Features,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n-    recursion_limit: Cell<uint>,\n+    pub recursion_limit: Cell<uint>,\n }\n \n impl Session {\n@@ -365,7 +365,7 @@ macro_rules! cgoptions(\n     ($($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n (\n     #[deriving(Clone)]\n-    pub struct CodegenOptions { $($opt: $t),* }\n+    pub struct CodegenOptions { $(pub $opt: $t),* }\n \n     pub fn basic_codegen_options() -> CodegenOptions {\n         CodegenOptions { $($opt: $init),* }"}, {"sha": "22de214cc12ca2c5bb9d928de509ab7dfe77f363", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -74,7 +74,7 @@ enum Status {\n \n /// A set of features to be used by later passes.\n pub struct Features {\n-    default_type_params: Cell<bool>\n+    pub default_type_params: Cell<bool>\n }\n \n impl Features {"}, {"sha": "3aac4f6b72e08fbbae4bb4ecf152306576d86884", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,6 +31,9 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n            default_type_params, phase)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+#![allow(unrecognized_lint)] // NOTE: remove after a stage0 snap\n+\n extern crate flate;\n extern crate arena;\n extern crate syntax;"}, {"sha": "d9e1b779e96517793a0d1e1c04e1cd7d86b529e8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -1878,7 +1878,7 @@ impl TypeNames {\n /* Memory-managed interface to target data. */\n \n pub struct target_data_res {\n-    td: TargetDataRef,\n+    pub td: TargetDataRef,\n }\n \n impl Drop for target_data_res {\n@@ -1896,7 +1896,7 @@ pub fn target_data_res(td: TargetDataRef) -> target_data_res {\n }\n \n pub struct TargetData {\n-    lltd: TargetDataRef,\n+    pub lltd: TargetDataRef,\n     dtor: @target_data_res\n }\n \n@@ -1914,7 +1914,7 @@ pub fn mk_target_data(string_rep: &str) -> TargetData {\n /* Memory-managed interface to pass managers. */\n \n pub struct pass_manager_res {\n-    pm: PassManagerRef,\n+    pub pm: PassManagerRef,\n }\n \n impl Drop for pass_manager_res {\n@@ -1932,7 +1932,7 @@ pub fn pass_manager_res(pm: PassManagerRef) -> pass_manager_res {\n }\n \n pub struct PassManager {\n-    llpm: PassManagerRef,\n+    pub llpm: PassManagerRef,\n     dtor: @pass_manager_res\n }\n \n@@ -1950,7 +1950,7 @@ pub fn mk_pass_manager() -> PassManager {\n /* Memory-managed interface to object files. */\n \n pub struct ObjectFile {\n-    llof: ObjectFileRef,\n+    pub llof: ObjectFileRef,\n }\n \n impl ObjectFile {\n@@ -1981,7 +1981,7 @@ impl Drop for ObjectFile {\n /* Memory-managed interface to section iterators. */\n \n pub struct section_iter_res {\n-    si: SectionIteratorRef,\n+    pub si: SectionIteratorRef,\n }\n \n impl Drop for section_iter_res {\n@@ -1999,7 +1999,7 @@ pub fn section_iter_res(si: SectionIteratorRef) -> section_iter_res {\n }\n \n pub struct SectionIter {\n-    llsi: SectionIteratorRef,\n+    pub llsi: SectionIteratorRef,\n     dtor: @section_iter_res\n }\n "}, {"sha": "09d3b36321fa9a91b5fcc0afa383758bf8a3f345", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -210,6 +210,6 @@ pub static tag_macro_def: uint = 0x65;\n \n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n-    crateid: CrateId,\n-    crate_hash: Svh,\n+    pub crateid: CrateId,\n+    pub crate_hash: Svh,\n }"}, {"sha": "36febfc1a09ca452ecda585d9a62f209d1232f72", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -371,7 +371,7 @@ fn resolve_crate_deps(e: &mut Env,\n }\n \n pub struct Loader<'a> {\n-    priv env: Env<'a>,\n+    env: Env<'a>,\n }\n \n impl<'a> Loader<'a> {"}, {"sha": "d840ca329387d51dc8bc97ea71d3ebb0b58ad46c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,10 +26,10 @@ use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n pub struct StaticMethodInfo {\n-    ident: ast::Ident,\n-    def_id: ast::DefId,\n-    purity: ast::Purity,\n-    vis: ast::Visibility,\n+    pub ident: ast::Ident,\n+    pub def_id: ast::DefId,\n+    pub purity: ast::Purity,\n+    pub vis: ast::Visibility,\n }\n \n pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> ~str {"}, {"sha": "62fcc4c617e619e9eb01f8385a94928f89825810", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -37,10 +37,10 @@ pub enum MetadataBlob {\n }\n \n pub struct crate_metadata {\n-    name: ~str,\n-    data: MetadataBlob,\n-    cnum_map: cnum_map,\n-    cnum: ast::CrateNum\n+    pub name: ~str,\n+    pub data: MetadataBlob,\n+    pub cnum_map: cnum_map,\n+    pub cnum: ast::CrateNum,\n }\n \n #[deriving(Eq)]\n@@ -60,18 +60,18 @@ pub enum NativeLibaryKind {\n // must be non-None.\n #[deriving(Eq, Clone)]\n pub struct CrateSource {\n-    dylib: Option<Path>,\n-    rlib: Option<Path>,\n-    cnum: ast::CrateNum,\n+    pub dylib: Option<Path>,\n+    pub rlib: Option<Path>,\n+    pub cnum: ast::CrateNum,\n }\n \n pub struct CStore {\n-    priv metas: RefCell<HashMap<ast::CrateNum, @crate_metadata>>,\n-    priv extern_mod_crate_map: RefCell<extern_mod_crate_map>,\n-    priv used_crate_sources: RefCell<Vec<CrateSource> >,\n-    priv used_libraries: RefCell<Vec<(~str, NativeLibaryKind)> >,\n-    priv used_link_args: RefCell<Vec<~str> >,\n-    intr: Rc<IdentInterner>\n+    metas: RefCell<HashMap<ast::CrateNum, @crate_metadata>>,\n+    extern_mod_crate_map: RefCell<extern_mod_crate_map>,\n+    used_crate_sources: RefCell<Vec<CrateSource>>,\n+    used_libraries: RefCell<Vec<(~str, NativeLibaryKind)>>,\n+    used_link_args: RefCell<Vec<~str>>,\n+    pub intr: Rc<IdentInterner>,\n }\n \n // Map from NodeId's of local extern crate statements to crate numbers"}, {"sha": "94941913a8b8831a1a0a8b6442768c902165c38b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -1108,9 +1108,9 @@ pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> {\n \n #[deriving(Clone)]\n pub struct CrateDep {\n-    cnum: ast::CrateNum,\n-    crate_id: CrateId,\n-    hash: Svh,\n+    pub cnum: ast::CrateNum,\n+    pub crate_id: CrateId,\n+    pub hash: Svh,\n }\n \n pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {"}, {"sha": "1da698beb389633b28af45016dba0b8347bbeb37", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -69,14 +69,14 @@ pub type EncodeInlinedItem<'a> = 'a |ecx: &EncodeContext,\n                                      ii: InlinedItemRef|;\n \n pub struct EncodeParams<'a> {\n-    diag: &'a SpanHandler,\n-    tcx: &'a ty::ctxt,\n-    reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a RefCell<NodeMap<~str>>,\n-    non_inlineable_statics: &'a RefCell<NodeSet>,\n-    link_meta: &'a LinkMeta,\n-    cstore: &'a cstore::CStore,\n-    encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub diag: &'a SpanHandler,\n+    pub tcx: &'a ty::ctxt,\n+    pub reexports2: middle::resolve::ExportMap2,\n+    pub item_symbols: &'a RefCell<NodeMap<~str>>,\n+    pub non_inlineable_statics: &'a RefCell<NodeSet>,\n+    pub link_meta: &'a LinkMeta,\n+    pub cstore: &'a cstore::CStore,\n+    pub encode_inlined_item: EncodeInlinedItem<'a>,\n }\n \n pub struct Stats {\n@@ -96,16 +96,16 @@ pub struct Stats {\n }\n \n pub struct EncodeContext<'a> {\n-    diag: &'a SpanHandler,\n-    tcx: &'a ty::ctxt,\n-    stats: @Stats,\n-    reexports2: middle::resolve::ExportMap2,\n-    item_symbols: &'a RefCell<NodeMap<~str>>,\n-    non_inlineable_statics: &'a RefCell<NodeSet>,\n-    link_meta: &'a LinkMeta,\n-    cstore: &'a cstore::CStore,\n-    encode_inlined_item: EncodeInlinedItem<'a>,\n-    type_abbrevs: abbrev_map,\n+    pub diag: &'a SpanHandler,\n+    pub tcx: &'a ty::ctxt,\n+    pub stats: @Stats,\n+    pub reexports2: middle::resolve::ExportMap2,\n+    pub item_symbols: &'a RefCell<NodeMap<~str>>,\n+    pub non_inlineable_statics: &'a RefCell<NodeSet>,\n+    pub link_meta: &'a LinkMeta,\n+    pub cstore: &'a cstore::CStore,\n+    pub encode_inlined_item: EncodeInlinedItem<'a>,\n+    pub type_abbrevs: abbrev_map,\n }\n \n fn encode_name(ebml_w: &mut Encoder, name: Name) {"}, {"sha": "468eac4d2694ce5220dee2a0b53a7a9469feac6d", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,9 +26,9 @@ pub enum FileMatch { FileMatches, FileDoesntMatch }\n pub type pick<'a> = 'a |path: &Path| -> FileMatch;\n \n pub struct FileSearch<'a> {\n-    sysroot: &'a Path,\n-    addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n-    target_triple: &'a str\n+    pub sysroot: &'a Path,\n+    pub addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n+    pub target_triple: &'a str\n }\n \n impl<'a> FileSearch<'a> {"}, {"sha": "8a3d6567c77a1b52c66475890265d87cd42ef94f", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,27 +46,27 @@ pub enum Os {\n }\n \n pub struct Context<'a> {\n-    sess: &'a Session,\n-    span: Span,\n-    ident: &'a str,\n-    crate_id: &'a CrateId,\n-    id_hash: &'a str,\n-    hash: Option<&'a Svh>,\n-    os: Os,\n-    intr: Rc<IdentInterner>,\n-    rejected_via_hash: bool,\n+    pub sess: &'a Session,\n+    pub span: Span,\n+    pub ident: &'a str,\n+    pub crate_id: &'a CrateId,\n+    pub id_hash: &'a str,\n+    pub hash: Option<&'a Svh>,\n+    pub os: Os,\n+    pub intr: Rc<IdentInterner>,\n+    pub rejected_via_hash: bool,\n }\n \n pub struct Library {\n-    dylib: Option<Path>,\n-    rlib: Option<Path>,\n-    metadata: MetadataBlob,\n+    pub dylib: Option<Path>,\n+    pub rlib: Option<Path>,\n+    pub metadata: MetadataBlob,\n }\n \n pub struct ArchiveMetadata {\n-    priv archive: ArchiveRO,\n+    archive: ArchiveRO,\n     // See comments in ArchiveMetadata::new for why this is static\n-    priv data: &'static [u8],\n+    data: &'static [u8],\n }\n \n // FIXME(#11857) this should be a \"real\" realpath"}, {"sha": "7e8480e4311a20b68fd6c88c0373afccfad4fb5a", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -34,12 +34,12 @@ macro_rules! mywrite( ($wr:expr, $($arg:tt)*) => (\n ) )\n \n pub struct ctxt<'a> {\n-    diag: &'a SpanHandler,\n+    pub diag: &'a SpanHandler,\n     // Def -> str Callback:\n-    ds: fn(DefId) -> ~str,\n+    pub ds: fn(DefId) -> ~str,\n     // The type context.\n-    tcx: &'a ty::ctxt,\n-    abbrevs: abbrev_ctxt\n+    pub tcx: &'a ty::ctxt,\n+    pub abbrevs: abbrev_ctxt\n }\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str."}, {"sha": "383739a1b0320db53ecbcc7545daaf1bf8a0ebd2", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -53,10 +53,10 @@ use writer = serialize::ebml::writer;\n \n // Auxiliary maps of things to be encoded\n pub struct Maps {\n-    root_map: middle::borrowck::root_map,\n-    method_map: middle::typeck::MethodMap,\n-    vtable_map: middle::typeck::vtable_map,\n-    capture_map: RefCell<middle::moves::CaptureMap>,\n+    pub root_map: middle::borrowck::root_map,\n+    pub method_map: middle::typeck::MethodMap,\n+    pub vtable_map: middle::typeck::vtable_map,\n+    pub capture_map: RefCell<middle::moves::CaptureMap>,\n }\n \n struct DecodeContext<'a> {"}, {"sha": "b8b05128e4c2c3b87246ae98f7385b4bc9f4f465", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -207,8 +207,8 @@ pub struct BorrowStats {\n // is T, which is not a box.\n #[deriving(Eq, TotalEq, Hash)]\n pub struct root_map_key {\n-    id: ast::NodeId,\n-    derefs: uint\n+    pub id: ast::NodeId,\n+    pub derefs: uint\n }\n \n pub type BckResult<T> = Result<T, BckError>;\n@@ -378,7 +378,7 @@ impl Repr for RestrictionSet {\n // uncovered after a certain number of auto-derefs.\n \n pub struct RootInfo {\n-    scope: ast::NodeId,\n+    pub scope: ast::NodeId,\n }\n \n pub type root_map = @RefCell<HashMap<root_map_key, RootInfo>>;"}, {"sha": "0e18946a3a100015b8caf594910a660549933492", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,37 +30,37 @@ use util::ppaux::Repr;\n \n pub struct MoveData {\n     /// Move paths. See section \"Move paths\" in `doc.rs`.\n-    paths: RefCell<Vec<MovePath>>,\n+    pub paths: RefCell<Vec<MovePath>>,\n \n     /// Cache of loan path to move path index, for easy lookup.\n-    path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n+    pub path_map: RefCell<HashMap<@LoanPath, MovePathIndex>>,\n \n     /// Each move or uninitialized variable gets an entry here.\n-    moves: RefCell<Vec<Move>>,\n+    pub moves: RefCell<Vec<Move>>,\n \n     /// Assignments to a variable, like `x = foo`. These are assigned\n     /// bits for dataflow, since we must track them to ensure that\n     /// immutable variables are assigned at most once along each path.\n-    var_assignments: RefCell<Vec<Assignment>>,\n+    pub var_assignments: RefCell<Vec<Assignment>>,\n \n     /// Assignments to a path, like `x.f = foo`. These are not\n     /// assigned dataflow bits, but we track them because they still\n     /// kill move bits.\n-    path_assignments: RefCell<Vec<Assignment>>,\n+    pub path_assignments: RefCell<Vec<Assignment>>,\n \n     /// Assignments to a variable or path, like `x = foo`, but not `x += foo`.\n-    assignee_ids: RefCell<HashSet<ast::NodeId>>,\n+    pub assignee_ids: RefCell<HashSet<ast::NodeId>>,\n }\n \n pub struct FlowedMoveData<'a> {\n-    move_data: MoveData,\n+    pub move_data: MoveData,\n \n-    dfcx_moves: MoveDataFlow<'a>,\n+    pub dfcx_moves: MoveDataFlow<'a>,\n \n     // We could (and maybe should, for efficiency) combine both move\n     // and assign data flow into one, but this way it's easier to\n     // distinguish the bits that correspond to moves and assignments.\n-    dfcx_assign: AssignDataFlow<'a>\n+    pub dfcx_assign: AssignDataFlow<'a>\n }\n \n /// Index into `MoveData.paths`, used like a pointer\n@@ -97,21 +97,21 @@ static InvalidMoveIndex: MoveIndex =\n \n pub struct MovePath {\n     /// Loan path corresponding to this move path\n-    loan_path: @LoanPath,\n+    pub loan_path: @LoanPath,\n \n     /// Parent pointer, `InvalidMovePathIndex` if root\n-    parent: MovePathIndex,\n+    pub parent: MovePathIndex,\n \n     /// Head of linked list of moves to this path,\n     /// `InvalidMoveIndex` if not moved\n-    first_move: MoveIndex,\n+    pub first_move: MoveIndex,\n \n     /// First node in linked list of children, `InvalidMovePathIndex` if leaf\n-    first_child: MovePathIndex,\n+    pub first_child: MovePathIndex,\n \n     /// Next node in linked list of parent's children (siblings),\n     /// `InvalidMovePathIndex` if none.\n-    next_sibling: MovePathIndex,\n+    pub next_sibling: MovePathIndex,\n }\n \n pub enum MoveKind {\n@@ -123,27 +123,27 @@ pub enum MoveKind {\n \n pub struct Move {\n     /// Path being moved.\n-    path: MovePathIndex,\n+    pub path: MovePathIndex,\n \n     /// id of node that is doing the move.\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     /// Kind of move, for error messages.\n-    kind: MoveKind,\n+    pub kind: MoveKind,\n \n     /// Next node in linked list of moves from `path`, or `InvalidMoveIndex`\n-    next_move: MoveIndex\n+    pub next_move: MoveIndex\n }\n \n pub struct Assignment {\n     /// Path being assigned.\n-    path: MovePathIndex,\n+    pub path: MovePathIndex,\n \n     /// id where assignment occurs\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     /// span of node where assignment occurs\n-    span: Span,\n+    pub span: Span,\n }\n \n pub struct MoveDataFlowOperator;"}, {"sha": "2adc3e82576f2b185882cac73274b514d80bf788", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,21 +31,21 @@ use util::nodemap::NodeMap;\n \n #[deriving(Clone)]\n pub struct DataFlowContext<'a, O> {\n-    priv tcx: &'a ty::ctxt,\n-    priv method_map: typeck::MethodMap,\n+    tcx: &'a ty::ctxt,\n+    method_map: typeck::MethodMap,\n \n     /// the data flow operator\n-    priv oper: O,\n+    oper: O,\n \n     /// number of bits to propagate per id\n-    priv bits_per_id: uint,\n+    bits_per_id: uint,\n \n     /// number of words we will use to store bits_per_id.\n     /// equal to bits_per_id/uint::BITS rounded up.\n-    priv words_per_id: uint,\n+    words_per_id: uint,\n \n     // mapping from node to bitset index.\n-    priv nodeid_to_bitset: NodeMap<uint>,\n+    nodeid_to_bitset: NodeMap<uint>,\n \n     // Bit sets per id.  The following three fields (`gens`, `kills`,\n     // and `on_entry`) all have the same structure. For each id in\n@@ -54,14 +54,15 @@ pub struct DataFlowContext<'a, O> {\n     // the full vector (see the method `compute_id_range()`).\n \n     /// bits generated as we exit the scope `id`. Updated by `add_gen()`.\n-    priv gens: Vec<uint> ,\n+    gens: Vec<uint>,\n \n     /// bits killed as we exit the scope `id`. Updated by `add_kill()`.\n-    priv kills: Vec<uint> ,\n+    kills: Vec<uint>,\n \n     /// bits that are valid on entry to the scope `id`. Updated by\n     /// `propagate()`.\n-    priv on_entry: Vec<uint> }\n+    on_entry: Vec<uint>,\n+}\n \n /// Parameterization for the precise form of data flow that is used.\n pub trait DataFlowOperator {"}, {"sha": "d8851fa46f8bae96ad4bfdcff05e5746ae771b56", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,8 +26,8 @@ use syntax::visit::Visitor;\n // (The def_upvar will already have been stripped).\n #[deriving(Encodable, Decodable)]\n pub struct freevar_entry {\n-    def: ast::Def, //< The variable being accessed free.\n-    span: Span     //< First span where it is accessed (there can be multiple)\n+    pub def: ast::Def, //< The variable being accessed free.\n+    pub span: Span     //< First span where it is accessed (there can be multiple)\n }\n pub type freevar_info = @Vec<@freevar_entry> ;\n pub type freevar_map = NodeMap<freevar_info>;"}, {"sha": "fd27cabaf7fbab23746b66b8b5b07e44a79a4cb0", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -37,20 +37,20 @@ be indexed by the direction (see the type `Direction`).\n use std::uint;\n \n pub struct Graph<N,E> {\n-    priv nodes: Vec<Node<N>> ,\n-    priv edges: Vec<Edge<E>> ,\n+    nodes: Vec<Node<N>> ,\n+    edges: Vec<Edge<E>> ,\n }\n \n pub struct Node<N> {\n-    priv first_edge: [EdgeIndex, ..2], // see module comment\n-    data: N,\n+    first_edge: [EdgeIndex, ..2], // see module comment\n+    pub data: N,\n }\n \n pub struct Edge<E> {\n-    priv next_edge: [EdgeIndex, ..2], // see module comment\n-    priv source: NodeIndex,\n-    priv target: NodeIndex,\n-    data: E,\n+    next_edge: [EdgeIndex, ..2], // see module comment\n+    source: NodeIndex,\n+    target: NodeIndex,\n+    pub data: E,\n }\n \n #[deriving(Eq)]\n@@ -62,7 +62,7 @@ pub struct EdgeIndex(uint);\n pub static InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-pub struct Direction { priv repr: uint }\n+pub struct Direction { repr: uint }\n pub static Outgoing: Direction = Direction { repr: 0 };\n pub static Incoming: Direction = Direction { repr: 1 };\n "}, {"sha": "86db6b6a46373a22430a8e0fcc3b9e3df4282be4", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -47,7 +47,7 @@ pub enum LangItem {\n }\n \n pub struct LanguageItems {\n-    items: Vec<Option<ast::DefId>> ,\n+    pub items: Vec<Option<ast::DefId>> ,\n }\n \n impl LanguageItems {"}, {"sha": "97f5cca1cabb5d025465dc891db880dc12594f08", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -135,9 +135,9 @@ pub enum level {\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n pub struct LintSpec {\n-    default: level,\n-    lint: Lint,\n-    desc: &'static str,\n+    pub default: level,\n+    pub lint: Lint,\n+    pub desc: &'static str,\n }\n \n pub type LintDict = HashMap<&'static str, LintSpec>;\n@@ -1506,7 +1506,7 @@ fn check_missing_doc_ty_method(cx: &Context, tm: &ast::TypeMethod) {\n \n fn check_missing_doc_struct_field(cx: &Context, sf: &ast::StructField) {\n     match sf.node.kind {\n-        ast::NamedField(_, vis) if vis != ast::Private =>\n+        ast::NamedField(_, vis) if vis == ast::Public =>\n             check_missing_doc_attrs(cx,\n                                     Some(cx.cur_struct_def_id),\n                                     sf.node.attrs.as_slice(),"}, {"sha": "3604499add6936040caf4a8ddc109b4b937e42e0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -90,8 +90,8 @@ pub enum categorization {\n \n #[deriving(Eq)]\n pub struct CopiedUpvar {\n-    upvar_id: ast::NodeId,\n-    onceness: ast::Onceness,\n+    pub upvar_id: ast::NodeId,\n+    pub onceness: ast::Onceness,\n }\n \n // different kinds of pointers:\n@@ -147,11 +147,11 @@ pub enum MutabilityCategory {\n // fashion. For more details, see the method `cat_pattern`\n #[deriving(Eq)]\n pub struct cmt_ {\n-    id: ast::NodeId,          // id of expr/pat producing this value\n-    span: Span,                // span of same expr/pat\n-    cat: categorization,       // categorization of expr\n-    mutbl: MutabilityCategory, // mutability of expr as lvalue\n-    ty: ty::t                  // type of the expr (*see WARNING above*)\n+    pub id: ast::NodeId,          // id of expr/pat producing this value\n+    pub span: Span,                // span of same expr/pat\n+    pub cat: categorization,       // categorization of expr\n+    pub mutbl: MutabilityCategory, // mutability of expr as lvalue\n+    pub ty: ty::t                  // type of the expr (*see WARNING above*)\n }\n \n pub type cmt = @cmt_;\n@@ -242,7 +242,7 @@ impl ast_node for ast::Pat {\n }\n \n pub struct MemCategorizationContext<TYPER> {\n-    typer: TYPER\n+    pub typer: TYPER\n }\n \n pub type McResult<T> = Result<T, ()>;"}, {"sha": "f3ecfdefa75cea8b248a66540c89fac7641e31a8", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -153,25 +153,25 @@ pub enum CaptureMode {\n \n #[deriving(Encodable, Decodable)]\n pub struct CaptureVar {\n-    def: Def,         // Variable being accessed free\n-    span: Span,       // Location of an access to this variable\n-    mode: CaptureMode // How variable is being accessed\n+    pub def: Def,         // Variable being accessed free\n+    pub span: Span,       // Location of an access to this variable\n+    pub mode: CaptureMode // How variable is being accessed\n }\n \n pub type CaptureMap = NodeMap<Rc<Vec<CaptureVar>>>;\n \n /** See the section Output on the module comment for explanation. */\n #[deriving(Clone)]\n pub struct MoveMaps {\n-    moves_map: NodeSet,\n+    pub moves_map: NodeSet,\n     /**\n      * Set of variable node-ids that are moved.\n      *\n-     * Note: The `moves_map` stores expression ids that are moves,\n+     * pub Note: The `moves_map` stores expression ids that are moves,\n      * whereas this set stores the ids of the variables that are\n      * moved at some point */\n-    moved_variables_set: NodeSet,\n-    capture_map: CaptureMap\n+    pub moved_variables_set: NodeSet,\n+    pub capture_map: CaptureMap\n }\n \n #[deriving(Clone)]"}, {"sha": "e5644dbd246f4bb87f1cfb469f08327ed9f36db5", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 19, "deletions": 76, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,7 +14,6 @@\n \n use std::mem::replace;\n \n-use metadata::csearch;\n use middle::lint;\n use middle::resolve;\n use middle::ty;\n@@ -562,53 +561,10 @@ impl<'a> PrivacyVisitor<'a> {\n \n     // Checks that a field is in scope.\n     // FIXME #6993: change type (and name) from Ident to Name\n-    fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident,\n-                   enum_id: Option<ast::DefId>) {\n-        let fields = ty::lookup_struct_fields(self.tcx, id);\n-        let struct_vis = if is_local(id) {\n-            match self.tcx.map.get(id.node) {\n-                ast_map::NodeItem(ref it) => it.vis,\n-                ast_map::NodeVariant(ref v) => {\n-                    if v.node.vis == ast::Inherited {\n-                        let parent = self.tcx.map.get_parent(id.node);\n-                        self.tcx.map.expect_item(parent).vis\n-                    } else {\n-                        v.node.vis\n-                    }\n-                }\n-                _ => {\n-                    self.tcx.sess.span_bug(span,\n-                                           format!(\"not an item or variant def\"));\n-                }\n-            }\n-        } else {\n-            let cstore = &self.tcx.sess.cstore;\n-            match enum_id {\n-                Some(enum_id) => {\n-                    let v = csearch::get_enum_variants(self.tcx, enum_id);\n-                    match v.iter().find(|v| v.id == id) {\n-                        Some(variant) => {\n-                            if variant.vis == ast::Inherited {\n-                                csearch::get_item_visibility(cstore, enum_id)\n-                            } else {\n-                                variant.vis\n-                            }\n-                        }\n-                        None => {\n-                            self.tcx.sess.span_bug(span, \"no xcrate variant\");\n-                        }\n-                    }\n-                }\n-                None => csearch::get_item_visibility(cstore, id)\n-            }\n-        };\n-\n-        for field in fields.iter() {\n+    fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) {\n+        for field in ty::lookup_struct_fields(self.tcx, id).iter() {\n             if field.name != ident.name { continue; }\n-            // public structs have public fields by default, and private structs\n-            // have private fields by default.\n-            if struct_vis == ast::Public && field.vis != ast::Private { break }\n-            if struct_vis != ast::Public && field.vis == ast::Public { break }\n+            if field.vis == ast::Public { break }\n             if !is_local(field.id) ||\n                !self.private_accessible(field.id.node) {\n                 self.tcx.sess.span_err(span,\n@@ -770,7 +726,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 match ty::get(ty::expr_ty_adjusted(self.tcx, base,\n                                                    &*self.method_map.borrow())).sty {\n                     ty::ty_struct(id, _) => {\n-                        self.check_field(expr.span, id, ident, None);\n+                        self.check_field(expr.span, id, ident);\n                     }\n                     _ => {}\n                 }\n@@ -793,17 +749,15 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 match ty::get(ty::expr_ty(self.tcx, expr)).sty {\n                     ty::ty_struct(id, _) => {\n                         for field in (*fields).iter() {\n-                            self.check_field(expr.span, id, field.ident.node,\n-                                             None);\n+                            self.check_field(expr.span, id, field.ident.node);\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.borrow().get_copy(&expr.id) {\n-                            ast::DefVariant(enum_id, variant_id, _) => {\n+                            ast::DefVariant(_, variant_id, _) => {\n                                 for field in fields.iter() {\n                                     self.check_field(expr.span, variant_id,\n-                                                     field.ident.node,\n-                                                     Some(enum_id));\n+                                                     field.ident.node);\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(expr.span,\n@@ -867,16 +821,15 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n                 match ty::get(ty::pat_ty(self.tcx, pattern)).sty {\n                     ty::ty_struct(id, _) => {\n                         for field in fields.iter() {\n-                            self.check_field(pattern.span, id, field.ident,\n-                                             None);\n+                            self.check_field(pattern.span, id, field.ident);\n                         }\n                     }\n                     ty::ty_enum(_, _) => {\n                         match self.tcx.def_map.borrow().find(&pattern.id) {\n-                            Some(&ast::DefVariant(enum_id, variant_id, _)) => {\n+                            Some(&ast::DefVariant(_, variant_id, _)) => {\n                                 for field in fields.iter() {\n                                     self.check_field(pattern.span, variant_id,\n-                                                     field.ident, Some(enum_id));\n+                                                     field.ident);\n                                 }\n                             }\n                             _ => self.tcx.sess.span_bug(pattern.span,\n@@ -992,16 +945,10 @@ impl<'a> SanePrivacyVisitor<'a> {\n                 }\n             }\n         };\n-        let check_struct = |def: &@ast::StructDef,\n-                            vis: ast::Visibility,\n-                            parent_vis: Option<ast::Visibility>| {\n-            let public_def = match vis {\n-                ast::Public => true,\n-                ast::Inherited | ast::Private => parent_vis == Some(ast::Public),\n-            };\n+        let check_struct = |def: &@ast::StructDef| {\n             for f in def.fields.iter() {\n-               match f.node.kind {\n-                    ast::NamedField(_, ast::Private) if !public_def => {\n+                match f.node.kind {\n+                    ast::NamedField(_, ast::Private) => {\n                         tcx.sess.span_err(f.span, \"unnecessary `priv` \\\n                                                    visibility\");\n                     }\n@@ -1058,15 +1005,13 @@ impl<'a> SanePrivacyVisitor<'a> {\n                     }\n \n                     match v.node.kind {\n-                        ast::StructVariantKind(ref s) => {\n-                            check_struct(s, v.node.vis, Some(item.vis));\n-                        }\n+                        ast::StructVariantKind(ref s) => check_struct(s),\n                         ast::TupleVariantKind(..) => {}\n                     }\n                 }\n             }\n \n-            ast::ItemStruct(ref def, _) => check_struct(def, item.vis, None),\n+            ast::ItemStruct(ref def, _) => check_struct(def),\n \n             ast::ItemTrait(_, _, ref methods) => {\n                 for m in methods.iter() {\n@@ -1372,12 +1317,10 @@ impl<'a> Visitor<()> for VisiblePrivateTypesVisitor<'a> {\n \n     fn visit_struct_field(&mut self, s: &ast::StructField, _: ()) {\n         match s.node.kind {\n-            // the only way to get here is by being inside a public\n-            // struct/enum variant, so the only way to have a private\n-            // field is with an explicit `priv`.\n-            ast::NamedField(_, ast::Private) => {}\n-\n-            _ => visit::walk_struct_field(self, s, ())\n+            ast::NamedField(_, ast::Public)  => {\n+                visit::walk_struct_field(self, s, ());\n+            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "247209539127cf0bdd067e0cbcc973a154522d97", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -75,11 +75,11 @@ The region maps encode information about region relationships.\n   for dynamic checks and/or arbitrary amounts of stack space.\n */\n pub struct RegionMaps {\n-    priv scope_map: RefCell<NodeMap<ast::NodeId>>,\n-    priv var_map: RefCell<NodeMap<ast::NodeId>>,\n-    priv free_region_map: RefCell<HashMap<FreeRegion, Vec<FreeRegion> >>,\n-    priv rvalue_scopes: RefCell<NodeMap<ast::NodeId>>,\n-    priv terminating_scopes: RefCell<HashSet<ast::NodeId>>,\n+    scope_map: RefCell<NodeMap<ast::NodeId>>,\n+    var_map: RefCell<NodeMap<ast::NodeId>>,\n+    free_region_map: RefCell<HashMap<FreeRegion, Vec<FreeRegion> >>,\n+    rvalue_scopes: RefCell<NodeMap<ast::NodeId>>,\n+    terminating_scopes: RefCell<HashSet<ast::NodeId>>,\n }\n \n #[deriving(Clone)]"}, {"sha": "3e1c1828b6c483aa2402f77bfd66863570fb3f78", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -55,8 +55,8 @@ pub type TraitMap = NodeMap<Vec<DefId> >;\n pub type ExportMap2 = @RefCell<NodeMap<Vec<Export2> >>;\n \n pub struct Export2 {\n-    name: ~str,        // The name of the target.\n-    def_id: DefId,     // The definition of the target.\n+    pub name: ~str,        // The name of the target.\n+    pub def_id: DefId,     // The definition of the target.\n }\n \n // This set contains all exported definitions from external crates. The set does\n@@ -73,10 +73,10 @@ pub enum LastPrivate {\n     // and whether the import is in fact used for each.\n     // If the Option<PrivateDep> fields are None, it means there is no defintion\n     // in that namespace.\n-    LastImport{value_priv: Option<PrivateDep>,\n-               value_used: ImportUse,\n-               type_priv: Option<PrivateDep>,\n-               type_used: ImportUse},\n+    LastImport{pub value_priv: Option<PrivateDep>,\n+               pub value_used: ImportUse,\n+               pub type_priv: Option<PrivateDep>,\n+               pub type_used: ImportUse},\n }\n \n pub enum PrivateDep {\n@@ -5408,11 +5408,11 @@ impl<'a> Resolver<'a> {\n }\n \n pub struct CrateMap {\n-    def_map: DefMap,\n-    exp_map2: ExportMap2,\n-    trait_map: TraitMap,\n-    external_exports: ExternalExports,\n-    last_private_map: LastPrivateMap,\n+    pub def_map: DefMap,\n+    pub exp_map2: ExportMap2,\n+    pub trait_map: TraitMap,\n+    pub external_exports: ExternalExports,\n+    pub last_private_map: LastPrivateMap,\n }\n \n /// Entry point to crate resolution."}, {"sha": "c727744b4c76574170236390dfa91aa0615a83a3", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -82,7 +82,7 @@ pub enum Repr {\n      * General-case enums: for each case there is a struct, and they\n      * all start with a field for the discriminant.\n      */\n-    General(IntType, Vec<Struct> ),\n+    General(IntType, Vec<Struct>),\n     /**\n      * Two cases distinguished by a nullable pointer: the case with discriminant\n      * `nndiscr` is represented by the struct `nonnull`, where the `ptrfield`th\n@@ -94,16 +94,21 @@ pub enum Repr {\n      * is represented such that `None` is a null pointer and `Some` is the\n      * identity function.\n      */\n-    NullablePointer{ nonnull: Struct, nndiscr: Disr, ptrfield: uint,\n-                     nullfields: Vec<ty::t> }\n+    NullablePointer {\n+        pub nonnull: Struct,\n+        pub nndiscr: Disr,\n+        pub ptrfield: uint,\n+        pub nullfields: Vec<ty::t>,\n+    }\n }\n \n /// For structs, and struct-like parts of anything fancier.\n pub struct Struct {\n-    size: u64,\n-    align: u64,\n-    packed: bool,\n-    fields: Vec<ty::t> }\n+    pub size: u64,\n+    pub align: u64,\n+    pub packed: bool,\n+    pub fields: Vec<ty::t>,\n+}\n \n /**\n  * Convenience for `represent_type`.  There should probably be more or"}, {"sha": "8ac7bd1b66b683638da3a3bc601331f78240ae09", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -413,9 +413,9 @@ pub fn malloc_raw<'a>(bcx: &'a Block<'a>, t: ty::t, heap: heap)\n }\n \n pub struct MallocResult<'a> {\n-    bcx: &'a Block<'a>,\n-    smart_ptr: ValueRef,\n-    body: ValueRef\n+    pub bcx: &'a Block<'a>,\n+    pub smart_ptr: ValueRef,\n+    pub body: ValueRef\n }\n \n // malloc_general_dyn: usefully wraps malloc_raw_dyn; allocates a smart\n@@ -1647,7 +1647,7 @@ pub fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n }\n \n pub struct TransItemVisitor<'a> {\n-    ccx: &'a CrateContext,\n+    pub ccx: &'a CrateContext,\n }\n \n impl<'a> Visitor<()> for TransItemVisitor<'a> {"}, {"sha": "2703ddddc8b7fe32d094a6912929ad57cdf2ef45", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,8 +23,8 @@ use std::libc::{c_uint, c_ulonglong, c_char};\n use syntax::codemap::Span;\n \n pub struct Builder<'a> {\n-    llbuilder: BuilderRef,\n-    ccx: &'a CrateContext,\n+    pub llbuilder: BuilderRef,\n+    pub ccx: &'a CrateContext,\n }\n \n // This is a really awful way to get a zero-length c-string, but better (and a"}, {"sha": "9ce277a7de904691b6cd0f261f640271982cb607", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -35,15 +35,15 @@ pub enum ArgKind {\n /// This is borrowed from clang's ABIInfo.h\n #[deriving(Clone)]\n pub struct ArgType {\n-    kind: ArgKind,\n+    pub kind: ArgKind,\n     /// Original LLVM type\n-    ty: Type,\n+    pub ty: Type,\n     /// Coerced LLVM Type\n-    cast: option::Option<Type>,\n+    pub cast: option::Option<Type>,\n     /// Dummy argument, which is emitted before the real argument\n-    pad: option::Option<Type>,\n+    pub pad: option::Option<Type>,\n     /// LLVM attribute of argument\n-    attr: option::Option<Attribute>\n+    pub attr: option::Option<Attribute>\n }\n \n impl ArgType {\n@@ -99,10 +99,10 @@ impl ArgType {\n /// comments are reverse-engineered and may be inaccurate. -NDM\n pub struct FnType {\n     /// The LLVM types of each argument.\n-    arg_tys: Vec<ArgType> ,\n+    pub arg_tys: Vec<ArgType> ,\n \n     /// LLVM return type.\n-    ret_ty: ArgType,\n+    pub ret_ty: ArgType,\n }\n \n pub fn compute_abi_info(ccx: &CrateContext,"}, {"sha": "dae48512ac2a787b1ef454612c55855aac0b2554", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -54,8 +54,8 @@ use syntax::abi::AbiSet;\n use syntax::ast_map;\n \n pub struct MethodData {\n-    llfn: ValueRef,\n-    llself: ValueRef,\n+    pub llfn: ValueRef,\n+    pub llself: ValueRef,\n }\n \n pub enum CalleeData {\n@@ -70,8 +70,8 @@ pub enum CalleeData {\n }\n \n pub struct Callee<'a> {\n-    bcx: &'a Block<'a>,\n-    data: CalleeData\n+    pub bcx: &'a Block<'a>,\n+    pub data: CalleeData\n }\n \n fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> {"}, {"sha": "06869d50fc4d657bb3537228552a7f3317e93ea9", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -42,7 +42,7 @@ pub struct CleanupScope<'a> {\n }\n \n pub struct CustomScopeIndex {\n-    priv index: uint\n+    index: uint\n }\n \n pub static EXIT_BREAK: uint = 0;"}, {"sha": "dce4750969d19de2acc563ba3b8e50f1aeacb5f9", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -111,12 +111,12 @@ pub fn gensym_name(name: &str) -> PathElem {\n }\n \n pub struct tydesc_info {\n-    ty: ty::t,\n-    tydesc: ValueRef,\n-    size: ValueRef,\n-    align: ValueRef,\n-    name: ValueRef,\n-    visit_glue: Cell<Option<ValueRef>>,\n+    pub ty: ty::t,\n+    pub tydesc: ValueRef,\n+    pub size: ValueRef,\n+    pub align: ValueRef,\n+    pub name: ValueRef,\n+    pub visit_glue: Cell<Option<ValueRef>>,\n }\n \n /*\n@@ -146,31 +146,31 @@ pub struct tydesc_info {\n  */\n \n pub struct NodeInfo {\n-    id: ast::NodeId,\n-    span: Span,\n+    pub id: ast::NodeId,\n+    pub span: Span,\n }\n \n pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n \n pub struct Stats {\n-    n_static_tydescs: Cell<uint>,\n-    n_glues_created: Cell<uint>,\n-    n_null_glues: Cell<uint>,\n-    n_real_glues: Cell<uint>,\n-    n_fns: Cell<uint>,\n-    n_monos: Cell<uint>,\n-    n_inlines: Cell<uint>,\n-    n_closures: Cell<uint>,\n-    n_llvm_insns: Cell<uint>,\n-    llvm_insns: RefCell<HashMap<~str, uint>>,\n+    pub n_static_tydescs: Cell<uint>,\n+    pub n_glues_created: Cell<uint>,\n+    pub n_null_glues: Cell<uint>,\n+    pub n_real_glues: Cell<uint>,\n+    pub n_fns: Cell<uint>,\n+    pub n_monos: Cell<uint>,\n+    pub n_inlines: Cell<uint>,\n+    pub n_closures: Cell<uint>,\n+    pub n_llvm_insns: Cell<uint>,\n+    pub llvm_insns: RefCell<HashMap<~str, uint>>,\n     // (ident, time-in-ms, llvm-instructions)\n-    fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n+    pub fn_stats: RefCell<Vec<(~str, uint, uint)> >,\n }\n \n pub struct BuilderRef_res {\n-    b: BuilderRef,\n+    pub b: BuilderRef,\n }\n \n impl Drop for BuilderRef_res {\n@@ -192,10 +192,10 @@ pub type ExternMap = HashMap<~str, ValueRef>;\n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n pub struct param_substs {\n-    tys: Vec<ty::t> ,\n-    self_ty: Option<ty::t>,\n-    vtables: Option<typeck::vtable_res>,\n-    self_vtables: Option<typeck::vtable_param_res>\n+    pub tys: Vec<ty::t> ,\n+    pub self_ty: Option<ty::t>,\n+    pub vtables: Option<typeck::vtable_res>,\n+    pub self_vtables: Option<typeck::vtable_param_res>\n }\n \n impl param_substs {\n@@ -228,69 +228,69 @@ pub struct FunctionContext<'a> {\n     // address of the first instruction in the sequence of\n     // instructions for this function that will go in the .text\n     // section of the executable we're generating.\n-    llfn: ValueRef,\n+    pub llfn: ValueRef,\n \n     // The environment argument in a closure.\n-    llenv: Option<ValueRef>,\n+    pub llenv: Option<ValueRef>,\n \n     // The place to store the return value. If the return type is immediate,\n     // this is an alloca in the function. Otherwise, it's the hidden first\n     // parameter to the function. After function construction, this should\n     // always be Some.\n-    llretptr: Cell<Option<ValueRef>>,\n+    pub llretptr: Cell<Option<ValueRef>>,\n \n-    entry_bcx: RefCell<Option<&'a Block<'a>>>,\n+    pub entry_bcx: RefCell<Option<&'a Block<'a>>>,\n \n-    // These elements: \"hoisted basic blocks\" containing\n+    // These pub elements: \"hoisted basic blocks\" containing\n     // administrative activities that have to happen in only one place in\n     // the function, due to LLVM's quirks.\n     // A marker for the place where we want to insert the function's static\n     // allocas, so that LLVM will coalesce them into a single alloca call.\n-    alloca_insert_pt: Cell<Option<ValueRef>>,\n-    llreturn: Cell<Option<BasicBlockRef>>,\n+    pub alloca_insert_pt: Cell<Option<ValueRef>>,\n+    pub llreturn: Cell<Option<BasicBlockRef>>,\n \n     // The a value alloca'd for calls to upcalls.rust_personality. Used when\n     // outputting the resume instruction.\n-    personality: Cell<Option<ValueRef>>,\n+    pub personality: Cell<Option<ValueRef>>,\n \n     // True if the caller expects this fn to use the out pointer to\n     // return. Either way, your code should write into llretptr, but if\n     // this value is false, llretptr will be a local alloca.\n-    caller_expects_out_pointer: bool,\n+    pub caller_expects_out_pointer: bool,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: RefCell<NodeMap<LvalueDatum>>,\n+    pub llargs: RefCell<NodeMap<LvalueDatum>>,\n \n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: RefCell<NodeMap<LvalueDatum>>,\n+    pub lllocals: RefCell<NodeMap<LvalueDatum>>,\n \n     // Same as above, but for closure upvars\n-    llupvars: RefCell<NodeMap<ValueRef>>,\n+    pub llupvars: RefCell<NodeMap<ValueRef>>,\n \n     // The NodeId of the function, or -1 if it doesn't correspond to\n     // a user-defined function.\n-    id: ast::NodeId,\n+    pub id: ast::NodeId,\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    param_substs: Option<@param_substs>,\n+    pub param_substs: Option<@param_substs>,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n-    span: Option<Span>,\n+    pub span: Option<Span>,\n \n     // The arena that blocks are allocated from.\n-    block_arena: &'a TypedArena<Block<'a>>,\n+    pub block_arena: &'a TypedArena<Block<'a>>,\n \n     // This function's enclosing crate context.\n-    ccx: &'a CrateContext,\n+    pub ccx: &'a CrateContext,\n \n     // Used and maintained by the debuginfo module.\n-    debug_context: debuginfo::FunctionDebugContext,\n+    pub debug_context: debuginfo::FunctionDebugContext,\n \n     // Cleanup scopes.\n-    scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n+    pub scopes: RefCell<Vec<cleanup::CleanupScope<'a>> >,\n }\n \n impl<'a> FunctionContext<'a> {\n@@ -405,20 +405,20 @@ pub struct Block<'a> {\n     // block to the function pointed to by llfn.  We insert\n     // instructions into that block by way of this block context.\n     // The block pointing to this one in the function's digraph.\n-    llbb: BasicBlockRef,\n-    terminated: Cell<bool>,\n-    unreachable: Cell<bool>,\n+    pub llbb: BasicBlockRef,\n+    pub terminated: Cell<bool>,\n+    pub unreachable: Cell<bool>,\n \n     // Is this block part of a landing pad?\n-    is_lpad: bool,\n+    pub is_lpad: bool,\n \n     // AST node-id associated with this block, if any. Used for\n     // debugging purposes only.\n-    opt_node_id: Option<ast::NodeId>,\n+    pub opt_node_id: Option<ast::NodeId>,\n \n     // The function context for the function to which this block is\n     // attached.\n-    fcx: &'a FunctionContext<'a>,\n+    pub fcx: &'a FunctionContext<'a>,\n }\n \n impl<'a> Block<'a> {\n@@ -493,8 +493,8 @@ impl<'a> Block<'a> {\n }\n \n pub struct Result<'a> {\n-    bcx: &'a Block<'a>,\n-    val: ValueRef\n+    pub bcx: &'a Block<'a>,\n+    pub val: ValueRef\n }\n \n pub fn rslt<'a>(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> {\n@@ -744,8 +744,8 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct mono_id_ {\n-    def: ast::DefId,\n-    params: Vec<mono_param_id> }\n+    pub def: ast::DefId,\n+    pub params: Vec<mono_param_id> }\n \n pub type mono_id = @mono_id_;\n "}, {"sha": "a7fed4fa60d3fe728a57342006d5b971aa7f72d2", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -37,39 +37,39 @@ use syntax::ast;\n use syntax::parse::token::InternedString;\n \n pub struct CrateContext {\n-    llmod: ModuleRef,\n-    llcx: ContextRef,\n-    metadata_llmod: ModuleRef,\n-    td: TargetData,\n-    tn: TypeNames,\n-    externs: RefCell<ExternMap>,\n-    intrinsics: HashMap<&'static str, ValueRef>,\n-    item_vals: RefCell<NodeMap<ValueRef>>,\n-    exp_map2: resolve::ExportMap2,\n-    reachable: NodeSet,\n-    item_symbols: RefCell<NodeMap<~str>>,\n-    link_meta: LinkMeta,\n-    drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n-    tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n+    pub llmod: ModuleRef,\n+    pub llcx: ContextRef,\n+    pub metadata_llmod: ModuleRef,\n+    pub td: TargetData,\n+    pub tn: TypeNames,\n+    pub externs: RefCell<ExternMap>,\n+    pub intrinsics: HashMap<&'static str, ValueRef>,\n+    pub item_vals: RefCell<NodeMap<ValueRef>>,\n+    pub exp_map2: resolve::ExportMap2,\n+    pub reachable: NodeSet,\n+    pub item_symbols: RefCell<NodeMap<~str>>,\n+    pub link_meta: LinkMeta,\n+    pub drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n+    pub tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n     // Set when running emit_tydescs to enforce that no more tydescs are\n     // created.\n-    finished_tydescs: Cell<bool>,\n+    pub finished_tydescs: Cell<bool>,\n     // Track mapping of external ids to local items imported for inlining\n-    external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n+    pub external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n     // Backwards version of the `external` map (inlined items to where they\n     // came from)\n-    external_srcs: RefCell<NodeMap<ast::DefId>>,\n+    pub external_srcs: RefCell<NodeMap<ast::DefId>>,\n     // A set of static items which cannot be inlined into other crates. This\n     // will pevent in IIItem() structures from being encoded into the metadata\n     // that is generated\n-    non_inlineable_statics: RefCell<NodeSet>,\n+    pub non_inlineable_statics: RefCell<NodeSet>,\n     // Cache instances of monomorphized functions\n-    monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n-    monomorphizing: RefCell<DefIdMap<uint>>,\n+    pub monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n+    pub monomorphizing: RefCell<DefIdMap<uint>>,\n     // Cache generated vtables\n-    vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n+    pub vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n     // Cache of constant strings,\n-    const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n+    pub const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n \n     // Reverse-direction for const ptrs cast from globals.\n     // Key is an int, cast from a ValueRef holding a *T,\n@@ -79,36 +79,36 @@ pub struct CrateContext {\n     // when we ptrcast, and we have to ptrcast during translation\n     // of a [T] const because we form a slice, a [*T,int] pair, not\n     // a pointer to an LLVM array type.\n-    const_globals: RefCell<HashMap<int, ValueRef>>,\n+    pub const_globals: RefCell<HashMap<int, ValueRef>>,\n \n     // Cache of emitted const values\n-    const_values: RefCell<NodeMap<ValueRef>>,\n+    pub const_values: RefCell<NodeMap<ValueRef>>,\n \n     // Cache of external const values\n-    extern_const_values: RefCell<DefIdMap<ValueRef>>,\n+    pub extern_const_values: RefCell<DefIdMap<ValueRef>>,\n \n-    impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n+    pub impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n \n     // Cache of closure wrappers for bare fn's.\n-    closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n+    pub closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n \n-    lltypes: RefCell<HashMap<ty::t, Type>>,\n-    llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n-    adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n-    symbol_hasher: RefCell<Sha256>,\n-    type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n-    all_llvm_symbols: RefCell<HashSet<~str>>,\n-    tcx: ty::ctxt,\n-    maps: astencode::Maps,\n-    stats: @Stats,\n-    int_type: Type,\n-    opaque_vec_type: Type,\n-    builder: BuilderRef_res,\n+    pub lltypes: RefCell<HashMap<ty::t, Type>>,\n+    pub llsizingtypes: RefCell<HashMap<ty::t, Type>>,\n+    pub adt_reprs: RefCell<HashMap<ty::t, @adt::Repr>>,\n+    pub symbol_hasher: RefCell<Sha256>,\n+    pub type_hashcodes: RefCell<HashMap<ty::t, ~str>>,\n+    pub all_llvm_symbols: RefCell<HashSet<~str>>,\n+    pub tcx: ty::ctxt,\n+    pub maps: astencode::Maps,\n+    pub stats: @Stats,\n+    pub int_type: Type,\n+    pub opaque_vec_type: Type,\n+    pub builder: BuilderRef_res,\n     // Set when at least one function uses GC. Needed so that\n     // decl_gc_metadata knows whether to link to the module metadata, which\n     // is not emitted by LLVM's GC pass when no functions use GC.\n-    uses_gc: bool,\n-    dbg_cx: Option<debuginfo::CrateDebugContext>,\n+    pub uses_gc: bool,\n+    pub dbg_cx: Option<debuginfo::CrateDebugContext>,\n }\n \n impl CrateContext {"}, {"sha": "9f48e4714d60dbdbd0b40709c83b8b24bfbee864", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -41,18 +41,18 @@ use syntax::codemap::Span;\n pub struct Datum<K> {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `kind` below.\n-    val: ValueRef,\n+    pub val: ValueRef,\n \n     /// The rust type of the value.\n-    ty: ty::t,\n+    pub ty: ty::t,\n \n     /// Indicates whether this is by-ref or by-value.\n-    kind: K,\n+    pub kind: K,\n }\n \n pub struct DatumBlock<'a, K> {\n-    bcx: &'a Block<'a>,\n-    datum: Datum<K>,\n+    pub bcx: &'a Block<'a>,\n+    pub datum: Datum<K>,\n }\n \n pub enum Expr {\n@@ -70,7 +70,7 @@ pub enum Expr {\n pub struct Lvalue;\n \n pub struct Rvalue {\n-    mode: RvalueMode\n+    pub mode: RvalueMode\n }\n \n pub fn Rvalue(m: RvalueMode) -> Rvalue {"}, {"sha": "8236d6efb29a85fbb195ef1eff66136ecba9229b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -173,15 +173,15 @@ static DW_ATE_unsigned_char: c_uint = 0x08;\n \n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct CrateDebugContext {\n-    priv llcontext: ContextRef,\n-    priv builder: DIBuilderRef,\n-    priv current_debug_location: Cell<DebugLocation>,\n-    priv created_files: RefCell<HashMap<~str, DIFile>>,\n-    priv created_types: RefCell<HashMap<uint, DIType>>,\n-    priv namespace_map: RefCell<HashMap<Vec<ast::Name> , @NamespaceTreeNode>>,\n+    llcontext: ContextRef,\n+    builder: DIBuilderRef,\n+    current_debug_location: Cell<DebugLocation>,\n+    created_files: RefCell<HashMap<~str, DIFile>>,\n+    created_types: RefCell<HashMap<uint, DIType>>,\n+    namespace_map: RefCell<HashMap<Vec<ast::Name> , @NamespaceTreeNode>>,\n     // This collection is used to assert that composite types (structs, enums, ...) have their\n     // members only set once:\n-    priv composite_types_completed: RefCell<HashSet<DIType>>,\n+    composite_types_completed: RefCell<HashSet<DIType>>,\n }\n \n impl CrateDebugContext {"}, {"sha": "4aac50c5355af9c10c09d45a9b43b3c306e7aae9", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -143,11 +143,11 @@ pub fn make_drop_glue_unboxed<'a>(\n }\n \n pub struct VecTypes {\n-    vec_ty: ty::t,\n-    unit_ty: ty::t,\n-    llunit_ty: Type,\n-    llunit_size: ValueRef,\n-    llunit_alloc_size: u64\n+    pub vec_ty: ty::t,\n+    pub unit_ty: ty::t,\n+    pub llunit_ty: Type,\n+    pub llunit_size: ValueRef,\n+    pub llunit_alloc_size: u64\n }\n \n impl VecTypes {"}, {"sha": "ca01c0532fc39f1cac3d73bdd7d10ce168886aba", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,7 +26,7 @@ use std::libc::{c_uint};\n \n #[deriving(Clone, Eq, Show)]\n pub struct Type {\n-    priv rf: TypeRef\n+    rf: TypeRef\n }\n \n macro_rules! ty ("}, {"sha": "f66a393a50f9d98c48b8323897aadafcff26a0b6", "filename": "src/librustc/middle/trans/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -152,7 +152,7 @@ impl Use {\n \n /// Iterator for the users of a value\n pub struct Users {\n-    priv next: Option<Use>\n+    next: Option<Use>\n }\n \n impl Iterator<Value> for Users {"}, {"sha": "8a616496f064d05fb2b3fc3ac103d8e3f44d779a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 143, "deletions": 142, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -63,8 +63,8 @@ pub static INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct field {\n-    ident: ast::Ident,\n-    mt: mt\n+    pub ident: ast::Ident,\n+    pub mt: mt\n }\n \n #[deriving(Clone)]\n@@ -75,16 +75,16 @@ pub enum MethodContainer {\n \n #[deriving(Clone)]\n pub struct Method {\n-    ident: ast::Ident,\n-    generics: ty::Generics,\n-    fty: BareFnTy,\n-    explicit_self: ast::ExplicitSelf_,\n-    vis: ast::Visibility,\n-    def_id: ast::DefId,\n-    container: MethodContainer,\n+    pub ident: ast::Ident,\n+    pub generics: ty::Generics,\n+    pub fty: BareFnTy,\n+    pub explicit_self: ast::ExplicitSelf_,\n+    pub vis: ast::Visibility,\n+    pub def_id: ast::DefId,\n+    pub container: MethodContainer,\n \n     // If this method is provided, we need to know where it came from\n-    provided_source: Option<ast::DefId>\n+    pub provided_source: Option<ast::DefId>\n }\n \n impl Method {\n@@ -118,14 +118,15 @@ impl Method {\n }\n \n pub struct Impl {\n-    did: DefId,\n-    ident: Ident,\n-    methods: Vec<@Method> }\n+    pub did: DefId,\n+    pub ident: Ident,\n+    pub methods: Vec<@Method>,\n+}\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct mt {\n-    ty: t,\n-    mutbl: ast::Mutability,\n+    pub ty: t,\n+    pub mutbl: ast::Mutability,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash, Show)]\n@@ -142,18 +143,18 @@ pub enum TraitStore {\n }\n \n pub struct field_ty {\n-    name: Name,\n-    id: DefId,\n-    vis: ast::Visibility,\n+    pub name: Name,\n+    pub id: DefId,\n+    pub vis: ast::Visibility,\n }\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n #[deriving(Eq, TotalEq, Hash)]\n pub struct creader_cache_key {\n-    cnum: CrateNum,\n-    pos: uint,\n-    len: uint\n+    pub cnum: CrateNum,\n+    pub pos: uint,\n+    pub len: uint\n }\n \n pub type creader_cache = RefCell<HashMap<creader_cache_key, t>>;\n@@ -191,9 +192,9 @@ pub enum ast_ty_to_ty_cache_entry {\n \n #[deriving(Clone, Eq, Decodable, Encodable)]\n pub struct ItemVariances {\n-    self_param: Option<Variance>,\n-    type_params: OwnedSlice<Variance>,\n-    region_params: OwnedSlice<Variance>\n+    pub self_param: Option<Variance>,\n+    pub type_params: OwnedSlice<Variance>,\n+    pub region_params: OwnedSlice<Variance>\n }\n \n #[deriving(Clone, Eq, Decodable, Encodable, Show)]\n@@ -216,8 +217,8 @@ pub enum AutoAdjustment {\n \n #[deriving(Decodable, Encodable)]\n pub struct AutoDerefRef {\n-    autoderefs: uint,\n-    autoref: Option<AutoRef>\n+    pub autoderefs: uint,\n+    pub autoref: Option<AutoRef>\n }\n \n #[deriving(Decodable, Encodable, Eq, Show)]\n@@ -247,112 +248,112 @@ pub enum AutoRef {\n pub struct ctxt {\n     // Specifically use a speedy hash algorithm for this hash map, it's used\n     // quite often.\n-    interner: RefCell<FnvHashMap<intern_key, ~t_box_>>,\n-    next_id: Cell<uint>,\n-    sess: Session,\n-    def_map: resolve::DefMap,\n+    pub interner: RefCell<FnvHashMap<intern_key, ~t_box_>>,\n+    pub next_id: Cell<uint>,\n+    pub sess: Session,\n+    pub def_map: resolve::DefMap,\n \n-    named_region_map: resolve_lifetime::NamedRegionMap,\n+    pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n-    region_maps: middle::region::RegionMaps,\n+    pub region_maps: middle::region::RegionMaps,\n \n     // Stores the types for various nodes in the AST.  Note that this table\n     // is not guaranteed to be populated until after typeck.  See\n     // typeck::check::fn_ctxt for details.\n-    node_types: node_type_table,\n+    pub node_types: node_type_table,\n \n     // Stores the type parameters which were substituted to obtain the type\n     // of this node.  This only applies to nodes that refer to entities\n     // parameterized by type parameters, such as generic fns, types, or\n     // other items.\n-    node_type_substs: RefCell<NodeMap<Vec<t>>>,\n+    pub node_type_substs: RefCell<NodeMap<Vec<t>>>,\n \n     // Maps from a method to the method \"descriptor\"\n-    methods: RefCell<DefIdMap<@Method>>,\n+    pub methods: RefCell<DefIdMap<@Method>>,\n \n     // Maps from a trait def-id to a list of the def-ids of its methods\n-    trait_method_def_ids: RefCell<DefIdMap<@Vec<DefId> >>,\n+    pub trait_method_def_ids: RefCell<DefIdMap<@Vec<DefId> >>,\n \n     // A cache for the trait_methods() routine\n-    trait_methods_cache: RefCell<DefIdMap<@Vec<@Method> >>,\n-\n-    impl_trait_cache: RefCell<DefIdMap<Option<@ty::TraitRef>>>,\n-\n-    trait_refs: RefCell<NodeMap<@TraitRef>>,\n-    trait_defs: RefCell<DefIdMap<@TraitDef>>,\n-\n-    map: ast_map::Map,\n-    intrinsic_defs: RefCell<DefIdMap<t>>,\n-    freevars: RefCell<freevars::freevar_map>,\n-    tcache: type_cache,\n-    rcache: creader_cache,\n-    short_names_cache: RefCell<HashMap<t, ~str>>,\n-    needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n-    tc_cache: RefCell<HashMap<uint, TypeContents>>,\n-    ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry>>,\n-    enum_var_cache: RefCell<DefIdMap<@Vec<@VariantInfo> >>,\n-    ty_param_defs: RefCell<NodeMap<TypeParameterDef>>,\n-    adjustments: RefCell<NodeMap<@AutoAdjustment>>,\n-    normalized_cache: RefCell<HashMap<t, t>>,\n-    lang_items: @middle::lang_items::LanguageItems,\n+    pub trait_methods_cache: RefCell<DefIdMap<@Vec<@Method> >>,\n+\n+    pub impl_trait_cache: RefCell<DefIdMap<Option<@ty::TraitRef>>>,\n+\n+    pub trait_refs: RefCell<NodeMap<@TraitRef>>,\n+    pub trait_defs: RefCell<DefIdMap<@TraitDef>>,\n+\n+    pub map: ast_map::Map,\n+    pub intrinsic_defs: RefCell<DefIdMap<t>>,\n+    pub freevars: RefCell<freevars::freevar_map>,\n+    pub tcache: type_cache,\n+    pub rcache: creader_cache,\n+    pub short_names_cache: RefCell<HashMap<t, ~str>>,\n+    pub needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n+    pub tc_cache: RefCell<HashMap<uint, TypeContents>>,\n+    pub ast_ty_to_ty_cache: RefCell<NodeMap<ast_ty_to_ty_cache_entry>>,\n+    pub enum_var_cache: RefCell<DefIdMap<@Vec<@VariantInfo> >>,\n+    pub ty_param_defs: RefCell<NodeMap<TypeParameterDef>>,\n+    pub adjustments: RefCell<NodeMap<@AutoAdjustment>>,\n+    pub normalized_cache: RefCell<HashMap<t, t>>,\n+    pub lang_items: @middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n-    provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n-    supertraits: RefCell<DefIdMap<@Vec<@TraitRef> >>,\n+    pub provided_method_sources: RefCell<DefIdMap<ast::DefId>>,\n+    pub supertraits: RefCell<DefIdMap<@Vec<@TraitRef> >>,\n \n     // Maps from def-id of a type or region parameter to its\n     // (inferred) variance.\n-    item_variance_map: RefCell<DefIdMap<@ItemVariances>>,\n+    pub item_variance_map: RefCell<DefIdMap<@ItemVariances>>,\n \n     // A mapping from the def ID of an enum or struct type to the def ID\n     // of the method that implements its destructor. If the type is not\n     // present in this map, it does not have a destructor. This map is\n     // populated during the coherence phase of typechecking.\n-    destructor_for_type: RefCell<DefIdMap<ast::DefId>>,\n+    pub destructor_for_type: RefCell<DefIdMap<ast::DefId>>,\n \n     // A method will be in this list if and only if it is a destructor.\n-    destructors: RefCell<DefIdSet>,\n+    pub destructors: RefCell<DefIdSet>,\n \n     // Maps a trait onto a list of impls of that trait.\n-    trait_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n+    pub trait_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n \n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n     // Methods in these implementations don't need to be exported.\n-    inherent_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n+    pub inherent_impls: RefCell<DefIdMap<@RefCell<Vec<@Impl> >>>,\n \n     // Maps a def_id of an impl to an Impl structure.\n     // Note that this contains all of the impls that we know about,\n     // including ones in other crates. It's not clear that this is the best\n     // way to do it.\n-    impls: RefCell<DefIdMap<@Impl>>,\n+    pub impls: RefCell<DefIdMap<@Impl>>,\n \n     // Set of used unsafe nodes (functions or blocks). Unsafe nodes not\n     // present in this set can be warned about.\n-    used_unsafe: RefCell<NodeSet>,\n+    pub used_unsafe: RefCell<NodeSet>,\n \n     // Set of nodes which mark locals as mutable which end up getting used at\n     // some point. Local variable definitions not in this set can be warned\n     // about.\n-    used_mut_nodes: RefCell<NodeSet>,\n+    pub used_mut_nodes: RefCell<NodeSet>,\n \n     // vtable resolution information for impl declarations\n-    impl_vtables: typeck::impl_vtable_map,\n+    pub impl_vtables: typeck::impl_vtable_map,\n \n     // The set of external nominal types whose implementations have been read.\n     // This is used for lazy resolution of methods.\n-    populated_external_types: RefCell<DefIdSet>,\n+    pub populated_external_types: RefCell<DefIdSet>,\n \n     // The set of external traits whose implementations have been read. This\n     // is used for lazy resolution of traits.\n-    populated_external_traits: RefCell<DefIdSet>,\n+    pub populated_external_traits: RefCell<DefIdSet>,\n \n     // Borrows\n-    upvar_borrow_map: RefCell<UpvarBorrowMap>,\n+    pub upvar_borrow_map: RefCell<UpvarBorrowMap>,\n \n     // These two caches are used by const_eval when decoding external statics\n     // and variants that are found.\n-    extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n-    extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n+    pub extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n+    pub extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n }\n \n pub enum tbox_flag {\n@@ -363,17 +364,17 @@ pub enum tbox_flag {\n     has_ty_err = 16,\n     has_ty_bot = 32,\n \n-    // a meta-flag: subst may be required if the type has parameters, a self\n+    // a meta-pub flag: subst may be required if the type has parameters, a self\n     // type, or references bound regions\n     needs_subst = 1 | 2 | 8\n }\n \n pub type t_box = &'static t_box_;\n \n pub struct t_box_ {\n-    sty: sty,\n-    id: uint,\n-    flags: uint,\n+    pub sty: sty,\n+    pub id: uint,\n+    pub flags: uint,\n }\n \n // To reduce refcounting cost, we're representing types as unsafe pointers\n@@ -385,7 +386,7 @@ enum t_opaque {}\n \n #[allow(raw_pointer_deriving)]\n #[deriving(Clone, Eq, TotalEq, Hash)]\n-pub struct t { priv inner: *t_opaque }\n+pub struct t { inner: *t_opaque }\n \n impl fmt::Show for t {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -417,19 +418,19 @@ pub fn type_id(t: t) -> uint { get(t).id }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct BareFnTy {\n-    purity: ast::Purity,\n-    abis: AbiSet,\n-    sig: FnSig\n+    pub purity: ast::Purity,\n+    pub abis: AbiSet,\n+    pub sig: FnSig\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct ClosureTy {\n-    purity: ast::Purity,\n-    sigil: ast::Sigil,\n-    onceness: ast::Onceness,\n-    region: Region,\n-    bounds: BuiltinBounds,\n-    sig: FnSig,\n+    pub purity: ast::Purity,\n+    pub sigil: ast::Sigil,\n+    pub onceness: ast::Onceness,\n+    pub region: Region,\n+    pub bounds: BuiltinBounds,\n+    pub sig: FnSig,\n }\n \n /**\n@@ -446,16 +447,16 @@ pub struct ClosureTy {\n  */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct FnSig {\n-    binder_id: ast::NodeId,\n-    inputs: Vec<t>,\n-    output: t,\n-    variadic: bool\n+    pub binder_id: ast::NodeId,\n+    pub inputs: Vec<t>,\n+    pub output: t,\n+    pub variadic: bool\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct param_ty {\n-    idx: uint,\n-    def_id: DefId\n+    pub idx: uint,\n+    pub def_id: DefId\n }\n \n /// Representation of regions:\n@@ -502,8 +503,8 @@ pub enum Region {\n  */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct UpvarId {\n-    var_id: ast::NodeId,\n-    closure_expr_id: ast::NodeId,\n+    pub var_id: ast::NodeId,\n+    pub closure_expr_id: ast::NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n@@ -603,8 +604,8 @@ pub enum BorrowKind {\n  */\n #[deriving(Eq, Clone)]\n pub struct UpvarBorrow {\n-    kind: BorrowKind,\n-    region: ty::Region,\n+    pub kind: BorrowKind,\n+    pub region: ty::Region,\n }\n \n pub type UpvarBorrowMap = HashMap<UpvarId, UpvarBorrow>;\n@@ -621,8 +622,8 @@ impl Region {\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n pub struct FreeRegion {\n-    scope_id: NodeId,\n-    bound_region: BoundRegion\n+    pub scope_id: NodeId,\n+    pub bound_region: BoundRegion\n }\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n@@ -669,9 +670,9 @@ pub enum RegionSubsts {\n  *   always substituted away to the implementing type for a trait. */\n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct substs {\n-    self_ty: Option<ty::t>,\n-    tps: Vec<t>,\n-    regions: RegionSubsts,\n+    pub self_ty: Option<ty::t>,\n+    pub tps: Vec<t>,\n+    pub regions: RegionSubsts,\n }\n \n mod primitives {\n@@ -759,17 +760,17 @@ pub enum sty {\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n pub struct TyTrait {\n-    def_id: DefId,\n-    substs: substs,\n-    store: TraitStore,\n-    mutability: ast::Mutability,\n-    bounds: BuiltinBounds\n+    pub def_id: DefId,\n+    pub substs: substs,\n+    pub store: TraitStore,\n+    pub mutability: ast::Mutability,\n+    pub bounds: BuiltinBounds\n }\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct TraitRef {\n-    def_id: DefId,\n-    substs: substs\n+    pub def_id: DefId,\n+    pub substs: substs\n }\n \n #[deriving(Clone, Eq)]\n@@ -788,8 +789,8 @@ pub enum terr_vstore_kind {\n \n #[deriving(Clone, Show)]\n pub struct expected_found<T> {\n-    expected: T,\n-    found: T\n+    pub expected: T,\n+    pub found: T\n }\n \n // Data structures used in type unification\n@@ -830,8 +831,8 @@ pub enum type_err {\n \n #[deriving(Eq, TotalEq, Hash)]\n pub struct ParamBounds {\n-    builtin_bounds: BuiltinBounds,\n-    trait_bounds: Vec<@TraitRef> }\n+    pub builtin_bounds: BuiltinBounds,\n+    pub trait_bounds: Vec<@TraitRef> }\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n@@ -878,7 +879,7 @@ pub struct FloatVid(uint);\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct RegionVid {\n-    id: uint\n+    pub id: uint\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n@@ -983,28 +984,28 @@ impl fmt::Show for IntVarValue {\n \n #[deriving(Clone)]\n pub struct TypeParameterDef {\n-    ident: ast::Ident,\n-    def_id: ast::DefId,\n-    bounds: @ParamBounds,\n-    default: Option<ty::t>\n+    pub ident: ast::Ident,\n+    pub def_id: ast::DefId,\n+    pub bounds: @ParamBounds,\n+    pub default: Option<ty::t>\n }\n \n #[deriving(Encodable, Decodable, Clone)]\n pub struct RegionParameterDef {\n-    name: ast::Name,\n-    def_id: ast::DefId,\n+    pub name: ast::Name,\n+    pub def_id: ast::DefId,\n }\n \n /// Information about the type/lifetime parameters associated with an item.\n /// Analogous to ast::Generics.\n #[deriving(Clone)]\n pub struct Generics {\n     /// List of type parameters declared on the item.\n-    type_param_defs: Rc<Vec<TypeParameterDef> >,\n+    pub type_param_defs: Rc<Vec<TypeParameterDef>>,\n \n     /// List of region parameters declared on the item.\n     /// For a fn or method, only includes *early-bound* lifetimes.\n-    region_param_defs: Rc<Vec<RegionParameterDef> >,\n+    pub region_param_defs: Rc<Vec<RegionParameterDef>>,\n }\n \n impl Generics {\n@@ -1037,13 +1038,13 @@ pub struct ParameterEnvironment {\n     /// In general, this means converting from bound parameters to\n     /// free parameters. Since we currently represent bound/free type\n     /// parameters in the same way, this only has an affect on regions.\n-    free_substs: ty::substs,\n+    pub free_substs: ty::substs,\n \n     /// Bound on the Self parameter\n-    self_param_bound: Option<@TraitRef>,\n+    pub self_param_bound: Option<@TraitRef>,\n \n     /// Bounds on each numbered type parameter\n-    type_param_bounds: Vec<ParamBounds> ,\n+    pub type_param_bounds: Vec<ParamBounds> ,\n }\n \n /// A polytype.\n@@ -1058,20 +1059,20 @@ pub struct ParameterEnvironment {\n ///   region `&self` or to (unsubstituted) ty_param types\n #[deriving(Clone)]\n pub struct ty_param_bounds_and_ty {\n-    generics: Generics,\n-    ty: t\n+    pub generics: Generics,\n+    pub ty: t\n }\n \n /// As `ty_param_bounds_and_ty` but for a trait ref.\n pub struct TraitDef {\n-    generics: Generics,\n-    bounds: BuiltinBounds,\n-    trait_ref: @ty::TraitRef,\n+    pub generics: Generics,\n+    pub bounds: BuiltinBounds,\n+    pub trait_ref: @ty::TraitRef,\n }\n \n pub struct ty_param_substs_and_ty {\n-    substs: ty::substs,\n-    ty: ty::t\n+    pub substs: ty::substs,\n+    pub ty: ty::t\n }\n \n pub type type_cache = RefCell<DefIdMap<ty_param_bounds_and_ty>>;\n@@ -1841,7 +1842,7 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n  * a type than to think about what is *not* contained within a type.\n  */\n pub struct TypeContents {\n-    bits: u64\n+    pub bits: u64\n }\n \n macro_rules! def_type_content_sets(\n@@ -3175,8 +3176,8 @@ impl AutoRef {\n }\n \n pub struct ParamsTy {\n-    params: Vec<t>,\n-    ty: t\n+    pub params: Vec<t>,\n+    pub ty: t\n }\n \n pub fn expr_ty_params_and_ty(cx: &ctxt,\n@@ -3850,13 +3851,13 @@ pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> {\n // Enum information\n #[deriving(Clone)]\n pub struct VariantInfo {\n-    args: Vec<t>,\n-    arg_names: Option<Vec<ast::Ident> >,\n-    ctor_ty: t,\n-    name: ast::Ident,\n-    id: ast::DefId,\n-    disr_val: Disr,\n-    vis: Visibility\n+    pub args: Vec<t>,\n+    pub arg_names: Option<Vec<ast::Ident> >,\n+    pub ctor_ty: t,\n+    pub name: ast::Ident,\n+    pub id: ast::DefId,\n+    pub disr_val: Disr,\n+    pub vis: Visibility\n }\n \n impl VariantInfo {"}, {"sha": "7eae2ce3d336461337e8a027f829e3f50d267e2c", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -219,8 +219,8 @@ pub fn super_fold_trait_store<T:TypeFolder>(this: &mut T,\n // Some sample folders\n \n pub struct BottomUpFolder<'a> {\n-    tcx: &'a ty::ctxt,\n-    fldop: 'a |ty::t| -> ty::t,\n+    pub tcx: &'a ty::ctxt,\n+    pub fldop: 'a |ty::t| -> ty::t,\n }\n \n impl<'a> TypeFolder for BottomUpFolder<'a> {"}, {"sha": "b6f81d94418e128d25f5f0608aa7136ca8c6c1b6", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -103,8 +103,8 @@ pub fn check_match(fcx: &FnCtxt,\n }\n \n pub struct pat_ctxt<'a> {\n-    fcx: &'a FnCtxt<'a>,\n-    map: PatIdMap,\n+    pub fcx: &'a FnCtxt<'a>,\n+    pub map: PatIdMap,\n }\n \n pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,"}, {"sha": "9aa98ee5f8e8c256cce98546e72bc4111496052d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -178,9 +178,9 @@ pub enum FnKind {\n \n #[deriving(Clone)]\n pub struct PurityState {\n-    def: ast::NodeId,\n-    purity: ast::Purity,\n-    priv from_fn: bool\n+    pub def: ast::NodeId,\n+    pub purity: ast::Purity,\n+    from_fn: bool\n }\n \n impl PurityState {"}, {"sha": "67cf14050ed732f0f80cbd569ca2e3f2abac9c8a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -65,8 +65,8 @@ use syntax::visit::Visitor;\n /// A vtable context includes an inference context, a crate context, and a\n /// callback function to call in case of type error.\n pub struct VtableContext<'a> {\n-    infcx: &'a infer::InferCtxt<'a>,\n-    param_env: &'a ty::ParameterEnvironment,\n+    pub infcx: &'a infer::InferCtxt<'a>,\n+    pub param_env: &'a ty::ParameterEnvironment,\n }\n \n impl<'a> VtableContext<'a> {"}, {"sha": "af84e915f70403d4d4901903a0020065ac2b39ba", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -331,9 +331,9 @@ pub trait Combine {\n }\n \n pub struct CombineFields<'a> {\n-    infcx: &'a InferCtxt<'a>,\n-    a_is_expected: bool,\n-    trace: TypeTrace,\n+    pub infcx: &'a InferCtxt<'a>,\n+    pub a_is_expected: bool,\n+    pub trace: TypeTrace,\n }\n \n pub fn expected_found<C:Combine,T>("}, {"sha": "41edc26e803d3118dc1b0d005cf2dc08e691f641", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -75,26 +75,26 @@ pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n pub type CoerceResult = cres<Option<@ty::AutoAdjustment>>;\n \n pub struct InferCtxt<'a> {\n-    tcx: &'a ty::ctxt,\n+    pub tcx: &'a ty::ctxt,\n \n     // We instantiate ValsAndBindings with bounds<ty::t> because the\n     // types that might instantiate a general type variable have an\n     // order, represented by its upper and lower bounds.\n-    ty_var_bindings: RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>>,\n-    ty_var_counter: Cell<uint>,\n+    pub ty_var_bindings: RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>>,\n+    pub ty_var_counter: Cell<uint>,\n \n     // Map from integral variable to the kind of integer it represents\n-    int_var_bindings: RefCell<ValsAndBindings<ty::IntVid,\n+    pub int_var_bindings: RefCell<ValsAndBindings<ty::IntVid,\n                                               Option<IntVarValue>>>,\n-    int_var_counter: Cell<uint>,\n+    pub int_var_counter: Cell<uint>,\n \n     // Map from floating variable to the kind of float it represents\n-    float_var_bindings: RefCell<ValsAndBindings<ty::FloatVid,\n+    pub float_var_bindings: RefCell<ValsAndBindings<ty::FloatVid,\n                                                 Option<ast::FloatTy>>>,\n-    float_var_counter: Cell<uint>,\n+    pub float_var_counter: Cell<uint>,\n \n     // For region variables.\n-    region_vars: RegionVarBindings<'a>,\n+    pub region_vars: RegionVarBindings<'a>,\n }\n \n /// Why did we require that the two types be related?"}, {"sha": "03b2ebcc2459c00b63918d2b8189a6047392ffc2", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -104,8 +104,8 @@ pub enum RegionResolutionError {\n /// 'a and 'b together inside a SameRegions struct\n #[deriving(Clone)]\n pub struct SameRegions {\n-    scope_id: ast::NodeId,\n-    regions: Vec<BoundRegion>\n+    pub scope_id: ast::NodeId,\n+    pub regions: Vec<BoundRegion>\n }\n \n impl SameRegions {"}, {"sha": "2ee4f8fedd25b8711e5cb857fa14e39464ef3265", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,14 +26,14 @@ pub enum VarValue<V, T> {\n }\n \n pub struct ValsAndBindings<V, T> {\n-    vals: SmallIntMap<VarValue<V, T>>,\n-    bindings: Vec<(V, VarValue<V, T>)> ,\n+    pub vals: SmallIntMap<VarValue<V, T>>,\n+    pub bindings: Vec<(V, VarValue<V, T>)> ,\n }\n \n pub struct Node<V, T> {\n-    root: V,\n-    possible_types: T,\n-    rank: uint,\n+    pub root: V,\n+    pub possible_types: T,\n+    pub rank: uint,\n }\n \n pub trait UnifyVid<T> {"}, {"sha": "efb556ecea6984e59eb2753c6247c2a53ea6f64b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -108,49 +108,49 @@ pub enum MethodOrigin {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct MethodParam {\n     // the trait containing the method to be invoked\n-    trait_id: ast::DefId,\n+    pub trait_id: ast::DefId,\n \n     // index of the method to be invoked amongst the trait's methods\n-    method_num: uint,\n+    pub method_num: uint,\n \n     // index of the type parameter (from those that are in scope) that is\n     // the type of the receiver\n-    param_num: param_index,\n+    pub param_num: param_index,\n \n     // index of the bound for this type parameter which specifies the trait\n-    bound_num: uint,\n+    pub bound_num: uint,\n }\n \n // details for a method invoked with a receiver whose type is an object\n #[deriving(Clone, Encodable, Decodable)]\n pub struct MethodObject {\n     // the (super)trait containing the method to be invoked\n-    trait_id: ast::DefId,\n+    pub trait_id: ast::DefId,\n \n     // the actual base trait id of the object\n-    object_trait_id: ast::DefId,\n+    pub object_trait_id: ast::DefId,\n \n     // index of the method to be invoked amongst the trait's methods\n-    method_num: uint,\n+    pub method_num: uint,\n \n     // index into the actual runtime vtable.\n     // the vtable is formed by concatenating together the method lists of\n     // the base object trait and all supertraits;  this is the index into\n     // that vtable\n-    real_index: uint,\n+    pub real_index: uint,\n }\n \n #[deriving(Clone)]\n pub struct MethodCallee {\n-    origin: MethodOrigin,\n-    ty: ty::t,\n-    substs: ty::substs\n+    pub origin: MethodOrigin,\n+    pub ty: ty::t,\n+    pub substs: ty::substs\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash, Show)]\n pub struct MethodCall {\n-    expr_id: ast::NodeId,\n-    autoderef: u32\n+    pub expr_id: ast::NodeId,\n+    pub autoderef: u32\n }\n \n impl MethodCall {\n@@ -224,9 +224,9 @@ pub type vtable_map = @RefCell<FnvHashMap<MethodCall, vtable_res>>;\n #[deriving(Clone)]\n pub struct impl_res {\n     // resolutions for any bounded params on the trait definition\n-    trait_vtables: vtable_res,\n+    pub trait_vtables: vtable_res,\n     // resolutions for the trait /itself/ (and for supertraits)\n-    self_vtables: vtable_param_res\n+    pub self_vtables: vtable_param_res\n }\n \n impl Repr for impl_res {"}, {"sha": "944b1e237f981ecb1860dee0fd4db4702b896d88", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -473,7 +473,7 @@ impl Engine256 {\n \n /// The SHA-256 hash algorithm\n pub struct Sha256 {\n-    priv engine: Engine256\n+    engine: Engine256\n }\n \n impl Sha256 {"}, {"sha": "ff7f7c6e6f4bda76e7275c2c12b38d5cf5861db8", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 106, "deletions": 98, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -64,9 +64,9 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Crate {\n-    name: ~str,\n-    module: Option<Item>,\n-    externs: Vec<(ast::CrateNum, ExternalCrate)> ,\n+    pub name: ~str,\n+    pub module: Option<Item>,\n+    pub externs: Vec<(ast::CrateNum, ExternalCrate)>,\n }\n \n impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n@@ -92,8 +92,8 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ExternalCrate {\n-    name: ~str,\n-    attrs: Vec<Attribute> ,\n+    pub name: ~str,\n+    pub attrs: Vec<Attribute>,\n }\n \n impl Clean<ExternalCrate> for cstore::crate_metadata {\n@@ -113,13 +113,13 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Item {\n     /// Stringified span\n-    source: Span,\n+    pub source: Span,\n     /// Not everything has a name. E.g., impls\n-    name: Option<~str>,\n-    attrs: Vec<Attribute> ,\n-    inner: ItemEnum,\n-    visibility: Option<Visibility>,\n-    id: ast::NodeId,\n+    pub name: Option<~str>,\n+    pub attrs: Vec<Attribute> ,\n+    pub inner: ItemEnum,\n+    pub visibility: Option<Visibility>,\n+    pub id: ast::NodeId,\n }\n \n impl Item {\n@@ -192,8 +192,8 @@ pub enum ItemEnum {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Module {\n-    items: Vec<Item> ,\n-    is_crate: bool,\n+    pub items: Vec<Item>,\n+    pub is_crate: bool,\n }\n \n impl Clean<Item> for doctree::Module {\n@@ -289,9 +289,10 @@ impl<'a> attr::AttrMetaMethods for &'a Attribute {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyParam {\n-    name: ~str,\n-    id: ast::NodeId,\n-    bounds: Vec<TyParamBound> }\n+    pub name: ~str,\n+    pub id: ast::NodeId,\n+    pub bounds: Vec<TyParamBound>,\n+}\n \n impl Clean<TyParam> for ast::TyParam {\n     fn clean(&self) -> TyParam {\n@@ -338,8 +339,9 @@ impl Clean<Lifetime> for ast::Lifetime {\n // maybe use a Generic enum and use ~[Generic]?\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Generics {\n-    lifetimes: Vec<Lifetime> ,\n-    type_params: Vec<TyParam> }\n+    pub lifetimes: Vec<Lifetime>,\n+    pub type_params: Vec<TyParam>,\n+}\n \n impl Clean<Generics> for ast::Generics {\n     fn clean(&self) -> Generics {\n@@ -352,10 +354,10 @@ impl Clean<Generics> for ast::Generics {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Method {\n-    generics: Generics,\n-    self_: SelfTy,\n-    purity: ast::Purity,\n-    decl: FnDecl,\n+    pub generics: Generics,\n+    pub self_: SelfTy,\n+    pub purity: ast::Purity,\n+    pub decl: FnDecl,\n }\n \n impl Clean<Item> for ast::Method {\n@@ -390,10 +392,10 @@ impl Clean<Item> for ast::Method {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyMethod {\n-    purity: ast::Purity,\n-    decl: FnDecl,\n-    generics: Generics,\n-    self_: SelfTy,\n+    pub purity: ast::Purity,\n+    pub decl: FnDecl,\n+    pub generics: Generics,\n+    pub self_: SelfTy,\n }\n \n impl Clean<Item> for ast::TypeMethod {\n@@ -447,9 +449,9 @@ impl Clean<SelfTy> for ast::ExplicitSelf {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Function {\n-    decl: FnDecl,\n-    generics: Generics,\n-    purity: ast::Purity,\n+    pub decl: FnDecl,\n+    pub generics: Generics,\n+    pub purity: ast::Purity,\n }\n \n impl Clean<Item> for doctree::Function {\n@@ -471,13 +473,14 @@ impl Clean<Item> for doctree::Function {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ClosureDecl {\n-    sigil: ast::Sigil,\n-    region: Option<Lifetime>,\n-    lifetimes: Vec<Lifetime> ,\n-    decl: FnDecl,\n-    onceness: ast::Onceness,\n-    purity: ast::Purity,\n-    bounds: Vec<TyParamBound> }\n+    pub sigil: ast::Sigil,\n+    pub region: Option<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub decl: FnDecl,\n+    pub onceness: ast::Onceness,\n+    pub purity: ast::Purity,\n+    pub bounds: Vec<TyParamBound>,\n+}\n \n impl Clean<ClosureDecl> for ast::ClosureTy {\n     fn clean(&self) -> ClosureDecl {\n@@ -498,14 +501,15 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct FnDecl {\n-    inputs: Arguments,\n-    output: Type,\n-    cf: RetStyle,\n-    attrs: Vec<Attribute> }\n+    pub inputs: Arguments,\n+    pub output: Type,\n+    pub cf: RetStyle,\n+    pub attrs: Vec<Attribute>,\n+}\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Arguments {\n-    values: Vec<Argument> ,\n+    pub values: Vec<Argument>,\n }\n \n impl Clean<FnDecl> for ast::FnDecl {\n@@ -523,9 +527,9 @@ impl Clean<FnDecl> for ast::FnDecl {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Argument {\n-    type_: Type,\n-    name: ~str,\n-    id: ast::NodeId\n+    pub type_: Type,\n+    pub name: ~str,\n+    pub id: ast::NodeId,\n }\n \n impl Clean<Argument> for ast::Arg {\n@@ -555,9 +559,9 @@ impl Clean<RetStyle> for ast::RetStyle {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Trait {\n-    methods: Vec<TraitMethod> ,\n-    generics: Generics,\n-    parents: Vec<Type> ,\n+    pub methods: Vec<TraitMethod>,\n+    pub generics: Generics,\n+    pub parents: Vec<Type>,\n }\n \n impl Clean<Item> for doctree::Trait {\n@@ -626,17 +630,17 @@ impl Clean<TraitMethod> for ast::TraitMethod {\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n-        path: Path,\n-        typarams: Option<Vec<TyParamBound> >,\n-        id: ast::NodeId,\n+        pub path: Path,\n+        pub typarams: Option<Vec<TyParamBound>>,\n+        pub id: ast::NodeId,\n     },\n     /// Same as above, but only external variants\n     ExternalPath {\n-        path: Path,\n-        typarams: Option<Vec<TyParamBound> >,\n-        fqn: Vec<~str> ,\n-        kind: TypeKind,\n-        krate: ast::CrateNum,\n+        pub path: Path,\n+        pub typarams: Option<Vec<TyParamBound>>,\n+        pub fqn: Vec<~str>,\n+        pub kind: TypeKind,\n+        pub krate: ast::CrateNum,\n     },\n     // I have no idea how to usefully use this.\n     TyParamBinder(ast::NodeId),\n@@ -662,7 +666,11 @@ pub enum Type {\n     Unique(~Type),\n     Managed(~Type),\n     RawPointer(Mutability, ~Type),\n-    BorrowedRef { lifetime: Option<Lifetime>, mutability: Mutability, type_: ~Type},\n+    BorrowedRef {\n+        pub lifetime: Option<Lifetime>,\n+        pub mutability: Mutability,\n+        pub type_: ~Type,\n+    },\n     // region, raw, other boxes, mutable\n }\n \n@@ -707,7 +715,7 @@ impl Clean<Type> for ast::Ty {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct StructField {\n-    type_: Type,\n+    pub type_: Type,\n }\n \n impl Clean<Item> for ast::StructField {\n@@ -739,10 +747,10 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Struct {\n-    struct_type: doctree::StructType,\n-    generics: Generics,\n-    fields: Vec<Item> ,\n-    fields_stripped: bool,\n+    pub struct_type: doctree::StructType,\n+    pub generics: Generics,\n+    pub fields: Vec<Item>,\n+    pub fields_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Struct {\n@@ -768,9 +776,9 @@ impl Clean<Item> for doctree::Struct {\n /// only as a variant in an enum.\n #[deriving(Clone, Encodable, Decodable)]\n pub struct VariantStruct {\n-    struct_type: doctree::StructType,\n-    fields: Vec<Item> ,\n-    fields_stripped: bool,\n+    pub struct_type: doctree::StructType,\n+    pub fields: Vec<Item>,\n+    pub fields_stripped: bool,\n }\n \n impl Clean<VariantStruct> for syntax::ast::StructDef {\n@@ -785,9 +793,9 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Enum {\n-    variants: Vec<Item> ,\n-    generics: Generics,\n-    variants_stripped: bool,\n+    pub variants: Vec<Item>,\n+    pub generics: Generics,\n+    pub variants_stripped: bool,\n }\n \n impl Clean<Item> for doctree::Enum {\n@@ -809,7 +817,7 @@ impl Clean<Item> for doctree::Enum {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Variant {\n-    kind: VariantKind,\n+    pub kind: VariantKind,\n }\n \n impl Clean<Item> for doctree::Variant {\n@@ -851,11 +859,11 @@ impl Clean<VariantKind> for ast::VariantKind {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Span {\n-    filename: ~str,\n-    loline: uint,\n-    locol: uint,\n-    hiline: uint,\n-    hicol: uint,\n+    pub filename: ~str,\n+    pub loline: uint,\n+    pub locol: uint,\n+    pub hiline: uint,\n+    pub hicol: uint,\n }\n \n impl Clean<Span> for syntax::codemap::Span {\n@@ -876,8 +884,8 @@ impl Clean<Span> for syntax::codemap::Span {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Path {\n-    global: bool,\n-    segments: Vec<PathSegment> ,\n+    pub global: bool,\n+    pub segments: Vec<PathSegment>,\n }\n \n impl Clean<Path> for ast::Path {\n@@ -891,9 +899,9 @@ impl Clean<Path> for ast::Path {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct PathSegment {\n-    name: ~str,\n-    lifetimes: Vec<Lifetime> ,\n-    types: Vec<Type> ,\n+    pub name: ~str,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub types: Vec<Type>,\n }\n \n impl Clean<PathSegment> for ast::PathSegment {\n@@ -930,8 +938,8 @@ impl Clean<~str> for ast::Ident {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Typedef {\n-    type_: Type,\n-    generics: Generics,\n+    pub type_: Type,\n+    pub generics: Generics,\n }\n \n impl Clean<Item> for doctree::Typedef {\n@@ -952,10 +960,10 @@ impl Clean<Item> for doctree::Typedef {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct BareFunctionDecl {\n-    purity: ast::Purity,\n-    generics: Generics,\n-    decl: FnDecl,\n-    abi: ~str\n+    pub purity: ast::Purity,\n+    pub generics: Generics,\n+    pub decl: FnDecl,\n+    pub abi: ~str,\n }\n \n impl Clean<BareFunctionDecl> for ast::BareFnTy {\n@@ -974,12 +982,12 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Static {\n-    type_: Type,\n-    mutability: Mutability,\n+    pub type_: Type,\n+    pub mutability: Mutability,\n     /// It's useful to have the value of a static documented, but I have no\n     /// desire to represent expressions (that'd basically be all of the AST,\n     /// which is huge!). So, have a string.\n-    expr: ~str,\n+    pub expr: ~str,\n }\n \n impl Clean<Item> for doctree::Static {\n@@ -1017,11 +1025,11 @@ impl Clean<Mutability> for ast::Mutability {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Impl {\n-    generics: Generics,\n-    trait_: Option<Type>,\n-    for_: Type,\n-    methods: Vec<Item>,\n-    derived: bool,\n+    pub generics: Generics,\n+    pub trait_: Option<Type>,\n+    pub for_: Type,\n+    pub methods: Vec<Item>,\n+    pub derived: bool,\n }\n \n impl Clean<Item> for doctree::Impl {\n@@ -1056,7 +1064,7 @@ impl Clean<Item> for doctree::Impl {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ViewItem {\n-    inner: ViewItemInner\n+    pub inner: ViewItemInner,\n }\n \n impl Clean<Item> for ast::ViewItem {\n@@ -1109,8 +1117,8 @@ pub enum ViewPath {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ImportSource {\n-    path: Path,\n-    did: Option<ast::DefId>,\n+    pub path: Path,\n+    pub did: Option<ast::DefId>,\n }\n \n impl Clean<ViewPath> for ast::ViewPath {\n@@ -1130,8 +1138,8 @@ impl Clean<ViewPath> for ast::ViewPath {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct ViewListIdent {\n-    name: ~str,\n-    source: Option<ast::DefId>,\n+    pub name: ~str,\n+    pub source: Option<ast::DefId>,\n }\n \n impl Clean<ViewListIdent> for ast::PathListIdent {\n@@ -1311,7 +1319,7 @@ fn resolve_def(id: ast::NodeId) -> Option<ast::DefId> {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Macro {\n-    source: ~str,\n+    pub source: ~str,\n }\n \n impl Clean<Item> for doctree::Macro {"}, {"sha": "027d14babafd2b6b262707ce75a531f5747883f8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -32,8 +32,8 @@ pub enum MaybeTyped {\n }\n \n pub struct DocContext {\n-    krate: ast::Crate,\n-    maybe_typed: MaybeTyped\n+    pub krate: ast::Crate,\n+    pub maybe_typed: MaybeTyped\n }\n \n impl DocContext {\n@@ -46,8 +46,8 @@ impl DocContext {\n }\n \n pub struct CrateAnalysis {\n-    exported_items: privacy::ExportedItems,\n-    public_items: privacy::PublicItems,\n+    pub exported_items: privacy::ExportedItems,\n+    pub public_items: privacy::PublicItems,\n }\n \n /// Parses, resolves, and typechecks the given crate"}, {"sha": "78b1a1388f88c28749316de6bc3382017766e34b", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -17,23 +17,23 @@ use syntax::ast;\n use syntax::ast::{Ident, NodeId};\n \n pub struct Module {\n-    name: Option<Ident>,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    structs: Vec<Struct> ,\n-    enums: Vec<Enum> ,\n-    fns: Vec<Function> ,\n-    mods: Vec<Module> ,\n-    id: NodeId,\n-    typedefs: Vec<Typedef> ,\n-    statics: Vec<Static> ,\n-    traits: Vec<Trait> ,\n-    vis: ast::Visibility,\n-    impls: Vec<Impl> ,\n-    foreigns: Vec<ast::ForeignMod> ,\n-    view_items: Vec<ast::ViewItem> ,\n-    macros: Vec<Macro> ,\n-    is_crate: bool,\n+    pub name: Option<Ident>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub structs: Vec<Struct>,\n+    pub enums: Vec<Enum>,\n+    pub fns: Vec<Function>,\n+    pub mods: Vec<Module>,\n+    pub id: NodeId,\n+    pub typedefs: Vec<Typedef>,\n+    pub statics: Vec<Static>,\n+    pub traits: Vec<Trait>,\n+    pub vis: ast::Visibility,\n+    pub impls: Vec<Impl>,\n+    pub foreigns: Vec<ast::ForeignMod>,\n+    pub view_items: Vec<ast::ViewItem>,\n+    pub macros: Vec<Macro>,\n+    pub is_crate: bool,\n }\n \n impl Module {\n@@ -78,94 +78,94 @@ pub enum TypeBound {\n }\n \n pub struct Struct {\n-    vis: ast::Visibility,\n-    id: NodeId,\n-    struct_type: StructType,\n-    name: Ident,\n-    generics: ast::Generics,\n-    attrs: Vec<ast::Attribute> ,\n-    fields: Vec<ast::StructField> ,\n-    where: Span,\n+    pub vis: ast::Visibility,\n+    pub id: NodeId,\n+    pub struct_type: StructType,\n+    pub name: Ident,\n+    pub generics: ast::Generics,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub fields: Vec<ast::StructField>,\n+    pub where: Span,\n }\n \n pub struct Enum {\n-    vis: ast::Visibility,\n-    variants: Vec<Variant> ,\n-    generics: ast::Generics,\n-    attrs: Vec<ast::Attribute> ,\n-    id: NodeId,\n-    where: Span,\n-    name: Ident,\n+    pub vis: ast::Visibility,\n+    pub variants: Vec<Variant>,\n+    pub generics: ast::Generics,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: NodeId,\n+    pub where: Span,\n+    pub name: Ident,\n }\n \n pub struct Variant {\n-    name: Ident,\n-    attrs: Vec<ast::Attribute> ,\n-    kind: ast::VariantKind,\n-    id: ast::NodeId,\n-    vis: ast::Visibility,\n-    where: Span,\n+    pub name: Ident,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub kind: ast::VariantKind,\n+    pub id: ast::NodeId,\n+    pub vis: ast::Visibility,\n+    pub where: Span,\n }\n \n pub struct Function {\n-    decl: ast::FnDecl,\n-    attrs: Vec<ast::Attribute> ,\n-    id: NodeId,\n-    name: Ident,\n-    vis: ast::Visibility,\n-    purity: ast::Purity,\n-    where: Span,\n-    generics: ast::Generics,\n+    pub decl: ast::FnDecl,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: NodeId,\n+    pub name: Ident,\n+    pub vis: ast::Visibility,\n+    pub purity: ast::Purity,\n+    pub where: Span,\n+    pub generics: ast::Generics,\n }\n \n pub struct Typedef {\n-    ty: ast::P<ast::Ty>,\n-    gen: ast::Generics,\n-    name: Ident,\n-    id: ast::NodeId,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    vis: ast::Visibility,\n+    pub ty: ast::P<ast::Ty>,\n+    pub gen: ast::Generics,\n+    pub name: Ident,\n+    pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n }\n \n pub struct Static {\n-    type_: ast::P<ast::Ty>,\n-    mutability: ast::Mutability,\n-    expr: @ast::Expr,\n-    name: Ident,\n-    attrs: Vec<ast::Attribute> ,\n-    vis: ast::Visibility,\n-    id: ast::NodeId,\n-    where: Span,\n+    pub type_: ast::P<ast::Ty>,\n+    pub mutability: ast::Mutability,\n+    pub expr: @ast::Expr,\n+    pub name: Ident,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub vis: ast::Visibility,\n+    pub id: ast::NodeId,\n+    pub where: Span,\n }\n \n pub struct Trait {\n-    name: Ident,\n-    methods: Vec<ast::TraitMethod> , //should be TraitMethod\n-    generics: ast::Generics,\n-    parents: Vec<ast::TraitRef> ,\n-    attrs: Vec<ast::Attribute> ,\n-    id: ast::NodeId,\n-    where: Span,\n-    vis: ast::Visibility,\n+    pub name: Ident,\n+    pub methods: Vec<ast::TraitMethod>, //should be TraitMethod\n+    pub generics: ast::Generics,\n+    pub parents: Vec<ast::TraitRef>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub id: ast::NodeId,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n }\n \n pub struct Impl {\n-    generics: ast::Generics,\n-    trait_: Option<ast::TraitRef>,\n-    for_: ast::P<ast::Ty>,\n-    methods: Vec<@ast::Method> ,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n-    vis: ast::Visibility,\n-    id: ast::NodeId,\n+    pub generics: ast::Generics,\n+    pub trait_: Option<ast::TraitRef>,\n+    pub for_: ast::P<ast::Ty>,\n+    pub methods: Vec<@ast::Method>,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n+    pub vis: ast::Visibility,\n+    pub id: ast::NodeId,\n }\n \n pub struct Macro {\n-    name: Ident,\n-    id: ast::NodeId,\n-    attrs: Vec<ast::Attribute> ,\n-    where: Span,\n+    pub name: Ident,\n+    pub id: ast::NodeId,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub where: Span,\n }\n \n pub fn struct_type_from_def(sd: &ast::StructDef) -> StructType {"}, {"sha": "9030caed6cd246404d1458bcca638a86a992812d", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -27,14 +27,14 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n \n             // not actually here, but brings in line with freebsd\n-            l_sysid: libc::c_int,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_WRLCK: libc::c_short = 1;\n@@ -48,12 +48,12 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n-            l_sysid: libc::c_int,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_UNLCK: libc::c_short = 2;\n@@ -67,14 +67,14 @@ mod imp {\n         use std::libc;\n \n         pub struct flock {\n-            l_start: libc::off_t,\n-            l_len: libc::off_t,\n-            l_pid: libc::pid_t,\n-            l_type: libc::c_short,\n-            l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n \n             // not actually here, but brings in line with freebsd\n-            l_sysid: libc::c_int,\n+            pub l_sysid: libc::c_int,\n         }\n \n         pub static F_UNLCK: libc::c_short = 2;\n@@ -84,7 +84,7 @@ mod imp {\n     }\n \n     pub struct Lock {\n-        priv fd: libc::c_int,\n+        fd: libc::c_int,\n     }\n \n     impl Lock {\n@@ -155,7 +155,7 @@ mod imp {\n     }\n \n     pub struct Lock {\n-        priv handle: libc::HANDLE,\n+        handle: libc::HANDLE,\n     }\n \n     impl Lock {"}, {"sha": "399dcf6991c86dcba542eb24cc3bae87320adba3", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -13,15 +13,15 @@ use std::io;\n \n #[deriving(Clone)]\n pub struct Layout {\n-    logo: ~str,\n-    favicon: ~str,\n-    krate: ~str,\n+    pub logo: ~str,\n+    pub favicon: ~str,\n+    pub krate: ~str,\n }\n \n pub struct Page<'a> {\n-    title: &'a str,\n-    ty: &'a str,\n-    root_path: &'a str,\n+    pub title: &'a str,\n+    pub ty: &'a str,\n+    pub root_path: &'a str,\n }\n \n pub fn render<T: fmt::Show, S: fmt::Show>("}, {"sha": "94b0b21dc9eb80b2788ae18eb65d3d2c39a79a52", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -68,26 +68,26 @@ use html::highlight;\n pub struct Context {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n-    current: Vec<~str> ,\n+    pub current: Vec<~str> ,\n     /// String representation of how to get back to the root path of the 'doc/'\n     /// folder in terms of a relative URL.\n-    root_path: ~str,\n+    pub root_path: ~str,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n-    dst: Path,\n+    pub dst: Path,\n     /// This describes the layout of each page, and is not modified after\n     /// creation of the context (contains info like the favicon)\n-    layout: layout::Layout,\n+    pub layout: layout::Layout,\n     /// This map is a list of what should be displayed on the sidebar of the\n     /// current page. The key is the section header (traits, modules,\n     /// functions), and the value is the list of containers belonging to this\n     /// header. This map will change depending on the surrounding context of the\n     /// page.\n-    sidebar: HashMap<~str, Vec<~str> >,\n+    pub sidebar: HashMap<~str, Vec<~str> >,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n-    include_sources: bool,\n+    pub include_sources: bool,\n }\n \n /// Indicates where an external crate can be found.\n@@ -122,51 +122,51 @@ pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to\n     /// painfully maintain a context like this)\n-    typarams: HashMap<ast::NodeId, ~str>,\n+    pub typarams: HashMap<ast::NodeId, ~str>,\n \n     /// Maps a type id to all known implementations for that type. This is only\n     /// recognized for intra-crate `ResolvedPath` types, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n     ///\n     /// The values of the map are a list of implementations and documentation\n     /// found on that implementation.\n-    impls: HashMap<ast::NodeId, Vec<(clean::Impl, Option<~str>)> >,\n+    pub impls: HashMap<ast::NodeId, Vec<(clean::Impl, Option<~str>)> >,\n \n     /// Maintains a mapping of local crate node ids to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n     /// URLs when a type is being linked to. External paths are not located in\n     /// this map because the `External` type itself has all the information\n     /// necessary.\n-    paths: HashMap<ast::NodeId, (Vec<~str> , &'static str)>,\n+    pub paths: HashMap<ast::NodeId, (Vec<~str> , &'static str)>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    traits: HashMap<ast::NodeId, clean::Trait>,\n+    pub traits: HashMap<ast::NodeId, clean::Trait>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n     /// of trait ids to the list of known implementors of the trait\n-    implementors: HashMap<ast::NodeId, Vec<Implementor> >,\n+    pub implementors: HashMap<ast::NodeId, Vec<Implementor> >,\n \n     /// Cache of where external crate documentation can be found.\n-    extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n+    pub extern_locations: HashMap<ast::CrateNum, ExternalLocation>,\n \n     // Private fields only used when initially crawling a crate to build a cache\n \n-    priv stack: Vec<~str> ,\n-    priv parent_stack: Vec<ast::NodeId> ,\n-    priv search_index: Vec<IndexItem> ,\n-    priv privmod: bool,\n-    priv public_items: NodeSet,\n+    stack: Vec<~str> ,\n+    parent_stack: Vec<ast::NodeId> ,\n+    search_index: Vec<IndexItem> ,\n+    privmod: bool,\n+    public_items: NodeSet,\n \n     // In rare case where a structure is defined in one module but implemented\n     // in another, if the implementing module is parsed before defining module,\n     // then the fully qualified name of the structure isn't presented in `paths`\n     // yet when its implementation methods are being indexed. Caches such methods\n     // and their parent id here and indexes them at the end of crate parsing.\n-    priv orphan_methods: Vec<(ast::NodeId, clean::Item)>,\n+    orphan_methods: Vec<(ast::NodeId, clean::Item)>,\n }\n \n /// Helper struct to render all source code to HTML pages"}, {"sha": "afb7f559a8009903107efb50f3f566eb40d0a0e5", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,7 +26,7 @@ pub struct Toc {\n     /// # Main\n     /// ### A\n     /// ## B\n-    priv entries: Vec<TocEntry>\n+    entries: Vec<TocEntry>\n }\n \n impl Toc {\n@@ -37,17 +37,17 @@ impl Toc {\n \n #[deriving(Eq)]\n pub struct TocEntry {\n-    priv level: u32,\n-    priv sec_number: ~str,\n-    priv name: ~str,\n-    priv id: ~str,\n-    priv children: Toc,\n+    level: u32,\n+    sec_number: ~str,\n+    name: ~str,\n+    id: ~str,\n+    children: Toc,\n }\n \n /// Progressive construction of a table of contents.\n #[deriving(Eq)]\n pub struct TocBuilder {\n-    priv top_level: Toc,\n+    top_level: Toc,\n     /// The current heirachy of parent headings, the levels are\n     /// strictly increasing (i.e. chain[0].level < chain[1].level <\n     /// ...) with each entry being the most recent occurance of a\n@@ -56,7 +56,7 @@ pub struct TocBuilder {\n     /// the most recent one).\n     ///\n     /// We also have `chain[0].level <= top_level.entries[last]`.\n-    priv chain: Vec<TocEntry>\n+    chain: Vec<TocEntry>\n }\n \n impl TocBuilder {"}, {"sha": "f3a82fead5a48e2d701057847e9a134ac57cbf32", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -19,10 +19,10 @@ pub type PluginCallback = fn (clean::Crate) -> PluginResult;\n \n /// Manages loading and running of plugins\n pub struct PluginManager {\n-    priv dylibs: Vec<dl::DynamicLibrary> ,\n-    priv callbacks: Vec<PluginCallback> ,\n+    dylibs: Vec<dl::DynamicLibrary> ,\n+    callbacks: Vec<PluginCallback> ,\n     /// The directory plugins will be loaded from\n-    prefix: Path,\n+    pub prefix: Path,\n }\n \n impl PluginManager {"}, {"sha": "afc01d0eb62acd0b8e71a0c7a818d7e493e5133d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -190,15 +190,15 @@ fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> ~str {\n }\n \n pub struct Collector {\n-    tests: Vec<testing::TestDescAndFn>,\n-    priv names: Vec<~str>,\n-    priv libs: HashSet<Path>,\n-    priv cnt: uint,\n-    priv use_headers: bool,\n-    priv current_header: Option<~str>,\n-    priv cratename: ~str,\n-\n-    priv loose_feature_gating: bool\n+    pub tests: Vec<testing::TestDescAndFn>,\n+    names: Vec<~str>,\n+    libs: HashSet<Path>,\n+    cnt: uint,\n+    use_headers: bool,\n+    current_header: Option<~str>,\n+    cratename: ~str,\n+\n+    loose_feature_gating: bool\n }\n \n impl Collector {"}, {"sha": "78c6940244c392474c39bba70616ac019da9f7eb", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,10 +21,10 @@ use core;\n use doctree::*;\n \n pub struct RustdocVisitor<'a> {\n-    module: Module,\n-    attrs: Vec<ast::Attribute> ,\n-    cx: &'a core::DocContext,\n-    analysis: Option<&'a core::CrateAnalysis>,\n+    pub module: Module,\n+    pub attrs: Vec<ast::Attribute>,\n+    pub cx: &'a core::DocContext,\n+    pub analysis: Option<&'a core::CrateAnalysis>,\n }\n \n impl<'a> RustdocVisitor<'a> {"}, {"sha": "0d2550d4ebda22116853d949042eaa73e186b137", "filename": "src/librustuv/access.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Faccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Faccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faccess.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,12 +22,12 @@ use std::rt::local::Local;\n use homing::HomingMissile;\n \n pub struct Access {\n-    priv inner: UnsafeArc<Inner>,\n+    inner: UnsafeArc<Inner>,\n }\n \n pub struct Guard<'a> {\n-    priv access: &'a mut Access,\n-    priv missile: Option<HomingMissile>,\n+    access: &'a mut Access,\n+    missile: Option<HomingMissile>,\n }\n \n struct Inner {"}, {"sha": "93cc1d8d54f141ce37ef5a2d55a9861994c54742", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,14 +26,14 @@ use uvll;\n \n pub struct FsRequest {\n     req: *uvll::uv_fs_t,\n-    priv fired: bool,\n+    fired: bool,\n }\n \n pub struct FileWatcher {\n-    priv loop_: Loop,\n-    priv fd: c_int,\n-    priv close: rtio::CloseBehavior,\n-    priv home: HomeHandle,\n+    loop_: Loop,\n+    fd: c_int,\n+    close: rtio::CloseBehavior,\n+    home: HomeHandle,\n }\n \n impl FsRequest {"}, {"sha": "89b68917c94838f35edd9dedc67136b9b8b1402e", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -48,8 +48,8 @@ use queue::{Queue, QueuePool};\n /// Handles are clone-able in order to derive new handles from existing handles\n /// (very useful for when accepting a socket from a server).\n pub struct HomeHandle {\n-    priv queue: Queue,\n-    priv id: uint,\n+    queue: Queue,\n+    id: uint,\n }\n \n impl HomeHandle {\n@@ -126,7 +126,7 @@ pub trait HomingIO {\n /// task back to its appropriate home (if applicable). The field is used to\n /// assert that we are where we think we are.\n pub struct HomingMissile {\n-    priv io_home: uint,\n+    io_home: uint,\n }\n \n impl HomingMissile {"}, {"sha": "01067cb699b82b1811d7cdabe86d88a9bc058c7a", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -197,8 +197,8 @@ pub trait UvHandle<T> {\n }\n \n pub struct ForbidSwitch {\n-    priv msg: &'static str,\n-    priv io: uint,\n+    msg: &'static str,\n+    io: uint,\n }\n \n impl ForbidSwitch {\n@@ -261,8 +261,8 @@ fn wakeup(slot: &mut Option<BlockedTask>) {\n }\n \n pub struct Request {\n-    handle: *uvll::uv_req_t,\n-    priv defused: bool,\n+    pub handle: *uvll::uv_req_t,\n+    defused: bool,\n }\n \n impl Request {\n@@ -313,7 +313,7 @@ impl Drop for Request {\n /// with dtors may not be destructured, but tuple structs can,\n /// but the results are not correct.\n pub struct Loop {\n-    priv handle: *uvll::uv_loop_t\n+    handle: *uvll::uv_loop_t\n }\n \n impl Loop {"}, {"sha": "0514975cc7b277f7643be02f18bb01c72cdb01e2", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -153,22 +153,22 @@ pub struct TcpWatcher {\n     handle: *uvll::uv_tcp_t,\n     stream: StreamWatcher,\n     home: HomeHandle,\n-    priv refcount: Refcount,\n+    refcount: Refcount,\n \n     // libuv can't support concurrent reads and concurrent writes of the same\n     // stream object, so we use these access guards in order to arbitrate among\n     // multiple concurrent reads and writes. Note that libuv *can* read and\n     // write simultaneously, it just can't read and read simultaneously.\n-    priv read_access: Access,\n-    priv write_access: Access,\n+    read_access: Access,\n+    write_access: Access,\n }\n \n pub struct TcpListener {\n     home: HomeHandle,\n     handle: *uvll::uv_pipe_t,\n-    priv closing_task: Option<BlockedTask>,\n-    priv outgoing: Sender<Result<~rtio::RtioTcpStream:Send, IoError>>,\n-    priv incoming: Receiver<Result<~rtio::RtioTcpStream:Send, IoError>>,\n+    closing_task: Option<BlockedTask>,\n+    outgoing: Sender<Result<~rtio::RtioTcpStream:Send, IoError>>,\n+    incoming: Receiver<Result<~rtio::RtioTcpStream:Send, IoError>>,\n }\n \n pub struct TcpAcceptor {\n@@ -476,9 +476,9 @@ pub struct UdpWatcher {\n     home: HomeHandle,\n \n     // See above for what these fields are\n-    priv refcount: Refcount,\n-    priv read_access: Access,\n-    priv write_access: Access,\n+    refcount: Refcount,\n+    read_access: Access,\n+    write_access: Access,\n }\n \n impl UdpWatcher {"}, {"sha": "ea46c3a129678e80b527945eaf3bea40853eab20", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -26,19 +26,19 @@ use uvll;\n pub struct PipeWatcher {\n     stream: StreamWatcher,\n     home: HomeHandle,\n-    priv defused: bool,\n-    priv refcount: Refcount,\n+    defused: bool,\n+    refcount: Refcount,\n \n     // see comments in TcpWatcher for why these exist\n-    priv write_access: Access,\n-    priv read_access: Access,\n+    write_access: Access,\n+    read_access: Access,\n }\n \n pub struct PipeListener {\n     home: HomeHandle,\n     pipe: *uvll::uv_pipe_t,\n-    priv outgoing: Sender<Result<~RtioPipe:Send, IoError>>,\n-    priv incoming: Receiver<Result<~RtioPipe:Send, IoError>>,\n+    outgoing: Sender<Result<~RtioPipe:Send, IoError>>,\n+    incoming: Receiver<Result<~RtioPipe:Send, IoError>>,\n }\n \n pub struct PipeAcceptor {"}, {"sha": "f5643e80f4a08466bbc667e3a543405d14500e9e", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,13 +46,13 @@ struct State {\n /// This structure is intended to be stored next to the event loop, and it is\n /// used to create new `Queue` structures.\n pub struct QueuePool {\n-    priv queue: UnsafeArc<State>,\n-    priv refcnt: uint,\n+    queue: UnsafeArc<State>,\n+    refcnt: uint,\n }\n \n /// This type is used to send messages back to the original event loop.\n pub struct Queue {\n-    priv queue: UnsafeArc<State>,\n+    queue: UnsafeArc<State>,\n }\n \n extern fn async_cb(handle: *uvll::uv_async_t, status: c_int) {"}, {"sha": "86c6c44238c060a3df3e0501e0225e04b2bb89df", "filename": "src/librustuv/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Frc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -19,7 +19,7 @@\n use std::sync::arc::UnsafeArc;\n \n pub struct Refcount {\n-    priv rc: UnsafeArc<uint>,\n+    rc: UnsafeArc<uint>,\n }\n \n impl Refcount {"}, {"sha": "10d62a5aeae055639a9a66480ff7e2b4674e7ae4", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,13 +23,13 @@ use uvll;\n // uv_stream_t instance, and all I/O operations assume that it's already located\n // on the appropriate scheduler.\n pub struct StreamWatcher {\n-    handle: *uvll::uv_stream_t,\n+    pub handle: *uvll::uv_stream_t,\n \n     // Cache the last used uv_write_t so we don't have to allocate a new one on\n     // every call to uv_write(). Ideally this would be a stack-allocated\n     // structure, but currently we don't have mappings for all the structures\n     // defined in libuv, so we're foced to malloc this.\n-    priv last_write_req: Option<Request>,\n+    last_write_req: Option<Request>,\n }\n \n struct ReadContext {"}, {"sha": "d8365cf677c173f2af308ef905c3db0f797c9c9f", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,7 +46,7 @@ use uvll;\n \n // Obviously an Event Loop is always home.\n pub struct UvEventLoop {\n-    priv uvio: UvIoFactory\n+    uvio: UvIoFactory\n }\n \n impl UvEventLoop {\n@@ -124,8 +124,8 @@ fn test_callback_run_once() {\n }\n \n pub struct UvIoFactory {\n-    loop_: Loop,\n-    priv handle_pool: Option<~QueuePool>,\n+    pub loop_: Loop,\n+    handle_pool: Option<~QueuePool>,\n }\n \n impl UvIoFactory {"}, {"sha": "62f1dbd73e3327c7c8a8798c144f9c79367581db", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -100,15 +100,15 @@ pub type uv_buf_len_t = libc::c_ulong;\n // see libuv/include/uv-unix.h\n #[cfg(unix)]\n pub struct uv_buf_t {\n-    base: *u8,\n-    len: uv_buf_len_t,\n+    pub base: *u8,\n+    pub len: uv_buf_len_t,\n }\n \n // see libuv/include/uv-win.h\n #[cfg(windows)]\n pub struct uv_buf_t {\n-    len: uv_buf_len_t,\n-    base: *u8,\n+    pub len: uv_buf_len_t,\n+    pub base: *u8,\n }\n \n #[repr(C)]\n@@ -119,23 +119,23 @@ pub enum uv_run_mode {\n }\n \n pub struct uv_process_options_t {\n-    exit_cb: uv_exit_cb,\n-    file: *libc::c_char,\n-    args: **libc::c_char,\n-    env: **libc::c_char,\n-    cwd: *libc::c_char,\n-    flags: libc::c_uint,\n-    stdio_count: libc::c_int,\n-    stdio: *uv_stdio_container_t,\n-    uid: uv_uid_t,\n-    gid: uv_gid_t,\n+    pub exit_cb: uv_exit_cb,\n+    pub file: *libc::c_char,\n+    pub args: **libc::c_char,\n+    pub env: **libc::c_char,\n+    pub cwd: *libc::c_char,\n+    pub flags: libc::c_uint,\n+    pub stdio_count: libc::c_int,\n+    pub stdio: *uv_stdio_container_t,\n+    pub uid: uv_uid_t,\n+    pub gid: uv_gid_t,\n }\n \n // These fields are private because they must be interfaced with through the\n // functions below.\n pub struct uv_stdio_container_t {\n-    priv flags: libc::c_int,\n-    priv stream: *uv_stream_t,\n+    flags: libc::c_int,\n+    stream: *uv_stream_t,\n }\n \n pub type uv_handle_t = c_void;\n@@ -160,27 +160,27 @@ pub type uv_signal_t = c_void;\n pub type uv_shutdown_t = c_void;\n \n pub struct uv_timespec_t {\n-    tv_sec: libc::c_long,\n-    tv_nsec: libc::c_long\n+    pub tv_sec: libc::c_long,\n+    pub tv_nsec: libc::c_long\n }\n \n pub struct uv_stat_t {\n-    st_dev: libc::uint64_t,\n-    st_mode: libc::uint64_t,\n-    st_nlink: libc::uint64_t,\n-    st_uid: libc::uint64_t,\n-    st_gid: libc::uint64_t,\n-    st_rdev: libc::uint64_t,\n-    st_ino: libc::uint64_t,\n-    st_size: libc::uint64_t,\n-    st_blksize: libc::uint64_t,\n-    st_blocks: libc::uint64_t,\n-    st_flags: libc::uint64_t,\n-    st_gen: libc::uint64_t,\n-    st_atim: uv_timespec_t,\n-    st_mtim: uv_timespec_t,\n-    st_ctim: uv_timespec_t,\n-    st_birthtim: uv_timespec_t\n+    pub st_dev: libc::uint64_t,\n+    pub st_mode: libc::uint64_t,\n+    pub st_nlink: libc::uint64_t,\n+    pub st_uid: libc::uint64_t,\n+    pub st_gid: libc::uint64_t,\n+    pub st_rdev: libc::uint64_t,\n+    pub st_ino: libc::uint64_t,\n+    pub st_size: libc::uint64_t,\n+    pub st_blksize: libc::uint64_t,\n+    pub st_blocks: libc::uint64_t,\n+    pub st_flags: libc::uint64_t,\n+    pub st_gen: libc::uint64_t,\n+    pub st_atim: uv_timespec_t,\n+    pub st_mtim: uv_timespec_t,\n+    pub st_ctim: uv_timespec_t,\n+    pub st_birthtim: uv_timespec_t\n }\n \n impl uv_stat_t {"}, {"sha": "a6356e34af30da08b31977c4205030f91b5fc023", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,9 +20,9 @@ use std::str;\n // Common data structures\n #[deriving(Clone)]\n pub struct Doc<'a> {\n-    data: &'a [u8],\n-    start: uint,\n-    end: uint,\n+    pub data: &'a [u8],\n+    pub start: uint,\n+    pub end: uint,\n }\n \n impl<'doc> Doc<'doc> {\n@@ -40,8 +40,8 @@ impl<'doc> Doc<'doc> {\n }\n \n pub struct TaggedDoc<'a> {\n-    priv tag: uint,\n-    doc: Doc<'a>,\n+    tag: uint,\n+    pub doc: Doc<'a>,\n }\n \n pub enum EbmlEncoderTag {\n@@ -117,8 +117,8 @@ pub mod reader {\n     )\n \n     pub struct Res {\n-        val: uint,\n-        next: uint\n+        pub val: uint,\n+        pub next: uint\n     }\n \n     #[inline(never)]\n@@ -291,8 +291,8 @@ pub mod reader {\n     pub fn doc_as_i64(d: Doc) -> i64 { doc_as_u64(d) as i64 }\n \n     pub struct Decoder<'a> {\n-        priv parent: Doc<'a>,\n-        priv pos: uint,\n+        parent: Doc<'a>,\n+        pos: uint,\n     }\n \n     pub fn Decoder<'a>(d: Doc<'a>) -> Decoder<'a> {\n@@ -635,8 +635,8 @@ pub mod writer {\n \n     // ebml writing\n     pub struct Encoder<'a, W> {\n-        writer: &'a mut W,\n-        priv size_positions: ~[uint],\n+        pub writer: &'a mut W,\n+        size_positions: ~[uint],\n     }\n \n     fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult {"}, {"sha": "2d3e6bc86eb0d2672eca2acc6d1b8af7fcfe88f2", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -298,7 +298,7 @@ fn spaces(n: uint) -> ~str {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder<'a> {\n-    priv wr: &'a mut io::Writer,\n+    wr: &'a mut io::Writer,\n }\n \n impl<'a> Encoder<'a> {\n@@ -504,8 +504,8 @@ impl<'a> ::Encoder<io::IoError> for Encoder<'a> {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder<'a> {\n-    priv wr: &'a mut io::Writer,\n-    priv indent: uint,\n+    wr: &'a mut io::Writer,\n+    indent: uint,\n }\n \n impl<'a> PrettyEncoder<'a> {\n@@ -899,10 +899,10 @@ impl Json {\n }\n \n pub struct Parser<T> {\n-    priv rdr: T,\n-    priv ch: Option<char>,\n-    priv line: uint,\n-    priv col: uint,\n+    rdr: T,\n+    ch: Option<char>,\n+    line: uint,\n+    col: uint,\n }\n \n impl<T: Iterator<char>> Parser<T> {\n@@ -1298,7 +1298,7 @@ pub fn from_str(s: &str) -> DecodeResult<Json> {\n \n /// A structure to decode JSON to values in rust.\n pub struct Decoder {\n-    priv stack: ~[Json],\n+    stack: ~[Json],\n }\n \n impl Decoder {"}, {"sha": "c9112caa1b9613048564105fe91897b492317d33", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -25,7 +25,7 @@ use option::{Option, Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq, Ord, TotalOrd, TotalEq, Hash)]\n-pub struct Ascii { priv chr: u8 }\n+pub struct Ascii { chr: u8 }\n \n impl Ascii {\n     /// Converts an ascii character into a `u8`."}, {"sha": "ca1a05a264743676f83b90db6e528f7f9379cf6b", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -86,8 +86,8 @@ use raw::Slice;\n /// This structure wraps a `*libc::c_char`, and will automatically free the\n /// memory it is pointing to when it goes out of scope.\n pub struct CString {\n-    priv buf: *libc::c_char,\n-    priv owns_buffer_: bool,\n+    buf: *libc::c_char,\n+    owns_buffer_: bool,\n }\n \n impl Clone for CString {\n@@ -373,8 +373,8 @@ fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n ///\n /// Use with the `std::iter` module.\n pub struct CChars<'a> {\n-    priv ptr: *libc::c_char,\n-    priv marker: marker::ContravariantLifetime<'a>,\n+    ptr: *libc::c_char,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a> Iterator<libc::c_char> for CChars<'a> {"}, {"sha": "3b6b914cf14e55f81993c07b960bd63715f2d693", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -44,9 +44,9 @@ use raw;\n \n /// The type representing a foreign chunk of memory\n pub struct CVec<T> {\n-    priv base: *mut T,\n-    priv len: uint,\n-    priv dtor: Option<proc:Send()>,\n+    base: *mut T,\n+    len: uint,\n+    dtor: Option<proc:Send()>,\n }\n \n #[unsafe_destructor]"}, {"sha": "102b87a3733f3332c0ecd8275a726d58bb879bed", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,8 +21,8 @@ use ty::Unsafe;\n \n /// A mutable memory location that admits only `Copy` data.\n pub struct Cell<T> {\n-    priv value: Unsafe<T>,\n-    priv noshare: marker::NoShare,\n+    value: Unsafe<T>,\n+    noshare: marker::NoShare,\n }\n \n impl<T:Copy> Cell<T> {\n@@ -69,10 +69,10 @@ impl<T: fmt::Show> fmt::Show for Cell<T> {\n \n /// A mutable memory location with dynamically checked borrow rules\n pub struct RefCell<T> {\n-    priv value: Unsafe<T>,\n-    priv borrow: BorrowFlag,\n-    priv nocopy: marker::NoCopy,\n-    priv noshare: marker::NoShare,\n+    value: Unsafe<T>,\n+    borrow: BorrowFlag,\n+    nocopy: marker::NoCopy,\n+    noshare: marker::NoShare,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -202,7 +202,7 @@ impl<T: Eq> Eq for RefCell<T> {\n \n /// Wraps a borrowed reference to a value in a `RefCell` box.\n pub struct Ref<'b, T> {\n-    priv parent: &'b RefCell<T>\n+    parent: &'b RefCell<T>\n }\n \n #[unsafe_destructor]\n@@ -222,7 +222,7 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n \n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n pub struct RefMut<'b, T> {\n-    priv parent: &'b mut RefCell<T>\n+    parent: &'b mut RefCell<T>\n }\n \n #[unsafe_destructor]"}, {"sha": "e951077ac83294ab3bd120c23c1985fe35574551", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -289,34 +289,34 @@ static RESCHED_FREQ: int = 256;\n /// The receiving-half of Rust's channel type. This half can only be owned by\n /// one task\n pub struct Receiver<T> {\n-    priv inner: Flavor<T>,\n-    priv receives: Cell<uint>,\n+    inner: Flavor<T>,\n+    receives: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n pub struct Messages<'a, T> {\n-    priv rx: &'a Receiver<T>\n+    rx: &'a Receiver<T>\n }\n \n /// The sending-half of Rust's asynchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct Sender<T> {\n-    priv inner: Flavor<T>,\n-    priv sends: Cell<uint>,\n+    inner: Flavor<T>,\n+    sends: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n pub struct SyncSender<T> {\n-    priv inner: UnsafeArc<sync::Packet<T>>,\n+    inner: UnsafeArc<sync::Packet<T>>,\n     // can't share in an arc\n-    priv marker: marker::NoShare,\n+    marker: marker::NoShare,\n }\n \n /// This enumeration is the list of the possible reasons that try_recv could not"}, {"sha": "84191ed6b28c52475638e6f25f8d2e6ef3c61cfa", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -62,10 +62,10 @@ use uint;\n /// The \"receiver set\" of the select interface. This structure is used to manage\n /// a set of receivers which are being selected over.\n pub struct Select {\n-    priv head: *mut Handle<'static, ()>,\n-    priv tail: *mut Handle<'static, ()>,\n-    priv next_id: Cell<uint>,\n-    priv marker1: marker::NoSend,\n+    head: *mut Handle<'static, ()>,\n+    tail: *mut Handle<'static, ()>,\n+    next_id: Cell<uint>,\n+    marker1: marker::NoSend,\n }\n \n /// A handle to a receiver which is currently a member of a `Select` set of\n@@ -74,16 +74,16 @@ pub struct Select {\n pub struct Handle<'rx, T> {\n     /// The ID of this handle, used to compare against the return value of\n     /// `Select::wait()`\n-    priv id: uint,\n-    priv selector: &'rx Select,\n-    priv next: *mut Handle<'static, ()>,\n-    priv prev: *mut Handle<'static, ()>,\n-    priv added: bool,\n-    priv packet: &'rx Packet,\n+    id: uint,\n+    selector: &'rx Select,\n+    next: *mut Handle<'static, ()>,\n+    prev: *mut Handle<'static, ()>,\n+    added: bool,\n+    packet: &'rx Packet,\n \n     // due to our fun transmutes, we be sure to place this at the end. (nothing\n     // previous relies on T)\n-    priv rx: &'rx Receiver<T>,\n+    rx: &'rx Receiver<T>,\n }\n \n struct Packets { cur: *mut Handle<'static, ()> }"}, {"sha": "5f8a043b83036f15df21cd44583983f9df0728be", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -508,29 +508,29 @@ pub type Result = io::IoResult<()>;\n /// traits.\n pub struct Formatter<'a> {\n     /// Flags for formatting (packed version of rt::Flag)\n-    flags: uint,\n+    pub flags: uint,\n     /// Character used as 'fill' whenever there is alignment\n-    fill: char,\n+    pub fill: char,\n     /// Boolean indication of whether the output should be left-aligned\n-    align: parse::Alignment,\n+    pub align: parse::Alignment,\n     /// Optionally specified integer width that the output should be\n-    width: Option<uint>,\n+    pub width: Option<uint>,\n     /// Optionally specified precision for numeric types\n-    precision: Option<uint>,\n+    pub precision: Option<uint>,\n \n     /// Output buffer.\n-    buf: &'a mut io::Writer,\n-    priv curarg: slice::Items<'a, Argument<'a>>,\n-    priv args: &'a [Argument<'a>],\n+    pub buf: &'a mut io::Writer,\n+    curarg: slice::Items<'a, Argument<'a>>,\n+    args: &'a [Argument<'a>],\n }\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n pub struct Argument<'a> {\n-    priv formatter: extern \"Rust\" fn(&any::Void, &mut Formatter) -> Result,\n-    priv value: &'a any::Void,\n+    formatter: extern \"Rust\" fn(&any::Void, &mut Formatter) -> Result,\n+    value: &'a any::Void,\n }\n \n impl<'a> Arguments<'a> {\n@@ -555,8 +555,8 @@ impl<'a> Arguments<'a> {\n /// string at compile-time so usage of the `write` and `format` functions can\n /// be safely performed.\n pub struct Arguments<'a> {\n-    priv fmt: &'a [rt::Piece<'a>],\n-    priv args: &'a [Argument<'a>],\n+    fmt: &'a [rt::Piece<'a>],\n+    args: &'a [Argument<'a>],\n }\n \n /// When a format is not otherwise specified, types are formatted by ascribing"}, {"sha": "b10a9584df98f7f3dbf59e7a778f78b3be50ba47", "filename": "src/libstd/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fnum.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -108,7 +108,7 @@ radix!(UpperHex, 16, \"0x\", x @  0 .. 9 => '0' as u8 + x,\n /// A radix with in the range of `2..36`.\n #[deriving(Clone, Eq)]\n pub struct Radix {\n-    priv base: u8,\n+    base: u8,\n }\n \n impl Radix {"}, {"sha": "4752f3a75f473557133b83ffe14fb09b5bf20bf2", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -37,30 +37,30 @@ pub enum Piece<'a> {\n #[deriving(Eq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n-    position: Position<'a>,\n+    pub position: Position<'a>,\n     /// How to format the argument\n-    format: FormatSpec<'a>,\n+    pub format: FormatSpec<'a>,\n     /// If not `None`, what method to invoke on the argument\n-    method: Option<~Method<'a>>\n+    pub method: Option<~Method<'a>>\n }\n \n /// Specification for the formatting of an argument in the format string.\n #[deriving(Eq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n-    fill: Option<char>,\n+    pub fill: Option<char>,\n     /// Optionally specified alignment\n-    align: Alignment,\n+    pub align: Alignment,\n     /// Packed version of various flags provided\n-    flags: uint,\n+    pub flags: uint,\n     /// The integer precision to use\n-    precision: Count<'a>,\n+    pub precision: Count<'a>,\n     /// The string width requested for the resulting format\n-    width: Count<'a>,\n+    pub width: Count<'a>,\n     /// The descriptor string representing the name of the format desired for\n     /// this argument, this can be empty or any number of characters, although\n     /// it is required to be one word.\n-    ty: &'a str\n+    pub ty: &'a str\n }\n \n /// Enum describing where an argument for a format can be located.\n@@ -154,9 +154,9 @@ pub enum PluralSelector {\n pub struct PluralArm<'a> {\n     /// A selector can either be specified by a keyword or with an integer\n     /// literal.\n-    selector: PluralSelector,\n+    pub selector: PluralSelector,\n     /// Array of pieces which are the format of this arm\n-    result: ~[Piece<'a>],\n+    pub result: ~[Piece<'a>],\n }\n \n /// Enum of the 5 CLDR plural keywords. There is one more, \"other\", but that\n@@ -182,9 +182,9 @@ pub enum PluralKeyword {\n #[deriving(Eq)]\n pub struct SelectArm<'a> {\n     /// String selector which guards this arm\n-    selector: &'a str,\n+    pub selector: &'a str,\n     /// Array of pieces which are the format of this arm\n-    result: ~[Piece<'a>],\n+    pub result: ~[Piece<'a>],\n }\n \n /// The parser structure for interpreting the input format string. This is\n@@ -194,11 +194,11 @@ pub struct SelectArm<'a> {\n /// This is a recursive-descent parser for the sake of simplicity, and if\n /// necessary there's probably lots of room for improvement performance-wise.\n pub struct Parser<'a> {\n-    priv input: &'a str,\n-    priv cur: str::CharOffsets<'a>,\n-    priv depth: uint,\n+    input: &'a str,\n+    cur: str::CharOffsets<'a>,\n+    depth: uint,\n     /// Error messages accumulated during parsing\n-    errors: ~[~str],\n+    pub errors: ~[~str],\n }\n \n impl<'a> Iterator<Piece<'a>> for Parser<'a> {"}, {"sha": "01c2c06c3fbadb1f2bc8bcf6c81ee86449b46a3b", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -28,17 +28,17 @@ pub enum Piece<'a> {\n }\n \n pub struct Argument<'a> {\n-    position: Position,\n-    format: FormatSpec,\n-    method: Option<&'a Method<'a>>\n+    pub position: Position,\n+    pub format: FormatSpec,\n+    pub method: Option<&'a Method<'a>>\n }\n \n pub struct FormatSpec {\n-    fill: char,\n-    align: parse::Alignment,\n-    flags: uint,\n-    precision: Count,\n-    width: Count,\n+    pub fill: char,\n+    pub align: parse::Alignment,\n+    pub flags: uint,\n+    pub precision: Count,\n+    pub width: Count,\n }\n \n pub enum Count {\n@@ -60,11 +60,11 @@ pub enum PluralSelector {\n }\n \n pub struct PluralArm<'a> {\n-    selector: PluralSelector,\n-    result: &'a [Piece<'a>],\n+    pub selector: PluralSelector,\n+    pub result: &'a [Piece<'a>],\n }\n \n pub struct SelectArm<'a> {\n-    selector: &'a str,\n-    result: &'a [Piece<'a>],\n+    pub selector: &'a str,\n+    pub result: &'a [Piece<'a>],\n }"}, {"sha": "bd383218ba134cc908a34c0aa8abea4435f118a0", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -29,14 +29,14 @@ use managed;\n                   task annihilation. For now, cycles need to be broken manually by using `Rc<T>` \\\n                   with a non-owning `Weak<T>` pointer. A tracing garbage collector is planned.\"]\n pub struct Gc<T> {\n-    priv ptr: @T,\n-    priv marker: marker::NoSend,\n+    ptr: @T,\n+    marker: marker::NoSend,\n }\n \n #[cfg(test)]\n pub struct Gc<T> {\n-    priv ptr: @T,\n-    priv marker: marker::NoSend,\n+    ptr: @T,\n+    marker: marker::NoSend,\n }\n \n impl<T: 'static> Gc<T> {"}, {"sha": "d780c30d8508f1061dfc7c534d8cbe2279879ad6", "filename": "src/libstd/hash/sip.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fsip.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -36,15 +36,15 @@ use super::{Hash, Hasher};\n \n /// `SipState` computes a SipHash 2-4 hash over a stream of bytes.\n pub struct SipState {\n-    priv k0: u64,\n-    priv k1: u64,\n-    priv length: uint, // how many bytes we've processed\n-    priv v0: u64,      // hash state\n-    priv v1: u64,\n-    priv v2: u64,\n-    priv v3: u64,\n-    priv tail: [u8, ..8], // unprocessed bytes\n-    priv ntail: uint,  // how many bytes in tail are valid\n+    k0: u64,\n+    k1: u64,\n+    length: uint, // how many bytes we've processed\n+    v0: u64,      // hash state\n+    v1: u64,\n+    v2: u64,\n+    v3: u64,\n+    tail: [u8, ..8], // unprocessed bytes\n+    ntail: uint,  // how many bytes in tail are valid\n }\n \n // sadly, these macro definitions can't appear later,\n@@ -231,8 +231,8 @@ impl Default for SipState {\n /// `SipHasher` computes the SipHash algorithm from a stream of bytes.\n #[deriving(Clone)]\n pub struct SipHasher {\n-    priv k0: u64,\n-    priv k1: u64,\n+    k0: u64,\n+    k1: u64,\n }\n \n impl SipHasher {"}, {"sha": "6fe6b3c3639222d24092dddbf9908ba8068e1b5a", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -53,19 +53,19 @@ pub type GlueFn = extern \"Rust\" fn(*i8);\n #[cfg(not(test))]\n pub struct TyDesc {\n     // sizeof(T)\n-    size: uint,\n+    pub size: uint,\n \n     // alignof(T)\n-    align: uint,\n+    pub align: uint,\n \n     // Called when a value of type `T` is no longer needed\n-    drop_glue: GlueFn,\n+    pub drop_glue: GlueFn,\n \n     // Called by reflection visitor to visit a value of type `T`\n-    visit_glue: GlueFn,\n+    pub visit_glue: GlueFn,\n \n     // Name corresponding to the type\n-    name: &'static str\n+    pub name: &'static str,\n }\n \n #[lang=\"opaque\"]\n@@ -454,7 +454,7 @@ extern \"rust-intrinsic\" {\n #[deriving(Eq, Hash, Show, TotalEq)]\n #[cfg(not(test))]\n pub struct TypeId {\n-    priv t: u64,\n+    t: u64,\n }\n \n #[cfg(not(test))]"}, {"sha": "4da297a25fd55cef5b616456d339005b010bb08d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -43,10 +43,10 @@ use vec::Vec;\n /// }\n /// ```\n pub struct BufferedReader<R> {\n-    priv inner: R,\n-    priv buf: Vec<u8>,\n-    priv pos: uint,\n-    priv cap: uint,\n+    inner: R,\n+    buf: Vec<u8>,\n+    pos: uint,\n+    cap: uint,\n }\n \n impl<R: Reader> BufferedReader<R> {\n@@ -135,9 +135,9 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// writer.flush();\n /// ```\n pub struct BufferedWriter<W> {\n-    priv inner: Option<W>,\n-    priv buf: Vec<u8>,\n-    priv pos: uint\n+    inner: Option<W>,\n+    buf: Vec<u8>,\n+    pos: uint\n }\n \n impl<W: Writer> BufferedWriter<W> {\n@@ -220,7 +220,7 @@ impl<W: Writer> Drop for BufferedWriter<W> {\n ///\n /// This writer will be flushed when it is dropped.\n pub struct LineBufferedWriter<W> {\n-    priv inner: BufferedWriter<W>,\n+    inner: BufferedWriter<W>,\n }\n \n impl<W: Writer> LineBufferedWriter<W> {\n@@ -303,7 +303,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// }\n /// ```\n pub struct BufferedStream<S> {\n-    priv inner: BufferedReader<InternalBufferedWriter<S>>\n+    inner: BufferedReader<InternalBufferedWriter<S>>\n }\n \n impl<S: Stream> BufferedStream<S> {\n@@ -391,7 +391,7 @@ mod test {\n \n     /// A dummy reader intended at testing short-reads propagation.\n     pub struct ShortReader {\n-        priv lengths: ~[uint],\n+        lengths: ~[uint],\n     }\n \n     impl Reader for ShortReader {"}, {"sha": "06e020721358bae3aa7e5526f94ff035e8caf548", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -36,10 +36,10 @@ use slice::{bytes, CloneableVector, MutableVector, ImmutableVector};\n /// }\n /// ```\n pub struct ChanReader {\n-    priv buf: Option<~[u8]>,  // A buffer of bytes received but not consumed.\n-    priv pos: uint,           // How many of the buffered bytes have already be consumed.\n-    priv rx: Receiver<~[u8]>,   // The rx to pull data from.\n-    priv closed: bool,        // Whether the pipe this rx connects to has been closed.\n+    buf: Option<~[u8]>,  // A buffer of bytes received but not consumed.\n+    pos: uint,           // How many of the buffered bytes have already be consumed.\n+    rx: Receiver<~[u8]>,   // The rx to pull data from.\n+    closed: bool,        // Whether the pipe this rx connects to has been closed.\n }\n \n impl ChanReader {\n@@ -98,7 +98,7 @@ impl Reader for ChanReader {\n /// writer.write(\"hello, world\".as_bytes());\n /// ```\n pub struct ChanWriter {\n-    priv tx: Sender<~[u8]>,\n+    tx: Sender<~[u8]>,\n }\n \n impl ChanWriter {"}, {"sha": "a9fe3be585ccdc09471b2609cc12973036653bdb", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -38,7 +38,7 @@ use ptr::RawPtr;\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Bytes<'r, T> {\n-    priv reader: &'r mut T,\n+    reader: &'r mut T,\n }\n \n impl<'r, R: Reader> Bytes<'r, R> {"}, {"sha": "b6efdfad9d3a8127cd11aaca13c2e7b6b0c49d56", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -78,9 +78,9 @@ use vec::Vec;\n /// configured at creation time, via the `FileAccess` parameter to\n /// `File::open_mode()`.\n pub struct File {\n-    priv fd: ~RtioFileStream:Send,\n-    priv path: Path,\n-    priv last_nread: int,\n+    fd: ~RtioFileStream:Send,\n+    path: Path,\n+    last_nread: int,\n }\n \n impl File {\n@@ -498,7 +498,7 @@ pub fn walk_dir(path: &Path) -> IoResult<Directories> {\n \n /// An iterator which walks over a directory\n pub struct Directories {\n-    priv stack: ~[Path],\n+    stack: ~[Path],\n }\n \n impl Iterator<Path> for Directories {"}, {"sha": "e9c6b5b01da90e40966dc6a020ed9c388841a9bf", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -52,8 +52,8 @@ fn combine(seek: SeekStyle, cur: uint, end: uint, offset: i64) -> IoResult<u64>\n /// assert_eq!(w.unwrap(), ~[0, 1, 2]);\n /// ```\n pub struct MemWriter {\n-    priv buf: ~[u8],\n-    priv pos: uint,\n+    buf: ~[u8],\n+    pos: uint,\n }\n \n impl MemWriter {\n@@ -132,8 +132,8 @@ impl Seek for MemWriter {\n /// assert_eq!(r.read_to_end().unwrap(), ~[0, 1, 2]);\n /// ```\n pub struct MemReader {\n-    priv buf: ~[u8],\n-    priv pos: uint\n+    buf: ~[u8],\n+    pos: uint\n }\n \n impl MemReader {\n@@ -219,8 +219,8 @@ impl Buffer for MemReader {\n /// assert!(buf == [0, 1, 2, 0]);\n /// ```\n pub struct BufWriter<'a> {\n-    priv buf: &'a mut [u8],\n-    priv pos: uint\n+    buf: &'a mut [u8],\n+    pos: uint\n }\n \n impl<'a> BufWriter<'a> {\n@@ -275,8 +275,8 @@ impl<'a> Seek for BufWriter<'a> {\n /// assert_eq!(r.read_to_end().unwrap(), ~[0, 1, 2, 3]);\n /// ```\n pub struct BufReader<'a> {\n-    priv buf: &'a [u8],\n-    priv pos: uint\n+    buf: &'a [u8],\n+    pos: uint\n }\n \n impl<'a> BufReader<'a> {"}, {"sha": "50f8b0b28c4c05ad1ae43c1ee0441e80c72a73e8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -283,11 +283,11 @@ pub type IoResult<T> = Result<T, IoError>;\n pub struct IoError {\n     /// An enumeration which can be matched against for determining the flavor\n     /// of error.\n-    kind: IoErrorKind,\n+    pub kind: IoErrorKind,\n     /// A human-readable description about the error\n-    desc: &'static str,\n+    pub desc: &'static str,\n     /// Detailed information about this error, not always available\n-    detail: Option<~str>\n+    pub detail: Option<~str>\n }\n \n impl fmt::Show for IoError {\n@@ -1023,7 +1023,7 @@ impl<T: Reader + Writer> Stream for T {}\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Lines<'r, T> {\n-    priv buffer: &'r mut T,\n+    buffer: &'r mut T,\n }\n \n impl<'r, T: Buffer> Iterator<IoResult<~str>> for Lines<'r, T> {\n@@ -1050,7 +1050,7 @@ impl<'r, T: Buffer> Iterator<IoResult<~str>> for Lines<'r, T> {\n /// Any error other than `EndOfFile` that is produced by the underlying Reader\n /// is returned by the iterator and should be handled by the caller.\n pub struct Chars<'r, T> {\n-    priv buffer: &'r mut T\n+    buffer: &'r mut T\n }\n \n impl<'r, T: Buffer> Iterator<IoResult<char>> for Chars<'r, T> {\n@@ -1290,7 +1290,7 @@ pub trait Acceptor<T> {\n /// connection attempt was successful.  A successful connection will be wrapped\n /// in `Ok`. A failed connection is represented as an `Err`.\n pub struct IncomingConnections<'a, A> {\n-    priv inc: &'a mut A,\n+    inc: &'a mut A,\n }\n \n impl<'a, T, A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n@@ -1389,27 +1389,27 @@ pub enum FileType {\n #[deriving(Hash)]\n pub struct FileStat {\n     /// The path that this stat structure is describing\n-    path: Path,\n+    pub path: Path,\n     /// The size of the file, in bytes\n-    size: u64,\n+    pub size: u64,\n     /// The kind of file this path points to (directory, file, pipe, etc.)\n-    kind: FileType,\n+    pub kind: FileType,\n     /// The file permissions currently on the file\n-    perm: FilePermission,\n+    pub perm: FilePermission,\n \n     // FIXME(#10301): These time fields are pretty useless without an actual\n     //                time representation, what are the milliseconds relative\n     //                to?\n \n     /// The time that the file was created at, in platform-dependent\n     /// milliseconds\n-    created: u64,\n+    pub created: u64,\n     /// The time that this file was last modified, in platform-dependent\n     /// milliseconds\n-    modified: u64,\n+    pub modified: u64,\n     /// The time that this file was last accessed, in platform-dependent\n     /// milliseconds\n-    accessed: u64,\n+    pub accessed: u64,\n \n     /// Information returned by stat() which is not guaranteed to be\n     /// platform-independent. This information may be useful on some platforms,\n@@ -1419,7 +1419,7 @@ pub struct FileStat {\n     /// Usage of this field is discouraged, but if access is desired then the\n     /// fields are located here.\n     #[unstable]\n-    unstable: UnstableFileStat,\n+    pub unstable: UnstableFileStat,\n }\n \n /// This structure represents all of the possible information which can be\n@@ -1430,25 +1430,25 @@ pub struct FileStat {\n #[deriving(Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n-    device: u64,\n+    pub device: u64,\n     /// The file serial number.\n-    inode: u64,\n+    pub inode: u64,\n     /// The device ID.\n-    rdev: u64,\n+    pub rdev: u64,\n     /// The number of hard links to this file.\n-    nlink: u64,\n+    pub nlink: u64,\n     /// The user ID of the file.\n-    uid: u64,\n+    pub uid: u64,\n     /// The group ID of the file.\n-    gid: u64,\n+    pub gid: u64,\n     /// The optimal block size for I/O.\n-    blksize: u64,\n+    pub blksize: u64,\n     /// The blocks allocated for this file.\n-    blocks: u64,\n+    pub blocks: u64,\n     /// User-defined flags for the file.\n-    flags: u64,\n+    pub flags: u64,\n     /// The file generation number.\n-    gen: u64,\n+    pub gen: u64,\n }\n \n /// A set of permissions for a file or directory is represented by a set of"}, {"sha": "4006665e886c6a3d671db65d70648e229dc180e1", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -57,18 +57,18 @@ pub enum Protocol {\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n pub struct Hint {\n-    family: uint,\n-    socktype: Option<SocketType>,\n-    protocol: Option<Protocol>,\n-    flags: uint,\n+    pub family: uint,\n+    pub socktype: Option<SocketType>,\n+    pub protocol: Option<Protocol>,\n+    pub flags: uint,\n }\n \n pub struct Info {\n-    address: SocketAddr,\n-    family: uint,\n-    socktype: Option<SocketType>,\n-    protocol: Option<Protocol>,\n-    flags: uint,\n+    pub address: SocketAddr,\n+    pub family: uint,\n+    pub socktype: Option<SocketType>,\n+    pub protocol: Option<Protocol>,\n+    pub flags: uint,\n }\n \n /// Easy name resolution. Given a hostname, returns the list of IP addresses for"}, {"sha": "10e1ffacd951b0ca47111ac20818730705280f66", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -58,8 +58,8 @@ impl fmt::Show for IpAddr {\n \n #[deriving(Eq, TotalEq, Clone, Hash)]\n pub struct SocketAddr {\n-    ip: IpAddr,\n-    port: Port,\n+    pub ip: IpAddr,\n+    pub port: Port,\n }\n \n impl fmt::Show for SocketAddr {"}, {"sha": "b4dcd204479a41c08e396ae4e86aa3774d7d9dd6", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -17,8 +17,6 @@\n //! A TCP connection implements the `Reader` and `Writer` traits, while the TCP\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n-#![deny(missing_doc)]\n-\n use clone::Clone;\n use io::IoResult;\n use io::net::ip::SocketAddr;\n@@ -46,7 +44,7 @@ use rt::rtio::{RtioTcpAcceptor, RtioTcpStream};\n /// drop(stream); // close the connection\n /// ```\n pub struct TcpStream {\n-    priv obj: ~RtioTcpStream:Send\n+    obj: ~RtioTcpStream:Send\n }\n \n impl TcpStream {\n@@ -128,7 +126,7 @@ impl Writer for TcpStream {\n /// # }\n /// ```\n pub struct TcpListener {\n-    priv obj: ~RtioTcpListener:Send\n+    obj: ~RtioTcpListener:Send\n }\n \n impl TcpListener {\n@@ -161,7 +159,7 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n /// a `TcpListener`'s `listen` method, and this object can be used to accept new\n /// `TcpStream` instances.\n pub struct TcpAcceptor {\n-    priv obj: ~RtioTcpAcceptor:Send\n+    obj: ~RtioTcpAcceptor:Send\n }\n \n impl Acceptor<TcpStream> for TcpAcceptor {"}, {"sha": "8dd59e859b877dddace4b86e7157df95f60c95f0", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -54,7 +54,7 @@ use rt::rtio::{RtioSocket, RtioUdpSocket, IoFactory, LocalIo};\n /// drop(socket); // close the socket\n /// ```\n pub struct UdpSocket {\n-    priv obj: ~RtioUdpSocket:Send\n+    obj: ~RtioUdpSocket:Send\n }\n \n impl UdpSocket {\n@@ -115,8 +115,8 @@ impl Clone for UdpSocket {\n /// A type that allows convenient usage of a UDP stream connected to one\n /// address via the `Reader` and `Writer` traits.\n pub struct UdpStream {\n-    priv socket: UdpSocket,\n-    priv connected_to: SocketAddr\n+    socket: UdpSocket,\n+    connected_to: SocketAddr\n }\n \n impl UdpStream {"}, {"sha": "0d64a7b141ec6c06fd521c0a405b363cef665fb5", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -36,7 +36,7 @@ use rt::rtio::{RtioUnixAcceptor, RtioPipe};\n \n /// A stream which communicates over a named pipe.\n pub struct UnixStream {\n-    priv obj: PipeStream,\n+    obj: PipeStream,\n }\n \n impl UnixStream {\n@@ -83,7 +83,7 @@ impl Writer for UnixStream {\n /// A value that can listen for incoming named pipe connection requests.\n pub struct UnixListener {\n     /// The internal, opaque runtime Unix listener.\n-    priv obj: ~RtioUnixListener:Send,\n+    obj: ~RtioUnixListener:Send,\n }\n \n impl UnixListener {\n@@ -125,7 +125,7 @@ impl Listener<UnixStream, UnixAcceptor> for UnixListener {\n /// A value that can accept named pipe connections, returned from `listen()`.\n pub struct UnixAcceptor {\n     /// The internal, opaque runtime Unix acceptor.\n-    priv obj: ~RtioUnixAcceptor:Send,\n+    obj: ~RtioUnixAcceptor:Send,\n }\n \n impl Acceptor<UnixStream> for UnixAcceptor {"}, {"sha": "75ec3d8614e8293ab150ba5c2fc2891afff7bffb", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,7 +23,7 @@ use rt::rtio::{RtioPipe, LocalIo};\n /// A synchronous, in-memory pipe.\n pub struct PipeStream {\n     /// The internal, opaque runtime pipe object.\n-    priv obj: ~RtioPipe:Send,\n+    obj: ~RtioPipe:Send,\n }\n \n impl PipeStream {"}, {"sha": "1f067021825dbcdb38db975a91162a29eedbd5ca", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,8 +10,6 @@\n \n //! Bindings for executing child processes\n \n-#![deny(missing_doc)]\n-\n use prelude::*;\n \n use fmt;\n@@ -53,23 +51,23 @@ use rt::rtio::{RtioProcess, IoFactory, LocalIo};\n /// assert!(child.wait().success());\n /// ```\n pub struct Process {\n-    priv handle: ~RtioProcess:Send,\n+    handle: ~RtioProcess:Send,\n \n     /// Handle to the child's stdin, if the `stdin` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stdin: Option<io::PipeStream>,\n+    pub stdin: Option<io::PipeStream>,\n \n     /// Handle to the child's stdout, if the `stdout` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stdout: Option<io::PipeStream>,\n+    pub stdout: Option<io::PipeStream>,\n \n     /// Handle to the child's stderr, if the `stderr` field of this process's\n     /// `ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.\n-    stderr: Option<io::PipeStream>,\n+    pub stderr: Option<io::PipeStream>,\n \n     /// Extra I/O handles as configured by the original `ProcessConfig` when\n     /// this process was created. This is by default empty.\n-    extra_io: ~[Option<io::PipeStream>],\n+    pub extra_io: ~[Option<io::PipeStream>],\n }\n \n /// This configuration describes how a new process should be spawned. A blank\n@@ -88,65 +86,65 @@ pub struct Process {\n /// ```\n pub struct ProcessConfig<'a> {\n     /// Path to the program to run\n-    program: &'a str,\n+    pub program: &'a str,\n \n     /// Arguments to pass to the program (doesn't include the program itself)\n-    args: &'a [~str],\n+    pub args: &'a [~str],\n \n     /// Optional environment to specify for the program. If this is None, then\n     /// it will inherit the current process's environment.\n-    env: Option<&'a [(~str, ~str)]>,\n+    pub env: Option<&'a [(~str, ~str)]>,\n \n     /// Optional working directory for the new process. If this is None, then\n     /// the current directory of the running process is inherited.\n-    cwd: Option<&'a Path>,\n+    pub cwd: Option<&'a Path>,\n \n     /// Configuration for the child process's stdin handle (file descriptor 0).\n     /// This field defaults to `CreatePipe(true, false)` so the input can be\n     /// written to.\n-    stdin: StdioContainer,\n+    pub stdin: StdioContainer,\n \n     /// Configuration for the child process's stdout handle (file descriptor 1).\n     /// This field defaults to `CreatePipe(false, true)` so the output can be\n     /// collected.\n-    stdout: StdioContainer,\n+    pub stdout: StdioContainer,\n \n     /// Configuration for the child process's stdout handle (file descriptor 2).\n     /// This field defaults to `CreatePipe(false, true)` so the output can be\n     /// collected.\n-    stderr: StdioContainer,\n+    pub stderr: StdioContainer,\n \n     /// Any number of streams/file descriptors/pipes may be attached to this\n     /// process. This list enumerates the file descriptors and such for the\n     /// process to be spawned, and the file descriptors inherited will start at\n     /// 3 and go to the length of this array. The first three file descriptors\n     /// (stdin/stdout/stderr) are configured with the `stdin`, `stdout`, and\n     /// `stderr` fields.\n-    extra_io: &'a [StdioContainer],\n+    pub extra_io: &'a [StdioContainer],\n \n     /// Sets the child process's user id. This translates to a `setuid` call in\n     /// the child process. Setting this value on windows will cause the spawn to\n     /// fail. Failure in the `setuid` call on unix will also cause the spawn to\n     /// fail.\n-    uid: Option<uint>,\n+    pub uid: Option<uint>,\n \n     /// Similar to `uid`, but sets the group id of the child process. This has\n     /// the same semantics as the `uid` field.\n-    gid: Option<uint>,\n+    pub gid: Option<uint>,\n \n     /// If true, the child process is spawned in a detached state. On unix, this\n     /// means that the child is the leader of a new process group.\n-    detach: bool,\n+    pub detach: bool,\n }\n \n /// The output of a finished process.\n pub struct ProcessOutput {\n     /// The status (exit code) of the process.\n-    status: ProcessExit,\n+    pub status: ProcessExit,\n     /// The data that the process wrote to stdout.\n-    output: ~[u8],\n+    pub output: ~[u8],\n     /// The data that the process wrote to stderr.\n-    error: ~[u8],\n+    pub error: ~[u8],\n }\n \n /// Describes what to do with a standard io stream for a child process."}, {"sha": "494cc6f6b02d4c9c7565d07567b0b4067bd775cb", "filename": "src/libstd/io/signal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fsignal.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -81,15 +81,15 @@ pub enum Signum {\n /// ```\n pub struct Listener {\n     /// A map from signums to handles to keep the handles in memory\n-    priv handles: ~[(Signum, ~RtioSignal)],\n+    handles: ~[(Signum, ~RtioSignal)],\n     /// This is where all the handles send signums, which are received by\n     /// the clients from the receiver.\n-    priv tx: Sender<Signum>,\n+    tx: Sender<Signum>,\n \n     /// Clients of Listener can `recv()` on this receiver. This is exposed to\n     /// allow selection over it as well as manipulation of the receiver\n     /// directly.\n-    rx: Receiver<Signum>,\n+    pub rx: Receiver<Signum>,\n }\n \n impl Listener {"}, {"sha": "ae98333ca9614b2aa85f158977585000f045a09d", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -293,7 +293,7 @@ pub fn println_args(fmt: &fmt::Arguments) {\n \n /// Representation of a reader of a standard input stream\n pub struct StdReader {\n-    priv inner: StdSource\n+    inner: StdSource\n }\n \n impl Reader for StdReader {\n@@ -322,7 +322,7 @@ impl Reader for StdReader {\n \n /// Representation of a writer to a standard output stream\n pub struct StdWriter {\n-    priv inner: StdSource\n+    inner: StdSource\n }\n \n impl StdWriter {"}, {"sha": "4ff1c7faaece2821d8c38ee4c7f2145dfb7ad236", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -24,7 +24,7 @@ use sync::atomics;\n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n pub struct TempDir {\n-    priv path: Option<Path>\n+    path: Option<Path>\n }\n \n impl TempDir {"}, {"sha": "839fcab8f86a4308c66d2d6f0f291b54cb1ff91f", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -63,7 +63,7 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer};\n /// # }\n /// ```\n pub struct Timer {\n-    priv obj: ~RtioTimer:Send,\n+    obj: ~RtioTimer:Send,\n }\n \n /// Sleep the current task for `msecs` milliseconds."}, {"sha": "a294ba17289ca498c377783f7eb2a8e1fde1bd15", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -17,8 +17,8 @@ use slice::bytes::MutableByteVector;\n \n /// Wraps a `Reader`, limiting the number of bytes that can be read from it.\n pub struct LimitReader<R> {\n-    priv limit: uint,\n-    priv inner: R\n+    limit: uint,\n+    inner: R\n }\n \n impl<R: Reader> LimitReader<R> {\n@@ -85,7 +85,7 @@ impl Reader for NullReader {\n \n /// A `Writer` which multiplexes writes to a set of `Writers`.\n pub struct MultiWriter {\n-    priv writers: ~[~Writer]\n+    writers: ~[~Writer]\n }\n \n impl MultiWriter {\n@@ -118,8 +118,8 @@ impl Writer for MultiWriter {\n /// A `Reader` which chains input from multiple `Readers`, reading each to\n /// completion before moving onto the next.\n pub struct ChainedReader<I, R> {\n-    priv readers: I,\n-    priv cur_reader: Option<R>,\n+    readers: I,\n+    cur_reader: Option<R>,\n }\n \n impl<R: Reader, I: Iterator<R>> ChainedReader<I, R> {\n@@ -156,8 +156,8 @@ impl<R: Reader, I: Iterator<R>> Reader for ChainedReader<I, R> {\n /// A `Reader` which forwards input from another `Reader`, passing it along to\n /// a `Writer` as well. Similar to the `tee(1)` command.\n pub struct TeeReader<R, W> {\n-    priv reader: R,\n-    priv writer: W\n+    reader: R,\n+    writer: W,\n }\n \n impl<R: Reader, W: Writer> TeeReader<R, W> {"}, {"sha": "d7424fc9f61a1eaad347b7a9b9c702d1659cd121", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -751,7 +751,7 @@ impl<A, B, T: ExactSize<A>, U: ExactSize<B>> ExactSize<(A, B)> for Zip<T, U> {}\n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n pub struct Rev<T> {\n-    priv iter: T\n+    iter: T\n }\n \n impl<A, T: DoubleEndedIterator<A>> Iterator<A> for Rev<T> {\n@@ -778,7 +778,7 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n \n /// A mutable reference to an iterator\n pub struct ByRef<'a, T> {\n-    priv iter: &'a mut T\n+    iter: &'a mut T\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for ByRef<'a, T> {\n@@ -1036,8 +1036,8 @@ impl<A, T: Clone + Iterator<A>> CloneableIterator for T {\n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n pub struct Cycle<T> {\n-    priv orig: T,\n-    priv iter: T,\n+    orig: T,\n+    iter: T,\n }\n \n impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n@@ -1087,9 +1087,9 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n /// An iterator which strings two iterators together\n #[deriving(Clone)]\n pub struct Chain<T, U> {\n-    priv a: T,\n-    priv b: U,\n-    priv flag: bool\n+    a: T,\n+    b: U,\n+    flag: bool\n }\n \n impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n@@ -1156,8 +1156,8 @@ for Chain<T, U> {\n /// An iterator which iterates two other iterators simultaneously\n #[deriving(Clone)]\n pub struct Zip<T, U> {\n-    priv a: T,\n-    priv b: U\n+    a: T,\n+    b: U\n }\n \n impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n@@ -1234,8 +1234,8 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n \n /// An iterator which maps the values of `iter` with `f`\n pub struct Map<'a, A, B, T> {\n-    priv iter: T,\n-    priv f: 'a |A| -> B\n+    iter: T,\n+    f: 'a |A| -> B\n }\n \n impl<'a, A, B, T> Map<'a, A, B, T> {\n@@ -1283,8 +1283,8 @@ impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A\n \n /// An iterator which filters the elements of `iter` with `predicate`\n pub struct Filter<'a, A, T> {\n-    priv iter: T,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n@@ -1327,8 +1327,8 @@ impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A,\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n pub struct FilterMap<'a, A, B, T> {\n-    priv iter: T,\n-    priv f: 'a |A| -> Option<B>\n+    iter: T,\n+    f: 'a |A| -> Option<B>\n }\n \n impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n@@ -1371,8 +1371,8 @@ for FilterMap<'a, A, B, T> {\n /// An iterator which yields the current count and the element during iteration\n #[deriving(Clone)]\n pub struct Enumerate<T> {\n-    priv iter: T,\n-    priv count: uint\n+    iter: T,\n+    count: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n@@ -1425,8 +1425,8 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n \n /// An iterator with a `peek()` that returns an optional reference to the next element.\n pub struct Peekable<A, T> {\n-    priv iter: T,\n-    priv peeked: Option<A>,\n+    iter: T,\n+    peeked: Option<A>,\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n@@ -1475,9 +1475,9 @@ impl<'a, A, T: Iterator<A>> Peekable<A, T> {\n \n /// An iterator which rejects elements while `predicate` is true\n pub struct SkipWhile<'a, A, T> {\n-    priv iter: T,\n-    priv flag: bool,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    flag: bool,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n@@ -1513,9 +1513,9 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n \n /// An iterator which only accepts elements while `predicate` is true\n pub struct TakeWhile<'a, A, T> {\n-    priv iter: T,\n-    priv flag: bool,\n-    priv predicate: 'a |&A| -> bool\n+    iter: T,\n+    flag: bool,\n+    predicate: 'a |&A| -> bool\n }\n \n impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n@@ -1548,8 +1548,8 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n /// An iterator which skips over `n` elements of `iter`.\n #[deriving(Clone)]\n pub struct Skip<T> {\n-    priv iter: T,\n-    priv n: uint\n+    iter: T,\n+    n: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n@@ -1612,8 +1612,8 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n /// An iterator which only iterates over the first `n` iterations of `iter`.\n #[deriving(Clone)]\n pub struct Take<T> {\n-    priv iter: T,\n-    priv n: uint\n+    iter: T,\n+    n: uint\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Take<T> {\n@@ -1661,11 +1661,11 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n \n /// An iterator to maintain state while iterating another iterator\n pub struct Scan<'a, A, B, T, St> {\n-    priv iter: T,\n-    priv f: 'a |&mut St, A| -> Option<B>,\n+    iter: T,\n+    f: 'a |&mut St, A| -> Option<B>,\n \n     /// The current internal state to be passed to the closure next.\n-    state: St\n+    pub state: St,\n }\n \n impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n@@ -1685,10 +1685,10 @@ impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n /// and yields the elements of the produced iterators\n ///\n pub struct FlatMap<'a, A, T, U> {\n-    priv iter: T,\n-    priv f: 'a |A| -> U,\n-    priv frontiter: Option<U>,\n-    priv backiter: Option<U>,\n+    iter: T,\n+    f: 'a |A| -> U,\n+    frontiter: Option<U>,\n+    backiter: Option<U>,\n }\n \n impl<'a, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'a, A, T, U> {\n@@ -1744,8 +1744,8 @@ impl<'a,\n /// yields `None` once.\n #[deriving(Clone)]\n pub struct Fuse<T> {\n-    priv iter: T,\n-    priv done: bool\n+    iter: T,\n+    done: bool\n }\n \n impl<A, T: Iterator<A>> Iterator<A> for Fuse<T> {\n@@ -1816,8 +1816,8 @@ impl<T> Fuse<T> {\n /// An iterator that calls a function with a reference to each\n /// element before yielding it.\n pub struct Inspect<'a, A, T> {\n-    priv iter: T,\n-    priv f: 'a |&A|\n+    iter: T,\n+    f: 'a |&A|\n }\n \n impl<'a, A, T> Inspect<'a, A, T> {\n@@ -1869,9 +1869,9 @@ for Inspect<'a, A, T> {\n \n /// An iterator which just modifies the contained state throughout iteration.\n pub struct Unfold<'a, A, St> {\n-    priv f: 'a |&mut St| -> Option<A>,\n+    f: 'a |&mut St| -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n-    state: St\n+    pub state: St,\n }\n \n impl<'a, A, St> Unfold<'a, A, St> {\n@@ -1905,9 +1905,9 @@ impl<'a, A, St> Iterator<A> for Unfold<'a, A, St> {\n #[deriving(Clone)]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n-    priv state: A,\n+    state: A,\n     /// The amount that this iterator is stepping by\n-    priv step: A\n+    step: A,\n }\n \n /// Creates a new counter with the specified start/step\n@@ -1933,9 +1933,9 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n /// An iterator over the range [start, stop)\n #[deriving(Clone)]\n pub struct Range<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv one: A\n+    state: A,\n+    stop: A,\n+    one: A\n }\n \n /// Return an iterator over the range [start, stop)\n@@ -2007,8 +2007,8 @@ impl<A: Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A> for Range<A> {\n /// An iterator over the range [start, stop]\n #[deriving(Clone)]\n pub struct RangeInclusive<A> {\n-    priv range: Range<A>,\n-    priv done: bool\n+    range: Range<A>,\n+    done: bool,\n }\n \n /// Return an iterator over the range [start, stop]\n@@ -2070,10 +2070,10 @@ impl<A: Sub<A, A> + Int + Ord + Clone + ToPrimitive> DoubleEndedIterator<A>\n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n pub struct RangeStep<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv step: A,\n-    priv rev: bool\n+    state: A,\n+    stop: A,\n+    step: A,\n+    rev: bool,\n }\n \n /// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n@@ -2102,11 +2102,11 @@ impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n pub struct RangeStepInclusive<A> {\n-    priv state: A,\n-    priv stop: A,\n-    priv step: A,\n-    priv rev: bool,\n-    priv done: bool\n+    state: A,\n+    stop: A,\n+    step: A,\n+    rev: bool,\n+    done: bool,\n }\n \n /// Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n@@ -2137,7 +2137,7 @@ impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n /// An iterator that repeats an element endlessly\n #[deriving(Clone)]\n pub struct Repeat<A> {\n-    priv element: A\n+    element: A\n }\n \n impl<A: Clone> Repeat<A> {"}, {"sha": "f9827d7fa59a73415b6ee4b270e70e79aedff396", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -193,7 +193,7 @@ pub mod marker {\n     /// \"interior\" mutability:\n     ///\n     /// ```\n-    /// pub struct Cell<T> { priv value: T }\n+    /// pub struct Cell<T> { value: T }\n     /// # fn main() {}\n     /// ```\n     ///"}, {"sha": "ab75031e914f7537ebeca16f58240a38d7d31d17", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -57,7 +57,9 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![deny(missing_doc)]\n+// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n+#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "52e01f4dbfda9422e1774912b53f650a8fc21633", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 439, "deletions": 439, "changes": 878, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -244,25 +244,25 @@ pub mod types {\n                 pub type pthread_t = c_ulong;\n \n                 pub struct glob_t {\n-                    gl_pathc: size_t,\n-                    gl_pathv: **c_char,\n-                    gl_offs:  size_t,\n-\n-                    __unused1: *c_void,\n-                    __unused2: *c_void,\n-                    __unused3: *c_void,\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n+                    pub gl_pathc: size_t,\n+                    pub gl_pathv: **c_char,\n+                    pub gl_offs:  size_t,\n+\n+                    pub __unused1: *c_void,\n+                    pub __unused2: *c_void,\n+                    pub __unused3: *c_void,\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -277,54 +277,54 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_family: sa_family_t,\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_addr: *sockaddr,\n-                    ai_canonname: *c_char,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..108]\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..108]\n                 }\n             }\n         }\n@@ -395,35 +395,35 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    __pad1: c_short,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    __pad2: c_short,\n-                    st_size: off_t,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    __unused4: c_long,\n-                    __unused5: c_long,\n+                    pub st_dev: dev_t,\n+                    pub __pad1: c_short,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub __pad2: c_short,\n+                    pub st_size: off_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub __unused4: c_long,\n+                    pub __unused5: c_long,\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             #[cfg(target_arch = \"arm\")]\n@@ -437,34 +437,34 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 pub struct stat {\n-                    st_dev: c_ulonglong,\n-                    __pad0: [c_uchar, ..4],\n-                    __st_ino: ino_t,\n-                    st_mode: c_uint,\n-                    st_nlink: c_uint,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: c_ulonglong,\n-                    __pad3: [c_uchar, ..4],\n-                    st_size: c_longlong,\n-                    st_blksize: blksize_t,\n-                    st_blocks: c_ulonglong,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_ulong,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_ulong,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_ulong,\n-                    st_ino: c_ulonglong\n+                    pub st_dev: c_ulonglong,\n+                    pub __pad0: [c_uchar, ..4],\n+                    pub __st_ino: ino_t,\n+                    pub st_mode: c_uint,\n+                    pub st_nlink: c_uint,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: c_ulonglong,\n+                    pub __pad3: [c_uchar, ..4],\n+                    pub st_size: c_longlong,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: c_ulonglong,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_ulong,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_ulong,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_ulong,\n+                    pub st_ino: c_ulonglong,\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             #[cfg(target_arch = \"mips\")]\n@@ -479,35 +479,35 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: c_ulong,\n-                    st_pad1: [c_long, ..3],\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: c_ulong,\n-                    st_pad2: [c_long, ..2],\n-                    st_size: off_t,\n-                    st_pad3: c_long,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_pad5: [c_long, ..14],\n+                    pub st_dev: c_ulong,\n+                    pub st_pad1: [c_long, ..3],\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: c_ulong,\n+                    pub st_pad2: [c_long, ..2],\n+                    pub st_size: off_t,\n+                    pub st_pad3: c_long,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_pad5: [c_long, ..14],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u32, ..9]\n+                    pub __size: [u32, ..9]\n                 }\n             }\n             pub mod posix08 {}\n@@ -563,33 +563,33 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_nlink: nlink_t,\n-                    st_mode: mode_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    __pad0: c_int,\n-                    st_rdev: dev_t,\n-                    st_size: off_t,\n-                    st_blksize: blksize_t,\n-                    st_blocks: blkcnt_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    __unused: [c_long, ..3],\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_mode: mode_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub __pad0: c_int,\n+                    pub st_rdev: dev_t,\n+                    pub st_size: off_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub __unused: [c_long, ..3],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __size: [u64, ..7]\n+                    pub __size: [u64, ..7]\n                 }\n             }\n             pub mod posix08 {\n@@ -613,29 +613,29 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 pub struct glob_t {\n-                    gl_pathc:  size_t,\n-                    __unused1: size_t,\n-                    gl_offs:   size_t,\n-                    __unused2: c_int,\n-                    gl_pathv:  **c_char,\n-\n-                    __unused3: *c_void,\n-\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n-                    __unused6: *c_void,\n-                    __unused7: *c_void,\n-                    __unused8: *c_void,\n+                    pub gl_pathc:  size_t,\n+                    pub __unused1: size_t,\n+                    pub gl_offs:   size_t,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  **c_char,\n+\n+                    pub __unused3: *c_void,\n+\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n+                    pub __unused6: *c_void,\n+                    pub __unused7: *c_void,\n+                    pub __unused8: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -650,60 +650,60 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_len: u8,\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_len: u8,\n-                    ss_family: sa_family_t,\n-                    __ss_pad1: [u8, ..6],\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_len: u8,\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_len: u8,\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_len: u8,\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..104]\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..104]\n                 }\n             }\n         }\n@@ -759,33 +759,33 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: fflags_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    __unused: [uint8_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: fflags_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub __unused: [uint8_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub type pthread_attr_t = *c_void;\n@@ -809,36 +809,36 @@ pub mod types {\n                 use libc::types::os::arch::posix88::{dev_t, ino_t};\n                 use libc::types::os::arch::posix88::mode_t;\n \n-                // Note: this is the struct called stat64 in win32. Not stat,\n+                // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_ino: ino_t,\n-                    st_mode: mode_t,\n-                    st_nlink: c_short,\n-                    st_uid: c_short,\n-                    st_gid: c_short,\n-                    st_rdev: dev_t,\n-                    st_size: int64,\n-                    st_atime: time64_t,\n-                    st_mtime: time64_t,\n-                    st_ctime: time64_t,\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: c_short,\n+                    pub st_uid: c_short,\n+                    pub st_gid: c_short,\n+                    pub st_rdev: dev_t,\n+                    pub st_size: int64,\n+                    pub st_atime: time64_t,\n+                    pub st_mtime: time64_t,\n+                    pub st_ctime: time64_t,\n                 }\n \n                 // note that this is called utimbuf64 in win32\n                 pub struct utimbuf {\n-                    actime: time64_t,\n-                    modtime: time64_t,\n+                    pub actime: time64_t,\n+                    pub modtime: time64_t,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -853,54 +853,54 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_family: sa_family_t,\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: size_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: size_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..108]\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..108]\n                 }\n             }\n         }\n@@ -1038,47 +1038,47 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 pub struct STARTUPINFO {\n-                    cb: DWORD,\n-                    lpReserved: LPWSTR,\n-                    lpDesktop: LPWSTR,\n-                    lpTitle: LPWSTR,\n-                    dwX: DWORD,\n-                    dwY: DWORD,\n-                    dwXSize: DWORD,\n-                    dwYSize: DWORD,\n-                    dwXCountChars: DWORD,\n-                    dwYCountCharts: DWORD,\n-                    dwFillAttribute: DWORD,\n-                    dwFlags: DWORD,\n-                    wShowWindow: WORD,\n-                    cbReserved2: WORD,\n-                    lpReserved2: LPBYTE,\n-                    hStdInput: HANDLE,\n-                    hStdOutput: HANDLE,\n-                    hStdError: HANDLE\n+                    pub cb: DWORD,\n+                    pub lpReserved: LPWSTR,\n+                    pub lpDesktop: LPWSTR,\n+                    pub lpTitle: LPWSTR,\n+                    pub dwX: DWORD,\n+                    pub dwY: DWORD,\n+                    pub dwXSize: DWORD,\n+                    pub dwYSize: DWORD,\n+                    pub dwXCountChars: DWORD,\n+                    pub dwYCountCharts: DWORD,\n+                    pub dwFillAttribute: DWORD,\n+                    pub dwFlags: DWORD,\n+                    pub wShowWindow: WORD,\n+                    pub cbReserved2: WORD,\n+                    pub lpReserved2: LPBYTE,\n+                    pub hStdInput: HANDLE,\n+                    pub hStdOutput: HANDLE,\n+                    pub hStdError: HANDLE,\n                 }\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 pub struct PROCESS_INFORMATION {\n-                    hProcess: HANDLE,\n-                    hThread: HANDLE,\n-                    dwProcessId: DWORD,\n-                    dwThreadId: DWORD\n+                    pub hProcess: HANDLE,\n+                    pub hThread: HANDLE,\n+                    pub dwProcessId: DWORD,\n+                    pub dwThreadId: DWORD,\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 pub struct SYSTEM_INFO {\n-                    wProcessorArchitecture: WORD,\n-                    wReserved: WORD,\n-                    dwPageSize: DWORD,\n-                    lpMinimumApplicationAddress: LPVOID,\n-                    lpMaximumApplicationAddress: LPVOID,\n-                    dwActiveProcessorMask: DWORD,\n-                    dwNumberOfProcessors: DWORD,\n-                    dwProcessorType: DWORD,\n-                    dwAllocationGranularity: DWORD,\n-                    wProcessorLevel: WORD,\n-                    wProcessorRevision: WORD\n+                    pub wProcessorArchitecture: WORD,\n+                    pub wReserved: WORD,\n+                    pub dwPageSize: DWORD,\n+                    pub lpMinimumApplicationAddress: LPVOID,\n+                    pub lpMaximumApplicationAddress: LPVOID,\n+                    pub dwActiveProcessorMask: DWORD,\n+                    pub dwNumberOfProcessors: DWORD,\n+                    pub dwProcessorType: DWORD,\n+                    pub dwAllocationGranularity: DWORD,\n+                    pub wProcessorLevel: WORD,\n+                    pub wProcessorRevision: WORD,\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n@@ -1101,68 +1101,68 @@ pub mod types {\n                 }\n \n                 pub struct MEMORY_BASIC_INFORMATION {\n-                    BaseAddress: LPVOID,\n-                    AllocationBase: LPVOID,\n-                    AllocationProtect: DWORD,\n-                    RegionSize: SIZE_T,\n-                    State: DWORD,\n-                    Protect: DWORD,\n-                    Type: DWORD\n+                    pub BaseAddress: LPVOID,\n+                    pub AllocationBase: LPVOID,\n+                    pub AllocationProtect: DWORD,\n+                    pub RegionSize: SIZE_T,\n+                    pub State: DWORD,\n+                    pub Protect: DWORD,\n+                    pub Type: DWORD,\n                 }\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 pub struct OVERLAPPED {\n-                    Internal: *c_ulong,\n-                    InternalHigh: *c_ulong,\n-                    Offset: DWORD,\n-                    OffsetHigh: DWORD,\n-                    hEvent: HANDLE,\n+                    pub Internal: *c_ulong,\n+                    pub InternalHigh: *c_ulong,\n+                    pub Offset: DWORD,\n+                    pub OffsetHigh: DWORD,\n+                    pub hEvent: HANDLE,\n                 }\n \n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 pub struct FILETIME {\n-                    dwLowDateTime: DWORD,\n-                    dwHighDateTime: DWORD,\n+                    pub dwLowDateTime: DWORD,\n+                    pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 pub struct GUID {\n-                    Data1: DWORD,\n-                    Data2: DWORD,\n-                    Data3: DWORD,\n-                    Data4: [BYTE, ..8],\n+                    pub Data1: DWORD,\n+                    pub Data2: DWORD,\n+                    pub Data3: DWORD,\n+                    pub Data4: [BYTE, ..8],\n                 }\n \n                 pub struct WSAPROTOCOLCHAIN {\n-                    ChainLen: c_int,\n-                    ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN],\n+                    pub ChainLen: c_int,\n+                    pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 pub struct WSAPROTOCOL_INFO {\n-                    dwServiceFlags1: DWORD,\n-                    dwServiceFlags2: DWORD,\n-                    dwServiceFlags3: DWORD,\n-                    dwServiceFlags4: DWORD,\n-                    dwProviderFlags: DWORD,\n-                    ProviderId: GUID,\n-                    dwCatalogEntryId: DWORD,\n-                    ProtocolChain: WSAPROTOCOLCHAIN,\n-                    iVersion: c_int,\n-                    iAddressFamily: c_int,\n-                    iMaxSockAddr: c_int,\n-                    iMinSockAddr: c_int,\n-                    iSocketType: c_int,\n-                    iProtocol: c_int,\n-                    iProtocolMaxOffset: c_int,\n-                    iNetworkByteOrder: c_int,\n-                    iSecurityScheme: c_int,\n-                    dwMessageSize: DWORD,\n-                    dwProviderReserved: DWORD,\n-                    szProtocol: [u8, ..WSAPROTOCOL_LEN+1],\n+                    pub dwServiceFlags1: DWORD,\n+                    pub dwServiceFlags2: DWORD,\n+                    pub dwServiceFlags3: DWORD,\n+                    pub dwServiceFlags4: DWORD,\n+                    pub dwProviderFlags: DWORD,\n+                    pub ProviderId: GUID,\n+                    pub dwCatalogEntryId: DWORD,\n+                    pub ProtocolChain: WSAPROTOCOLCHAIN,\n+                    pub iVersion: c_int,\n+                    pub iAddressFamily: c_int,\n+                    pub iMaxSockAddr: c_int,\n+                    pub iMinSockAddr: c_int,\n+                    pub iSocketType: c_int,\n+                    pub iProtocol: c_int,\n+                    pub iProtocolMaxOffset: c_int,\n+                    pub iNetworkByteOrder: c_int,\n+                    pub iSecurityScheme: c_int,\n+                    pub dwMessageSize: DWORD,\n+                    pub dwProviderReserved: DWORD,\n+                    pub szProtocol: [u8, ..WSAPROTOCOL_LEN+1],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n@@ -1184,29 +1184,29 @@ pub mod types {\n                 pub type pthread_t = uintptr_t;\n \n                 pub struct glob_t {\n-                    gl_pathc:  size_t,\n-                    __unused1: c_int,\n-                    gl_offs:   size_t,\n-                    __unused2: c_int,\n-                    gl_pathv:  **c_char,\n-\n-                    __unused3: *c_void,\n-\n-                    __unused4: *c_void,\n-                    __unused5: *c_void,\n-                    __unused6: *c_void,\n-                    __unused7: *c_void,\n-                    __unused8: *c_void,\n+                    pub gl_pathc:  size_t,\n+                    pub __unused1: c_int,\n+                    pub gl_offs:   size_t,\n+                    pub __unused2: c_int,\n+                    pub gl_pathv:  **c_char,\n+\n+                    pub __unused3: *c_void,\n+\n+                    pub __unused4: *c_void,\n+                    pub __unused5: *c_void,\n+                    pub __unused6: *c_void,\n+                    pub __unused7: *c_void,\n+                    pub __unused8: *c_void,\n                 }\n \n                 pub struct timeval {\n-                    tv_sec: time_t,\n-                    tv_usec: suseconds_t,\n+                    pub tv_sec: time_t,\n+                    pub tv_usec: suseconds_t,\n                 }\n \n                 pub struct timespec {\n-                    tv_sec: time_t,\n-                    tv_nsec: c_long,\n+                    pub tv_sec: time_t,\n+                    pub tv_nsec: c_long,\n                 }\n \n                 pub enum timezone {}\n@@ -1222,60 +1222,60 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 pub struct sockaddr {\n-                    sa_len: u8,\n-                    sa_family: sa_family_t,\n-                    sa_data: [u8, ..14],\n+                    pub sa_len: u8,\n+                    pub sa_family: sa_family_t,\n+                    pub sa_data: [u8, ..14],\n                 }\n                 pub struct sockaddr_storage {\n-                    ss_len: u8,\n-                    ss_family: sa_family_t,\n-                    __ss_pad1: [u8, ..6],\n-                    __ss_align: i64,\n-                    __ss_pad2: [u8, ..112],\n+                    pub ss_len: u8,\n+                    pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_align: i64,\n+                    pub __ss_pad2: [u8, ..112],\n                 }\n                 pub struct sockaddr_in {\n-                    sin_len: u8,\n-                    sin_family: sa_family_t,\n-                    sin_port: in_port_t,\n-                    sin_addr: in_addr,\n-                    sin_zero: [u8, ..8],\n+                    pub sin_len: u8,\n+                    pub sin_family: sa_family_t,\n+                    pub sin_port: in_port_t,\n+                    pub sin_addr: in_addr,\n+                    pub sin_zero: [u8, ..8],\n                 }\n                 pub struct in_addr {\n-                    s_addr: in_addr_t,\n+                    pub s_addr: in_addr_t,\n                 }\n                 pub struct sockaddr_in6 {\n-                    sin6_len: u8,\n-                    sin6_family: sa_family_t,\n-                    sin6_port: in_port_t,\n-                    sin6_flowinfo: u32,\n-                    sin6_addr: in6_addr,\n-                    sin6_scope_id: u32,\n+                    pub sin6_len: u8,\n+                    pub sin6_family: sa_family_t,\n+                    pub sin6_port: in_port_t,\n+                    pub sin6_flowinfo: u32,\n+                    pub sin6_addr: in6_addr,\n+                    pub sin6_scope_id: u32,\n                 }\n                 pub struct in6_addr {\n-                    s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16, ..8]\n                 }\n                 pub struct ip_mreq {\n-                    imr_multiaddr: in_addr,\n-                    imr_interface: in_addr,\n+                    pub imr_multiaddr: in_addr,\n+                    pub imr_interface: in_addr,\n                 }\n                 pub struct ip6_mreq {\n-                    ipv6mr_multiaddr: in6_addr,\n-                    ipv6mr_interface: c_uint,\n+                    pub ipv6mr_multiaddr: in6_addr,\n+                    pub ipv6mr_interface: c_uint,\n                 }\n                 pub struct addrinfo {\n-                    ai_flags: c_int,\n-                    ai_family: c_int,\n-                    ai_socktype: c_int,\n-                    ai_protocol: c_int,\n-                    ai_addrlen: socklen_t,\n-                    ai_canonname: *c_char,\n-                    ai_addr: *sockaddr,\n-                    ai_next: *addrinfo\n+                    pub ai_flags: c_int,\n+                    pub ai_family: c_int,\n+                    pub ai_socktype: c_int,\n+                    pub ai_protocol: c_int,\n+                    pub ai_addrlen: socklen_t,\n+                    pub ai_canonname: *c_char,\n+                    pub ai_addr: *sockaddr,\n+                    pub ai_next: *addrinfo,\n                 }\n                 pub struct sockaddr_un {\n-                    sun_len: u8,\n-                    sun_family: sa_family_t,\n-                    sun_path: [c_char, ..104]\n+                    pub sun_len: u8,\n+                    pub sun_family: sa_family_t,\n+                    pub sun_path: [c_char, ..104]\n                 }\n             }\n         }\n@@ -1330,38 +1330,38 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_ino: ino_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: uint32_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_qspare: [int64_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __sig: c_long,\n-                    __opaque: [c_char, ..36]\n+                    pub __sig: c_long,\n+                    pub __opaque: [c_char, ..36]\n                 }\n             }\n             pub mod posix08 {\n@@ -1370,8 +1370,8 @@ pub mod types {\n             }\n             pub mod extra {\n                 pub struct mach_timebase_info {\n-                    numer: u32,\n-                    denom: u32,\n+                    pub numer: u32,\n+                    pub denom: u32,\n                 }\n \n                 pub type mach_timebase_info_data_t = mach_timebase_info;\n@@ -1428,38 +1428,38 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    st_dev: dev_t,\n-                    st_mode: mode_t,\n-                    st_nlink: nlink_t,\n-                    st_ino: ino_t,\n-                    st_uid: uid_t,\n-                    st_gid: gid_t,\n-                    st_rdev: dev_t,\n-                    st_atime: time_t,\n-                    st_atime_nsec: c_long,\n-                    st_mtime: time_t,\n-                    st_mtime_nsec: c_long,\n-                    st_ctime: time_t,\n-                    st_ctime_nsec: c_long,\n-                    st_birthtime: time_t,\n-                    st_birthtime_nsec: c_long,\n-                    st_size: off_t,\n-                    st_blocks: blkcnt_t,\n-                    st_blksize: blksize_t,\n-                    st_flags: uint32_t,\n-                    st_gen: uint32_t,\n-                    st_lspare: int32_t,\n-                    st_qspare: [int64_t, ..2],\n+                    pub st_dev: dev_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_ino: ino_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub st_birthtime: time_t,\n+                    pub st_birthtime_nsec: c_long,\n+                    pub st_size: off_t,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_blksize: blksize_t,\n+                    pub st_flags: uint32_t,\n+                    pub st_gen: uint32_t,\n+                    pub st_lspare: int32_t,\n+                    pub st_qspare: [int64_t, ..2],\n                 }\n \n                 pub struct utimbuf {\n-                    actime: time_t,\n-                    modtime: time_t,\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n                 }\n \n                 pub struct pthread_attr_t {\n-                    __sig: c_long,\n-                    __opaque: [c_char, ..56]\n+                    pub __sig: c_long,\n+                    pub __opaque: [c_char, ..56]\n                 }\n             }\n             pub mod posix08 {\n@@ -1468,8 +1468,8 @@ pub mod types {\n             }\n             pub mod extra {\n                 pub struct mach_timebase_info {\n-                    numer: u32,\n-                    denom: u32,\n+                    pub numer: u32,\n+                    pub denom: u32,\n                 }\n \n                 pub type mach_timebase_info_data_t = mach_timebase_info;"}, {"sha": "be1c87ba7886ccb2e96264ae60cce78855ec1046", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -535,7 +535,7 @@ impl<T> Default for Option<T> {\n /// methods on `Option`.\n #[deriving(Clone)]\n pub struct Item<A> {\n-    priv opt: Option<A>\n+    opt: Option<A>\n }\n \n impl<A> Iterator<A> for Item<A> {"}, {"sha": "5485aaec08567c9ade59d81d3460a81c9840fcc3", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -370,10 +370,10 @@ pub fn unsetenv(n: &str) {\n pub struct Pipe {\n     /// A file descriptor representing the reading end of the pipe. Data written\n     /// on the `out` file descriptor can be read from this file descriptor.\n-    input: c_int,\n+    pub input: c_int,\n     /// A file descriptor representing the write end of the pipe. Data written\n     /// to this file descriptor can be read from the `input` file descriptor.\n-    out: c_int,\n+    pub out: c_int,\n }\n \n /// Creates a new low-level OS in-memory pipe.\n@@ -946,11 +946,11 @@ pub fn page_size() -> uint {\n /// let it leave scope by accident if you want it to stick around.\n pub struct MemoryMap {\n     /// Pointer to the memory created or modified by this map.\n-    data: *mut u8,\n+    pub data: *mut u8,\n     /// Number of bytes this map applies to\n-    len: uint,\n+    pub len: uint,\n     /// Type of mapping\n-    kind: MemoryMapKind\n+    pub kind: MemoryMapKind,\n }\n \n /// Type of memory map"}, {"sha": "a0097469e56a23c7257f5da23126b285c8c8df3d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -488,8 +488,8 @@ pub trait GenericPathUnsafe {\n \n /// Helper struct for printing paths with format!()\n pub struct Display<'a, P> {\n-    priv path: &'a P,\n-    priv filename: bool\n+    path: &'a P,\n+    filename: bool\n }\n \n impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {"}, {"sha": "098b3edb69d0d0a76db88ab3127900082ba59d88", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,8 +40,8 @@ pub type RevStrComponents<'a> = Map<'a, &'a [u8], Option<&'a str>,\n /// Represents a POSIX file path\n #[deriving(Clone)]\n pub struct Path {\n-    priv repr: ~[u8], // assumed to never be empty or contain NULs\n-    priv sepidx: Option<uint> // index of the final separator in repr\n+    repr: ~[u8], // assumed to never be empty or contain NULs\n+    sepidx: Option<uint> // index of the final separator in repr\n }\n \n /// The standard path separator character"}, {"sha": "ca9b351210d949f7a61665bb18204590c67c14a6", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -81,9 +81,9 @@ pub type RevComponents<'a> = Map<'a, Option<&'a str>, &'a [u8],\n // preserved by the data structure; let the Windows API error out on them.\n #[deriving(Clone)]\n pub struct Path {\n-    priv repr: ~str, // assumed to never be empty\n-    priv prefix: Option<PathPrefix>,\n-    priv sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr\n+    repr: ~str, // assumed to never be empty\n+    prefix: Option<PathPrefix>,\n+    sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr\n }\n \n impl Eq for Path {"}, {"sha": "b285b42ee5ec21da3acc52a9414971d14dee55ed", "filename": "src/libstd/raw.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fraw.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,48 +21,48 @@ use cast;\n \n /// The representation of a Rust managed box\n pub struct Box<T> {\n-    ref_count: uint,\n-    drop_glue: fn(ptr: *mut u8),\n-    prev: *mut Box<T>,\n-    next: *mut Box<T>,\n-    data: T\n+    pub ref_count: uint,\n+    pub drop_glue: fn(ptr: *mut u8),\n+    pub prev: *mut Box<T>,\n+    pub next: *mut Box<T>,\n+    pub data: T,\n }\n \n /// The representation of a Rust vector\n pub struct Vec<T> {\n-    fill: uint,\n-    alloc: uint,\n-    data: T\n+    pub fill: uint,\n+    pub alloc: uint,\n+    pub data: T,\n }\n \n /// The representation of a Rust string\n pub type String = Vec<u8>;\n \n /// The representation of a Rust slice\n pub struct Slice<T> {\n-    data: *T,\n-    len: uint\n+    pub data: *T,\n+    pub len: uint,\n }\n \n /// The representation of a Rust closure\n pub struct Closure {\n-    code: *(),\n-    env: *(),\n+    pub code: *(),\n+    pub env: *(),\n }\n \n /// The representation of a Rust procedure (`proc()`)\n pub struct Procedure {\n-    code: *(),\n-    env: *(),\n+    pub code: *(),\n+    pub env: *(),\n }\n \n /// The representation of a Rust trait object.\n ///\n /// This struct does not have a `Repr` implementation\n /// because there is no way to refer to all trait objects generically.\n pub struct TraitObject {\n-    vtable: *(),\n-    data: *(),\n+    pub vtable: *(),\n+    pub data: *(),\n }\n \n /// This trait is meant to map equivalences between raw structs and their"}, {"sha": "ff6e494b948c60dfd045568c075e1e2374d733c1", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -43,9 +43,9 @@ struct RcBox<T> {\n /// Immutable reference counted pointer type\n #[unsafe_no_drop_flag]\n pub struct Rc<T> {\n-    priv ptr: *mut RcBox<T>,\n-    priv nosend: marker::NoSend,\n-    priv noshare: marker::NoShare\n+    ptr: *mut RcBox<T>,\n+    nosend: marker::NoSend,\n+    noshare: marker::NoShare\n }\n \n impl<T> Rc<T> {\n@@ -151,9 +151,9 @@ impl<T: TotalOrd> TotalOrd for Rc<T> {\n /// Weak reference to a reference-counted box\n #[unsafe_no_drop_flag]\n pub struct Weak<T> {\n-    priv ptr: *mut RcBox<T>,\n-    priv nosend: marker::NoSend,\n-    priv noshare: marker::NoShare\n+    ptr: *mut RcBox<T>,\n+    nosend: marker::NoSend,\n+    noshare: marker::NoShare\n }\n \n impl<T> Weak<T> {"}, {"sha": "997b65c2e1f9274ebbfe0d0fddc49503a67c81cf", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,7 +40,7 @@ pub fn align(size: uint, align: uint) -> uint {\n \n /// Adaptor to wrap around visitors implementing MovePtr.\n pub struct MovePtrAdaptor<V> {\n-    priv inner: V\n+    inner: V\n }\n pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n     MovePtrAdaptor { inner: v }"}, {"sha": "9d1d406e803b7752566b1b00b96d1744715abc91", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -101,11 +101,11 @@ enum VariantState {\n }\n \n pub struct ReprVisitor<'a> {\n-    priv ptr: *u8,\n-    priv ptr_stk: ~[*u8],\n-    priv var_stk: ~[VariantState],\n-    priv writer: &'a mut io::Writer,\n-    priv last_err: Option<io::IoError>,\n+    ptr: *u8,\n+    ptr_stk: ~[*u8],\n+    var_stk: ~[VariantState],\n+    writer: &'a mut io::Writer,\n+    last_err: Option<io::IoError>,\n }\n \n pub fn ReprVisitor<'a>(ptr: *u8,"}, {"sha": "4fd610d7423602141e35cbc305111c1afc7c2380", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -17,8 +17,7 @@ use libc;\n \n #[cfg(not(target_arch = \"arm\"))]\n #[repr(C)]\n-pub enum _Unwind_Action\n-{\n+pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n     _UA_CLEANUP_PHASE = 2,\n     _UA_HANDLER_FRAME = 4,\n@@ -28,14 +27,13 @@ pub enum _Unwind_Action\n \n #[cfg(target_arch = \"arm\")]\n #[repr(C)]\n-pub enum _Unwind_State\n-{\n-  _US_VIRTUAL_UNWIND_FRAME = 0,\n-  _US_UNWIND_FRAME_STARTING = 1,\n-  _US_UNWIND_FRAME_RESUME = 2,\n-  _US_ACTION_MASK = 3,\n-  _US_FORCE_UNWIND = 8,\n-  _US_END_OF_STACK = 16\n+pub enum _Unwind_State {\n+    _US_VIRTUAL_UNWIND_FRAME = 0,\n+    _US_UNWIND_FRAME_STARTING = 1,\n+    _US_UNWIND_FRAME_RESUME = 2,\n+    _US_ACTION_MASK = 3,\n+    _US_FORCE_UNWIND = 8,\n+    _US_END_OF_STACK = 16\n }\n \n #[repr(C)]\n@@ -69,9 +67,9 @@ pub static unwinder_private_data_size: int = 20;\n pub static unwinder_private_data_size: int = 2;\n \n pub struct _Unwind_Exception {\n-    exception_class: _Unwind_Exception_Class,\n-    exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n-    private: [_Unwind_Word, ..unwinder_private_data_size],\n+    pub exception_class: _Unwind_Exception_Class,\n+    pub exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n+    pub private: [_Unwind_Word, ..unwinder_private_data_size],\n }\n \n pub enum _Unwind_Context {}"}, {"sha": "163e69f96867563edbfaaac54c580fc334fcadea", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -33,14 +33,14 @@ static MAGIC: u32 = 0xbadc0ffe;\n pub type Box = raw::Box<()>;\n \n pub struct MemoryRegion {\n-    priv allocations: Vec<*AllocHeader>,\n-    priv live_allocations: uint,\n+    allocations: Vec<*AllocHeader>,\n+    live_allocations: uint,\n }\n \n pub struct LocalHeap {\n-    priv memory_region: MemoryRegion,\n+    memory_region: MemoryRegion,\n \n-    priv live_allocs: *mut raw::Box<()>,\n+    live_allocs: *mut raw::Box<()>,\n }\n \n impl LocalHeap {"}, {"sha": "e486932ac3c374faad58eba083f56fbeac69b808", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,7 +31,7 @@ pub use self::compiled::*;\n /// Encapsulates a borrowed value. When this value goes out of scope, the\n /// pointer is returned.\n pub struct Borrowed<T> {\n-    priv val: *(),\n+    val: *(),\n }\n \n #[unsafe_destructor]"}, {"sha": "54708d19a1b4fdff06ac2edec71dece59a9e40f7", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -61,11 +61,11 @@ pub trait RemoteCallback {\n /// libuv (it does translation to windows under the hood).\n pub struct FileOpenConfig {\n     /// Path to file to be opened\n-    path: Path,\n+    pub path: Path,\n     /// Flags for file access mode (as per open(2))\n-    flags: int,\n+    pub flags: int,\n     /// File creation mode, ignored unless O_CREAT is passed as part of flags\n-    priv mode: int\n+    pub mode: int\n }\n \n /// Description of what to do when a file handle is closed\n@@ -83,7 +83,7 @@ pub enum CloseBehavior {\n }\n \n pub struct LocalIo<'a> {\n-    priv factory: &'a mut IoFactory,\n+    factory: &'a mut IoFactory,\n }\n \n #[unsafe_destructor]"}, {"sha": "d9700ea998018868917e99a2cac19b8790275e34", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -43,18 +43,18 @@ use unstable::finally::Finally;\n /// in the struct. This contains a pointer to another struct that holds\n /// the type-specific state.\n pub struct Task {\n-    heap: LocalHeap,\n-    gc: GarbageCollector,\n-    storage: LocalStorage,\n-    unwinder: Unwinder,\n-    death: Death,\n-    destroyed: bool,\n-    name: Option<SendStr>,\n-\n-    stdout: Option<~Writer:Send>,\n-    stderr: Option<~Writer:Send>,\n-\n-    priv imp: Option<~Runtime:Send>,\n+    pub heap: LocalHeap,\n+    pub gc: GarbageCollector,\n+    pub storage: LocalStorage,\n+    pub unwinder: Unwinder,\n+    pub death: Death,\n+    pub destroyed: bool,\n+    pub name: Option<SendStr>,\n+\n+    pub stdout: Option<~Writer:Send>,\n+    pub stderr: Option<~Writer:Send>,\n+\n+    imp: Option<~Runtime:Send>,\n }\n \n pub struct GarbageCollector;\n@@ -77,11 +77,11 @@ pub enum DeathAction {\n \n /// Per-task state related to task death, killing, failure, etc.\n pub struct Death {\n-    on_exit: Option<DeathAction>,\n+    pub on_exit: Option<DeathAction>,\n }\n \n pub struct BlockedTasks {\n-    priv inner: UnsafeArc<AtomicUint>,\n+    inner: UnsafeArc<AtomicUint>,\n }\n \n impl Task {"}, {"sha": "c35ffac064cfd8e1378434937189cac219c0e1f2", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -28,9 +28,9 @@ type StartFn = extern \"C\" fn(*libc::c_void) -> imp::rust_thread_return;\n /// This struct represents a native thread's state. This is used to join on an\n /// existing thread created in the join-able state.\n pub struct Thread<T> {\n-    priv native: imp::rust_thread,\n-    priv joined: bool,\n-    priv packet: ~Option<T>,\n+    native: imp::rust_thread,\n+    joined: bool,\n+    packet: ~Option<T>,\n }\n \n static DEFAULT_STACK_SIZE: uint = 1024 * 1024;"}, {"sha": "68d63949ae6015013294e34a34ccab20cb3e2eba", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -75,8 +75,8 @@ use intrinsics;\n use uw = rt::libunwind;\n \n pub struct Unwinder {\n-    priv unwinding: bool,\n-    priv cause: Option<~Any:Send>\n+    unwinding: bool,\n+    cause: Option<~Any:Send>\n }\n \n impl Unwinder {"}, {"sha": "bb6cb7a3e25d15bcd1202e2d1394860537cd9672", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -233,10 +233,10 @@ pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function.\n pub struct Splits<'a, T> {\n-    priv v: &'a [T],\n-    priv n: uint,\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a [T],\n+    n: uint,\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a [T]> for Splits<'a, T> {\n@@ -282,10 +282,10 @@ impl<'a, T> Iterator<&'a [T]> for Splits<'a, T> {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function, from back to front.\n pub struct RevSplits<'a, T> {\n-    priv v: &'a [T],\n-    priv n: uint,\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a [T],\n+    n: uint,\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a [T]> for RevSplits<'a, T> {\n@@ -411,9 +411,9 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (~[T], ~[U]) {\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n pub struct ElementSwaps {\n-    priv sdir: ~[SizeDirection],\n+    sdir: ~[SizeDirection],\n     /// If true, emit the last swap that returns the sequence to initial state\n-    priv emit_reset: bool,\n+    emit_reset: bool,\n }\n \n impl ElementSwaps {\n@@ -486,8 +486,8 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n ///\n /// Generates even and odd permutations alternately.\n pub struct Permutations<T> {\n-    priv swaps: ElementSwaps,\n-    priv v: ~[T],\n+    swaps: ElementSwaps,\n+    v: ~[T],\n }\n \n impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n@@ -508,8 +508,8 @@ impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n /// a vector.\n #[deriving(Clone)]\n pub struct Windows<'a, T> {\n-    priv v: &'a [T],\n-    priv size: uint\n+    v: &'a [T],\n+    size: uint\n }\n \n impl<'a, T> Iterator<&'a [T]> for Windows<'a, T> {\n@@ -542,8 +542,8 @@ impl<'a, T> Iterator<&'a [T]> for Windows<'a, T> {\n /// the last slice of the iteration will be the remainder.\n #[deriving(Clone)]\n pub struct Chunks<'a, T> {\n-    priv v: &'a [T],\n-    priv size: uint\n+    v: &'a [T],\n+    size: uint\n }\n \n impl<'a, T> Iterator<&'a [T]> for Chunks<'a, T> {\n@@ -2632,17 +2632,17 @@ impl<A> Default for ~[A] {\n \n /// Immutable slice iterator\n pub struct Items<'a, T> {\n-    priv ptr: *T,\n-    priv end: *T,\n-    priv marker: marker::ContravariantLifetime<'a>\n+    ptr: *T,\n+    end: *T,\n+    marker: marker::ContravariantLifetime<'a>\n }\n \n /// Mutable slice iterator\n pub struct MutItems<'a, T> {\n-    priv ptr: *mut T,\n-    priv end: *mut T,\n-    priv marker: marker::ContravariantLifetime<'a>,\n-    priv marker2: marker::NoCopy\n+    ptr: *mut T,\n+    end: *mut T,\n+    marker: marker::ContravariantLifetime<'a>,\n+    marker2: marker::NoCopy\n }\n \n macro_rules! iterator {\n@@ -2735,9 +2735,9 @@ pub type RevMutItems<'a, T> = Rev<MutItems<'a, T>>;\n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`.\n pub struct MutSplits<'a, T> {\n-    priv v: &'a mut [T],\n-    priv pred: 'a |t: &T| -> bool,\n-    priv finished: bool\n+    v: &'a mut [T],\n+    pred: 'a |t: &T| -> bool,\n+    finished: bool\n }\n \n impl<'a, T> Iterator<&'a mut [T]> for MutSplits<'a, T> {\n@@ -2800,8 +2800,8 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutSplits<'a, T> {\n /// the vector len is not evenly divided by the chunk size, the last slice of the iteration will be\n /// the remainder.\n pub struct MutChunks<'a, T> {\n-    priv v: &'a mut [T],\n-    priv chunk_size: uint\n+    v: &'a mut [T],\n+    chunk_size: uint\n }\n \n impl<'a, T> Iterator<&'a mut [T]> for MutChunks<'a, T> {\n@@ -2849,8 +2849,8 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunks<'a, T> {\n \n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n-    priv allocation: *mut u8, // the block of memory allocated for the vector\n-    priv iter: Items<'static, T>\n+    allocation: *mut u8, // the block of memory allocated for the vector\n+    iter: Items<'static, T>\n }\n \n impl<T> Iterator<T> for MoveItems<T> {"}, {"sha": "408d236ccc6e743a9faa8b10830fa6ce904f7874", "filename": "src/libstd/str.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -275,7 +275,7 @@ Section: Iterators\n #[deriving(Clone)]\n pub struct Chars<'a> {\n     /// The slice remaining to be iterated\n-    priv string: &'a str,\n+    string: &'a str,\n }\n \n impl<'a> Iterator<char> for Chars<'a> {\n@@ -320,8 +320,8 @@ impl<'a> DoubleEndedIterator<char> for Chars<'a> {\n #[deriving(Clone)]\n pub struct CharOffsets<'a> {\n     /// The original string to be iterated\n-    priv string: &'a str,\n-    priv iter: Chars<'a>,\n+    string: &'a str,\n+    iter: Chars<'a>,\n }\n \n impl<'a> Iterator<(uint, char)> for CharOffsets<'a> {\n@@ -371,12 +371,12 @@ pub type RevBytes<'a> = Rev<Bytes<'a>>;\n #[deriving(Clone)]\n pub struct CharSplits<'a, Sep> {\n     /// The slice remaining to be iterated\n-    priv string: &'a str,\n-    priv sep: Sep,\n+    string: &'a str,\n+    sep: Sep,\n     /// Whether an empty string at the end is allowed\n-    priv allow_trailing_empty: bool,\n-    priv only_ascii: bool,\n-    priv finished: bool,\n+    allow_trailing_empty: bool,\n+    only_ascii: bool,\n+    finished: bool,\n }\n \n /// An iterator over the substrings of a string, separated by `sep`,\n@@ -387,10 +387,10 @@ pub type RevCharSplits<'a, Sep> = Rev<CharSplits<'a, Sep>>;\n /// splitting at most `count` times.\n #[deriving(Clone)]\n pub struct CharSplitsN<'a, Sep> {\n-    priv iter: CharSplits<'a, Sep>,\n+    iter: CharSplits<'a, Sep>,\n     /// The number of splits remaining\n-    priv count: uint,\n-    priv invert: bool,\n+    count: uint,\n+    invert: bool,\n }\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n@@ -503,18 +503,18 @@ impl<'a, Sep: CharEq> Iterator<&'a str> for CharSplitsN<'a, Sep> {\n /// substring within a larger string\n #[deriving(Clone)]\n pub struct MatchIndices<'a> {\n-    priv haystack: &'a str,\n-    priv needle: &'a str,\n-    priv position: uint,\n+    haystack: &'a str,\n+    needle: &'a str,\n+    position: uint,\n }\n \n /// An iterator over the substrings of a string separated by a given\n /// search string\n #[deriving(Clone)]\n pub struct StrSplits<'a> {\n-    priv it: MatchIndices<'a>,\n-    priv last_end: uint,\n-    priv finished: bool\n+    it: MatchIndices<'a>,\n+    last_end: uint,\n+    finished: bool\n }\n \n impl<'a> Iterator<(uint, uint)> for MatchIndices<'a> {\n@@ -597,10 +597,10 @@ enum NormalizationForm {\n /// Use with the `std::iter` module.\n #[deriving(Clone)]\n pub struct Normalizations<'a> {\n-    priv kind: NormalizationForm,\n-    priv iter: Chars<'a>,\n-    priv buffer: ~[(char, u8)],\n-    priv sorted: bool\n+    kind: NormalizationForm,\n+    iter: Chars<'a>,\n+    buffer: ~[(char, u8)],\n+    sorted: bool\n }\n \n impl<'a> Iterator<char> for Normalizations<'a> {\n@@ -856,7 +856,7 @@ pub fn is_utf16(v: &[u16]) -> bool {\n /// of `u16`s.\n #[deriving(Clone)]\n pub struct UTF16Items<'a> {\n-    priv iter: slice::Items<'a, u16>\n+    iter: slice::Items<'a, u16>\n }\n /// The possibilities for values decoded from a `u16` stream.\n #[deriving(Eq, TotalEq, Clone, Show)]\n@@ -1061,9 +1061,9 @@ pub fn utf8_char_width(b: u8) -> uint {\n /// for iterating over the UTF-8 bytes of a string.\n pub struct CharRange {\n     /// Current `char`\n-    ch: char,\n+    pub ch: char,\n     /// Index of the first byte of the next `char`\n-    next: uint\n+    pub next: uint,\n }\n \n // Return the initial codepoint accumulator for the first byte."}, {"sha": "0d0bd740e41e010f254bd25342016883b5442b45", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -35,7 +35,7 @@ use ty::Unsafe;\n /// Enforces no shared-memory safety.\n #[unsafe_no_drop_flag]\n pub struct UnsafeArc<T> {\n-    priv data: *mut ArcData<T>,\n+    data: *mut ArcData<T>,\n }\n \n struct ArcData<T> {"}, {"sha": "234eae1f97b7f8ef5e0ac69220b85fcba7adb190", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -116,26 +116,26 @@ use ty::Unsafe;\n \n /// An atomic boolean type.\n pub struct AtomicBool {\n-    priv v: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// A signed atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicInt {\n-    priv v: Unsafe<int>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<int>,\n+    nocopy: marker::NoCopy\n }\n \n /// An unsigned atomic integer type, supporting basic atomic arithmetic operations\n pub struct AtomicUint {\n-    priv v: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    v: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// An unsafe atomic pointer. Only supports basic atomic operations\n pub struct AtomicPtr<T> {\n-    priv p: Unsafe<uint>,\n-    priv nocopy: marker::NoCopy\n+    p: Unsafe<uint>,\n+    nocopy: marker::NoCopy\n }\n \n /// An atomic, nullable unique pointer\n@@ -144,7 +144,7 @@ pub struct AtomicPtr<T> {\n /// owned heap objects across tasks.\n #[unsafe_no_drop_flag]\n pub struct AtomicOption<T> {\n-    priv p: Unsafe<uint>,\n+    p: Unsafe<uint>,\n }\n \n /// Atomic memory orderings"}, {"sha": "d01c89878ded994f2f6c9199c618bb2335b2d588", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -86,14 +86,14 @@ struct Deque<T> {\n ///\n /// There may only be one worker per deque.\n pub struct Worker<T> {\n-    priv deque: UnsafeArc<Deque<T>>,\n+    deque: UnsafeArc<Deque<T>>,\n }\n \n /// The stealing half of the work-stealing deque. Stealers have access to the\n /// opposite end of the deque from the worker, and they only have access to the\n /// `steal` method.\n pub struct Stealer<T> {\n-    priv deque: UnsafeArc<Deque<T>>,\n+    deque: UnsafeArc<Deque<T>>,\n }\n \n /// When stealing some data, this is an enumeration of the possible outcomes.\n@@ -116,7 +116,7 @@ pub enum Stolen<T> {\n /// will only use this structure when allocating a new buffer or deallocating a\n /// previous one.\n pub struct BufferPool<T> {\n-    priv pool: Exclusive<~[~Buffer<T>]>,\n+    pool: Exclusive<~[~Buffer<T>]>,\n }\n \n /// An internal buffer used by the chase-lev deque. This structure is actually"}, {"sha": "12c05c0d61ceaaa8cce127f651056e3b11bb8241", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -54,7 +54,7 @@ struct State<T> {\n }\n \n pub struct Queue<T> {\n-    priv state: UnsafeArc<State<T>>,\n+    state: UnsafeArc<State<T>>,\n }\n \n impl<T: Send> State<T> {"}, {"sha": "142a6239df6dabfd50f23b8b1d5f9c9277d3c6bb", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -67,8 +67,8 @@ struct Node<T> {\n /// may be safely shared so long as it is guaranteed that there is only one\n /// popper at a time (many pushers are allowed).\n pub struct Queue<T> {\n-    priv head: AtomicPtr<Node<T>>,\n-    priv tail: *mut Node<T>,\n+    head: AtomicPtr<Node<T>>,\n+    tail: *mut Node<T>,\n }\n \n impl<T> Node<T> {"}, {"sha": "4e043ecf17180b9322679dc9af2ef57e77cfb3f1", "filename": "src/libstd/sync/spsc_queue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fspsc_queue.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -55,19 +55,19 @@ struct Node<T> {\n /// time.\n pub struct Queue<T> {\n     // consumer fields\n-    priv tail: *mut Node<T>, // where to pop from\n-    priv tail_prev: AtomicPtr<Node<T>>, // where to pop from\n+    tail: *mut Node<T>, // where to pop from\n+    tail_prev: AtomicPtr<Node<T>>, // where to pop from\n \n     // producer fields\n-    priv head: *mut Node<T>,      // where to push to\n-    priv first: *mut Node<T>,     // where to get new nodes from\n-    priv tail_copy: *mut Node<T>, // between first/tail\n+    head: *mut Node<T>,      // where to push to\n+    first: *mut Node<T>,     // where to get new nodes from\n+    tail_copy: *mut Node<T>, // between first/tail\n \n     // Cache maintenance fields. Additions and subtractions are stored\n     // separately in order to allow them to use nonatomic addition/subtraction.\n-    priv cache_bound: uint,\n-    priv cache_additions: AtomicUint,\n-    priv cache_subtractions: AtomicUint,\n+    cache_bound: uint,\n+    cache_additions: AtomicUint,\n+    cache_subtractions: AtomicUint,\n }\n \n impl<T: Send> Node<T> {"}, {"sha": "a3d919921ae6d2b281e6a3d46975ebe7cf9a6bb4", "filename": "src/libstd/task.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -60,15 +60,15 @@ pub type TaskResult = Result<(), ~Any:Send>;\n /// Task configuration options\n pub struct TaskOpts {\n     /// Enable lifecycle notifications on the given channel\n-    notify_chan: Option<Sender<TaskResult>>,\n+    pub notify_chan: Option<Sender<TaskResult>>,\n     /// A name for the task-to-be, for identification in failure messages\n-    name: Option<SendStr>,\n+    pub name: Option<SendStr>,\n     /// The size of the stack for the spawned task\n-    stack_size: Option<uint>,\n+    pub stack_size: Option<uint>,\n     /// Task-local stdout\n-    stdout: Option<~Writer:Send>,\n+    pub stdout: Option<~Writer:Send>,\n     /// Task-local stderr\n-    stderr: Option<~Writer:Send>,\n+    pub stderr: Option<~Writer:Send>,\n }\n \n /**\n@@ -85,9 +85,9 @@ pub struct TaskOpts {\n // the run function move them in.\n pub struct TaskBuilder {\n     /// Options to spawn the new task with\n-    opts: TaskOpts,\n-    priv gen_body: Option<proc:Send(v: proc:Send()) -> proc:Send()>,\n-    priv nocopy: Option<marker::NoCopy>,\n+    pub opts: TaskOpts,\n+    gen_body: Option<proc:Send(v: proc:Send()) -> proc:Send()>,\n+    nocopy: Option<marker::NoCopy>,\n }\n \n /**"}, {"sha": "dc4e55deb4b15e29dcab4e9d2aa2a90c79b4bd30", "filename": "src/libstd/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fty.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -48,10 +48,10 @@ use kinds::marker;\n #[lang=\"unsafe\"]\n pub struct Unsafe<T> {\n     /// Wrapped value\n-    value: T,\n+    pub value: T,\n \n     /// Invariance marker\n-    marker1: marker::InvariantType<T>\n+    pub marker1: marker::InvariantType<T>\n }\n \n impl<T> Unsafe<T> {"}, {"sha": "441a60a5186265d05db84f7d4b206e58143a5329", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -22,7 +22,7 @@ use ops::*;\n use option::*;\n use result::*;\n \n-pub struct DynamicLibrary { priv handle: *u8}\n+pub struct DynamicLibrary { handle: *u8}\n \n impl Drop for DynamicLibrary {\n     fn drop(&mut self) {"}, {"sha": "c2db8ad9586ee4a90a83237cfd7efe7ebf00aa53", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -67,15 +67,15 @@ use ops::Drop;\n /// Prefer the `NativeMutex` type where possible, since that does not\n /// require manual deallocation.\n pub struct StaticNativeMutex {\n-    priv inner: imp::Mutex,\n+    inner: imp::Mutex,\n }\n \n /// A native mutex with a destructor for clean-up.\n ///\n /// See `StaticNativeMutex` for a version that is suitable for storing in\n /// statics.\n pub struct NativeMutex {\n-    priv inner: StaticNativeMutex\n+    inner: StaticNativeMutex\n }\n \n /// Automatically unlocks the mutex that it was created from on\n@@ -86,7 +86,7 @@ pub struct NativeMutex {\n /// then.\n #[must_use]\n pub struct LockGuard<'a> {\n-    priv lock: &'a StaticNativeMutex\n+    lock: &'a StaticNativeMutex\n }\n \n pub static NATIVE_MUTEX_INIT: StaticNativeMutex = StaticNativeMutex {\n@@ -372,8 +372,8 @@ mod imp {\n     }\n \n     pub struct Mutex {\n-        priv lock: Unsafe<pthread_mutex_t>,\n-        priv cond: Unsafe<pthread_cond_t>,\n+        lock: Unsafe<pthread_mutex_t>,\n+        cond: Unsafe<pthread_cond_t>,\n     }\n \n     pub static MUTEX_INIT: Mutex = Mutex {\n@@ -447,8 +447,8 @@ mod imp {\n \n     pub struct Mutex {\n         // pointers for the lock/cond handles, atomically updated\n-        priv lock: atomics::AtomicUint,\n-        priv cond: atomics::AtomicUint,\n+        lock: atomics::AtomicUint,\n+        cond: atomics::AtomicUint,\n     }\n \n     pub static MUTEX_INIT: Mutex = Mutex {"}, {"sha": "f1dd7aa150b1de97c23170424c974dc970eacc06", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,7 +30,7 @@ struct ExData<T> {\n  * need to block or deschedule while accessing shared state, use extra::sync::RWArc.\n  */\n pub struct Exclusive<T> {\n-    priv x: UnsafeArc<ExData<T>>\n+    x: UnsafeArc<ExData<T>>\n }\n \n impl<T:Send> Clone for Exclusive<T> {"}, {"sha": "5e42aaecbb93cef63f6d157a33cafaf3c30b7863", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -56,9 +56,9 @@ use slice::{MutableTotalOrdVector, Vector};\n /// ```\n #[unsafe_no_drop_flag]\n pub struct Vec<T> {\n-    priv len: uint,\n-    priv cap: uint,\n-    priv ptr: *mut T\n+    len: uint,\n+    cap: uint,\n+    ptr: *mut T\n }\n \n impl<T> Vec<T> {\n@@ -1308,8 +1308,8 @@ impl<T:fmt::Show> fmt::Show for Vec<T> {\n \n /// An iterator that moves out of a vector.\n pub struct MoveItems<T> {\n-    priv allocation: *mut c_void, // the block of memory allocated for the vector\n-    priv iter: Items<'static, T>\n+    allocation: *mut c_void, // the block of memory allocated for the vector\n+    iter: Items<'static, T>\n }\n \n impl<T> Iterator<T> for MoveItems<T> {"}, {"sha": "ae76357a2be830f3a81983312fba185185dc1eea", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,7 +46,7 @@ use std::sync::atomics;\n /// ```\n #[unsafe_no_drop_flag]\n pub struct Arc<T> {\n-    priv x: *mut ArcInner<T>,\n+    x: *mut ArcInner<T>,\n }\n \n /// A weak pointer to an `Arc`.\n@@ -55,7 +55,7 @@ pub struct Arc<T> {\n /// used to break cycles between `Arc` pointers.\n #[unsafe_no_drop_flag]\n pub struct Weak<T> {\n-    priv x: *mut ArcInner<T>,\n+    x: *mut ArcInner<T>,\n }\n \n struct ArcInner<T> {"}, {"sha": "9e01b16ee9ba9b544fba49340c69f61d096478be", "filename": "src/libsync/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,8 +20,8 @@ use std::comm;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<S, R> {\n-    priv tx: Sender<S>,\n-    priv rx: Receiver<R>,\n+    tx: Sender<S>,\n+    rx: Receiver<R>,\n }\n \n /// Creates a bidirectional stream."}, {"sha": "cfe942afc129b1231ce43b294cf930f91490e63d", "filename": "src/libsync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ffuture.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,7 +30,7 @@ use std::mem::replace;\n \n /// A type encapsulating the result of a computation which may not be complete\n pub struct Future<A> {\n-    priv state: FutureState<A>,\n+    state: FutureState<A>,\n }\n \n enum FutureState<A> {"}, {"sha": "4ecf8d32470a7597d703def58f8f2438158bf44b", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,7 +20,11 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n #![feature(phase)]\n-#![deny(missing_doc, deprecated_owned_vector)]\n+#![deny(deprecated_owned_vector)]\n+\n+// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n+#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n \n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;"}, {"sha": "67b725f040b4d3eb1da9d07961764a3bacf5ddf1", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -79,12 +79,12 @@ impl<'b> Inner<'b> {\n /// A condition variable, a mechanism for unlock-and-descheduling and\n /// signaling, for use with the lock types.\n pub struct Condvar<'a> {\n-    priv name: &'static str,\n+    name: &'static str,\n     // n.b. Inner must be after PoisonOnFail because we must set the poison flag\n     //      *inside* the mutex, and struct fields are destroyed top-to-bottom\n     //      (destroy the lock guard last).\n-    priv poison: PoisonOnFail<'a>,\n-    priv inner: Inner<'a>,\n+    poison: PoisonOnFail<'a>,\n+    inner: Inner<'a>,\n }\n \n impl<'a> Condvar<'a> {\n@@ -166,18 +166,18 @@ impl<'a> Condvar<'a> {\n /// }\n /// ```\n pub struct Mutex<T> {\n-    priv lock: raw::Mutex,\n-    priv failed: Unsafe<bool>,\n-    priv data: Unsafe<T>,\n+    lock: raw::Mutex,\n+    failed: Unsafe<bool>,\n+    data: Unsafe<T>,\n }\n \n /// An guard which is created by locking a mutex. Through this guard the\n /// underlying data can be accessed.\n pub struct MutexGuard<'a, T> {\n-    priv data: &'a mut T,\n+    data: &'a mut T,\n     /// Inner condition variable connected to the locked mutex that this guard\n     /// was created from. This can be used for atomic-unlock-and-deschedule.\n-    cond: Condvar<'a>,\n+    pub cond: Condvar<'a>,\n }\n \n impl<T: Send> Mutex<T> {\n@@ -265,25 +265,25 @@ impl<'a, T> DerefMut<T> for MutexGuard<'a, T> {\n /// println!(\"{}\", *val);\n /// ```\n pub struct RWLock<T> {\n-    priv lock: raw::RWLock,\n-    priv failed: Unsafe<bool>,\n-    priv data: Unsafe<T>,\n+    lock: raw::RWLock,\n+    failed: Unsafe<bool>,\n+    data: Unsafe<T>,\n }\n \n /// A guard which is created by locking an rwlock in write mode. Through this\n /// guard the underlying data can be accessed.\n pub struct RWLockWriteGuard<'a, T> {\n-    priv data: &'a mut T,\n+    data: &'a mut T,\n     /// Inner condition variable that can be used to sleep on the write mode of\n     /// this rwlock.\n-    cond: Condvar<'a>,\n+    pub cond: Condvar<'a>,\n }\n \n /// A guard which is created by locking an rwlock in read mode. Through this\n /// guard the underlying data can be accessed.\n pub struct RWLockReadGuard<'a, T> {\n-    priv data: &'a T,\n-    priv guard: raw::RWLockReadGuard<'a>,\n+    data: &'a T,\n+    guard: raw::RWLockReadGuard<'a>,\n }\n \n impl<T: Send + Share> RWLock<T> {\n@@ -397,8 +397,8 @@ impl<'a, T> DerefMut<T> for RWLockWriteGuard<'a, T> {\n /// }\n /// ```\n pub struct Barrier {\n-    priv lock: Mutex<BarrierState>,\n-    priv num_tasks: uint,\n+    lock: Mutex<BarrierState>,\n+    num_tasks: uint,\n }\n \n // The inner state of a double barrier"}, {"sha": "14dfa8417fac9619f8f2bf4cfd1d5793a710279f", "filename": "src/libsync/mpsc_intrusive.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fmpsc_intrusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fmpsc_intrusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpsc_intrusive.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -41,18 +41,18 @@ use std::ty::Unsafe;\n // initialization.\n \n pub struct Node<T> {\n-    next: atomics::AtomicUint,\n-    data: T,\n+    pub next: atomics::AtomicUint,\n+    pub data: T,\n }\n \n pub struct DummyNode {\n-    next: atomics::AtomicUint,\n+    pub next: atomics::AtomicUint,\n }\n \n pub struct Queue<T> {\n-    head: atomics::AtomicUint,\n-    tail: Unsafe<*mut Node<T>>,\n-    stub: DummyNode,\n+    pub head: atomics::AtomicUint,\n+    pub tail: Unsafe<*mut Node<T>>,\n+    pub stub: DummyNode,\n }\n \n impl<T: Send> Queue<T> {"}, {"sha": "e41484c46bd75e1fb6e581c849680a09204f4d2c", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -94,7 +94,7 @@ pub static NATIVE_BLOCKED: uint = 1 << 2;\n /// drop(guard); // unlock the lock\n /// ```\n pub struct Mutex {\n-    priv lock: StaticMutex,\n+    lock: StaticMutex,\n }\n \n #[deriving(Eq, Show)]\n@@ -128,28 +128,28 @@ enum Flavor {\n /// ```\n pub struct StaticMutex {\n     /// Current set of flags on this mutex\n-    priv state: atomics::AtomicUint,\n+    state: atomics::AtomicUint,\n     /// an OS mutex used by native threads\n-    priv lock: mutex::StaticNativeMutex,\n+    lock: mutex::StaticNativeMutex,\n \n     /// Type of locking operation currently on this mutex\n-    priv flavor: Unsafe<Flavor>,\n+    flavor: Unsafe<Flavor>,\n     /// uint-cast of the green thread waiting for this mutex\n-    priv green_blocker: Unsafe<uint>,\n+    green_blocker: Unsafe<uint>,\n     /// uint-cast of the native thread waiting for this mutex\n-    priv native_blocker: Unsafe<uint>,\n+    native_blocker: Unsafe<uint>,\n \n     /// A concurrent mpsc queue used by green threads, along with a count used\n     /// to figure out when to dequeue and enqueue.\n-    priv q: q::Queue<uint>,\n-    priv green_cnt: atomics::AtomicUint,\n+    q: q::Queue<uint>,\n+    green_cnt: atomics::AtomicUint,\n }\n \n /// An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n /// dropped (falls out of scope), the lock will be unlocked.\n #[must_use]\n pub struct Guard<'a> {\n-    priv lock: &'a StaticMutex,\n+    lock: &'a StaticMutex,\n }\n \n /// Static initialization of a mutex. This constant can be used to initialize"}, {"sha": "7da6f39b840e57a6c933dfe3929289adf643a5ea", "filename": "src/libsync/one.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -41,9 +41,9 @@ use mutex::{StaticMutex, MUTEX_INIT};\n /// }\n /// ```\n pub struct Once {\n-    priv mutex: StaticMutex,\n-    priv cnt: atomics::AtomicInt,\n-    priv lock_cnt: atomics::AtomicInt,\n+    mutex: StaticMutex,\n+    cnt: atomics::AtomicInt,\n+    lock_cnt: atomics::AtomicInt,\n }\n \n /// Initialization value for static `Once` values."}, {"sha": "9bb7a81a2ff00b88c4635a659687d628ba39c978", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -209,16 +209,16 @@ enum ReacquireOrderLock<'a> {\n pub struct Condvar<'a> {\n     // The 'Sem' object associated with this condvar. This is the one that's\n     // atomically-unlocked-and-descheduled upon and reacquired during wakeup.\n-    priv sem: &'a Sem<Vec<WaitQueue> >,\n+    sem: &'a Sem<Vec<WaitQueue> >,\n     // This is (can be) an extra semaphore which is held around the reacquire\n     // operation on the first one. This is only used in cvars associated with\n     // rwlocks, and is needed to ensure that, when a downgrader is trying to\n     // hand off the access lock (which would be the first field, here), a 2nd\n     // writer waking up from a cvar wait can't race with a reader to steal it,\n     // See the comment in write_cond for more detail.\n-    priv order: ReacquireOrderLock<'a>,\n+    order: ReacquireOrderLock<'a>,\n     // Make sure condvars are non-copyable.\n-    priv nocopy: marker::NoCopy,\n+    nocopy: marker::NoCopy,\n }\n \n impl<'a> Condvar<'a> {\n@@ -362,14 +362,14 @@ struct SemCondGuard<'a> {\n \n /// A counting, blocking, bounded-waiting semaphore.\n pub struct Semaphore {\n-    priv sem: Sem<()>,\n+    sem: Sem<()>,\n }\n \n /// An RAII guard used to represent an acquired resource to a semaphore. When\n /// dropped, this value will release the resource back to the semaphore.\n #[must_use]\n pub struct SemaphoreGuard<'a> {\n-    priv guard: SemGuard<'a, ()>,\n+    guard: SemGuard<'a, ()>,\n }\n \n impl Semaphore {\n@@ -404,18 +404,18 @@ impl Semaphore {\n /// A task which fails while holding a mutex will unlock the mutex as it\n /// unwinds.\n pub struct Mutex {\n-    priv sem: Sem<Vec<WaitQueue>>,\n+    sem: Sem<Vec<WaitQueue>>,\n }\n \n /// An RAII structure which is used to gain access to a mutex's condition\n /// variable. Additionally, when a value of this type is dropped, the\n /// corresponding mutex is also unlocked.\n #[must_use]\n pub struct MutexGuard<'a> {\n-    priv guard: SemGuard<'a, Vec<WaitQueue>>,\n+    guard: SemGuard<'a, Vec<WaitQueue>>,\n     /// Inner condition variable which is connected to the outer mutex, and can\n     /// be used for atomic-unlock-and-deschedule.\n-    cond: Condvar<'a>,\n+    pub cond: Condvar<'a>,\n }\n \n impl Mutex {\n@@ -452,8 +452,8 @@ impl Mutex {\n /// A task which fails while holding an rwlock will unlock the rwlock as it\n /// unwinds.\n pub struct RWLock {\n-    priv order_lock:  Semaphore,\n-    priv access_lock: Sem<Vec<WaitQueue>>,\n+    order_lock:  Semaphore,\n+    access_lock: Sem<Vec<WaitQueue>>,\n \n     // The only way the count flag is ever accessed is with xadd. Since it is\n     // a read-modify-write operation, multiple xadds on different cores will\n@@ -462,14 +462,14 @@ pub struct RWLock {\n     //\n     // FIXME(#6598): The atomics module has no relaxed ordering flag, so I use\n     // acquire/release orderings superfluously. Change these someday.\n-    priv read_count: atomics::AtomicUint,\n+    read_count: atomics::AtomicUint,\n }\n \n /// An RAII helper which is created by acquiring a read lock on an RWLock. When\n /// dropped, this will unlock the RWLock.\n #[must_use]\n pub struct RWLockReadGuard<'a> {\n-    priv lock: &'a RWLock,\n+    lock: &'a RWLock,\n }\n \n /// An RAII helper which is created by acquiring a write lock on an RWLock. When\n@@ -478,10 +478,10 @@ pub struct RWLockReadGuard<'a> {\n /// A value of this type can also be consumed to downgrade to a read-only lock.\n #[must_use]\n pub struct RWLockWriteGuard<'a> {\n-    priv lock: &'a RWLock,\n+    lock: &'a RWLock,\n     /// Inner condition variable that is connected to the write-mode of the\n     /// outer rwlock.\n-    cond: Condvar<'a>,\n+    pub cond: Condvar<'a>,\n }\n \n impl RWLock {"}, {"sha": "fc249996882dfcf8757e93529bb13a106c45113d", "filename": "src/libsync/task_pool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ftask_pool.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -21,8 +21,8 @@ enum Msg<T> {\n }\n \n pub struct TaskPool<T> {\n-    priv channels: Vec<Sender<Msg<T>>>,\n-    priv next_index: uint,\n+    channels: Vec<Sender<Msg<T>>>,\n+    next_index: uint,\n }\n \n #[unsafe_destructor]"}, {"sha": "caded1dc0b84532998336af1f13b41876d156500", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -67,7 +67,7 @@ pub enum AbiArchitecture {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct AbiSet {\n-    priv bits: u32   // each bit represents one of the abis below\n+    bits: u32   // each bit represents one of the abis below\n }\n \n static AbiDatas: &'static [AbiData] = &["}, {"sha": "3a9cdfb56e32a36424bd91bb47c2124670cafd80", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 144, "deletions": 144, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,8 +40,8 @@ pub fn P<T: 'static>(value: T) -> P<T> {\n // That Work Together\"\n #[deriving(Clone, Hash, Ord, TotalEq, TotalOrd, Show)]\n pub struct Ident {\n-    name: Name,\n-    ctxt: SyntaxContext\n+    pub name: Name,\n+    pub ctxt: SyntaxContext\n }\n \n impl Ident {\n@@ -115,9 +115,9 @@ pub type FnIdent = Option<Ident>;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Lifetime {\n-    id: NodeId,\n-    span: Span,\n-    name: Name\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub name: Name\n }\n \n // a \"Path\" is essentially Rust's notion of a name;\n@@ -126,24 +126,24 @@ pub struct Lifetime {\n // of supporting information.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Path {\n-    span: Span,\n+    pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n     /// module (like paths in an import).\n-    global: bool,\n+    pub global: bool,\n     /// The segments in the path: the things separated by `::`.\n-    segments: Vec<PathSegment> ,\n+    pub segments: Vec<PathSegment> ,\n }\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n-    identifier: Ident,\n+    pub identifier: Ident,\n     /// The lifetime parameters for this path segment.\n-    lifetimes: Vec<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n     /// The type parameters for this path segment, if present.\n-    types: OwnedSlice<P<Ty>>,\n+    pub types: OwnedSlice<P<Ty>>,\n }\n \n pub type CrateNum = u32;\n@@ -152,8 +152,8 @@ pub type NodeId = u32;\n \n #[deriving(Clone, TotalEq, TotalOrd, Ord, Eq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n-    krate: CrateNum,\n-    node: NodeId,\n+    pub krate: CrateNum,\n+    pub node: NodeId,\n }\n \n /// Item definitions in the currently-compiled crate would have the CrateNum\n@@ -178,16 +178,16 @@ pub enum TyParamBound {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TyParam {\n-    ident: Ident,\n-    id: NodeId,\n-    bounds: OwnedSlice<TyParamBound>,\n-    default: Option<P<Ty>>\n+    pub ident: Ident,\n+    pub id: NodeId,\n+    pub bounds: OwnedSlice<TyParamBound>,\n+    pub default: Option<P<Ty>>\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Generics {\n-    lifetimes: Vec<Lifetime>,\n-    ty_params: OwnedSlice<TyParam>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub ty_params: OwnedSlice<TyParam>,\n }\n \n impl Generics {\n@@ -259,10 +259,10 @@ pub type CrateConfig = Vec<@MetaItem> ;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Crate {\n-    module: Mod,\n-    attrs: Vec<Attribute> ,\n-    config: CrateConfig,\n-    span: Span,\n+    pub module: Mod,\n+    pub attrs: Vec<Attribute>,\n+    pub config: CrateConfig,\n+    pub span: Span,\n }\n \n pub type MetaItem = Spanned<MetaItem_>;\n@@ -301,25 +301,25 @@ impl Eq for MetaItem_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Block {\n-    view_items: Vec<ViewItem> ,\n-    stmts: Vec<@Stmt> ,\n-    expr: Option<@Expr>,\n-    id: NodeId,\n-    rules: BlockCheckMode,\n-    span: Span,\n+    pub view_items: Vec<ViewItem>,\n+    pub stmts: Vec<@Stmt>,\n+    pub expr: Option<@Expr>,\n+    pub id: NodeId,\n+    pub rules: BlockCheckMode,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Pat {\n-    id: NodeId,\n-    node: Pat_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Pat_,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct FieldPat {\n-    ident: Ident,\n-    pat: @Pat,\n+    pub ident: Ident,\n+    pub pat: @Pat,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -436,11 +436,11 @@ pub enum Stmt_ {\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Local {\n-    ty: P<Ty>,\n-    pat: @Pat,\n-    init: Option<@Expr>,\n-    id: NodeId,\n-    span: Span,\n+    pub ty: P<Ty>,\n+    pub pat: @Pat,\n+    pub init: Option<@Expr>,\n+    pub id: NodeId,\n+    pub span: Span,\n }\n \n pub type Decl = Spanned<Decl_>;\n@@ -455,16 +455,16 @@ pub enum Decl_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Arm {\n-    pats: Vec<@Pat> ,\n-    guard: Option<@Expr>,\n-    body: @Expr,\n+    pub pats: Vec<@Pat>,\n+    pub guard: Option<@Expr>,\n+    pub body: @Expr,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Field {\n-    ident: SpannedIdent,\n-    expr: @Expr,\n-    span: Span,\n+    pub ident: SpannedIdent,\n+    pub expr: @Expr,\n+    pub span: Span,\n }\n \n pub type SpannedIdent = Spanned<Ident>;\n@@ -483,9 +483,9 @@ pub enum UnsafeSource {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Expr {\n-    id: NodeId,\n-    node: Expr_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Expr_,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -681,27 +681,27 @@ pub enum Lit_ {\n // type structure in middle/ty.rs as well.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct MutTy {\n-    ty: P<Ty>,\n-    mutbl: Mutability,\n+    pub ty: P<Ty>,\n+    pub mutbl: Mutability,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TypeField {\n-    ident: Ident,\n-    mt: MutTy,\n-    span: Span,\n+    pub ident: Ident,\n+    pub mt: MutTy,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TypeMethod {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    purity: Purity,\n-    decl: P<FnDecl>,\n-    generics: Generics,\n-    explicit_self: ExplicitSelf,\n-    id: NodeId,\n-    span: Span,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub purity: Purity,\n+    pub decl: P<FnDecl>,\n+    pub generics: Generics,\n+    pub explicit_self: ExplicitSelf,\n+    pub id: NodeId,\n+    pub span: Span,\n }\n \n // A trait method is either required (meaning it doesn't have an\n@@ -758,9 +758,9 @@ impl fmt::Show for FloatTy {\n // NB Eq method appears below.\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Ty {\n-    id: NodeId,\n-    node: Ty_,\n-    span: Span,\n+    pub id: NodeId,\n+    pub node: Ty_,\n+    pub span: Span,\n }\n \n // Not represented directly in the AST, referred to by name through a ty_path.\n@@ -791,25 +791,25 @@ impl fmt::Show for Onceness {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ClosureTy {\n-    sigil: Sigil,\n-    region: Option<Lifetime>,\n-    lifetimes: Vec<Lifetime>,\n-    purity: Purity,\n-    onceness: Onceness,\n-    decl: P<FnDecl>,\n+    pub sigil: Sigil,\n+    pub region: Option<Lifetime>,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub purity: Purity,\n+    pub onceness: Onceness,\n+    pub decl: P<FnDecl>,\n     // Optional optvec distinguishes between \"fn()\" and \"fn:()\" so we can\n     // implement issue #7264. None means \"fn()\", which means infer a default\n     // bound based on pointer sigil during typeck. Some(Empty) means \"fn:()\",\n     // which means use no bounds (e.g., not even Owned on a ~fn()).\n-    bounds: Option<OwnedSlice<TyParamBound>>,\n+    pub bounds: Option<OwnedSlice<TyParamBound>>,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct BareFnTy {\n-    purity: Purity,\n-    abis: AbiSet,\n-    lifetimes: Vec<Lifetime>,\n-    decl: P<FnDecl>\n+    pub purity: Purity,\n+    pub abis: AbiSet,\n+    pub lifetimes: Vec<Lifetime>,\n+    pub decl: P<FnDecl>\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -840,21 +840,21 @@ pub enum AsmDialect {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct InlineAsm {\n-    asm: InternedString,\n-    asm_str_style: StrStyle,\n-    clobbers: InternedString,\n-    inputs: Vec<(InternedString, @Expr)> ,\n-    outputs: Vec<(InternedString, @Expr)> ,\n-    volatile: bool,\n-    alignstack: bool,\n-    dialect: AsmDialect\n+    pub asm: InternedString,\n+    pub asm_str_style: StrStyle,\n+    pub clobbers: InternedString,\n+    pub inputs: Vec<(InternedString, @Expr)>,\n+    pub outputs: Vec<(InternedString, @Expr)>,\n+    pub volatile: bool,\n+    pub alignstack: bool,\n+    pub dialect: AsmDialect\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Arg {\n-    ty: P<Ty>,\n-    pat: @Pat,\n-    id: NodeId,\n+    pub ty: P<Ty>,\n+    pub pat: @Pat,\n+    pub id: NodeId,\n }\n \n impl Arg {\n@@ -879,10 +879,10 @@ impl Arg {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct FnDecl {\n-    inputs: Vec<Arg> ,\n-    output: P<Ty>,\n-    cf: RetStyle,\n-    variadic: bool\n+    pub inputs: Vec<Arg>,\n+    pub output: P<Ty>,\n+    pub cf: RetStyle,\n+    pub variadic: bool\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -921,64 +921,64 @@ pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Method {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    generics: Generics,\n-    explicit_self: ExplicitSelf,\n-    purity: Purity,\n-    decl: P<FnDecl>,\n-    body: P<Block>,\n-    id: NodeId,\n-    span: Span,\n-    vis: Visibility,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n+    pub explicit_self: ExplicitSelf,\n+    pub purity: Purity,\n+    pub decl: P<FnDecl>,\n+    pub body: P<Block>,\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Mod {\n-    view_items: Vec<ViewItem> ,\n-    items: Vec<@Item> ,\n+    pub view_items: Vec<ViewItem> ,\n+    pub items: Vec<@Item> ,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ForeignMod {\n-    abis: AbiSet,\n-    view_items: Vec<ViewItem> ,\n-    items: Vec<@ForeignItem> ,\n+    pub abis: AbiSet,\n+    pub view_items: Vec<ViewItem>,\n+    pub items: Vec<@ForeignItem>,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct VariantArg {\n-    ty: P<Ty>,\n-    id: NodeId,\n+    pub ty: P<Ty>,\n+    pub id: NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum VariantKind {\n-    TupleVariantKind(Vec<VariantArg> ),\n+    TupleVariantKind(Vec<VariantArg>),\n     StructVariantKind(@StructDef),\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct EnumDef {\n-    variants: Vec<P<Variant>> ,\n+    pub variants: Vec<P<Variant>>,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Variant_ {\n-    name: Ident,\n-    attrs: Vec<Attribute> ,\n-    kind: VariantKind,\n-    id: NodeId,\n-    disr_expr: Option<@Expr>,\n-    vis: Visibility,\n+    pub name: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub kind: VariantKind,\n+    pub id: NodeId,\n+    pub disr_expr: Option<@Expr>,\n+    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct PathListIdent_ {\n-    name: Ident,\n-    id: NodeId,\n+    pub name: Ident,\n+    pub id: NodeId,\n }\n \n pub type PathListIdent = Spanned<PathListIdent_>;\n@@ -1004,10 +1004,10 @@ pub enum ViewPath_ {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ViewItem {\n-    node: ViewItem_,\n-    attrs: Vec<Attribute> ,\n-    vis: Visibility,\n-    span: Span,\n+    pub node: ViewItem_,\n+    pub attrs: Vec<Attribute>,\n+    pub vis: Visibility,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1035,9 +1035,9 @@ pub enum AttrStyle {\n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Attribute_ {\n-    style: AttrStyle,\n-    value: @MetaItem,\n-    is_sugared_doc: bool,\n+    pub style: AttrStyle,\n+    pub value: @MetaItem,\n+    pub is_sugared_doc: bool,\n }\n \n /*\n@@ -1049,8 +1049,8 @@ pub struct Attribute_ {\n  */\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct TraitRef {\n-    path: Path,\n-    ref_id: NodeId,\n+    pub path: Path,\n+    pub ref_id: NodeId,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1071,10 +1071,10 @@ impl Visibility {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct StructField_ {\n-    kind: StructFieldKind,\n-    id: NodeId,\n-    ty: P<Ty>,\n-    attrs: Vec<Attribute> ,\n+    pub kind: StructFieldKind,\n+    pub id: NodeId,\n+    pub ty: P<Ty>,\n+    pub attrs: Vec<Attribute>,\n }\n \n pub type StructField = Spanned<StructField_>;\n@@ -1096,10 +1096,10 @@ impl StructFieldKind {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct StructDef {\n-    fields: Vec<StructField> , /* fields, not including ctor */\n+    pub fields: Vec<StructField>, /* fields, not including ctor */\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n-    ctor_id: Option<NodeId>\n+    pub ctor_id: Option<NodeId>\n }\n \n /*\n@@ -1108,12 +1108,12 @@ pub struct StructDef {\n  */\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Item {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    id: NodeId,\n-    node: Item_,\n-    vis: Visibility,\n-    span: Span,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub id: NodeId,\n+    pub node: Item_,\n+    pub vis: Visibility,\n+    pub span: Span,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1136,12 +1136,12 @@ pub enum Item_ {\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct ForeignItem {\n-    ident: Ident,\n-    attrs: Vec<Attribute> ,\n-    node: ForeignItem_,\n-    id: NodeId,\n-    span: Span,\n-    vis: Visibility,\n+    pub ident: Ident,\n+    pub attrs: Vec<Attribute>,\n+    pub node: ForeignItem_,\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n }\n \n #[deriving(Eq, TotalEq, Encodable, Decodable, Hash)]"}, {"sha": "f07b0e71c1ce1245f9a9c30482851da13ac2ef73", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -184,7 +184,7 @@ pub struct Map {\n     ///\n     /// Also, indexing is pretty quick when you've got a vector and\n     /// plain old integers.\n-    priv map: RefCell<Vec<MapEntry> >\n+    map: RefCell<Vec<MapEntry> >\n }\n \n impl Map {"}, {"sha": "631489a65b2309093d09fdb1cd0166006692ec86", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -325,8 +325,8 @@ pub fn empty_generics() -> Generics {\n \n #[deriving(Encodable, Decodable)]\n pub struct IdRange {\n-    min: NodeId,\n-    max: NodeId,\n+    pub min: NodeId,\n+    pub max: NodeId,\n }\n \n impl IdRange {\n@@ -352,9 +352,9 @@ pub trait IdVisitingOperation {\n }\n \n pub struct IdVisitor<'a, O> {\n-    operation: &'a O,\n-    pass_through_items: bool,\n-    visited_outermost: bool,\n+    pub operation: &'a O,\n+    pub pass_through_items: bool,\n+    pub visited_outermost: bool,\n }\n \n impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {"}, {"sha": "0c0d7bbb535f7e3fccd0eb1578e2549e83672279", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -337,8 +337,8 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n \n /// Represents the #[deprecated=\"foo\"] (etc) attributes.\n pub struct Stability {\n-    level: StabilityLevel,\n-    text: Option<InternedString>\n+    pub level: StabilityLevel,\n+    pub text: Option<InternedString>\n }\n \n /// The available stability levels."}, {"sha": "0d2492d7fad0f0de698ab6591c14fa8a39c076ba", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -86,19 +86,19 @@ to the original source.\n */\n #[deriving(Clone, Show, Hash)]\n pub struct Span {\n-    lo: BytePos,\n-    hi: BytePos,\n+    pub lo: BytePos,\n+    pub hi: BytePos,\n     /// Information about where the macro came from, if this piece of\n     /// code was created by a macro expansion.\n-    expn_info: Option<@ExpnInfo>\n+    pub expn_info: Option<@ExpnInfo>\n }\n \n pub static DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_info: None };\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Spanned<T> {\n-    node: T,\n-    span: Span,\n+    pub node: T,\n+    pub span: Span,\n }\n \n impl Eq for Span {\n@@ -143,26 +143,26 @@ pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n /// A source code location used for error reporting\n pub struct Loc {\n     /// Information about the original source\n-    file: Rc<FileMap>,\n+    pub file: Rc<FileMap>,\n     /// The (1-based) line number\n-    line: uint,\n+    pub line: uint,\n     /// The (0-based) column offset\n-    col: CharPos\n+    pub col: CharPos\n }\n \n /// A source code location used as the result of lookup_char_pos_adj\n // Actually, *none* of the clients use the filename *or* file field;\n // perhaps they should just be removed.\n pub struct LocWithOpt {\n-    filename: FileName,\n-    line: uint,\n-    col: CharPos,\n-    file: Option<Rc<FileMap>>,\n+    pub filename: FileName,\n+    pub line: uint,\n+    pub col: CharPos,\n+    pub file: Option<Rc<FileMap>>,\n }\n \n // used to be structural records. Better names, anyone?\n-pub struct FileMapAndLine {fm: Rc<FileMap>, line: uint}\n-pub struct FileMapAndBytePos {fm: Rc<FileMap>, pos: BytePos}\n+pub struct FileMapAndLine { pub fm: Rc<FileMap>, pub line: uint }\n+pub struct FileMapAndBytePos { pub fm: Rc<FileMap>, pub pos: BytePos }\n \n /// The syntax with which a macro was invoked.\n #[deriving(Clone, Hash, Show)]\n@@ -177,13 +177,13 @@ pub enum MacroFormat {\n pub struct NameAndSpan {\n     /// The name of the macro that was invoked to create the thing\n     /// with this Span.\n-    name: ~str,\n+    pub name: ~str,\n     /// The format with which the macro was invoked.\n-    format: MacroFormat,\n+    pub format: MacroFormat,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None.\n-    span: Option<Span>\n+    pub span: Option<Span>\n }\n \n /// Extra information for tracking macro expansion of spans\n@@ -198,45 +198,45 @@ pub struct ExpnInfo {\n     /// the expansion would point to the `bar!` invocation; that\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n-    call_site: Span,\n+    pub call_site: Span,\n     /// Information about the macro and its definition.\n     ///\n     /// The `callee` of the inner expression in the `call_site`\n     /// example would point to the `macro_rules! bar { ... }` and that\n     /// of the `bar!()` invocation would point to the `macro_rules!\n     /// foo { ... }`.\n-    callee: NameAndSpan\n+    pub callee: NameAndSpan\n }\n \n pub type FileName = ~str;\n \n pub struct FileLines {\n-    file: Rc<FileMap>,\n-    lines: Vec<uint>\n+    pub file: Rc<FileMap>,\n+    pub lines: Vec<uint>\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n-    pos: BytePos,\n+    pub pos: BytePos,\n     /// The number of bytes, >=2\n-    bytes: uint,\n+    pub bytes: uint,\n }\n \n /// A single source in the CodeMap\n pub struct FileMap {\n     /// The name of the file that the source came from, source that doesn't\n     /// originate from files has names between angle brackets by convention,\n     /// e.g. `<anon>`\n-    name: FileName,\n+    pub name: FileName,\n     /// The complete source code\n-    src: ~str,\n+    pub src: ~str,\n     /// The start position of this source in the CodeMap\n-    start_pos: BytePos,\n+    pub start_pos: BytePos,\n     /// Locations of lines beginnings in the source code\n-    lines: RefCell<Vec<BytePos> >,\n+    pub lines: RefCell<Vec<BytePos> >,\n     /// Locations of multi-byte characters in the source code\n-    multibyte_chars: RefCell<Vec<MultiByteChar> >,\n+    pub multibyte_chars: RefCell<Vec<MultiByteChar> >,\n }\n \n impl FileMap {\n@@ -284,7 +284,7 @@ impl FileMap {\n }\n \n pub struct CodeMap {\n-    files: RefCell<Vec<Rc<FileMap>>>\n+    pub files: RefCell<Vec<Rc<FileMap>>>\n }\n \n impl CodeMap {"}, {"sha": "353e1a23b5e089c099825206b9e1d08891d96809", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -24,11 +24,11 @@ use std::from_str::FromStr;\n pub struct CrateId {\n     /// A path which represents the codes origin. By convention this is the\n     /// URL, without `http://` or `https://` prefix, to the crate's repository\n-    path: ~str,\n+    pub path: ~str,\n     /// The name of the crate.\n-    name: ~str,\n+    pub name: ~str,\n     /// The version of the crate.\n-    version: Option<~str>,\n+    pub version: Option<~str>,\n }\n \n impl fmt::Show for CrateId {"}, {"sha": "fb0f458b88a2bbb05e4e2100cd0e20a66af4b2c1", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,8 +40,8 @@ pub struct ExplicitBug;\n // accepts span information for source-location\n // reporting.\n pub struct SpanHandler {\n-    handler: Handler,\n-    cm: codemap::CodeMap,\n+    pub handler: Handler,\n+    pub cm: codemap::CodeMap,\n }\n \n impl SpanHandler {\n@@ -216,7 +216,7 @@ fn print_diagnostic(dst: &mut EmitterWriter,\n }\n \n pub struct EmitterWriter {\n-    priv dst: Destination,\n+    dst: Destination,\n }\n \n enum Destination {"}, {"sha": "7ff779231325197dcdde806e77d277a3f7c4500d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,8 +30,8 @@ use collections::HashMap;\n // ast::MacInvocTT.\n \n pub struct MacroDef {\n-    name: ~str,\n-    ext: SyntaxExtension\n+    pub name: ~str,\n+    pub ext: SyntaxExtension\n }\n \n pub type ItemDecorator =\n@@ -41,8 +41,8 @@ pub type ItemModifier =\n     fn(&mut ExtCtxt, Span, @ast::MetaItem, @ast::Item) -> @ast::Item;\n \n pub struct BasicMacroExpander {\n-    expander: MacroExpanderFn,\n-    span: Option<Span>\n+    pub expander: MacroExpanderFn,\n+    pub span: Option<Span>\n }\n \n pub trait MacroExpander {\n@@ -68,8 +68,8 @@ impl MacroExpander for BasicMacroExpander {\n }\n \n pub struct BasicIdentMacroExpander {\n-    expander: IdentMacroExpanderFn,\n-    span: Option<Span>\n+    pub expander: IdentMacroExpanderFn,\n+    pub span: Option<Span>\n }\n \n pub trait IdentMacroExpander {\n@@ -172,9 +172,9 @@ pub enum SyntaxExtension {\n \n pub struct BlockInfo {\n     // should macros escape from this scope?\n-    macros_escape: bool,\n+    pub macros_escape: bool,\n     // what are the pending renames?\n-    pending_renames: RenameList,\n+    pub pending_renames: RenameList,\n }\n \n impl BlockInfo {\n@@ -292,8 +292,8 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n }\n \n pub struct MacroCrate {\n-    lib: Option<Path>,\n-    cnum: ast::CrateNum,\n+    pub lib: Option<Path>,\n+    pub cnum: ast::CrateNum,\n }\n \n pub trait CrateLoader {\n@@ -306,13 +306,13 @@ pub trait CrateLoader {\n // when a macro expansion occurs, the resulting nodes have the backtrace()\n // -> expn_info of their expansion context stored into their span.\n pub struct ExtCtxt<'a> {\n-    parse_sess: &'a parse::ParseSess,\n-    cfg: ast::CrateConfig,\n-    backtrace: Option<@ExpnInfo>,\n-    ecfg: expand::ExpansionConfig<'a>,\n+    pub parse_sess: &'a parse::ParseSess,\n+    pub cfg: ast::CrateConfig,\n+    pub backtrace: Option<@ExpnInfo>,\n+    pub ecfg: expand::ExpansionConfig<'a>,\n \n-    mod_path: Vec<ast::Ident> ,\n-    trace_mac: bool\n+    pub mod_path: Vec<ast::Ident> ,\n+    pub trace_mac: bool,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -532,7 +532,7 @@ struct MapChainFrame {\n \n // Only generic to make it easy to test\n pub struct SyntaxEnv {\n-    priv chain: Vec<MapChainFrame> ,\n+    chain: Vec<MapChainFrame> ,\n }\n \n impl SyntaxEnv {"}, {"sha": "0d851647b3de1d45936bd340b54ad94e904575dd", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -192,75 +192,77 @@ mod ty;\n \n pub struct TraitDef<'a> {\n     /// The span for the current #[deriving(Foo)] header.\n-    span: Span,\n+    pub span: Span,\n \n-    attributes: Vec<ast::Attribute> ,\n+    pub attributes: Vec<ast::Attribute>,\n \n     /// Path of the trait, including any type parameters\n-    path: Path<'a>,\n+    pub path: Path<'a>,\n \n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n-    additional_bounds: Vec<Ty<'a>> ,\n+    pub additional_bounds: Vec<Ty<'a>>,\n \n     /// Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`\n-    generics: LifetimeBounds<'a>,\n+    pub generics: LifetimeBounds<'a>,\n \n-    methods: Vec<MethodDef<'a>> }\n+    pub methods: Vec<MethodDef<'a>>,\n+}\n \n \n pub struct MethodDef<'a> {\n     /// name of the method\n-    name: &'a str,\n+    pub name: &'a str,\n     /// List of generics, e.g. `R: rand::Rng`\n-    generics: LifetimeBounds<'a>,\n+    pub generics: LifetimeBounds<'a>,\n \n     /// Whether there is a self argument (outer Option) i.e. whether\n     /// this is a static function, and whether it is a pointer (inner\n     /// Option)\n-    explicit_self: Option<Option<PtrTy<'a>>>,\n+    pub explicit_self: Option<Option<PtrTy<'a>>>,\n \n     /// Arguments other than the self argument\n-    args: Vec<Ty<'a>> ,\n+    pub args: Vec<Ty<'a>>,\n \n     /// Return type\n-    ret_ty: Ty<'a>,\n+    pub ret_ty: Ty<'a>,\n \n     /// Whether to mark this as #[inline]\n-    inline: bool,\n+    pub inline: bool,\n \n     /// if the value of the nonmatching enums is independent of the\n     /// actual enum variants, i.e. can use _ => .. match.\n-    const_nonmatching: bool,\n+    pub const_nonmatching: bool,\n \n-    combine_substructure: CombineSubstructureFunc<'a>\n+    pub combine_substructure: CombineSubstructureFunc<'a>,\n }\n \n /// All the data about the data structure/method being derived upon.\n pub struct Substructure<'a> {\n     /// ident of self\n-    type_ident: Ident,\n+    pub type_ident: Ident,\n     /// ident of the method\n-    method_ident: Ident,\n+    pub method_ident: Ident,\n     /// dereferenced access to any Self or Ptr(Self, _) arguments\n-    self_args: &'a [@Expr],\n+    pub self_args: &'a [@Expr],\n     /// verbatim access to any other arguments\n-    nonself_args: &'a [@Expr],\n-    fields: &'a SubstructureFields<'a>\n+    pub nonself_args: &'a [@Expr],\n+    pub fields: &'a SubstructureFields<'a>\n }\n \n /// Summary of the relevant parts of a struct/enum field.\n pub struct FieldInfo {\n-    span: Span,\n+    pub span: Span,\n     /// None for tuple structs/normal enum variants, Some for normal\n     /// structs/struct enum variants.\n-    name: Option<Ident>,\n+    pub name: Option<Ident>,\n     /// The expression corresponding to this field of `self`\n     /// (specifically, a reference to it).\n-    self_: @Expr,\n+    pub self_: @Expr,\n     /// The expressions corresponding to references to this field in\n     /// the other Self arguments.\n-    other: Vec<@Expr> }\n+    pub other: Vec<@Expr>,\n+}\n \n /// Fields for a static method\n pub enum StaticFields {"}, {"sha": "c4ca2601f601e27bc056ea9a41c30f1e26873388", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -29,10 +29,10 @@ pub enum PtrTy<'a> {\n /// A path, e.g. `::std::option::Option::<int>` (global). Has support\n /// for type parameters and a lifetime.\n pub struct Path<'a> {\n-    path: Vec<&'a str> ,\n-    lifetime: Option<&'a str>,\n-    params: Vec<~Ty<'a>> ,\n-    global: bool\n+    pub path: Vec<&'a str> ,\n+    pub lifetime: Option<&'a str>,\n+    pub params: Vec<~Ty<'a>> ,\n+    pub global: bool,\n }\n \n impl<'a> Path<'a> {\n@@ -205,8 +205,8 @@ fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -\n \n /// Lifetimes and bounds on type parameters\n pub struct LifetimeBounds<'a> {\n-    lifetimes: Vec<&'a str>,\n-    bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n+    pub lifetimes: Vec<&'a str>,\n+    pub bounds: Vec<(&'a str, Vec<Path<'a>>)>,\n }\n \n impl<'a> LifetimeBounds<'a> {"}, {"sha": "747ab583e792a27333acd5c4da0bf2b49ee120bc", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -838,8 +838,8 @@ pub fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n }\n \n pub struct MacroExpander<'a, 'b> {\n-    extsbox: SyntaxEnv,\n-    cx: &'a mut ExtCtxt<'b>,\n+    pub extsbox: SyntaxEnv,\n+    pub cx: &'a mut ExtCtxt<'b>,\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -869,9 +869,9 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n }\n \n pub struct ExpansionConfig<'a> {\n-    loader: &'a mut CrateLoader,\n-    deriving_hash_type_parameter: bool,\n-    crate_id: CrateId,\n+    pub loader: &'a mut CrateLoader,\n+    pub deriving_hash_type_parameter: bool,\n+    pub crate_id: CrateId,\n }\n \n pub fn expand_crate(parse_sess: &parse::ParseSess,"}, {"sha": "8fa4857cab02cb9c5106fa1b6595e077940500bd", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,16 +31,16 @@ struct TtFrame {\n \n #[deriving(Clone)]\n pub struct TtReader<'a> {\n-    sp_diag: &'a SpanHandler,\n+    pub sp_diag: &'a SpanHandler,\n     // the unzipped tree:\n-    priv stack: Vec<TtFrame>,\n+    stack: Vec<TtFrame>,\n     /* for MBE-style macro transcription */\n-    priv interpolations: HashMap<Ident, Rc<NamedMatch>>,\n-    priv repeat_idx: Vec<uint>,\n-    priv repeat_len: Vec<uint>,\n+    interpolations: HashMap<Ident, Rc<NamedMatch>>,\n+    repeat_idx: Vec<uint>,\n+    repeat_len: Vec<uint>,\n     /* cached: */\n-    cur_tok: Token,\n-    cur_span: Span,\n+    pub cur_tok: Token,\n+    pub cur_span: Span,\n }\n \n /** This can do Macro-By-Example transcription. On the other hand, if"}, {"sha": "e25a84d6cd45d939094645a3b0f18667eccb3ce8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -30,6 +30,8 @@ This API is completely unstable and subject to change.\n            quote)]\n #![allow(deprecated)]\n \n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+\n extern crate serialize;\n extern crate term;\n extern crate collections;"}, {"sha": "57529228b51f9d1d82a63b325618a2bc1fbb5af2", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -18,8 +18,8 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n #[unsafe_no_drop_flag] // data is set to null on destruction\n pub struct OwnedSlice<T> {\n     /// null iff len == 0\n-    priv data: *mut T,\n-    priv len: uint,\n+    data: *mut T,\n+    len: uint,\n }\n \n #[unsafe_destructor]"}, {"sha": "3bf1474c4612d8669875e0004ff184222c3bb049", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -31,9 +31,9 @@ pub enum CommentStyle {\n \n #[deriving(Clone)]\n pub struct Comment {\n-    style: CommentStyle,\n-    lines: Vec<~str> ,\n-    pos: BytePos\n+    pub style: CommentStyle,\n+    pub lines: Vec<~str>,\n+    pub pos: BytePos,\n }\n \n pub fn is_doc_comment(s: &str) -> bool {\n@@ -338,8 +338,8 @@ fn consume_comment(rdr: &mut StringReader,\n \n #[deriving(Clone)]\n pub struct Literal {\n-    lit: ~str,\n-    pos: BytePos\n+    pub lit: ~str,\n+    pub pos: BytePos,\n }\n \n // it appears this function is called only from pprust... that's"}, {"sha": "0d40638d3a7dcb867df2ceddd229d38b3ee60175", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -13,8 +13,8 @@ use parse::token;\n // SeqSep : a sequence separator (token)\n // and whether a trailing separator is allowed.\n pub struct SeqSep {\n-    sep: Option<token::Token>,\n-    trailing_sep_allowed: bool\n+    pub sep: Option<token::Token>,\n+    pub trailing_sep_allowed: bool\n }\n \n pub fn seq_sep_trailing_disallowed(t: token::Token) -> SeqSep {"}, {"sha": "23d7cc0af97e4e4e18b65ecac8130e3c73f634eb", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -34,24 +34,24 @@ pub trait Reader {\n \n #[deriving(Clone, Eq, Show)]\n pub struct TokenAndSpan {\n-    tok: token::Token,\n-    sp: Span,\n+    pub tok: token::Token,\n+    pub sp: Span,\n }\n \n pub struct StringReader<'a> {\n-    span_diagnostic: &'a SpanHandler,\n+    pub span_diagnostic: &'a SpanHandler,\n     // The absolute offset within the codemap of the next character to read\n-    pos: BytePos,\n+    pub pos: BytePos,\n     // The absolute offset within the codemap of the last character read(curr)\n-    last_pos: BytePos,\n+    pub last_pos: BytePos,\n     // The column of the next character to read\n-    col: CharPos,\n+    pub col: CharPos,\n     // The last character to be read\n-    curr: Option<char>,\n-    filemap: Rc<codemap::FileMap>,\n+    pub curr: Option<char>,\n+    pub filemap: Rc<codemap::FileMap>,\n     /* cached: */\n-    peek_tok: token::Token,\n-    peek_span: Span,\n+    pub peek_tok: token::Token,\n+    pub peek_span: Span,\n }\n \n impl<'a> StringReader<'a> {"}, {"sha": "76126e6780a2b7f7ed3dd24f0ea9d81bedb4e790", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -39,7 +39,7 @@ pub mod obsolete;\n \n // info about a parsing session.\n pub struct ParseSess {\n-    span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n+    pub span_diagnostic: SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: RefCell<Vec<Path>>,\n }"}, {"sha": "2d0c4ca488eab3d7476b2af9009e5a2b7480b952", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -78,7 +78,6 @@ use parse::{new_sub_parser_from_file, ParseSess};\n use owned_slice::OwnedSlice;\n \n use collections::HashSet;\n-use std::kinds::marker;\n use std::mem::replace;\n use std::rc::Rc;\n \n@@ -113,8 +112,8 @@ pub enum PathParsingMode {\n \n /// A path paired with optional type bounds.\n pub struct PathAndBounds {\n-    path: ast::Path,\n-    bounds: Option<OwnedSlice<TyParamBound>>,\n+    pub path: ast::Path,\n+    pub bounds: Option<OwnedSlice<TyParamBound>>,\n }\n \n enum ItemOrViewItem {\n@@ -306,38 +305,35 @@ pub fn Parser<'a>(sess: &'a ParseSess, cfg: ast::CrateConfig, mut rdr: ~Reader:)\n         obsolete_set: HashSet::new(),\n         mod_path_stack: Vec::new(),\n         open_braces: Vec::new(),\n-        nocopy: marker::NoCopy\n     }\n }\n \n pub struct Parser<'a> {\n-    sess: &'a ParseSess,\n-    cfg: CrateConfig,\n+    pub sess: &'a ParseSess,\n     // the current token:\n-    token: token::Token,\n+    pub token: token::Token,\n     // the span of the current token:\n-    span: Span,\n+    pub span: Span,\n     // the span of the prior token:\n-    last_span: Span,\n+    pub last_span: Span,\n+    pub cfg: CrateConfig,\n     // the previous token or None (only stashed sometimes).\n-    last_token: Option<~token::Token>,\n-    buffer: [TokenAndSpan, ..4],\n-    buffer_start: int,\n-    buffer_end: int,\n-    tokens_consumed: uint,\n-    restriction: restriction,\n-    quote_depth: uint, // not (yet) related to the quasiquoter\n-    reader: ~Reader:,\n-    interner: Rc<token::IdentInterner>,\n+    pub last_token: Option<~token::Token>,\n+    pub buffer: [TokenAndSpan, ..4],\n+    pub buffer_start: int,\n+    pub buffer_end: int,\n+    pub tokens_consumed: uint,\n+    pub restriction: restriction,\n+    pub quote_depth: uint, // not (yet) related to the quasiquoter\n+    pub reader: ~Reader:,\n+    pub interner: Rc<token::IdentInterner>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n     /// extra detail when the same error is seen twice\n-    obsolete_set: HashSet<ObsoleteSyntax>,\n+    pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n-    mod_path_stack: Vec<InternedString> ,\n+    pub mod_path_stack: Vec<InternedString>,\n     /// Stack of spans of open delimiters. Used for error message.\n-    open_braces: Vec<Span> ,\n-    /* do not copy the parser; its state is tied to outside state */\n-    priv nocopy: marker::NoCopy\n+    pub open_braces: Vec<Span>,\n }\n \n fn is_plain_ident_or_underscore(t: &token::Token) -> bool {"}, {"sha": "2c5698ddec4035fe1403db90f9106cf98805d799", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -556,7 +556,7 @@ pub fn get_ident_interner() -> Rc<IdentInterner> {\n /// somehow.\n #[deriving(Clone, Eq, Hash, Ord, TotalEq, TotalOrd)]\n pub struct InternedString {\n-    priv string: RcStr,\n+    string: RcStr,\n }\n \n impl InternedString {"}, {"sha": "7b64d0293cce4816c51e4628d3a513b75950c67a", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -257,7 +257,7 @@ pub fn mk_printer(out: ~io::Writer, linewidth: uint) -> Printer {\n  * called 'print'.\n  */\n pub struct Printer {\n-    out: ~io::Writer,\n+    pub out: ~io::Writer,\n     buf_len: uint,\n     margin: int, // width of lines we're constrained to\n     space: int, // number of spaces left on line"}, {"sha": "98a3ff309162390574efe160fd12bd47aeaefb1e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -54,7 +54,7 @@ pub struct CurrentCommentAndLiteral {\n }\n \n pub struct State<'a> {\n-    s: pp::Printer,\n+    pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,\n     intr: Rc<token::IdentInterner>,\n     comments: Option<Vec<comments::Comment> >,"}, {"sha": "b7932da8738da909c4e84d81e2c3e880f7e4bf62", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -23,8 +23,8 @@ use std::hash::Hash;\n use std::rc::Rc;\n \n pub struct Interner<T> {\n-    priv map: RefCell<HashMap<T, Name>>,\n-    priv vect: RefCell<Vec<T> >,\n+    map: RefCell<HashMap<T, Name>>,\n+    vect: RefCell<Vec<T> >,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n@@ -92,7 +92,7 @@ impl<T: TotalEq + Hash + Clone + 'static> Interner<T> {\n \n #[deriving(Clone, Eq, Hash, Ord)]\n pub struct RcStr {\n-    priv string: Rc<~str>,\n+    string: Rc<~str>,\n }\n \n impl TotalEq for RcStr {}\n@@ -134,8 +134,8 @@ impl RcStr {\n // A StrInterner differs from Interner<String> in that it accepts\n // &str rather than RcStr, resulting in less allocation.\n pub struct StrInterner {\n-    priv map: RefCell<HashMap<RcStr, Name>>,\n-    priv vect: RefCell<Vec<RcStr> >,\n+    map: RefCell<HashMap<RcStr, Name>>,\n+    vect: RefCell<Vec<RcStr> >,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []"}, {"sha": "15ba5266cb30f9e128177312eac2c0448343360c", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,7 +20,10 @@\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n #![feature(macro_rules)]\n-#![deny(missing_doc)]\n+\n+// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n+#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n+#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n \n extern crate collections;\n \n@@ -111,9 +114,9 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n /// A Terminal that knows how many colors it supports, with a reference to its\n /// parsed TermInfo database record.\n pub struct Terminal<T> {\n-    priv num_colors: u16,\n-    priv out: T,\n-    priv ti: ~TermInfo\n+    num_colors: u16,\n+    out: T,\n+    ti: ~TermInfo\n }\n \n impl<T: Writer> Terminal<T> {"}, {"sha": "ff01a8406edbbe9176abdd989631a839e5baca8c", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -15,13 +15,13 @@ use collections::HashMap;\n /// A parsed terminfo database entry.\n pub struct TermInfo {\n     /// Names for the terminal\n-    priv names: Vec<~str> ,\n+    pub names: Vec<~str> ,\n     /// Map of capability name to boolean value\n-    priv bools: HashMap<~str, bool>,\n+    pub bools: HashMap<~str, bool>,\n     /// Map of capability name to numeric value\n-    numbers: HashMap<~str, u16>,\n+    pub numbers: HashMap<~str, u16>,\n     /// Map of capability name to raw (unexpanded) string\n-    strings: HashMap<~str, Vec<u8> >\n+    pub strings: HashMap<~str, Vec<u8> >\n }\n \n pub mod searcher;"}, {"sha": "aed752fcb094aeeabd7be26409ab520256db181d", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -48,9 +48,9 @@ pub enum Param {\n /// Container for static and dynamic variable arrays\n pub struct Variables {\n     /// Static variables A-Z\n-    priv sta: [Param, ..26],\n+    sta: [Param, ..26],\n     /// Dynamic variables a-z\n-    priv dyn: [Param, ..26]\n+    dyn: [Param, ..26]\n }\n \n impl Variables {"}, {"sha": "b1d4fead43bbcdddf2ada7ac872ba9a2c2dee862", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -147,30 +147,30 @@ impl TestFn {\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n pub struct BenchHarness {\n-    priv iterations: u64,\n-    priv ns_start: u64,\n-    priv ns_end: u64,\n-    bytes: u64\n+    iterations: u64,\n+    ns_start: u64,\n+    ns_end: u64,\n+    pub bytes: u64,\n }\n \n // The definition of a single test. A test runner will run a list of\n // these.\n #[deriving(Clone)]\n pub struct TestDesc {\n-    name: TestName,\n-    ignore: bool,\n-    should_fail: bool\n+    pub name: TestName,\n+    pub ignore: bool,\n+    pub should_fail: bool,\n }\n \n pub struct TestDescAndFn {\n-    desc: TestDesc,\n-    testfn: TestFn,\n+    pub desc: TestDesc,\n+    pub testfn: TestFn,\n }\n \n #[deriving(Clone, Encodable, Decodable, Eq, Show)]\n pub struct Metric {\n-    priv value: f64,\n-    priv noise: f64\n+    value: f64,\n+    noise: f64\n }\n \n impl Metric {\n@@ -242,15 +242,15 @@ pub fn test_main_static(args: &[~str], tests: &[TestDescAndFn]) {\n }\n \n pub struct TestOpts {\n-    filter: Option<~str>,\n-    run_ignored: bool,\n-    run_tests: bool,\n-    run_benchmarks: bool,\n-    ratchet_metrics: Option<Path>,\n-    ratchet_noise_percent: Option<f64>,\n-    save_metrics: Option<Path>,\n-    test_shard: Option<(uint,uint)>,\n-    logfile: Option<Path>\n+    pub filter: Option<~str>,\n+    pub run_ignored: bool,\n+    pub run_tests: bool,\n+    pub run_benchmarks: bool,\n+    pub ratchet_metrics: Option<Path>,\n+    pub ratchet_noise_percent: Option<f64>,\n+    pub save_metrics: Option<Path>,\n+    pub test_shard: Option<(uint,uint)>,\n+    pub logfile: Option<Path>\n }\n \n /// Result of parsing the options.\n@@ -375,8 +375,8 @@ pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n \n #[deriving(Clone, Eq)]\n pub struct BenchSamples {\n-    priv ns_iter_summ: stats::Summary,\n-    priv mb_s: uint\n+    ns_iter_summ: stats::Summary,\n+    mb_s: uint,\n }\n \n #[deriving(Clone, Eq)]"}, {"sha": "e4439e57742ed60078c1e89b0aeb1b04a7b311ee", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -130,18 +130,18 @@ pub trait Stats {\n #[deriving(Clone, Eq)]\n #[allow(missing_doc)]\n pub struct Summary {\n-    sum: f64,\n-    min: f64,\n-    max: f64,\n-    mean: f64,\n-    median: f64,\n-    var: f64,\n-    std_dev: f64,\n-    std_dev_pct: f64,\n-    median_abs_dev: f64,\n-    median_abs_dev_pct: f64,\n-    quartiles: (f64,f64,f64),\n-    iqr: f64,\n+    pub sum: f64,\n+    pub min: f64,\n+    pub max: f64,\n+    pub mean: f64,\n+    pub median: f64,\n+    pub var: f64,\n+    pub std_dev: f64,\n+    pub std_dev_pct: f64,\n+    pub median_abs_dev: f64,\n+    pub median_abs_dev_pct: f64,\n+    pub quartiles: (f64,f64,f64),\n+    pub iqr: f64,\n }\n \n impl Summary {"}, {"sha": "41bfa7e3ef8dcbf478b70e5a66860508f69b69ef", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -51,40 +51,40 @@ use collections::HashMap;\n #[deriving(Clone, Eq, TotalEq)]\n pub struct Url {\n     /// The scheme part of a URL, such as `https` in the above example.\n-    scheme: ~str,\n+    pub scheme: ~str,\n     /// A URL subcomponent for user authentication.  `username` in the above example.\n-    user: Option<UserInfo>,\n+    pub user: Option<UserInfo>,\n     /// A domain name or IP address.  For example, `example.com`.\n-    host: ~str,\n+    pub host: ~str,\n     /// A TCP port number, for example `8080`.\n-    port: Option<~str>,\n+    pub port: Option<~str>,\n     /// The path component of a URL, for example `/foo/bar`.\n-    path: ~str,\n+    pub path: ~str,\n     /// The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\n     /// fragment `baz=qux` in the above example.\n-    query: Query,\n+    pub query: Query,\n     /// The fragment component, such as `quz`.  Doesn't include the leading `#` character.\n-    fragment: Option<~str>\n+    pub fragment: Option<~str>\n }\n \n #[deriving(Clone, Eq)]\n pub struct Path {\n     /// The path component of a URL, for example `/foo/bar`.\n-    path: ~str,\n+    pub path: ~str,\n     /// The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\n     /// fragment `baz=qux` in the above example.\n-    query: Query,\n+    pub query: Query,\n     /// The fragment component, such as `quz`.  Doesn't include the leading `#` character.\n-    fragment: Option<~str>\n+    pub fragment: Option<~str>\n }\n \n /// An optional subcomponent of a URI authority component.\n #[deriving(Clone, Eq, TotalEq)]\n pub struct UserInfo {\n     /// The user name.\n-    user: ~str,\n+    pub user: ~str,\n     /// Password or other scheme-specific authentication information.\n-    pass: Option<~str>\n+    pub pass: Option<~str>\n }\n \n /// Represents the query component of a URI."}, {"sha": "571f43401205817c6ee13dba73e6f6b9a78200b5", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -140,9 +140,9 @@ impl WorkMap {\n }\n \n pub struct Database {\n-    priv db_filename: Path,\n-    priv db_cache: TreeMap<~str, ~str>,\n-    db_dirty: bool\n+    db_filename: Path,\n+    db_cache: TreeMap<~str, ~str>,\n+    pub db_dirty: bool,\n }\n \n impl Database {\n@@ -225,26 +225,26 @@ pub type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n \n #[deriving(Clone)]\n pub struct Context {\n-    db: Arc<RWLock<Database>>,\n-    priv cfg: Arc<json::Object>,\n+    pub db: Arc<RWLock<Database>>,\n+    cfg: Arc<json::Object>,\n     /// Map from kinds (source, exe, url, etc.) to a freshness function.\n     /// The freshness function takes a name (e.g. file path) and value\n     /// (e.g. hash of file contents) and determines whether it's up-to-date.\n     /// For example, in the file case, this would read the file off disk,\n     /// hash it, and return the result of comparing the given hash and the\n     /// read hash for equality.\n-    priv freshness: Arc<FreshnessMap>\n+    freshness: Arc<FreshnessMap>\n }\n \n pub struct Prep<'a> {\n-    priv ctxt: &'a Context,\n-    priv fn_name: &'a str,\n-    priv declared_inputs: WorkMap,\n+    ctxt: &'a Context,\n+    fn_name: &'a str,\n+    declared_inputs: WorkMap,\n }\n \n pub struct Exec {\n-    priv discovered_inputs: WorkMap,\n-    priv discovered_outputs: WorkMap\n+    discovered_inputs: WorkMap,\n+    discovered_outputs: WorkMap\n }\n \n enum Work<'a, T> {"}, {"sha": "666d2569c42b41275f3f7596ef77af22bfec6557", "filename": "src/test/auxiliary/anon_trait_static_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub struct Foo {\n-    x: int\n+    pub x: int\n }\n \n impl Foo {"}, {"sha": "50116b397372f6319e97e31000d3c6d1a9b7a9ad", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv meows : uint,\n+      meows : uint,\n \n-      how_hungry : int,\n+      pub how_hungry : int,\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat  {"}, {"sha": "55fb424205eb82de2a389bfdd178375391592438", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv meows : uint,\n+      meows : uint,\n \n-      how_hungry : int,\n+      pub how_hungry : int,\n \n     }\n "}, {"sha": "6a57bb36663c362e9e988ce063bbd7cc0efd82d9", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n+        meows : uint,\n \n-        how_hungry : int,\n+        pub how_hungry : int,\n     }\n \n     impl cat {"}, {"sha": "733509753d3846beb8ffdc0fe3db6ff12af2b484", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,10 +10,10 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n+        meows : uint,\n \n-        how_hungry : int,\n-        name : ~str,\n+        pub how_hungry : int,\n+        pub name : ~str,\n     }\n \n     impl cat {"}, {"sha": "d113859a6bdc773100df08f3e9e477c38fa9c0d4", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,8 +10,8 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n-        how_hungry : int,\n+        meows : uint,\n+        pub how_hungry : int,\n     }\n \n     impl cat {"}, {"sha": "71552f4c97efce71317c439c77c218467c395cf2", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,10 +11,10 @@\n pub mod kitties {\n \n     pub struct cat<U> {\n-        priv info : Vec<U> ,\n-        priv meows : uint,\n+        info : Vec<U> ,\n+        meows : uint,\n \n-        how_hungry : int,\n+        pub how_hungry : int,\n     }\n \n     impl<U> cat<U> {"}, {"sha": "2ce4f818659e887224be01346a334176d08365b0", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,9 +12,9 @@ pub mod kitty {\n     use std::fmt;\n \n     pub struct cat {\n-      priv meows : uint,\n-      how_hungry : int,\n-      name : ~str,\n+      meows : uint,\n+      pub how_hungry : int,\n+      pub name : ~str,\n     }\n \n     impl fmt::Show for cat {"}, {"sha": "4a1a481091979698964a6aa4eccf1ad37989de86", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,7 +12,7 @@\n \n #[crate_type = \"lib\"];\n \n-pub struct NameVal { name: ~str, val: int }\n+pub struct NameVal { pub name: ~str, pub val: int }\n \n pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }"}, {"sha": "f2896ec6ecbd23e6bbbd61309bb3007057a89f7e", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,7 +12,7 @@\n \n #[crate_type = \"lib\"];\n \n-pub struct NameVal { name: ~str, val: int }\n+pub struct NameVal { pub name: ~str, pub val: int }\n pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }\n }"}, {"sha": "e482e8c62cab23604ac39c517cf6bb43c79c0c5d", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,7 +14,7 @@ pub trait Foo {\n }\n \n pub struct Bar {\n-    x: ~str\n+    pub x: ~str\n }\n \n impl Foo for Bar {"}, {"sha": "de182c48c41f8a1fc8091825ac5f00ba5d5cf3db", "filename": "src/test/auxiliary/impl_privacy_xc_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,7 +11,7 @@\n #[crate_type = \"lib\"];\n \n pub struct Fish {\n-    x: int\n+    pub x: int\n }\n \n impl Fish {"}, {"sha": "b98e86fc3b0053c0240a500277f7367fcb22d5a3", "filename": "src/test/auxiliary/impl_privacy_xc_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,7 +11,7 @@\n #[crate_type = \"lib\"];\n \n pub struct Fish {\n-    x: int\n+    pub x: int\n }\n \n mod unexported {"}, {"sha": "12b871b566b7a93ecff2bcbf3ea062b428ba8cde", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,11 +11,11 @@\n #[feature(struct_variant)];\n \n pub struct BTree<V> {\n-    node: TreeItem<V>,\n+    pub node: TreeItem<V>,\n }\n \n pub enum TreeItem<V> {\n-    TreeLeaf { value: V },\n+    TreeLeaf { pub value: V },\n }\n \n pub fn leaf<V>(value: V) -> TreeItem<V> {"}, {"sha": "72fe2bcec97755367cf371dedd01bf022b7cbfc4", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,7 +14,7 @@ extern crate issue2378a;\n \n use issue2378a::maybe;\n \n-pub struct two_maybes<T> {a: maybe<T>, b: maybe<T>}\n+pub struct two_maybes<T> {pub a: maybe<T>, pub b: maybe<T>}\n \n impl<T:Clone> Index<uint,(T,T)> for two_maybes<T> {\n     fn index(&self, idx: &uint) -> (T, T) {"}, {"sha": "30224912d9265666eeec2b9b7ce6cc75b463496f", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -116,18 +116,18 @@ pub trait Trait {\n impl Trait for MethodTester {}\n \n #[deprecated]\n-pub struct DeprecatedStruct { i: int }\n+pub struct DeprecatedStruct { pub i: int }\n #[experimental]\n-pub struct ExperimentalStruct { i: int }\n+pub struct ExperimentalStruct { pub i: int }\n #[unstable]\n-pub struct UnstableStruct { i: int }\n-pub struct UnmarkedStruct { i: int }\n+pub struct UnstableStruct { pub i: int }\n+pub struct UnmarkedStruct { pub i: int }\n #[stable]\n-pub struct StableStruct { i: int }\n+pub struct StableStruct { pub i: int }\n #[frozen]\n-pub struct FrozenStruct { i: int }\n+pub struct FrozenStruct { pub i: int }\n #[locked]\n-pub struct LockedStruct { i: int }\n+pub struct LockedStruct { pub i: int }\n \n #[deprecated]\n pub struct DeprecatedUnitStruct;"}, {"sha": "850050fe3a5a2eb21bfd1059a1dc0028f38a1e74", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,7 +11,7 @@\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n-    helper: H\n+    pub helper: H\n }\n \n trait Helper<T> {"}, {"sha": "8e1e591d94fca8dcc227ac8ae087b8269c828661", "filename": "src/test/auxiliary/pub_use_xcrate1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub struct Foo {\n-    name: int\n+    pub name: int\n }"}, {"sha": "e2c16ae8b5c492c6e9bedaacc27ea5bd39cdd9fb", "filename": "src/test/auxiliary/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,6 +14,6 @@ struct A {\n }\n \n pub struct B {\n-    a: int,\n-    priv b: int,\n+    pub a: int,\n+    b: int,\n }"}, {"sha": "328383313636f53811299fedb12406b78fc37b62", "filename": "src/test/auxiliary/struct_destructuring_cross_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,6 +11,6 @@\n #[crate_type=\"lib\"];\n \n pub struct S {\n-    x: int,\n-    y: int\n+    pub x: int,\n+    pub y: int,\n }"}, {"sha": "1a756e432c3d8a54de537968c7abd9d7be3af0ac", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,5 +14,5 @@\n #![feature(struct_variant)]\n \n pub enum Enum {\n-    Variant { arg: u8 }\n+    Variant { pub arg: u8 }\n }"}, {"sha": "535ebebc7223263708d44e77eaabae79c28e3947", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,7 @@\n \n #[crate_id=\"trait_default_method_xc_aux\"];\n \n-pub struct Something { x: int }\n+pub struct Something { pub x: int }\n \n pub trait A {\n     fn f(&self) -> int;"}, {"sha": "984264a969cec8af2ce99f2c41fb21c5f2dc5f8c", "filename": "src/test/auxiliary/trait_default_method_xc_aux_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -13,7 +13,7 @@\n extern crate aux = \"trait_default_method_xc_aux\";\n use aux::A;\n \n-pub struct a_struct { x: int }\n+pub struct a_struct { pub x: int }\n \n impl A for a_struct {\n     fn f(&self) -> int { 10 }"}, {"sha": "9ef53795a26b44534c1ff0dc65cff8ac9c98d4e9", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_2_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,7 +12,7 @@ pub trait Foo { fn f(&self) -> int; }\n pub trait Bar { fn g(&self) -> int; }\n pub trait Baz { fn h(&self) -> int; }\n \n-pub struct A { x: int }\n+pub struct A { pub x: int }\n \n impl Foo for A { fn f(&self) -> int { 10 } }\n impl Bar for A { fn g(&self) -> int { 20 } }"}, {"sha": "0a84595124a12d366664db795398cc048377fc8e", "filename": "src/test/auxiliary/trait_inheritance_cross_trait_call_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -14,7 +14,7 @@ pub trait Foo {\n }\n \n pub struct A {\n-    x: int\n+    pub x: int\n }\n \n impl Foo for A {"}, {"sha": "4b7a72f50430c0eb044fb0664d198de2378101c8", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -15,7 +15,7 @@ pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq {\n \n #[deriving(Show)]\n pub struct MyInt {\n-    val: int\n+    pub val: int\n }\n \n impl Add<MyInt, MyInt> for MyInt {"}, {"sha": "b9f15f1c54ea6a1ce5715fef16b9d439e2306833", "filename": "src/test/auxiliary/xc_private_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -11,7 +11,7 @@\n #[crate_type=\"lib\"];\n \n pub struct Struct {\n-    x: int\n+    pub x: int\n }\n \n impl Struct {"}, {"sha": "736ac55aef545e7256124da3c724df08975f7a15", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,7 +12,7 @@\n \n mod my_mod {\n     pub struct MyStruct {\n-        priv priv_field: int\n+        priv_field: int\n     }\n     pub fn MyStruct () -> MyStruct {\n         MyStruct {priv_field: 4}"}, {"sha": "bf8933220bcd6165425e8937de703b8fd80c40c1", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -24,14 +24,14 @@ struct Foo {\n }\n \n pub struct PubFoo { //~ ERROR: missing documentation\n-    a: int,      //~ ERROR: missing documentation\n-    priv b: int,\n+    pub a: int,      //~ ERROR: missing documentation\n+    b: int,\n }\n \n #[allow(missing_doc)]\n pub struct PubFoo2 {\n-    a: int,\n-    c: int,\n+    pub a: int,\n+    pub c: int,\n }\n \n mod module_no_dox {}\n@@ -106,8 +106,8 @@ enum Baz {\n \n pub enum PubBaz { //~ ERROR: missing documentation\n     PubBazA { //~ ERROR: missing documentation\n-        a: int, //~ ERROR: missing documentation\n-        priv b: int\n+        pub a: int, //~ ERROR: missing documentation\n+        b: int\n     },\n \n     priv PubBazB\n@@ -118,17 +118,17 @@ pub enum PubBaz2 {\n     /// dox\n     PubBaz2A {\n         /// dox\n-        a: int,\n-        priv b: int\n+        pub a: int,\n+        b: int\n     },\n     priv PubBaz2B\n }\n \n #[allow(missing_doc)]\n pub enum PubBaz3 {\n     PubBaz3A {\n-        a: int,\n-        priv b: int\n+        pub a: int,\n+        b: int\n     },\n     priv PubBaz3B\n }"}, {"sha": "a25b211e481bf9f914b23bbaebdbe0050a680f8e", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -40,8 +40,8 @@ mod test {\n }\n \n mod foo {\n-    pub struct Point{x: int, y: int}\n-    pub struct Square{p: Point, h: uint, w: uint}\n+    pub struct Point{pub x: int, pub y: int}\n+    pub struct Square{pub p: Point, pub h: uint, pub w: uint}\n }\n \n mod bar {"}, {"sha": "7c387d0cf5642cac305150c28cb5f04da7984ea5", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -46,8 +46,8 @@ fn y(_: Private<int>) {}\n \n \n pub struct Foo {\n-    x: Private<int>, //~ ERROR private type in exported type signature\n-    priv y: Private<int>\n+    pub x: Private<int>, //~ ERROR private type in exported type signature\n+    y: Private<int>\n }\n \n struct Bar {\n@@ -57,8 +57,8 @@ struct Bar {\n pub enum Baz {\n     Baz1(Private<int>), //~ ERROR private type in exported type signature\n     Baz2 {\n-        x: Private<int>, //~ ERROR private type in exported type signature\n-        priv y: Private<int>\n+        pub x: Private<int>, //~ ERROR private type in exported type signature\n+        y: Private<int>\n     },\n \n     priv Baz3(Private<int>),"}, {"sha": "fe5908b40ab4fa4373d9da004a5977184c8160d6", "filename": "src/test/compile-fail/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,7 @@\n \n mod a {\n     pub struct Foo {\n-        x: int\n+        pub x: int\n     }\n \n     impl Foo {"}, {"sha": "a5cee47d4e39a30dee2d355a9e07a03bac787363", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,7 @@\n \n mod a {\n     pub struct Foo {\n-        priv x: int\n+        x: int\n     }\n }\n "}, {"sha": "ee1303b99dd52dd398b3d390cc7bedd2cc6488a3", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -12,7 +12,7 @@ use a::Foo;\n \n mod a {\n     pub struct Foo {\n-        priv x: int\n+        x: int\n     }\n \n     pub fn make() -> Foo {"}, {"sha": "52e979342f57df732e3fe9b1096996269e388eca", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,7 @@\n \n mod cat {\n     pub struct Cat {\n-        priv meows: uint\n+        meows: uint\n     }\n \n     pub fn new_cat() -> Cat {"}, {"sha": "b6ae7235bb3de75e1e09200550519bd3c53acedc", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -20,12 +20,10 @@ mod inner {\n     struct A {\n         a: int,\n         pub b: int,\n-        priv c: int, //~ ERROR: unnecessary `priv` visibility\n     }\n     pub struct B {\n-        a: int,\n-        priv b: int,\n-        pub c: int,\n+        pub a: int,\n+        b: int,\n     }\n }\n \n@@ -36,10 +34,8 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     a.a;\n     b.a; //~ ERROR: field `a` is private\n     b.b;\n-    b.c; //~ ERROR: field `c` is private\n     c.a;\n     c.b; //~ ERROR: field `b` is private\n-    c.c;\n \n     d.a; //~ ERROR: field `a` is private\n     d.b;"}, {"sha": "9216c8aa1aef92c9218ac182cd3c43bf8e5e2f62", "filename": "src/test/run-pass/issue-3847.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3847.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod buildings {\n-    pub struct Tower { height: uint }\n+    pub struct Tower { pub height: uint }\n }\n \n pub fn main() {"}, {"sha": "168389bf2b879c06dcfb3a4f82079a5f48e5e826", "filename": "src/test/run-pass/issue-4830.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4830.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,7 +10,7 @@\n \n pub struct Scheduler {\n     /// The event loop used to drive the scheduler and perform I/O\n-    priv event_loop: ~int\n+    event_loop: ~int\n }\n \n pub fn main() { }"}, {"sha": "b1c1b64ba40033ef98c1f81f343d61320cc1aa2d", "filename": "src/test/run-pass/module-qualified-struct-destructure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -10,8 +10,8 @@\n \n mod m {\n     pub struct S {\n-        x: int,\n-        y: int\n+        pub x: int,\n+        pub y: int\n     }\n }\n "}, {"sha": "1276171853f1cf6e92fd6b0fd0004127522060bd", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -29,8 +29,8 @@ impl<X, Y> Deref<Y> for DerefWrapper<X, Y> {\n \n mod priv_test {\n     pub struct DerefWrapperHideX<X, Y> {\n-        priv x: X,\n-        y: Y\n+        x: X,\n+        pub y: Y\n     }\n \n     impl<X, Y> DerefWrapperHideX<X, Y> {"}, {"sha": "0974efa00eef5d603bab620547d114dbc275d10c", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "patch": "@@ -24,7 +24,7 @@ fn welp<T>(i: int, _x: &T) -> int {\n }\n \n mod stuff {\n-    pub struct thing { x: int }\n+    pub struct thing { pub x: int }\n }\n \n impl A for stuff::thing {"}]}