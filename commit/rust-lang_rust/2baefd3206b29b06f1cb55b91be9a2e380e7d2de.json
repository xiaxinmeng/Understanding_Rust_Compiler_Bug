{"sha": "2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWVmZDMyMDZiMjliMDZmMWNiNTViOTFiZTlhMmUzODBlN2QyZGU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-08-02T13:09:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-08-02T13:49:26Z"}, "message": "Move IntercrateAmbiguityCause to librustc_trait_selection.", "tree": {"sha": "06fcc51adb547873bf69d71149f8ffad9bb3e4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06fcc51adb547873bf69d71149f8ffad9bb3e4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "html_url": "https://github.com/rust-lang/rust/commit/2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2baefd3206b29b06f1cb55b91be9a2e380e7d2de/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e288d050127f0bf78b325ef4d34b8b697ce28c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/e288d050127f0bf78b325ef4d34b8b697ce28c80", "html_url": "https://github.com/rust-lang/rust/commit/e288d050127f0bf78b325ef4d34b8b697ce28c80"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "6ad514c6be21b93dd79c3ef546ae2636ed980096", "filename": "src/librustc_middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2baefd3206b29b06f1cb55b91be9a2e380e7d2de/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baefd3206b29b06f1cb55b91be9a2e380e7d2de/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fselect.rs?ref=2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "patch": "@@ -253,44 +253,3 @@ impl<'tcx> From<OverflowError> for SelectionError<'tcx> {\n         SelectionError::Overflow\n     }\n }\n-\n-#[derive(Clone, Debug)]\n-pub enum IntercrateAmbiguityCause {\n-    DownstreamCrate { trait_desc: String, self_desc: Option<String> },\n-    UpstreamCrateUpdate { trait_desc: String, self_desc: Option<String> },\n-    ReservationImpl { message: String },\n-}\n-\n-impl IntercrateAmbiguityCause {\n-    /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n-    /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n-        err.note(&self.intercrate_ambiguity_hint());\n-    }\n-\n-    pub fn intercrate_ambiguity_hint(&self) -> String {\n-        match self {\n-            &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n-                    format!(\" for type `{}`\", ty)\n-                } else {\n-                    String::new()\n-                };\n-                format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n-            }\n-            &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n-                    format!(\" for type `{}`\", ty)\n-                } else {\n-                    String::new()\n-                };\n-                format!(\n-                    \"upstream crates may add a new impl of trait `{}`{} \\\n-                     in future versions\",\n-                    trait_desc, self_desc\n-                )\n-            }\n-            &IntercrateAmbiguityCause::ReservationImpl { ref message } => message.clone(),\n-        }\n-    }\n-}"}, {"sha": "75e11619924308ae39053483c9cd144d7ef3bd59", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2baefd3206b29b06f1cb55b91be9a2e380e7d2de/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2baefd3206b29b06f1cb55b91be9a2e380e7d2de/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=2baefd3206b29b06f1cb55b91be9a2e380e7d2de", "patch": "@@ -51,6 +51,47 @@ pub use rustc_middle::traits::select::*;\n mod candidate_assembly;\n mod confirmation;\n \n+#[derive(Clone, Debug)]\n+pub enum IntercrateAmbiguityCause {\n+    DownstreamCrate { trait_desc: String, self_desc: Option<String> },\n+    UpstreamCrateUpdate { trait_desc: String, self_desc: Option<String> },\n+    ReservationImpl { message: String },\n+}\n+\n+impl IntercrateAmbiguityCause {\n+    /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n+    /// See #23980 for details.\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n+        err.note(&self.intercrate_ambiguity_hint());\n+    }\n+\n+    pub fn intercrate_ambiguity_hint(&self) -> String {\n+        match self {\n+            &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n+                let self_desc = if let &Some(ref ty) = self_desc {\n+                    format!(\" for type `{}`\", ty)\n+                } else {\n+                    String::new()\n+                };\n+                format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n+            }\n+            &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n+                let self_desc = if let &Some(ref ty) = self_desc {\n+                    format!(\" for type `{}`\", ty)\n+                } else {\n+                    String::new()\n+                };\n+                format!(\n+                    \"upstream crates may add a new impl of trait `{}`{} \\\n+                     in future versions\",\n+                    trait_desc, self_desc\n+                )\n+            }\n+            &IntercrateAmbiguityCause::ReservationImpl { ref message } => message.clone(),\n+        }\n+    }\n+}\n+\n pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n "}]}