{"sha": "5318248f24afbcc61cf948bbcacd61d8b157c24a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTgyNDhmMjRhZmJjYzYxY2Y5NDhiYmNhY2Q2MWQ4YjE1N2MyNGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T00:11:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-10T00:11:21Z"}, "message": "rustc: Annotate vector and string literals in the AST with their uniqueness or lack thereof", "tree": {"sha": "c0664c9958f28f12cd254f11101d8b85d0b5bbfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0664c9958f28f12cd254f11101d8b85d0b5bbfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5318248f24afbcc61cf948bbcacd61d8b157c24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5318248f24afbcc61cf948bbcacd61d8b157c24a", "html_url": "https://github.com/rust-lang/rust/commit/5318248f24afbcc61cf948bbcacd61d8b157c24a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5318248f24afbcc61cf948bbcacd61d8b157c24a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c481028388b076c74bc68c001f173b8ec5a4b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c481028388b076c74bc68c001f173b8ec5a4b83", "html_url": "https://github.com/rust-lang/rust/commit/1c481028388b076c74bc68c001f173b8ec5a4b83"}], "stats": {"total": 156, "additions": 111, "deletions": 45}, "files": [{"sha": "b36a956464cac0381df9db8592f7e2a8fbbfef2b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -247,9 +247,15 @@ tag spawn_dom {\n     dom_thread;\n }\n \n+// FIXME: temporary\n+tag seq_kind {\n+    sk_unique;\n+    sk_rc;\n+}\n+\n type expr = spanned[expr_];\n tag expr_ {\n-    expr_vec(vec[@expr], mutability, ann);\n+    expr_vec(vec[@expr], mutability, seq_kind, ann);\n     expr_tup(vec[elt], ann);\n     expr_rec(vec[field], option::t[@expr], ann);\n     expr_call(@expr, vec[@expr], ann);\n@@ -294,7 +300,7 @@ tag expr_ {\n \n type lit = spanned[lit_];\n tag lit_ {\n-    lit_str(str);\n+    lit_str(str, seq_kind);\n     lit_char(char);\n     lit_int(int);\n     lit_uint(uint);"}, {"sha": "567066436e40cfb3bd1ea18b3f49801ee2d36f5a", "filename": "src/comp/front/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Feval.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -104,7 +104,7 @@ fn eval_lit(ctx cx, span sp, @ast::lit lit) -> val {\n     alt (lit.node) {\n         case (ast::lit_bool(?b)) { ret val_bool(b); }\n         case (ast::lit_int(?i)) { ret val_int(i); }\n-        case (ast::lit_str(?s)) { ret val_str(s); }\n+        case (ast::lit_str(?s,_)) { ret val_str(s); }\n         case (_) {\n             cx.sess.span_err(sp, \"evaluating unsupported literal\");\n         }"}, {"sha": "b3410545c57421ee1bc942aeb5cd948afc31cba3", "filename": "src/comp/front/extenv.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fextenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fextenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextenv.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -40,22 +40,15 @@ fn expand_syntax_ext(&ext_ctxt cx,\n \n // FIXME: duplicate code copied from extfmt:\n \n-fn expr_to_str(&ext_ctxt cx,\n-               @ast::expr expr) -> str {\n+fn expr_to_str(&ext_ctxt cx, @ast::expr expr) -> str {\n     alt (expr.node) {\n         case (ast::expr_lit(?l, _)) {\n             alt (l.node) {\n-                case (ast::lit_str(?s)) {\n-                    ret s;\n-                }\n-                case (_) {\n-                    cx.span_err(l.span, \"malformed #env call\");\n-                }\n+                case (ast::lit_str(?s,_)) { ret s; }\n+                case (_) { cx.span_err(l.span, \"malformed #env call\"); }\n             }\n         }\n-        case (_) {\n-            cx.span_err(expr.span, \"malformed #env call\");\n-        }\n+        case (_) { cx.span_err(expr.span, \"malformed #env call\"); }\n     }\n }\n \n@@ -67,8 +60,7 @@ fn make_new_lit(&ext_ctxt cx, common::span sp, ast::lit_ lit)\n }\n \n fn make_new_str(&ext_ctxt cx, common::span sp, str s) -> @ast::expr {\n-    auto lit = ast::lit_str(s);\n-    ret make_new_lit(cx, sp, lit);\n+    ret make_new_lit(cx, sp, ast::lit_str(s, ast::sk_rc));\n }\n \n //"}, {"sha": "eca0ddc9ba4a68f98579cff639b2cd9a7c703b34", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -49,12 +49,8 @@ fn expr_to_str(&ext_ctxt cx, @ast::expr expr) -> str {\n     alt (expr.node) {\n         case (ast::expr_lit(?l, _)) {\n             alt (l.node) {\n-                case (ast::lit_str(?s)) {\n-                    ret s;\n-                }\n-                case (_) {\n-                    cx.span_err(l.span, err_msg);\n-                }\n+                case (ast::lit_str(?s,_)) { ret s; }\n+                case (_) { cx.span_err(l.span, err_msg); }\n             }\n         }\n         case (_) {\n@@ -77,7 +73,7 @@ fn pieces_to_expr(&ext_ctxt cx, common::span sp,\n     }\n \n     fn make_new_str(&ext_ctxt cx, common::span sp, str s) -> @ast::expr {\n-        auto lit = ast::lit_str(s);\n+        auto lit = ast::lit_str(s, ast::sk_rc);\n         ret make_new_lit(cx, sp, lit);\n     }\n \n@@ -109,7 +105,8 @@ fn pieces_to_expr(&ext_ctxt cx, common::span sp,\n \n     fn make_vec_expr(&ext_ctxt cx, common::span sp, vec[@ast::expr] exprs)\n             -> @ast::expr {\n-        auto vecexpr = ast::expr_vec(exprs, ast::imm, cx.next_ann());\n+        auto vecexpr = ast::expr_vec(exprs, ast::imm, ast::sk_rc,\n+                                     cx.next_ann());\n         auto sp_vecexpr = @rec(node=vecexpr, span=sp);\n         ret sp_vecexpr;\n     }"}, {"sha": "d3a8fa9a3293ac536cad8ed7339eab4b1116c003", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -682,7 +682,7 @@ fn parse_lit(&parser p) -> ast::lit {\n             }\n             case (token::LIT_STR(?s)) {\n                 p.bump();\n-                lit = ast::lit_str(p.get_str(s));\n+                lit = ast::lit_str(p.get_str(s), ast::sk_rc);\n             }\n             case (?t) {\n                 unexpected(p, t);\n@@ -826,7 +826,30 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         auto es = parse_seq_to_end[@ast::expr](token::RBRACKET,\n                                                some(token::COMMA),\n                                                pf, p);\n-        ex = ast::expr_vec(es, mut, p.get_ann());\n+        ex = ast::expr_vec(es, mut, ast::sk_rc, p.get_ann());\n+    } else if (p.peek() == token::TILDE) {\n+        p.bump();\n+        alt (p.peek()) {\n+            case (token::LBRACKET) {    // unique array (temporary)\n+                p.bump();\n+                auto mut = parse_mutability(p);\n+                auto es = parse_seq_to_end(token::RBRACKET,\n+                                           some(token::COMMA), parse_expr, p);\n+                ex = ast::expr_vec(es, mut, ast::sk_unique, p.get_ann());\n+            }\n+            case (token::LIT_STR(?s)) {\n+                p.bump();\n+                auto lit = @rec(\n+                    node=ast::lit_str(p.get_str(s), ast::sk_unique),\n+                    span=p.get_span()\n+                );\n+                ex = ast::expr_lit(lit, p.get_ann());\n+            }\n+            case (_) {\n+                p.get_session().span_unimpl(p.get_span(),\n+                    \"unique pointer creation\");\n+            }\n+        }\n     } else if (eat_word(p, \"obj\")) {\n         // Anonymous object\n \n@@ -1632,7 +1655,7 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n         }\n         case (ast::stmt_expr(?e,_)) {\n             alt (e.node) {\n-                case (ast::expr_vec(_,_,_))      { ret true; }\n+                case (ast::expr_vec(_,_,_,_))    { ret true; }\n                 case (ast::expr_tup(_,_))        { ret true; }\n                 case (ast::expr_rec(_,_,_))      { ret true; }\n                 case (ast::expr_call(_,_,_))     { ret true; }"}, {"sha": "0846f59710312c4e8ade79029d08bdb12fd9b4ac", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -3365,7 +3365,7 @@ fn trans_lit(&@crate_ctxt cx, &ast::lit lit, &ast::ann ann) -> ValueRef {\n         case (ast::lit_nil) {\n             ret C_nil();\n         }\n-        case (ast::lit_str(?s)) {\n+        case (ast::lit_str(?s, _)) {\n             ret C_str(cx, s);\n         }\n     }\n@@ -5619,7 +5619,7 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n             ret trans_cast(cx, e, ann);\n         }\n \n-        case (ast::expr_vec(?args, _, ?ann)) {\n+        case (ast::expr_vec(?args, _, _, ?ann)) {\n             ret trans_vec(cx, args, ann);\n         }\n "}, {"sha": "af64f01a13eaefdc6a09d3cc8fe4a98fb09452cd", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -265,7 +265,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n             vec::push[@expr](args, operator);\n             find_pre_post_exprs(fcx, args, a);\n         }\n-        case (expr_vec(?args, _, ?a)) {\n+        case (expr_vec(?args, _, _, ?a)) {\n             find_pre_post_exprs(fcx, args, a);\n         }\n         case (expr_tup(?elts, ?a)) {"}, {"sha": "1669d4e697075cb7699d28d2118f9f7fbbeba15f", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -143,7 +143,7 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n \n   /* FIXME could get rid of some of the copy/paste */\n   alt (e.node) {\n-    case (expr_vec(?elts, _, ?a)) {\n+    case (expr_vec(?elts, _, _, ?a)) {\n         ret find_pre_post_state_exprs(fcx, pres, a, elts); \n     }\n     case (expr_tup(?elts, ?a)) {"}, {"sha": "acfcb93cb2fd09e4778fe2a9f8505ed7a4b2995a", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -1580,7 +1580,7 @@ fn item_ann(&@ast::item it) -> ast::ann {\n \n fn expr_ann(&@ast::expr e) -> ast::ann {\n     alt (e.node) {\n-        case (ast::expr_vec(_,_,?a)) { ret a; }\n+        case (ast::expr_vec(_,_,_,?a)) { ret a; }\n         case (ast::expr_tup(_,?a)) { ret a; }\n         case (ast::expr_rec(_,_,?a)) { ret a; }\n         case (ast::expr_call(_,_,?a)) { ret a; }\n@@ -2139,6 +2139,7 @@ mod unify {\n             case (ty::ty_float)      { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_char)       { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_str)        { ret struct_cmp(cx, expected, actual); }\n+            case (ty::ty_istr)       { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_type)       { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_native)     { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_param(_))   { ret struct_cmp(cx, expected, actual); }\n@@ -2238,6 +2239,33 @@ mod unify {\n                 }\n             }\n \n+            case (ty::ty_ivec(?expected_mt)) {\n+                alt (struct(cx.tcx, actual)) {\n+                    case (ty::ty_ivec(?actual_mt)) {\n+                        auto mut;\n+                        alt (unify_mut(expected_mt.mut, actual_mt.mut)) {\n+                            case (none) { ret ures_err(terr_vec_mutability); }\n+                            case (some(?m)) { mut = m; }\n+                        }\n+\n+                        auto result = unify_step(cx,\n+                                                 expected_mt.ty,\n+                                                 actual_mt.ty);\n+                        alt (result) {\n+                            case (ures_ok(?result_sub)) {\n+                                auto mt = rec(ty=result_sub, mut=mut);\n+                                ret ures_ok(mk_ivec(cx.tcx, mt));\n+                            }\n+                            case (_) {\n+                                ret result;\n+                            }\n+                        }\n+                    }\n+\n+                    case (_) { ret ures_err(terr_mismatch); }\n+                }\n+            }\n+\n             case (ty::ty_port(?expected_sub)) {\n                 alt (struct(cx.tcx, actual)) {\n                     case (ty::ty_port(?actual_sub)) {"}, {"sha": "637e4c05669b8e03647827498c2577cd0b61b84c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -1259,7 +1259,8 @@ fn replace_node_type_only(&ty::ctxt tcx, uint fixup, ty::t new_t) {\n \n fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {\n     alt (lit.node) {\n-        case (ast::lit_str(_))              { ret ty::mk_str(ccx.tcx); }\n+        case (ast::lit_str(_, ast::sk_rc))     { ret ty::mk_str(ccx.tcx); }\n+        case (ast::lit_str(_, ast::sk_unique)) { ret ty::mk_istr(ccx.tcx); }\n         case (ast::lit_char(_))             { ret ty::mk_char(ccx.tcx); }\n         case (ast::lit_int(_))              { ret ty::mk_int(ccx.tcx);  }\n         case (ast::lit_float(_))            { ret ty::mk_float(ccx.tcx);  }\n@@ -1334,9 +1335,9 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat, ty::t expected) {\n                     fcx.ccx.tcx.sess.span_err(pat.span, #fmt(\n   \"this pattern has %u field%s, but the corresponding variant has %u field%s\",\n                         subpats_len,\n-                        if (subpats_len == 0u) { \"\" } else { \"s\" },\n+                        if (subpats_len == 1u) { \"\" } else { \"s\" },\n                         arg_len,\n-                        if (arg_len == 0u) { \"\" } else { \"s\" }));\n+                        if (arg_len == 1u) { \"\" } else { \"s\" }));\n                 }\n \n                 // TODO: vec::iter2\n@@ -1352,7 +1353,7 @@ fn check_pat(&@fn_ctxt fcx, &@ast::pat pat, ty::t expected) {\n                 fcx.ccx.tcx.sess.span_err(pat.span, #fmt(\n \"this pattern has %u field%s, but the corresponding variant has no fields\",\n                     subpats_len,\n-                    if (subpats_len == 0u) { \"\" } else { \"s\" }));\n+                    if (subpats_len == 1u) { \"\" } else { \"s\" }));\n             }\n \n             write::ty_fixup(fcx, ann.id, path_tpot);\n@@ -2025,7 +2026,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             write::ty_only_fixup(fcx, a.id, t_1);\n         }\n \n-        case (ast::expr_vec(?args, ?mut, ?a)) {\n+        case (ast::expr_vec(?args, ?mut, ?kind, ?a)) {\n             let ty::t t;\n             if (vec::len[@ast::expr](args) == 0u) {\n                 t = next_ty_var(fcx);\n@@ -2040,7 +2041,16 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 demand::simple(fcx, expr.span, t, expr_t);\n             }\n \n-            auto typ = ty::mk_vec(fcx.ccx.tcx, rec(ty=t, mut=mut));\n+            auto typ;\n+            alt (kind) {\n+                case (ast::sk_rc) {\n+                    typ = ty::mk_vec(fcx.ccx.tcx, rec(ty=t, mut=mut));\n+                }\n+                case (ast::sk_unique) {\n+                    typ = ty::mk_ivec(fcx.ccx.tcx, rec(ty=t, mut=mut));\n+                }\n+            }\n+\n             write::ty_only_fixup(fcx, a.id, typ);\n         }\n "}, {"sha": "bc0740d9fb78c525a98b6b898014c5d7dfada18f", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -246,7 +246,7 @@ fn visit_exprs[E](vec[@expr] exprs, &E e, &vt[E] v) {\n \n fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n     alt (ex.node) {\n-        case (expr_vec(?es, _, _)) {\n+        case (expr_vec(?es, _, _, _)) {\n             visit_exprs(es, e, v);\n         }\n         case (expr_tup(?elts, _)) {"}, {"sha": "6b568ba0a5bd722da46af2baba89c9cc0ebbe450", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -321,7 +321,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n     if (!v.keep_going()) { ret; }\n     v.visit_expr_pre(e);\n     alt (e.node) {\n-        case (ast::expr_vec(?es, _, _)) {\n+        case (ast::expr_vec(?es, _, _, _)) {\n             walk_exprs(v, es);\n         }\n         case (ast::expr_tup(?elts, _)) {"}, {"sha": "3e9a3918e9a0d5d53eba71600e57d2ddfd9fbbf9", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -225,7 +225,10 @@ fn print_literal(&ps s, &@ast::lit lit) {\n     }\n \n     alt (lit.node) {\n-        case (ast::lit_str(?st)) {print_string(s, st);}\n+        case (ast::lit_str(?st,?kind)) {\n+            if (kind == ast::sk_unique) { word(s.s, \"~\"); }\n+            print_string(s, st);\n+        }\n         case (ast::lit_char(?ch)) {\n             word(s.s, \"'\" + escape_str(str::from_bytes([ch as u8]), '\\'')\n                 + \"'\");"}, {"sha": "20fe17c48c099deade05d0a72633412186dbb175", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -463,9 +463,14 @@ fn print_expr(&ps s, &@ast::expr expr) {\n     }\n \n     alt (expr.node) {\n-        case (ast::expr_vec(?exprs,?mut,_)) {\n+        case (ast::expr_vec(?exprs,?mut,?kind,_)) {\n             ibox(s, indent_unit);\n-            word(s.s, \"[\");\n+\n+            alt (kind) {\n+                case (ast::sk_rc) { word(s.s, \"[\"); }\n+                case (ast::sk_unique) { word(s.s, \"~[\"); }\n+            }\n+\n             if (mut == ast::mut) {\n                 word_nbsp(s, \"mutable\");\n             }"}, {"sha": "5669aa5b2fa4c4a45c8ff0265d1bca80a396feaa", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5318248f24afbcc61cf948bbcacd61d8b157c24a/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=5318248f24afbcc61cf948bbcacd61d8b157c24a", "patch": "@@ -233,9 +233,11 @@ fn local_rhs_span(&@ast::local l, &span def) -> span {\n \n fn lit_eq(&@ast::lit l, &@ast::lit m) -> bool {\n     alt (l.node) {\n-        case (ast::lit_str(?s)) {\n+        case (ast::lit_str(?s,?kind_s)) {\n             alt (m.node) {\n-                case (ast::lit_str(?t)) { ret s == t; }\n+                case (ast::lit_str(?t,?kind_t)) {\n+                    ret s == t && kind_s == kind_t;\n+                }\n                 case (_)           { ret false; }\n             }\n         }"}]}