{"sha": "41578507a616affe87f168dbbc6d11437234bafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTc4NTA3YTYxNmFmZmU4N2YxNjhkYmJjNmQxMTQzNzIzNGJhZmQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-26T20:52:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-10-26T20:52:03Z"}, "message": "flatten nested slice patterns in HAIR construction\n\nnested slice patterns have the same functionality as non-nested\nones, so flatten them in HAIR construction.\n\nFixes #26158.", "tree": {"sha": "16e71acf22135116cc8cd3dfdf89719ce63f012d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16e71acf22135116cc8cd3dfdf89719ce63f012d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41578507a616affe87f168dbbc6d11437234bafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41578507a616affe87f168dbbc6d11437234bafd", "html_url": "https://github.com/rust-lang/rust/commit/41578507a616affe87f168dbbc6d11437234bafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41578507a616affe87f168dbbc6d11437234bafd/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d3e89b484bbcd1c2fec60794c196d7148dd9f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3e89b484bbcd1c2fec60794c196d7148dd9f5b", "html_url": "https://github.com/rust-lang/rust/commit/8d3e89b484bbcd1c2fec60794c196d7148dd9f5b"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "a6c886533c86cba73fa6b770a9d5b091c43b9306", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/41578507a616affe87f168dbbc6d11437234bafd/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41578507a616affe87f168dbbc6d11437234bafd/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=41578507a616affe87f168dbbc6d11437234bafd", "patch": "@@ -117,6 +117,7 @@ impl<'a, 'gcx, 'tcx> Pattern<'tcx> {\n         if !pcx.errors.is_empty() {\n             span_bug!(pat.span, \"encountered errors lowering pattern: {:?}\", pcx.errors)\n         }\n+        debug!(\"Pattern::from_hir({:?}) = {:?}\", pat, result);\n         result\n     }\n }\n@@ -346,6 +347,40 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         pat.as_ref().map(|p| self.lower_pattern(p))\n     }\n \n+    fn flatten_nested_slice_patterns(\n+        &mut self,\n+        prefix: Vec<Pattern<'tcx>>,\n+        slice: Option<Pattern<'tcx>>,\n+        suffix: Vec<Pattern<'tcx>>)\n+        -> (Vec<Pattern<'tcx>>, Option<Pattern<'tcx>>, Vec<Pattern<'tcx>>)\n+    {\n+        let orig_slice = match slice {\n+            Some(orig_slice) => orig_slice,\n+            None => return (prefix, slice, suffix)\n+        };\n+        let orig_prefix = prefix;\n+        let orig_suffix = suffix;\n+\n+        // dance because of intentional borrow-checker stupidity.\n+        let kind = *orig_slice.kind;\n+        match kind {\n+            PatternKind::Slice { prefix, slice, mut suffix } |\n+            PatternKind::Array { prefix, slice, mut suffix } => {\n+                let mut orig_prefix = orig_prefix;\n+\n+                orig_prefix.extend(prefix);\n+                suffix.extend(orig_suffix);\n+\n+                (orig_prefix, slice, suffix)\n+            }\n+            _ => {\n+                (orig_prefix, Some(Pattern {\n+                    kind: box kind, ..orig_slice\n+                }), orig_suffix)\n+            }\n+        }\n+    }\n+\n     fn slice_or_array_pattern(\n         &mut self,\n         span: Span,\n@@ -355,24 +390,22 @@ impl<'a, 'gcx, 'tcx> PatternContext<'a, 'gcx, 'tcx> {\n         suffix: &[P<hir::Pat>])\n         -> PatternKind<'tcx>\n     {\n+        let prefix = self.lower_patterns(prefix);\n+        let slice = self.lower_opt_pattern(slice);\n+        let suffix = self.lower_patterns(suffix);\n+        let (prefix, slice, suffix) =\n+            self.flatten_nested_slice_patterns(prefix, slice, suffix);\n+\n         match ty.sty {\n             ty::TySlice(..) => {\n                 // matching a slice or fixed-length array\n-                PatternKind::Slice {\n-                    prefix: self.lower_patterns(prefix),\n-                    slice: self.lower_opt_pattern(slice),\n-                    suffix: self.lower_patterns(suffix),\n-                }\n+                PatternKind::Slice { prefix: prefix, slice: slice, suffix: suffix }\n             }\n \n             ty::TyArray(_, len) => {\n                 // fixed-length array\n                 assert!(len >= prefix.len() + suffix.len());\n-                PatternKind::Array {\n-                    prefix: self.lower_patterns(prefix),\n-                    slice: self.lower_opt_pattern(slice),\n-                    suffix: self.lower_patterns(suffix),\n-                }\n+                PatternKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n             }\n \n             _ => {"}, {"sha": "54f5313aed16e7d4a3367ba99d7ecb08d89ee1e5", "filename": "src/test/compile-fail/issue-26158.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/41578507a616affe87f168dbbc6d11437234bafd/src%2Ftest%2Fcompile-fail%2Fissue-26158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41578507a616affe87f168dbbc6d11437234bafd/src%2Ftest%2Fcompile-fail%2Fissue-26158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26158.rs?ref=41578507a616affe87f168dbbc6d11437234bafd", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let x: &[u32] = &[];\n+    let &[[ref _a, ref _b..]..] = x; //~ ERROR refutable pattern\n+}"}, {"sha": "bd0731a555cb6d80feef08a5c33d975580936f2b", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/41578507a616affe87f168dbbc6d11437234bafd/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41578507a616affe87f168dbbc6d11437234bafd/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=41578507a616affe87f168dbbc6d11437234bafd", "patch": "@@ -144,11 +144,26 @@ fn e() {\n     assert_eq!(c, 1);\n }\n \n+fn f() {\n+    let x = &[1, 2, 3, 4, 5];\n+    let [a, [b, [c, ..].., d].., e] = *x;\n+    assert_eq!((a, b, c, d, e), (1, 2, 3, 4, 5));\n+\n+    let x: &[isize] = x;\n+    let (a, b, c, d, e) = match *x {\n+        [a, [b, [c, ..].., d].., e] => (a, b, c, d, e),\n+        _ => unimplemented!()\n+    };\n+\n+    assert_eq!((a, b, c, d, e), (1, 2, 3, 4, 5));\n+}\n+\n pub fn main() {\n     a();\n     b();\n     b_slice();\n     c();\n     d();\n     e();\n+    f();\n }"}]}