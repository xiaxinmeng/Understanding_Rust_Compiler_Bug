{"sha": "be162da9614624f8fd5f5d03909bb99c6ab2c647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMTYyZGE5NjE0NjI0ZjhmZDVmNWQwMzkwOWJiOTljNmFiMmM2NDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-16T16:27:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-16T16:28:21Z"}, "message": "libcore: Log newtyped enums correctly. Closes #3506.", "tree": {"sha": "1f508a2e1404fdfcf7638254f490f82abdad9860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f508a2e1404fdfcf7638254f490f82abdad9860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be162da9614624f8fd5f5d03909bb99c6ab2c647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be162da9614624f8fd5f5d03909bb99c6ab2c647", "html_url": "https://github.com/rust-lang/rust/commit/be162da9614624f8fd5f5d03909bb99c6ab2c647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be162da9614624f8fd5f5d03909bb99c6ab2c647/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2018cd912cc98e0c3555b3ca827ad504fe02c3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2018cd912cc98e0c3555b3ca827ad504fe02c3d4", "html_url": "https://github.com/rust-lang/rust/commit/2018cd912cc98e0c3555b3ca827ad504fe02c3d4"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "9c12c5430ca33a1a4fc30bb639af9afd9f30adf4", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/be162da9614624f8fd5f5d03909bb99c6ab2c647/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be162da9614624f8fd5f5d03909bb99c6ab2c647/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=be162da9614624f8fd5f5d03909bb99c6ab2c647", "patch": "@@ -500,7 +500,8 @@ fn test_repr2() {\n enum EnumVisitState {\n     PreVariant,     // We're before the variant we're interested in.\n     InVariant,      // We're inside the variant we're interested in.\n-    PostVariant     // We're after the variant we're interested in.\n+    PostVariant,    // We're after the variant we're interested in.\n+    Newtype         // This is a newtyped enum.\n }\n \n impl EnumVisitState : cmp::Eq {\n@@ -859,13 +860,14 @@ impl ReprPrinterWrapper : TyVisitor {\n \n     // Enums\n \n-    fn visit_enter_enum(_n_variants: uint, sz: uint, align: uint) -> bool {\n+    fn visit_enter_enum(n_variants: uint, sz: uint, align: uint) -> bool {\n         unsafe {\n             self.printer.align(align);\n \n             // Write in the location of the end of this enum.\n             let end_ptr = transmute(self.printer.ptr as uint + sz);\n-            let new_state = EnumState { end_ptr: end_ptr, state: PreVariant };\n+            let state = if n_variants == 1 { Newtype } else { PreVariant };\n+            let new_state = EnumState { end_ptr: end_ptr, state: state };\n             self.printer.enum_stack.push(new_state);\n \n             true\n@@ -889,21 +891,27 @@ impl ReprPrinterWrapper : TyVisitor {\n                         stack.set_elt(stack.len() - 1, enum_state);\n                     }\n                 }\n+                Newtype => {\n+                    self.printer.writer.write_str(name);\n+                }\n                 InVariant | PostVariant => {}\n             }\n             true\n         }\n     }\n \n     fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool {\n-        if self.printer.enum_stack.last().state == InVariant {\n-            if i == 0 {\n-                self.printer.writer.write_char('(');\n-            } else {\n-                self.printer.writer.write_str(\", \");\n-            }\n+        match self.printer.enum_stack.last().state {\n+            InVariant | Newtype => {\n+                if i == 0 {\n+                    self.printer.writer.write_char('(');\n+                } else {\n+                    self.printer.writer.write_str(\", \");\n+                }\n \n-            intrinsic::visit_tydesc(inner, self as @TyVisitor);\n+                intrinsic::visit_tydesc(inner, self as @TyVisitor);\n+            }\n+            PreVariant | PostVariant => {}\n         }\n         true\n     }\n@@ -920,6 +928,9 @@ impl ReprPrinterWrapper : TyVisitor {\n                 enum_state.state = PostVariant;\n                 stack.set_elt(stack.len() - 1, enum_state);\n             }\n+            Newtype => {\n+                if n_fields >= 1 { self.printer.writer.write_char(')'); }\n+            }\n             PreVariant | PostVariant => {}\n         }\n         true"}]}