{"sha": "092afdba3c81d122b4b24aa49dd445023b5daef6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmFmZGJhM2M4MWQxMjJiNGIyNGFhNDlkZDQ0NTAyM2I1ZGFlZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T07:56:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T07:56:47Z"}, "message": "auto merge of #12907 : alexcrichton/rust/issue-12892, r=brson\n\nThese methods can be mistaken for general \"read some bytes\" utilities when\r\nthey're actually only meant for reading an exact number of bytes. By renaming\r\nthem it's much clearer about what they're doing without having to read the\r\ndocumentation.\r\n\r\nCloses #12892", "tree": {"sha": "4f3abfd529e1fedb998bb48351a39c7b8be3b548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3abfd529e1fedb998bb48351a39c7b8be3b548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092afdba3c81d122b4b24aa49dd445023b5daef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092afdba3c81d122b4b24aa49dd445023b5daef6", "html_url": "https://github.com/rust-lang/rust/commit/092afdba3c81d122b4b24aa49dd445023b5daef6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092afdba3c81d122b4b24aa49dd445023b5daef6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "993dee4f1421cceddbb434e04826d1359a9c8512", "url": "https://api.github.com/repos/rust-lang/rust/commits/993dee4f1421cceddbb434e04826d1359a9c8512", "html_url": "https://github.com/rust-lang/rust/commit/993dee4f1421cceddbb434e04826d1359a9c8512"}, {"sha": "811257eda5edd7d7d9586a9be4f45a2d4dfa4701", "url": "https://api.github.com/repos/rust-lang/rust/commits/811257eda5edd7d7d9586a9be4f45a2d4dfa4701", "html_url": "https://github.com/rust-lang/rust/commit/811257eda5edd7d7d9586a9be4f45a2d4dfa4701"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "e5938569ea3aac86480726473f74bd8c3831309e", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=092afdba3c81d122b4b24aa49dd445023b5daef6", "patch": "@@ -283,7 +283,7 @@ mod test {\n     #[test]\n     fn read_bytes() {\n         let mut reader = MemReader::new(~[10, 11, 12, 13]);\n-        let bytes = reader.read_bytes(4).unwrap();\n+        let bytes = reader.read_exact(4).unwrap();\n         assert!(bytes == ~[10, 11, 12, 13]);\n     }\n \n@@ -292,49 +292,49 @@ mod test {\n         let mut reader = PartialReader {\n             count: 0,\n         };\n-        let bytes = reader.read_bytes(4).unwrap();\n+        let bytes = reader.read_exact(4).unwrap();\n         assert!(bytes == ~[10, 11, 12, 13]);\n     }\n \n     #[test]\n     fn read_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n-        assert!(reader.read_bytes(4).is_err());\n+        assert!(reader.read_exact(4).is_err());\n     }\n \n     #[test]\n-    fn push_bytes() {\n+    fn push_exact() {\n         let mut reader = MemReader::new(~[10, 11, 12, 13]);\n         let mut buf = ~[8, 9];\n-        reader.push_bytes(&mut buf, 4).unwrap();\n+        reader.push_exact(&mut buf, 4).unwrap();\n         assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n     }\n \n     #[test]\n-    fn push_bytes_partial() {\n+    fn push_exact_partial() {\n         let mut reader = PartialReader {\n             count: 0,\n         };\n         let mut buf = ~[8, 9];\n-        reader.push_bytes(&mut buf, 4).unwrap();\n+        reader.push_exact(&mut buf, 4).unwrap();\n         assert!(buf == ~[8, 9, 10, 11, 12, 13]);\n     }\n \n     #[test]\n-    fn push_bytes_eof() {\n+    fn push_exact_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n         let mut buf = ~[8, 9];\n-        assert!(reader.push_bytes(&mut buf, 4).is_err());\n+        assert!(reader.push_exact(&mut buf, 4).is_err());\n         assert!(buf == ~[8, 9, 10, 11]);\n     }\n \n     #[test]\n-    fn push_bytes_error() {\n+    fn push_exact_error() {\n         let mut reader = ErroringLaterReader {\n             count: 0,\n         };\n         let mut buf = ~[8, 9];\n-        assert!(reader.push_bytes(&mut buf, 4).is_err());\n+        assert!(reader.push_exact(&mut buf, 4).is_err());\n         assert!(buf == ~[8, 9, 10]);\n     }\n "}, {"sha": "88ffc363e88751e0a4d62368238cb8f23d2eaaa2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=092afdba3c81d122b4b24aa49dd445023b5daef6", "patch": "@@ -360,13 +360,13 @@ pub trait Reader {\n         }\n     }\n \n-    /// Reads `len` bytes and appends them to a vector.\n+    /// Reads exactly `len` bytes and appends them to a vector.\n     ///\n     /// May push fewer than the requested number of bytes on error\n     /// or EOF. If `Ok(())` is returned, then all of the requested bytes were\n     /// pushed on to the vector, otherwise the amount `len` bytes couldn't be\n     /// read (an error was encountered), and the error is returned.\n-    fn push_bytes(&mut self, buf: &mut ~[u8], len: uint) -> IoResult<()> {\n+    fn push_exact(&mut self, buf: &mut ~[u8], len: uint) -> IoResult<()> {\n         struct State<'a> {\n             buf: &'a mut ~[u8],\n             total_read: uint\n@@ -396,18 +396,19 @@ pub trait Reader {\n             |s| unsafe { s.buf.set_len(start_len + s.total_read) })\n     }\n \n-    /// Reads `len` bytes and gives you back a new vector of length `len`\n+    /// Reads exactly `len` bytes and gives you back a new vector of length\n+    /// `len`\n     ///\n     /// # Error\n     ///\n     /// Fails with the same conditions as `read`. Additionally returns error\n     /// on EOF. Note that if an error is returned, then some number of bytes may\n     /// have already been consumed from the underlying reader, and they are lost\n     /// (not returned as part of the error). If this is unacceptable, then it is\n-    /// recommended to use the `push_bytes` or `read` methods.\n-    fn read_bytes(&mut self, len: uint) -> IoResult<~[u8]> {\n+    /// recommended to use the `push_exact` or `read` methods.\n+    fn read_exact(&mut self, len: uint) -> IoResult<~[u8]> {\n         let mut buf = slice::with_capacity(len);\n-        match self.push_bytes(&mut buf, len) {\n+        match self.push_exact(&mut buf, len) {\n             Ok(()) => Ok(buf),\n             Err(e) => Err(e),\n         }\n@@ -424,7 +425,7 @@ pub trait Reader {\n     fn read_to_end(&mut self) -> IoResult<~[u8]> {\n         let mut buf = slice::with_capacity(DEFAULT_BUF_SIZE);\n         loop {\n-            match self.push_bytes(&mut buf, DEFAULT_BUF_SIZE) {\n+            match self.push_exact(&mut buf, DEFAULT_BUF_SIZE) {\n                 Ok(()) => {}\n                 Err(ref e) if e.kind == EndOfFile => break,\n                 Err(e) => return Err(e)"}, {"sha": "db615aaad620bbe4346e5664c2062dbc617589d3", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092afdba3c81d122b4b24aa49dd445023b5daef6/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=092afdba3c81d122b4b24aa49dd445023b5daef6", "patch": "@@ -207,7 +207,7 @@ pub fn parse(file: &mut io::Reader,\n     }\n \n     // don't read NUL\n-    let bytes = try!(file.read_bytes(names_bytes as uint - 1));\n+    let bytes = try!(file.read_exact(names_bytes as uint - 1));\n     let names_str = match str::from_utf8_owned(bytes) {\n         Some(s) => s, None => return Err(~\"input not utf-8\"),\n     };\n@@ -250,7 +250,7 @@ pub fn parse(file: &mut io::Reader,\n             string_offsets.push(try!(file.read_le_u16()));\n         }\n \n-        let string_table = try!(file.read_bytes(string_table_bytes as uint));\n+        let string_table = try!(file.read_exact(string_table_bytes as uint));\n \n         if string_table.len() != string_table_bytes as uint {\n             return Err(~\"error: hit EOF before end of string table\");"}]}