{"sha": "ffa7a01a18589e335e5199fbeab427571ff0a8d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTdhMDFhMTg1ODllMzM1ZTUxOTlmYmVhYjQyNzU3MWZmMGE4ZDI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-16T04:51:38Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-16T16:06:00Z"}, "message": "Add more timing info to rustdoc", "tree": {"sha": "738f137b6ba0939ea6920400a5c5fb4166f4773e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/738f137b6ba0939ea6920400a5c5fb4166f4773e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa7a01a18589e335e5199fbeab427571ff0a8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa7a01a18589e335e5199fbeab427571ff0a8d2", "html_url": "https://github.com/rust-lang/rust/commit/ffa7a01a18589e335e5199fbeab427571ff0a8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa7a01a18589e335e5199fbeab427571ff0a8d2/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4031f7b0a8047653f2f989f2d8579bf5650e71ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4031f7b0a8047653f2f989f2d8579bf5650e71ca", "html_url": "https://github.com/rust-lang/rust/commit/4031f7b0a8047653f2f989f2d8579bf5650e71ca"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "54bb93fa46476c2b3bcf74c7afdbbbfe62b70344", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffa7a01a18589e335e5199fbeab427571ff0a8d2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa7a01a18589e335e5199fbeab427571ff0a8d2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ffa7a01a18589e335e5199fbeab427571ff0a8d2", "patch": "@@ -551,10 +551,13 @@ crate fn get_auto_trait_and_blanket_impls(\n     ty: Ty<'tcx>,\n     param_env_def_id: DefId,\n ) -> impl Iterator<Item = Item> {\n-    AutoTraitFinder::new(cx)\n-        .get_auto_trait_impls(ty, param_env_def_id)\n-        .into_iter()\n-        .chain(BlanketImplFinder::new(cx).get_blanket_impls(ty, param_env_def_id))\n+    let auto_impls = cx.sess().time(\"get_auto_trait_impls\", || {\n+        AutoTraitFinder::new(cx).get_auto_trait_impls(ty, param_env_def_id)\n+    });\n+    let blanket_impls = cx.sess().time(\"get_blanket_impls\", || {\n+        BlanketImplFinder::new(cx).get_blanket_impls(ty, param_env_def_id)\n+    });\n+    auto_impls.into_iter().chain(blanket_impls)\n }\n \n crate fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {"}, {"sha": "60fcbe748727d445e9bf61d776df9dda48668310", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ffa7a01a18589e335e5199fbeab427571ff0a8d2/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa7a01a18589e335e5199fbeab427571ff0a8d2/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=ffa7a01a18589e335e5199fbeab427571ff0a8d2", "patch": "@@ -16,13 +16,13 @@ crate const COLLECT_TRAIT_IMPLS: Pass = Pass {\n \n crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     let mut synth = SyntheticImplCollector::new(cx);\n-    let mut krate = synth.fold_crate(krate);\n+    let mut krate = cx.sess().time(\"collect_synthetic_impls\", || synth.fold_crate(krate));\n \n     let prims: FxHashSet<PrimitiveType> = krate.primitives.iter().map(|p| p.1).collect();\n \n     let crate_items = {\n         let mut coll = ItemCollector::new();\n-        krate = coll.fold_crate(krate);\n+        krate = cx.sess().time(\"collect_items_for_trait_impls\", || coll.fold_crate(krate));\n         coll.items\n     };\n \n@@ -39,16 +39,18 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // Also try to inline primitive impls from other crates.\n     for &def_id in PrimitiveType::all_impls(cx.tcx).values().flatten() {\n         if !def_id.is_local() {\n-            inline::build_impl(cx, None, def_id, None, &mut new_items);\n+            cx.sess().time(\"build_primitive_trait_impl\", || {\n+                inline::build_impl(cx, None, def_id, None, &mut new_items);\n \n-            // FIXME(eddyb) is this `doc(hidden)` check needed?\n-            if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n-                let self_ty = cx.tcx.type_of(def_id);\n-                let impls = get_auto_trait_and_blanket_impls(cx, self_ty, def_id);\n-                let mut renderinfo = cx.renderinfo.borrow_mut();\n+                // FIXME(eddyb) is this `doc(hidden)` check needed?\n+                if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n+                    let self_ty = cx.tcx.type_of(def_id);\n+                    let impls = get_auto_trait_and_blanket_impls(cx, self_ty, def_id);\n+                    let mut renderinfo = cx.renderinfo.borrow_mut();\n \n-                new_items.extend(impls.filter(|i| renderinfo.inlined.insert(i.def_id)));\n-            }\n+                    new_items.extend(impls.filter(|i| renderinfo.inlined.insert(i.def_id)));\n+                }\n+            })\n         }\n     }\n \n@@ -151,11 +153,13 @@ impl<'a, 'tcx> DocFolder for SyntheticImplCollector<'a, 'tcx> {\n         if i.is_struct() || i.is_enum() || i.is_union() {\n             // FIXME(eddyb) is this `doc(hidden)` check needed?\n             if !self.cx.tcx.get_attrs(i.def_id).lists(sym::doc).has_word(sym::hidden) {\n-                self.impls.extend(get_auto_trait_and_blanket_impls(\n-                    self.cx,\n-                    self.cx.tcx.type_of(i.def_id),\n-                    i.def_id,\n-                ));\n+                self.cx.sess().time(\"get_auto_trait_and_blanket_synthetic_impls\", || {\n+                    self.impls.extend(get_auto_trait_and_blanket_impls(\n+                        self.cx,\n+                        self.cx.tcx.type_of(i.def_id),\n+                        i.def_id,\n+                    ));\n+                });\n             }\n         }\n "}]}